Identifying Change Patterns of Concept

Attributes in Ontology Evolution

Duy Dinh1, Julio Cesar Dos Reis1,2, C edric Pruski1,
Marcos Da Silveira1, and Chantal Reynaud-Delatre2

1 CR SANTEC, Public Research Centre Henri Tudor, Luxembourg

{duy.dinh,julio.dosreis,cedric.pruski,marcos.dasilveira}@tudor.lu,

2 LRI, University of Paris-Sud XI, France

chantal.reynaud@lri.fr

Abstract. Ontology versions are periodically released to ensure their
usefulness and reliability over time. This potentially impacts dependent
artefacts such as mappings and annotations. Dealing with requires to
finely characterize ontology entities changes between ontology versions.
This article proposes to identify change patterns at attribute values when
an ontology evolves, to track textual statements describing concepts. We
empirically evaluate our approach by using biomedical ontologies, for
which new ontology versions are frequently released. Our achieved results
suggest the feasibility of the proposed techniques.

Keywords: ontology evolution, ontology changes, change patterns,
ontology versioning, biomedical ontologies.

Introduction

The dynamic aspect of knowledge in various domains requires that knowledge
engineers apply changes to different ontology entities by adding, removing and
revising them. This periodically leads to new ontology versions, which ensures
that software applications use the most up-to-date representation of the domain knowledge. Ontology changes potentially impact mappings, annotations
and queries which rely on these ontologies [1,2].

Changes applied to generate new ontology versions are not always fully doc-
umented, which impedes the minimization and handling of their impact. To
this end, we need methods to automatically identify ontology change operations
(OCOs) in an explicit way, given two versions of the same ontology [3]. Our previous studies have underlined the need of precisely characterizing the evolution
of attributes describing concepts for maintaining mappings valid over time [4,5].
When analyzing two consecutive versions of the same ontology, for instance,
we found cases where textual statements which are values of attributes describing
concepts are completely transferred from one concept to its siblings. This had
affected the associated mappings since their definition relies on such textual
information. For example, we observed this case with the concept 560.39 of the

V. Presutti et al. (Eds.): ESWC 2014, LNCS 8465, pp. 768783, 2014.
c Springer International Publishing Switzerland 2014
?

?

?
ICD-9-CM1 (ICD) biomedical ontology. Such concept contains three attributes
and one of them has as value Fecal impaction (release 2009). Five mappings are
defined with this concept as domain, and one of these mappings has a range called
Fecal impaction (disorder), from SNOMED CT2 (SCT). After evolution (i.e.,
ICD release 2010), the attribute value Fecal impaction is no longer associated
with the ICD concept and the previously mentioned mapping has been removed.
Moreover, the concept Fecal impaction has been newly created in ICD (release
2010) and is reconnected to Fecal impaction (disorder) of SCT.

Literature has highlighted challenges related to ontology changes management and has proposed change patterns to improve the ontology evolution process [6,7]. Although useful tools exist to identify the most traditional and frequent
OCOs between two ontology versions [3,8,9], taking into account the nature of
changes (e.g., atomic or complex) and the type of changes (e.g., addition, re-
moval, splitting, merging of entities), these tools fail to automatically identify
ontology modifications at a finer level of detail, required for supporting tasks dependent on ontology changes (e.g., mapping adaptation). This remains an open
issue that requires further research.

behaviours of the evolution of attributes.

To cope with this issue, our proposal underscores a nontrivial solution to
recognize the diffusion of attribute values between concepts from one version
of the ontology to another. We inquire whether techniques based on linguistic
characteristics of textual values, combined with similarity measure, play a role
in supporting automatic change patterns identification at the level of concept
attributes. In summary, we make the following contributions:
 We formally define a set of ontology change patterns to express different
 We introduce a novel linguistic-based approach implementing methods to automatically identify instances of the proposed change patterns by comparing
successive ontology versions. We investigate different techniques to rank candidate attributes in the identification method. Our systematic study provides
useful tools to precisely characterize ontology evolution.
 We experimentally assess our approach by using real-world biomedical ontologies as a case study. We investigate the influence of different aspects in
the performance of the proposed methods and our obtained results show
innovative findings.

We structure the remainder of this article as follows: Section 2 discusses related work; Section 3 reports on our approach to change patterns; Section 4
describes the techniques for identifying change patterns; Section 5 presents the
evaluation while Section 6 draws conclusions and future work.

2 Ontology Change Patterns

Noy & Klein [6] have originally evoked the notion of change patterns (CPs)
through a first simple classification of changes that may affect entities of

www.cdc.gov/nchs/icd/icd9cm.htm
www.ihtsdo.org/snomed-ct

D. Dinh et al.

ontologies at evolution time. This classification, under basic and complex changes,
paved the way for new approaches addressing ontology evolution. These approaches explore CPs to characterize complex changes and evolution scenarios,
simplifying the management of ontologies to control the impact of the evolution
and to ensure consistency in ontology [10].

Change patterns may allow to identify complex changes between versions of
the same ontology. Groner et al. [11] addressed the problem of refactoring recognition using reasoning to semantically compare different versions of an OWL DL
ontology. They proposed a high-level categorization of ontology changes like the
refactoring patterns in software engineering, and applied it to OWL ontology.

Some approaches define CPs at the level of RDF data model. Auer & Herre
[12] proposed to support ontology evolution by using basic changes and aggregate
them into more complex changes in RDF. Their approach consists in annotating
the derived compound changes with meta-information and classifying them as
ontology evolution patterns. Differently, Rie et al. [13] proposed a pattern-based
approach to evolving data and refactoring RDF knowledge bases. They defined
basic evolution patterns that can be combined into compound ones. Their work
formally specifies modular evolution patterns in a declarative manner, capturing
simple evolution and refactoring operations on both data and schema levels.

Djedidi & Aufaure defined an ontology evolution methodology driven by a
pattern-oriented modelling. They proposed the Change Management Patterns
to guide the ontology evolution process by driving and controlling change application while maintaining consistency of the evolving ontology [14]. They considered four kinds of consistency concerning the OWL DL language: structural,
logical, conceptual and domain modeling consistency [14]. The solution looks
for invariances in change management that repeatedly appear when ontologies
evolve. They proposed three types of patterns: change patterns classifying types
of changes, inconsistency patterns classifying types of logical inconsistencies, and
alternative patterns classifying types of inconsistency resolution alternatives.

Javed et al. suggested an approach to dealing with ontology evolution through
a framework of compositional operators where they represent domain changes
as CPs [7]. They composed this framework with different levels of change opera-
tors, and empirically studied ontology evolution to investigate the relationships
between generic and domain-specific changes to determine common CPs.

This literature review clearly highlights that existing approaches exploit CPs
to deal with ontology evolution, and frequently their definition relies on ontology
meta-models and languages (e.g., OWL or RDF). While existing change patterns
seem sufficient to identify a set of inconsistencies, they remain inefficient for dealing with the impact of ontology evolution on dependent artifacts because their
design fails to consider requirements for adapting mappings. We address CPs
at the level of attribute values using linguistic-based features for identifying the
diffusion of textual values between concepts over time. Complementary to other
approaches, we refine meta-model patterns on model level to further support the
ontology evolution impact, which influences the way we design the required CPs
and the recognition methods.
?

?

?
3 Change Patterns in Attribute Values

3.1 Preliminaries and Problem Definition
We adopt a traditional definition of ontology [15]. We define a set of concepts of
j),
an ontology Ox at time j as C(Ox
described by a set of attributes, has a unique identifier. We consider the set
of attributes characterizing a concept c as A(c) = {a1, a2, ..., an} (e.g., name,
definition, synonym, etc.). For instance, an attribute ai, of type name, contains
the value cardio vascular diseases. We use ai.value to denote the value of an
attribute ai. A relationship r  R interconnects two concepts and has a specific

}. Each concept cj

 C(Ox

j) = {cj

2, ..., cj
n

1, cj

i

type, e.g., subsumption, part-of , etc.

The context of a concept ci in the ontology stands for a set of super concepts
(sup(ci)), sub concepts (sub(ci)) and sibling concepts of ci (sib(ci)), as following:

CT (ci) = sup(ci)  sub(ci)  sib(ci)

where

sup(ci) = {ck|ck  C(Ox), ci  ck  ci = ck}
sub(ci) = {ck|ck  C(Ox), ck  ci  ci = ck}
sib(ci) = {ck|ck  C(Ox), sup(ck) = sup(ci)  ci / sup(ck)}

(1)

(2)

where ci  ck means that ci is related to ck through a subsumption relationship.

Figure 1 depicts the investigated scenario. Given an attribute ai from a concept c at time t0, we investigate a way to characterize how such attribute evolves
by considering the context of the concept c1 at time t1 (i.e., in the new version
of ontology Ox). Evolution of ontology entities usually remains restricted in an
ontology space like the context [4]. We focus on ai.value to identify useful behaviours of evolution concerning the attributes and search for describing these
behaviours as well-delineated change patterns. We face issues to determine which
attribute at time t1 represents the most adequate candidate in the recognition
process to identify CPs occurrences. We apply syntactic analysis techniques to
recognize textual values of attributes in different versions of the same ontology.

3.2 Proposed Change Patterns

 C(O1

Considering change patterns (CPs) as means to deal with ontology entity
changes, we focus on changes related to concepts attribute values. Therefore, our
defined change patterns relate to the linguistic characteristics of the attributes
value before and after their evolution. We denote O0
x an ontology Ox at time
t0 and c1
x) a concept belonging to this ontology at time t1. A change
 C(O0
k
pattern between an attribute a0
x) and another attribute a1
 CT (c1
q
of concept c1
k) occurs when changes in the value of the attribute a0
p
which shares some similarity with the attribute a1
q are observed. In addition, we
suppose that the attribute a1
q is new or its value differs at time t1 from the one
at time t0. Therefore, any change pattern must satisfy the following constraint :
q / A(c0
a0

cand)  a0

p of concept c0
k

= a1

(3)

cand

q

q

D. Dinh et al.

Fig. 1. Problem definition

We define the CP classes as total copy (TC), total transfer (TT), par-
tial copy (PC), and partial transfer (PT). Table 1 illustrates the proposed
change patterns and presents examples borrowed from the biomedical domain.
We justify our definition of CPs through the specific needs to understand ontology changes to support mapping adaptation [5]. We assume that correctly
identifying the defined CPs will support addressing the adaptation of ontology
mappings [2].

Table 1. Description and examples of the proposed change patterns from attribute a0
q. The symbol  means that the corresponding attribute does not exist.
p
to attribute a1

t1

t0
ABC ABC

CP type

total copy (TC)

attribute

ap

aq

ap
aq
ap

aq

ap
aq

ABC ABC(D)

ABC ABC
ABC ABC(D)
ABC ABC

ABC AB(D)

ABC ABC
ABC AB(D)

example

t0
portal
encephalopathy


systemic

fecal impaction

familial hyperchy-
lomicronemia


systemic

systemic

t1
portal
encephalopathy
portal
encephalopathy

fecal impaction
familial hyperchy-
lomicronemia
familial
cronemia

head swelling

chylomi-

total transfer (TT)

partial copy (PC)

partial transfer (PT)

eye swelling


In what follows, we define W (aj

i ) as a set of words/tokens from ai.value of
an attribute ai, and wj
ki as a single word/token from an attribute value at time
tj. The sim(a0
q) function refers to the similarity between the value of the
attributes a0
cand). The used similarity measure indicates
p
the degree of relatedness between two given textual values. We use the  parameter to control the overlap in terms of words between two attribute values. Since

p, a1
 A(c0

 A(c1

k) and a1
q
?

?

?
the performance of the similarity measure is not the focus of this paper, we keep
it generic in our definition of CPs so that we can choose it as a parameter in our
experiments. We formalize each type of CP between ap and aq, if any, as follows:
 Total copy. A total copy of content occurs between attribute a0

p in concept
ck and a1
q in concept ccand if and only if a minimal degree  of words in
ap appears in aq and a minimal similarity value  exists between them.
Formally:

T C(a0

p, a1

q) 































 A(c0
k)
 C(O1
x)
 A(c1
k)
q)  
p, a1
p)  W (a1

a0
p
c1
k
a1
p
sim(a0
W (a0

q)/W (a0

p)  

(4)

 Total transfer. A total transfer of content occurs between attribute a0

p in
concept ck and a1
q in concept ccand if and only if a minimal degree  of words
in ap appears in aq and a minimal similarity value  exists between them
while the original attribute a0
x. Note that in total
copy (cf. Equation 4) a1
k) while in total transfer (cf. Equation 5)
p / A(c1
p
a1

k) which states the main difference between them. Formally:

p is removed from c1
k

 A(c1

 O1

T T (a0

p, a1

q) 

















 A(c0
a0
k)
p
p / A(c1
a1
k)
q)  
p, a1
sim(a0
p)  W (a1
W (a0

q)/W (a0

p)  

(5)

 Partial copy. A partial copy of content occurs between attribute a0

concept ck and a1
between words constituting attributes a0
similarity value  and a degree of overlap between 0 and . Formally:

p in
q in concept ccand if and only if there exists a partial overlap
q, while respecting a minimal

p and a1

P C(a0

p, a1

q) 














































 A(c0
a0
k)
p
 C(O1
c1
x)
 A(c1
k
a1
k)
p
 W (a0
w0
p), w0
ip
w0
 W (a0
p), w0
q)  
p, a1
sim(a0
0  W (a0
p)  W (a1

jp

ip

 W (a1
q)
jp / W (a1
q)
q)/W (a0

p)  

(6)

 Partial transfer. A partial transfer of content occurs between attribute a0
p
q in concept ccand if and only if there exists a partial
q while respecting a

in concept ck and a1
overlap between words constituting attributes a0

p and a1

D. Dinh et al.

minimal similarity value  , a degree of overlap between 0 and , and the
original attribute a0

p is removed from c0
k

x. Formally:

 O0

P T (a0

p, a1

q) 















 A(c0
a0
k)
p
p / A(c1
a1
k)
 W (a0
wp
wp
 W (a0
sim(a0
p, a1
0  W (a0

j

i
























 W (a1
q)
j / W (a1
q)

i

p), wp
p), wp
q)  
p)  W (a1

q)/W (a0

p)  

(7)

4 Recognizing Change Patterns Related to Attributes

In our approach to recognize change pattern, we first determine a candidate
attribute a1
k (Section 4.1). This candidate refers
to a changed attribute at time t1 related to the attribute a0
k that
we used to identify occurences of CPs (Section 4.2).

q in the context of a concept c1

p in concept c0

4.1 Candidate Attribute in the Context

 A(c0

k) from O0

We designed Algorithm 1 that explores textual attributes from a given concept
at time t0. In particular, given an attribute a0
x, the algorithm
p
courses the whole set of changed attributes of the context of ck at time t1 by
calculating the similarity to retrieve candidate attributes. It aims to find the most
adequate attribute in the context of the given one from A(ck), which we will use
in Algorithm 2 to identify change patterns. We consider the types of comparable
textual attributes as a parameter in our approach. For example, we can take only
attributes of type name and synonym into consideration when comparing
the attribute values (i.e., strings denoting concepts). Our methods exclude all
types of attributes out of the comparable set of attributes defined beforehand.
The function sim(a0
j ) computes the similarity between two given attribute
values. It returns a value ranging from 0 to 1. The higher the result is, the
more similar these attributes are. We explore traditional string-based similarity
metrics (the bi-gram measure), when calculating the similarity between attribute
values in Algorithm 1. We selected this metric as the default similarity because
it performs well on ontology matching [16].

i , a1

Algorithm 1 generates a list of candidate attributes which is denoted

p) = {(aq1 , simpq1), (aq2 , simpq2), ..., (aqm , simpqm )}, where aqi 
as Scand(a0
A(CT (c1
p) stores the candidate
attributes along with their similarity with the attribute a0
k). This algo-
p
rithm uses a ranking function to determine the best candidate attribute as a
result.

k)) and simpqi = sim(a0

qi ). In fact, Scand(a0

 A(c0

p, a1

We distinguish two ranking approaches to find the best candidate attribute:
global and local. The candidate attribute may have a strong influence on the
CP identification method which motivates us to investigate both rankings.
?

?

?
Algorithm 1. Find candidate attribute in the context

k)  C(O1
x)

Require: a0
sim  ; a1
for all c1

for all a1

if a0

p  A(c0
k); CT (c1
q  ; Scand  ;
i  CT (c1
k) do
i  A(c1
i ) do
i / A(c0
i = a1
i )  a0
sim  sim(a0
p, a1
i );
Scand  Scand  {(a1

i then

i , sim)};

i , c1

end if
end for

end for
return Scand  rank(Scand).f irst;

 Global ranking (GR). In this ranking the best a1

q candidate attribute
(found at time t1) refers to the one that has the highest similarity with a
given attribute a0
k). We denote this as the global candidate because
p
the selection relies on the optimum similarity value considering the whole
context. Formally:

 A(c0

{sim(a0

qi )}

p))  arg max
A(CT (c1

k))

a1
qi

p, a1

candidateGR(Scand(a0

(8)
 Local ranking (LR). Unlike the GR, this approach assumes that the
best candidate attribute locates in a part of the evolving ontology where
we observe most changes in attributes. LR executes two steps: (1) it analyzes which elements of the context of concept c (i.e., sup(c), sub(c), sib(c))
has the highest number of changed attributes; (2) based on this result, it
selects the most similar attribute. We refer to this as the local candidate
because the selection relies on the optimum similarity value considering part
of the context. We compute the distribution of the different relationship
types from the context in the list of changed attributes Scand(a0
p) as follows:

dist(Scand(a0

p),  ) =

(9)
  is among the three types of relationships we consider in CT (c) intercon-
 f (a1

qi ) stands for the function counting the frequency of a particular rela-

necting super, sub and sibling concepts.



f (a1
qi )
Scand(a0
p)

tionship type, defined as follows:

f (a1

qi ) =


?

?

?
if rel(a1
otherwise

qi ) = 

where rel(a1
by attribute a0
candidate as follows:

qi ) refers to the type of relationship between concepts c0

p and c1

cand denoted by attribute a1

k denoted
qi . We define the local

D. Dinh et al.

candidateLR(Scand(a0

p)) 















a1
qi

4.2 Identification Method

best dist( )  arg max
A(CT (c1

a1
qi

k))

dist(Scand(a0

p),  )

arg max

best dist( )rel(a1

qi )=

sim(a0

p, a1

qi )

(10)

cand refers to the concept denoted by attribute a1

Algorithm 2 describes the designed procedure to identify CPs. The best candidate c1
q, retrieved with algorithm
1. For each candidate a1
q, the algorithm checks whether its similarity value with
attribute a0
p is greater or equal to a threshold  , and the conditions for applying each type of change pattern on the couple of attributes a0
q. To this
end, it calculates the number of common words between a0
q by removing
stop words from the original attributes. The algorithm also explores whether attributes a0
cand) remain at time t1 (i.e., it is not removed).
p
According to the definitions, the algorithm assigns the adequate CP. Given two
versions of the same ontology, we can apply Algorithm 2 to all concepts placed
in ontology regions affected by traditional change operations.

 A(c0

 A(c1

k) and a1
q

p and a1

p and a1

Algorithm 2. Change pattern identification

x); CT (c1

k)  C(O1
x)

p)  W (a1
q)
p)    nbEqW ords > 0  nbEqW ords < W (a0

p)

Require: a0

p  A(c0

k  C(O0

k); c0

CP  ; sim  0; nbEqW ords  0
q; sim  Algorithm 1(a0
a1
k));
if a1

p; CT (c1

q =  then
if 0 < sim >  then
nbEqW ords  W (a0
if nbEqW ords/W (a0
then

if a1

else

k) then
p, a1

p  A(c1
CP  P C(a0
CP  P T (a0

p, a1

q);

q);

else

end if
if nbEqW ords/W (a0
k) then
p, a1

p  A(c1
CP  T C(a0
CP  T T (a0

if a1

p, a1

else

q);

q);

p)   then

end if

end if

end if

end if

end if
return (a0

p, a1

q, CP );
?

?

?
5 Experimental Evaluation

We present the used materials followed by the experimental procedure conducted
to achieve the following objectives:
 We evaluate the effectiveness of the proposed methods for identifying change
 We assess the proposed ranking functions by comparing their performance.

patterns based on exploiting lexical features of attributes.

5.1 Materials

In the conducted experiments we used various versions of three large biomedical ontologies: SNOMED-CT (SCT), MeSH and ICD-9-CM (ICD9). Table 2
presents statistics regarding the number of concepts, attributes and the number
of direct subsumption relationships between concepts, since this study focused on
exploiting the hierarchical structure of ontologies. SCT contains a much higher
number of concepts than MeSH and ICD9. Table 2 also depicts the evolution of
concepts and attributes for the three studied biomedical ontologies in a combined
way over the last years. This dynamic evolution motivates us to use biomedical
ontologies as a case study in this research.

Table 2. Evolution of biomedical ontologies. The numbers between parentheses represent the change rate between two releases of the same ontology.

ontology

ICD-9-CM

SNOMED-CT

MeSH

year #concepts
?

?

?
#attributes #subsumptions
?

?

?
13059 (+2.55%) 34963
386965
395346 (+2.12%) 1570504 (+2.50%) 539245 (+2.83%)

50971 (+1.18%) 264783 (+1.97%) 59844 (+1.09%)

(+2.64%) 11962 (+2.95 %)

1531288

523958

259565

Reference change patterns. To evaluate the effectiveness of our approach,
we defined a set of reference change patterns as our standards. We needed to
build our own set of reference since no available gold standard exists for the
investigated context. To this end, we conducted the following steps:
 We combined the ontologies and we randomly selected a set of 1.000 couples of attributes. We defined the size of our sample in accordance with the
involved experts taking into account their availability and scientific consistencies for our experiments. One attribute of a couple comes from a concept
at time tj and the other one in the same couple comes from a concept in the
context of the former concept in the same ontology at time tj+1. We chose
these couples based on the similarity between attribute values, excluding
attributes with very low similarity and unchanged attributes at time tj+1.

D. Dinh et al.

 We invited three ontology engineering experts to evaluate all selected couples
of attributes to assign their answer regarding CPs. For this purpose, we
supported them with a software tool suited to present additional information
regarding each attribute. This tool presents the couple of attributes along
with concepts in the context, the attributes denoting concepts as well as
the changes affecting them, etc. We gave instructions on the purpose of the
different patterns, and recorded the answers for each evaluator separately.
 The evaluators performed one round of evaluation, and we merged the agreement answers. The domain experts collaborated and re-evaluated a second
round only with the disagreement part of couples. We merged the final agreement couples with the respective correct answers according to the evaluators.
We achieved an average agreement rate of 86%. Finally, we retained 675 pairs
of attributes that had the consent from all evaluators for our experiments.

5.2 Experimental Procedure

For evaluating the effectiveness of our CP identification algorithm, we computed
the standard metrics of Precision, Recall and F-measure based on the reference
CPs as input. Specifically, we computed the precision as the number of CPs correctly identified by the algorithm over the total number of identified CPs. Recall
was computed as the number of correctly identified CPs over the total number
of relevant/expected CPs in the set of reference. F-measure was computed as
the harmonic mean of precision and recall.

We investigated the influence of the similarity threshold in the CP identification algorithm. For this purpose, we analyzed the CP identification performance
by varying the similarity threshold from 0 to 1 to observe the performance of
our algorithm, and we set  = . Additionally, we examined the quality of the
outcomes by comparing both GR and LR ranking functions proposed.

5.3 Results

Figure 2 presents the effectiveness of the CP identification algorithm in terms of
precision, recall and F-measure by varying the similarity thresholds (denoted as
 ). We achieved these results using the global ranking in Algorithm 1.

The performance of this algorithm varies according to the value of  . Overall,
the F-measure is greater than 0.60 for all types of CP. We observe that the similarity threshold plays a relevant role in CP identification because its performance
dramatically changes when the threshold is set very low (e.g.,  < 0.5). Our CP
identification algorithm reaches the best performance with thresholds ranging
from 0.7 to 0.9, which points out the necessity of having a minimal similarity
between attributes to boost the identification results.

By observing the results for each type of CP, we found that the identification of partial copy CP reaches the highest F-measure of 0.68 (precision=0.61,
recall=0.77) at  = 0.75. This remains similar to the case of total copy CP,
where the highest F-measure is 0.66 (precision=0.66, recall=0.66) at  = 0.85.
Moreover, the recall for total copy CP tends to be higher than the precision for
?

?

?
 < 0.85, but we observed the contrary phenomenon for partial copy CP. We
potentially explain this by the fact that for correctly identifying total copy CPs
require higher similarity between attributes, while for partial copy, the higher the
similarity value, the lower the number of partial copy CPs correctly identified.
Regarding total transfer CP, Algorithm 2 reaches the best F-measure at 0.78
(precision=0.90, recall=0.69) for  = 0.80. The algorithm performs better on
identifying total transfer than on partial transfer. Partial transfer CP seems a
particular case (not frequently found) because evaluators assigned only one case
in the reference change patterns.

Partial Copy

Partial Transfer

e
c
n
a
m
r
o
f
r
e

.

.

.

e
c
n
a
m
r
o
f
r
e

.

.

.

Precision
Recall
Fmeasure

Precision
Recall
Fmeasure

e
c
n
a
m
r
o
f
r
e

.

.

.

0.2

0.4

0.6

0.8

Similarity values

0.2

0.4

0.6

0.8

Similarity values

Total Copy

Total Transfer

e
c
n
a
m
r
o
f
r
e

.

.

.

Precision
Recall
Fmeasure

Precision
Recall
Fmeasure

0.2

0.4

0.6

0.8

Similarity values

0.2

0.4

0.6

0.8

Similarity values

Fig. 2. Effectiveness of the CP identification method (using GR ranking) in terms of
precision, recall and f-measure for the different types of change patterns

To analyze the results comparing the proposed rankings, we retain the maximum value of the similarity threshold, i.e.,  = 0.85, that optimizes the performance of the GR (denoted as baselineMAX). Tables 3 and 4 present the achieved
results for transfer and copy CPs by running our method using the local ranking
function. We chose the similarity thresholds among the values in the set {0.2,
0.4, 0.6, 0.75, 0.8} to analyze the performance, and compare the difference in
terms of precision, recall and F-measure between LR and GR.

D. Dinh et al.

Results in Table 3 reveal that the LR improves the performance in terms of
recall for total transfer with a maximum improvement rate of +4.69%, while
the performance dramatically decreases for precision and F-measure. For partial
transfer CP, the LR method outperforms the baseline for values of  in the
interval [0.6, 0.75]. The performance of the latter is zero for either precision,
recall and F-measure, probably because the similarity threshold was very high
( = 0.85). This suggests that CP identification for either partial or total transfer
must use a flexible or approximate string matching with an appropriate similarity
threshold that should not be very low (e.g., < 0.5) nor very high (e.g., > 0.8).
Regarding the performance of the local ranking for identifying copy CPs (cf.
Table 4), we observe that for total copy CP, the precision is proportional to the
similarity threshold while the recall is not. For partial copy CP, the local ranking
shows a significant improvement rate of +29.41 % for precision, +378% for recall
and +204% for F-measure by using  = 0.75.

Table 3. Performance of the identification method by using the LR ranking for transfer
CP. Numbers in parentheses correspond to the difference between P, R, F obtained by
LR comparatively to  of the baselineM AX of GR.

PPPPPPP



(P )

0.4

0.6

0.2

baselineM AX 0.89
0.50
(-43.82%)
0.50
(-43.82%)
0.53
(-40.45%)
0.79
(-11.24%)
0.79
(-11.24%)

0.75

0.8

Transfer of attributes

total

(R)
0.64
0.67
(+4.69%)
0.67
(+4.69%)
0.67
(+4.69%)
0.67
(+4.69%)
0.67
(+4.69%)

(F )
0.75
0.57
(-24.00%)
0.57
(-24.00%)
0.59
(-21.33%)
0.72
(-4.00%)
0.72
(-4.00%)

(P )
0.00
0.00
(0.00%)
0.00
(0.00%)
0.33
(INF)
0.05
(INF)
0.00
(0.00%)

partial

(R)
0.00
0.00
(0.00%)
0.00
(0.00%)
1.00
(INF)
1.00
(INF)
0.00
(0.00%)

(F )
0.00
0.00
(0.00%)
0.00
(0.00%)
0.50
(INF)
0.10
(INF)
0.00
(0.00%)

5.4 Discussion

We found that the suggested types of CPs at the level of attributes can be
observed in real cases of ontology evolution. These CPs refine the traditional ones
at a finer level of granularity to characterize ontology evolution. Overall results
pointed out the effectiveness of the proposed method underlaid by similarity
measure and intersection of words between attribute values to recognize CPs
between ontology versions. We demonstrated that the similarity threshold plays
an important role in the quality of the outcomes. We explain this by the fact
that our method selects the candidate attribute based on the similarity that is
proportional to the degree of relatedness between the analyzed attributes.
?

?

?
Table 4. Performance of the identification method by using the LR ranking for copy
CP. Numbers between parentheses correspond to the difference between P, R, F obtained by LR comparatively to  of the baselineM AX of GR.

PPPPPPP



(P )

0.4

0.6

0.2

baselineM AX 0.66
0.18
(-72.73%)
0.18
(-72.73%)
0.21
(-68.18%)
0.53
(-19.70%)
0.56
(-15.15%)

0.75

0.8

Copy of attributes

total

(R)
0.66
0.65
(-1.52%)
0.63
(-4.55%)
0.58
(-12.12%)
0.56
(-15.15%)
0.41
(-37.88%)

(F )
0.66
0.28
(-57.58%)
0.28
(-57.58%)
0.31
(-53.03%)
0.55
(-16.67%)
0.47
(-28.79%)

(P )
0.51
0.00
(-100.00%)
0.63
(+23.53%)
0.56
(+9.80%)
0.66
(+29.41%)
0.61
(+19.61%)

partial

(R)
0.14
0.00
(-100.00%)
0.03
(-78.57%)
0.20
(+42.86%)
0.67
(+378%)
0.28
(+100%)

(F )
0.22
0.00
(-100.00%)
0.06
(-72.73%)
0.30
(+36.36%)
0.67
(+204%)
0.39
(+77.27%)

When comparing the overall performance of CP identification under the GR
and LR methods, our findings demonstrated that considering both the types of
context relationships as well as their distribution affect the identification results.
The LR method performs better, in particular for partial copy with a significant
improvement compared to the GR. However, for total copy and transfer the
performance under LR remains low, probably because the nature of these CPs
requires a relatively high similarity threshold. We conclude that CPs of partial
type should base on the local ranking for selecting the candidate attribute in CP
recognition, while for CPs of total type we recommend using the global ranking.
Our scholarly obtained findings have revealed evidences of the quality of the
results that were yielded by the proposed method, relying on standard evaluation
metrics. In addition, we conducted experiments using real biomedical ontologies
which strengthens our results.

6 Conclusion

Ontology evolution requires further means to describe specific changes at different entities. This plays a relevant role in controlling the impact of changes
on dependent artefacts. In this article, we defined change patterns of concept
attributes to characterize the evolution of their textual values. We designed a
novel method to recognize the change patterns between ontology versions and
empirically evaluated our proposition by observing the evolution of biomedical
ontologies. We studied the influence of different aspects in the change pattern
identification on the quality of the outcomes. The achieved results showed evidences of the performance of the proposed method.

In addition to existing and traditional ontology change operations, our contribution in this article originally allows to characterize ontology evolution by

D. Dinh et al.

means of change patterns at attribute level. This stands for fine-grained changes
that may facilitate tasks related to the impact of ontology evolution such as
mapping and annotation maintenance. As future work, we aim to study techniques to recognize the way attribute values become more or less semantically
specific in ontology evolution, and to investigate to which extent the different
types of change patterns may influence the way ontology mappings evolve.

Acknowledgment. The National Research Fund (FNR) of Luxembourg
entirely supports this work under the DynaMO research project (Grant #C10/
IS/786147).
