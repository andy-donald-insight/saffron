Fast Modularisation and Atomic Decomposition

of Ontologies Using

Axiom Dependency Hypergraphs

Francisco Mart n-Recuerda1 and Dirk Walther2

1 Universidad Polit ecnica de Madrid, Spain

fmartinrecuerda@fi.upm.es

2 TU Dresden, Theoretical Computer Science

Center for Advancing Electronics Dresden, Germany

Dirk.Walther@tu-dresden.de

Abstract. In this paper we define the notion of an axiom dependency
hypergraph, which explicitly represents how axioms are included into
a module by the algorithm for computing locality-based modules. A
locality-based module of an ontology corresponds to a set of connected
nodes in the hypergraph, and atoms of an ontology to strongly connected
components. Collapsing the strongly connected components into single
nodes yields a condensed hypergraph that comprises a representation of
the atomic decomposition of the ontology. To speed up the condensation
of the hypergraph, we first reduce its size by collapsing the strongly connected components of its graph fragment employing a linear time graph
algorithm. This approach helps to significantly reduce the time needed
for computing the atomic decomposition of an ontology. We provide an
experimental evaluation for computing the atomic decomposition of large
biomedical ontologies. We also demonstrate a significant improvement in
the time needed to extract locality-based modules from an axiom dependency hypergraph and its condensed version.

Introduction

A module is a subset of an ontology that includes all the axioms required to
define a set of terms and the relationships between them. Computing minimal
modules is very expensive (or even impossible) and cheap approximations have
been developed based on the notion of locality [7]. Module extraction facilitates
the reuse of existing ontologies. Moreover, some meta-reasoning systems such as
MORe1 and Chainsaw2 also exploit module extraction techniques for improving
the performance of some reasoning tasks.

The number of all possible modules of an ontology can be exponential wrt.
the number of terms or axioms of the ontology [7]. Atomic decomposition was

 Partially supported by the German Research Foundation (DFG) via the Cluster of

Excellence Center for Advancing Electronics Dresden.

1 http://www.cs.ox.ac.uk/isg/tools/MORe/
2 http://sourceforge.net/projects/chainsaw/

P. Mika et al. (Eds.) ISWC 2014, Part II, LNCS 8797, pp. 4964, 2014.
 Springer International Publishing Switzerland 2014

F. Mart n-Recuerda and D. Walther

introduced as a succinct representation of all possible modules of an ontology [5].
Tractable algorithms for computing the atomic decomposition for locality-based
modules have been defined [5], and subsequently improved further [14]. Moreover,
it has been suggested that the atomic decomposition of an ontology can help to
improve the performance of the locality-based module extraction algorithm [4].
In this paper we introduce the notion of an axiom dependency hypergraph
(ADH) for OWL ontologies, which explicitly represents how axioms are included
into a module by the locality-based module extraction algorithm [7]. This algorithm first identifies the axioms that are non-local wrt. a given signature ,
and then it extends  with the symbols of the axioms selected. In this fashion,
the algorithm iteratively includes in the module more axioms of the ontology
that become non-local wrt. to the extended signature until no more axioms are
added. The hyperedges of an ADH indicate which axioms become non-local wrt.
a signature after one or more axioms of the ontology have been included in the
module [9]. Unlike other hypergraph representations of ontologies [12,10], the
relationship between atoms of an ontology and the strongly connected components (SCCs) of the ADH becomes apparent. This allows us to employ standard
algorithms from graph theory to compute atoms and locality-based modules.

To speed up the computation of SCCs in a directed hypergraph, we first compute the SCCs of its graph fragment (only directed edges are considered), and
subsequently we collapse them into a single nodes. Note that in directed graphs,
the SCCs can be computed in linear time wrt. the size of the graph [13], whereas
in directed hypergraphs, this process is at least quadratic [1]. In this way, we
manage to reduce the size of the original hypergraph significantly, in some cases,
which then reduces the time needed for computing the SCCs in the hypergraph.
The result of computing and collapsing all SCCs of an axiom dependency hypergraph yields its condensed version, a condensed axiom dependency hypergraph.
The graph fragment of this hypergraph corresponds to the atomic decomposition
of the ontology as introduced in [5]. From the condensed axiom dependency hy-
pergraph, it is also possible to compute locality-based modules using an adapted
version of the modularization algorithm discussed in [7]. In this case, a module
correspond to a connected component in the hypergraph.

We implemented our method in a Java prototype named HyS. We compared
our prototype against state-of-the-art implementations for computing localitybased modules and atomic decomposition [14,15]. We confirm a significant improvement in running time for a selection of large biomedical ontologies from
the NCBO Bioportal.3

The paper is organised as follows. In Section 2 we present relevant notions
on syntactic locality, atomic decomposition, and hypergraphs. In Section 3 we
introduce the notion of axiom dependency hypergraphs, and we use this notion to
characterise locality-based modules and the atomic decomposition of any OWL
ontology. We explain implementation details of HyS in Section 4, and we report
on the result of the evaluation of our Java prototype in Section 5. We conclude
this paper in a final section.

3 http://bioportal.bioontology.org/
?

?

?
2 Preliminaries
We consider ontologies formulated in the expressive description logic SROIQ [8]
which underlies the Web Ontology Language OWL 2.4 For the evaluation of our
algorithms for computing modules and the atomic decomposition as introduced
in this paper, we consider prominent biomedical ontologies formulated in the
light-weight description logic EL++ [2], which is at the core of the OWL 2 EL
profile.5 We refer to [3] for a detailed introduction to description logics.

2.1 Syntactic Locality-Based Modules
For an ontology O and a signature , a module M is a subset of O that preserves
all entailments formulated using symbols from  only. A signature  is a finite
set of symbols, and we denote with sig(X) the signature of X, where X ranges
over any syntactic object.
Definition 1 (Module). M  O is a module of O wrt. a signature  if for
all entailments  with sig()  : M |=  iff O |= .
?

?

?
Computing a minimal module is hard (or even impossible) for expressive fragments of OWL 2. The notion of syntactic locality was introduced to allow for
efficient computation of approximations of minimal modules [7]. Intuitively, an
axiom  is local wrt.  if it does not state anything about the symbols in .
In this case, an ontology can safely be extended with , or it can safely import
, where safe means not changing the meaning of terms in . A locality-based
module wrt.  of an ontology consists of the axioms that are non-local wrt. 
and the axioms that become non-local wrt.  extended with the symbols in
other non-local axioms. Typically the notions -locality and -locality are considered [7]. We denote with Mod xO() the x-local module of an ontology O wrt.
, where x  {,}.

Checking for syntactic locality involves checking that an axiom is of a certain
form (syntax), no reasoning is needed, and it can be done in polynomial time [7].
However, the state of non-locality of an axiom can also be checked in terms of
signature containment [12]. To this end, we introduce the notion of minimal
non-locality signature for SROIQ axioms.
Definition 2 (Minimal non-Locality Signature). Let x  {,} denote a
locality notion. A Minimal non-x-Locality Signature for an axiom  is a signature   sig() such that  is not x-local wrt. , and  is minimal (wrt.
set inclusion) with this property. The set of minimal non-x-locality signatures is

denoted by MLS x

( ).

The notion of minimal non-locality signature turns out to be equivalent to the
notion of minimal globalising signatures, which were introduced specifically for
computing modules from an atomic decomposition [4].

4 http://www.w3.org/TR/owl2-overview/
5 http://www.w3.org/TR/owl2-profiles/#OWL_2_EL

F. Mart n-Recuerda and D. Walther

The following example shows that there can be exponentially many minimal
non-locality signatures for an axiom using merely conjunction and disjunction
as logical operators.
Example 1. Let  = (X11  X12  X1m) (Xn1  Xn2  Xnm)  Y
be an axiom. The minimal non--locality signature MLS() of  is as follows:

MLS

() = {{X1i1, X2i2 , . . . , Xnin} |
i1, i2, . . . , in  {1, ..., m}}

()| = mn.

Then: |MLS
However, exponentially many minimal non-locality signatures can be avoided
if the axiom is normalised. An ontology O (that is formulated in the description
logic SRIQ) is normalised by applying the normalisation rules presented in [10],
which are an extension of the normalisation for EL ontologies [12]. Axioms of
a normalised ontology have one of the following forms, where Ai  NC  {},
Bi  NC  {}, Ri  NR  inv(NR), X, Y  {R.B, ( n R.B),R.Self | B 
NC, R  NR  inv(NR), n  0} and , m  0:

	

1 : A1  . . .  A  B1  . . .  Bm 5 : X  Y
2 : X  B1  . . .  Bm
6 : R1  R2
3 : A1  . . .  A  Y
7 : Dis(R1, R2)
4 : R1  . . .  R  R+1



, for r  NR, and R.Self expresses
where inv(NR) is the set of inverse roles r
the local reflexivity of R. The normalisation of an ontology O runs in linear time
in the size of O. The normalised ontology preserves -entailments of O [10].6
Notice that the normalisation rules can be applied backwards over normalised
axioms to compute the original axioms of the ontology. However, denormalisation
requires a careful application of the normalisation rules to ensure that we obtain
the original axioms.

There are at most two minimal non-locality signatures for a normalised axiom.

Proposition 1. Let  be a normalised axiom. Then: |MLS
|MLS

()|  2.

()| = 1 and
?

?

?
We can apply additional normalisation rules to reduce the number of symbols
on the left- and right-hand side of normalised axioms [9]. Bounding the number
of symbols in an axiom results in bounding the size of the minimal non-locality
signatures of the axiom.
We now give simple conditions under which normalised axioms are not syntactic local. Similar non-locality conditions are presented in the notions of -
and -reachability in [10].
6 The normalisation in [10] can straightforwardly be extended to SROIQ-ontologies.
Then a normalised axiom can be of the forms as described, where Ai and Bi additionally range over nominals. However, nominals are not contained in any minimal
non-locality signature of a normalised axiom.
?

?

?
Proposition 2 (Non-locality via Signature Containment). Let  be a
normalised axiom, and denote with LHS() and RHS() the left- and the righthand side of , respectively. Let  be a signature. Then:  is not -local wrt. 
iff one of the following holds:

 sig(LHS())   if  is of the form 1, 2, 3, 4, 5, 6;
 sig()   if  is of the form 7;
Then:  is not -local wrt.  iff  is of the form 7 or one of the following

holds:

 sig(RHS())   =  if  is of the form 3, 4, 5, 6;
 sig(RHS())   if  is of the form 1, 2.
?

?

?
2.2 Atomic Decomposition

An atom is a set of highly related axioms of an ontology in the sense that they
always co-occur in modules [5].

Definition 3 (Atom). An atom a is a maximal set of axioms of an ontology

O such that for every module M of O either a  M = a or a  M = .
Consequently, we have that two axioms  and  are contained in an atom a
iff ModxO(sig()) = ModxO(sig()), where sig() (sig()) is the signature of the
axiom  (). We denote with AtomsxO the set of all atoms of O wrt. syntactic x-
locality modules, for x  {,}. The atoms of an ontology partition the ontology
into pairwise disjoint subsets. All axioms of the ontology are distributed over
atoms such that every axiom occurs in exactly one atom. A dependency relation
between atoms can be established as follows [5].

Definition 4 (Dependency relation between atoms). An atom a2 depends
on an atom a1 in an ontology O (written a1 O a2) if a2 occurs in every module

of O containing a1. The binary relation O is a partial order.
In other words, an atom a2 depends on an atom a1 in an ontology O if the
module ModxO(sig()) is contained in the module ModxO(sig()), for some , 
with   a1 and   a2. For a given ontology O, the poset AtomsxO, O
was introduced as the Atomic Decomposition (AD ) of O, and it represents the
modular structure of the ontology [5].

2.3 Directed Hypergraphs
A directed hypergraph is a tuple H = (V,E), where V is a non-empty set of nodes
(vertices), and E is a set of hyperedges (hyperarcs) [6]. A hyperedge e is a pair
(T (e), H(e)), where T (e) and H(e) are non-empty disjoint subsets of V. H(e)
(T (e)) is known as the head (tail ) and represents a set of nodes where the hyperedge ends (starts). A B-hyperedge is a directed hyperedge with only one node in
the head. We call a B-hyperedge e simple if |T (e)| = 1 (i.e., if e corresponds to a

F. Mart n-Recuerda and D. Walther

A node v is B-connected (or forward reachable) from a set of nodes V

directed edge); otherwise, if |T (e)| > 1, e is called complex. Directed hypergraphs
containing B-hyperedges only are called directed B-hypergraphs; these are the
only type of hypergraphs considered in this paper.
V B v) if (i) v  V
all tail nodes in T (e) are B-connected from V
denote with B(V
from V

(written
, or (ii) there is a B-hyperedge e such that v  H(e) and
. For a set of nodes V  V, we
) = {v  V | V B v} of B-connected nodes
In a directed hypergraph H, two nodes v1 and v2 are strongly B-connected if
v2 is B-connected to v1 and vice versa. In other words, both nodes, v1 and v2, are
mutually connected. A strongly B-connected component (SCC) is a set of nodes
from H that are all mutually connected [1]. We allow an SCC to be a singleton set
since the connectivity relation is reflexive, i.e., any axiom is mutually connected
from itself.

) the set B(V

.

3 Axiom Dependency Hypergraph

Directed B-hypergraphs can be used to explicitly represent the locality-based
dependencies between axioms. Axiom dependency hypergraphs for ontologies wrt.
the locality-based modularity notions are defined as follows.
Definition 5 (Axiom Dependency Hypergraph). Let O be an ontology.
Let x  {,} denote a locality notion. The Axiom Dependency Hypergraph
HxO for O wrt. x-locality (x-ADH) is defined as the directed B-hypergraph HxO =
(V x,E x), where
 V x = O; and
 e = (T (e), H(e))  E x iff T (e)  V x and H(e) = {}, for some   V x,

such that:
(i)  / T (e), and
(ii)  is not x-local wrt. sig(T (e)).
?

?

?
The nodes of the axiom dependency hypergraph are the axioms in the on-
tology. Hyperedges are directed and they might connect many tail nodes with
one head node. Note that a head node of a hyperedge is not allowed to occur in
its tail. Intuitively, the tail nodes of an hyperedge e correspond to axioms that
provide the signature symbols required by the axiom represented by the head
node of e to be non-local. We can think on reaching B-connected nodes as how
the module extraction algorithm computes a module by successively including
axioms into the module [9].

The notion of ADH for ontologies depends on the notion of syntactic locality.
Using Prop. 2, we can similarly define this notion using minimal non-locality
signatures by replacing Item (ii) of Def. 5 with:
(iib)   sig(T (e)), for some   MLS().
An ADH HO contains all locality-based dependencies between different axioms of the ontology O. These dependencies are represented by the hyperedges in
?

?

?
in H such that H(e) = H(e

HO. Note that HO may contain exponentially many hyperedges, many of which
can be considered redundant in the following sense.
Definition 6. A hyperedge e in a directed B-hypergraph H is called redundant

if there is a hyperedge e
A compact version of a directed B-hypergraph H is obtained from H by removing
all redundant hyperedges while the B-connectivity relation between axioms is
preserved. In the remainder of the paper, we consider ADHs that are compact.
Notice that compact ADHs are unique and they may still contain exponentially
many hyperedges. The number of hyperedges can be reduced to polynomially
many by applying extra-normalisation rules that restrict the amount of signature
symbols in each side of the axiom up to 2 symbols.

)  T (e).

) and T (e
?

?

?
Next, we characterise modules and atoms together with their dependencies in

terms of ADHs for which B-connectivity is crucial.

3.1 Locality-Based Modules in an ADH

B-connectivity in an ADH can be used to specify locality-based modules in
the corresponding ontology. A locality-based module of an ontology O for the
signature of an axiom  (or a subset of axioms O  O) corresponds to the
B-connected component in the ADH for O from  (or O
Proposition 3. Let O be an ontology, O  O and  = sig(O
). Let B
be the B-connectivity relation of the x-ADH for O, where x  {,}. Then:
Mod xO() = B(O

However, ADHs do not contain sufficient information for computing a module

) [9].

).

for any signature as the following simple example shows.
Example 2. Let O = {1 = A  C, 2 = C  B  D, 3 = D  A} and
 = {A, B}. We have that Mod
() = {1, 2, 3}. The -ADH for O contains
no hyperedge e with H(e) = {2} and, consequently, 2 cannot be reached via

a hyperedge.

	

The problem can be solved by incorporating the signature  into the ADH.
The -extension HxO, of an x-ADH HxO for an ontology O wrt. x-locality,
x  {,}, is defined as the ADH according to Def. 5 but with Item (ii) replaced
with:
(iii)  is not x-local wrt.   sig(T (e)).

Intuitively, no symbol in  contributes to the dependencies between axioms.
Consequently, less axioms in the tail are needed to provide the signature for
non-locality of . Note that non-redundant hyperedges in the original ADH may
become redundant in the -extended ADH. The remaining hyperedges represent
the dependencies between axioms modulo .
Example 3. Let O and  be as in Ex. 2. The -extension of -ADH for O
contains the edge e = {{1},{2}}. Hence, 2 can be reached via the hyperedge
e. Axiom 1 is the only axiom that is not- local wrt. . The B-connected
nodes from 1 are the axioms in Mod

().

	

F. Mart n-Recuerda and D. Walther

Given the -extension of an ADH for an ontology, B-connectivity can be
used to determine the axioms that are not local wrt. to  and to compute the
corresponding locality-based module.
Proposition 4. Let O be an ontology,  a signature and x  {,}. Let Ox
 be
the set of axioms from O that are not x-local wrt. . Let B be the B-connectivity
relation of the -extension of the x-ADH for O. Then: Mod xO() = B(Ox
). 
Proof. The algorithm for computing the locality-based module Mod xO() (see [9])
computes a sequence M0, ...,Mn such that M0 = , Mi  Mi+1, for i 
{0, ..., n  1}, and Mn = Mod xO(). We show by induction on n > 0 that
M1 B , for every axiom   Mn.
For the direction from right to left of the set inclusion, we show that Ox
 B 
implies   Mod xO() by induction on the maximal length n = distH(Ox
, ) of

an acyclic hyperpath from an axiom  in Ox

 to .

3.2 ADH Atomic Decomposition

In the previous section, we have established that locality-based modules of an
ontology O correspond to sets of B-connected nodes in the axiom dependency
hypergraph for O. An atom of O consists of axioms  that share the same modules wrt. the signature of . It holds that for every x-local atom a  O with
x  {,}: ,   a if, and only if, Mod xO(sig()) = Mod xO(sig()) [5]. Together
with Proposition 3, we can now characterise the notion of an atom with a corresponding notion in axiom dependency hypergraphs. We have that two nodes in
an ADH represent axioms that are contained in the same atom if, and only if,
the nodes agree on the set of nodes that are B-connected from them. Formally:
,   a if, and only if, B() = B(), where B be the B-connectivity relation of the ADH HO for O. It follows that all axioms of an atom are mutually
B-connected in HO. Axioms that are mutually B-connected constitute strongly
B-connected components of HO. Consequently, the set of atoms for an ontology O corresponds to the set of strongly B-connected components in the axiom
dependency hypergraph for O. Let SCCs(HxO) be the set of strongly connected
components of the hypergraph HxO, where x  {,}.
Proposition 5. Let O be an ontology and let x  {,} denote a locality no-
tion. Let HxO = (V xO,E xO) be the x-ADH for O. Then: Atoms xO = SCCs(HxO). 

The condensed ADH is formed by collapsing the strongly B-connected components into single nodes and turning hyperedges between axioms into hyperedges
between sets of axioms. The condensed ADH corresponds to the quotient hypergraph HO/B of HO under the mutual B-connectivity relation B in HO. The
B-equivalence classes are the strongly B-connected components of HO. The
partition of a hypergraph under an equivalence relation is defined as follows.
Definition 7 (Quotient Hypergraph). Let H = (V,E) be a hypergraph. Let
 be an equivalence relation over V. The quotient of H under , written H/,
is the graph H/ = (V/,E), where
?

?

?
 V/ = {[x] | x  V}; and
 e = (T (e), H(e))  E iff there is an e

)}, H(e) = {[x] | x  H(e

T (e
?

?

?
  E such that T (e) = {[x] | x 
?

?

?
)} and T (e)  H(e) = .
?

?

?
We can now define the notion of a condensed ADH (cADH) as the partition
of the ADH under the mutual B-connectivity relation. The cADH is formed by
collapsing the strongly B-connected components into single nodes and turning
hyperedges between axioms into hyperedges between the newly formed nodes.

Definition 8 (Condensed Axiom Dependency Hypergraph). Let HxO be
the x-ADH for an ontology O, where x  {,}. Let B be the mutual B-
connectivity relation in HxO. The condensed axiom dependency hypergraph for
O wrt. x-locality (x-cADH) is defined as the quotient HxO/B of HxO under B.

Similarly, it is also possible to compute the partially condensed ADH (pcADH) of
an ADH. The idea is to identify and collapse the strongly connected components
of the graph fragment of the ADH (Axiom Dependency Graph) such that only
simple B-hyperedges are considered (|T (e)| = 1). The hyperedges of the ADH
are re-calculated to consider the newly formed nodes.

Definition 9 (Partially Condensed Axiom Dependency Hypergraph).

Let HxO = (V xO,E xO) be the x-ADH for an ontology O, where x  {,}. Let
GHxO = (VHxO ,EHxO ) be a directed graph such that VHxO = V xO and EHxO =
{(T (e), H(e))  E xO | | T (e) |= 1}.
Let B be the mutual B-connectivity relation in GHxO . The partially condensed
axiom dependency hypergraph for O wrt. x-locality (x-cADH) is defined as the
quotient HxO/B of HxO under B.

The dependency relation xO between x-local atoms of O, for x  {,}, is
defined as follows [5]. For atoms a, b  Atoms xO and axioms   a and   b:
a xO b if, and only if, b  Mod xO() if, and only if, Mod xO()  Mod xO().
Proposition 6. Let O be an ontology with ,   O. Let a, b  Atoms xO such
that   a and   b, where x  {,}. Let  be the mutual B-connectivity
relation in the x-locality ADH H for O and  the B-connectivity relation in the
x-cADH for O. Then: a xO b iff []  [].

Example 4. Let O = {1, ..., 5}, where 1 = A  B, 2 = B  C  D  E,
3 = E  A  C  D, 4 = A  X, 5 = X  A. The -ADH H
O contains the

following hyperedges:

e1 = ({1, 3},{2}) e2 = ({1},{4}) e3 = ({2},{3}) e4 = ({3},{1})
e5 = ({3},{4})
e6 = ({4},{1}) e7 = ({4},{5}) e8 = ({5},{1})
e9 = ({5},{4})

F. Mart n-Recuerda and D. Walther

We obtain the following -local modules for the axioms:

Mod
Mod
Mod

O(1) = {1, 4, 5}
Mod
O(2) = {1, 2, 3, 4, 5} Mod
O(3) = {1, 2, 3, 4, 5}

O(4) = {1, 4, 5}
O(5) = {1, 4, 5}

The resulting atoms in Atoms
a1  a2, i.e. a2 depends on a1. The ADH H
ADH H

O/B is depicted in Figure 1.

O are a1 = {2, 3} and a2 = {1, 4, 5}, where
O with the SCCs and the condensed

SCC1

2

e3

3

e1

e4

SCC2

e8

e2

1

e6

5

scc1

e9

e7

e10

e5

4

scc2

(a) H

O/B
Fig. 1. Example 4: From the -ADH to the condensed -ADH

(b) H

Consider the strongly connected components of H

O. Axiom 1 is B-connected
with the axioms 4 and 5, 4 is B-connected with 1 and 5, and 5 is B-
connected with 1 and 4. Axiom 2 is B-connected with 3 and vice versa.
Axioms 2, 3 are each B-connected with 1, 4 and 5, but not vice versa.
Hence, {1, 4, 5} and {2, 3} are the strongly connected components of H
O.
Moreover, we say that the former component depends on the latter as any two
axioms contained in them are unilaterally and not mutually B-connected. Note
that the atoms a1 and a2 of O and their dependency coincide with the strongly
connected components of H
O.

	

Analogously to the previous section, we can characterise modules in terms of
B-connectivity in condensed axiom dependency hypergraphs. Proposition 4 can
be lifted to cADHs as follows.
Proposition 7. Let O be an ontology,  a signature and x  {,}. Let Ox
be the set of axioms from O that are not x-local wrt. . Let  be the mutual
B-connectivity relation of the x-ADH for O and B the B-connectivity relation
}).
of the -extended x-cADH for O. Then: Mod xO() =

B({[] |   Ox


?

?

?
Implementation

The number of hyperedges of an ADH may be exponential in the size of the input
ontology [9], which makes it impractical to represent the entire ADH explicitly.
We implement an ADH H = (V,E) as a directed labelled graph GH = (V,E
,L)
containing the simple hyperedges of H and encoding the complex hyperedges in
the node labels as follows. A node v in G for an axiom  is labelled with the pair
L(v) = (MLS x
(), sig()) consisting of the minimal non-x-locality signatures
of  and the signature of , where x  {,}. In fact, not all symbols of
sig() are needed in the second component, only those symbols that occur in the
minimal non-locality signature of some axiom in the ontology. Condensed axiom
dependency hypergraphs are implemented in a similar way with the difference
that nodes represent sets of axioms. A node vS for a set S of axioms is labelled
with the pair L(vS) = (MLS x
()
and sig(S) =

(S), sig(S)), where MLS x

S MLS x

S sig().

(S) =
?

?

?
We introduce the notion of a graph representation of an axiom dependency

hypergraph that may be (partially) condensed.
Definition 10. Let H = (VH,EH) be an ADH, pcADH or cADH. Let x  {,}
be a syntactic locality notion. The graph representation GH of H is the directed
labelled graph GH = (V,E,L), where
 V := VH;
 E := {(v, v

 L(v) := (MLS x
To define the graph representation GH of a hypergraph H, we assume that every
node v in H is associated with a set MLS x
(v) of minimal non-locality signatures,
and a set sig(v) of signature symbols. Note that a node in H represents an axiom
if H is an ADH, and a set of axioms if H is a pcADH or a cADH.

) | v  sig(v), for some v  MLS x

(v), sig(v)), for every v  V.

)};

(v
?

?

?
4.1 Atomic Decomposition

For a collection of well-known biomedical ontologies from the NCBO Bioportal,
we observe that for many (if not all) axioms, the locality-based dependencies
to other axioms can be represented using only simple directed hyperedges. For
instance, the ADH for ontologies like CHEBI can be seen as a directed graph
without complex hyperedges. Computing strongly connected components in a
directed graph can be done in linear-time using standard algorithms from graph
theory [11,13]. That is, for ontologies like CHEBI we compute the strongly connected components of the respective ADH in linear time.
For ADHs of ontologies O like SNOMED CT that contain both, simple and
complex hyperedges, we compute the strongly connected components in four
steps. First, we build the axiom dependency graph GHxO , which is the fragment
of the ADH HxO for O without complex hyperedges. Second, we compute the
strongly connected components of GHxO using a linear-time algorithm [11,13].

F. Mart n-Recuerda and D. Walther

Note that the strongly connected components give rise to an equivalence rela-

tion BG on the nodes in GHxO . In the third step, we reduce the size of HxO by
computing the quotient graph HxO/BG of HxO using BG (cf. Def. 7). This corresponds to the computation of the pcADH, HxO/BG , for the ADH HxO. Finally,
in step four, we obtain the strongly connected components of HxO by determining
for any two nodes in HxO/BG whether they are mutually reachable. This last
step produces the cADH, HxO/BH , where BH is the mutual B-connectivity
relation in HxO/BG . Note that computing mutual connectivity this way is a
quadratic process [1]. However, using HxO/BG instead of HxO it is usually more
The function compute condensed hypergraph(.) provides a more succinct de-

efficient as the number of nodes is typically reduced.

scription of the previous process.

function compute condensed hypergraph(G = (V, E ,L)) returns Gc
1: Gpc := collapse SCCs(G, Tarjan((V,E )))
2:

if (contains complex Dependencies(Gpc) = false) then

3:

return Gc := Gpc

end if

4:
5: Gc := collapse SCCs(Gpc, mutual reach(Gpc))
6:

return Gc

graph representation G of

an ADH HxO,

the

Given the
function
compute condensed hypergraph(G) computes the graph representation, denoted
with Gc, of the cADH of HxO in two main steps. In the first step, the function computes the graph representation of the pcADH, which we denote with
Gpc (Line 1). Only simple directed hyperedges (E) of G are considered. The
strongly connected components are determined in linear time using the Tarjan
algorithm [13] (Line 2). The computation of the strongly connected components
when complex directed hyperedges are considered is done in Line 5. After the
strongly connected components are identified, the function collapse SCCs produces the graph representation Gc of the cADH for HxO.

4.2 Module Extraction

Modules correspond to connected components in the axiom dependency hypergraph or its (partially) condensed version. We now present the algorithm for
computing the connected components in the graph representation of a directed
hypergraph that can encode an ADH, pcADH or cADH for the input ontology.
(G, ) computes all -reachable nodes in the labelled
graph G and returns the axioms represented by these nodes. In Line 2, the
algorithm determines the set S1 of initial nodes in G. Every initial node S1

The function Mod x

is associated with a minimal non-locality signature that is contained in . In
Line 5, the set of nodes is determined that are reachable via simple B-hyperedges
that are explicitly given in E. Note that E(v) denotes the set of nodes that are
directly reachable in G from the node v using simple directed hyperedges.
?

?

?
function Mod x(GHxO = (V,E ,L), ) returns x-local module of O wrt. 
1: 0 := , m := 1
2: S0 := , S1 := {v  V | v  0 for some v  MLS x(v)}
3: do

 {E (v) | v  Sm1\ Sm2}  Sm1
?

?

?
m := m + 1
Sm :=
m := (
Sm := Sm  {v  V | v  m for some v  MLS x(v) with |v| > 1}

sSm\Sm1 sig(s))  m1

4:

5:

6:

7:
8: until Sm = Sm1
9:

return get axioms(Sm)

In Line 7, the input signature is extended with the symbols that are associated
to the nodes reached so far. Using the extended signature m, the function
(,) computes the nodes that can be reached using complex B-hyperedges
Mod x
implicitly represented by the labels L(v) of the nodes v in Sm. The algorithm
iterates until a fix point is reached and no more new nodes are added (Lines 38).
Finally, in Line 9, the function get axioms() computes the set of axioms that
correspond to the nodes in Sm.

5 Evaluation

The system HyS is a Java implementation of the approach described in the
previous section. HyS can compute syntactic locality-based modules for a given
input signature and the atomic decomposition of an ontology defined in EL++
extended with inverse and functional role axioms.7 In the current version of HyS
only syntactic -locality is supported. We plan to extend the implementation to
support both -locality and full SROIQ-ontologies in the future.

For the evaluation, we have selected nine well-known biomedical ontologies.
Seven of them are available in the NCBO Bioportal. The version of Full-Galen
that we used is available in the Oxford ontology repository.8

We divide the ontologies into two groups: a group consisting of CHEBI, FMA-
lite, Gazetteer, GO, NCBI and RH-Mesh, and another group consisting of CPO,
Full-Galen and SNOMED CT. Every ontology in the former group consist of
axioms whose -locality dependencies between axioms can be represented using
simple directed hyperedges only. This means that the ADH can be represented
using a direct graph. On the other hand, each of the latter three ontologies
contain axioms that require complex hyperedges to represent the dependencies.
We compare HyS against two systems for computing the atomic decomposition
of OWL 2 ontologies which implement the same algorithm from [14]: FaCT++

7 HyS supports all the constructors used in the ontology Full-Galen.
8 http://www.cs.ox.ac.uk/isg/ontologies/

F. Mart n-Recuerda and D. Walther

v1.6.2, which is implemented in C++ [14]9, and OWLAPITOOLS v1.0.0 which
is implemented in Java [15]10 as an extension of the OWLAPI.11

Signature #axioms #axioms #role

Time for Atomic Dec. of O
Properties of O
A  C C  D axioms FaCT++ OWLAPI HyS

85 342
119 558
652 355
72 667
847 755
403 210

306 111
25 563
227 698
?

?

?
73 461
9 968
63 446

2 165

137 s
18 481 s
31 595 s
47 s
49 228 s
6 921 s

9 731 s
640 s
16 081 s

1 619 s
13 258 s

1 489 s

9 159 s

4 s
17 s
24 s
4 s
66 s
17 s

26 480 s 2 283 s
115 s
57 282 s 2 540 s

781 s

Ontology O

FMA-lite
Gazetteer
?

?

?
RH-Mesh

size

37 891
75 168
517 039
36 945
847 796
286 382

136 090

24 088
Full-Galen
SNOMED CT 291 207

All experiments were conducted on an Intel Xeon E5-2640 2.50GHz with 100GB
RAM running Debian GNU/Linux 7.3. We use Java 1.7.0 51 and the OWLAPI
version 3.5.0. The table lists the time needed for each system to compute the
atomic decomposition of the ontologies. The time values are the average of at
least 10 executions. We applied a timeout of 24h, which aborted the executions
of the OWLAPITOOLS on the ontologies Gazetteer and NCBI. Moreover, the
table contains, for each ontology, the size of the signature, the number of axioms
of the form A  C, where A is a concept name, the number of axioms of the
form C  D, the number of role axioms contained in the ontology.

HyS consistently outperforms FaCT++ which in turn (considerably) outperforms the OWLAPITOOLS, with the exception of FMA-lite. In the case of the
first group of six ontologies, an over 1 000-fold speedup could be achieved compared to the performance of FaCT++ on FMA-lite and Gazetteer. For the smallest ontology in this group, which is GO, HyS is 13 times faster than FaCT++.
HyS also scales better than the other systems. For the second group of three on-
tologies, the speedup is reduced but HyS is still considerably faster. HyS is 47
times faster than FaCT++ and 1123 faster than the OWLAPITOOLS. The
computation of the partially condensed ADH nearly decreases 50% the number
of nodes in the ADH. The use of a tree datastructure to represent the set of
reachable nodes computed for each node of the ADH reduces the time needed
to identify mutually reachable nodes.
We compare the performance of HyS for extracting -locality modules with
the performance of FaCT++ and the OWLAPI. The following table presents
for every method the time needed to extract a module from an ontology for a
signature consisting of 500 symbols selected at random.

9 http://code.google.com/p/factplusplus/
10 http://owlapitools.sourceforge.net/
11 http://owlapi.sourceforge.net/
?

?

?
Ontology O

Time for Extraction of -local Modules from O
FacT++ OWLAPI

HyS

ADH pcADH cADH

FMA-lite
Gazetteer
?

?

?
RH-Mesh

175.8 ms

2.1 ms
3.9 ms
38.6 ms
326.9 ms 1 042.3 ms 55.3 ms
3.4 ms
177.9 ms 1 503.0 ms 27.3 ms 16.1 ms 15.9 ms
512.2 ms 1 398.7 ms
6.1 ms
236.2 ms 9 193.6 ms 22.7 ms 15.8 ms 16.3 ms
91.2 ms 1 811.3 ms 10.6 ms
8.9 ms

2.4 ms
3.9 ms

8.1 ms

6.2 ms

9.1 ms

564.7 ms 3 026.8 ms 84.3 ms 53.4 ms 51.6 ms

75.2 ms
2.9 ms
Full-Galen
SNOMED CT 525.0 ms 2 841.3 ms 93.6 ms 88.4 ms 84.4 ms

215.4 ms 13.2 ms

3.7 ms

HyS outperforms FaCT++ and the OWLAPITOOLS in all cases. For the first
group of six ontologies, the best speedup of over 90 times was achieved in the
case of FMA-lite. Notice that module extraction times using the pcADH and the
cADH (last two columns) are nearly the same as the two graphs are equivalent.
The small variation in extraction time is due to noise in the execution environ-
ment. The differences in the times values in the third column and the last two
columns correspond to the differences in size of the ADH and the pcADH/cADH.
For the second group of three ontologies, the best performance improvement was
realised in the case of Full-Galen with a speedup of over 20-times. However, we
note that using the cADH instead of the pcADH does not yield a large performance difference despite the fact that the cADH is slightly smaller than the
pcADH. In the particular case of Full-Galen, there appears to be a trade-off between condensation and increased time needed to perform signature containment
checks. Computing the partially condensed ADH (using a linear time algorithm)
is generally much faster than computing the condensed ADH (which is done in
quadratic time). Given that the module extraction times are similar when using
the pcADH and the cADH (cf. the times in the last two columns), it seems more
efficient to only compute modules using the partially condensed ADH.

6 Conclusion

We have introduced the notion of an axiom dependency hypergraph that represents explicitly the locality-based dependencies between axioms. We have shown
that locality-based modules of an ontology correspond to a set of connected
nodes in the hypergraph, and atoms of an ontology to strongly connected com-
ponents. We have implemented a prototype in Java that computes, based on
axiom dependency hypergraphs, the atomic decomposition of EL++-ontologies
wrt. -locality. Our prototype outperforms FaCT++ and the OWLAPITOOLS
in computing the atomic decomposition of all biomedical ontologies tested. In
some cases a staggering speedup of over 1 000 times could be realised. Moreover,
the prototype significantly outperforms FaCT++ and the OWLAPI in extracting syntactic -locality modules.

F. Mart n-Recuerda and D. Walther

We plan to extend the prototype implementation to support both -locality
and full SROIQ-ontologies. Moreover, it would be interesting to investigate the
possibility to compute strongly connected components in hypergraphs in less
than quadratic time. Such a result would improve the performance of computing
mutual connectivity in the axiom dependency hypergraph for ontologies whose
locality-based dependencies can only be represented by hyperedges with more
than one node in the tail.
