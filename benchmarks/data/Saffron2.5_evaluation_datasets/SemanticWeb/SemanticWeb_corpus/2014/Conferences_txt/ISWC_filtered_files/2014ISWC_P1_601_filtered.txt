kyrie2: Query Rewriting under Extensional Constraints

in ELHIO

Jose Mora1,2, Riccardo Rosati1, and Oscar Corcho2

1 Dipartimento di Ingegneria Informatica, Automatica e Gestionale Antonio Ruberti Sapienza

Universit`a di Roma, Italy

2 Ontology Engineering Group, Departamento de Inteligencia Artificial,

lastname@dis.uniroma1.it

Facultad de Inform atica,Universidad Polit ecnica de Madrid, Spain

{jmora,ocorcho}@fi.upm.es

Abstract. In this paper we study query answering and rewriting in ontologybased data access. Specifically, we present an algorithm for computing a perfect
rewriting of unions of conjunctive queries posed over ontologies expressed in
the description logic ELHIO, which covers the OWL 2 QL and OWL 2 EL
profiles. The novelty of our algorithm is the use of a set of ABox dependencies,
which are compiled into a so-called EBox, to limit the expansion of the rewriting.
So far, EBoxes have only been used in query rewriting in the case of DL-Lite,
which is less expressive than ELHIO. We have extensively evaluated our new
query rewriting technique, and in this paper we discuss the tradeoff between the
reduction of the size of the rewriting and the computational cost of our approach.

Keywords: Ontology-Based Data Access, Query Rewriting, Reasoning, EBox.

1 Introduction

In Ontology Based Data Access (OBDA) [1], ontologies are used to superimpose a
conceptual layer as a view to an underlying data source, which is usually a relational
database. The conceptual layer consists of a TBox, i.e. a set of axioms expressed in a
Description Logic (DL). This layer abstracts away from how that information is maintained in the data layer and may provide inference capabilities. The conceptual layer
and the data source layer are connected through mappings that specify the semantic
relationship between the database schema terms and the terms in the TBox.

Query rewriting is currently the most important reasoning technique for OBDA.
It consists in transforming a query posed in ontological terms into another query expressed over the underlying database schema. The rewritten query allows for obtaining
the certain answers to the original query, i.e. results explicitly stated for the query in
the database and those that are entailed by the TBox. To do so, the rewritten query
encodes the intensional knowledge expressed by the TBox and the mappings [1].

Recently, some approaches [2,3,4] have proposed the use of ABox dependencies,
or extensional constraints, to optimise query rewriting in OBDA. An extensional constraint is an axiom (in the TBox language) that the data are known to satisfy. As such,
it can be viewed as an integrity constraint for the OBDA system. Such constraints can

P. Mika et al. (Eds.) ISWC 2014, Part I, LNCS 8796, pp. 568583, 2014.
c Springer International Publishing Switzerland 2014
?

?

?
be automatically derived from OBDA specifications, in particular, they can be deduced
from the mappings and from the integrity constraints in the source database [4]. Following [3], we call EBox a set of extensional constraints. For ontologies expressed in
the logic DL-LiteA, EBoxes can be used to optimise reasoning and query rewriting in
OBDA [2,3]. In fact, since extensional constraints express forms of completeness of the
data, they can be used during query rewriting in a complementary way with respect to
the usual TBox axioms, allowing for significant simplifications of the rewritten query.
In this paper we explore the application of an EBox to the rewriting process performed by kyrie [5], which deals with the expressive DL ELHIO by performing resolution in several stages with some optimisations.

The contributions of the paper are the following:

1. Extension of the kyrie algorithm. We define a new query rewriting algorithm for
ELHIO. The algorithm is based on kyrie, and takes into account, besides the
TBox, the presence of an ELHIO EBox. This extension is inspired by Prexto [3], a
query rewriting algorithm for DL-LiteR: however, such an extension is technically
challenging, due to the expressiveness of ELHIO.

2. Extension of a query rewriting benchmark. We extend an existing benchmark for
the evaluation of query rewriting in OBDA [6], considering EBoxes in addition to
TBoxes, so as to experimentally evaluate the use of EBoxes in ELHIO ontologies.
3. Implementation and experimental evaluation. We perform an experimental analysis
of the new query rewriting algorithm. Our results show the effectiveness of using
EBoxes in the optimisation of query rewriting, and highlight some interesting properties of the similarity between TBox and EBox.
This paper is structured as follows. In Section 2 we briefly recall the DL ELHIO and
extensional constraints and the state of the art is briefly summarized. In Section 3 we
present the kyrie2 query rewriting algorithm for ELHIO. The operations performed by
the algorithm are formalised as a set of propositions in Section 4. Finally, Section 5 and
Section 6 contain, respectively, the evaluation of our proposal and some conclusions
drawn from it1.

2 Preliminaries
We briefly recall Horn clauses, ELHIO, OBDA systems and extensional constraints.
Horn Clauses.
Following [7,5], our technique makes use of a representation of DL
axioms as Horn clauses. A Horn clause (or Horn rule) is an expression of the form
0  1, . . . , n, with n  0 and where each term appearing in each of the atoms
0, 1, . . . , n may be a constant c from an alphabet of constant symbols, a variable x
from an alphabet of variable symbols, or a unary Skolem function f (x) (where f is from
an alphabet of function symbols) whose argument is a variable. Clauses are safe, i.e.,
all variables occurring in 0 (which is called the clause head) also occur in 1, . . . , n
(which is called the clause body). The arity of the clause is the number of arguments of

1 Due to space constraints, proofs of theorems are available at

http://j.mp/kyrieproofebox

J. Mora, R. Rosati, and O. Corcho

its head atom. A clause is Boolean if it has no variables in its head. We say that an atom
a subsumes another atom b (a *s b) if there is some unification of its variables
 such that a = b. A Horn clause subsumes another Horn clause if after some
variable renaming both of their heads are equal and there is some unification such that
all the atoms in the body of the subsuming clause unify with some atom in the body of
the subsumed clause, i.e. a, b.(head(a) = head(b)  .i  body(a).j 
body(b).i = j)  a *s b.
Let R be the Horn clause 0  1, . . . , n and let x be the variables occurring in
R. We define F O(R) as the first-order sentence x(0  1  . . .  n). Moreover,
given a set of Horn clauses , we define F O() as
OBDA Systems. An OBDA system [1] allows for accessing a set of data sources D
using an ontology composed of TBox and ABox O = T ,A as a view for the data in
D. To do this, a set of mappings M is normally used to map the information in D to the
elements in the TBox T [8].
In ELHIO, concept (C) and role (R) expressions are formed according to the following syntax (where A denotes a concept name, P denotes a role name, and a denotes
an individual name):

R F O(R).
?

?

?
C ::= A | C1  C2 | R.C | {a}
R ::= P | P



An ELHIO axiom is an expression of the form C1   C2, C   , R1   R2 or R   
where C1, C2 are concept expressions and R1, R2 are role expressions (as usual, 
denotes the empty concept). An ELHIO TBox T is a set of ELHIO axioms.
An OBDA system is a pair O = T ,A, where T is an ELHIO TBox, and A is an
ABox, i.e., a set of ground atoms, representing the pair M,A.
Notably, each ELHIO axiom corresponds to a set of Horn clauses [7,5]. We can thus
define the semantics of OBDA systems by using the clause translation of an ELHIO
TBox into a set of clauses. More precisely, given an ELHIO axiom , we denote by
c() the set of clauses corresponding to , and given a TBox T , we denote by c(T )
the set of clauses corresponding to T . Then, the set of models of an OBDA system
T ,A is the set of models of the first-order theory F O(c(T ))  A.
We refer the reader to [5] for more details on the translation of ELHIO axioms into
Horn clauses. From now on, we assume that the OBDA system T ,A is consistent,
i.e., has at least one model. The extension of our results to possibly inconsistent OBDA
systems is trivial.

The OBDA system allows for accessing the data by posing queries and returning the
certain answers to these queries. As usual in OBDA, we consider unions of conjunctive
queries. A conjunctive query (CQ) is a function-free Horn clause. As usual, we assume
that the head predicate q of the CQ does not occur in T ,A. For ease of exposition,
we assume that constants may not occur in the head of a CQ. A union of conjunctive
queries (UCQ) is a finite, non-empty set of CQs having the same head predicate q and
the same arity.
The set of certain answers for a UCQ q posed to a system T ,A, denoted by qT ,A,
is the set of tuples of constants t1, . . . , tn such that the atom q(t1, . . . , tn) holds in all
models of F O(  q)  A, where  = c(T ).
?

?

?
Query Rewriting in OBDA. The main approaches to query answering in OBDA
are based on query rewriting techniques whose goal is to compute so-called perfect
rewritings. A perfect rewriting for a UCQ q and a TBox T is a query q
such that, for
every ABox A, qT ,A = q
,A (i.e., the TBox is encoded by the rewritten query).
In OBDA, special attention has been paid in these systems to ontology languages
that are first-order (FO) rewritable [9,10], i.e. such that UCQs always admit a perfect
rewriting expressed in first-order logic. ELHIO falls out of this expressiveness, since
recursive Datalog is sometimes needed to express perfect rewritings of UCQs, i.e., it is
Datalog-rewritable.
Related Systems. Several systems have been implemented to perform query rewrit-
ing, these systems and their main characteristics including the expressiveness for the
aforementioned  are summarised in Table 1. A more detailed description of these systems and the logics they handle can be found in [6]. The interest in this kind of systems
is shown by commercial applications like Stardog2, which can perform query answering
with several reasoning levels (RDFS, QL, RL, EL and DL).

Table 1. Main systems for OBDA query rewriting in the state of the art

System
Quonto
REQUIEM
Presto
Rapid
Nyaya
Venetis
Prexto
Clipper
kyrie

Input

DL-LiteR
ELHIO
DL-LiteR

DL-LiteR

Datalog
DL-LiteR
Horn-SHIQ
ELHIO

Datalog or UCQ 2011
?

?

?
DL-LiteRand EBox Datalog or UCQ 2012

Datalog or UCQ 2013
?

?

?
Datalog

Output

Year

Datalog or UCQ 2009

Datalog
