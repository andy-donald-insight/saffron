Web Semantics: Science, Services and Agents on the World Wide Web 25 (2014) 18

Contents lists available at ScienceDirect

Web Semantics: Science, Services and Agents

on the World Wide Web

journal homepage: www.elsevier.com/locate/websem

Clustering rule bases using ontology-based similarity measures
Saeed Hassanpour, Martin J. OConnor, Amar K. Das

Stanford Center for Biomedical Informatics Research, MSOB X215, 251 Campus Drive, Stanford, CA, 94305, USA

a r t i c l e

i n f o

a b s t r a c t

Article history:
Received 30 June 2011
Received in revised form
31 March 2013
Accepted 13 March 2014
Available online 19 March 2014

Keywords:
Rule management
Rule categorization
Semantic similarity

Rules are increasingly becoming an important form of knowledge representation on the Semantic Web.
There are currently few methods that can ensure that the acquisition and management of rules can scale
to the size of the Web. We previously developed methods to help manage large rule bases using syntactical analyses of rules. This approach did not incorporate semantics. As a result, rule categorization based
on syntactic features may not be effective. In this paper, we present a novel approach for grouping rules
based on whether the rule elements share relationships within a domain ontology. We have developed
our method for rules specified in the Semantic Web Rule Language (SWRL), which is based on the Web
Ontology Language (OWL) and shares its formal underpinnings. Our method uses vector space modeling
of rule atoms and an ontology-based semantic similarity measure. We apply a clustering method to detect
rule relatedness, and we use a statistical model selection method to find the optimal number of clusters
within a rule base. Using three different SWRL rule bases, we evaluated the results of our semantic clustering method against those of our syntactic approach. We have found that our new approach creates clusters
that better match the rule bases logical structures. Semantic clustering of rule bases may help users to
more rapidly comprehend, acquire, and manage the growing numbers of rules on the Semantic Web.

 2014 Elsevier B.V. All rights reserved.

1. Introduction

Rules have been a central form of knowledge representation
since the earliest development of intelligent systems [15]. As it
has been repeatedly shown in the Semantic Web Stack, rules are
an essential layer of knowledge on the Semantic Web framework.
In the last few years, rules are increasingly being used to represent and apply knowledge in a range of Semantic Web applications
[610]. However, in contrast to other knowledge representation
formats on the Semantic Web such as ontologies and taxonomies,
rules do not have a hierarchical structure to facilitate their presentation and comprehension. Although some rule representation and
interchange formats such as RuleML [11] and RIF [12] allow users
to annotate rules through adding metadata, the flat structure of
rules negatively effects the applications of rules on the Semantic
Web and the use of rules to their full potential in this framework.
In many past and current rule-based systems, domain experts
manually organize rules through labeling and assigning to different groups based on their semantics. For example, the Cyc project

 Corresponding author. Tel.: +1 650 736 1632; fax: +1 650 725 7944.

E-mail addresses: saeedhp@stanford.edu (S. Hassanpour),

martin.oconnor@stanford.edu (M.J. OConnor), amar.k.das@dartmouth.edu,
amar.das@stanford.edu, saeedhp@gmail.com (A.K. Das).

http://dx.doi.org/10.1016/j.websem.2014.03.001
1570-8268/ 2014 Elsevier B.V. All rights reserved.

has an enormous number of rules, often referred to as a sea of as-
sertions, in its comprehensive knowledge base of common sense
knowledge for general-purpose reasoning [1]. To organize such a
knowledge base, domain experts divide these rules into microthe-
ories, which are collections of concepts in a particular realm of
knowledge. These microtheories are used for domain separation,
conflict resolution, and hypothetical reasoning. Although this manual categorization of rules is semantically precise, it is a laborious
task. In general, we would like automated methods to manage rule
bases when the number of rules becomes large and relationships
among rules are too complicated for developers and domain experts to comprehend.

A related field to our work in this paper is association rule
clustering. Association rules are used in data mining to present
frequent data patterns in databases [13]. Consider a database of
tuples, where each tuple is a set of attribute values, which are called
items. An association rule is defined on these tuples as A  B,
where A and B are disjoint subset of items. For example (age = 30)
 (own_car = yes) is an association rule with one attribute value
on left and another one on the right hand side of the rule. The clustering of association rules is combining similar association rules to
form more general rules. Therefore, the clustered rules can cover
a range of values for attributes. For instance, the clustered rule
(30  age < 32)  (own_car = yes) can be generated from
combining two association rules (age = 30)  (own_car = yes)
and (age = 31)  (own_car = yes).

S. Hassanpour et al. / Web Semantics: Science, Services and Agents on the World Wide Web 25 (2014) 18

Lent et al. [13] introduced a method to preform association rule
clustering over two attribute values in a database. In this method
the values for two attributes in a database are presented as a twodimensional grid, and a geometric-based greedy algorithm is used
to find large homogeneous regions in the grid. These regions represent the approximate optimal clusters of association rules for those
two attributes. Other techniques to cluster association rules include decision trees. The decision tree methods, such as CART [14]
and C4.5 [15], provide greedy algorithms to find an approximate
model for the data by finding homogeneous regions in a multidimensional space. These models also can be used to predict the
value of a target variable based on several input variables.

A major difference between association rules and the rules in
our work is the fact that association rules usually refer to a single
tuple in a database; therefore, an association rule can be considered
as a single atomic proposition in the logic programming setting.
However, SWRL rules usually refer to multiple individuals in a
single rule, and thus contain more than one atomic proposition. As
the result the association rules clustering methods that handle only
one logical proposition are not applicable to SWRL rule clustering.
Furthermore, association rules are defined on attributes from a
database schema and their corresponding values. In contrast, SWRL
rules can contain object property atoms that relate one individual
to other individuals rather than to other attributes. Therefore,
there is a distinction between SWRL rule clustering and association
rule clustering methods that only deal with combining values for
attributes.

In another related work, an object-oriented similarity measure is presented to find the best Semantic Web service match for
queries [16]. In this work the Web service profiles and queries are
presented as instances of an OWL class. This work focuses on the
properties that are associated to these instances. In this method, for
data value properties, the matching of arguments values or types is
considered as their similarity. The similarity of object properties is
determined by the shortest path length of their arguments classes
in an object-oriented model, which is based on the OWL class hi-
erarchy. The aggregation of the similarity between data value and
object properties of two instances is computed as their overall sim-
ilarity. In contrast, in our work we are interested in measuring
the similarity of two rules rather than two class instances. Fur-
thermore, the mentioned method is designed for the applications
that two compared instances are from a same class in an ontology [16]. However, in our work rules typically consist of diverse
sets of classes and properties. In addition, our rule base analysis
does not execute the rules. Therefore, object property arguments
are not bound to any class instances. In this case, the available information about the object properties arguments is limited to their
domain and range. These domains and ranges, according to the rule
bases in our evaluation, are usually too general to extract a similarity between properties.

Rule clustering has also been used in rule systems to provide
the parallel execution of rules and expedite their running-time. For
example CREL rule system performs a compile-time rule dependency analysis to partition the rules into independent clusters [17].
The rules in different clusters can be executed in parallel during
the rule base execution. In another work in this domain, rule base
parallelization is facilitated by introducing a new rule language,
PARULEL [18]. Using this language the programmers are able to
provide instructions for rules parallel execution through meta-
rules. In these methods the focus of rule clustering is providing
run-time parallelization, and is different from our works purpose,
which is facilitating understanding the rules and their semantics in
rule bases.

Another rule clustering method is motivated by optimizing
the execution of EventConditionAction (ECA) rules in objectoriented active knowledge base systems [19,20]. ECA rules are
composed of three sets of events, conditions, and actions. If the

condition part of all the events that are specified in the event
parts of the rules hold, the action parts will be executed. In prac-
tice, the presence of multiple ECA rules with the same action
part causes multiple inefficiencies, such as difficulty in rule maintenance and redundancy in condition checking and action execution of the rules. Also this many-to-one relationship between
eventsconditions and actions leads to a problem with the execution synchronization of multiple rules due to the immediate
eventsconditions coupling in active knowledge base systems. This
problem is known as the net effect [20]. As a solution to these prob-
lems, ECA rules with similar action parts are translated to a single
rule with more complex events. These new rules can be considered as the clusters of pre-existing rules. In this method rules
are grouped in different clusters, where each cluster performs the
same task in an object-oriented active knowledge base system. In
contrast, our rule clustering method in this paper is based on rules
semantics rather than optimizing their run-time performance.

Rule management methods are widely adopted in the business
domain to assist users in the rule management challenge [21].
These tools typically provide high-level rule management interfaces and editors, and support for multiple data models for rules,
user-friendly rule presentation, acquisition, functionality, and rule
testing and refinement methods. Other features include rule ver-
sioning, access control, justification, rule argumentation, and realtime debugging [2123]. Although these management techniques
can be useful, they are typically restricted to their particular business domain.

In our experiences in developing general methods for rule management for SWRL rule bases, we have found that when the number of rules exceeds a few dozen it becomes extremely hard for
domain experts to comprehend the content of the rule base and the
relationships among the rules [2426]. In a recent work, we leveraged the syntactic structure of SWRL rules to categorize, visualize,
and paraphrase them [25]. The analysis was used to generate an
abstract presentation for each rule, called a rule signature, which
we used to categorize rules. Although this method was successful in revealing the structural patterns among the rules, it could
group rules that do not have similar semantics together. In prac-
tice, categorization results were often coarse. This approach is also
relatively brittle: a syntactic change in a rule that had no change
in its logical assertion could cause a rule to be switched to another
grouping.

In this paper, we present a rule categorization method for
ontology-based rule languages, such as SWRL and Cyc. Our approach uses ontology-based relationships among rule atoms to automatically partition rule bases into semantically similar clusters.
In this work, we use multiple measures of semantic similarity and
investigate the impact of the semantic similarity measures on the
rule categorization results. In our approach, we focus on SWRL
[27], which is the primary language for encoding rules in OWL [28].
SWRL rules can be considered as formal logical statements about
entities in an OWL ontology. Because all referred entities in
SWRL rules, are also presented in the associated OWL ontology,
automated techniques can use ontology-based relationships in
rule clustering. In evaluating the accuracy of our rule clustering
method, we compared our method against the syntactic approach
on three biomedical ontologies that contain SWRL rule bases.

2. Background

Ontology-based rule languages provide an opportunity to perform a semantic analysis of rules based on relationships encoded
in the ontologies. Direct references between rule atoms and their
relationships in ontology hierarchies improve the understanding
of the relationships among rules. For example, a rule about hypertension can also be inferred to relate to rules about blood pressure.

Fig. 1. A screenshot of family relationship rules as a part of the family history ontology in Protege SWRL editor.

Thus, interactions can be explored conceptually rather than simply through basic terms or structural matching. In this section, we
first review the relevant Semantic Web technologies that are used
in this work. Then we introduce the different semantic similarity
measures, which we use to present these ontology-based relationships in our rule modeling process.

2.1. Semantic Web standards

SWRL and OWL are Semantic Web languages for presenting ontologies and rules. The strong formal relationship between OWL
and SWRL facilitates a principled examination of the relationships
between a set of SWRL rules and the underlying OWL ontology.
Semantically, an OWL ontology is composed of a set of axioms that
consist of statements about OWL classes, properties, individuals,
and data values [28]. For example, an OWL axiom may state that a
class is a subclass of another class or two properties are equivalent.
SWRL extends this expressiveness by allowing developers to write
rules about these entities. A SWRL rule can be considered to be a
type of OWL axiom. SWRL rules have a simple Horn-like rule structure and contain an antecedent (body), and a consequent (head).
Both antecedent and consequent consist of positive conjunctions
of atoms:
atom1  atom2 . . .  atomk  atomk+1 . . . .

Informally in a SWRL rule, if all atoms in the antecedent are true,
the consequent must also be true. SWRL does not support negated
atoms or disjunction. An atom is an expression of the form:
p(arg1, arg2, . . . , argn)
where p is a predicate symbol and arg1, arg2, . . . , argn are arguments of the expression. Predicate symbols can include OWL
classes, object properties, or data value properties. Arguments can
be OWL individuals, data values, or variables referring to them.
Fig. 1 shows a set of SWRL rules defining relationships in a family
history ontology [29], as displayed by the Protege SWRL editor [24].
SWRL has six main types of atoms that govern interactions between SWRL and OWL (Table 1). SWRL class atoms specify an OWL
class and take a single argument representing an OWL individual.
When used in the body of a rule, a class atom indicates a membership test for its argument individual. When used in the head of a
rule, the atom asserts that the argument individual is a member
of the specified class. SWRL object property atoms specify an OWL
object property and take two arguments representing two OWL in-
dividuals. When used in the body of a rule, an atom acts as a test
to determine if two individuals are related through the specified
property. When an object property atom is used in the head of a
rule, it asserts the relationship between two individuals.

SWRL rules are thus strongly tied to the OWL ontology containing them: all entities in a SWRL rule are OWL entities. This linkage
permits the automatic discovery of indirectly related ontology entities in a rule. For example, the class used in a class atom can be

Table 1
SWRL atom types and sample atoms. This table shows the list of different SWRL atom
types and their symbols. In the last column, a set of samples is provided for each
SWRL atom type.
SWRL atom type
Class atom
Object property
atom
Data value property
atom
Built-in atom
Same/different
individual atom
Data range atom

Example atoms
Person(?x), Female(?y)
hasSibling(?x, ?y), hasSister(?x, ?y)

notEqual(?a, Adam), lessThan(?b, 25)
sameAs(?x, ?y), differentFrom(?x, ?y)

hasAge(?x, 25), hasName(?y, Adam)

Symbol

String(?a), Integer(?b)

automatically expanded to include subclasses of that class to produce an exhaustive list of the possible types of each argument indi-
vidual. For example, the class atom Person(?x) matches not only
individuals of type person, but its subclasses and all other individuals in the ontology that are members of that class.

2.2. Semantic similarity

Relationships among rule atoms can be exploited using mechanisms that capture similarities between terms. The strength of
the various relationships between concepts in an ontology is
frequently referred to as semantic similarity [30]. A variety of
ontology-based approaches have been developed to quantify semantic similarity. In most approaches, the ontology is considered
to be a directed graph constructed using relationships between different concepts. Semantic similarity measures in general use graph
structures and graph node properties to quantify each terms semantic distance from other terms [30,31]. We choose to use a common semantic similarity measure developed by Al-Mubaid in our
approach [32]. In this measure the depth of the least common ancestor (LCA) node of two concepts in the ontology is used as a
measure of common specificity. The common specificity of two
ontology concepts is defined as:
CSpec(C1, C2) = D  depth(LCA(C1, C2)).

(1)
Here, D is the depth of the hierarchy tree, and LCA(C1, C2) is the
LCA of two concepts in the ontology. The common specificity and
the length of the shortest path between two concepts in the hierarchy are combined as a semantic similarity measure in a logarithmic
function as follows:
Sim(C1, C2) = 1/ log((length(Path))  (CSpec) + k).

(2)
Here, Sim(C1, C2) is the similarity between two concepts, Path
is the length of the shortest path between two concepts, CSpec is
the common specificity between two concepts as defined above,
and , , and k are constants. We assume equal contributions from
each part (i.e.,  =  = 1). Also, to ensure a positive argument for
the logarithm function and to prevent division by zero, we choose
k = 1.01.

S. Hassanpour et al. / Web Semantics: Science, Services and Agents on the World Wide Web 25 (2014) 18

To evaluate the impact of the choice of the semantic similarity measure, we also tried three other common ontology-based
semantic similarity measures. These are (1) Wu and Palmer [33],
(2) Leacock and Chodorow [34], and (3) Batet et al. [35]. In addition to the shortest path length between two concepts in ontology
graphs, these measures consider other features of the graphs to define the semantic similarity between a pair of concepts. Wu and
Palmer method considers the hierarchy depth of the lowest common ancestor of two concepts in the measure of semantic similarity [33]. Leacock and Chodorow scale their measure of semantic
similarity with the depth of ontology hierarchy [34]. Batet et al.
consider both common and non-common ancestors to capture the
information distribution for two concepts in the measure of semantic similarity [35]. In Section 4.4 we show how the choice of
semantic similarity changes the results.

3. Methods

Fig. 2. A part of the family history ontologys class hierarchy.

Given an OWL ontology containing SWRL rules, our goal is to
automatically cluster related rules into semantically meaningful
groups. By considering the semantics of the terms used in SWRL
rules, we build an enhanced clustering mechanism that provides a
richer picture of rule relatedness than the simple term usage. Our
mechanism follows four general steps:
(1) Semantic reference extraction and weight assignment: This process includes determining all OWL class and property references in a SWRL rule and assigning weights to them.

(2) Rule base vector space modeling: The vector space model
provides a standard presentation for each rule by using its
weighted references to ontology terms to model each rule in
a vector space.

(3) Rule base clustering: By using the Euclidean distances between

rules in the vector space, rules are clustered.

(4) Choosing the optimal number of clusters: Through a statistical
model selection technique the optimal number of the rule clusters is determined.
In the first step of our method, related concepts for each rule
are extracted from the ontology and their relevance is quantified
by a measure of semantic similarity. Results are presented in a
standard format of vectors in Euclidean space. Once the rule base is
presented as vectors, we use the k-means clustering algorithm to
cluster the rule base into semantically homogeneous groups. In this
algorithm the number of clusters is specified as an input. However,
because the number of clusters is generally not known, we use
a statistical model selection scoring scheme to find the optimal
number of clusters for rule bases.

3.2. Rule base vector space modeling

After calculating semantic similarities for the rules classes and
properties, we present them in a format usable for rule base cluster
analysis. We use a vector space model to encode a rule as a vector. If
the number of classes and properties in the ontology is d, each rule
can be presented as a vector in d-dimensional space. We start with
zeros for all dimensions. For each class and property in the rule,
we add semantic similarity values of sub- and super-classes and
properties in the ontology to the corresponding dimension value
in the vector. The algorithm we use is as follows:

Model(rule r, ontology w)
V  0
For each a  {rs classes and properties}
For each b  {a}  sub(a)  sup(a)
V (b) = V (b) + Sim(a, b)

return V

Given a rule r and an ontology w as inputs, this algorithm generates V , a vector that presents a rule in ontology vector space.
V (b) is the value of vector V in the corresponding position with
respect to the ontology entity b, sub(a) is the set of sub-entities in
the ontology hierarchy, sup(a) is the set of super-entities in the ontology hierarchy, and Sim(a, b) is the semantic similarity measure
between a and b presented in (2).

3.1. Semantic reference extraction and weight assignment

3.3. Rule base clustering

Of the six SWRL atom types, class, object property, and data
value property are the primary source of linkage to the underlying ontology. Our method focuses on these atom types. It does not
consider built-in or data range atoms because they only deal with
data literals. For similar reasons, we also do not consider the additional SWRL atom types, which support the use of functions in
rules, the ability to distinguish OWL individuals, and a basic range
checking for data values.

We first build a tree data structure to present class and property
hierarchies in an ontology. We use subsumption relationships between classes and properties to extend the classes and properties
in each rule to their sub-super classes and properties. Figs. 2 and
3 show a part of the class and property hierarchies for the family
history ontology.

Consequently, we use an ontology-based semantic similarity
weighting scheme to assign weights to these extensions. Using the
semantic similarity measure presented in (2), we determine the
semantic similarity for each class and property in a rule and subsuper entities in the hierarchy.

After presenting the rules as vectors in Euclidean space, we consider the rule base as a set of vectors. By using Euclidean distance
as a measure of the difference between rules, we are able to apply
general data clustering methods on the vector space representation of a rule base. We applied the k-means clustering algorithm
on the rule data. The efficiency and efficacy of this algorithm make
it one of the most popular clustering algorithms in data analysis. If
data are presented as n vectors in d dimensional space,{x1, x2, . . . ,
xn}, given the number of clusters, k(k < n), the k-means clustering
algorithm partitions the data into k sets, C = {C1, C2, . . . , Ck} such
that the residual sum of squares (RSS) from the clusters means is
minimized [36]:

xj  i2.

(3)

RSS = k

i=1


xjCi

Here, i is the mean of cluster Ci. The number of clusters, k, is

passed to the algorithm as an input.

Fig. 3. A part of the family history ontologys object property hierarchy.

3.4. Choosing the number of clusters

We use a statistical model selection criterion to automatically
choose the optimal number of clusters in a rule base. Statistical
model selection criteria are commonly used to find the best potential model that fits a particular set of data. In this work, we use
the Bayesian information criterion (BIC) [37]. We run the k-means
clustering algorithm with different potential values for k, and compute the BIC score. We choose the k with the best score as the number of clusters.

BIC uses a maximum likelihood estimation for the model parameter selection. Likelihood tends to increase with the model
complexity, which maximizes the number of clusters. To resolve
this problem, BIC has a penalty term for the number of clusters and
model complexity. The BIC score formula is as follows:
BIC(Clusters) = n ln(RSS/n) + k ln(n).

(4)
Here, n is the number of data points in the data set, k is the number of clusters, and RSS is from formula (3). The k that minimizes
the BIC score is the optimal number of clusters according to the BIC
scoring scheme. We use this value as the number of clusters in our
k-means clustering.

4. Experiments and results

To evaluate our rule clustering approach, we applied our
method to three OWL ontologies containing SWRL rule bases.
These are: (1) an ontology for modeling causes of cardiomyopathy,
a form of heart disease [38], (2) an ontology for treating patients
who have hypertension [39], and (3) a family history ontology,
which describes relationships among people in an extended family and shared family health problems [29]. Two of these ontologies
are available online [29,39]. All three ontologies were designed by
the domain experts who are not among the authors. In each case,
the rule base developers had provided individual human readable
names or labels for each rule, although this labeling is not a requirement for rule specification. We use these labels to compare our
semantic clustering approach to the syntactic analysis that we developed before. Neither the semantic clustering approach nor the
syntactic signature approach uses the rule labels in categorizing
rules.

We also investigate the impact of the semantic similarity choice
on the clustering results. To do that, we compare the results of
our clustering approach using the Al-Mubaid semantic similarity
measure to the results of clustering with three alternative semantic
similarity measures introduced earlier.

Table 2
Semantic clusters in the cardiomyopathy ontology rule base and sample rule labels in
each cluster. Our method creates two clusters. The first column shows the number of
rules in each cluster and the second column shows five sample rule labels for each
cluster.

Semantic clusters
Cluster 1 (27 rules)

Cluster 2 (43 rules)

Rule labels in each cluster
No_PastSmoke, No_Tachycardia, No_Chemo,
No_CurrSmoke, No_Thyroid
Yes_LeadHg, Yes_MetalFill, Yes_Scleroderma,
Yes_Brucellosis, Yes_Tb

4.1. Cardiomyopathy ontology

A cardiomyopathy ontology called THINHeart, was developed
at Stanford Medical School in collaboration with the HEARTFAID
project [38]. It contains 197 classes and properties and 70 SWRL
rules. Each rule classifies a heart condition based on presumed
causes. According to the syntactical analysis, all rules have a similar syntactic structure: (C, D)  (I). C stands for the class atom,
I is the object property atom, and D is the data value property
atom. The head and body of the rule are separated by an arrow
(). Atoms with parentheses denote an individual in the ontol-
ogy. Therefore, the syntactic analysis of this rule base detects one
common cluster for all of the rules in the rule base [25].

We applied our method to cluster the 70 SWRL rules in the
ontology. We find that the optimal number of clusters for this rule
base is two. By inspection of the rule labels, we confirm that the
two clusters correspond to two sets of rules that have different
purposes. The rules in the first cluster (cluster size = 27) relates
to evidences against a heart attack. The rules in the second cluster
(cluster size = 43) relates to evidences for a heart attack. The rule
labels in each cluster clearly show this distinction. Note that the
rule labels are not used in our rule modeling and clustering process.
Table 2 shows the two semantic clusters and some sample rule
labels for each cluster.

4.2. Hypertension ontology

This ontology has 145 classes and properties and 19 SWRL rules.
Nine of these rules provide criteria to identify health improvement
potential in hypertensive patients. Example criteria include: classified with myocardial infarction and not on beta-blocker at any time
during evaluation period. These criteria rules are used to identify
hypertensive patients who require follow-up treatment. The other
ten rules define patient conditions that are derived from these cri-
teria, for example patients with renal impairment [39].

S. Hassanpour et al. / Web Semantics: Science, Services and Agents on the World Wide Web 25 (2014) 18

Table 3
Summary of syntactic analysis of hypertension ontology rule base. There are fourteen
clusters in this rule base. The number of rules in each cluster is very low.

Syntactic structure signature

(CI(I(D))), (B)  (C)
(CC)  (C)
(CI(I(D)I(C))), (B)  (C)
(CI(I(CD)I(D))I(I(I(DB)I)I(D(B))I)), (BB), (B)  (BB)
(CI(I(C)))  (C)
(CCI(I(D(B))I(C)I(I(D)I))I(I(CD)I(D))), (B)  (B)
(CI(I(D)I(I(D)DD)DD)), (BB), (B)  (BB)
(CCI(I(D(B))I(C)I(I(D)I))I(II(D))), (CD), (B)  (B)
(CI(I(C)I(DDB))I(I(D)D(B))), (B)  (B)
(CI(I(D)I(I(I(D)D(B)D(B))D(B)D(B))D(B)D(B))), (BB),
(B)  (BB)
(CCI(I(C)I(D(B)DB))I(I(D)D(BB))I(I(CD)I(D))), (B)  (B)
(CI(I(D)I(I(D))D(B)D(B))), (BB), (B)  (BB)
(CI(I(D)I(I(I(D)I(D(B)D(B))D(B)D(B))D(B)D(B))D(B)D(B))),
(BB), (B)  (BB)
(CI(I(B))), (B)  (BB)

Number of
instances in
the rule base

Table 4
Summary of syntactic analysis of the family history ontology rule base. There are 4
clusters in these rules based on the syntactic analysis. Each cluster has a structure
summarized by its syntactic structure signature.

Syntactic clusters
Cluster 1 (110 rules)
Cluster 2 (22 rules)
Cluster 3 (8 rules)
Cluster 4 (6 rules)

Syntactic structure signature
(I(I))  (I)
(C, I)  (I)
(I(I(I)))  (I)
(C, I, I), (I, I)  (I)

Syntactical analysis divides the nineteen rules into fourteen
clusters. All nine criteria rules fell into nine singleton clusters.
Such high clustering granularity makes the grouping result
uninformative. Table 3 shows the syntactical structure signatures
of each cluster and the number of rules in it.

We applied our method on this rule base and obtained three
clusters. The first one contains all the rules that define hypertensive patients conditions (non-criteria rules). All the criteria rules
that depend on patients blood pressure are in the second cluster.
The third cluster contains criteria rules that do not relate directly to
blood pressure such as medication, lab results and therapies. These
three clusters thus divide the rule base and summarized it seman-
tically.

4.3. Family history ontology

This ontology contains 582 OWL classes and properties and
146 SWRL rules. The rules define relationships between people
in an extended family [29]. Syntactic analysis finds four common
syntactic structures in the rule base (Table 4).

Our semantic clustering method creates six clusters. Table 5
shows the comparison of our semantic clusters and the syntactic
clusters. The first syntactic group is divided into three semantic
clusters. Two other syntactic clusters are combined in a semantic
cluster, while the last syntactic cluster remains intact in a semantic
cluster. Examining the rule labels, we find that the first and second
semantic clusters cover rules about family health history. The first
one (28 rules) covers family health history when a maternal or
paternal relationship is specified. The second one (54 rules) covers
family health history when paternal or maternal relationships are
not specified. Cluster 3 (14 rules) contains definitions of maternal
family relationships. Cluster 4 contains 14 rules defining paternal
relationships. Cluster 5 defines grandparent, sibling and half sibling
relationships. Finally, cluster 6 (22 rules) covers all other family
relationships if a maternal or paternal relation is not specified.
This separation in the family history ontology shows our semantic
clustering results are appropriate.

4.4. Semantic similarity comparison

To compare the performance of the different semantic similarity measures, in addition to the Al-Mubaid semantic similarity
measure, we repeated the evaluation experiments with the three
measures of semantic similarity introduced earlier. Table 6 shows
the number of the resulting clusters for three rule bases in each
case.

As is shown in Table 6, the choices of semantic similarity measure do not change the results of rule clustering on Cardiomyopathy and Hypertensions rule bases. The only exception is using
Batet et al. Semantic Similarity measure for Hypertension ontology
rules. Using Batet et al. in rule clustering method results in 9 clusters for this rule base. These 9 clusters for 19 rules are too granular
to be informative.

For the last set of rules in family history rule base, using each of
these three semantic similarity measures for semantic clustering
results in 8 clusters. All three sets of 8 clusters are different from
each other. Reviewing the rules in these 8 clusters and comparing
them to the 6 rule clusters from clustering with the Al-Mubaid semantic similarity measure shows that the structure of the clusters
changes from 6 clusters to 8 clusters. In these three sets of 8 clusters some of the rules, such as has paternal half aunt and has son, fall
into the same cluster, without any clear interpretation. Therefore,
in all three rule bases, the Al-Mubaid semantic similarity measure
has as good or better performance than other semantic similarity
measures in terms of the meaningful resulting clusters.

5. Discussion

We have created a novel method for clustering rule bases that
considers the semantics of the terms used in rules in determining
rule relatedness. This work addresses the unresolved challenge
of categorizing and managing rules at the Semantic Web scale.
Our approach uses a vector space model and ontology-based
semantic weighing measure to quantify the rules similarities. This
measure is used to determine the semantic distance between rules
during clustering and provides a richer picture of relatedness than
the simple use of terms. Our evaluation against a method that
uses syntactic analysis shows that the semantic clustering more
accurately reflects the groupings of rules as designated by the rule
base developers.

We also compared the clustering results of the different semantic similarity measures in our approach. We observed that the AlMubaid measure resulted in more meaningful clusters in three rule
bases than the other semantic similarity measures. The alternative
semantic similarity measures in addition to the shortest path between two concepts in the ontology graph, either use the depth
of the concepts in the hierarchy or use the hierarchy depth of their
lowest common ancestor of two concepts. However, the Al-Mubaid
measure combines both the concepts depth and the lowest common ancestors depth in the hierarchy to capture a notion of common specificity between two concepts. Incorporating this measure
of common specificity between two concepts in the semantic similarity computation appears to enhance the performance of semantic similarity measure.

Our method treats rule clustering as a special case of the more
general problem of document clustering in text mining [40]. A variety of clustering techniques are used in this field; some underlie
widely used search engines [41]. These techniques are scalable and
useful for retrieving documents that are related to one another.
In our method, SWRL rules are analogous to documents and the
OWL ontology associated with them is analogous to a dictionary.
The ontology entities referred to in each SWRL rule are primarily
OWL classes and properties, which can be treated like terms in a
document. Thus, techniques developed to cluster documents can

Table 5
Comparison between semantic and syntactic clusters in the family history ontologys rule base. This table shows the overlap between different clusters. The first syntactic cluster
is broken into four semantic clusters. The second syntactic cluster is identical to the second semantic cluster. The third and fourth syntactic clusters are merged into one
semantic cluster. Expert evaluation shows that all semantic clusters are conceptually different.

Clusters

Semantic cluster 1 (28 rules)
Semantic cluster 2 (54 rules)
Semantic cluster 3 (14 rules)
Semantic cluster 4 (14 rules)
Semantic cluster 5 (14 rules)
Semantic cluster 6 (22 rules)

Syntactic cluster 1
(I(I))  (I)
100%
100%
100%
100%
0%
0%

Syntactic cluster 2
(C, I)  (I)
0%
0%
0%
0%
0%
100%

Syntactic cluster 3
(I(I(I)))  (I)
0%
0%
0%
0%
57%
0%

Syntactic cluster 4
(C, I, I), (I, I)  (I)
0%
0%
0%
0%
43%
0%

Table 6
Comparison between different measures of semantic similarity. This table shows the
number of clusters for each rule base with the different measures of semantic
similarity.

Number of
Clusters

AL-Mubaid
semantic
similarity

Cardiomyopathy
ontology rule base
Hypertension
ontology rule base
Family history
ontology rule base

Wu and
Palmer
semantic
similarity

Leacock and
Chodorow
semantic
similarity

Batet
et al.
semantic
similarity

be used to cluster rules. Our method expands document clustering
techniques to include indirect references from rules to ontology
terms. Indirect references can be found by examining the semantic
relationships among classes and properties in an OWL ontology.

Our evaluation in this paper is limited to three rule bases. We
do not believe that an evaluation of our approach on synthesized
rule bases would be meaningful. Our approach is targeted at userdefined rules that do not necessarily have any underlying statistical
distribution or pre-existing acceptable ranges. The semantic
validity of rules is a key point in our approach because our method
tries to show the rules in a particular domain can be partitioned
in a few domain knowledge clusters. There is no straightforward
synthetic way to generate valid logical rules in a domain. The
only feasible way to generate valid logical rule bases is manual
generation, which is time consuming and requires both domain
and technical knowledge. As a future work, we plan to apply our
method to other rule bases as they become available for evaluation.
Other rule management methods, including rule explanation,
rule base debugging, and rule elicitation, can benefit from this
semantic analysis. We are planning to extend our method to these
areas. Rule semantic clusters can be considered as rule annotations.
These annotations can be saved as a part of the rule base metadata
in the corresponding ontologies. Therefore, the semantic clusters
can be imported in different rule management applications and be
independent of their frameworks.

Another promising use of rule grouping is for rule elicitation
methods. These methods are typically performed by knowledge
engineers [42,43]. Domain experts usually provide templates and
categories for rules or ask fixed questions to make rule elicitation
easier and semi-automated [44,45]. This approach is time consuming and labor intensive, and is limited by the skills of the domain
experts. A rule categorization method can be used during ontology
and rule base development as an alternative for creating templates.
In addition to rule elicitation, we are incorporating our clustering mechanism into a rule management system that we have
developed [26]. This system uses graphical techniques to display
logical dependencies between rules in a rule base. We believe our
semantic clustering technique will provide a new view to help
users rapidly comprehend large unfamiliar rule bases by quickly
summarizing them. In our new rule management system, we also
use the term weights in the rules vector space presentation to

visualize the semantic clusters. Using tag clouds is an intuitive way
to summarize the rules semantics, show, and compare the dominant concepts in each cluster based on their corresponding weights
in the vector space model.

Although the rule clustering method described in this paper is
developed for SWRL and OWL, the approach is general and can
be applied to any ontology-based rule language where there is a
well-defined semantic relationship between rules and the underlying ontologies, such as CycL, AL-log, and CARIN [1,46,47]. The
presented semantic-based vector model can also be used in document clustering for calculation of a semantic distance between
documents containing ontology-described terms. In addition, using semantic-based distance measures can enhance existing document search mechanisms. In this paper, we have shown that such
semantic similarity approaches can be used to cluster rule bases
and thus help users to more rapidly comprehend, acquire, and
manage the growing numbers of rules on the Semantic Web.

Acknowledgments

The authors thank David Kao for sharing the THINHeart ontology for their analysis. This research was supported in part by NIH
grant 1R01MH087756.
