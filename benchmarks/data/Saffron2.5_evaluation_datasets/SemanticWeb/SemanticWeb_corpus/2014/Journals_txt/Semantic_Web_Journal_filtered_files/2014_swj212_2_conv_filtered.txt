Undefined 1 (2009) 15
IOS Press

How Ontologies Benefit Enterprise
Applications

Editor(s): Name Surname, University, Country
Solicited review(s): Name Surname, University, Country
Open review(s): Name Surname, University, Country

Daniel Oberle
SAP Research Karlsruhe, Vincenz-Priessnitz-Str. 1, 76131 Karlsruhe, Germany, E-mail: d.oberle@sap.com

Abstract. This paper contributes an argumentation line for how technological features of ontologies lead to benefits for enterprise
applications. Although many features are also available in precursory or alternative technologies, we claim that combinations of
specific features are uniquely provided by ontologies. A careful elicitation of the available features therefore is a prerequisite for
the argumentation line. As a second contribution, this paper reports on several challenges that frequently occur when trying to
adopt ontologies in existing enterprise settings. These challenges have to be contrasted with the often overstressed benefits in
Semantic Web literature. Together with reports for several SAP Research case studies, this paper channels back experiences to
the Semantic Web community. As a third contribution, we give several recommendations for future research directions based on
the gathered experiences.

Keywords: Semantics, Semantic Technologies, Ontologies, Reasoning, Enterprise, Industry, Commercial, Application

1. Introduction

The last years have seen great academic interest in
the Semantic Web and in semantic technologies and
even first industrial products appeared. [4] However,
semantic technologies have been criticized for being
elusive, especially for use in enterprise applications.
[99] Typical questions asked in an enterprise setting
are: What business problem is semantics solving?
What relevance is there between semantics and the real
world? What value proposition for the conduct of business is there that is being addressed by semantics?
[48]

One reason for such sentiments is on the level of
terminology. So, the first step in answering such questions is to clarify what we are talking about. As pointed
out in [51], the murkiness of the words semantics or
semantic technologies adds to the confusion. There-
fore, this paper sets its focus on ontologies [40], i.e., a
specific semantic technology, in the following.

In the second step, this paper identifies the technological features of ontologies (Section 3). Since on-

tologies draw from several precursory technologies, it
is not surprising that many of the individual features
are not unique. However, the claim made in this paper is that combinations of technological features are
unique compared to alternative technologies. For in-
stance, there exists a plethora of technologies that offer
the feature of conceptual modeling but only ontologies
combine this feature with Web compliance, formality
and reasoning possibilities.

Identifying the technological features serves as the
prerequisite for explaining how ontologies provide
benefits for enterprise applications in the third step
(Section 4). For example, the combination of features
conceptual modeling, reuse, and Web compliance, has
led to innovative business scenarios in the context of
linked data. This argumentation line represents a contribution since related papers either discuss the benefits of ontologies on the level of application scenar-
ios, such as interoperability or search, or technological
benefits only (cf. [23,64,47,98,89]).

0000-0000/09/$00.00 c 2009  IOS Press and the authors. All rights reserved

Daniel Oberle / How Ontologies Benefit Enterprise Applications

The benefits have to be contrasted with challenges
when adopting ontologies, e.g., modeling costs or
training of employees. Accordingly, another contribution of this paper is the identification of several challenges drawn from more than five years of industrial
research (Section 5). The challenges are mainly due
to the often complex boundary conditions in an enterprise setting, e.g., technical integration into existing
technology stacks becomes necessary.

In addition to the challenges, this paper presents experience reports for several SAP Research case studies (Section 6) where ontologies have been applied in
products, pilots, and prototypes. The experience reports highlight which technological features, benefits,
and challenges did occur in the corresponding case
study and which compromises have been taken.

Besides channeling back the experiences to the Semantic Web community, this paper also identifies potential trade-offs, promising research results and contributes recommendations for future research directions (Section 7).

2. Scenario

This section introduces a scenario in the Oil and
Gas domain in which ontologies shall be used in corresponding enterprise applications. Subsequent sections
draw from this scenario for the sake of a consistent
running example.

The declared goal of the Norwegian Oil and Gas industry is the integration of different field data, the validation of information delivered by different sources,
and the exchange of information between off-shore
and on-shore facilities [96] (cf. Figure 1).

Fig. 1. Ontologies play a major role in the Norwegian Oil & Gas
industrys strategy. [1]

This requires that Oil and Gas IT systems, e.g., asset
management or facility monitoring, share information

according to a reference model, and that they can interpret messages using that model [21]. Such a reference
model is given by the ISO 15926 Oil and Gas ontology [54] which is formalized in OWL. The ontology
shall serve as a common vocabulary to exchange information between field data and and the onshore participants (operators and vendors). In particular, as pointed
out in [1], the offshore industry has huge economic investments in data acquisitions, analysis, visualization,
documentation and archiving. Some of the data are in
use for decades and it is one of the main assets. Organizational units and IT systems last rarely more than few
years. The most stable element in this environment is
the terminologies used in the business domains along
the value chain. Therefore, ISO 15926 shall capture the
terminology in a formal and reusable way.

3. Technological Features of Ontologies

Ontologies inherit from several related and precursory technologies, e.g., conceptual modeling lan-
guages, logics, theorem provers, deductive databases,
AI, or semantic nets. Therefore, it comes as no surprise
that the individual technological features of ontologies
are not unique but are also offered by related technolo-
gies. This makes a comparison with established technologies rather tricky and they are therefore often favored in an enterprise setting.

However, we claim that there are combinations of
technological features that make ontologies unique
compared to related technologies. A careful and complete elicitation of the technological features of ontologies is necessary in order to explain how and why such
combinations lead to benefits for enterprise applications in Section 4.1

3.1. Conceptual Modeling

Explanation Conceptual modeling is concerned with
describing a universe of discourse with the help of a
modeling language. According to [42, p. 1], ontologies
are a special type of conceptual models based on the
following, easy-to-understand modeling constructs:

Classes are collections of instances that have similar

properties.

1The starting point for the following analysis is [39,44] who introduce communication (here: Conceptual Modeling combined with
Formality), computational inference (here: Reasoning) and Reuse as
features.

Properties represent relations between classes. Classes
and properties can be hierarchically organized in
taxonomies.

crete members of a class.

Instances (also called objects or individuals) are conRules & Axioms Rules take the form of premise 
conclusion and allow to infer implicit information combined with Reasoning (cf. Section 3.8).
Axioms allow to capture additional information
about classes and properties, e.g., that a relation
is transitive or symmetric.

According to [68,46,19], conceptual models better correspond to an end-users understanding than
machine-oriented models. Further, [39] argues that
Conceptual Modeling paired with Formality also facilitates the communication between implemented computational systems and/or humans.
Scenario The most stable element in the Oil and Gas
industry is the terminologies. Therefore, capturing this
domain in the ISO 15926 ontology provides benefits
since it corresponds better to an Oil and Gas experts
conceptualization of the domain.
Related Work There are more established conceptual
modeling languages that make use of similar modeling
constructs than ontologies as depicted in Table 1.2

Table 1

Comparison to established conceptual modeling languages.

Classes
Properties
Instances
Rules

Ontologies

ERM [20]

UML [12]

()
()

XSD [28]

3.2. Agile Schema Development

Explanation Databases and (model-driven) software
engineering typically start with a conceptual model at
design time which is then manually or automatically
transformed to an executable model. That means the
initial conceptual model is hardly adaptable after the
transformation during run time. In contrast, ontology
stores allow for agile schema development meaning
that classes, properties, rules & axioms, and instances
can be managed at run time of an application (also
dubbed schema last feature). This is achieved by:

2Note that UML provides instances but in a separate model. Rules

& Axioms are also possible but in a separated language (OCL).

API The basic means for managing classes, proper-
ties, rules & axioms as well as instances at run
time is an Application Programming Interface
(API) provided by an ontology store. The API allows to add, change or delete all constructs during
run time of an application.

Evolution Some APIs additionally support automated
evolution strategies to unambiguously define the
way how changes will be resolved [91]. Ontology
changes and their effects can be managed by creating and maintaining different variants of the ontology [70]. This includes reclassification of instances when a class is deleted, for instance.

Dynamic Direct Programming APIs might feature a
direct programming model [80], i.e., each objectoriented class or field is an element of the on-
tology. In dynamically typed languages, the API
might also be generated on-the-fly, i.e., changes
are reflected in the API at run-time.

Scenario Agile schema development also benefits
the Oil and Gas setting, e.g., when new types of equipment have to be captured in the ISO 15926 ontology after it is initially deployed in applications. When a specific class in the taxonomy is deleted, evolution strategies care for its subclasses and for reclassifying all its
instances.
Related Work Relational databases require that a
schema exists prior to data entry. However, agility
is typically given for graph-based data and conceptual modeling languages (cf. [5] for an overview). According to [70], ontology evolution is not the same as
database schema evolution because ontologies comprise data (i.e., instances) as well, are more often
reused, and are de-centralized by nature. Objectoriented database management systems [53] also support APIs and evolution [15] to a certain extent.

3.3. Direct Interaction

Explanation Through the combination of Conceptual Modeling and Agile Schema Development, realizing the user-friendly direct interaction with the ontology and is straightforward. An ontology and its instances can be created, changed, and populated by
generic tools fostered by standardized ontology languages (cf. Web Compliance). Direct interaction typically happens via the following UI paradigms:
Graphical Tree or graph-based visualizations of the
ontology with editing possibilities (surveyed in
[49]).

Daniel Oberle / How Ontologies Benefit Enterprise Applications

Wiki Enhancements of existing Wikis where each
page represents an instance with relations to other
pages (cf., e.g., Semantic Media Wiki [56]).

Natural language User interfaces that apply controlled natural language, i.e., a constrained part
of natural language that can be understood by a
human and processed by a computer (e.g., [10]).

Scenario ISO 15926 is engineered collaboratively by
special interest groups each of which focusses on a
specific sub-domain of Oil and Gas (e.g., drilling and
completion or operation and maintenance). Each special interest group is to capture the corresponding subdomain ontologically and integrate it in the overall
ISO 15926. Using the Semantic Media Wiki, it would
become possible for the domain experts to collaboratively model and document their sub-domains.

Related Work Direct interaction with relational databases require in-depth knowledge of the relational
algebra, e.g., about primary and foreign keys. That
means additional abstraction layers have to be established on top to allow a user-friendly interaction. There
are other technologies that provide generic tools for direct interaction (e.g., topic maps [90]).

3.4. Reuse

Explanation The declarative nature of ontologies
makes them particularly eligible for reuse. That means
the effort of conceptually modeling a domain is undertaken once and the resulting ontology can be reused
in multiple applications. In addition, ontologies are often attributed as being shared, i.e., users agree on the
conceptual model, what potentially increases the level
of reuse. According to [85] there are the following levels of agreement:

Individual The ontology is created and used by only
one person, e.g., a developer exploits it for rea-
soning.

Community A group, company or sector agrees on a

specific ontology and uses it.

World The ontology is published on the Web (cf. Section 3.6) and can potentially be used by anybody.

Transitions from agreement

to
community or from community to world require methods for reaching consensus, e.g., [92].

levels individual

Scenario
In the Oil and Gas setting, the ISO 15926
ontology shall be used for several purposes and in different applications. Thus, reuse is one of the inherent features sought by using an ontology. The level
of agreement would be community, since the ontology
shall be used by the Oil & Gas industry.
Related Work Although it is not their initial motiva-
tion, technologies such as conceptual database design
(with, e.g., ERM [20]), UML [12], Model-Driven Engineering with its platform-independent models [50],
or XML Schemas, can achieve reuse as well. In prac-
tice, shared conceptualizations are often represented
by such languages. Examples are the bulk of SOA reference models such as SOA-RM [60] or SOA-RAF [2]
given in UML.

3.5. Best Practices

Explanation Ontologies targeted at reuse, e.g., [73,
7], are often built by ontological analysis. That means
classes and properties are related to predefined categories grounded in philosophical studies. What is typically gained is an increased understanding of ones
own ontology and a cleaner design. There exist the following best practices:

Foundational Ontologies to prevent modeling from
scratch by giving a well-engineered starting point
for ones own ontology. The use of such an ontology prompts an ontology engineer to sharpen
his/her notion of the concepts to be modeled (cf.
DOLCE [37] as an example).

Ontology Design Patterns save modeling efforts by
providing templates for ever re-occurring modeling needs. [78]

Quality Criteria The OntoClean [41] approach provides explicit quality criteria for building an ontologically correct taxonomy.

Scenario
ISO 15926 Part 2 specifies an ontology for
long-term data integration, access and exchange to
support the evolution of data through time. It can be
regarded a foundational ontology in the sense that it is
very specific about its ontological assumptions.[9]
Related Work To the best of our knowledge, the idea
of having foundational ontologies has not occurred in
other disciplines. Note, however, that foundational ontologies can be applied to other conceptual modeling languages as well, e.g., UML class models. There
are examples for quality criteria, e.g., normalization in

relational database schemas [25]. There is a bulk of
related approaches to ontology design patterns (e.g.,
software engineering design patterns [36]).

3.6. Web Compliance

Explanation Up until the late 90s there were several
proprietary and incompatible ontology languages and
corresponding tool suites. The recommendations of the
W3C Semantic Web Activity provide Web Compliance for ontologies and allow:

Publication RDF(S) [16] and OWL [62] allow to publish ontologies on the Web. That means every element of an ontology is identified by a URI, XML
serializations are available, and ontologies can
be distributed, modularized and referenced across
the Web. If URIs are used as identifiers for resources and, at the same time, as pointers to additional information on those resources, one speaks
of the Web of Linked Data [11].

Querying SPARQL [79] may be used as a unified
querying language across the different ontologies.
SPARQL resembles SQL in syntax but pays tribute to the fact that data is distributed in the Web.
Annotation There are W3C recommendations for annotating existing Web resources with ontologies.
Those are SA-WSDL [30] and SA-REST [38] for
annotating Web service descriptions and RDFa
[3] for annotating HTML pages.

Scenario One reason for formalizing ISO 15926 in
OWL, besides its original language EXPRESS, is certainly because OWL is a W3C recommendation and
many tools for editing, storage, and reasoning exist.
Related Work Web compliance is also given for the
whole set of recommendations that revolve around
XML. The differences between XML Schema [28] and
RDF(S) are elusive as pointed out in [24].

3.7. Formality

Explanation Typically, ontology languages such as
OWL are based on formal logics with model-theoretic
semantics. On the one hand, this provides for unambiguous meaning of modeling constructs. As an ex-
ample, consider the formal semantics of the subclassof modeling construct. The model theory underlying
OWL basically maps the modeling construct to the
subset operator in set theory. Contrast this with the
incomplete, ambiguous, and informal specification of

UML [82]. On the other hand, the model theory is a
prerequisite for having a proof theory, and, thus, Reasoning becomes possible as another feature. There are
three major families of ontology languages [74]:3
Logic Programming Languages in this family are
geared to deal efficiently with larger sets of instances and the reasoning tasks of rules and instance retrieval (e.g., F-Logic [52]).

Description Logics Languages in this family are strict
subsets of first-order logics geared at the reasoning tasks of subsumption checks, consistency
checks, and instance classification (cf. Section
3.8), e.g., OWL-DL [62].

First-Order Logics and higher-order logics allow for
greater expressiveness but are typically not decid-
able, i.e., a sound and complete reasoner cannot
be built.

Scenario Since one of the goals of ISO 15926 is to
capture the the terminology, formality benefits the endeavor by countering ambiguity. Being a prerequisite
for reasoning, formality also helps the goal postulated
in [1], which is to enable autonomous solutions by applying reasoning on the basis of ISO 15926.
Related Work Figure 2 shows that formality actually
a continuum [95]. At the one extreme, there are purely
informal, i.e., natural, languages to specify an ontol-
ogy. However, in our definition, speaking of an ontology is only valid in the rightmost category of logical
languages. In between are languages such as ERM,
that do provide a mathematical definition, yet lack a
model-theoretic formal semantics as a prerequisite for
reasoning.

3.8. Reasoning

Explanation Any logical deduction on the basis of a
formal ontology is defined as reasoning in this paper.
Different reasoning services are offered by inference
engines (also called reasoners) depending on the ontology language.
Subsumption Checking infers implicit super- and
subclass relations between classes. Being applied
mutually to every possible pair of classes, subsumption checking makes it possible to classify
the class hierarchy (automatic classification).

3Most languages existed prior to being used as an ontology language and stem from related disciplines such as mathematical logics,
deductive databases or artificial intelligence.

Daniel Oberle / How Ontologies Benefit Enterprise Applications

Benefit 4 pays tribute to the fact that several new business scenarios have been enabled by ontologies & rea-
soning. Concrete pilots, prototypes, and products may
achieve one or more benefits at the same time.

4.1. Innovative Business Scenarios

Explanation There is evidence that ontologies facilitate hitherto impossible or hard to achieve business
scenarios. A business scenario describes future business circumstances based on past and present trends,
uncertainties, and assumptions.
Technological Features The crucial
technological
features in order to reach this benefit are Reuse and
Web Compliance. The latter allows information to be
published and queried on the Web. As soon as the level
of Reuse of an ontology is community or even world,
the ontology and instances act as a global database
with a common schema according to the principles
of Linked Data. This, paired with the technological
feature of Conceptual Modeling, i.e., classes, prop-
erties, instances and rules in one coherent, easy-to-
understand model, opens up hitherto impossible business scenarios as the examples in the following paragraph show.
Examples The first example concerns the British
Broadcasting Corporation (BBC). The BBC publishes
large amounts of content online, such as text, audio,
and video about programmes or music. Web Compliance (Linked Data) is used to provide cross-domain
navigation and machine-readable representations enabling richer applications on top of BBCs data. The
system gives BBC the flexibility and a maintainability
benefit: the web site becomes BBCs API. The RDF
representations of these web identifiers allow third
party developers to use BBCs data to build and monetize new applications. Reuse is required for this innovative business scenario and provided by the BBC
Programme ontology. [55]

The second example is the Yahoo SearchMonkey
[65] which enables a business model for improved result presentation by specialized search engines. In this
case Web Compliance, especially the feature of Anno-
tation, allows Yahoo to harvest RDFa-enriched Web
pages and to store the extracted RDF triples in its in-
dex. In turn, third party developers can build their own
search engine with a development kit allowing access
to Yahoos search index. Reuse is required to enable
this scenario and given by an ontology prescribed by
the third party developer.

Fig. 2. The continuum of formality. Adapted version from [95].

Consistency Checking examines whether an ontol-

ogy contains contradictions.

Instance Classification checks whether a specific in-

stance is a member of a given class.

Instance Retrieval means querying for instances in-

cluding the consideration of rules and axioms.4

Scenario Rules can be applied to declaratively capture and infer knowledge on the basis of ISO 15926 in
production optimization.
Related Work The reasoning services of logic-pro-
gramming-based inference engines overlap with Retebased business rules management systems [34]. How-
ever, the latter are less formal with respect to the continuum depicted in Figure 2 and are not paired with a
conceptual modeling language.

4. Benefits for Enterprise Applications

The previous section identified individual technological features of ontologies whose combination can
benefit enterprise applications. Figure 3 represents a
generalization, i.e., several pilots, prototypes and products were analyzed to learn which technological features are typically applied to achieve benefits for enterprise applications.5

The benefits are ordered by maturity, i.e., established benefits are explained first. The latter ones are
still in a state of research. Benefits 2 - 4 are related
to user, operation and engineering costs, respectively.

4This means checking the entailment of ground facts (instances)

in terms of logic.

5This does not rule out that further technological features could

be leveraged in principle.

informal                   formalTermsDataDictionariesAd-hocHierarchies(Yahoo!)OrdinaryGlossariesThesauriStructuredGlossariesXMLDTDsInformalHierarchies(Folksonomies)DBSchemaXMLSchemaData Models(UML, STEP)FormalTaxonomiesLogicProgrammingDescriptionLogicsFirst-order,Higher-order,Modal LogicGlossaries&Data DictionariesThesauri,TaxonomiesMetaData,XML Schemas,Data ModelsLogical LanguagesDaniel Oberle / How Ontologies Benefit Enterprise Applications

Fig. 3. Technological features of ontologies lead to benefits for enterprise applications.

4.2. Increased Productivity of Information Workers

Explanation The productivity of an information worker
can be increased by enabling more efficient access to
required information. Information workers elaborate
on knowledge-intensive problems that influence company decisions, priorities and strategies. Information
workers may also be found in the Oil and Gas setting,
e.g., an operator in an onshore control room. According to [76], ontologies can be used for making access
to useful information more efficient by improving:

Visualization Capabilities Ontologies are used for
improving the appearance of the user interface,
i.e., the way information is presented to the user,
by Information Clustering, Text Generation, and
Adaptation of UI Appearance [76].

Interaction Possibilities The user has to interact with
an enterprise application by entering data, selecting items, issuing commands, etc. Ontologies can
improve Browsing, Input Assistance, Providing
Help, and UI Integration [76].

Technological Features The starting point for obtaining this benefit is the integration of all relevant information in a way that is easily consumable by the information worker (Conceptual Modeling). This typically
includes classes and taxonomies, properties, and instances (rules and axioms are of less importance in this

case). The second crucial technological feature is Direct Interaction, i.e., the straightforward, user-friendly
way of viewing and editing the ontology and instances
is possible for the information worker. It is typical for
most approaches that they require Reuse on the level of
community, since a group of information workers cooperate on specific tasks. Some approaches in this category also exploit the Reasoning capabilities of Logic
Programming languages.
Examples A good example is SAPs FindGrid application further discussed in Section 6.1. Another example is ontology-enhanced business intelligence such
as presented in [87]. Here, an ontology captures the
end users domain in an intuitive way. This could be
ISO 15926 for capturing the Oil and Gas terminol-
ogy. The operator of an onshore control room interacts
with the business intelligence solution via the ontology
which can also be personalized and changed for her/his
purposes. The ontology shields the end user from IT
systems intricacies by means of mapping legacy data
structures to the ontology for intuitive interaction. This
is achieved by Instance Retrieval applying Rules.

4.3. Improved Enterprise Information Management

Explanation The goal of Enterprise Information Management (EIM) is to find solutions for optimal use of
information within organizations, for instance to sup-

FO Improved Enterprise Information Management Increased productivity of information workers Innovative Business Scenarios Reasoning Formality Web Compliance Best Practices Reuse Direct Interaction Agile Schema Develop-ment Conceptual Modeling                  Technological                          features:     Increased productivity of software engineering Benefit for enterprise applications: Subsumption Consistency Instance Class. Instance Retrieval Logic Programming Description Logics First Order Logics Publication Querying Annotation Foundational Ontologies Design Patterns Quality Criteria Individual Community World Classes Properties Instances Rules API Evolution Dynamic Programming  Graphical Wiki Natural Language C W S C IC IR LP DL FO DP QC I C C C LP API E DP C P I R C P I LP DL FO P Q A A P Q A IR C P I R C P I R NL W G 1 2 3 4 8

Daniel Oberle / How Ontologies Benefit Enterprise Applications

port decision-making processes or day-to-day operations that require the availability of knowledge. EIM
tries to overcome traditional IT-related barriers to managing information on an enterprise level.

Technological Features Conceptual Modeling is often used for representing an integrated and easy-to-
understand view of enterprise information. Surveys
that discuss this benefit can be found in [97,69]. In
many cases, clarity in representing and storing enterprise information is a must  semantic ambigui-
ties, let alone conceptual inconsistencies, are likely to
cause misunderstandings. To ensure sustainable mod-
eling, building the ontology with Best Practices, such
as Foundational Ontologies (often formalized in FirstOrder logic), Ontology Design Patterns and Quality
Criteria, can help to capture enterprise information
with particular high quality. Also, modeling a domain
once and its enterprise-wide Reuse is one of the goals
sought by EIM.

Agile Schema Development is of importance because it allows to access and evolve the ontology programmatically over time according to the enterprises
representation needs. Ontology APIs with Evolution
possibilities and Dynamic Direct Programming allow
to flexibly cope with inevitable schema changes in enterprise settings.

Web Compliance allows for standardized Publica-
tion, Annotation and Querying of enterprise information with corresponding tooling. This avoids information silos and enables seamless integration with information on the Web (in particular exploiting available
linked data). Finally, Formality counters ambiguities of
enterprise information.

Examples Disaster management is an example where
Conceptual Modeling with Best Practices can help to
improve enterprise information management. In [6,7],
we explain that with the many organizations involved
in the disaster, crossing regional or even national bor-
ders, information exchange is crucial but cumbersome
due to differing vocabularies and representations both
at human language and IT level. Carefully designed
ontologies can be instrumental in addressing this prob-
lem, by providing a reference model for humans, and
with that the basis for enterprise information management at the IT level. We devise an ontology stack covering the description of damages (caused by the disas-
ter), resources (available to organizations fighting the
disaster), and their connection (e.g., which resources
are relevant for which damage). To ensure sustain-

able modeling, we follow the guiding principles of the
foundational ontology DOLCE.

In our running example, it is one purpose of ISO
15926 to facilitate and enable information integration
across IT systems. The declared goal of the Norwegian
Oil and Gas industry is to enable information integration based on ISO 15926 to support, e.g., the integration of different data sources and sensors, the validation of information delivered by different sources, and
the exchange of information within and between companies via Web services [96].

4.4. Increased Productivity of Software Engineering

Explanation While the three benefits so far are already evident in commercially used applications and
products, a prominent research area of ontologies has
been software engineering, cf. [84], where an often
sought benefit is the increase of productivity. The research community tried to increase the productivity
mainly in three ways. The first way is Full Automation of Web service discovery and composition. Activities in this realm are frequently dubbed Semantic
Web Services [63]. Second, ontologies are also applied
to more established software engineering in order to
achieve Cost and Time Reduction. Third, Quality Improvements are often sought in software engineering.
Technological Features Full Automation or Semantic Web Services first leverage Conceptual Modeling
to capture additional information for services, e.g., the
meaning of inputs and outputs. This information is
then annotated to a Web service description (Web Com-
pliance), e.g., by SA-WSDL. Semantic Web Services
approaches typically rely on the Formality of Description Logics or Logic Programming languages in order
to exploit Reasoning capabilities for automating tasks
such as service discovery or composition.

Approaches that target Cost and Time Reduction
or Quality Improvements typically capture relevant,
software-related information by Conceptual Modeling.
Here, Rules are often exploited in order to infer additional knowledge. Note that the level of Reuse is
often low since the ontology is mainly used within
an application for exploiting Reasoning functionality.
Therefore, as in the case of Semantic Web Services, approaches typically rely on the Formality of either Logic
Programming or Description Logic languages.
Examples An example for Full Automation in the
realm of Semantic Web Services is [59]. They use a
Description Logic ontology as well as Subsumption

Reasoning for Web service discovery. Both Web service descriptions and search requests are represented
as classes with properties and axioms. Subsumption
Reasoning then checks whether the search request is
subsumable under, i.e., a subclass of, an existing Web
service description. If this is the case, both match and
the corresponding Web service can fulfill the request.
An example for Cost and Time Reduction is [71].
Here, the developer or administrator is supported in
typical middleware management tasks, such as ensuring compatibility of library licenses. In order to
achieve this, scattered information about software
components and accompanying information is integrated by Conceptual Modeling. The corresponding
ontology is formalized in a Logic Programming based
language including simple Rules & Axioms. The reasoning task of Instance Retrieval is used to obtain in-
formation, e.g., a pair of libraries with incompatible
licenses.

In our running example, building Oil and Gas applications promises to take less time, require less cost,
or feature improved quality  independent of whether
the application actually uses ISO 15926. The basic
idea of Semantic Web Services is also foreseen in the
Oil and Gas setting since an architecture for Web services using ISO 15926 is explicitly mentioned.

5. Challenges of Adopting Ontologies

Sections 3 and 4 focussed purely on the positive
side of ontologies. However, the benefits have to be
contrasted with challenges when adopting ontologies.
The challenges presented in this section were identified during more than five years of industrial research
and are mainly due to the often complex boundary conditions in an enterprise setting.

Some of the challenges also apply to the introduction of other technologies. However, the severity of the
challenges increases for ontologies when moving to
the right on the axis depicted in Figure 4.

5.1. Cost-Benefit Ratio

The first challenge is to arrive at a positive overall
cost-benefit ratio for each use case of ontologies in an
enterprise setting. On the one hand, ontologies promise
benefits for enterprise applications as discussed in Section 4. On the other hand, the costs, e.g., caused by
technical integration or modeling, have to be summed
up and contrasted to the envisioned benefits. Here, the

term Total Cost of Ownership (TCO) [33] comes into
play which is a financial estimate. The purpose of TCO
is to help enterprise managers determine direct and indirect costs of a product or system. One way of formalizing the TCO in a software product is shown below

TCO  TCO drivers  of stacks in landscape 

of technologies

where a TCO driver might be any administrative,
operational or user specific action. More specifically,
such a driver could be the required acquisition of ontology experts, training of existing employees, technical
integration costs, modeling costs, maintenance, technology buy-in or redevelopment costs. Each technology introduces different tools, UIs, and system behaviors which all end up in a higher effort to install, learn,
run, and maintain software. The stacks in the landscape is best explained by an example: with complete
ABAP and Java support, the SAP landscape would feature two technology stacks. If ontology editors, stores,
or reasoners are to be integrated in both stacks, the
TCO will approximately rise by the factor of 2. The
number of technologies equals 1 if ontology language,
reasoner, editor, and store are to be integrated once. If
different reasoners, editors, or stores are required, the
number will rise accordingly.

Coming back to our running example, an Oil company might be forced to integrate ISO 15926 in the
existing IT landscape in order to be interoperable and
compliant with partners. This use case affects the information worker and might require the integration
of a suitable ontology store and API in its existing IT landscape. However, the Oil company might
also feature a large IT department where custom software is developed in-house. In order to increase the
productivity of software engineering, the company
fancies to establish an ontology-supported environment for its developers. This might require the integration of additional  and potentially different
 ontology store, reasoner and API. Therefore, the
of technologies would equal 2 because the Oil company has to integrate different ontology stores and
APIs for two different use cases. If the technology
stacks of the IT landscape and the development environment differ, the of stacks in landscape would also
equal 2.

Daniel Oberle / How Ontologies Benefit Enterprise Applications

Fig. 4. Overview of challenges.

5.2. Training

Two of the TCO drivers mentioned in Section 5.1
are the training of existing employees and the acquisition of ontology experts. Both concern the challenge of
training and are further discussed below.

Concerning the training of existing employees, their
expertise typically lies in one specific technology.
Even if they are willing to adopt and familiarize with
a new technology or paradigm, educating them requires training costs. Usually, the training costs are
very high and managers are not willing to expend them
unless there is a compelling business case. Here, the
intricacies of ontology languages and reasoning tech-
niques, especially description-logic-based, are noteworthy since they are particularly hard to understand
for a non logician. [32]

In the case of existing information workers, they,
too, have to be trained if they are confronted with ontology interpretation or editing. As an example, even
if the Oil company applies a potentially intuitive tool
such as the Semantic Media Wiki, basic knowledge
about the structure of an ontology is required to efficiently use the tool.

Acquiring ontology experts is also problematic since
the technology is still rather new and not established in
the industry. Contrast this with the wide-spread nature
of relational databases. If there is no convincing business case, an enterprise might decide to realize the use
case with conventional technologies, i.e., technologies
where there is expertise readily available in the com-
pany.

5.3. How to Measure the Benefits?

Calculating the TCO of an additional technology
represents an estimate and depends on probabilistic
variables. The calculation and determination of the
benefits is even less concrete. Therefore, the third challenge lies in measuring the benefits, i.e., finding measures for proving that an ontology-based application is
beneficial compared to another solution.

The ontology and Semantic Web community has
been struggling to evaluate their contributions accord-
ingly. Indeed, one hardly finds scientific methods or
measures to prove the benefits. Other communities
share similar struggles, however. It is equally hard to
measure the benefits for knowledge management ap-
plications, conceptual modeling techniques in general,
or object-oriented programming languages compared
to procedural languages.

Probably even harder than a sound scientific evaluation is coming up with a business case. A business case
captures the rationale for initiating a project or task and
is the basis of an enterprise managers decision for in-
vestment. The logic of the business case is that, whenever resources or effort are consumed, they should be
in support of a specific business need. As an exam-
ple, consider the exemplary business need of an Oil
company to increase the productivity of its in-house IT
department with custom software development by 5%
thus saving several thousand Euros per year. A proper
business case must answer to how this can be achieved

 under consideration of the cost-benefit ratio
 including a deployment plan of resources
 defining quantifiable success criteria
 concerning the business capabilities and impact
 specifying the required investment
 including a project plan

5.4. Technical Integration

The fourth challenge concerns embedding of ontology editors, stores, and reasoners in the existing landscape of the enterprise. As an example, consider an Oil
company that wants to incorporate ISO 15926 along a
specific ontology store and API in its existing IT land-
scape. Adaptors have to be written to legacy code and
databases, versions of programming languages might
have to be switched, specific software components
might have to be replaced because of license incom-
patibilities, etc. The challenge typically increases with

Technical  Integration Technical  Integration x n ? Cost-benefit ratio Modeling How to measure the benefits? Training Daniel Oberle / How Ontologies Benefit Enterprise Applications

the size of the legacy code and size of the enterprises
portfolio. The following issues have to be addressed:

Build or buy? If unavailable, the enterprise is prompted

to buy the technology or to consider redevelopment due to immaturity of existing technology, license incompatibilities, or strategic investments.
In the case of buying, the challenges continue be-
low. A redevelopment is only possible if the required expertise is at hand (cf. Section 5.2).

Maturity level of tools Most use cases of ontologies
so far emerged in the realm of scientific contributions with simple prototypes and lacking matu-
rity, documentation, and maintenance. Often such
projects fail when the original developer or community is not available. This might stop the whole
project or lead to redevelopment.

Enterprise scale performance The scientific contributions are often only tested against toy examples
and not thoroughly run through a set of real-world
test cases with enterprise-scale amounts of data.
Depending on the ontology language, enterprise
scale performance might not even be theoretically
possible due to the complexity of the language.
How to handle ontologies in the transport system?
Applications for large enterprises typically feature a transport system for dealing with updates
[45]. When mission critical software is to be up-
dated, a test system is set up which can be transported automatically to a productive system. So
far it remains unclear how to deal with ontologies
in such software transport systems.

5.5. Technical Integration n?

Suppose several use cases of ontologies in software
engineering are adopted by an enterprise. Each use
case might require a different ontology language possibly based on a different logic. That means different use
cases might require different editors, stores, and rea-
soners. In this case, the challenge of technical integration might have to be faced n. The situation is further
complicated when the different use cases are geared at
different beneficiaries. Some might benefit the developer and some might benefit the end user, eventually.
That means editor, reasoner, or store might have to be
integrated both in the developer run time or the application run time environment. Both environments might
be completely different.

Coming back to the example of Section 5.1, the Oil
company is prompted to apply ontologies for two dif-

ferent use cases. Therefore, the hope is to minimize
n ideally to 1. That means, the same ontology lan-
guage, editor, store and reasoner can be used for both
use cases.

5.6. Modeling

5.6.1. Target Audience

The audience for most ontology editing tools is experts in Conceptual Modeling with the required knowledge in the Formality of ontology languages. How-
ever, this is not the audience who is expected to create
ontologies. Often, subject matter experts of domains
are the most suitable people for authoring ontologies.
They usually have no technical expertise in complex
and deep computer science subjects. [26,8]

This phenomenon is also apparent in the Oil & Gas
scenario where special interest groups have to model
their corresponding domain of expertise (drilling and
completion, operations and maintenance, or production and reservoir). However, the group members are
typically no ontology experts.
5.6.2. Upfront Modeling Costs

Ontologies are particularly often attributed to be
afflicted with large upfront modeling cost. Although
true, this holds for conceptual modeling languages
in general and also for modeling database schemas
[31,88]. [86] present a specific cost model for engineering ontologies and identify the following cost
drivers:

Product-related cost drivers account for the impact
of the characteristics of the ontology on the overall costs. Examples are the domain analysis com-
plexity, the conceptualization complexity, or the
documentation needs.

Personnel-related cost drivers emphasize the role of
team experience, ability and continuity with respect to the effort required by an ontology development project.

Project-related cost drivers related to the characteristics of the overall ontology development project
and their impact on the total costs (e.g., level of
support and automation provided by ontology engineering software).

5.6.3. Use Case Dependency

Indeed, if several use cases are to be applied, the
hope is that modeling a domain once and capturing it
in an ontology will suffice for all use cases. However,
different use cases typically have different represen-

Daniel Oberle / How Ontologies Benefit Enterprise Applications

tation needs. Below, we show two typical phenomena
that cause this challenge.6

Regarding the first phenomenon, consider the domain of Oil and Gas as a simple example. When modeling this domain, there might be the need to represent information about equipment (such as pumps
and valves) and at which production plant it is de-
ployed. For one use case it might be enough to represent equipment and plant as classes and to establish a simple relation between them to capture the deployment (cf. Figure 5 top). However, another use case
might have to capture information about the deployment itself, e.g., its duration. Therefore, a simple relation between equipment and plant is not sufficient
to meet this requirement since decidable ontology languages typically do not allow attaching attributes and
properties to other properties. The deployment relation
has to be reified to a separate class (cf. Figure 5 bot-
tom).

Fig. 5. Different use cases might require different representations of
the same domain of discourse.

There is a second phenomenon that leads to different representations of the same domain. For example,
the modeling applied by [61] to the domain of Web services is geared towards reasoning. That means modeling decisions are taken in a way such that subsumption
checking can be applied to eventually discover Web
services. In contrast, [73] models the same domain but
for the purpose of establishing a reference ontology.
Here, modeling decisions are influenced by Best Practices including ontology quality criteria such as OntoClean [41] leading to a different ontology.

According to our experience, ontologies are often
not reused and built without consensus geared to a specific use case, e.g., for purely exploiting Reasoning
features and transparent to the user.

6Note that the phenomena are not idiosyncratic to ontology languages but are also known from other conceptual modeling languages or database schema design (normalization theory [25]).

6. Case Studies

The following section highlights experience reports
for two SAP Research case studies where ontologies
have been applied and also comes back to one particular realization of the Oil & Gas scenario. The experience reports highlight which technological features,
benefits, and challenges did occur and which compromises have been taken.

The first case study, code-named FindGrid, is a success story and indeed the first product of SAP that applies ontologies. The second case study, code-named
xCarrier, has been successfully prototyped and demonstrated to board members with positive feedback but
proved to be too disruptive. The third case study is
in fact a negative example where the challenges outweighed the sought after benefits.

6.1. FindGrid

Problem Knowledge in enterprises is not easily accessible since information is hidden in disparate locations or in the heads of experts. There is typically no
way to capture and reuse know-how. Established solu-
tions, such as search engines, enterprise content management systems, case management systems or collaboration spaces only solve parts of the issue.

Instead, enterprise memory should be built via a
collaborative, self-learning environment that enables
knowledge capture across people, teams and the whole
enterprise. Information workers should be enabled to
activate, consolidate and summarize artifacts such as
folders, bookmarks, tags, notes, or pictures, thus cre-
ating, harmonizing and sustaining the enterprise mem-
ory.

Relevant Technological Features FindGrid provides
automated tool support for all of the above. In essence,
the goal is to increase the productivity of information
workers of SAPs customers by accelerated speed to
knowledge and new ideas. FindGrid is a solution that
supports business research activities, such as market or
product research. A single interface allows a product
manager to search for information, organize findings,
and collaborate with others.

As can be seen in Figure 6, the solution relies on
a Semantic Integration Layer. This layer manages the
Enterprise Memory upon which Semantic Functions,
such as search or auto-completion, are realized.

The following technological features are exploited:
FindGrid relies on Agile Schema Development since it

Equipment Plant deployment Equipment Deployment Plant Daniel Oberle / How Ontologies Benefit Enterprise Applications

requires the schema last feature to cope with building the enterprise memory via a collaborative, selflearning environment. The schema is captured via
Conceptual Modeling, in this particular case via an informal ontology (i.e., a semantic net [57]). The semantic net captures information about cases, folders, associated terms, etc. The level of Reuse is on Community
since all users implicitly share its conceptualization via
FindGrid.

Fig. 6. FindGrid layered architecture.

Relevant Challenges When FindGrid was initiated,
SAP did not own the required ontology store, so a decision had to be made with respect to Build or buy? (cf.
challenge Technical Integration). For the first version
of FindGrid, the decision was taken to license an existing ontology store with complementary services for
realizing the Semantic Functions.

Another major challenge concerned the Cost-Benefit
Ratio, especially the TCO. In the first version of Find-
Grid, the ontology store has been integrated as black
box, i.e., unavailable to other applications that require
such a store as well. The rationale behind this decision was that developing enabling technology should
not hinder the development of the actual solution. Be-
sides, this decision avoided the cost of integrating the

store in the comprehensive SAP technology platform
in the first place and allowed faster prototyping.
Trade off However, SAP intends to develop further
applications that
leverage the semantic integration
layer. The black box integration of the ontology store
and functionality in the first version of FindGrid would
have to be duplicated in each of the further applica-
tions. Instead, the semantic integration layer has to become an integral part of SAPs comprehensive technology platform. The semantic integration layer will thus
be incrementally factored out of FindGrid and redeveloped on the basis of SAPs in-memory graph database
system (HANA and AIS [29,13]).

6.2. xCarrier

Problem This case study concerns the need of SAPs
customers to integrate multiple carrier services for different destinations and goods to decrease transportation costs. As an example, consider a manufacturing
company that needs to ship its goods via the services of
carriers such as UPS, DHL, or FedEx depending on di-
mension, weight, or destination. An internal SAP pro-
totype, called xCarrier [83], addressed B2B integration on the technical level by introducing XCE (xCar-
rier Enterprise) and XCC (xCarrier Connect) on top of
the shipper and carrier backends, respectively (cf. Figure 7). XCC provides normative Web service operations for rate-lookup or tracking which are invoked by
its counterpart XCE. Although a significant benefit to
the one-off manual integration, this internal SAP prototype still did not address the following problems:

1. How to describe carrier service products?
2. How to find suitable carrier services?
3. How to automatically select the appropriate car-

rier service products?

Relevant Technological features
In order to address
the first problem, Conceptual Modeling has been applied to describe carrier service products via an OWLDL ontology. Each carrier service product is represented as a class with ship from and to properties to
locations. Further classes capture information about
shipping items such as parcels, containers or documents and many more. The second problem was addressed by introducing another software component,
viz., XCD (xCarrier Discovery), which allows carriers
to publish their service descriptions via XCC and shippers to find suitable carrier service products. A Carrier Manager was developed which applies the benefit

Daniel Oberle / How Ontologies Benefit Enterprise Applications

other challenge proved to be Enterprise scale performance (the reasoner has to process up to 20.000 automatic classifications per hour) and the Maturity level
of tools (no commercially proven description logic reasoner has been available at that time). Another challenge was to convince decision makers of a positive
Cost-benefit Ratio compared to a solution with established technology. Also here, the Build or buy? challenge was evident and led to many problems on the
side of decision makers.

Trade off The dilemma between technological features and challenges was solved by not productizing
xCarrier. Apart from the challenges there were other
reasons, e.g., lack of adoption of the carriers and organizational obstacles. In other words, the proposed solution was too disruptive at that time.

6.3. Oil & Gas

Problem The Oil & Gas scenario in Section 2 requires a middleware solution for composing existing
applications and information repositories (such as rotating equipment monitoring, facility monitoring, engineering systems, asset management) to new applications (such as drilling program planning, production optimization, equipment fault detection, or plan
turnaround). Such composite applications depend on
information stemming from several existing IT sys-
tems, and, thus, benefit from semantically unambiguous information exchange provided by ISO 15926.

One commercially available middleware solution is
given by [22] which however existed prior to the introduction of the ISO 15926 ontology. The middleware
provides an enterprise service bus exchanging messages via a set of existing standards in Oil & Gas. This
set of standards is proprietarily represented via a conceptual model, i.e., [77], which is given in UML, how-
ever. The problem was to incorporate support for ISO
15926 in this existing environment.

Relevant Technological features The main technological feature sought in this particular case is Reuse
 the middleware has to pay tribute to the fact that
ISO 15926 is standardized, and, thus, needs to support
the standard.

Relevant Challenges The main challenges as indicated above has been the Technical Integration and
Cost-Benefit Ratio. The middleware solution, including its UML-based conceptual model, existed prior to
the task of integrating ISO 15926, so immense integra-

Fig. 7. xCarrier setup. Circles in XCC (xCarrier Connect) represent
Web service operation interfaces.

of Direct Interaction allowing the definition of carrier
service products. The solution to the third problem is
based on [35], where we reduce selection and discovery to the Formality of Description Logics and subsequent Subsumption Checking. [35] also allows to define preferences in the ontology to specify which carrier service product is to be used depending on a specific shipment request. This is done graphically in the
Shipper Manager. All this increased the productivity
of software engineering since selection, discovery and
preferences could be reduced to existing reasoning ser-
vices.

Web Compliance improves enterprise information
management since SAP could prescribe a Common
Ontology about carrier service products and publish
it on www.sap.com, for instance. Carriers could
then specialize the Common Ontology for their specific representation needs and publish on their domain.
Specific carrier service description can still be maintained in XCD but reference their corresponding on-
tologies. Our selection and discovery approach still
works because of the open-world assumption of OWL-
DL. WSDL descriptions of XCC can apply Annotation
by applying SA-WSDL in order to link to their ontol-
ogy. Similar holds for the XML messages that are payload of actual SOAP messages during runtime. Shippers may also specialize the Commmon Ontology to
represent additional information required for specifying their preferences.
Relevant Challenges One major challenge of this
case study has been Training. The case study relies on
the approach in [35] which makes use of intricate description logic capabilities. Since this could be understood only by the authors but not by the remaining software engineering team, the hurdle was too high. An-

SAP  ERP XCE Shipper Carrier Carrier Backend XCC XCD Common Ontology - additional info - preferences - zones - products publish discover Carrier Manager Shipper Manager extends extends XCE XCC Daniel Oberle / How Ontologies Benefit Enterprise Applications

tion costs would have to be justified in order to support
the ontology.

the contribution has been positioned in the middleware
community.

Trade off The solution chosen was to remodel and
adapt parts of ISO 15926 in a self-owned modeling en-
vironment, viz., [58], which required manual effort and
eventually led to the deviation of the standard. The deviation was required to allow for scalability of storage
[66].

7. Recommendations

This paper delineates the technological features of
ontologies and explains why these features are relevant to achieve specific business benefits. In addition,
this paper identifies a set of challenges when trying
to adopt ontologies in a given enterprise setting. The
following discussion elicits potential trade-offs and
recommends future research directions for each chal-
lenge.

Cost-Benefit Ratio A recent trend to lower TCO is
to use semantic technologies as a service (cf., [27]).
According to this idea, users and developers can exploit ontologies, e.g., an ontology store, without the
need for an own infrastructure, benefitting from the
elastic scalability, flexibility, ease of deployment and
maintenance in the cloud. In this context, cloud services present a viable alternative to in-house solutions
promising significant reduction of cost and ease of use.

Training More research should be conducted in better integration with the software engineering community and their wide-spread and mature tools. A good
example is OWL2Ecore [81] which enables software
engineers to develop applications on the basis of an ontology in their familiar environment, viz., Eclipse. This
avoids that software engineers have to acquaint with
ontologies.7

Another proposed remedy is to include the topic
of ontologies in standard curricula in computer science courses. Some recommendations for how curricula should look like are given in [67]. Also, the Semantic Web community should target publishing their research results in the benefitting community. A good
example is [72], where ontologies are used to facilitate
management of application servers. Correspondingly,

7This is not to be confused with exploiting the plethora of existing UML editors for ontology engineering, e.g., [17], what serves
primarily the Semantic Web community.

How to measure the benefits? A cost model for ontology engineering published in [86] has been proposed in the Semantic Web community. Together with
first efforts of measuring and comparing cost and bene-
fits, e.g., in [18], this is an early but promising research
direction which should be strengthened.

With respect to defining a business case, the communique in [94] is a promising endeavor in that it assists in making the case for the use of ontology by
providing concrete application examples, value met-
rics, and advocacy strategies. The communique targets
ontology technology evangelists who already get the
value but want to overcome the blank stares they get
when trying to explain it to people who do not.

Technical Integration When ontologies are applied
in enterprises, they almost always have to be integrated
in existing IT landscapes with several boundary con-
ditions. One stream of research, viz., [75], addresses
this challenge of technical integration by introducing a
reference architecture for using ontologies in existing
enterprise settings in a non-intrusive way.
Technical Integration n? The hope is that technical integration is not required on a per use case basis but that software components such as ontology ed-
itor, stores, and APIs can be factored out much like
what happened with database management systems.
Endeavors, such as the NeOn API and plug-ins [93],
have been a step in this direction.

Modeling One established area of countering the
challenge of Upfront Modeling Costs is ontology
learning. Although initial learning results require manual adaptations, the approach helps to bootstrap ontologies as shown in [43], for instance. Another idea
is to only model what is initially required and then exploit the technological feature of Agile Schema Development to evolve the schema at run time.

[14] is a way to address Use Case Dependency by
contextualizing ontologies. Specific parts of the ontology can be kept local, when they do not represent a
shared view but only a partys view of a domain.
Acknowledgements My appreciation to Kunal Verma,
the initial editor, for valuable feedback shaping the final version as well as the initial reviewers Rama Akkiraju and an anonymous reviewer. Further acknowledgments go to Heiko Paulheim, Boris Motik, and
Frithjof Dau for open reviews as well as Simon Schei-

Daniel Oberle / How Ontologies Benefit Enterprise Applications

der, Michael Uschold, and Leo Obrst for official re-
views. Many thanks also to Nico Licht from the FindGrid team and my colleague Andreas Friesen.
