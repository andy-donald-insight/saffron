Online Ontology Shortest Paths Searcher

Ondrej Zamazal

Department of Information and Knowledge Engineering

University of Economics, W. Churchill Sq.4, 130 67 Prague 3, Czech Republic

ondrej.zamazal@vse.cz

ABSTRACT

Entities within an ontology are connected via different paths.
Connection of entities can be even considered within an ontology merged with its import closure constituting an ontology network. This demo paper presents a web-based tool for
search of shortest path between entities in an ontology or an
ontology network. Computing shortest paths is an important task for different graph based analysis and it can also
support an user in his/her relationship exploration effort.

1.

INTRODUCTION AND MOTIVATION

In this demo paper we introduce a web-based tool for
search of shortest paths between entities in an single ontology or ontology merged with its import closure constituting
thus an ontology network. Additionally, we compute a maximum number of levels in ontologys taxonomies and we also
provide a diversity metric for computed shortest path. Computing shortest paths is an important task for different graph
based analysis, e.g. measuring a nodes betweenes centrality
in a graph [4]. Further, finding shortest paths can help in,
e.g., an entity relationship exploration where an user can
be interested whether two entities are in some relationship.
Discovered shortest paths can help to understand how to
particularly querying an ontology, e.g. by using SPARQL.1

logical constructs.

2. ONTOLOGY SHORTEST PATH

For computation of shortest path we consider the graph
representation of an ontology; potentially merged with its
import closure. This graph representation is an edge-labeled
directed multigraph G = (V, E), where: V is a finite set
of vertices representing the named entites and anonymous
classes defined in the ontology. E  V PL V is a ternary
relation whose elements (vm, li, vn) are language edges, where
l  PL  PI  PP . PL is the set of all the language constructs in the ontology language for defining entities. PL

1http://www.w3.org/TR/rdf-sparql-query/

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.

SEMANTiCS 15, September 15 - 17, 2015, Vienna, Austria

c 2015 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-3462-4/15/09. . . $15.00
DOI: http://dx.doi.org/10.1145/2814864.2814894

Language Construct
SubClassOf
Domain
Range
Types
EquivalentTo
inverse

Inverse Edge
SuperClassOf
DomainOf
RangeOf
HasInstance
EquivalentTo
inverse

Table 1: The inverse edges for the OWL language
constructs employed in our graph-based representa-
tion.

Corresponding Component Edge

Language Construct
ObjectExactCardinality exactlyComponent
ObjectMinCardinality minComponent
ObjectMaxCardinality maxComponent
ObjectSomeValuesFrom someComponent
ObjectAllValuesFrom
ObjectIntersectionOf
ObjectUnionOf
ObjectHasValue
ObjectComplementOf
ObjectOneOf
DataSomeValuesFrom
DataMinCardinality
DataExactCardinality
DataMaxCardinality
DataHasValue

allComponent
andComponent
orComponent
valueComponent
notComponent
enumerationComponent
dataSomeComponent
dataMinComponent
dataExactlyComponent
dataMaxComponent
dataValueComponent

Table 2: Edges depicting components of anonymous
classes in our graph-based representation.

is equivalent to the set of properties in the OWL vocabu-
lary,2 e.g. Domain.3 PI is the set of inverse variants of
the language constructs from PL (see Table 1) and PP
are relationships which depict components of anonymous
classes (see Table 2). Labels to edges are assigned by function label(l) : L  PL  PI  PP . We extended graph
representation of an ontology used in [2] with anonymous
classes, inverse edges and components edges.

Since an anonymous class can be a vertex of a graph, edges
can connect anonymous classes to their components. This
enables us to capture the larger connected path. On the

2http://www.w3.org/TR/owl2-overview/
3We use the Manchester syntax for OWL constructs: http:
//www.w3.org/TR/owl2-manchester-syntax/


MealCourse ignoring DisjoinWith edge within Wine ontology considering its import closure.

other hand, components constituting an anonymous class
are not directly connected in our graph representation. For
example, Figure 1 visualizes the path between named classes
WhiteWine and MealCourse in ontology for describing food
and wine, the Wine ontology.4 There is also anonymous
class represented by intersection of named class Wine and
restriction on property hasColor with specific individual,
White, on the path. While the path can go to each component of the intersection (named class and individual value
restriction), it does not connect directly components them-
selves. In this case, we do not only consider single the wine
ontology, but we also consider its import closure making thus
the ontology network.
In fact, named classes WhiteWine
and MealCourse are from two different ontologies (wine and
food5) where the wine ontology imports the food ontology.

emphPerson.
Shortest path is a path with a minimum number of edges
between given entities.
In our tool we can further specify which type of edges should be ignored when computing
shortest path. For instance, we can ignore paths containing
a DisjointWith as in our example 1. Our search algorithm
uses breadth-first traversal strategy. Due to its progressive
graph search process with increasing path distance it is common traversal technique for shortest path search from its
inception by E. F. Moore [5]. While an ontology graph G
can generally contain cycles, our breadth-first shortest path
search algoritm avoids cycles by visiting all nodes at most
once. Our implementation is based on OWLAPI6 for manipulating with ontologies. We store the graph based representation of an ontology in the H2 database engine7 that is
a very fast in-memory database. For shortest path visualization we use JavaScript library vis.js 8 because of its easy
use.

4http://www.w3.org/TR/owl-guide/wine.rdf
5http://www.w3.org/TR/2003/PR-owl-guide-20031209/
food
6http://owlapi.sourceforge.net/
7http://www.h2database.com/
8http://visjs.org/

3. PRELIMINARY ONTOLOGY PATH MET-

Since a path can contain different types of edges, we can
count their frequencies. This enables us to capture the degree of diversity for a path as follows:

diversity(p) =

|edge types(p)|

distance(p)

| diversity(p)  (0, 1].

(1)
where distance(p) is a number of edges in the path p and
function edge types(p) returns a set of unique edge types
involved in the path p. Mutually inverse edges are counted
once (e.g. Domain and DomainOf). For example, the path
depicted in Figure 1 has its diversity equal to 1.0. Diversity
metric gives an additional information about shortest path.
It can be included into graph based applications.

Additionally, we compute a maximum number of levels
in ontologys taxonomies (i.e. a maximum depth of the on-
tology). Since taxonomies are very common shortest paths
in many ontologies, this can give an user potentially useful
information when searching for shortest paths.

4. WEB APPLICATION

The web application works in three steps:

 First, an user can input an URL of an ontology and
information whether it should search in merged ontology with its import closure (i.e. ontology network) or
not.

 Second, an user can specify for which named classes
shortest path should be searched. Named classes from
the ontology (or from the ontology network) are listed
so that an user can easily select named classes; potentially also by considering their namespaces. Further,
a maximum distance of shortest path is to be selected
and an user can choose a set of forbidden edges on
shortest path (see Figure 2). Additionally, in order to
support an user with her/his quick grasping the ontol-


ogy, the web application provides a link to ontology
visualization by WebVOWL. 9

 Third, the shortest path between selected named classes
is visualized and additional information (distance, di-
versity, maximum depth of the ontology and forbidden
edges) is provided.

The demo is available at:

http://owl.vse.cz:8080/PathSearcher/.

5. RELATED WORK

OntTools10 from Jena Framework [1] provides an option
to search for shortest paths, however it does not provide any
online user interface. Further, OntTools represents paths using RDF statements, while we apply more OWL-based approach representing paths (e.g. anonymous classes). Next,
OntTools filters paths based on particular statements. How-
ever, we think that this is too strict, e.g., in a situation where
one does not know the components of the path in advance.
Therefore, in our tool we provide more relaxed path filtering
option where one can specify edge type to be ignored while
searching for shortest path between given entities.

There are also related works which deal with a relationship
discovery between entities within datasets, e.g. RelFinder
[3]. Since RelFinder aims at RDF knowledge bases their
relationship discovery algorithm is based on generation of
SPARQL queries searches. By using regular expression patterns certain objects or relationships can be omitted. Our
search can merely omit language relationships which is more
adequate to application for ontologies. Further, similarly
to RelFinder we plan to enable discovering of more than
one shortest path. Next, our search tool enables to work
on a merged ontology with its import closure, RelFinder
works on provided SPARQL endpoint enabling access to
a dataset. In all, while RelFinder focuses on relationships
within RDF knowledge bases, our approach is rather complementary since we merely concentrate on paths within an
ontology TBox.

6. CONCLUSIONS AND FUTURE WORK

9http://vowl.visualdataweb.org/webvowl.html
10https://jena.apache.org/documentation/javadoc/jena/
com/hp/hpl/jena/ontology/OntTools.html

This demo paper introduced the web-based tool for search
of shortest paths between entities within an ontology or an
ontology network. Additionally, we described two relevant
metrics, i.e. maximum depth of an ontology and diversity
of computed shortest path which are both provided by the
tool user interface. We plan to provide shortest path computation as a RESTful service in order to support an easy
integration into potential applications. We also plan to implement a framework for computation of a graph based ontology metrics into which shortest path computation will
be plugged. Next, we also plan to extend this work with a
computation of a path richness of ontologies based on paths
diversity in order to provide a richness ontology characteri-
zation.

7. ACKNOWLEDGEMENT

This work has been supported by the CSF grant no. 14-
14076P, COSOL  Categorization of Ontologies in Support
of Ontology Life Cycle and by long-term institutional support of research activities by Faculty of Informatics and
Statistics, University of Economics, Prague.
