Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

Contents lists available at ScienceDirect

Web Semantics: Science, Services and Agents

on the World Wide Web

journal homepage: www.elsevier.com/locate/websem

The description logic SHIQ with a flexible meta-modelling hierarchy
Regina Motz a, Edelweis Rohrer a, Paula Severi b,

a Instituto de Computacion, Facultad de Ingenieria, Universidad de la Republica, Uruguay
b Department of Computer Science, University of Leicester, England, United Kingdom

a r t i c l e

i n f o

a b s t r a c t

Article history:
Received 2 November 2014
Received in revised form
30 April 2015
Accepted 10 May 2015
Available online 19 May 2015

Keywords:
Description logic
Meta-modelling
Meta-concepts
Well founded sets
Consistency
Decidability

1. Introduction

This work is motivated by a real-world case study where it is necessary to integrate and relate existing
ontologies through meta-modelling. For this, we introduce the Description Logic SHIQM which is
obtained from SHIQ by adding statements that equate individuals to concepts in a knowledge base.
In this new extension, concepts can be individuals of another concept (called meta-concept) which itself
can be an individual of yet another concept (called metameta-concept) and so on. We define an algorithm
that checks consistency of SHIQM by modifying the Tableau algorithm for SHIQ. From the practical
point of view, this has the advantage that we can reuse the code of existing OWL reasoners. From the
theoretical point of view, it has a similar advantage of reuse. We make use of the existing results and
proofs that lead to correctness of the algorithm for SHIQ in order to prove correctness of the algorithm
for SHIQM.

 2015 The Authors. Published by Elsevier B.V.
This is an open access article under the CC BY license
(http://creativecommons.org/licenses/by/4.0/).

Our extension of SHIQ is motivated by a real-world application on geographic objects that requires to reuse existing ontologies and relate them through meta-modelling [1].

Fig. 1 describes a simplified scenario of this application in
order to illustrate the meta-modelling relationship. It shows two
ontologies separated by a horizontal line. The two ontologies
conceptualize the same entities at different levels of granularity.
In the ontology above the horizontal line, rivers and lakes are
formalized as individuals while in the one below the line they are
concepts. If we want to integrate these ontologies into a single
ontology (or into an ontology network) it is necessary to interpret
the individual river and the concept River as the same real object.
Similarly for lake and Lake.

Our solution consists in equating the individual river to the
concept River and the individual lake to the concept Lake. These
equalities are called meta-modelling axioms and in this case, we say
that the ontologies are related through meta-modelling. In Fig. 1,
meta-modelling axioms are represented by dashed edges. After
adding the meta-modelling axioms for rivers and lakes, the concept HydrographicObject is now also a meta-concept because it is a
concept that contains an individual which is also a concept.

The kind of meta-modelling we consider in this paper can be
expressed in OWL Full but it cannot be expressed in OWL DL. The

 Corresponding author.

fact that it is expressed in OWL Full is not very useful since the
meta-modelling provided by OWL Full is so expressive that leads
to undecidability [2].

OWL 2 DL has a very restricted form of meta-modelling called
punning where the same identifier can be used as an individual and
as a concept [3]. These identifiers are treated as different objects
by the reasoner and it is not possible to detect certain inconsisten-
cies. We next illustrate two examples where OWL would not detect
inconsistencies because the identifiers, though they look syntactically equal, are actually different.

Example 1. If we introduce an axiom expressing that HydrographicObject is a subclass of River, then OWL reasoner will not detect
that the interpretation of River is not a well founded set (it is a set
that belongs to itself).

Example 2. We add two axioms, the first one says that river and
lake as individuals are equal and the second one says that the
classes River and Lake are disjoint. Then OWL reasoner does not
detect that there is a contradiction.
In this paper, we consider SHIQ (ALCQ with a role hierarchy,
inverse and transitive roles) and extend it with Mboxes. An Mbox
is a set of equalities of the form a=m A where a is an individual and
A is a concept. We call SHIQM such extension of SHIQ. In our
example, we have that river =m River and these two identifiers are
semantically equal, i.e., the interpretations of the individual river
and the concept River are the same. The domain of an interpretation cannot longer consist of only basic objects. It cannot be an

http://dx.doi.org/10.1016/j.websem.2015.05.002
1570-8268/ 2015 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).

Fig. 1. Two ontologies on hydrography.

arbitrary set either. We require that the domain be a well-founded
set. The reason for this is explained as follows. Suppose we have a
domain I = {X} where X = {X} is a set that belongs to itself.
Intuitively, X is the set
{{{. . .}}}.
Clearly, a set like X should be excluded from our interpretation
domain since it cannot represent any real object from our usual
applications in Semantic Web (in other areas or aspects of Computer Science, representing such objects is useful [4]). The wellfoundedness of our model is not ensured by means of fixing layers
beforehand as in [58] but it is our reasoner which checks for cir-
cularities.

Our approach allows the user to have any number of levels or
layers (meta-concepts, metameta-concepts and so on). The user
does not have to write or know the layer of the concept because the
reasoner will infer it for him. In this way, axioms can also naturally
mix elements of different layers and the user has the flexibility of
changing the status of an individual at any point without having to
make any substantial change to the ontology. In a real scenario of
evolving ontologies, that need to be integrated, not all individuals
of a given concept need to have meta-modelling and hence, they
do not have to belong to the same level in the hierarchy.

We define a tableau algorithm for checking consistency of an
ontology in SHIQM by adding new rules and a new condition
to the tableau algorithm for SHIQ. The new rules deal with
the equalities and inequalities between individuals with metamodelling which need to be transferred to the level of concepts
as equalities and inequalities between the corresponding concepts.
The new condition deals with circularities (with respect to mem-
bership) avoiding non well-founded sets such as River in Example 1. From the practical point of view, extending tableau for
SHIQ has the advantage that one can easily change and reuse the
code of existing OWL reasoners. Moreover, the algorithm follows
the same excellent pay as you go characteristics as the other DL
extensions that provide the foundation of OWL. The pay as you go
characteristic means that if only the expressiveness of SHIQ is
used, the new algorithm just behaves like the tableau algorithm for
SHIQ. In other words, when the meta-modelling features are not
needed, then the algorithm behaves just like the regular, first-order
SHIQ algorithm. From the theoretical point of view, extending
tableau for SHIQ allows us to reuse and invoke the results on
soundness of the tableau algorithm for SHIQ [9]. This paper is an
extension of [10] where we have studied the weaker logic ALCQ
extended with Mboxes. One of the challenges of the present paper is the fact that SHIQ does not satisfy the finite model
property. When the model is finite, it is clear that checking for
well-foundedness with respect to the membership relation is de-
cidable. But when the model is infinite this may not longer be true
since a non-well founded set that is also infinite may have infinite

Fig. 2. Case study on geography.

descendent sequences of the form:
X1  X2  X3  X4  . . . .
We will show that decidability is maintained for SHIQM due to
the fact that the Mbox is finite. In this paper, we additionally study
the problem of inferring the meta-modelling level of an ontology
which was not done in [10].
Organization of the paper. The remainder of this paper is organized
as follows. Section 2 shows a case study and explains the
advantages of our approach. Section 3 recalls the logic SHIQ and
the tableau algorithm for SHIQ [9]. Section 4 recalls the notions of
well-founded relation, sets and the induction (recursion) principle.
Section 5 defines the syntax and semantics of SHIQM. Section 6
gives the tableau algorithm for checking consistency. Section 7
proves its correctness. Section 8 studies the problem of inferring
the meta-modelling level of an ontology. Section 9 compares
our approach with other approaches to meta-modelling in the
literature. Finally, Section 10 summarizes the main contributions
of this paper and Section 11 explains future work.

2. Case study on geography

In this section, we illustrate some important advantages of our
approach through the real-world example on geographic objects
presented in the introduction.

Fig. 2 extends the ontology network given in Fig. 1. Ontologies
are delimited by two horizontal lines and one vertical line. Concepts are denoted by large ovals and individuals by bullets. Metamodelling between ontologies is represented by dashed edges.
Thinnest arrows denote roles within a single ontology while thickest arrows denote roles from one ontology to another ontology.

Fig. 2 has five separate ontologies. The ontology in the uppermost row conceptualizes the politics about geographic objects,
defining GeographicObject as a metameta-concept, and Activity
and GovernmentOffice as concepts. The ontology in the left middle describes hydrographic objects through the meta-concept HydrographicObject and the one in the right middle describes flora
objects through the meta-concept FloraObject. The two remaining
ontologies conceptualize the concrete natural resources at a lower
level of granularity through the concepts River, Lake, Wetland and
NaturalForest.

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

for some concept SantaLucia and this will add a new level in the
meta-modelling hierarchy: concepts, meta-concepts, metametaconcepts and metametameta-concepts. Moreover, the user does
not have to know the meta-modelling levels, they are transparent
for him. Our algorithm detects inconsistencies without burdening
the user with syntactic complications such as having to explicitly
write the level the concept belongs to.

The fourth advantage is about the possibility of mixing levels of meta-modelling in the definition of concepts and roles.
We can have concepts such as GeographicObject which has individuals with different levels of meta-modelling. The individual
physiographic has no meta-modelling at all. Its interpretation belongs to a set of basic objects (level 0). The other two individuals
in GeographicObject have meta-modelling. They actually represent
meta-concepts and their interpretations have level 1. We can build
concepts using union or intersection between two concepts of different levels (layers). We can also define roles whose domain and
range live in different levels (or layers). For example, in Fig. 2, we
have: (i) a role over whose domain is just a concept while the range
is a meta-concept, (ii) a role manages whose domain is just a concept and whose range is a metameta-concept.

3. Preliminaries on SHIQ

In this section we recall the Description Logic SHIQ [9,3].
Horrocks et al. define the notion of tableau as an abstract notion
of model [9]. In this section, we introduce the new notion of
tableau structure and isomorphism between them. These notions
make our proof of correctness for SHIQM more elegant. The
notion of tableau structure is an abstract notion of interpretation.
In other words, tableau structure is to the notion of interpretation
as tableau is to the notion of model. The notion of tableau structure
and isomorphism are inspired in the notions of interpretation
(structure) and isomorphism between interpretations for first
order logic [11, Section 2.11]. Similar to the case of first order logic,
we prove that isomorphic structures satisfy the same properties.

3.1. Syntax and semantics of SHIQ

We assume we have three pairwise disjoint sets: a set of indi-
viduals, a set of atomic concepts and a set of atomic roles. Individuals are denoted by a, b, . . . , atomic concepts by A, B, . . . and atomic
roles by R, S, . . . . The set of atomic roles contains all role names
and all inverse of role names (i.e., R for any role name R). To avoid
considering roles such as R, the function Inv(R) is defined as fol-
lows. Inv(R) = R if R is a role name, and Inv(R) = S if R = S. A
role is transitive if it has a declaration of the form Trans(R).
Let  be the transitivereflexive closure of  over R 
{Inv(R)  Inv(S) | R  S  R}. A role R is a subrole of S if R S.
A role is simple if it is neither transitive nor has any transitive
subroles.
C, D ::= A |  |  | (C) | (C  D) | (C  D) |
(R.C) | (R.C) | ( n S.C) | ( n S.C)

Concepts are defined by the following grammar:

here n is a non-negative integer and S is a simple role. Concepts are
denoted by C, D and atomic concepts by A, B. We omit parenthesis
according to the following precedence order of the description
logics operators: (i) , , ,  n and  n, (ii) , (iii) . Outermost
parenthesis are always omitted

An ontology or knowledge base O in SHIQ is a triplet (T , R, A)
where
1. T , called a Tbox, is a finite set of axioms of the form C  D, with

C, D any two concepts.

Fig. 3. Meta-modelling hierarchy for the ontology of Fig. 2.

Note that the horizontal lines in Fig. 2 do not separate metamodelling levels but just ontologies. The ontology Geographic Object Politics has the metameta-concept GeographicObject, whose
instances are concepts which have also instances being concepts,
but we also have the concepts GovernmentOfficeand Activity whose
instances conceptualize atomic objects.
OWL has only one notion of hierarchy which classifies concepts
with respect to the inclusion . Our approach has a new notion
of hierarchy, called meta-modelling hierarchy, which classifies
concepts with respect to the membership relation . The metamodelling hierarchy for the concepts of Fig. 2 is depicted in Fig. 3.
The concepts are GovernmentOffice, Activity, River, Lake, Wetland
and NaturalForest, the meta-concepts are HydrographicObject and
FloraObject, and the metameta-concept is GeographicObject.

The first advantage of our approach over some previous work
concerns the reuse of ontologies when the same conceptual object
is represented as an individual in one ontology and as a concept in
the other. The identifiers for the individual and the concept will be
syntactically different because they belong to different ontologies
(with different URIs). Then, the ontology engineer can introduce
an equation between these two different identifiers. This contrasts
with previous approaches where one has to use the same identifier
for an object used as a concept and as an individual. In Fig. 2,
river and River represent the same real object. In order to detect
inconsistency and do the proper inferences, one has to be able to
equate them.

The second advantage is about the flexibility of the metamodelling hierarchy. This hierarchy is easy to change by just
adding equations. This is illustrated in the passage from Fig. 1 to
Fig. 2. Fig. 1 has a very simple meta-modelling hierarchy where the
concepts are River and Lake and the meta-concept is Hydrograph-
icObject. The rather more complex meta-modelling hierarchy for
the ontology of Fig. 2 (see Fig. 3) has been obtained by combining the ontologies of Fig. 1 with other ontologies and by simply
adding some few meta-modelling axioms. After adding the metamodelling equations, the change of the meta-modelling hierarchy
is automatic and transparent to the user. Concepts such as GeographicObject will automatically pass to be metameta-concepts
and roles such as associatedWith will automatically pass to be
meta-roles, i.e., roles between meta-concepts.

The third advantage is that the level of meta-modelling has
no bound, i.e., we can have concepts, meta-concepts, metametaconcepts and so on. Fig. 1 has only one level of meta-modelling
since there are concepts and meta-concepts. In Fig. 2, there
are two levels of meta-modelling since it has concepts, metaconcepts and metameta-concepts. If we needed, we could extend it further by adding the equation santaLucia=m SantaLucia

An interpretation I = (I,I) consists of a non-empty set
I (sometimes we drop the super-index when the name of the
interpretation is clear from the context and write just ), called
the domain of I, and a function I which maps every concept to a
subset of  and every role to a subset of    such that, for all
concepts C, D, roles R, S, and non-negative integers n, the following
equations are satisfied, where X denotes the cardinality of a set X:
(R)I = {(x, y) | (y, x)  RI}
(C  D)I = C I  DI
(C  D)I = C I  DI
(C)I =  \ C I
(R.C)I = {x | y.(x, y)  RI and y  C I}
(R.C)I = {x | y.(x, y)  RI implies y  C I}
( n R.C)I = {x | {y.(x, y)  RI and y  C I}  n}
( n R.C)I = {x | {y.(x, y)  RI and y  C I}  n}.

Fig. 4. Negation normal form of a concept, a TBox and an ABox.

2. R, called an Rbox, is a finite set of role inclusion axioms of the
form R  S and transitive role declarations of the form Trans(R),
with R, S atomic roles.
R(a, b), a = b or a = b.

3. A, called an Abox, is a finite set of statements of the form C(a),

Note that we changed the standard definition of SHIQ by adding
equalities of the form a = b for individuals a and b in the Abox.
There are two reasons for adding equality between individuals.
First of all, this is a very useful OWL feature. Second and most
important, it makes it evident that equality and difference between
individuals play an important role in the presence of metamodelling since an equality between individuals is transferred into
an equality between the corresponding concepts and conversely.
We say that a concept is in negation normal form if negation
occurs in front of atomic concepts only. Fig. 4 defines a function
that computes the negation normal form of a concept, a TBox and
an ABox.
C  subcon(D) where subcon is defined as follows.
subcon(C)
subcon(C)
subcon(C  D)
subcon(C  D)
subcon(R.C)
subcon(R.C)
subcon( n S.C) = subcon(C)  { n S.C}
subcon( n S.C) = subcon(C)  { n S.C}.

= {C}
= subcon(C)  {C}
= subcon(C)  subcon(D)  {C  D}
= subcon(C)  subcon(D)  {C  D}
= subcon(C)  {R.C}
= subcon(C)  {R.C}

We say that C is a (syntactic) sub-concept of a concept D if

if C  {A,,}

Let clos(C) be the smallest set that contains the concept C
(assumed to be in negation normal form) and is closed under
(syntactic) sub-concepts and  where  C is the negation normal
form of C. We define RO as the set of roles occurring in T , A and
R together with their inverses.
For O in SHIQ, we define IO as the set of individuals occurring

in A.
Definition 1 (Closure of a SHIQ Ontology). Let O = (T , R, A) be
in negation normal form.

We define the closure of the ontology O as

clos(O) = 

clos(C).

C(a)A or CT

require that the domain  is a set of only basic objects [9].

Note that the definition of interpretation for SHIQ does not
An interpretation I satisfies a TBox T iff C I  DI for each C  D
in T .
An interpretation I satisfies an RBox R iff (i) RI  SI for each
R  S in R and (ii) if {(x, y), (y, z)}  RI then (x, z)  RI for each
Trans(R) in R.
An interpretation I satisfies an ABox A iff aI  C I for each C(a)
in A, (aI, bI)  RI for each R(a, b) in A, aI = bI for each a = b in
A and aI = bI for each a = b in A.
An interpretation I is a model of (T , R, A) iff it satisfies T , R
and A.
We say that an ontology O = (T , R, A) is consistent if there
Some Description Logics weaker than SHIQ have the finite
model property, i.e., a consistent knowledge base always admits
a model with finite domain. SHIQ, however, does not have
the finite model property. This is caused by the combination of
cardinality restrictions, role hierarchies, transitive and inverse
roles in SHIQ. An example of a SHIQ knowledge base that does
not satisfy the finite model property is shown in [12].

exists a model of O.

3.2. Checking consistency for SHIQ

We now recall the tableau algorithm for checking consistency
of an ontology in SHIQ [9,3]. Horrocks et al. assume the existence
of a universal role (a transitive super-role of all roles occurring
in T , R and A, and their respective inverses) to internalize the
TBox [9]. We give a presentation of the tableau algorithm that does
not internalize the TBox (and hence, we do not need to add the
universal role in our syntax). Instead of internalizing the Tbox, we
add a Tbox rule as in [3]. Our initialization is a bit different too
because our Aboxes can contain equalities between individuals.
A completion forest F for a SHIQ knowledge base consists of
1. a set of nodes, labelled with individual names or variable names

(fresh individuals which do not belong to the ABox),

names or inverses of role names, and

2. directed edges between some pairs of nodes,
3. for each node labelled x, a set F (x) of concept expressions,
4. for each pair of nodes x and y, a set F (x, y) containing role
5. two relations between nodes, denoted by  and . These
relations keep record of the equalities and inequalities of nodes
in the algorithm. The relation  is assumed to be reflexive,
symmetric and transitive while  is assumed to be symmetric.
We also assume that the relation  is compatible with , i.e., if
x  x and x  y then x
 y for all x, x, y. In the algorithm,
every time we add a pair in , we close  under reflexivity,
symmetry and transitivity. Moreover, every time we add a pair
in either  or , we close  under compatibility with .

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

Nodes labelled with individual names, which are present in the
input ABox, are named root nodes.
If nodes x and y are connected by an edge (x, y) with R  F (x, y)
and R S, then y is called an S-successor of x and x is called an
S-predecessor of y. If y is an S-successor or an Inv(S)-predecessor
of x, then y is called an S-neighbour of x. A node y is a successor
(resp. predecessor or neighbour) of x if it is an S-successor (resp. S-
predecessor or S-neighbour) of x for some role S. Finally, ancestor
is the transitive closure of predecessor.

A node is blocked iff it is not a root node and it is either directly
or indirectly blocked. A node x is directly blocked iff none of its
ancestors are blocked, and it has ancestors x, y and y such that
1. y is not a root node and
2. x is a successor of x and y is a successor of y and
3. F (x) = F (y) and F (x) = F (y) and
4. F (x, x) = F (y, y).
In this case, we say that y blocks x.
A node y is indirectly blocked iff one of its ancestors is blocked,
or it is a successor of a node x and F (x, y) = ; the latter condition
avoids wasted expansions after an application of the rule -rule.
In Definition 2 and Fig. 5, we assume that T and A have already

been converted into negation normal form (see Fig. 4).

a representative of each equivalence class.

Definition 2 (Initialization). The initial completion forest for O is
defined by the following procedure.
1. For each individual a in the ontology (a  A) set a  a. Those
individuals in the ontology that do not appear in an equality
axiom of the form a = b, will not be in the relation .
2. For each a = b  A, set a  b. We also choose an individual as
3. For each a = b in A, set a  b.
4. For each a  A, we do the following:
F (a) = {C | C(a)  A, a  a};
set F (a) = .

(b) in case a is not a representative of an equivalence class then
5. For all a, b  A that are representatives of some equivalence
class, if {R | R(a, b)  A, a  a, b  b} =  then create
an edge from a to b and set F (a, b) = {R | R(a, b)  A, a 
a, b  b}.

(a) in case a is a representative of an equivalence class then set

Note that in case a is not a representative of an equivalence class
and it has some axiom C(a), we set F (a) =  because we do not
want to apply any expansion rule to F (a). The expansion rules will
only be applied to the representative of the equivalence class of
a. Something similar happens in the -root rule where we also
choose a canonical representative z and set z  y and F (y)
to be empty. In case of the -rule, we also choose a canonical
representative z and set z  y where z may not be a root
node. However, in this case we avoid wasted expansions by setting
F (x, y) =  (see the definition of indirectly blocked node).
The tableau algorithm for SHIQ without ABoxes has only one
-rule that deals with the case  n R.C  F (x) [13]. However, for
checking consistency for a knowledge base (T , A) that includes an
ABox A in SHIQ, the -rule is split into two rules: (i) the -root-
rule is applied when y, z are both root nodes and (ii) the -rule is
applied otherwise. For an explanation of these rules, we refer the
reader to [9].

Definition 3 (Contradiction). F has a contradiction if either
 A and A belongs to F (x) for some atomic concept A and node
x or
 there are nodes x and y such that x  y and x  y.

Fig. 5. Expansion rules for SHIQ.

 there is a node x such that  n S.C  F (x), and x has n + 1 S-
neighbours y1, . . . , yn+1 with C  F (yi), yi
 yj for all i, j 
{1, . . . , n + 1} with i = j.

Definition 4 (SHIQ-Complete). A forest F is SHIQ-complete (or
just complete) if none of the rules of Fig. 5 is applicable.

After initialization, the tableau algorithm proceeds by nondeterministically applying the expansion rules for SHIQ given in
Fig. 5.

The algorithm says that the ontology (T , R, A) is consistent iff
the expansion rules can be applied in such a way they yield a complete forest F without contradictions. Otherwise the algorithm
says that it is inconsistent. Note that due to the non-determinism of
the algorithm, implementations of it have to guess the choices and
possibly have to backtrack to choice points if a choice already made
has led to a contradiction. The algorithm stops when we reach some
F that is complete and has no contradiction or when all the choices
have yield a forest with contradictions.

In spite of the fact that the following lemma will not be needed
later for the proof of termination and correctness of our SHIQM
algorithm, we include it here to add clarity to the exposition.

Lemma 1 (Termination of Tableau for SHIQ).
The tableau
algorithm for SHIQ terminates when started with a SHIQknowledge base (T , R, A).
The above lemma is proved in [9, Lemma 3].

3.3. Tableau structure and isomorphism

We now introduce the notion of tableau structure as an abstract
notion of interpretation. We need to make the distinction between
tableau (the abstract model) and tableau structure (the abstract
interpretation) to express the sentence isomorphic structures
satisfy the same properties.

Definition 5 (Tableau Structure). Let I and R be some arbitrary sets
of individuals and roles respectively. We say that T = (S, L, E , J)
is a tableau structure for I and R if
 S is a non-empty set,
 L maps each element in S to a set of concepts,
 E : R  2SS maps each role to a set of pairs of elements in S,
and
 J : I  S maps individuals to elements in S.
We now give the definition of tableau for SHIQ by making
some minor alterations to [9, Definition 3]. We added the properties (P12) and (P16). These properties are necessary because we
have given a slightly different presentation of tableau algorithm for
SHIQ. (P12) takes into account the Tbox and (P16) accommodates
the equalities in the Abox.

Definition 6 (Tableau for SHIQ). Let O be a SHIQ-knowledge
base of the form (T , R, A). We say that T = (S, L, E , J)
is a tableau for a SHIQ ontology O if T = (S, L, E , J) is a
tableau structure for IO and RO; and it also satisfies the following
properties for all s, t, x, y  S, a, b  IO, R, S  RO and concepts
C, C1, C2:
(P1) if C  L(s), then C  L(s).
(P2) if C1  C2  L(s), then C1  L(s) and C2  L(s).
(P3) if C1  C2  L(s), then C1  L(s) or C2  L(s).
(P4) if S.C  L(s) and (s, t)  E (S), then C  L(t).
(P5) if S.C  L(s), then there is some t  S such that (s, t) 
(P6) if S.C  L(s) and (s, t)  E (R) for some R S with
(P7) (x, y)  E (R) iff (y, x)  E (Inv(R)).
(P8) if (s, t)  E (R) and R S, then (s, t)  E (S).
(P9) if  n S.C  L(s), then {t | (s, t)  E (S) and C  L(t)} 
(P10) if  n S.C  L(s), then {t | (s, t)  E (S) and C  L(t)} 

E (S) and C  L(t).
Trans(R), then R.C  L(t).

n.

n.

C  L(t) or  C  L(t).

(P11) if  n S.C  L(s) or  n S.C  L(s), and (s, t)  E (S), then
(P12) if C  T then C  L(s) for all s  S.
(P13) if C(a)  A, then C  L(J(a)).
(P14) if R(a, b)  A, then (J(a), J(b))  E (R).
(P15) if a = b  A, then J(a) = J(b).
(P16) if a = b  A, then J(a) = J(b).
The proof of the following lemma is very similar to [9, Lemma 2].
For the proof of correctness of our tableau algorithm for SHIQM,
we only need the if-direction of this lemma. The converse is not
going to be used later.
Lemma 2. Let O = (T , R, A). A SHIQ-ontology O is consistent
iff there exists a SHIQ-tableau for O.
Proof. Direction . Let T = (S, L, E , J) be a tableau for a SHIQ
ontology O. Then, we consider the interpretation I = (I,I)
where I := S and
AI := {s  S | A  L(s)}
aI := J(a)
RI :=

E (R)+
E (R)  

if Trans(R)
otherwise

P  R,P=R

P I

where E (R)+ is the transitive closure of E (R).

We prove that I is a model of the SHIQ-ontology. One has to

:= {C  clos(O) | s  C I}
:= RI
:= aI

prove first that
C  L(s) implies s  C I.
(1)
The proof of this fact is exactly as in [9, Lemma 2] since we have
not changed the syntax for concepts (we have only added equality
axioms in the Abox and not internalized the Tbox). It follows from
(1) and (P12) that I satisfies the Tbox. Similarly, by (1) and (P13),
I satisfies all individual assertions C(a) of the Abox and by (1)
and (P14), I satisfies all role assertions R(a, b) of the Abox. The
interpretation I satisfies all assertions a = b of the Abox by (P16)
without any need of (1). Similarly, it satisfies the assertions a = b
by (P15).
Direction . Given I = (I,I) a model of O, we define a
tableau structure T = (S, L, E , J) for O as follows.
S := I
L(s)
E (R)
J(a)
where clos is given in Definition 1. It is easy to prove that T is a
tableau for O.
We now introduce the notion of isomorphism between tableau
structures (abstract interpretations).
Definition 7 (Isomorphism). Let T = (S, L, E , J) and T =
(S, L
) be two tableau structures for some I and R. An
isomorphism between T and T is a bijective function f : S  S
such that
1. C  L(s) if and only if C  L
2. (s, t)  E (R) if and only if (f (s), f (t))  E
3. f (J(a)) = J
For all s, t  S, a  I, R  R and concepts C. We say that T and T
are isomorphic if there exists an isomorphism between them.
We now prove that isomorphic tableau structures (isomorphic
abstract interpretations) satisfy the same properties and hence, if
one is a model so is the other one.

(f (s)).

(R).

(a).

, J

, E

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

, E

, J
1  i  16.

Lemma 3. Let O be a SHIQ ontology, T = (S, L, E , J) and T =
(S, L
) be two isomorphic tableau structures for IO and RO.
1. T satisfies a property (Pi) iff T satisfies the same property (Pi) for
2. T is a tableau for O iff T is a tableau for O.
Proof. It is enough to prove only one direction. Assume that T
satisfies property (P5). We show that T satisfies (P5) too. The
rest are similar. Suppose S.C  L
(s). By the first clause in
Definition 7, S.C  L(f 1(s)). Since T satisfies (P5), there is
some t  S such that (f 1(s), t)  E (S) and C  L(t). By the
second clause in Definition 7, (s, f (t))  E
(S) and by the first one,
C  L
3.4. Abstract canonical model for SHIQ

(f (t)).

We define the notion of abstract canonical model which is
built from a complete forest without contradictions [9]. The domain S of this abstract canonical model is the set of paths instead
of the set of nodes of the forest. For Description Logics that enjoy
the finite model property (e.g., ALCQ), the domain of the canonical model is the set of nodes of the forest. However, this does not
work for SHIQ because it does not have the finite model property.
We start by recalling the notions of path and tail. Intuitively an
element in the domain S of the canonical model corresponds to a
a sequence of pairs of nodes of F of the form p =  x0
path in F from some root node to some node that is not blocked,
and which goes only via non-root nodes. More precisely, a path is


For such a path we define Tail(p) = xn and Tail(p) = x
n. With
p | xn+1
. The set Paths(F )


n+1

is defined inductively as follows.
 For a root node a in F which is a representative:
 For a path p  Paths(F ) and a node z in F which is a
representative of some equivalence class:
 if z is a successor of Tail(p) and z is neither blocked nor a root


  Paths(F )

node, thenp | z

p | z

  Paths(F ), or
  Paths(F ).

 if, for some node y in F , y is a successor of Tail(p) and z blocks

, we denote the path

, . . . , xn

, . . . , xn

 x0

, xn+1

n+1

y, then

p,

Note that we slightly change the definition of path given in [9,


x is an R-successor of Tail(p)

Lemma 4] making it explicit that we consider representatives.
Definition 8 (SHIQ Canonical Structure). Let F be a completion
forest. We define the canonical tableau structure T = (S, L, E , J)
built from F as follows.
S = Paths(F )

E (R) = 
L(p) = F (Tail(p))

  S  S |
  S  S |

  S  S | a, b are representative

if a is itself a representative
if b is the representative of a  b.

x is an Inv(R)-successor of Tail(q)

root nodes and b is an R-neighbour of a

J(a) =


, q

In the following lemma, the properties (P1)(P12) do not depend
on the initialization and rely only on the hypothesis that F is
complete.

Lemma 4. If F is a SHIQ-complete forest without contradictions
then the canonical tableau structure built from F satisfies the
properties (P1)(P12).
Proof. The properties (P1)(P11) are proved in [9, Lemma 4]. We
only have to prove the property (P12). By Definition 8 and the
definition of Paths(F ), for all p  S = Paths(F ) we have that
L(p) = F (Tail(p)) = F (x) for some node x in F which is not
blocked and is a representative of an equivalence class. So, if C  T
(hypothesis of (P12)), as F is SHIQ-complete, by the Tbox-rule
C  F (x) = L(p).
Besides assuming that F is complete, the following lemma has the
hypothesis that F is obtained by applying the expansion rules to
the forest of the initialization.
Lemma 5 (SHIQ Abstract Canonical Model). Let O be a SHIQknowledge base (T , R, A). If the expansion rules for SHIQ are
applied to O and yield a complete forest F without contradictions
then the canonical tableau structure built from F is a tableau for O.
Proof. The properties (P13)(P15) are proved in [9, Lemma 4]. We
only have to prove (P16). If a = b  A (hypothesis of (P16)), in
the initial completion forest for O, a  b. The expansion rules
can change the representative of the equivalence class but we will
always have that the representative will be some c such that c 

a  b. So, by Definition 8 we have that J(a) = c

 = J(b).

In this section, we included what will be needed later to prove
correctness of the algorithm for SHIQM. Strictly speaking, since
we modified the SHIQ-tableau algorithm from [9] by adding
equality axioms between individuals, one should re-do the proofs
of soundness and completeness. Soundness is easy to prove since it
follows directly from Lemmas 2 and 5. The proof of completeness
is not included here because we do not need it later for proving
correctness of the tableau algorithm for SHIQM and actually,
completeness of the tableau algorithm for SHIQ is a consequence
of Theorem 4 (completeness of the tableau for SHIQM) since a
SHIQ-ontology is a particular case of a SHIQM-ontology when
the Mbox is empty. When the Mbox is empty the tableau algorithm
for SHIQM behaves just like the algorithm for SHIQ since the
new rules for meta-modelling are never applied.

4. Preliminaries on well-founded sets and relations

is no y  Y such that y  m.
Y  X, we have that Y has a minimal element.

In this section, we recall the notions of well-founded relation
and set as well as the induction and recursion principles [14,15,4].
Definition 9 (Well-Founded Relation). Let X be a set and a binary
relation on X.
1. Let Y  X. We say that m  Y is a minimal element of Y if there
2. We say that  is well-founded (on X) if for all Y =  such that
Note that in the general definition above the relation  does not
need to be transitive.
Definition 10 (Well-Founded Set). A set X is well-founded if the set
membership relation  is well-founded on the set X.
Lemma 6. The order  is well-founded on X iff there are no infinite
-decreasing sequences, i.e., there is no xnnN such that xn+1  xn
and xn  X for all n  N.
The proof of the above lemma can be found in [15].

Now we have the above lemma, we can introduce the following

notation.
Definition 11 (Maximal Length). Let  be a well-founded relation
on X. Then, maxl(x) is the maximal length of all descending -
sequences starting from x  X.
Definition 12 (Cycle). We say that  has a cycle (on X) if there
exists x1, . . . , xn  X such that x1  x2  . . .  xn1  xn  x1.
In particular, we also have the following lemma:
Lemma 7. Let X be a finite set. Then,  is well-founded on X iff it
does not have a cycle, i.e., there are no x1, . . . , xn  X such that
x1  x2  . . .  xn1  xn  x1.
As a consequence of Lemma 6, we also have that:
1. If X is a well-founded set then X  X.
2. If X is a well-founded set then it cannot contain an infinite -
decreasing sequence, i.e., there is noxnnN such that xn+1  xn
and xn  X for all n  N.

The following sets will be used to define the domain of the models
of an ontology in SHIQM.
Definition 13 (Sn for n  N). Given a non empty set S0 of atomic
objects, we define Sn by induction on N as follows: Sn+1 = Sn 
P (Sn).
It is easy to prove that Sn  Sn+1 for all n  N.
A set X  Sn can contain elements x such that x  Si for any
i  n. In the case study presented before, this means that elements
with different levels of meta-modelling can coexist in a set X  Sn,
e.g., the set of geographic objects in Fig. 2 has two elements with
meta-modelling and one with no meta-modelling at all.

Lemma 8 (Well-Founded Domain). The sets Sn are well-founded.
The above lemma is proved by induction on n using Lemma 6.

The following lemma will be used in Section 8.

Lemma 9. If x1  x2    xn1  xn  Sm then n  m.
Proof. The proof is by induction on m. Suppose m = 0. Then,
S0 has only basic objects and n = 0. Suppose m > 0. Then,
xn  Sm = Sm1  P (Sm1). Either xn  Sm1 or xn  Sm1. In
the first case, by induction hypothesis, we get that n  m  1. In
the second case, xn1  Sm1, and by induction hypothesis we get
n  1  m  1. In both cases, we have that n  m.
An important reason that well-founded relations are interesting
is because we can apply the induction and recursion principles,
e.g., [15]. In this paper both principles will be used to prove correctness of the Tableau algorithm for SHIQM.
Definition 14 (Induction Principle). If  is a well-founded relation
on X,  is some property of elements of X, and we want to show
that (x) holds for all elements x  X, it suffices to show that:
if x  X and (y) is true for all y  X such that y  x, then (x)
must also be true.

Definition 15 (Function Restriction). The restriction of a function
: X  Y to a subset X of X is denoted as f X and defined as

follows.
f X = {(x, f (x)) | x  X}.

On par with induction, well-founded relations also support

construction of objects by recursion.

Fig. 6. Meta-modelling axiom example.

Definition 16 (Recursion Principle). If  is a well-founded relation
on X and F a function that assigns an object F (x, g) to each pair
of an element x  X and a function g on the initial segment
{y  X | y  x} of X. Then there is a unique function G such that
for every x  X,
G(x) = F (x, G {yX|yx}).

5. The description logic SHIQM

In this section we introduce the new description logic SHIQM,
with the aim of expressing meta-modelling in a knowledge base.
Our notion of meta-modelling allows us to equate individuals to
atomic concepts. This notion of meta-modelling is very expressive
as illustrated by the case study of Section 2.

Definition 17 (Meta-Modelling Axiom). A meta-modelling axiom is
a statement of the form a=m A where a is an individual and A
is an atomic concept. We pronounce a=m A as a corresponds to
A through meta-modelling. An Mbox M is a finite set of metamodelling axioms.
In Fig. 6, the meta-modelling axiom a=m A express that the
individual a corresponds to the concept A through meta-modelling.

We define SHIQM by keeping the same syntax for concept

expressions as for SHIQ.

An ontology or a knowledge base O in SHIQM is a tuple
(T , R, A, M) where T , R, A and M are a Tbox, Rbox, Abox and an
Mbox respectively. The set of all individuals with meta-modelling
of an ontology is denoted by dom(M).

Fig. 7 shows the Tbox, Abox and Mbox of the ontology that
corresponds to Fig. 1. Fig. 8 shows the Tbox, Rbox, Abox and Mbox
of the ontology discussed in Section 2.

The following definition clarifies what corresponds through

meta-modelling means.

Definition 18 (Satisfiability of Meta-Modelling). An interpretation
I satisfies (or it is a model of ) a=m A if aI = AI. An interpretation
I satisfies (or it is model of ) M if it satisfies each statement in M.
We can see that in Fig. 6 the interpretation of the individual a is
the same as that of the concept A, that is: aI = AI = {b, d}.

Unlike SHIQ, the semantics of SHIQM makes use of the
structured domain elements. In order to give semantics to meta-
modelling, the domain has to consists of basic objects, sets of
objects, sets of sets of objects and so on.

Definition 19 (Model of an Ontology in SHIQM). An interpretation I is a model of an ontology O = (T , R, A, M) in SHIQM
(denoted as I |= O) if the following holds:
1. the domain  of the interpretation is a subset of some Sn for

some n  N.

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

Fig. 7. Tbox, Rbox, Abox and Mbox for Fig. 1.

2. I is a model of the ontology (T , R, A) in SHIQ.
3. I is a model of M.
In the first part of Definition 19 we restrict the domain of an
interpretation in SHIQM to be a subset of Sn. The domain  can
now contain sets since the set Sn is defined recursively using the
power set operation. Note that S0 does not have to be the same for
all models of an ontology.

The second part of Definition 19 refers to the SHIQ-ontology
without the Mbox axioms. In the third part of the definition, we
add another condition that the model must satisfy considering the
meta-modelling axioms. This condition restricts the interpretation
of an individual that has a corresponding concept through metamodelling to be equal to the concept interpretation.

Example 3. We define a model for the ontology of Fig. 7 where
S0 = {queguay, santaLucia, deRocha, delSauce}.
The interpretation is defined on the individuals with metamodelling and the corresponding atomic concepts to which they
are equated as follows:
river I = River I = {queguay, santaLucia}
lakeI = LakeI = {deRocha, delSauce}
and on the remaining atomic concept which does not appear on
the MBox the interpretation is defined as follows:
HydrographicObject I
= {river I, lakeI}
= {{queguay, santaLucia},{deRocha, delSauce}}.

Definition 20 (Consistency in SHIQM). We say that an ontology
O = (T , R, A, M) is consistent if there exists a model of O.

The ontologies of Figs. 7 and 8 without any further axioms are

consistent.
Note that the domain  does not have to be closed under
unions, i.e., if X , Y   then X  Y  . We only need that if
X , Y   then X  Y  .
The following example illustrates our treatment of negation.

Example 4. The ontology obtained by adding the assertion
Wetland(river) to the ontology of Fig. 8 is consistent. Since we
have only one universe , river belongs to the complement of
Wetland. If we had a domain for each meta-modelling level, then
by adding Wetland(river) the ontology would become inconsis-
tent. This is because (Wetland)I = 0 \ WetlandI  0 where
0 consists of only basic objects. But river I  1 = P (0) and
since 1  0 = , we have that river I  (Wetland)I.

Fig. 8. Tbox, Rbox, Abox and Mbox for Fig. 2.

The approaches in the literature that have a domain for each
meta-modelling level forbid the assertion Wetland(river) at the
syntactic level [5,7,8]. One can write E(X ) only when X is at stratum
i and E is at stratum i + 1.

We now give several examples of inconsistent ontologies.

Example 5. We add now the axiom HydrographicObject  River
to the ontology of Fig. 7. It is easy to see that the SHIQ ontology
without the Mbox is consistent. However, when we include the
Mbox it is not longer consistent. Suppose we have a model I. Then,
River I = river I  HydrographicObject I  River I.
That is, the set River I is a non well-founded set, since belongs to
itself. This contradicts the first clause of Definition 19.

The following example illustrates how the second and third
conditions of Definition 19 interact.

Example 6. If in the ontology of Fig. 7 we add the axiom
river = lake
the SHIQ ontology without the Mbox is consistent. However, the
SHIQM ontology with the Mbox is not consistent because River
and Lake are non-empty and disjoint.
In the above example, we see that the equality river = lake
between individuals is transferred into an equality between the
corresponding concepts, i.e., River  Lake. The following three
examples illustrate that the transference can be done in the reverse
order as well, i.e., from concepts to individuals. In the second
example, the equality river = lake is not explicit in the ontology
but it is inferred because we have a functional property.

Example 7. If in the ontology of Fig. 8 we now add the axioms
hydrographic = flora
(2)
HydrographicObject  FloraObject.
(3)
Since there is no axiom that says that HydrographicObject and
FloraObject are disjoint, the SHIQ-ontology without the Mbox
is consistent. However, the SHIQM-ontology with the Mbox is
not consistent. Suppose towards a contradiction that there exists a
model I of this ontology. It follows from Definition 19 that I should
satisfy the meta-modelling axioms, i.e.,
hydrographicI = HydrographicObject I
floraI = FloraObject I.
The interpretation I should also satisfy the axioms (2) and (3).
This is clearly a contradiction. Hence, the ontology is indeed
inconsistent.

Example 8. We consider the ontology of Fig. 8 extended with
Wetland  NaturalForest and the statement that associatedWith
is functional.
As before, the SHIQ-ontology without the Mbox is consistent.
However, the SHIQM-ontology with the Mbox is not consistent.
Suppose towards a contradiction that there exists a model I of this
ontology. Using the fact that I should satisfy the MBox axioms, we
have that
wetlandI = naturalForest I.
It follows from the fact that onTheBanks is a subrole of associatedWith
and the functionality of the role associatedWith that
river I = lakeI.
Then, the interpretations of their corresponding concepts by metamodelling must also be equal, i.e.,
River I = LakeI.
But this is not possible because the above two sets are disjoint as
well as non-empty.

Example 9. We consider the ontology of Fig. 8 extended with
Wetland  NaturalForest
preservation = pollutionControl
FloraObject  1 over.Activity.

Then, in presence of meta-modelling there is also an incon-
sistency. Suppose towards a contradiction that I is a model of
this ontology. Then I should satisfy the TBox axiom Wetland 
NaturalForest as well as wetland = naturalForest by meta-
modelling. Since over is functional, we can deduce that I also
satisfies preservation = pollutionControl which contradicts the fact
that I should also satisfy the second axiom above.

Definition 21 (Logical Consequence in SHIQM). We say that S is
a logical consequence of O = (T , R, A, M) (denoted as O |= S) if
all models of O are also models of S where S is any of the following
SHIQM statements, i.e.,
C  D R  S
a = b a = b.

Trans(R) C(a) R(a, b) a=m A

It is possible to infer new knowledge in the ontology with the
meta-modelling that is not possible without it as illustrated by
Examples 59. Example 6 show that an equality a = b between
individuals is transferred as an equality A  B between concepts
when a=m A and b=m B. In other words, if a = b is deduced
from the knowledge base, so is A  B. Examples 79 all show the
converse, i.e., if A  B is deduced from the knowledge base, so is
a = b. This transference of equalities is expressed formally in the
following lemma.
Lemma 10 (Equality Transference). Let O = (T , R, A, M) be a
knowledge base, O |= a=m A and O |= b=m B.
1. If O |= a = b then O |= A  B.
2. If O |= A  B then O |= a = b.
The proof of the above lemma is immediate since a, b, A and B are
all interpreted as the same object.

Remark 1. The above two properties are called intensional regularity and extensionality respectively by Homola et al. [7]. The HiLog
style semantics [2,16,7,8] does not satisfy extensionality (the second property of transference) [7]. As already observed by Motik [2],
HiLog semantics satisfies intensional regularity (the first property
of transference).
Lemma 11. Let O = (T , R, A, M) be a consistent ontology. Then,
O |= a=m .
Proof. Let I be a model of O. Suppose that O |= a=m . Then,
aI   = aI. This contradicts the well-foundedness of .
Definition 22 (Meta-Concept). We say that C is a meta-concept in
O if there exists an individual a such that O |= C(a) and O |=
a=m A.
Then, C is a metameta-concept if there exists an individual a such
that O |= C(a), O |= a=m A and A is a meta-concept. Note that a
metameta-concept is also a meta-concept.
We have some new inference problems:
1. Meta-modelling. Find out whether a=m A or not.
2. Meta-concept. Find out whether C is a meta-concept or not.
Most inference problems in Description Logic can be reduced to
satisfiability by applying a standard result in logic which says that
a formula  is a semantic consequence of a set of formulas  if
and only if    is not satisfiable. The above two problems
can be reduced to satisfiability following this general idea. For
the first problem, note that since a=m A is not directly available
in the syntax, we have replaced it by a = b and b=m A which
is an equivalent statement to the negation of a=m A and can be
expressed in SHIQM.
Lemma 12. O |= a=m A if and only if for some new individual b,
O  {a = b, b=m A} is unsatisfiable.
Proof. First we prove the  direction. Suppose towards a
contradiction that there exists a model I of O such that I |=

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

O{a = b, b=m A}. Then, aI = bI and bI = AI. Since O |= a=m A,
we have that aI = AI. Hence aI = AI = bI. This contradicts the
fact that aI = bI.
We now prove the  direction by transposition. Suppose that
O |= a=m A. Then for some model I of O, aI = AI. We introduce
a new individual b such that bI = AI and clearly, bI = aI. Hence,
O  {a = b, b=m A} is satisfiable.
Lemma 13. A concept C is a meta-concept if and only if for some
individual a we have that O  {C(a)} is unsatisfiable and for some
new individual b, O  {a = b, b=m A} is unsatisfiable.
Proof. By Definition 22, C is a meta-concept iff O |= C(a) and
O |= a=m A. It is easy to see that O |= C(a) is equivalent to the
statement that O  {C(a)} is unsatisfiable.

6. Checking consistency in SHIQM

In this section we will define a tableau algorithm for checking
consistency of an ontology in SHIQM by extending the tableau
algorithm for SHIQ. From the practical point of view, extending
tableau for SHIQ has the advantage that one can easily change
and reuse the code of existing OWL reasoners.

The tableau algorithm for SHIQM is defined by adding three
expansion rules and a condition to the tableau algorithm for
SHIQ. The new expansion rules deal with the equalities and inequalities between individuals with meta-modelling which need
to be transferred to the level of concepts as equalities and inequalities between the corresponding concepts. The new condition deals
with circularities avoiding sets that belong to themselves and more
generally, avoiding non well-founded sets.

Definition 23 (Cycles). We say that the completion forest F has a
cycle with respect to M if there exist a sequence of meta-modelling
axioms A0 =m a0, A1 =m a1, . . . , An =m an all in M such that
A1  F (x0)
A2  F (x1)
...
An  F (xn1)
A0  F (xn)

x0  a0
x1  a1
...
xn1  an1
xn  an.

b=m B.

In the completion forest, F (a) = {B} and F (b) = {A} has a

Example 10. Suppose we have an ontology (T , R, A, M) with
two individuals a and b, the individual assignments: B(a) and A(b);
and the meta-modelling axioms:
a=m A
cycle since A  F (b) and B  F (a).
Initialization for the completion forest from an ontology in
SHIQM is nearly the same as for SHIQ. The nodes of the initial
completion forest will be created from individuals that occur in the
Abox as well as in the Mbox.

In Definition 24 and Fig. 9, we assume that T and A have already

been converted into negation normal form (see Fig. 4).

Definition 24 (Initialization). The initial completion forest for O is
defined by the following procedure.
1. For each individual a in the ontology (a  A  M) set a  a.
2. For each a = b  A, set a  b. We also choose an individual as
a representative of each equivalence class.
3. For each a = b in A, set a  b.
4. For each a  A  M, we do the following:

Fig. 9. Additional expansion rules for SHIQM.

(a) in case a is a representative of an equivalence class then set

F (a) = {C | C(a)  A, a  a};
set F (a) = .

(b) in case a is not a representative of an equivalence class then
5. For all a, b  A  M that are representatives of some
equivalence class, if{R | R(a, b)  A, a  a, b  b} =  then
create an edge from a to b and set F (a, b) = {R | R(a, b) 
A, a  a, b  b}.

After initialization, the tableau algorithm proceeds by nondeterministically applying the expansion rules for SHIQM. The
expansion rules for SHIQM are obtained by adding the rules of
Fig. 9 to the expansion rules for SHIQ.

Blocking is defined as for SHIQ but the definition of root nodes
is different. In SHIQM, the root nodes are the nodes in the Abox,
the Mbox and the ones created by the -rule. As a consequence of
this, nodes created by the -rule cannot be blocked.
We explain the intuition behind the new expansion rules. If
a=m A and b=m B then the individuals a and b represent concepts.
Any equality at the level of individuals should be transferred as an
equality between concepts and similarly with the difference.
The -rule transfers the equality a  b to the level of concepts
by adding two statements to the Tbox which are equivalent to A 
B. This rule is necessary to detect the inconsistency of Example 6
where the equality river = lake is transferred as an equality
River  Lake between concepts. A particular case of the application
of the-rule is when a=m A and a=m B. In this case, the algorithm
also adds A  B. Actually, it adds an equivalent concept which is in
negation normal form (see Fig. 4).
The -rule is similar to the -rule. However, in the case that
a  b, we cannot add A  B because the negation of  is not
directly available in the language. So, what we do is to replace it by
an equivalent statement, i.e., add an element z that witnesses this
difference. Again, note that the concepts we added to the ABox are
in negation normal form (see Fig. 4).
The rules and are not sufficient to detect all inconsistencies.
With only these rules, we could not detect the inconsistency of
Example 8. The idea is that we also need to transfer the equality
A  B between concepts as an equality a  b between individuals.
However, here we face a delicate problem. It is not enough to
transfer the equalities that are in the Tbox. We also need to transfer
the semantic consequences, e.g., O |= A  B. Unfortunately, a
recursive call of the form O |= A  B is not possible. Otherwise we

will be captured in a vicious circle1 since the problem of finding out
the semantic consequences is reduced to the one of satisfiability.
The solution to this problem is to explicitly try either a  b or
a  b. This is exactly what the close-rule does. The close-rule adds
either a  b or a  b. It is similar to the choose-rule which adds
either C or C. This works because we are working in Classical
Logic and we have the law of excluded middle. For a model I of
the ontology, we have that either aI = bI or aI = bI. Since the
tableau algorithm works with representatives, we also have to be
careful how we equate two individuals or make them different.

Note that the application of the tableau algorithm to a SHIQM
knowledge base (T , R, A, M) changes the Tbox as well as the
completion forest F .

(T , F )

Definition 25 (SHIQM-Complete). We say that
is
SHIQM-complete if none of the expansion rules for SHIQM is
applicable.
The algorithm says that the ontology (T , R, A, M) is consistent
iff the expansion rules can be applied in such a way they yield
a SHIQM-complete (T , F ) without contradictions nor cycles.
Otherwise the algorithm says that it is inconsistent. As in SHIQ,
due to the non-determinism of the algorithm, implementations of
it have to guess the choices and possibly have to backtrack to choice
points if a choice already made has led to a contradiction. The
algorithm stops when we reach some SHIQM-complete (T , F )
that has neither contradictions nor cycles or when all the choices
have yield (T , F ) that has either contradictions or cycles.

The algorithm constructs a graph that consists of an arbitrary set
of interconnected root nodes and trees of blockable nodes rooted
in some root node. Termination is a consequence of the following
properties of the expansion rules:
1. New root nodes can be generated by the -rule but they are
bounded by #{(a, b) | a, b  dom(M)} = m2.
2. The expansion rules never remove nodes from the forest. The
only rules that remove elements associated to nodes or edges in
the forest are either the , -root or close-rule which sets them
to . If an edge label is set to  by one of these rules, the node
below this edge is blocked and will remain blocked forever. The
-root rule or close-rule only set the label of a root node x to ,
and after this, the label x is never changed again since all edges
to/from x are removed. Hence, this removal may only happen a
finite number of times.
3. Nodes are labelled with subsets of clos(O) and edges with
subsets of RO, so there are at most 2k.2r .2k = 22k+r different
possible labellings for a pair of nodes and an edge. Therefore,
if a path p is of length at least 22k+r, the pair-wise blocking
condition implies the existence of two nodes x, y on p such that
x directly blocks y. Since a path on which nodes are blocked
cannot become longer, paths are of length at most 22k+r.
4. The concepts of the form R.C or  nR.C in clos(O) trigger the
generation of at most g successors yi. The rule application which
led to the generation of yi will not be repeated. Since clos(O)
contains a total of at most k concepts of the formR.C or  nR.C,
the out-degree of the forest is bounded by gkr.

7. Correctness of the tableau algorithm

7.2. Tableau for SHIQM

In this section we prove termination and correctness of the
tableau algorithm for SHIQM which was described in the
previous section. Our proof of soundness (Theorem 3) is modular.
We actually prove preservation of soundness: if the algorithm for
SHIQ is sound, so does the algorithm for SHIQM. This allows
us to reuse the results on soundness for SHIQ [9] and has the
advantage of making our proofs shorter and more conspicuous.

7.1. Termination of the tableau algorithm

We prove termination of the tableau algorithm for SHIQM.
Before doing this, we add a couple of definitions which will be used
in that proof.
Definition 26 (Concepts from Meta-Modelling). Let O = (T , R, A,
M) be in negation normal form.
We define the set of concepts generated by the application of

meta-modelling rules for O as
concepts(M) = {A  B  B  A, A  B,

B  A | a=m A, b=m B  M}.

Definition 27 (Closure of a SHIQM Ontology). Let O = (T , R,
A, M) be in negation normal form.
clos(O) =

We define the closure of the ontology O as


clos(C).

C(a)A or CT concepts(M)

Theorem 1 (Termination). The tableau algorithm for SHIQM
described in the previous section always terminates.
Proof. Let m = #M, k = #clos(O), r = #RO and g := max{n |
nR.C  clos(O)}.

We now extend the definition of tableau given in Definition 6

with new properties that take into account the meta-modelling.

Definition 28 (Tableau for SHIQM). Let O be a SHIQMknowledge base of the form (T , R, A, M). We say that T =
(S, L, E , J) is a tableau for a SHIQM ontology O if
1. T is a tableau structure for IO and RO where IO is now the
set of individuals occurring in A and M (not only in A), i.e.,
J : IO  S maps individuals occurring in A and M to elements
in S.
2. S  Sn for some Sn (see Definition 13),
3. Let IA be the set of individuals occurring in A. Then, T =
) is a tableau for the SHIQ-ontology (T , R, A),
4. Besides the properties (P1)(P16), T also satisfies these extra

(S, L, E , J IA
i.e., it satisfies the properties (P1)(P16) from Definition 6.

properties:
(P17) if a=m A  M, then J(a) = {x  S | A  L(x)}.
(P18) if J(a) = J(b), a=m A  M and b=m B  M, then
A  B  L(s) and B  A  L(s) for all s  S.
(P19) if J(a) = J(b), a=m A  M and b=m B  M, then there
is some t  S such that A  B  B  A  L(t).

The following lemma says that consistency is equivalent to
having an abstract model.
Lemma 14. Let O = (T , R, A, M). A SHIQM-ontology O is
consistent iff there exists a SHIQM-tableau for O.
Proof. Direction . Let T = (S, L, E , J) be a tableau for a
SHIQM ontology O. Then, we consider the interpretation I =
(I,I) where I := S and
AI := {s  S | A  L(s)}
aI := J(a)
RI :=

E (R)+
E (R)  

if Trans(R)
otherwise

P  R,P=R

P I

1 Consistency is the egg and semantic consequence is the chicken.

where E (R)+ is the transitive closure of E (R).

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

:= {C  clos(O) | s  C I}
:= RI
:= aI

We prove that I is a model of the SHIQM-ontology, i.e., it
satisfies the three conditions of Definition 19. The first condition
is trivial because it is exactly the same condition that appears in
the definition of tableau (see Definition 28). The second condition
follows from Lemma 2 where it is shown that I is a model of
the SHIQ-ontology (T , R, A) without M. The third condition
follows from (P17) and the definition of I, i.e., for all a=m A in T :
aI = J(a) = {s  S | A  L(s)} = AI.
Direction . Given I = (I,I) a model of O, we define a tableau
T = (S, L, E , J) for O as follows.
S := I
L(s)
E (R)
J(a)
where clos is given in Definition 27. We now show that this is a
tableau for O.
To prove (P17), assume a=m A. It follows from the third
condition of Definition 19 that AI = aI. We also have that
aI = J(a) = {s  I | s  AI} = {s  S | A  L(s)}.
To prove (P18), assume that J(a) = J(b), a=m A  M and
b=m B  M. Since I is a model of the ontology, AI = aI = bI =
BI. This means that (A  B)I = (A  B)I = I = S. Hence,
A  B  L(s) and A  B  L(s) for all s  S.
To prove (P19), assume that J(a) = J(b), a=m A  M and
b=m B  M. Since I is a model of the ontology, aI = AI =
bI = BI. Then, there exists some s  (A  B  B  A)I. Hence,
A  B  B  A  L(s).

The rest of the properties, (P1) to (P16) are easy to show using

the fact that I is a model of (T , R, A).

The proof of the above lemma invokes the corresponding result
for SHIQ (Lemma 2) but only in one direction. The direction 
cannot invoke that lemma because clos for SHIQ does not include
the concepts from the Mbox (see Definition 27).

7.3. Abstract canonical model for SHIQM

The abstract canonical interpretation of a SHIQM-know-
ledge base is built as the composition of two interpretations: the
abstract SHIQ-canonical interpretation (Definition 8) and the
function set that computes the set associated to an individual with
meta-modelling recursively.

J Abstract Canonical Model for SHIQ




S = Paths(F )

Domain for SHIQ

= set Recursive Computation of Sets

%%

S = set(Paths(F ))



Domain for SHIQM

The domain S of the tableau built from the completion forest F of a
SHIQ-ontology is the set of paths in F while the domain S of the
tableau of a SHIQM-ontology consists of paths, sets of paths, sets
of sets of paths, etc. The idea of the function set is to associate the
set of objects that the individual c with meta-modelling represents.
We define now set formally as follows.
Definition 29 (From Basic Paths to Sets). Let O = (T , R, A, M)
and let F be a complete completion forest without contradictions

if p = c

for some c  a=m A  M

c]. More formally,
c ]} = id

nor cycles w.r.t. M. For p  Paths(F ) we define set(p) as follows.
set(p) = {set(q) | A  F (Tail(q))}


set(p) = p otherwise.
The function set only changes the paths of the form p = [ c
c] since
only root nodes can have meta-modelling. Paths that are not of the
c] are left unchanged. This means that the function set
form p = [ c
acts as the identity if it is restricted to the paths that are not equal
to p = [ c
set {pPaths(F )|p=[ c
where id is the identity function.
set. We also write c instead of p = [ c
p = [ c
of Lemma 2 where c is interpreted as p = [ c
c]).
Example 11. We consider the ontology network of Fig. 2. Here we
have for example that river is an individual with meta-modelling.
As such, its interpretation should be a set and not a basic object.
The set associated to river is given by the function set and it is as
follows.
set(river) = {queguay, santaLucia}.
The individual hydrographic has also meta-modelling. But its
inhabitants also have meta-modelling. The set associated to
hydrographic is a set of sets given as follows.
set(hydrographic) = {{queguay, santaLucia},
{deRocha, delSauce}}.

The following example illustrates the idea behind the function
c] since a path of the form
c] can be identified with c (see also Definition 8 and the proof

On the other hand, queguay does not have meta-modelling and we
define set as follows.
set(queguay) = queguay.
The function set is actually defined recursively. We will prove later
the correctness of this recursive definition in Corollary 2. We will
also prove that set is an injective function (surjectivity is obvious).
The fact that this function is a bijection is pictured in the diagram
by means of the symbol =. As we mentioned before, we use the
function set to build a canonical interpretation of the SHIQMontology from the canonical interpretation of SHIQ. The fact that
set is an isomorphism plays an important role in the proof that the
canonical interpretation of SHIQM is a model since it allows us
to use Lemma 3 in the proof of Soundness (Theorem 3).

In order to understand the idea of how we use the function
set to build a canonical model of the SHIQM-ontology from
the canonical model of the corresponding ontology without meta-
modelling, we give an example of an ontology in ALCQM where
c]. It is not necessary to consider
all the paths are of the form p = [ c
a more complicated example, since paths that are not of the form
p = [ c
c] do not really help understanding the idea of set since
c]
they are left unchanged. As before we write c instead of p = [ c
since p = [ c
c] can be identified with c. The following example
also illustrates the idea behind the justification of the recursive
definition for set.
Example 12. Suppose we have an ontology (T , A, M) with four
individuals a, b, c and d with axioms B(a), A(c), A(d) and the
meta-modelling axioms given by a=m A and b=m B. The canonical
interpretation I of the ALCQ ontology is then,
I = {a, b, c, d}
AI = {c, d}
BI = {a}

coming from a complete forest without contradictions where
F (a) = {B}, F (c) = {A} and F (d) = {A}. Intuitively, we see
that we need to force the following equations to make the metamodelling axioms a=m A and b=m B satisfiable:
a = {c, d}
b = {a}.

These equations do not have cycles because F does not have

cycles w.r.t. M. We can then define a function set as follows:
set(a) = {c, d}
set(b) = {set(a)}.

The canonical interpretation Im for the ontology in ALCQM is

= {{c, d},{{c, d}}, c, d}

now defined as follows.
Im = set(I)
(A)Im = {c, d}
(B)Im = {{c, d}}.
In this case, Im is a model of (T , A, M). By defining S0 = {c, d},
we see that Im  S2.
We now define two relations: (1)  on the nodes of the forest
and (2)  on the set of paths. We will prove that both relations
are well-founded if F has no cycles w.r.t. M. The fact that 
is well-founded allows us to use the recursion and the induction
principles given in Definitions 14 and 16. The recursion principle
will be used to justify the recursive definition of set (Definition 29).
The induction principle will be used to prove injectivity of set
(Lemma 18). Injectivity is needed to prove Theorem 3 since we
are using set to build a canonical model of the SHIQM-ontology
from the canonical model of the corresponding SHIQ-ontology
without meta-modelling.
Definition 30. The relation  on the set of nodes of F is defined
as b  c iff A  F (b), c  a and a=m A  M.
Example 13. In Example 12, we define  on the set {a, b, c, d} as
follows:
c, d  a
a  b.
If a -decreasing sequence uses the same axiom twice then that
sequence has a cycle and  cannot be well-founded. From this, it
is easy to prove the following lemma.
Lemma 15. If  is well-founded then we have that maxl(c) 
(M) for all nodes c in F .
Definition 31. The relation  on Paths(F ) is defined as q  p iff
Tail(q)  c and p = [ c
c].
Note that neither nor are transitive. We now prove that and
 are well-founded if F has no cycles.
Theorem 2. Suppose F has a finite set of nodes. If the completion
forest F has no cycles w.r.t. M then  is well-founded.
Proof. Suppose  is not well-founded. Since the set of nodes of F
is finite, by Lemma 7,  has a cycle,
yn  y1    yn.
It is easy to see that this contradicts the fact that F has no cycles.
Since the relation  is defined on the set of paths which can
be infinite, we cannot apply Lemma 7 in the following corollary.
Instead, we apply Lemma 6.
Corollary 1. Suppose F has a finite set of nodes. If the completion
forest F has no cycles w.r.t. M then  is well-founded.

c1

c0

c2

  p0 c0

Proof. Suppose towards a contradiction that  is not well-
founded. It follows from Lemma 6 that there exists an infinite -
decreasing sequence starting from some path p0.
. . .  p2 c2
  p1 c1
It follows from the definition of  that for all i  N, we have that
] for some node ci in the forest. By definition of, we have
pi = [ ci
that
. . .  c2  c1  c0.
This contradicts the fact that  is well-founded.
Since is well-founded, we can now apply the recursion principle
and define the function set recursively. Note that in the recursive
step of that definition, we have that q  p. Hence, we have the
following result:

ci

Corollary 2 (Correctness of the Recursion for set). The function set is
a correct recursive definition.

Lemma 16. Let F be a completion forest without cycles with a finite
number of nodes. If S0 = Paths(F ), for all p  Paths(F ), we have
that
set(p)  S(M).

Proof. From the proof of Corollary 1, we have that

maxl(c)

maxl(p) =

if p = c


for some

c  a=m A  M
otherwise.

(4)

It follows from Lemma 15 and (4) that
maxl(p)  (M).
It is easy to prove that set(p)  Smaxl(p) by induction on maxl(p).
Then, set(p)  Smaxl(p)  S(M).

Lemma 17. Let F be a SHIQM-complete completion forest
without contradictions and let AI = {p  Paths(F )
| A 
F (Tail(p))} where I is the interpretation of Lemma 14 associated
to the specific tableau T of Definition 8. If a=m A and a =m A then
either a  a or a  a. In the first case, AI = AI and in the second
case, AI = AI.
Proof. Since F is complete, the close-rule cannot be applied any
more. Hence we have that either a  a or a  a.
Suppose that a  a. By the -rule, A  A and A  A should
both belong to T . By the Tbox-rule, {A  A, A  A}  F (x)
for all individuals x that are not indirectly blocked. All paths p end
in a node x that is not indirectly blocked. Hence, we have that
{A  A, A  A}  F (Tail(p)) for all p  Paths(F ). It is easy to
see that A  F (Tail(p)) iff A  F (Tail(p)) because F is complete
and has no contradictions. Hence, AI = AI.
Suppose now that a  a. By the -rule, there exists a node
z such that A  A  A  A belongs to F (z). Note that z can
never be blocked since z is a root node. Hence, there exists a path p
where Tail(p) = z. Since F is complete and has no contradictions,
F (z) will contain either A and A or A and A. In the first case, it
cannot contain A and in the second case, it cannot contain A. Hence,
AI = AI.

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

The following lemma shows that set is an injective function. The
proof of injectivity is interesting because we apply the induction
principle using the fact that  is well-founded. This lemma is
necessary to build the canonical model of the SHIQM ontology
from the canonical model of the corresponding ontology without
meta-modelling in Theorem 3.
The fact that set is a function is not so evident and it is essentially a consequence of the -rule as illustrated by the following
example (see the proof of Lemma 17).
Example 14. Consider the case of an ontology where A(c), A(d),
a=m A and a=m A. The SHIQ-canonical interpretation of the
ontology without meta-modelling given by AI = {c} and (A)I =
{d} is not a model of the SHIQM-ontology since
aI = AI = {c}
aI = (A)I = {d}.
The -rule has to be applied to ensure that the set associated to a
is uniquely determined and equal to {c, d}.
The fact that set is injective is a consequence of the -rule as
illustrated by the following example (this can also be seen in the
proof of Lemma 17).
Example 15. Consider the case of an ontology where a = b, A(c),
B(c), a=m A and b=m B. The SHIQ-canonical interpretation of
the ontology without meta-modelling given by AI = {c} and
BI = {c} is not a model of the SHIQM-ontology since
aI = AI = {c} = BI = bI.
The -rule has to be applied to ensure that the sets associated to a
and b are different.

c], c  a and a=m A,

Lemma 18 (Injective Function). Let F be a SHIQM-complete
completion forest that has neither contradictions nor cycles. Then, set
is an injective function, i.e., p = p if and only if set(p) = set(p).
Proof. We prove first that set is a function. It is enough to consider
c], c  a=m A and c  a =m A. By Lemma 17,
the case when p = [ c
a  a and {x | A  F (x)} = {x | A  F (x)}. Hence, set(p) is
uniquely determined.
To prove that set is injective, we do induction on  which we
know that is well-founded by Corollary 1. By definition of set, we
have two cases. The first case is when set(p) = p. We have that
set(p) = p and p is exactly p. This was the base case. In the second
case, we have that for p = [ c
set(p) = {set(q) | A  F (Tail(q))}.
Since set(p) = set(p), we also have that p = [ c
a =m A such that
set(p) = {set(q) | A  F (Tail(q))}.
Again since set(p) = set(p), for all A  F (Tail(q)) there exists
q such that A  F (Tail(q)) and set(q) = set(q). By Induction
Hypothesis, q = q. Hence, AI = {q | A  F (Tail(q))}  {q | A 
F (Tail(q))} = AI. Similarly, we get AI  AI. Then, AI = AI.
It follows from Lemma 17 that a  a. Then c  c. Since the
paths consists only of representatives of equivalence classes, we
have that c = c and hence, p = p.
We now define the notion of abstract canonical model which is
built from a complete forest that has neither contradictions nor
cycles.

c], c  a and

, E

, J
) for (T , R, A, M) as follows:
{set(p) | p  S}

Definition 32 (SHIQM Canonical Structure). Let F be a completion forest. We define the canonical tableau structure T =
(S, L
S =
(s) = L(p) with s = set(p)
(R) = {(set(p), set(q))  S  S | (p, q)  E (R)}
(a) = set(J(a))
where T = (S, L, E , J) is the canonical tableau structure
(i.e., the SHIQ-abstract canonical interpretation) built from the
completion forest F given in Definition 8.
Since the tableau structure T from Definition 8 is built from
 is the set
the completion forest F , the domains of J and J
of individuals in the ontology (T , R, A, M) which includes the
individuals occurring in the MBox.
Theorem 3 (SHIQM Abstract Canonical Model). Let O = (T , R,
A, M). If the expansion rules for SHIQM can be applied to O in such
a way that they yield a complete completion forest F that has no contradictions and has no cycles w.r.t. M then the tableau structure given
in Definition 32 is a tableau for the SHIQM-ontology O.

Proof. We have to prove the four conditions in the definition of
tableau for SHIQM (Definition 28).

The first condition follows from Definition 32.
The second condition follows from Lemma 16, i.e.,

S = set(Paths(F ))  S(M).
We now prove the third condition. By Lemma 18, set is a bijection
from S to S. Hence, (S, L, E , J IA
) are
isomorphic tableau structures. Since F is SHIQM-complete,
It follows from Lemma 4 that
it is also SHIQ-complete.

(S, L, E , J IA

satisfies (P1)(P12) as well. We now prove that it also satisfies
(P13)(P16). This is because the canonical tableau structure built
from the initial completion forest F0 satisfies (P13)(P16) and all
expansion rules preserve these properties.

) satisfies (P1)(P12). By Lemma 3, (S, L

) and (S, L

, J

, J

, E

, E

In order to prove the fourth condition, we need to prove the

rules (P17)(P19).
Proof of (P17). Let a=m A  M. Then,


(a) = set(J(a))

Proof of (P18). Suppose J

for b  a

= set
= {set(q) | A  F (Tail(q))}
= {set(q) | A  L(q)}
(set(q))}.
= {set(q) | A  L
(b), a=m A  M and b=m B 
(a) = J
M. Then, set(J(a)) = set(J(b)) by definition of J
. By
Lemma 18, set is injective and hence, J(a) = J(b). By
Definition 8, we have that J(a) = J(b) = [ c
c] where
c  a  b. Since F is complete, the -rule cannot be
applied and we have that AB and BA should have
been added to the Tbox. Since the Tbox-rule cannot be
applied either, A  B  F (x) and B  A  F (x) for
all nodes x that are not blocked. By construction, Tail(p)
is not blocked for all paths p. Hence, for all nodes x =
Tail(p), AB  F (Tail(p)) and BA  F (Tail(p)). This
completes the proof of (P18) since F (Tail(p)) = L(p) =
(set(p)) for all p  Paths(F ).

Proof of (P19). Suppose J

(a) = J

(b), a=m A  M and b=m B 
M. Then, set(J(a)) = set(J(b)) by definition of J
. By
Lemma 18, set is a function and hence, J(a) = J(b).
Then, a  b. Since F is complete, the -rule cannot
be applied and there will be a root node z such that
AB BA  F (z). Since z is considered to be a root
L(p) = L

. Then, ABBA  F (Tail(p)) =

node, take p = z

(set(p)).

By using the notion of isomorphism, we have related the
canonical interpretations of SHIQ and SHIQM. We also avoided
repeating the proof of (P1)(P12). The properties (P1)(P11) were
already proved by Horrocks et al. [9] and we proved (P12) in
Lemma 4.

7.4. Completeness of the tableau algorithm

We now prove the converse of Theorem 3 to conclude our final

result on correctness.
Definition 33. Let T = (S, L, E , J) be a SHIQM-tableau for
a SHIQM-ontology O and F a completion forest. We define a
structure preserving map  : F  T as a function  from the set
of nodes of F to S that satisfies the following conditions:
1. F (x)  L( (x)).
2. If y is an S-neighbour of x, then ( (x),  (y))  E (S).
3. x  y implies  (x) =  (y).
4. x  y implies  (x) =  (y).
for all nodes x, y in F .
Since the tableau algorithm changes the forest as well as the Tbox,
we consider pairs (T , F ) composed of a Tbox T and a forest F .
Notation 1. (T1, F1)  (T2, F2) means that (T2, F2) is obtained
from (T1, F1) by the application of any of the SHIQM-expansion
rules. In order to express which rule has been applied, the arrow
is equipped with the appropriate subscript, e.g., (T1, F1)close
(T2, F2) is the application of the close-rule where the choice is an
equality.

Lemma 19. Let (T1, F1) be a Tbox and a completion forest generated
by the tableau algorithm for O = (T , R, A, M) and let 1 : F1 
T be a structure preserving map such that 1(a) = J(a) for all a
in O. If an expansion rule is applicable to (T1, F1), then this rule can
be applied such that it yields a completion forest F2 and a structure
preserving map 2 : F2  T extending 1.
(T1, F1)
(T2, F2)

+3


ttT

Proof. We do the proof of the most interesting cases.
 Suppose the Tbox-rule is applicable to (T1, F1). Then, (T1, F1)
Tbox(T2, F2) where T1 = T2 and F2 is exactly the same as F1
except in one node x0 where F2(x0) = F1(x0){C} and C  T1.
In this case the map 2 is exactly the same as 1. We have
to prove that 2 : F2  T is a structure preserving map. The
second, third and fourth conditions of Definition 33 are trivial.
The first condition is also trivial for all the nodes except for the
node x0 that has changed. We have to prove that F2(x0) =
F1(x0)  {C}  L(2(x0)). Since F1(x0)  L(1(x0)) =
L(2(x0)) because 1 is a structure preserving map, it is enough
to prove that C  L(1(x0)) = L(2(x0)). We have two cases:

1. If C  T  T1 then C  L(1(x0)) = L(2(x0)) by (P12).
2. If C  T1 \ T then C is either A  B or A  B for a=m A,

b=m B and a  b.
J(a) = 1(a)
= 1(b)
= J(b)

by hypothesis
by Definition 33(4)
by hypothesis.

 L(t)
= L(2(z))

Using (P18), we conclude that both AB andAB belong
to L(1(x0)) = L(2(x0)).
 Suppose the -rule is applicable to (T1, F1) for a  b, a=m A
and b=m B. Then, (T1, F1)(T2, F2) where T1 = T2 and F2
is obtained by adding a node z to F1 with F2(z) = {A  B 
A  B}.
J(a) = 1(a)
= 1(b)
= J(b)

by hypothesis
by Definition 33(3)
by hypothesis.

By (P19), there exists t  S with A  B  A  B  L(t). We
define 2 by extending the domain of 1 with the new element
z and setting 2(z) = t.
We have to prove that 2 : F2  T is a structure preserving
map. All the conditions are trivial except for the first one on the
new node z which is proved as follows.
F2(z) = {A  B  A  B}

by def. of 2.

 Suppose the close rule is applicable to (T1, F1) for a=m A
and b=m B. If J(a) = J(b) then we add a  b and
(T1, F1)close(T2, F2). Otherwise, we add a
 b and
(T1, F1)close(T2, F2). In both cases, the map 2 is exactly the
same as 1. The map 2 trivially satisfies the first and second
conditions of Definition 33 since the forest has not changed
except for the fact that an equality or inequality has been added
(if a  b then F is set to the empty set for a or b). It is enough
to prove that 2 satisfies the third and fourth conditions just
for a and b since  or  has changed only on these elements.
Suppose we added a  b. By our choice of expansion rule, we
also have that J(a) = J(b).
2(a) = 1(a)
= J(a)
= J(b)
= 1(b)
= 2(b)

since 2 = 1
by hypothesis
by our choice of expansion rule
by hypothesis
since 2 = 1.

 Suppose the-rule is applicable to F1. Then, (T1, F1)exists(T2,
F2), there exists x0 such that R.C  F1(x0) = F2(x0) and a
successor y0 of x0 is generated for x0 such that F2(x0, y0) = {R}
and F2(y0) = {C}. Since 1 is a structure preserving map,
R.C  F1(x0)  L(1(x0)). By (P5), we have that there exists
t  S such that C  L(t) and (s, t)  E (R) for s = 1(x0).
We define 2 from 1 by extending the domain of 1 with
the element y0 and setting 2(y0) = t. To prove that 2 is a
structure preserving map, it is enough to consider these two
cases (the rest are trivial):
1. We prove the first condition for the new node y0. By the

2. We prove the second condition for the new pair (x0, y0). By

above,
F2(y0) = {C}  L(t) = L(2(y0)).
the above,
(2(x0), 2(y0)) = (s, t)  E (R).

 Suppose the -rule is applicable to F1. Then, (T1, F1)(T2,
F2), there exists x such that  nR.C  F1(x) = F2(x)
and n distinct successors yi of x are generated for x such that

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

F2(x, yi) = {R} and F2(yi) = {C} for 1  i  n. Since 1
is a structure preserving map,  nR.C  F1(x)  L(1(x)).
By (P10), we have that there exist n distinct ti  S such that
C  L(ti) and (s, ti)  E (R) for s = 1(x). We define 2 from
1 by extending the domain of 1 with n elements yi and setting
2(yi) = ti. To prove that 2 is a structure preserving map, it is
enough to consider these three cases (the rest are trivial):
1. We prove the first condition for the n new nodes yi. By the

2. We prove the second condition for the n new pairs (x, yi). By

above,
F2(yi) = {C}  L(ti) = L(2(yi)).
the above,
(2(x), 2(yi)) = (s, ti)  E (R).
for i, j  {1, . . . , n}. By the definition of 2 given above,
2(yi) = ti = tj = 2(yj).

3. We prove the third condition for the n new nodes. Let yi  yj

Theorem 4. Let O = (T , R, A, M) be a SHIQM-ontology. If O
has a tableau, then the expansion rules for SHIQM can be applied
to O such that they yield a complete completion forest that has no
contradictions and has no cycles w.r.t. M.
Proof. Let T = (S, L, E , J) be a SHIQM-tableau for O. Let F0 be
the completion forest after running the initialization in the Tableau
algorithm with input O. We define 0 : F0  T as 0(a) = J(a)
for all individuals in O. We prove that 0 satisfies the conditions of
Definition 33. These conditions are proved for the individuals a, b
that are in the Abox since these are the only nodes of the initial
forest F0.
1. We have to prove that F0(a)  L(0(a)). Assume C  F0(a).
By the initialization (Definition 24), there exists a  a and
C(a)  A.
C  L(J(a))
= L(J(a))
= L(0(a))
2. Suppose b is an S-neighbour of a. Then, there exists an edge
from a to b in F0 such that R  F0(a, b) and R S or an edge
from b to a in F0 such that R  F0(b, a) and R Inv(S). By the
initialization (Definition 24), in the first case there are a  a
and b  b such that R(a, b)  A.
(0(a), 0(b)) = (J(a), J(b))
= (J(a), J(b))

by (P13)
by (P16)
by def. of 0.

by def. of 0
by (P16)
by (P14)
by (P8).

 E (R)
 E (S)

3. Suppose a  b. By the initialization (Definition 24), there are

a, b such that a  a, b  b and a = b  A.
0(a) = J(a)
= J(a)
= J(b)
= J(b)
= 0(b)

by def. of 0
by (P16)
by (P15)
by (P16)
by def. of 0.
4. Similarly to the previous one.
It follows from Theorem 1 and Lemma 19 that there exists a complete completion forest F and a structure preserving map  :
F  T such that  (a) = J(a) for all a in O. From (P1), (P9) and
the fact that  is a structure preserving map, we can deduce that F
does not have any contradictions. Note that x  y and x  y cannot
be in F by the third and fourth condition of structure preserving
map.

x0  a0
x1  a1
...
xn1  an1
xn  an.

We will prove that F has no cycles using (P17). Suppose towards a contradiction that F has a cycle. Then, there would be a set
of meta-modelling axioms A0 =m a0, A1 =m a1, . . . , An =m an all in
M such that
A1  F (x0)
A2  F (x1)
...
An  F (xn1)
A0  F (xn)
Using (P17) and the fact that  is a structure preserving map such
that  (a) = J(a) for all a in O, we have that:
 (a0) = J(a0) = {x  S | A0  L(x)} A1  L( (a0))
 (a1) = J(a1) = {x  S | A1  L(x)} A2  L( (a1))
...
 (an) = J(an) = {x  S | An  L(x)} A0  L( (an)).
Then, we have that:
 (a0)   (a1)     (an)   (a0).
This contradicts the fact that S is well founded (see Definition 28).

...

The following corollary follows from Lemma 14, Theorems 1, 3 and
4.

Corollary 3 (Correctness of Tableau for SHIQM). The Tableau
algorithm is a decision procedure for the consistency of knowledge
bases in SHIQM.

8. Meta-modelling level

In this section, we introduce the notions of meta-modelling
level of an ontology and show how to compute it. From now on, we
assume that all the individuals with meta-modelling are inhabited,
i.e., for all O |= a=m A, there exists an individual b such that
O |= A(b).

Definition 34 (Meta-Modelling Level). The meta-modelling level of
an interpretation I  denoted as level(I)  is the smallest n such
that I  Sn.
A concept C is at level n in the interpretation I  denoted as
level(I, C)  if n is the smallest natural number such that C I  Sn.
The meta-modelling level of an ontology O  denoted as level(O)
 is the smallest n where n is the level of some model of O.
A concept C of a consistent ontology O is at level n  denoted as
level(O, C)  if n is the smallest natural number such that C I  Sn
and I is a model of O.

Example 16. Suppose we have an ontology O where the ABox has
the assertions A(a0), B(b0), C(c0), P(k, b), P(k, a0), Q (f , c), Q (f , b0)
and the MBox has the axioms a=m A, b=m B, c =m C. In this case,
we have that level(O) = 1.
Example 17. We now consider the ontology of Example 16, with
the following Tbox:
  ( 1 P.)  ( 1 Q .).
In this case, we have that level(O) = 2. This is because in any
model I, we have that either bI = (a0)I or cI = (b0)I. It is easy
to see that there exists a model of this ontology which has level 2
and that also satisfies b = a0 and c = b0. Similarly, there exists a
model of this ontology which has level 2 that satisfies b = a0 and
c = b0. Any other model has greater level.

as follows.

We define a model with level 2 that satisfies b = a0 and c = b0
I = {b0, c0,{b0},{c0},{{b0}}}
(b0)I = b0
(c0)I = c0

cI = C I = {c0}
bI = BI = (a0)I = {b0}
aI = AI = {(a0)I} = {{b0}}.

In the interpretation I given above, we have that level(I, B) =
level(I, C) = 0, level(I, A) = 1 and level(I,) = 2.
We now define a model with level 2 that satisfies b = a0 and
c = b0.
I = {a0, c0,{a0},{c0},{{c0}}}
(a0)I = a0
(c0)I = c0

aI = AI = {a0}
bI = BI = {(b0)I} = {{c0}}
cI = C I = {(c0)I} = {c0}.

In the interpretation I given above, we have that level(I, A) =
level(I, C) = 0, level(I, B) = 1 and level(I,) = 2.
In the ontology defined in Example 17, level(O, A) = level(O, B) =
level(O, C) = 0. Note that the level of A and B in this ontology is
0 but these two concepts do not share a common interpretation
where they both have level 0.

The level of the model found by the tableau algorithm is in itself an upper bound for the meta-modelling level of an ontology
but it may not be the minimal one. In order to compute the metamodelling level of an ontology, we could compute all the complete
and consistent tableau graphs and choose the model that has minimum level. Since this method is very inefficient, we will propose
a different algorithm that may not always give the exact level but
just a range of values where it belongs.

It follows from Lemma 16 that the level of the model I given by
the tableau algorithm is bounded by the cardinality m of the Mbox.
So, we have that level(O)  level(I)  m = (M).
We will define a function lb that computes a lower bound for
level(O) and level(O, C). The following lemma allows us to define
this function recursively. The set of individuals of an ontology is
denoted by Individuals(O) = {a | a  O}.
Definition 35. We define a relation  on the set Individuals(O) as
b  a if O |= a=m A and O |= A(b).
Lemma 20. The relation  is well founded.
Proof. Let I be a model of O. Suppose towards a contradiction that
 is not well-founded. By Lemma 7,  has a cycle,
a0  a1  a2    an1  a0.
By the definitions of  and |=, we have that
(a1)I = (A1)I
(a2)I = (A2)I
...
(a0)I = (A0)I
So, there is a cycle in the domain of the interpretation I
contradicting the first clause in Definition 19.
We now define the function lb that computes a lower bound for
level(O) and level(O, C).

(a0)I  (A1)I
(a1)I  (A2)I

(an1)I  (A0)I.

Definition 36 (Lower Bound). For an individual a in O we define
lb(a) as follows:
lb(a) = 0 if there is no A such that O |= a=m A
lb(a) = max{lb(b) | O |= a=m A, O |= A(b)} + 1.
For an ontology O we define lb(O) as follows.
lb(O) = max{lb(a) | a  O}.
For a concept C of an ontology O we define lb(O, C) as follows.
lb(O, C) = max{lb(a) | O |= C(a)}.
Note that C is a meta-concept iff lb(O, C)  1. We now prove that
lb is a lower bound for the meta-modelling level of an ontology.
This bound may be strictly less than the meta-modelling level.
In Example 16, we have that level(O) = 1 = lb(O), while in
Example 17 we have that lb(O) = 1 < level(O) = 2.
lb(O, C) 
Lemma 21. Let O be a consistent ontology. Then,
level(O, C).
Proof. We prove that level(I, C)  lb(O, C) for an arbitrary model
I of O. Let lb(O, C) = n. Then, it follows from Definitions 36 and
35 and the fact that the set Individuals(O) is finite that there exists
a finite sequence
a0  a1  a1    an1  an.
By the definitions of  and |=, we have that
(an)I  C I
(an)I = (An)I
(an1)I = (An1)I
...
(a1)I = (A1)I
Let level(I, C) = m and C I  Sm. Since (an)I  C I, we have that
(an)I  Sm.
(6)
It follows from (5), (6) and Lemma 9 that m  n.
A direct corollary from the above result is that lb(O)  level(O),
since lb(O,) = lb(O) and level(O,) = level(O).
in order to compute the metamodelling level of an ontology, we could compute all the complete
and consistent tableau graphs and choose a model that has minimum level. Since this method is very inefficient, we instead propose the following algorithm:
1. Run tableau for checking consistency of the ontology and
2. Let n = lb(O) and m = level(I).

getting a model I.
If n = m then the level of the ontology is n
Otherwise the level of the ontology is between n and m.

(an1)I  (An)I
(an2)I  (An1)I

As we mentioned before,

(a0)I  (A1)I.

(5)

Something similar can be done for the meta-modelling level of a
concept. It is enough to substitute lb(O) by lb(O, C) and level(I)
by level(I, C).

9. Related work

In this section, we discuss other approaches to meta-modelling
that appear in the literature. Table 1 gives a summary of our
comparisons.
Punning. OWL 2 DL has a very restricted form of meta-modelling
called punning [3]. In spite of the fact that the same identifier can
be used simultaneously as an individual and as a concept, they
are semantically different. In order to use the punning of OWL 2

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

Table 1
Comparison of meta-modelling approaches.

Approach

Punning
Pan et al.
Motik (-sem.)
De Giacomo et al.
Glimm et al.
Homola et al.

Base DL

Unlim.
levels

ALCHIQ Y

Flexible
structure

Inter-layer
roles

Y(12)

Intensional
regularity

Extensionality Well-foundedness

Y/N

Meta-modelling for
roles

DL in the example of Fig. 1, we could change the name river to
River and lake to Lake. In spite of the fact that the identifiers look
syntactically equal, OWL would not detect certain inconsistencies
as the ones illustrated in Examples 19. In the first example, OWL
will not detect that there is a circularity and in the other examples,
OWL will not detect that there is a contradiction. Apart from having
the disadvantage of not detecting certain inconsistencies, this
approach is not natural for reusing ontologies. For these scenarios,
it is more useful to assume the identifiers be syntactically different
and allow the user to equate them by using axioms of the form
a=m A.
Integrated Meta-modelling in OWL 2. Glimm et al. do not define a
set-theoretical semantics for meta-modelling. Instead, they codify
meta-modelling within OWL DL [17]. This encoding is used to
formalize the rules from the OntoClean methodology in OWL [18].
This approach has the limitation of having only two levels of
meta-modelling (concepts and meta-concepts) and it is not enough
for fully detecting inconsistencies coming from meta-modelling,
e.g., Example 8. On the other hand, by encoding inclusion C  D
between concepts using the role subclass, the authors are able to
express the rules of the OntoClean methodology such as
a=m A b=m B A  B RigidClass(a)

AntiRigidClass(b)

inside OWL 2. It does not seem possible to express such a rule by
using only the meta-modelling expressive power of SHIQM.
Henkin vs. Hilog Semantics. Our semantics follows the style of
the so-called Henkins semantics in the sense that all syntactic
higher order objects have a direct set-theoretical interpretation
via a hierarchy of power sets.2 This is also the style of semantics
followed by Pan et al. [5,6]. The semantics for meta-modelling
given by Motik, De Giacomo et al. and Homola et al. follow a Hilog
style semantics [2,16,7,8].3 In this style of semantics, the same
syntactic object can have different interpretations depending on
the position or role it plays in a sentence, e.g., A is an individual in
B(A) and the same A is a concept in A(B). The first A playing the
role of an individual does not always have the same interpretation
as the second A which plays the role of a concept. The main
drawback of Hilog semantics is that it cannot really express
that the interpretation of a given symbol taken as individual is
the same as the interpretation of another (or the same) symbol
taken as concept. As a consequence, the Hilog style semantics
for meta-modelling is weaker than the Henkin semantics since
it does not satisfy extensionality (see Remark 1 and Lemma 10).
We think that Henkins style semantics is more appropriate for
our applications since besides being more direct, it allows us to
check for inconsistencies which are not detected with the Hilog
semantics, e.g., Examples 79.
-semantics. Motik proposes a solution for meta-modelling that is
not so expressive as RDF but which is decidable [2]. He defines

2 The name Henkin comes from the semantics given by Henkin to the theory of
types [19].
3 The name Hilog comes from the semantics given to higher order logic
programming [20]. This is also the style of semantics followed by RDF [3].

two alternative semantics: the context approach (-semantics)
and the HiLog approach (-semantics). The context approach is
similar to the so-called punning supported by OWL 2 DL. The HiLog
semantics looks more useful than the context semantics since it
can detect the inconsistency of Example 2. Apart from the fact that
this semantic does not satisfy extensionality, it also ignores the
issue on well-founded sets. One can have an ontology with A(A)
which is satisfiable in the Hilog Semantics. The model is I = {X}
where X = {X} is a set that belongs to itself. The conditions
in the definition of Hilog semantics are satisfied since AI  I
and AI  I. The algorithm given by Motik [2, Theorem 2]
does not check for circularities (see Example 5) which is one of
the main contributions of this paper. Moreover, as mentioned
before, his semantics being a Hilog semantics cannot detect the
inconsistencies of some ontologies such as Examples 79. Since
his syntax does not restrict the sets of individuals, concepts and
roles to be pairwise disjoint, an identifier can be used as a concept
(or role) and an individual at the same time. In this way, Motik
can have meta-modelling for concepts as well as for roles. The
description logic SHIQM presented in this paper has only metamodelling for concepts but not for roles.
Higher order description logic. De Giacomo et al. specify a formalism,
called higher order description logic, that allows to treat the same
symbol of the signature as an instance, a concept and a role [16,21].
They use a semantics very similar to Motiks Hilog semantics, with
a single domain (without layers) in which non-well founded sets
are allowed and only intensional regularity holds. Their approach
makes some ontologies wrongly consistent since
1. Hilog semantics allows some undesired models which give
interpretations to an individual and a concept

different
representing the same object.

2. The domain  can contain sets that are not well-founded.
Ontologies that are wrongly inconsistent in this approach due
to (1) are given in Examples 79. While an example of an
ontology which is wrongly consistent in this approach due to (2)
is Example 1.
OWL FA. Pan et al. address meta-modelling by defining different
layers or strata within a knowledge base [5,6]. Their semantics
can be easily seen to belong to well-founded set theory provided
the universe at level 0 is a set of basic objects. Their semantics
satisfies extensionality and interpret the individual and the
concept connected by meta-modelling as the same object. Though
they have meta-modelling for roles (which we do not), all the
individuals of a certain concept need to be at the same level.
The fixed layer approach forces the user to explicitly write
the information of the layer in the concept. This has several
disadvantages: the user should know beforehand in which layer
the concept lies and it does not give the flexibility of changing the
layer in which it lies. Neither it allows us to mix different layers
when building concepts, inclusions or roles, e.g., we cannot define
a role whose domain and range live in different layers.
Typed higher order description logic. Homola et al. define a typed
higher order description logic [7,8] where atomic concept and role
names are typed with the layer or level of meta-modelling. The
so-called typed higher order DL is more expressive than OWL FA

Fig. 10. Comparison of interpretation domains.

since roles have a source and a target level. However, this logic
still lacks expressibility which we think important for integrating
ontologies. As in OWL FA, all the individuals of a certain concept
must be at the same level. This means that elements with different
levels of meta-modelling cannot coexist in the same set, e.g. the
set GeographicObject in Fig. 2. One cannot perform the union of
concepts at different levels or have a role whose domain or range
have individuals at different levels, e.g., the role manages in Fig. 8.
Like OWL FA, this approach also forces the user to know the levels
of the meta-modelling for each atomic concept and role. Homola
et al. also analyse two semantic approaches: a Henkin semantics
and a Hilog-style semantics [7]. The Henkin semantics (theirs as
well as ours) satisfy both properties of intensional regularity and
extensionality (see Remark 1). The Hilog semantics is weaker than
the Henkin semantics and it only satisfies intensional regularity.
Comparing well-founded domains. Different domains defined for
meta-modelling in the literature are compared with our set Sn in
Fig. 10. The Henkin semantics by Homola et al. has one domain for
each level n defined as S
n) [7]. Pan et al. define one
n+1 =
domain for each level n but they also include relations S
P (S
n is defined by
Kaushik et al. to give semantics of algebra operators that combine
n+1 =
ontologies in RDF [22]. As future work we will consider S
n  P (S

n ), to include meta-modelling for roles.
In our case a set C I = X    Sn can contain elements x such
that x  Si for any i  n. This means that elements with different
levels of meta-modelling can coexist in a set X  Sn, e.g., the set
GeographicObject in Fig. 2. However, a set X  S
n+1) can
have only elements that are in S
n ). In other words, elements
with different levels of meta-modelling cannot coexist. The sets S

also include relations for capturing meta-modelling for roles which
we do not consider in this paper.

n ) [5]. A similar domain to S
n  S

n+1 = P (S

n )  P (S

n  S
n )  P (S

n (or S

n+1 (or S

10. Conclusions

In this paper we have shown a novel approach to metamodelling which consists in adding equations between individuals
and concepts. From the point of view of real applications of meta-
modelling, our work combines two main advantages which are
not both present in existing approaches: (i) the freedom to model
through a flexible structure of meta-modelling levels, and (ii) a
consistency mechanism which prevents from design errors such
as non-well foundedness or contradictions that come because of
meta-modelling.
Reusability. We think that our approach result more natural in a
scenario where we want to reuse a set of independent ontologies
to build a knowledge base for a given application. It is usually
the case that the same real object is represented with different
granularity in different ontologies, e.g., as an individual in one
ontology and as a concept in another one. Then, without altering
the original ontologies, we can express through a meta-modelling
axiom that the interpretation of an individual in one ontology is
(in a direct way) the same as the interpretation of a concept in the
other ontology. That is, given a model of the knowledge base, each
symbol will have a single interpretation, regardless the axiom in
which it is placed.
Flexible meta-modelling hierarchy. If we analyse the approaches
which define fixed layers or levels of meta-modelling [58] we
observe that they impose a very strong limitation to the ontology
engineer. Not always the instances of a concept need to be

represented with the same granularity. For example, the concept
GeographicObject of Fig. 2 has two instances, hydrographic and flora
which are meta-concepts and an instance, physiographic that is an
individual without meta-modelling. Perhaps the ontology engineer
does not have access to an ontology about physiography as in the
case of hydrography and flora, or perhaps obtaining more detail
about physiographic objects is not what matters for the particular
application. But if in the future, the need to integrate the ontology
Geographic Objects Politics with an ontology about physiography
arises, it is enough to merely equate the individual physiographic
to a concept whose meta-modelling level will depend on the
granularity of the particular ontology describing physiographic
objects. Moreover, following the fixed layers approach, when
several ontologies are integrated through meta-modelling and
other links, such as roles or mapping of concepts, the ontology
engineer has to synchronize the meta-modelling levels along with
the other kind of relations among the ontologies. In our approach,
we infer the meta-modelling level of each concept and check for
inconsistencies through the proposed tableau algorithm. So, the
ontology engineer is not attached to a rigid structure of layers.
Inference of meta-modelling level. The fixed layer approach is
analogous to typing a la Church in typed lambda calculus where
the user needs to annotate or declare the type of all his variables,
e.g., this is the case in the proof assistant Coq [23]. Our approach
is analogous to typing a la Curry where the user does not need to
declare the types of the variables because the system will infer
them instead e.g., this is the case in the functional programming
language Haskell [24]. Inferring the meta-modelling level of a
concept (or an ontology) is, however, a much more difficult
problem than inferring the type of a program (a -term). One
can infer the type of a -term from the syntax or shape of
the term [25,26]. But one cannot infer the meta-modelling level
just by looking at the syntax or shape of the concept and the
knowledge base. In order to infer the meta-modelling level, one
has to take into account the semantics. The syntax gives us an
upper bound of the meta-modelling level which is the cardinality
of the Mbox. However, in order to know whether this metamodelling level exists or not we need to analyse the semantics and
check consistency, e.g., run the tableau algorithm and find out a
completion forest that has neither contradictions nor cycles.
Well-founded semantics. An interesting and original contribution of
this paper from the theoretical point of view is the incorporation of
the notion of well-founded set in the semantics of the logic as well
as in the tableau algorithm. We think it is important to restrict the
domain to be a well-founded set. In principle, non well-founded
sets are not a source of contradictions as it is shown by studies on
non-well founded set theory, e.g., [4]. The reason why we exclude
non well-founded sets is because we think that non well-founded
sets do not occur in the applications we are interested in. Note
that we cannot replace the restriction   Sn by a weaker
one and just require that the domain  of the interpretation is a
well-founded set. This looks more neat from the theoretical point
of view. However, we are certainly not interested in having an
infinite (or transfinite) number of levels of meta-modelling for our
applications.
Unique domain of mixed-levels. An important difference with the
fixed level approach to meta-modelling is that we do not have a
domain separated in layers where  is exactly the union of a family
of disjoint domains n for each n  N. Instead, we have only one
domain which is a subset of Sn where elements with different levels
of meta-modelling can coexist. Having only one domain makes a
difference in the treatment of negation, e.g., Example 4. If we had
the stricter requirement saying that  is exactly the same as Sn, we
would be putting too many elements in  that are not necessary.
It is important for the domain of our canonical interpretation S =
set(Paths(F )) that could be a proper subset of Sn.

R. Motz et al. / Web Semantics: Science, Services and Agents on the World Wide Web 35 (2015) 214234

Detecting contradictions for meta-modelling. The key feature in our
semantics is to interpret a and A as the same object when a and A
are connected through meta-modelling, i.e., if a=m A then aI = AI.
This allows us to detect the inconsistencies in the ontologies shown
in the examples of Section 5 which is not possible under the Hilog
semantics.

11. Future research

We plan to extend our approach to support all of OWL 2.
We think it will be enough to extend the corresponding tableau
algorithm to include our expansion rules for meta-modelling.
Adding property chains and data types seems to be orthogonal
to meta-modelling since we are not interested in having metamodelling for data types [27]. Keys only deal with individuals
(not variables) and the meta-modelling rules will add all the
combinations of equalities and inequalities that are necessary [28].
Our expansion rules seem to work with nominals as well [29]. We
also think that we will be able to apply the same proof techniques
developed in this paper for proving correctness of these extensions
but in a more complex setting.

At the moment we are working on extending Pellet to include
our new expansion rules for handling meta-modelling [30,31]. For
our specific tableau algorithm, a good optimization will consists
in restricting the application of the expansion rules for meta-
modelling: the, and close-rule should be applied only if the other
rules are not applicable. Since the worse case can happen when all
the individuals with meta-modelling are equated (since the TBox
is augmented with new axioms), one should try first the choice
when all the individuals are different and postponing the -rule as
much as possible. At the moment, we are also studying conditions
on the Mbox to have a PSpace tableau algorithm for ALCM and
ALCQM when the TBox is definitorial or simple [32,33] and we
will also study complexity for increasingly expressive logics.

In this paper, we have only considered meta-modelling for
concepts. We plan to study extensions that include metamodelling for roles.

Acknowledgements

The third author would like to acknowledge a Daphne Jackson
fellowship sponsored by EPSRC and the University of Leicester. We
are also grateful to Diana Comesana for sharing with us the data
from her ontology network on geographic objects [1].
