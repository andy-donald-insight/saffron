Web Semantics: Science, Services and Agents

on the World Wide Web 4 (2006) 116123

On agents and grids: Creating the fabric for a new generation

of distributed intelligent systems

Information Sciences Institute, University of Southern California, 4676 Admiralty Way, Marina del Rey, CA 90292, USA

Received 10 October 2005; accepted 27 March 2006

Yolanda Gil

Abstract

The semantic grid is the result of semantic web and grid researchers building bridges in recognition of the shared vision and research agenda of both
fields. This paper builds on prior experiences with both agents and grids to illustrate the benefits of bringing agents into the mix. Because semantic
grids represent and reason about knowledge declaratively, additional capabilities typical of agents are then possible including learning, planning,
self-repair, memory organization, meta-reasoning, and task-level coordination. These capabilities would turn semantic grids into cognitive grids.
Only a convergence of these technologies will provide the ingredients to create the fabric for a new generation of distributed intelligent systems.
 2006 Elsevier B.V. All rights reserved.

Keywords: Semantic grid; Semantic web services; Distributed AI; Multi-agent architectures

1. Introduction

Semantic grid researchers (www.semanticgrid.org) have
noted the common themes in the semantic web and grid
research agendas, as represented in technical publications
in both areas [14]. These commonalities have been articulated in [58]. Not surprisingly, in recent years both communities share an interest in the widespread service-based
architectures. Semantic web researchers are developing extensions to web services to include semantic representations
(http://www.w3.org/2002/ws/swsig). Grid services and the more
recent WS framework (http://www.globus.org/wsrf) align web
services with more traditional features of grids. With this emphasis in service-based paradigms, these fields are now sharing
more than ever a research agenda with yet another community:
autonomous agents and multi-agent systems. Agent systems
have historically been developed in a modular fashion, with a
clear advertisement to other agents of their capabilities, which
is an important emphasis of service-based architectures. The
research agenda in the agents community [9,10] shares much
with the semantic web and grid research agendas. Some commonalities have been pointed out in [11,9,12], including trust,
negotiation, resource allocation, composition, and autonomy.

This paper argues that neither grid nor agent systems alone
can deliver on their promise without building on one another. The

E-mail address: gil@isi.edu.

1570-8268/$  see front matter  2006 Elsevier B.V. All rights reserved.
doi:10.1016/j.websem.2006.03.002

arguments put forward are based on first-hand experiences with
agent systems [13,14], scientific workflow creation and execution in grids [1524], and metadata catalogs for grids [2527]. In
our work, we have used grid techniques to address shortcomings
in agent systems, and AI techniques to bring not only semantics
but also intelligent reasoning capabilities to grids.

The paper is organized in two main sections, one focused on
why agent systems need grids, and the second on why grids need
agent systems. The first section discusses capabilities that grid
technologies provide that would address important limitations
of agent systems, concentrating on providing robust and sustainable performance. These facilities include state, persistence,
and lifecycle management. The second part of the paper discusses important capabilities developed and used in the agents
community at large that would address current limitations of
grid computing. These capabilities include learning, planning,
interaction, and coordination. We argue that these capabilities
would take grids to a new level of scale and sophistication, able
to make complex informed decisions and flexibly adapt their
performance to new information and unexpected situations.

2. Why grid: limitations of current multi-agent systems
for robust and sustainable performance

Robustness is a very important requirement for distributed
problem solving of the kind performed by multi-agent systems.
Robustness is challenging when heterogeneous collections

of components need to be coordinated in a highly dynamic
non-centralized execution environment. These are the environments that grids were designed to address. Reliability,
quality of service, and robustness have been central themes in
grid research as essential architectural principles. Research in
multi-agent systems has focused more on distributed operations
at the task level, concentrating on architectures, agent communication languages, and coordination [5153]. We argue that
grid environments provide an ideal substrate for developing
multi-agent architectures and distributed problem solving
capabilities. This section describes key features provided by
grid services [28,29] and their relevance to support robust
implementations of agent-based systems.

Our experience with multi-agent systems, and in particular
with the Electric Elves project [13], can be used to motivate
these issues. Electric Elves supported users with office tasks
and integrated a number of agents that were heterogeneous in
their function and in their implementation, and were deployed
in a distributed environment. Some of the agents accessed web
information sources, others matched requests with agent capa-
bilities, and others communicated with users about task status.
As we strived to use the system 24/7 inside and outside of our
organization, we discovered that a non-trivial amount of effort
was required to keep the groups of agents functioning appropri-
ately. The capabilities of each agent and the kids of information
they exchanged were clearly specified. Yet, even such an agent
community with modest distributed and heterogeneous nature
posed clear challenges. As the agents operate, it was necessary to
monitor their status and the status of specific requests. This was
done manually, but ideally it should handled automatically. The
kinds of status questions that came up included: (1) Is the other
agent still working on my request? (2) Does the agent still need
my reply? (3) Has the agent already responded but the response
was not received? (4) What is the status and progress of my
request? Other problems came up when machines were down or
connections failed. Should the requesting agents have a memory
of their requests and resend them, or should the servicing agent
keep track of their requests and reinstate them upon restart? Who
should notice that an agent is not running and who should restart
it? Although it was possible to manage the multi-agent system
manually, this is not a desirable option and clearly impossible if
multi-agent systems are to scale up in number and heterogeneity.
These challenges are not uncommon and it is reasonable to
consider they hinder growth and scale of deployed agent com-
munities. In a published study [30] noted problems in agent
infrastructures with significant development effort in dependability and survivability at larger scale (hundreds of distributed
agents). We believe that these are symptoms of the need for
better distributed infrastructure to build multi-agent systems.

These issues can be summarized as follows:

1. Introspection: Once a request is sent to an agent, it would
be useful to be able to query the agent regarding the receipt
of the request, the status of the request, and perhaps any
intermediate results that the agent may have generated. It
would be useful to setup automatic notifications of changes
in a request status.

2. Tracking multiple requests: For each agent, we have to implement a mechanism for tracking multiple requests. For each
request, the agent has to maintain its status, current result,
etc. and detect the same request sent repeatedly when the
message acknowledging its receipt delayed.

3. Persistence: Each agent can implement a database to store
requests so they can be recovered in case the agent process
dies. Special purpose scripts may be needed to check the
agent process and restart it if it is not running.

4. Shelf life of requests: Each agent needs to implement a mechanism to deal with expiration of requests. Otherwise, all
requests would be active forever. Other services that may
not have a clear date associated with them may be harder to
handle in terms of terminating the request.

5. Evolution of the specifications: The agent specification (in
many cases due to changes in the underlying web site) may
change over time. This requires manually tracking changes
in other agent specifications, so that request message formats
could be updated.

The implementation of individual agents can be extended to
support these questions in an ad hoc manner. However, these
problems clearly raise the need for better infrastructure to support robust continuous operation as tasks are executed in a
dynamic distributed environment. Instead of developing ad hoc
solutions for these problems, it is useful to investigate whether
we can build on existing approaches in distributed computing
that are designed to address these very issues.

2.1. Some useful concepts in grids

We conducted a study of how grid services would support a more robust agent infrastructure, focusing on how the
requirements discussed above would be addressed in grids.
We implemented a set of agents using grid service definitions
and found that the built-in mechanisms in grid services provided facilities to support much of the functionality we needed
regarding the state of the agents and the requests. A detailed
account of the implementation is provided in [14]. This section
describes some useful concepts in grids illustrated in the context of our multi-agent system. Our implementation was done
with the Open Grid Services Infrastructure (OGSI) [29] and its
GT3 specification. Here we use terminology from that work.
Its new generation is the WS-Resource Framework (WSRF)
(http://www.globus.org/wsrf) and has slightly different terminology but the same underlying core concepts. See [31] for a
detailed mapping of terminologies.

Grid Services are extensions of web services that incorporate
several key features that are crucial for robust distributed opera-
tions. One key feature of grid services is the notion of lifecycle
management: a request has a lifetime that is managed by the
system by assigning it a process. A request sent to a grid service may create a transient process called grid service instance
with a unique identifier, a handle, that can be used to locate and
query the instance. The service instance exists only for a limited
amount of time, after which the instance will be destroyed. If
required, the client/application can also extend the expiration

Y. Gil / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 116123

time of the service instance. Service instances can be created
across pools of hosts with appropriate load balancing.

Another key feature of grid services is that they have internal
state and support introspection. Grid services are stateful, which
means that they maintain information across multiple operations
issued over time. Therefore, there is a standard mechanism to
expose the data associated with each service instance for query,
update and change notification. This also supports third party
notification of request status. Each grid service instance can have
persistent properties associated with it that are saved on permanent storage, and can be restored by the system on a restart of
the grid service instance in case the process is accidentally terminated (e.g., if the host goes down).

Grid services also adopt useful conventions for version man-
agement. Grid services cannot use the same identifier if their
interface specification is changed. This enables clients to have
a handle on upgrades and changes to the specification through
declarations of the shelf life of a service specification.

Note that some of the features of grid services described here
are being considered for adoption by web service standards, such
as service state declarations and access mechanisms.

2.2. Supporting distributed agent communities with grids

The challenges raised earlier can be addressed by grid ser-

vices as follows:

1. Introspection: The grid service data provides the infrastructure needed to track requests and to enable clients to setup
notifications for updates to the status of the request.

2. Tracking multiple requests: The agent had an overhead of
dealing with multiple requests. Here, we do not have to worry
about multiple requests in the implementation of the service,
since each request spawns off a new service instance with its
own properties and service data.

3. Persistence: This is addressed by the persistent properties
of grid services. Data is not lost in a machine crash because
persistent storage is provided by the grid service.

4. Shelf life of requests: In grid services, the lifetime of the
service instance can be explicitly set at the time of creation.
Also, all service instances are destroyed after their expiration
time, so there is an explicit way to handle obsolete requests.
There is no standard mechanism to set the expiration of the
request for an agent system.

5. Evolution of the specifications: Grid services have a unique
identifier that remains the same as long as they have the
same interface specifications. If those specifications change,
the grid service will have a new identifier. The specifications may have an expiration date indicated as a guarantee
of validity. This does not solve the problem, but at least the
client/application has an explicit way to be informed about
it.

2.3. Summary: why grids

Fig. 1 summarizes the kinds of built-in facilities from grid services discussed in this section that can be used to provide agents

Fig. 1. Making agents more robust through grid services: (1) introspection is
supported by making agents be stateful processes that have standard operations
to publish and access information about their internal state; (2) tracking requests
through creation of unique process instances; (3) persistence through permanent
and replicated storage of requests and other process state; (4) management of
shelf life of requests through expiration dates and other lifecycle management
techniques; (5) responsible evolution and change management through versioning conventions about operation changes.

with more robust behaviors. Grid services offer an infrastructure
for distributed computing that supports robust coordination in
highly dynamic environments. Multi-agent and distributed intelligent systems could be made more robust by taking advantage of
their mechanisms to address introspection, state, lifecycle man-
agement, and persistence. There are many other benefits of grids
that are relevant to agent systems. Because grid computing has
addressed distributed systems bottom up, it also provides a welldeveloped infrastructure for security, cross-organization access
policies, load balancing, efficient data transfer, and execution
management. These are all of interest to distributed intelligent
systems.

3. Why agent architectures: limitations of current grids
in knowledge and complexity

One of the prominent applications of grid computing, though
many others exist, is large-scale scientific computations. Several
years of collaboration on workflow planning and execution in
grids [1521] and workflow creation [22,23] show the utility of
AI techniques to assist users to create scientific workflows and to
automatically complete and map workflow tasks to resources for
execution. We have also investigated the benefits of using mediators for information agents to support semantic integration of
metadata catalogs for grids [25,26]. The results of this work only
scratch the surface of the wide range of AI techniques utilized in
agent systems. This section suggests the role that more advanced
agent architectures and techniques could play in specific aspects
of grid computing.

Agents and grid applications face similar challenges: modeling and understanding their external environment and making
informed decisions to achieve their tasks appropriately. Agents
typically have sensors to collect information about their external
environment and effectors to change it in order to accomplish
their tasks. These environments are often dynamic, may be
shared with other agents, and may include adversarial or interfering agents. Grid applications gather information about the

grid environment through information services, and affect the
environment through a variety of actions such as job submission and data management operations. Grid environments are
very dynamic in nature, since any resource available can become
unavailable, and many resources must be shared among appli-
cations.

A variety of important contributions from agent research
could be incorporated in grids to provide significant new capa-
bilities. Agent architectures are designed to exhibit autonomy,
decentralized coordination, and complex distributed behaviors
in highly dynamic environments. All these criteria are important to grids. This section discusses some important capabilities
developed for agent systems that could be used in grids. Each
topic is briefly described in terms of the issues addressed in agent
systems and their potential relevance to grids.

3.1. Planning and failure models in dynamic environments

An important capability of many agents is to plan ahead in
order to accomplish complex tasks. Planning ahead can help
by assessing the feasibility of an option being considered and
by analyzing the interactions among related aspects of a task.
This enables an agent to prepare the environment to enable later
tasks as well as to coordinate better with other agents. In addi-
tion, the agent can understand the impact of a failure when one
occurs and the best way to fix it in the context of the overall
plans.

The Remote Agent

illustrates these concepts [32].

It
was developed to schedule and execute science experiments
autonomously as it flew in a spacecraft to Jupiter and beyond in
the Deep Space One mission. Using automatic planning tech-
niques, high-level mission goals were turned into specific actions
to set the hardware of the spacecraft, to send data back to Earth,
and to partially process the data on-board. Observations had
to be arbitrated and scheduled for the available time frames in
a setting where human controllers on ground could not possibly control the agents operations. Remote Agent used planning
horizons to determine how far ahead and with how much detail
it specified its operations. It looked ahead as far as 72 h, but
only planned in detail the operations for the coming observation
window.

Remote Agent also used models of possible failures in the
hardware it was controlling, their relationships to various indicators and diagnostics actions, and used these models to detect
and respond to failures. Failures were detected based on the
failure conditions hypothesized and/or determined by the sys-
tem. Failures were resolved by dynamically configuring other
resources available in the spacecraft.

In grid environments, failures are commonplace due to the
dynamic availability of resources and a variety of unexpected
events. Models of failure modes and diagnostic conditions
together with approaches that resolve failures would improve
current capabilities to perform complex tasks. This would enable
advanced resource reservations, arbitration among requests, and
analysis of feasibility. Planning ahead of execution time, and
relating individual tasks to overall common goals or optimization criteria would lead to better overall performance.

3.2. Planning and control to manage uncertainty

In many environments, there is a disconnect between the
situation that the agent planned for and the actual situation
due to uncertainty. Uncertainty may be a result of the impossibility of controlling sensors and effectors with exact pre-
cision, the accumulation of errors over many steps, and the
continuous dynamics in the environment that result in errors
in the agents models of the external world. Tiered architectures to combine high-level planning and low-level dynamic
control have been powerful paradigms for agents to cope with
uncertainty.

Path planning tasks illustrate the benefits of the combination
of high-level planning and low-level control (e.g. [33]). Consider
robot exploration tasks that require moving around to locations
where certain observations can be made or samples collected.
High-level science goals can be established and planned for. In
a deliberate planning stage before execution. Given the main
locations or landmarks, route optimization techniques can be
used to generate an overall target plan. Intermediate waypoints
can be generated to create a path description that will steer the
lower-level controls. A tight control loop for execution steers the
motors and exploits sensor information dynamically to reach the
planned waypoints and landmarks.

Grid applications contain high-level goals to achieve complex overall tasks that must be executed in a highly uncertain
execution environment. Higher-level planning and tasking can
be combined with lower-level control systems that can dynamically steer more execution-related decisions.

3.3. Learning to improve performance

Agents would be hardly considered intelligent

if they
repeated the same mistakes and never improved their performance in tasks they perform routinely. Learning may be simply
collecting performance metrics and deriving statistical predictive models, or may encompass more complex learning where
efficient procedural knowledge is compiled after reasoning from
first principles. Learning can also improve performance by recognizing common failure conditions and designing mechanisms
to anticipate and avoid them.

A wide range of learning techniques is used in agent systems.
These include reinforcement learning from reward feedback,
learning Markov decision processes to improve overall poli-
cies, and symbolic compilation of behavior-triggering rules (e.g.
[3437,4850]).

In grid environments, performance and quality of service are
paramount concerns. In such a highly dynamic and uncertain
execution environment, learning and adaptation mechanisms
would improve resource assignment and load balancing.

3.4. Learning to handle novel situations

Dynamic environments and continuous operations lead to
unusual and unanticipated situations, and autonomous agents
must resort to learning techniques that expand their initial knowledge and skills.

Y. Gil / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 116123

Learning techniques to handle novel situations include exploration and experimentation to gather additional knowledge about
the new situation, learning from first principles, learning from
observation of other agents, learning cooperative behaviors in
situations that require capabilities that the agent does not have,
and selecting when and how to resort to learning from user
instruction when all else fails [3842].

Grid applications function in very complex environments.
Unanticipated behaviors and situations require adaptive capabilities in order to function appropriately in novel envi-
ronments. Learning to detect and resolve unpredictable situations will be an important capability for autonomous
operations.

3.5. Problem solving and memory structures

Complex behaviors that require a range of skills and scope
often require organizing knowledge and problem solving abilities and bring to bear only the relevant factors for any given
situation. By reasoning at various levels of abstraction, and
by organizing memory structures with appropriate relevance
indices, agents are able to scale up in the size and coverage
of their behaviors.

Perhaps the most complex agents have been developed with
the Soar architecture [36], which has been used to develop agents
in simulated worlds used for training and tutoring. Complex
and interdependent decision factors are organized in separate
problem spaces, each with its own goal set, search strate-
gies, and search control heuristics. Problem spaces are related
through subgoals, where an unresolved decision in a problem space may trigger a separate problem space that brings
to bear additional factors to consider in making that deci-
sion. Large amounts of knowledge are needed to describe
goals, tasks, and problem solving methods. Additional knowledge is learned automatically by the system as it performs
tasks. All this knowledge is structured and indexed in memory for efficient retrieval and performance. A long-term memory organizes problem-solving rules into the problem spaces
that they are applicable for. A short-term memory is used
to store knowledge relevant to the problem-space currently
active. Powerful memory matching schemes bring to the working memory used for a particular problem space all the rules
from long-term memory that are applicable to the decision at
hand.

Interacting decisions may result in backtracking. This complex deliberation mechanism is complemented by learning techniques that improve performance by generalizing and compiling
new rules. These learned rules are immediately applied when a
similar decision is encountered in the future, avoiding the repetition of the deliberation process.

As grid applications scale up, there will be many complex and
interrelated decisions and constraints regarding the resources
and services available. Complex and well-informed decisions
can only be made if the decision space can be appropriately
represented and factored. The knowledge in the system must be
structured so the relevant portions that need to be brought to bear
are indexed and retrieved.

3.6. Meta-reasoning

Meta-reasoning enables an agent to make decisions about
what to reason about, setting its own goals and deciding how to
allocate its resources.

Retracting active behaviors in response to new information has been researched in beliefs-desires-intentions (BDI)
architectures [43,44,54]. A dynamic control system incorporates new beliefs by observing the current state, creates
desires based on its pending tasks and goals, and based on
them decides what intentions to trigger by selecting from
possible venues of action. The deliberation often results in
meta-level reasoning to assess whether to retract or continue
pursuing currently active behaviors. Meta-reasoning is used
in other contexts to decide whether to explore and acquire
new capabilities by seeking novel experiences or to exploit
current abilities to maximize performance. Meta-reasoning is
also appropriate to decide how to partition a complex tasks
into subtasks carried out by distributed agents, and on the
subsequent coordination and communication as well as failure
repairs.

Grid environments will include many components that could
optimize various aspects of performance, pursue opportunistic
courses of action, and reconsider goals selected or postponed.
The ability to make meta-level decisions will likely impact
overall performance and even the resilience of the system to
accomplish complex tasks in the light of drastic changes in the
environment.

3.7. Intervention and interaction

Many agent systems require human interaction, either
because they are assisting humans and need to report progress or
results, or because they perform collaborative tasks that involve
human-agent cooperation. Such interaction skills require the
ability to explain the reasons for a response or for a question,
the ability to incorporate information provided by a human, and
modeling the human user in terms of their skill level as well
as their assumptions based on prior dialog conducted with the
agent.

Conversational agents and dialog systems offer architectures
to support the communication between a user and a complex
system [4547]. Tasks that require user-system collaboration can
be successfully accomplished through shared task structures that
include explanations provided by the system about its behavior,
as well as models of users beliefs and the skills they contribute
to the task at hand.

Grid environments are envisioned to serve a wide variety
of uses and users. Some grid environments are accessed daily
by computer researchers and professionals, system developers,
high-school students, and expert domain scientists. Usability
remains a challenge for grid environments. User steering of
grid applications, needed in some domains, require users to
understand the status of intermediate results of applications so
additional or alternative tasks can be inserted. Helping users
understand the workings of such complex systems as they are
relevant to their particular tasks and goals would be facilitated

Fig. 2. Increased sophistication in agent architectures that could benefit grid computing: from basic capabilities such as modularity, autonomy, swarm-level coordi-
nation, and immersion in their environment, to more advanced capabilities such as problem solving and memory organization, metareasoning, learning, shared goals,
adversarial reasoning, and human-system collaboration.

by user and dialog modeling techniques as well as explanationcentered system design.

4. Conclusions

3.8. Coordination, shared goals, and adversarial models

Complex tasks are often only possible by drawing from
groups of agents with complementary skills or resources. Coordinating the delegation and accomplishment of subtasks in an
multi-agent system has let to important research results in defining and maintaining joint shared goals, teamwork behavior, and
hierarchical subtask organizations. Other agents often get in the
way of accomplishing tasks, and in some cases may have adversarial or competing goals.

The Robocup agents exemplify this research area, as teams of
robots or software players need to coordinate their behavior by
playing different roles in the team in the presence of an opposing team (http://www.robocup.org). What to communicate and
when, how to detect whether a team goal is threatened and can
be supported by changing an agent or the overall team behav-
ior, dynamically changing goals and even roles within the team,
and how to thwart the plans of adversarial agents are among
the issues that arise in this multi-agent domain. Coordination
needs not be centralized. When all agents have models of shared
goals, they can support mechanisms to plan and enforce jointly
agreed intentions. Plan recognition techniques can create models
of adversarial plans which can be incorporated into the planning
process.

Grid applications could be designed to be more flexible with
architectures that support declarative representations of overall
tasks and goals, and manage delegation and coordination among
individual components that may then act autonomously to make
their contributions to the overall task.

3.9. Summary: why agents

Agent architectures offer valuable techniques to provide the
autonomy and flexibility required in highly dynamic and heterogeneous environments. These are defining characteristics of
grid environments. Fig. 2 summarizes some of the capabilities
discussed here, and highlights the increasing sophistication that
agent architectures can support. Grid applications would benefit
from incorporating such techniques.

Agent systems embody current AI research on distributed
intelligent systems. Yet, agent systems have drawn in very
limited ways from distributed computing, which hinders their
scalability and long-lived operations. Grids, in turn, aim to
develop similarly intelligent capabilities but from the bottom up,
and have concentrated more on managing low-level resources
than higher-level tasks. Cross-cutting research across both areas
would enable significant progress in grids as well as agents
research.

Semantic grids bring declarative representations of knowledge to grids, and once that knowledge is available there are
various cognitive capabilities typical of agent systems that
become possible including learning, self-repair, planning, meta-
reasoning, coordination, and communication abilities. The result
will be cognitive grids, a new generation of distributed intelligent
systems that will be significantly more capable, autonomous, and
adaptive.

Acknowledgements

Special thanks to Varun Ratnakar for the implementation of
agents as grid services. I would like to thank Ewa Deelman and
Carl Kesselman for many fruitful discussions on the topics put
forward by this paper, and other members of ISIs Center for
Grid Technologies for their technical support with OGSA and
their comments on this work, especially Ben Clifford, Carl Cza-
jkowski, and Hongsuda Tangmunarunkit. Thanks also to Jim
Blythe, Jihie Kim, Craig Knoblock, and to other researchers at
ISIs Intelligent Systems Division and the Electric Elves project.
This research was supported in part by the National Science
Foundations Shared Cyberinfrastructure program under grant
SCI-0455361, and in part by an internal grant from USCs Information Sciences Institute.
