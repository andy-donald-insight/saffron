Web Semantics: Science, Services and Agents

on the World Wide Web 4 (2006) 181195

The foundational model of anatomy in OWL: Experience and perspectives

Christine Golbreich a,

, Songmao Zhang b, Olivier Bodenreider c

a LIM, University Rennes 1, 35043 Rennes, France

b Academy of Mathematics and System Sciences, Chinese Academy of Sciences, Beijing 100080, PR China

c U.S. National Library of Medicine, 8600 Rockville Pike MS 43, Bethesda, MD 20894, USA

Received 15 November 2005; accepted 1 May 2006

Abstract

We present the method developed for migrating the Foundational Model of Anatomy (FMA) from its representation with frames in Prot eg e to
its logical representation in OWL and our experience in reasoning with it. Despite the extensive use of metaclasses in Prot eg e, it proved possible
to convert the FMA from Prot eg e into OWL DL, while capturing most of its original features. The conversion relies on a set of translation and
enrichment rules implemented with flexible options. Unsurprisingly, reasoning with the FMA in OWL proved to be a real challenge, due to its sheer
size and complexity, and raised significant inference problems in terms of time and memory requirements. However, various smaller versions have
been successfully handled by Racer. Some inconsistencies were identified and several classes reclassified. The results obtained so far show the
advantage of OWL DL over frames and, more generally, the usefulness of DLs reasoners for building and maintaining the large-scale biomedical
ontologies of the future Semantic Web.
 2006 Elsevier B.V. All rights reserved.

Keywords: Anatomy; Foundational Model of Anatomy (FMA); Ontology; Prot eg e; Web Ontology Language (OWL); Semantic Web

1. Introduction

Life sciences have a long tradition of controlled vocabular-
ies. Extensive terminologies, classifications and ontologies have
been developed for many years in various biomedical domains.
These resources have the potential to contribute to the Semantic
Web for Life Sciences, but need to be adapted for it. A large
library of biomedical ontologies has been developed in frames,
often with Prot eg e [12]. As OWL is the W3C recommended
standard for ontologies [1], converting frame-based ontologies
to OWL becomes an important need. Representing ontologies
in OWL provides several advantages. Once converted to OWL,
ontologies currently developed with frames become easier to
integrate with other ontologies and can be used as resources
for the Semantic Web. Interoperability of Web ontologies is
important for shared use across different biological and medical
domains, as expected for example from the Open Biomedical Ontologies (OBO) library. Also of interest is OWL higher
expressiveness, and precise formal semantics. Another impor-


Corresponding author.
E-mail addresses: Christine.Golbreich@univ-rennes1.fr (C. Golbreich),

smzhang@math.ac.cn (S. Zhang), olivier@nlm.nih.gov (O. Bodenreider).

1570-8268/$  see front matter  2006 Elsevier B.V. All rights reserved.
doi:10.1016/j.websem.2006.05.007

tant advantage of OWL is the existence of powerful reasoning
services, based on its underlying description logics. Several
major ontological and terminological resources in biomedicine
have been recently converted to OWL DL, including the Medical Subject Headings (MeSH) [8], the Gene OntologyTM [9] and
the National Cancer Institute Thesaurus [10]. The conversion of
other ontologies to OWL has also been investigated, e.g., the
UMLS Metathesaurus [2] and Semantic Network [11]. Our
long term goal is to provide a Web service assisting the conversion of frame-based and OBO ontologies to OWL. Meanwhile,
the present study investigates the conversion of a large framebased ontology into OWL and the reasoning services enabled
by this conversion.

The frame-based ontology under investigation is the Digital Anatomist Foundational Model of Anatomy (FMA). It was
converted from Prot eg e 2.1 to OWL DL. The FMA is the most
comprehensive ontology of human canonical anatomy [3]. The
version used in this study, dated of July 2004, contains 70,169
concepts and more than 1.5 million relations. The FMA was
selected for two major reasons. First, anatomy plays a prominent role in biomedicine and many biomedical ontologies and
applications refer to anatomical ontologies. As its authors claim,
the FMA is a reference ontology in biomedical informatics
for correlating different views of anatomy, aligning existing

C. Golbreich et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 181195

and emerging ontologies in bioinformatics . . . [3]. Anatomy,
together with Gene and Disease reference ontologies, constitute the backbone of the future Semantic Web for Life Sciences.
Second, representing the FMA into OWL poses a real challenge
from a knowledge representation perspective. It is important to
investigate if OWL DL, which is a first order language, has
sufficient expressiveness to represent what was originally represented with frames and metaclasses in Prot eg e. The capacity
of OWL editors (e.g., Prot eg e OWL) and reasoners (e.g., Racer)
to deal with the sheer size and complexity of the FMA and the
scalability of OWL DL inference techniques to such a large
biomedical ontology must be evaluated. Rather than OWL Full
used in [5], we selected OWL DL because a main component
of our study is to investigate the benefits of a DL representation
over frames in terms of reasoning supported by the underlying
description logic. OWL DL provides completeness and decidability of the interesting reasoning problems (satisfiability and
subsumption) and supports consistency checking and automatic
classification. OWL DL reasoners are available (e.g., Racer [16]
and Pellet [17]). In contrast, OWL Full is undecidable, offers no
computational guarantees and lacks suitable reasoners.

The rest of this paper is organized as follows. The method
used to automatically convert the FMA from Prot eg e 2.1 into
OWL DL is first presented (Section 2). Our experience in reasoning with OWL is reported next (Section 3). The choices of
conversion, as well as possible perspectives for the FMA and
open questions for large-scale ontologies of the future Semantic
Web are finally discussed (Section 4).

2. Conversion to OWL DL

As DLs and frames share the same object paradigm, it might
be thought that converting a Prot eg e frame-based1 ontology into
OWL is straightforward and could be achieved by a simple
export function mapping Prot eg e primitives to OWL constructs.
But, the export function from Prot eg e to OWL did not work for
the FMA, neither in one step (i.e., directly), nor in two steps
(i.e., from database to text then to OWL). Besides, even if it had
worked, it would have been ineffective for the following two
reasons.

First, migrating a frame-based ontology to OWL requires not
only a syntactic translation, but also a semantic enrichment
[6]. Indeed, property restrictions such as allValuesFrom or
someValuesFrom contained in the OWL axioms cannot be
directly derived from the original frame representation, where
they are not specified. Additionally, classification strongly relies
on the logical definition of the classes. A reasoner (e.g., Racer)
can only automatically classify classes under defined classes2,
i.e., classes with at least one necessary and sufficient condition.

1 In the following, Prot eg e is used as a shortcut for Prot eg e-Frames (not
for Prot eg e-OWL). Prot eg e-Frames (version 2.1) and Prot eg e-2000 is a tool for
building frame-based ontologies. Prot eg e-OWL (current versions 3.1.1 or 3.2)
is a Prot eg e extension that supports OWL.

2 Except if a property has a domain (or range) that is a primitive class, which
can coerce classes to be reclassified under the primitive class that is the domain
or range of the property (Section 4).

Necessary and sufficient conditions cannot be derived directly
from the Prot eg e model, because, in the frame representation,
all slots at class with a specified range or value are considered
to be a set of necessary conditions. Specifying defined classes
represents a major enrichment of the ontology.

The second reason is that the frame-based representation
of the FMA in Prot eg e makes extensive use of metaclasses3,
which are not allowed in first order languages such as OWL
DL. Each anatomical entity is modeled both as a metaclass
and as an instance of a metaclass. This was the technical
solution for enabling the selective inheritance of attributes
in Prot eg e [3] (see Section 4). For example (Table A.1 of
Appendix A), Heart is defined as a metaclass, subclass of
Organ with cavitated organ parts, itself subclass of Organ, and
as an instance of this metaclass. At the meta level, Heart inherits
all the slots, facets, characteristics (range, cardinality, inverse,
etc.) of its superclasses. Heart inherits from Organ the slot
bounded by with multiple values allowed in Surface of organ,
the slot arterial supply with multiple values allowed in the
classes Artery, Arteriole, Arterial plexus and Set of arteries,
the
slot venous drainage with multiple values in the classes
Subdivision of venous tree organ and Organ
part tree structure, etc. But at
the own
slots
e.g.,
assigned
bounded by is filled with Surface of heart, arterial supply with Right coronary artery and Left
coronary artery, etc. Directly translating metaclasses
into OWL would require OWL Full, instead of OWL DL.
Simply removing metaclasses as suggested in [5] would not
be satisfactory either, since the knowledge encoded at the
metaclasses would be lost.

the class level,

of Heart

are

particular

values,

Therefore, we defined our own method of conversion to
OWL DL, which aims at both providing the desired enrichments
and capturing the knowledge that was encoded at metaclasses,
but without resorting such metaclasses.

2.1. Method of conversion

The migration was achieved from the CLIPS files generated by Prot eg e when storing the Prot eg e-frames FMA4. The
conversion relies on translation (i) and enrichment (ii) rules.
Different enrichment rules were defined depending on whether
the information was defined at the class or metaclass (iii) level.
The conversion rules are implemented with flexible options
(the rules used in the current version can be found in the
Appendix A).

(i) Translation draws on the structural correspondence
between Prot eg e-Frames primitives and OWL constructs.
The Prot eg e class taxonomy defined at meta level
is
translated into an OWL subclass hierarchy. Template
slots defined at the top level are translated into OWL

3 A metaclass is a class whose instances are themselves classes.
4 Prot eg e uses the CLIPS text file format as its default save/load file format
for both classes and instances: .pont and .pins files contain respectively domain
classes and instances.

Fig. 1. Some translation rules for slots.

properties with the same features as those specified
in Prot eg e (i.e. same range,
inverse, cardinality, etc.),
simply mapping each of them to the corresponding OWL
primitive (Fig. 1). For example, the Prot eg e single slots
has mass and has boundary, defined with type SYMBOL,
allowed values FALSE and TRUE, and cardinality 0 1, are
simply translated into an owl:DatatypeProperty,
with range datatype Boolean, and declared to be an
owl:FunctionalProperty. The Prot eg e multislot
constitutional part defined with type SYMBOL, allowed
parents Physical anatomical entity and inverse slot constiis translated into an owl:Object-
tutional part of
Property with
(rdfs:range rdf:resource=
#Physical anatomical entity) and inverse
(owl: inverse of rdf:resource=# constitutional part of).

(ii) Enrichment, in contrast, introduces new logical features.
The enrichment rules were designed to reflect the underlying
principles of the original FMA model. Some enrichment
rules and the rationale behind them are presented below.

2.1.1. Property restrictions

The choice between universal and existential property restrictions is mainly based on the distinct role of template and own
slots in Prot eg e. Template slots specify which slot each member of a class shall have and what the restrictions (facets) on
the values of these slots shall be [3]. Template slots with their
constraints are inherited by the subclasses and the instances.
Therefore, allowed parents or allowed classes specified for a
template slot at metaclass are converted into universal property
restrictions (owl:allValuesFrom). In contrast, according
to the FMA principle of canonical anatomy [3], when a class
instantiates a metaclass, the specific values assigned to a template slot inherited as own slot describe the typical canonical
structure of the particular anatomical entity in terms of rela-

tions that should necessarily exist, e.g., in terms of the existing
parts composing an organ. Therefore, they are converted into
existential property restrictions (owl:someValuesFrom)
(Fig. 2).

For example, the multislot bounded by of the metaclass
Organ with allowed-parents Surface of organ is converted
into the universal restriction ( bounded by.Surface
of organ) on the property bounded by of Organ, that is
next inherited by its subclass Heart. But when Heart inherits bounded by as an own slot assigned with the value Surface of heart, it is converted into the existential restriction (
bounded by.Surface of heart).

Similarly, venous drainage is

restricted by a universal restriction in Heart inherited from its superclasses,
but when Heart
inherits venous drainage as an own slot
assigned with the values Oblique vein of left atrium, Left
marginal vein, Coronary sinus, Posterior vein of left ventri-
cle, Unnamed tributary of cardiac vein, Anterior interventricular vein, Small cardiac vein, etc., they are converted into
owl:someValuesFrom restrictions specifying the value
constraints on the property for the class Heart (Fig. 3).

2.1.2. Equivalent class definition

A defined class has at least one necessary and sufficient
condition. At this preliminary step, one slot p is manually
selected, and a class A having values B1, . . ., Bn assigned to its
own slot p is defined as equivalent to the conjunction of all the
existential restrictions on p to the classes Bi and of metaclass and
superclass of A (after some optimization). As aggregated objects
are often described in terms of their parts and as meronymic
relationships play a particularly important role in anatomy, we
attempted to define anatomical entities in terms of their parts.
The property constitutional part was selected, resulting in 570
defined classes. Thus, the equivalent class expression used for
the defined classes combines taxonomic relations, metaclass
instantiation and constitutional parts as defined in the original

Fig. 2. Some enrichment rules.

C. Golbreich et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 181195

Fig. 3. Class Heart and some of its asserted or inherited properties restrictions of the class Heart.

FMA model. For example, the class Heart is defined by the
conjunction Organ with cavitated organ parts (
constitutional part Wall of heart)  ( constitutional part . . .), as shown Fig. 4.

The choice of the property constitutional part was partly
motivated by practical issues: constitutional part is relatively
well populated in the FMA, compared for instance to cus-

Fig. 4. The defined class Heart.

tom partonomy, and is therefore computationally more signif-
icant. But, such a definition is not semantically satisfying
for all classes: all anatomical entities cannot be uniformly
defined solely in terms of their constitutional parts (the same
parts may belong to different structures), and no such constitutional parts are defined for most FMA classes. However, the
choice of constitutional part was deemed appropriate for the
purpose of investigating reasoning services. Different definitions for the different subtrees, and more complex expressions
combining several properties shall be investigated in the future
(Section 4).

2.1.3. Metaclasses are converted into ordinary OWL DL
classes

First, subclass relations between metaclasses, and metaclass instantiations are both translated into OWL subClassOf
axioms ([A] of B in Prot eg e is converted to A  B in OWL).
Doing so, the metaclass and instance definitions are merged
within a single class in OWL DL (Fig. 5).

Second, the restrictions depend on whether the information
was defined at the class or metaclass level, according to the
enrichment rules (see (ii) above). Range restrictions of a template
slot defined at metaclass are converted to universal property
restrictions.

Third, the values of own slots of classes are converted either
into existential restrictions on class properties or into values of

Fig. 5. Class Heart in OWL DL, derived from the Prot eg e metaclass and class definitions.

OWL annotation properties (see Appendix A for details). Structural own slots with values assigned at class are converted to
existential restrictions of object or datatype property. Own slots
such as definition, name, identifiers (e.g., UWDAID), etc. with
values assigned at class level, are converted to OWL Annota-
tionProperty, e.g., definition, prefered name,
UWDAID, (Fig. 3) instead of using metaclass instances, which
prevents such properties from being propagated to their instances
or subclasses.

Thus, each entity of the FMA is represented by a single OWL
DL class, with various axioms and annotations. Fig. 5 shows the
OWL DL class Heart with its equivalentClass definition combined with subClassof axioms including existential
restrictions, derived from the original metaclass and class definitions of Heart in Prot eg e.

In conclusion, although the original frame-based representation in Prot eg e makes extensive use of metaclasses, converting
the FMA into OWL DL is possible. The OWL version of FMA
complies with OWL DLs first order language constraints. In
particular a class is not an individual at the same time. In fact,
the higher order structure in Prot eg e frames was removed
by replacing metaclass instantiations by subclass axioms. But
doing so did not introduce any significant changes, because all
concepts in the FMA Anatomy Taxonomy are subclass of a
superclass and also an instance of a metaclass. On the other
hand, as explained Section 4.1, it was not necessary to give up
some knowledge of the original FMA and nothing has been lost,
because the higher expressiveness of OWL DL enabled to capture the intended meanings of the metaclasses.

To compensate for the arbitrariness of some of our choices,
the enrichment rules were designed and implemented with
flexible options. This permitted to automatically generate various OWL files with different flavors, size and computational
complexity. Moreover, these options can be easily modified,
which is key to the incremental approach adopted for reasoning
(Section 3.1).

2.2. Results

laterality distinctions were ignored,

In order to minimize the size of the resulting ontology,
some inessential
i.e.
classes differing from their parents only by laterality. The
resulting subset comprises about 40,000 concepts, i.e. 57%
of the 70,000 concepts of the original FMA. Applied to this
subset, the conversion process described earlier resulted in
about 117,000 frames, including 40,000 OWL named classes.
More precisely, there are 187 properties and 85 individuals
specified in this file. 20 properties correspond to annotation,
19 to datatype and 148 to object properties. There are 107,238
subClassOf axioms (38,772 from taxonomy and 3378
from metaclass instantiation), within 39,337 classes where
559 are defined by equivalentClass axioms. OWL
constructors
allValuesFrom, someValuesFrom,
hasValue, oneOf, unionOf, FunctionalProp-
erty, SymmetricProperty, InverseOf all occur
in the OWL file resulting from the conversion (available
at
http://mor.nlm.nih.gov/pubs/supp/2005-owled-cg/FMA-
constitutionalPartForNS.owl). It took about 15 min to load the
FMA OWL file in Prot eg e-OWL (version 2.15) on a Windows
XP PC with 4 GB of memory (90 min with 512 MB).

3. Reasoning with OWL

Reasoning with OWL proved to be a real challenge, due to
the sheer size and complexity of the FMA. Processing the fullfledged FMA in OWL DL raised significant inference problems
in terms of time and memory requirements. For this reason, an
incremental approach to investigating reasoning services was
adopted.

5 Four minutes in version 3.1.

C. Golbreich et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 181195

3.1. Incremental approach

We used Racer (Version 1.7) with the OWL files generated
by the conversion process to investigate consistency checking
and automatic classification. Launched from Prot eg e-OWL, the
classification failed for the entire FMA. Running Racer directly
from Rice, we experienced problems related to memory limitation (4 GB). Since Racer could not handle the entire FMA
OWL file or the smaller file resulting from ignoring laterality distinctions (on our computer), as suggested by the Racer
authors, we decided to test smaller versions so as to reduce
the size and time issues and to investigate eventual errors,
adding more features incrementally. First, a FMA OWL version with all classes but without any properties was checked
to test if the taxonomy alone could be successfully classified.
Then, we added equivalent class definitions using only one
property to test if the ontology with defined classes could pass
Racer. Next, we have introduced, step by step, object prop-
erties, annotation properties, datatype properties, and finally
object properties used for attributed slots. When properties are
introduced in partial versions, the conversion rules described
previously are applied. For example, a small version where
the object property bounds and its inverse bounded by are
introduced includes, for each class having these properties spec-
ified, the subclass axioms containing the corresponding existential and universal restrictions of the properties bounds and
bounded by.

3.2. Results

Racer passed the first test: the classification of the FMA
OWL version without any properties was successful,
tak-
ing about 25 min with 512 MB memory on a Pentium 4.
Then, the classification with defined classes described by
the conjunction of the existential restrictions on the constitutional part or custom partonomy property
as necessary and sufficient condition was also successful.
Next, various versions were generated with all classes but
containing a limited number of properties. Depending on
the properties introduced and the constructors involved, the
tests were successful or not. Some results are summarized
below:

Reasoning with Racer was successful for the following partial

versions:

1. Ontology with only the class hierarchy defined but without

any property.

2. Ontology with defined classes (based on constitu-

tional part).

3. Ontology with defined classes and annotation properties.
4. Ontology with defined classes, annotation properties, and

all datatype properties.

5. Ontology with defined classes and primitive classes with
restrictions on the property branch of in subClassOf
axioms.

6. Ontology with defined classes and primitive classes with
restrictions on the property arterial supply in subClassOf axioms.

7. Ontology with defined classes and primitive classes with
restrictions on the property 2D part in subclass axioms.
8. Ontology with defined classes and primitive classes with
restrictions on the property bounds and its inverse
bounded by in subclass axioms.

9. Ontology with defined classes and primitive classes
properties dimension and

with
has physical state in subclass axioms.

restrictions

on

10. Ontology with primitive classes with restrictions on
attributed slot location and all slots used in location
(e.g., related object, etc.).

11. Ontology with primitive classes with restrictions on
attributed slot attributed part and all slots used in
attributed part (e.g., related part, etc.)

Reasoning with Racer failed for:

12. Ontology with defined classes and annotation properties,
with the addition of primitive classes with restrictions on
all the object properties in subclass axioms.

13. Ontology with defined classes and primitive classes with

restrictions on all object properties in subclass axioms.

14. Ontology with primitive classes with restrictions on the

property branch of and its inverse in subclass axioms.

15. Ontology with subclass axioms with restrictions on the

property continuous with, declared symmetric.

The results of the tests are summarized in two tables, showing
the OWL DL constructs (Table 1) and axioms (Table 2) involved
in each test (presence denoted by ). A is a class name, C is
a class, o is an individual name, R is an object property, T is
a datatype property, D is a data range, v is a data value, and
l, m and n are integers (following usual notations borrowed
from OWL authors [1]). Annotations (AnnotationProp-
erty) are omitted in the tables, but tests #3, #4 and #12 include
them. As there was no hierarchy of relationships specified in the
original frame-based FMA, equivalent or sub-property axioms
including equivalentProperty and subPropertyOf
were not defined in our conversion.

The reasons for failure are not easy to analyze. For instance,
Racer was successful for some tests including inverse prop-
erties, such as test #8 having equivalent class axioms based
on constitutional part and restrictions on the property bounds and its inverse bounded by, and for a test
with constitutional part and its inverse constitutional part of. However, it failed for some tests including
inverses, such as test #14 having restrictions on the property
branch of and its inverse branch. This test, however, does
not use any nominal, cardinality or functional axioms. This
experiment shows that the sheer size of the FMA is not the only
issue. The results of reasoning with OWL for the FMA are related
to several factors, including the complexity of the ontology generated due to the OWL constructors used, i.e. the presence of
nominals (e.g., oneOf), of inverseOf axioms or global

Table 1
OWL DL constructors used for class description in the tests

Table 2
OWL DL Axioms and Facts used in the tests

axioms, etc. and their interactions. The origin of the computational difficulties encountered is not completely clear at the
moment. On the one hand, some inference problems might come
from imperfect conversion. On the other hand, theoretical work
has proved that reasoning is NExpTime-complete for OWL DL
(SHOIN(D)), and precisely inverse, nominals, number restric-
tions, anonymous classes all occur in the FMA ontology in OWL.
The algorithms and optimization techniques implemented by the
reasoners, are certainly critical issues for the FMA.

3.3. Benefits

Although problems with computational resources occurred
while reasoning with the full-fledged FMA in OWL DL, Racer
could handle various less complex versions, which still enabled

the detection of inconsistencies in the original FMA and the
reclassification of some classes.

No inconsistencies were found in the first versions tested, but
when datatype properties were added, several inconsistencies
were identified. One hundred and thirteen classes were identified as unsatisfiable by Racer because of opposite boolean
values:

 Inconsistencies

from conflicts between metaclass and
class definitions in Prot eg e. A class having a boolean
value in its own slot and which inherits the opposite
value from its superclasses is unsatisfiable in OWL. For
example, Zone of cell is unsatisfiable (hence, so are
all
its subclasses) because the own slot has mass was
assigned FALSE at instance (converted to the restriction

C. Golbreich et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 181195

has mass:false), while this single-slot had value TRUE
at its superclass Material physical anatomical entity (con-
verted to has mass:true). Other inconsistencies were
revealed from the inconsistency of the metaclass and class
definitions of an entity. A class A subclass of B and instance
of C in FMA, where B and C have opposite values for a
boolean datatype property (e.g., has mass) is unsatisfiable
in OWL. For example, in Prot eg e Compartment subdivision is
defined as a subclass of Anatomical cluster, which is a subclass of Material physical anatomical entity
(has mass:TRUE). On the other hand, Compartment
subdivision is an instance of Anatomical space,
which is a subclass of Non- material physical
anatomical entity (has mass: FALSE).

as domain and B

and A must be a subclass of A

 Inconsistencies from conflicting global and local domain
(or range). rdfs:range (resp. domain) restrictions are
global. Thus if p has class A
as range, and
A has a property p with range B, then B must be a subclass

of B
. Conflicting definitions
of global and local ranges or domains lead to inconsistencies in OWL. For example, Surface of wrist
is unsatisfiable because its 2D part has an existential
restriction to Anatomic snuff box which is a subclass of Material physical anatomical entity
(has mass:TRUE), while the range of 2D part
is Nonmaterial physical anatomical entity
(has mass:FALSE). These inconsistencies exhibit modeling errors in the original Prot eg e FMA.

Racer also reclassified some classes.

In the ontology including defined classes based on the constitutional part property, 286 classes of
the asserted hierarchy were moved within the inferred hierarchy and some
classes were identified to be equivalent. For example, as
the two sibling classes Wall of biatrial part of heart and
Wall of biventricular part of heart have the same constitutional parts6 in the original FMA,
they became equivalent for this definition. However,
the equivalence did not
hold anymore when adding other restrictions to these def-
initions. For example, adding restrictions on the property constitutional part of enables to differentiate
the two classes, as they are parts of different wholes:
Wall of biventricular part of heart is a constitutional part of
Biventricular part of heart, while Wall of biatrial part of heart
is a constitutional part of Biatrial part of heart. Thus, although
most occurrences of reclassification were related to the class
definitions in terms of their constitutional parts, this example
nevertheless shows the power of reasoning with OWL DL.

In conclusion, the results obtained so far illustrate the benefits of representing the FMA in OWL DL. First, checking the
logical consistency of the FMA enabled the identification of
errors that would probably have been missed otherwise. Second,
automatically computing the classification hierarchy is another

6 Fibroelastic connective tissue of endocardium, Fibrocollagenous sheath

of cardiac muscle tissue and Fibroelastic connective tissue of epicardium.

advantage for such a large ontology. As the FMA has been under
development at the University of Washington since 1994 and is
still evolving, such services are very useful for quality assurance
purposes.

4. Discussion and perspectives

This study is a first step towards the representation of the
FMA in OWL. Several issues remain open and different perspectives shall be considered in the future.

4.1. Using OWL DL or OWL Full?

A recent study [5] proposes to translate the FMA into
OWL Full, pointing out both computational and representational
issues: The conversion from frames to OWL DL required us to
forgo representing some features of the FMA such as metaclasses
. . . OWL DL representation is possible, but requires to give up
some of the original features. The authors advocate selecting
OWL Full for the FMA and OWL DL only for applications,
suggesting a two-layered approach: The first layer consists of
a generic conversion tool that generates a representation of
the FMA in OWL Full. The second layer consists of several
application specific optimization tools that simplify the OWL
Full representation of concepts into OWL DL ones by removing all the features unnecessary according to the application
context.

In contrast, we propose to use OWL DL for representing
the FMA, and, more generally, reference ontologies. This work
shows that converting the FMA from its frame-based representation in Prot eg e into OWL DL is indeed possible and succeeds
in capturing most features of the original FMA. We converted
the FMA into OWL DL with all the knowledge encoded at its
metaclasses, and our conversion still complies with OWL DL
constraints. In particular, no entity is at the same time both a class
and an individual. The original direct subclasses, superclasses,
template slots, slot-constraints, defined at Prot eg e metaclasses
are translated using OWL DL constructs and axioms. The main
transformation that enabled the use of OWL DL is the deletion of the Prot eg e higher order structure, achieved by replacing
metaclass instantiations by subclass axioms. But this transformation did not introduce significant changes, since the class and
the metaclass hierarchies were integrated in the original model:
except for its root, all concepts in the Anatomy Taxonomy are
subclass of a superclass and also an instance of a metaclass
[3]. As shown below, OWL DLs higher expressiveness enables
to capture most intended meanings of the Prot eg e metaclasses
(with the exception of set of sets, which does not represent a
significant loss in our opinion, considering their use in Prot eg e).
In fact, metaclasses were used for the following reasons [3,4]:

(1) Metaclasses are used to model a given anatomical entitiy
as a set of sets, (e.g., Vertebra as a set of different types
of vertebrae: cervical, thoracic, lumbar, themselves sets of
other sets, e.g., first, second, . . ., fifth lumbar vertebra). A
first order language such as OWL DL cannot capture this
feature. However, the use of the representation of an entity as
a set of sets is quite limited in Prot eg e. In fact, the mem-

bers of each of these collections are represented in Prot eg e
as subclasses of Vertebra [3], e.g., the class Vertebra subsumes different collection of vertebrae, cervical, thoracic,
and lumbar vertebra, which are further refined into more
specialized subclasses.

(2) Metaclasses are also used to enforce slot value restrictions [4]. In frames, a slot inherited can only be refined
to subclasses of its initial range. For example, when
Cervical Vertebra inherits from Vertebra the slot part of
with range Vertebral Column, its range must be a subclass of Vertebral Column. Metaclasses were intended to
enforce restrictions to other classes, such as class Cervical Vertebral Column, which is not a subclass of Vertebral Column in the FMA model, but a part of it. Thanks to
metaclass instantiation, the appropriate values are assigned
to own slots at class (Section 2.1). This feature is no
longer needed in OWL, since it is possible to use subclass of axioms with various restrictions instead, e.g., 
part of Vertebral Column for the class Vertebra and part of Cervical Vertebral Column
for its subclass Cervical Vertebra, although Cervical Vertebral Column is not subsumed by Vertebral Column.

specific to each class, e.g.,

(3) Metaclasses were also intended to specify multiple
values
specifying that
a Vertebra has parts Body of vertebra, Vertebral arch,
Bone of vertebra, etc. In OWL, this can be captured by
the conjunction of several restrictions such as  part.
Body of vertebra)  ( part.Vertebral arch)
 ( part. Bone of vertebra), etc.

(4) Finally, metaclasses are used for specifying metadata such
as name, author, authority, UWDAID, etc. Assigning values
to these non structural own slots at metaclass instantiation
prevents them from being propagated to their instances or
subclasses. This can be obtained in OWL in using Anno-
tationProperty.

The main reason for selecting OWL DL over OWL Full is
that OWL DL is decidable and supports powerful reasoning
services such as consistency checking and automatic classifi-
cation. OWL DL reasoners are available (e.g., Racer [16], Pellet
[17]). In contrast, OWL Full is undecidable, offers no computational guarantees and lacks suitable reasoners. A reference
ontology is generally a large ontology intended to provide a
controlled vocabulary for a domain. Thus, it is crucial to guarantee the quality and correctness of such reference ontologies.
Automated reasoning services are precious for quality assurance
of ontologies. Current results are encouraging and the computational difficulties encountered during this study will undoubtedly
be overcome soon. In any case, as shown in Sections 3.23.3,
the results inferred from reasoning even on partial versions are
helpful for improving the consistency of the entire ontology.

4.2. Scalability of reasoning

The size and complexity of the FMA raise important computational issues. As far as we know, the NCI Thesaurus was

one of the largest file in Prot eg e OWL so far. But it is much
smaller and exhibits less complexity than the FMA in OWL.
The NCI Thesaurus contains 53,000 frames, including 34,000
classes, 100 properties and 9000 conditions, while the original FMA contains 70,000 concepts and the converted subset
117,000 frames, including 40,000 OWL classes, 187 properties
and about 110,000 axioms. But the most important difference
is the language complexity. The NCI Thesaurus was converted
to OWL Lite, while the FMA is represented in OWL DL. The
OWL DL constructs (Table 1) and axioms (Table 2) show that
the complexity of the FMA is much higher than NCI. The size
and complexity of the FMA in OWL make it a real challenge for
DLs systems. The current tests done with the FMA show that,
with the current state of the art of DL inference technology, such
complexity might cause significant inference problems in terms
of time and memory requirements. Indeed, the main problem was
computational. Some optimizations were devised to reduce the
complexity of the file generated. For example, it was necessary
to reduce the number of disjunctions generated by the conversion for the domain of properties, which otherwise caused Racer
 or any inference system  to run into memory problems. Inter-
estingly, after optimization, two classes remain in the domain
of location instead of 1618 originally [15]. Difficulties also
occurred with inverse properties. However, Racer successfully
handled various less complex versions of the FMA in OWL DL,
detected inconsistencies, and reclassified classes. This experiment was done with Racer version 1.7. As Racer evolves  for
example, its authors are currently working on optimizations that
address the issue of inverse roles  it will be worthwhile to repeat
these tests. Analogously, we would like to evaluate the performance of other OWL DL reasoners (e.g., Pellet [17] Fact++
[18]). The results obtained with RacerProTM [16] are encouraging so far. The new decision procedures and optimizations
being currently implemented in highly optimised DL reason-
ers, e.g., Fact++ [18] may also improve the results in the near
future.

4.3. Domain and application ontologies

A reference ontology such as the FMA, is a domain ontology supposed to be application-independent. Applications most
often do not require the whole FMA but only specific modules
extracted from it. What is more problematic is that different
applications may require different class definitions, because of
their specific goals. Indeed, results of reasoning with OWL DL
strongly rely on the defined classes expressions, and the intended
use of the ontology biases the necessary and sufficient conditions
from what is to be achieved via classification or instance recog-
nition. For example, the Brain Cortex Anatomy application [7]
only needs concepts involved in Brain anatomy and instance
recognition of some entities is mainly based on their definitions
in terms of boundaries. Other applications such as the Virtual
Soldier project may require concepts involved in the neighborhood of the heart and perhaps mainly definitions based on parts.
Hence, the question that arises is whether it is achievable to
have application-independent class definitions for a reference
ontology such as the FMA.

C. Golbreich et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 181195

In fact, several possible options might be considered for the
defined classes of the FMA. (1) Each class has a single def-
inition, based on the conjunction of all the qualified property
restrictions derived from the values of its own structural slots
and attributed relations; (2) each class has a set of several equivalent definitions; (3) each class has one preferred definition,
the other conditions being simply necessary; (4) there are no
a priori defined classes, but only primitive OWL DL classes,
all axioms expressing only necessary conditions. As the FMA
aims at being a shared reference ontology, its representation
in OWL DL might be considered as a first formal specification,
to be further refined into more detailed formal specifications for
each application, by adding relevant axioms. Therefore, the best
options to consider for large-scale domain ontologies such as
the FMA might be to represent them in OWL DL either with
a preferred definition (3) or with only primitive classes (4), but
with a library of optional equivalent class definitions, the validity of which having been checked. Then, more specific OWL DL
ontologies may be further customized for particular applications,
e.g., by adding relevant equivalent class axioms (selected from
the library or created specifically). The advantage of this solution
is twofold. First, it would concretely implements the notion of a
Semantic Web reference ontology specified independently of
applications. Second, it allows users to benefit from DL reasoning services such as consistency checking and classification for
both the general reference ontology and the more customized
ones.

4.4. Future work

The next step is to improve the current conversion so as to
provide a more reliable and enriched representation of the FMA
in OWL. A possible direction is to introduce additional enrichment to the FMA original model mainly by adding qualified
number restrictions, disjointness and closure axioms (Section
4.4.1) and by creating reliable formal definitions for the classes
(Section 4.4.2).

4.4.1. Adding qualified number restrictions, disjointness
and closure axioms

In the future, we would like to improve the current conversion

process and to remove some of its limitations:

 First, we suggest adding disjointness axioms between the relevant classes. Ideally, a classification satisfies the so-called
jointly exhaustive and pairwise disjoint rule. The inconsistencies reported Section 3 are mainly based on opposite
values of a boolean datatype property and their propagation,
but disjointness axioms will most probably lead to identifying
more inconsistencies in the FMA.

 Second, we propose to use qualified cardinality restrictions.
We converted structural own slots values into existential
property restrictions mainly for two reasons. On the one
hand, the assumption that if a class A has a slot p filled with
values B1, B2, . . . Bn in Prot eg e (e.g., constitutional part), an
implicit assumption is that for every individual of A, p has at
least one value of each class Bi. On the other hand we were

confronted to the limited expressiveness of OWL, which
does not support qualified cardinality restrictions. However,
defining restrictions such as hasPart someValuesFrom B1
and hasPart someValueFrom B2 is weaker than hasPart
exactly one B1 and one B2, as it does not prevent from
having several parts of the same Bi. If the next version of
OWL supports qualified cardinality restrictions, more precise
definitions might be provided.

 Third, we suggest completing our current class definitions
by so-called closure axioms [13]. In fact, neither existential
property restrictions nor qualified cardinality restrictions prevent properties from being assigned values from an unwanted
class. In contrast, adding an allValuesFrom restriction to the
class B1  B2 would coerce values to come only from B1 or B2.

Qualified cardinality and closure axioms would allow to
represent more accurately the original FMA definitions, either
given in natural language or implicit in Prot eg e frames. For
example, the equivalent class definition Left lung  Lung
 (=1 regional part Upper lobe of left lung)
 (=1 regional part Lower lobe of left lung)
 ( regional part Upper lobe of left lung 
Lower lobe of left lung)  etc. would enable the left
lung to be defined as having exactly one left upper lobe, one left
lower lobe and only those two lobes as regional parts, or a right
lung as having exactly one right upper lobe, one middle lobe and
one right lower lobe and only those three lobes, reflecting the
original definitions from the Prot eg e FMA:

4.4.2. Enriching the FMA with formal definitions

Currently, the biggest challenge in converting the FMA from
its original Prot eg e frame-based representation to OWL DL is
certainly to specify explicit and precise formal definitions for the
classes, i.e., necessary and sufficient conditions. In the current
experimental version, the equivalent class expressions used to
define classes combine taxonomic relations, metaclass instantiation and constitutional parts that were defined in the original
FMA model. Only one property, constitutional part
(or custom partonomy) was selected for the equivalent
class definitions. This simple method is not satisfying in many
respects and is a serious limitation for the results obtained from
reasoning, especially from classification. Defining anatomical
entities solely on the basis of their constitutional parts is not
semantically correct for all classes, and no such constitutional
parts are defined for most FMA classes. Defining classes from

their constitutional parts may perhaps be appropriate for Organ,
but other anatomical entities might require different criteria of
identification (e.g., Organ part, Cell, or Tissue). As all anatomical entities do not share the same kind of definition, different
expression templates should be specified for the different subtrees (e.g., Organ, Cell, etc). Equivalent conditions  single or
multiple, default or optional  must be defined in close collaboration with the FMA authors, so as to have semantically correct
expressions supporting the unique identification of anatomical
entities. Conversion rules should be modified to accommodate
arbitrary combinations of properties, constructors, and cardinality restrictions and to support specific expressions for each
subtree.

In this first attempt, the conversion aimed at capturing the
features of the Prot eg e representation of the FMA as faithfully
as possible, in order to evaluate its original properties. In the
future, in addition to above proposals, we suggest to introduce
some changes in the model. For example, the OWL classes used
for the Prot eg e attributed relations might be specified by n-ary
relations in an external database related to the ontology. New
classes might be defined for organizational and consistency rea-
sons, e.g., Venous drainage, Arterial Supply, etc.

4.5. Conclusion

Converting the whole FMA from its original frame-based representation into the first order language OWL DL was possible,
and most features of the original FMA model were captured.
With the current state-of-art of DL reasoners, reasoning with
OWL proved to be a real challenge, because of the sheer size
and complexity of the FMA in OWL. Reasoning with the fullfledged FMA raised computational difficulties, but after some
optimizations, various smaller versions were successfully tested
with Racer. Several inconsistencies were revealed in the original
modeling of the FMA. Some classes of the asserted hierarchy
were reclassified and some classes identified to be equivalent.
Although most of them were related to the definition of the
anatomical entities in terms of their constitutional parts, this
example illustrates the power of reasoning with OWL DL. The
results obtained so far demonstrate the advantages of OWL over
frames for large domain ontologies of the future Semantic Web
such as the FMA. However, this experiment is only a first step
and the current versions are not satisfactory in many respects.
In particular, the experimental method used for creating defined
classes from their constitutional parts has to be revised. Correct
expressions supporting the unique identification of anatomical
entities shall be defined. The conversion rules shall be modified
and refined. Tests with RacerProTM are encouraging. Other reasoners also need to be tested. OWL semantics and DL techniques
have the potential of providing a significant help in enriching and
improving the FMA ontology for the future Semantic Web for
Life Sciences.

Acknowledgments

This research was supported in part by the Intramural
Research Program of the National Institutes of Health (NIH),

National Library of Medicine (NLM), while Pr. Christine
Golbreich and Dr. Songmao Zhang were visiting scholars at the
Lister Hill National Center for Biomedical Communications,
NLM, NIH. Our thanks to Volker Haarslev and Ralf M oller for
their valuable advice and help on OWL and Racer, to Cornelius
Rosse, Jos e Mejino and Todd Detwiler for the FMA, and to other
helpful advice.

Appendix A. Conversion rules

The rules depend on whether the information is stored at
metaclass or class level. They capture all the knowledge of the
original Prot eg e model, defined either at metaclasses, classes, or
instances, while respecting the original principles of the FMA.

A.1. Class information

level

domain

specified

(meta)class

Classes and slots  stored at

in
Prot eg e  are converted into OWL classes and properties with
and
range (rdfs:range). The property characteristics are
inverse to
translated to OWL corresponding constructs:
owl:inverseOf,
i.e. symmetric
to owl:SymmetricProperty, property cardinality and
values restrictions to owl:FunctionalProperty and
owl:hasValue. In practice, the rules are the following:

logical characteristics,

(rdfs:domain)

 Top-level slots, specified in Prot eg e to save top-level slot
information, are converted to DatatypeProperty or
ObjectProperty with the corresponding range and
restrictions, according to their definition. For example,
(1) top-level slot with type SYMBOL and allowed-values
TRUE and FALSE is converted to a DatatypeProperty with range #Boolean, e.g., has boundary
(Table A.1 Example #1);

(2) top-level slot with type SYMBOL with allowed-values different from TRUE or FALSE is converted to an ObjectProperty with an enumerated class oneOf {allowed-
values} as range;

(3) top-level

is

converted

slot with type SYMBOL with allowed-
classes
an
(allowed-parents)
ObjectProperty with the union of the allowed
(meta)classes as range, e.g., the range of the multislot
unionOf #Subdivi-
venous drainage
sion of venous tree organ
#Organ
and
part tree structure (Example #2);

the

to

is

(4) top-level slot with type INSTANCE is converted to an

ObjectProperty

Single-slot with cardinality 0 1 is converted to Func-

tionalProperty (Example #1).

Inverse-slot. If a top level slot has an inverse-slot, it is
converted to SymmetricProperty or InverseOf: if
the inverse value is itself, it is SymmetricProperty with
range assigned to its domain, otherwise it is InverseOf.
Thus,
slot has boundary
is converted to a DatatypeProperty with range
#boolean, with a FunctionalProperty restriction,

the top level

for example,

C. Golbreich et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 181195

Table A.1
Examples of conversion rules for top level and template slots

Table A.2
Conversion of a non structural own slot into an AnnotationProperty

while bounded by is converted to an ObjectProperty
with range #Physical anatomical entity, and
inverseOf #bounds (Example #3).

 Slots at class enable to define the domain of an OWL
property and to refine its value constraints: if p is slot
of class C1,
then C1 becomes the domain of p, e.g.,
#Physical anatomical entity becomes the domain
of has boundary (Example #1); if the same slot p occurs in
class C2, then the domain of p is the union of C1 and C2 (e.g.,
the domain of bounded by in Example #3); Optimization
of domain C1  C2 . . .  Cn has been done: if Ci is descendant of another class according to two levels of is-a, then Ci
is removed from the domain (reducing so arterial supply
domain from 4007 classes to 4!).

Allowed-parents, allowed-classes, value define the allowed
values of properties at class. They are converted to necessary conditions expressing value constraints on the property
for this class: if p is slot of class C specified with allowedparents or allowed-classes (respectively with value), then p
is converted by a necessary condition at class C expressing value constraints for p by owl:allValuesFrom the
union class of all its allowed-parents or allowed-classes,
e.g., allowed-parents Surface of organ or allowed-parents
Subdivision of venous tree organ Organ part tree structure
(Example #4) (respectively by hasValue).

Is-a is converted into subsumption axioms (subClas-
sOf): A is-a B (if B is not USER nor:STANDARD-CLASS
or:STANDARD-SLOT or RELATION) is converted to A subClassOf B (resp. A is-a B1 and A is-a B2 is converted to
subClassOf B1  subClassOf B2), e.g., Organ is-a
Anatomical structure (Example #4).

A.2. Instance information

The values of own slots of classes  specified at instance
level in Prot eg e to store data specific to a class  are converted

Table A.3
Conversion of a structural own slot into an existential property restriction

either into OWL values of annotation properties or into existential restrictions on the class properties. In practice, the rules are
the following:

 Non-structural slots. In Prot eg e non structural slots such
as preferred name, synonyms, definition, UWDAID, author
etc., are defined as slots of metaclasses. When classes
instantiate the metaclasses, they become own slots assigned
with values specific to each class, which are thus not
propagated to their instances or subclasses [4]. For exam-
ple, UWDAID value for Heart
is 7088. We used OWL
annotations on classes instead, which are allowed in
OWL DL under some constraints, e.g., the AnnotationProperty UWDAID (Table A.2). Properties designed as
AnnotationProperty have been manually selected.
They include Preferred name, Synonyms, UWDAID, author,
authority, modification, name, Date entered modified, TA ID, defini-
tion, modification,
Latin name TA, UMLS ID, Outdated meaning,
ther Latin equivalents, Source, View, Abbreviation English equivalent,
etc.

 Structural slots. Another use of metaclass in Prot eg e is
for structural slots, such as part of, custom partonomy,
bounded by, arterial supply, etc. It enables to specify each
class for canonical anatomy with particular values assigned
to its own slots, which are thus not propagated.

For example, a canonical Heart is specified having a
Right atrium, a Left atrium, a Right ventricle, a Left ventricule as custom partonomy, being bounded by a Surface of heart. Structural own slots are converted to necessary (or necessary and
sufficient) conditions at class C asserting someValuesFrom constraints for p to the union of all the classes assigned
to p. For example bounded by Surface of heart is converted to a someValuesFrom restriction on the property
#bounded by, expressing that any instance of heart is necessarily bounded by at least one #Surface of heart
(Table A.3).

C. Golbreich et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 181195

Table A.4
Conversion of attributed relations

Table A.5
Generating individuals in OWL DL

 Attributed relations. The values of attributed relations are represented in OWL by nested classes generated in following the
same conversion rules as for classes.

For example attributed part

is an attributed relation which allowed values
are
class
Part of relationship value,
fm-live
12491, fm-live 12492,
converted
to someValuesFrom restrictions on the property
#attributed part (Table A.4).

etc. They are

instances of

e.g.,

 Instantiation of metaclasses. Metaclass instantiation is
replaced by subsumption axiom using subClassOf
axioms7: [A] of B is converted to a subClassOf axiom
A  B, e.g.,
the axiom of class Heart subClassOf
Organ with cavitated organ parts (Table A.3).

 Generating individuals in OWL DL. Based on the slot dimension presented earlier, one individual8 is generated under
owl: Thing for each allowed value of this slot, as shown in
Table A.5.

Additional examples illustrating the conversion rules are
available online at http://mor.nlm.nih.gov/pubs/supp/2006-
psbsz/2006-psb-sz-supp.pdf.
