Web Semantics: Science, Services and Agents

on the World Wide Web 4 (2006) 4059

Combining OWL ontologies using E-Connections

Bernardo Cuenca Grau a,b,

, Bijan Parsia a, Evren Sirin a

a University of Maryland, MIND Laboratory, 8400 Baltimore Avenue, College Park, MD 20742, USA

b Departamento de Informatica, Universidad de Valencia Av. Vicente Andres Estelles, s/n, 46100 Burjassot, Valencia, Spain

Received 2 February 2005; accepted 21 September 2005

Abstract

The standardization of the Web Ontology Language (OWL) leaves (at least) two crucial issues for Web-based ontologies unsatisfactorily resolved,
namely how to represent and reason with multiple distinct, but linked ontologies, and how to enable effective knowledge reuse and sharing on the
Semantic Web.

In this paper, we present a solution for these fundamental problems based on E-Connections. We aim to use E-Connections to provide modelers with suitable means for developing Web ontologies in a modular way and to provide an alternative to the owl:imports
construct.

With such motivation, we present in this paper a syntactic and semantic extension of the Web Ontology language that covers E-Connections
of OWL-DL ontologies. We show how to use such an extension as an alternative to the owl:imports construct in many modeling situations. We
investigate different combinations of the logics SHIN(D), SHON(D) and SHIO(D) for which it is possible to design and implement reasoning
algorithms, well-suited for optimization.

Finally, we provide support for E-Connections in both an ontology editor, SWOOP, and an OWL reasoner, Pellet.

 2005 Elsevier B.V. All rights reserved.

Keywords: Web Ontology Language; Integration and combination of ontologies; Combination of knowledge representation formalisms; Description Logics reasoning

1. Motivation

The Semantic Web architecture has been envisioned as a
set of new languages that are being standardized by the World
Wide Web Consortium (W3C). Among these languages, the Web
Ontology Language (OWL) plays a prominent role, and Description Logics have deeply influenced its design and standardization
[1,2]. Two of the three variants, or dialects, of OWL, namely
OWL-Lite and OWL-DL, correspond to the logics SHIF(D)
and SHOIN(D), respectively [24].

The acceptance of OWL as a Web standard will yield to the
rapid proliferation of DL ontologies on the Web and it is envisioned that, in the near future, the Semantic Web will contain a
large number of independently developed ontologies.

However, the standardization of OWL also leaves (at least)
two crucial issues for Web-based ontologies unsatisfactorily


Corresponding author.
E-mail addresses: bernardo@mindlab.umd.edu (B. Cuenca Grau), bpar-

sia@isr.umd.edu (B. Parsia), evren@cs.umd.edu (E. Sirin).

1570-8268/$  see front matter  2005 Elsevier B.V. All rights reserved.
doi:10.1016/j.websem.2005.09.010

resolved, namely how to represent and reason with multiple dis-
tinct, but linked ontologies, and how to enable effective knowledge reuse and sharing on the Semantic Web.

First, in order to provide support for integrating Web ontolo-
gies, OWL defines the owl:imports construct, which allows to
include by reference in a knowledge base the axioms contained
in another ontology, published somewhere on the Web and identified by a global name (a URI). However, the functionality
provided by this construct is unsatisfactory for a number of reasons [5]:

 The only way that the owl:imports construct provides for
using concepts from a different ontology is to bring into
the original ontology all the axioms of the imported one.
Therefore, the only difference between copying and pasting the imported ontology into the importing one and using
an owl:imports statement is the fact that with imports both
ontologies stay in different files. This certainly provides some
syntactic modularity, but not a logical modularity, which
would be indeed more desirable.

 The components of an ontology, such as classes and proper-
ties, are, as the ontologies themselves, identified by unique
names (URIs) on the Semantic Web. For example, suppose
that we are developing an ontology about People and we
want to define the concept of a Dog Owner. It may seem
natural for such a purpose to use the URI of a certain class
Dog, that appears in an ontology about Pets that we have
found on the Web. We may think then that we are committing to the meaning of Dog in that ontology, i.e., that
a dog is an animal, for example. However, if we use the
URI for Dog without importing the corresponding ontol-
ogy, we are bringing nothing from the meaning of the term
in the foreign ontology, while if we import it, we are bringing all the axioms of the Pet ontology to our logical space,
even if we are only interested in dogs, and not in cats or
hamsters.
 The use of owl:imports results in a completely flat ontology,
i.e., none of the imported axioms or facts retain their con-
text. While it is possible to track down the originator(s) of
some assertions by inspecting the imported ontology, OWL
reasoning does not take such context into account.

Hence, in OWL, we can let in either all the axioms of a foreign

ontology, or none.

Second, enabling knowledge reuse and sharing has been,
since the very birth of OWL, a major goal of the Web Ontology Working Group. Ontology engineering is a highly timeconsuming task. As more ontologies are built and become avail-
able, and as the size of ontologies grows, knowledge sharing and
reuse become crucial research issues.

On the one hand, when ontologies grow, they become harder
for the reasoners to process and for humans to understand, and
also harder to reuse. On the other hand, as more ontologies
become available, the advantages of reusing existing ontologies
become more apparent. In order to make reuse and sharing easier,
ontologies should be designed as mostly independent and selfcontained modules [6,7]. Intuitively, a module should contain
information about a self-contained subtopic, i.e., an application
domain that can largely stand for itself. Then, suitable means
should be provided for integrating and connecting those modular ontologies.

In this paper, we present an approach for tackling these fundamental problems based on E-Connections. The E-Connections
technique [8,9] is a method for combining logical languages that
are expressible in the Abstract Description System (ADS) frame-
work. ADSs [10] are a generalization of description, modal and
epistemic logics and many logics of time and space. The main
motivation of E-Connections is to combine decidable logics in
such a way that the resulting combined formalism remains decid-
able, although the increase of expressivity may result in a higher
worst-case complexity.

With such a motivation, we present in this paper a syntactic and semantic extension of the Web Ontology language that
covers E-Connections of OWL-DL ontologies. We show how
such an extension can be used to achieve modular ontology
development on the Semantic Web and how E-Connections provide a suitable framework for integration of Web ontologies.

We investigate the use of E-Connections as an alternative to the
owl:imports construct in many modeling situations.

We explore different combinations of the logics SHIN(D),
SHON(D) and SHIO(D), which stand at the basis of OWL.
We show that, for these combinations, it is possible to design
reasoning algorithms, well-suited for implementation and opti-
mization. We prove that these algorithms can be implemented
as an extension of current reasoners and, contrary to what is
thought about E-Connections, we argue that they have a potential
for enhancing performance, since they suggest new optimization
techniques.

Finally, we provide support for E-Connections in both an
OWL ontology editor and an OWL reasoner. Our aim has been
to build an E-Connection aware infrastructure, by extending our
ontology editor SWOOP [11] and our reasoner Pellet [12], that
people with a large commitment to OWL will find understandable and useful. We have been mostly concerned with reusing
as much of our current tool support for OWL as possible. Our
experience in implementing OWL tools has taught us that implementing a Semantic Web Knowledge Representation formalism
is different from implementing the very same formalism outside
the Semantic Web framework. Thus, we aim to explore both the
issues related to the implementation of a new KR formalism, E-
Connections, and those concerning its integration in a Semantic
Web context.
2. E-Connections of Web ontologies

An E-Connection is a knowledge representation language
defined as a combination of other logical formalisms. Each of the
component logics has to be expressible in the Abstract Description System framework [10], which includes Description Logics
(and hence OWL-DL), some temporal and spatial logics, Modal
and Epistemic logics. Obviously, different component logics
will give rise to different combined languages, with different
expressivity and computational properties.

E-Connections were originally introduced in [8] as a way
to go beyond the expressivity of each of the component logics,
while preserving the decidability of the reasoning services. Thus,
E-Connections were conceived for providing a trade-off between
the expressivity gained and the computational robustness of the
combination.

Here, we will use E-Connections as a language for defining
and instantiating combinations of OWL-DL ontologies. We will
restrict ourselves to OWL-DL, since OWL-Full is beyond the
Abstract Description System framework. From now on in the
paper, whenever we mention OWL, we will implicitly refer to
OWL-DL.

An E-Connection is a set of connected ontologies. An
E-Connected ontology1 typically contains information about
classes, properties and their instances, as in OWL, but also about

1 In this paper, we use E-Connection Language to denote a formalism, i.e. a
logic; we will use E-Connection to denote a knowledge base written in such a
language. These knowledge bases are composed of a set of connected ontolo-
gies, for which we will use the term E-Connected ontology or component
ontology.

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

a new kind of properties, called link properties, which are somewhat similar in spirit to datatype properties.

In OWL, the classes defined in terms of datatype properties combine information from different domains: the actual
application domain of the ontology and the domain of datatypes.
The coupling between datatypes and the ontology is always
achieved through restrictions on datatype properties. For exam-
ple, a retired person can be defined in OWL as a person whose
age is greater than 65, by using a class (Person) in the ontology
and a restriction on a datatype property age with value greater
than 65. Both from a logical and from a modeling perspective,
the domain of the ontology and the domain of datatypes are dis-
joint: from a modeling perspective, the (application) domain of
persons is disjoint from the (application) domain of num-
bers; from a logical perspective, in OWL, the domain where
classes, properties and individuals in the ontology are interpreted
is disjoint from the domain of datatypes, and datatype properties
are interpreted as binary relations with the first element belonging to the domain of the ontology and the second on the domain
of the datatypes.

In the same vein, link properties allow to create classes in
a certain ontology based on information from a different ontol-
ogy, provided that the domains of the ontologies are disjoint,
both from a logical and a modeling perspective. For exam-
ple, a GraduateStudent in an ontology about people could
be defined as a student who is enrolled in at least one graduate course, by using the class Student in the people ontology and a someValuesFrom restriction on the link property
enrolledIn with value GraduateCourse, which would be a class
in a different ontology dealing with the domain of academic
courses.

Link properties are logically interpreted as binary relations,
where the first element belongs to its source ontology and the
second to its target ontology. Conceptually, a link property
will be defined and used in its source ontology. For example,
the link property enrolledIn would be defined as a link property in the people ontology with target ontology academic
courses.

An E-Connected ontology can be roughly described as an
OWL-DL ontology, extended with the ability to define link properties and construct new classes in terms of restrictions on them.
An E-Connection is then defined as a set of E-Connected ontolo-
gies.

From the modeling perspective, each of the component
ontologies in an E-Connection is modeling a different application domain, while the E-Connection itself is the (disjoint)
union of all these domains. For example, an E-Connection could
be used to model all the relevant information referred to a certain
university, and each of its component ontologies could model,
respectively, the domain of people involved in the university,
the domain of schools and departments, the domain of courses,
etc.

2.1. Basic elements

In order to illustrate the basic elements of an E-Connection,
let us consider the following application domains, that we want

to formalize: let D1 be the domain of travel accommodations,
D2 the domain of leisure activities, D3 the domain of travel
destinations, and D4 the domain of people. We want to use
an E-Connection to model the union of these domains, i.e., the
domain of tourism.

We want to model each application domain in a different
component of the E-Connection and then use link properties to
talk about their relationships.

As in OWL, each E-Connected ontology is written in a different file, and the vocabularies being used in each of them can
be specified by a set of namespace declarations and entity defi-
nitions.

Each E-Connected ontology defines its own ontology header,
and may include a collection of assertions about the ontology
under an owl:Ontology tag. As in OWL, these tags may contain
meta-data about the component ontologies, such as comments
information about version control, and also owl:import state-
ments. The rdf:about attribute provides a name (a URI) for each
ontology.

An E-Connected ontology can import another ontology. Note
that, although E-Connections can replace import statements in
many situations, sometimes it makes more sense to import than
to E-connect.2

For our domains, we create the following root classes3:

We would like to define classes like BudgetDestination (a
travel destination which provides a choice of budget accommo-
dations), a CaribbeanHotel (a hotel accommodation offered at
a Caribbean destination), and a SportsDestination (a destination
that offers a variety of activities related to sport).

In order to attain this goal, we define a set of link properties,
i.e. properties that relate elements of the different domains. For
example, the links providesAccommodation and offersActivity
relate the domain of destinations to the domain of accommodations and activities, respectively.

2 We will investigate later on in the paper the interaction between imports and

E-Connections.

3 In brackets, we specify the ontology each class has been defined in; we
use this in formal notation along this section for clarity and brevity, in order to
avoid including the namespace and ontology headers of each ontology in the
combination.

A link property is a binary relation between instances of
classes, which belong to different E-Connected ontologies. The
source of a link property is the ontology in which it has been
declared; the target of the link is the ontology specified in the
owl:foreignOntology tag in the declaration.

The first element of the relation always belongs to an instance
of a class in the source ontology. In the example, both providesAccommodation and offersActivity have been defined in
the destinations ontology. The second element of the relation corresponds to an individual in the target ontology, i.e. the
accommodations ontology in the case of providesAccommodation and the activities ontology in the case of offersActivity.
The definition of a link property must include a single
owl:foreignOntology tag. As in the case of object properties,
link properties can be assigned a domain and a range. For exam-
ple, the link property offersActivity relates instances of the class
Destination to instances of the class Activity. The class specified as a range of a link property must be declared as a class in
the target ontology. In the source ontology, such a class can be
declared as foreign using the owl:ForeignClass tag.

A URI cannot be used in a given ontology both as local
(declared as a class in the ontology using the owl:Class tag) and
foreign; if this happens, a reasoner must treat such an ontology
as inconsistent.

A link property can be defined as functional or inverse func-

tional, with the usual meaning.

However, as opposed to object properties in OWL, a link
property cannot be tagged as transitive or symmetric. Note that,
within an E-Connection, a link property is defined in a certain
source ontology and points to a specific target ontology. In
other words, each link property connects (only) two ontologies
in a given E-Connection. Tagging a link property as transitive
or symmetric would require the ability to define link properties
with several source and target ontologies as well as extending
the E-Connections framework in a non-trivial way. Exploring
such extensions is part of our ongoing work.

Restrictions on link properties can be used to generate new
concepts. For example, we can define a budget destination
as a travel destination that offers at least one kind of budget
accommodation:

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

Similarly, we can define a CinemaLover as a person who likes

Cinema:

Using an allValuesFrom restriction we can define a FanaticCinemaLover as a CinemaLover who likes no activity other
than cinema:

where in the activities ontology we would define the class
CinemaActivity as a subclass of Activity:

Cardinality restrictions on link properties allow to constrain
the number of objects linked by the connecting relations. For
instance, we can define a Sports-Destination as a travel destination that offers more than 10 different sports activities:

The hasValue restriction on link properties allows to specify classes in an E-Connected ontology based on the existence of
a particular individual in a different ontology. For example, we
can define the class SurfingDestination as a travel destination
that offers surfing as one of their activities, where surfing is an
instance of the class SportsActivity.

A link property may be defined as a sub-property of another
link property. For example, we can define offersSportActivity as
a sub-property of offersActivity:

where in the activities ontology surfing is defined to be an
individual of the class SportsActivity.

A link property can be defined as the inverse of another
link property. For example, link inversion would allow to
define a WaterSport activity a SportsActivity that is offered at
a BeachDestination:

Obviously, a link property cannot be declared as a subproperty of an object or datatype property, nor a sub-property of
a link relation with a different foreign ontology.

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

2.2. Axioms and facts in an E-Connected ontology

An E-Connected ontology is a sequence of axioms and facts:
logical sentences that allow to make assertions about the domain.
For example, as in OWL, we can use an axiom to assert that
GraduateStudent is a subclass of Student and a fact to state that
john is enrolledIn the WebTechnologies course.

In E-Connected ontologies it is also possible to use a fact
to instantiate a link property. For example, we can assert that
SaintThomasIsland is an instance of CaribbeanDestination and
that it offers the surfing activity:

Given an E-Connected ontology, a reasoner should consider
only all the E-Connected ontologies in its transitive closure
under link references. For example, the destinations ontology
defines a link property providesAccommodation to the accommodations ontology and a link offersActivity to the activities
ontology. Since accommodations does not contain any link
property (it is an ordinary OWL ontology) and activities only
includes the link property isOfferedAt to destinations again,
the reasoner would consider the following set of E-Connected
ontologies:

The E-Connections framework imposes some restrictions to
axioms and facts. For example, a class cannot be declared in an
ontology as a subclass of a class declared in a foreign ontology
in the combination. A property (object, datatype or link) cannot
be declared as sub-relation of a foreign property; an individual
cannot be declared as an instance of a foreign class, and a pair
of individuals cannot instantiate a foreign property.

E-Connections also constrain the use of URIs. In OWL-
DL, a URI cannot be used, for example, both as a class and
a datatype, or as an object property and a datatype property. In
an E-Connected ontology, a set of additional restrictions must
be imposed, namely a URI cannot be used locally in two different component ontologies. These issues will be addressed in
detail later on in the paper.

2.3. What is a E-Connection in a Semantic Web context?

An E-Connection is a set of E-Connected ontologies. How-
ever, this definition can be ambiguous, since it may not be
apparent at the first sight to which set we are referring to.

For example, let us consider again the tourism domain. At
first sight, one would say that we have a single E-Connection,
namely, the one composed by the ontologies: destinations,
activities, accommodations, people. However, this is not
strictly correct.

Suppose that the people ontology contains an explicit con-
tradiction. Assume we load the accommodations ontology in
a reasoner and try to check its consistency; what should the
reasoner do? The accommodations ontology contains no link
property declarations, i.e., it is an ordinary OWL ontology. In
this case, an E-Connections aware reasoner should only check
the consistency of that ontology, and ignore the rest, i.e., it should
not report the inconsistency in the people ontology.

Kdestinations = {destinations, accommodations, activities}

We say that Kdestinations is the E-Connection induced by the
destinations ontology. Looking at the link references between
the different ontologies of the example, it is easy to see that:
Kaccommodations = {accommodations}
Kactivities = {activities, destinations, accommodation}
Kpeople = {people, destinations, accommodations, activities}
An OWL ontology O can be seen as an E-Connected ontology
which induces an E-Connection with O as its only component.
3. Modeling with E-Connections

E-Connections can be used, as in the example on tourism, for
integrating existing ontologies, which describe different application domains, by adding knowledge about how these domains
are related to each other.

In this section, we show how to use E-Connections the other
way round, namely for decomposing a knowledge base into
smaller, connected ontologies. In order to illustrate this application of E-Connections, we have built a set of E-Connected
knowledge bases from various ontologies available on the Web
and written in OWL.4

4 The original ontologies and their corresponding E-Connections are available
online at http://www.mindswap.org/2004/multipleOnt/FactoredOntologies. The
E-Connected ontologies are written in an extension of OWL.

As an example, let us consider the ontology used in the
OWL documentation: the Wine Ontology [4]. This ontology
describes different kinds of wines according to various crite-
ria, like the area they are produced in, the kinds of grapes they
contain, their flavor and color, etc. For example, a Cabernet
Franc Wine is defined to be a dry, red wine, with moderate flavor and medium body and which is made with Cabernet Franc
grapes5:

axioms they contain. An edge (v1, v2) represents the existence
of a link property with source ontology v1 and target ontology
v2.

The blue nodes in the graph represent leaf nodes, i.e. components that have incoming link properties only. These components are free-standing, in the sense that they do not use
information from any other component in the E-Connection and
are written in plain OWL. On the other hand, red nodes represent
the nodes with outgoing edges, which depend on the information
contained in other E-Connected ontologies.

A Bordeaux is defined to be a wine produced in the Bordeaux

area6:

Note that the Wine Ontology does not contain information
about wines only, but also information about regions, wineries,
colors, grapes, and so on. This illustrates a general feature of
OWL ontologies: although they usually refer to a core application domain, they also contain side information about other
secondary domains.

This modeling paradigm is not only characteristic of small
and medium sized ontologies, but also occurs in large, highquality knowledge bases, written by groups of experts. A prominent example is the National Cancer Institute (NCI) ontology
[13], a huge ontology describing the cancer domain. The NCI
ontology is mainly focused on genes, but it also contains some
information about many other domains, like professional orga-
nizations, funding, research programs, etc.7

In all these cases, it is more natural to represent each application domain in a different E-Connected ontology, where link
properties are used in the component KBs whenever information from a different ontology in the combination is required.
The component ontologies in an E-Connection are mostly selfcontained in the sense that they only contain information about
a single topic, and are loosely coupled, since the coupling
between E-Connected ontologies can only be achieved through
restrictions on link properties.

In the case of the Wine Ontology, the combined KB is
composed of six ontologies, dealing with grapes, wine descriptors (color, flavor, . . .), regions, wineries, years, and wines,
respectively.8

Fig. 1 shows a visualization of the resulting E-Connection.
In the graph, the nodes represent E-Connected ontologies
and their size is proportional to the number of entities and

5 In this section, instead of using the RDF/XML notation as in Section 2 we
will use for clarity and brevity standard DL notation. The equivalence between
this notation and abstract syntax is summarized in Tables 2 and 3.

6 In both examples the braces represent nominals.
7 The E-Connected version of NCI

is also available at http://www.

The graph in Fig. 1 is a tree. The ontology dealing with
wines is the only one that uses information from other ontolo-
gies, which implies that wines are central to the E-Connection.
The remaining E-Connected ontologies are leaves in the tree, and
hence represent secondary sub-domains. Note that, in general,
the graph corresponding to an E-Connected knowledge base can
be an arbitrary directed graph.

When transforming a DL knowledge base into an E-
Connected KB, many object properties in the original ontology
become link properties in the E-Connected KB. For example, in
the definition of Cabernet Franc wines, the object property madeFromGrape becomes a link property from the Wine Ontology
to the grapes ontology, while hasColor, hasFlavor and hasBody
connect the Wine Ontology and the wine descriptors ontology.
Obviously, this effect depends on the number of E-Connected
ontologies. Since many restrictions on object properties in the
original ontology become restrictions on links in the combined
KB, the expressivity tends to be pushed into the link properties.
The use of E-Connections for both integration and decomposition of OWL knowledge bases suggests a new modeling methodology, applicable to knowledge engineering with
Description Logics in general, and to the Semantic Web in par-
ticular. The core idea is to keep ontologies small and disjoint and
to use these ontologies as reusable units that can be combined in
various ways using E-Connections depending on the modelers
needs.

It is worth emphasizing here that E-Connections are not a
suitable technique for combining ontologies dealing with highly
overlapping domains, which prevents its use in some important Knowledge Engineering applications, such as ontology
refinement. For example, if we developed a new ontology on
grapes with richer descriptions about a certain kind of grape, we
would not be able to connect it to the old one using our tech-
nique. However, E-Connections were not designed for such a
purpose.

4. Tool support

In this section, we discuss the key issues to be addressed
for providing tool and application support for E-Connections,
and we describe our implementation of an E-Connection aware
infrastructure that extends the OWL-API [14] and is integrated
to the ontology editor SWOOP [11].9

mindswap.org/2004/multipleOnt/FactoredOntologies.

8 In this section, we are using a version of the Wine Ontology that does not

import the Food Ontology.

9 SWOOP is
2004/SWOOP.

available

for download at http://www.mindswap.org/

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

Fig. 1. The Wine Ontology as an E-Connection.

4.1. Requirements

4.1.1. Basic functionality

A basic implementation for E-Connections must perform

similar tasks as an OWL implementation itself:
 Serializing: Producing the extended OWL concrete syntax,
introduced in Section 2, from some internal representation.
 Modeling: Providing a suitable internal
representation
 Parsing: Building an internal representation from a document

(model) for E-Connected ontologies.

in the concrete syntax.

This basic functionality must be provided by Semantic Web

high-level programming interfaces, such as the OWL-API.

Ontology browsers and editors must provide additional rendering and editing functionality. Perhaps, the most important
requirement for an E-Connections aware ontology editor is
the ability to deal effectively with multiple ontologies, which
implies, for example, the ability to load, save and manipulate
several ontologies simultaneously, as well as the ability to easily navigate from one to another.

Ontology editors must also be able to provide browsing and
editing capabilities for the extended RDF/XML and abstract
syntaxes10 and support for the simultaneous use of imports and
E-Connections.

4.1.2. Combining imports and E-Connections

The combined use of E-Connections and owl:imports raises
a number of difficulties. For example, suppose a simple case
in which we have two connected ontologies: the ontology OA
about people and the ontology OB about animals. Suppose
that in OA there are link properties connecting OA to OB and

vice versa. Assume that the modeler decides at some point that
persons should be described as a subclass of animals and that
the application which is using the connected ontologies relies
on such a decision. Consequently, the modeler makes OA import
OB. The following issue immediately arises: what should a tool
automatically do in such a case?

In principle, an editor should automatically modify the ontology OA, and leave the ontology OB unaltered in the workspace, in
order to comply with the asymmetric nature of the owl:imports
construct. Then, the tool should transform, in OA, all the link
11 into ordiproperties from OA to OB and from OB to OA
nary object properties. In other words, OA is transformed into a
plain OWL ontology, which treats the domains of people and
animals as a single one.

However, those modifications leave the ontology OB, which
is still E-Connected to the (modified) OA ontology, in a pretty
much non-sensical state, since OB would be E-Connected to the
union of OA and itself. What should happen next? Clearly,
the E-Connection has been broken by the owl:imports state-
ment, since, as we will discuss later, there is a violation in the
restrictions on the usage of URIs within an E-Connection.

In such a situation, merging OA and OB reveals as the most
plausible solution. A merge would enforce that all the link properties pointing to OB will now point to OA (which is importing
OB) and all the link properties from OB will become object
properties. These operations will disconnect OB from the com-
bination.

4.2. Implementation

4.2.1. Extending the OWL-API

We have extended Manchesters OWL-API in order to provide a high-level programmatic interface for parsing, serializing

10 The extended abstract syntax for E-Connections will be presented in next
section.

11 Note that those are imported.

and manipulating E-Connected ontologies. Our aim has been
to design a smooth extension to the API that respects its main
design decisions and provides the required functionality.

The OWL-API RDF parser and internal model have been
extended to deal with the new constructs. Link properties in an
E-Connected ontology are internally represented as object properties that additionally specify the URI of its target ontology. On
the other hand, E-Connected ontologies extend OWL ontologies
with functionality for retrieving link properties and foreign entities (classes, properties and individuals).

In order to manipulate the structures in the internal repre-
sentation, we have provided functionality for adding/removing
a foreign entity to/from an E-Connected ontology, and to set
the target ontology of a link property. The functionality for
adding/removing link properties is provided by reusing the corresponding functionality for object properties.

This simple infrastructure is sufficient for building E-
Connections aware Semantic Web tools on top of the OWL-API.

4.2.2. Extending SWOOP

SWOOP [11] is a Web Ontology browser and editor, which
has been especially designed for complying with the OWL
nature and specifications. The main design goal has been to
allow the user to create OWL ontologies rapidly and intuitively.
SWOOP assumes the use of multiple ontologies and supports
this use in a number of ways. Being an open multiple ontology
engineering environment, SWOOP is an ideal testbed for experimenting with E-Connections in the Semantic Web context.

SWOOP uses the new functionality added to the OWL-API
in order to provide basic rendering and editing support for E-
Connections. As in the case of the OWL-API, we have tried
to keep the main UI and design decisions in SWOOP and to
incorporate the required functionality with a minimal extension
of the code.

properties, the renderer pane shows its target ontology, while in
the case of foreign entities the pane shows the (foreign) ontology
in which the entity has been defined. All these elements are
hyperlinked; thus, for example, if the user clicks on the URI of a
foreign ontology, the ontology will be loaded in the workspace.
The idea is to provide easy and intuitive navigation through
the ontologies in an E-Connection. Finally, the Abstract Syntax
entity renderer displays the extended OWL abstract syntax that
will be presented in next section, while the RDF/XML entity
renderer provides the extended RDF/XML code for the entity,
as presented in Section 2.

SWOOP provides basic tool support for creating and editing
E-Connected ontologies. Link properties can be added to the
ontology and it is possible to define restrictions on them. Incorrect editing is prevented when possible: link properties cannot be
made transitive or symmetric and restrictions on link properties
can only be applied to classes/individuals in its target ontology.
Finally, SWOOP provides a graph layout for visualizing the
connections between components in an E-Connection. Given a
selected ontology in the workspace, SWOOP allows to display
its induced E-Connection. Fig. 1 shows the graph corresponding
to the Wine Ontology.

5. An extension of OWL-DL

5.1. Abstract syntax

The syntax presented in this section is an extension of the normative OWL abstract syntax, as described in the OWL abstract
syntax and semantics recommendation [3], and we use the same
Extended BNF syntax as in the normative document.

An E-Connected ontology K contains a sequence of annota-
tions, axioms and facts. Annotations, as in OWL, can be used
to record authorship and other information associated with the
ontology, including imports.

The extension of the OWL-API automatically provides the
functionality for loading and saving E-Connected ontologies in
the extended RDF/XML syntax presented in Section 2. When
loading an E-Connected ontology, link properties and foreign
entities are distinguished in the UI from the rest of OWL
entities.

The renderers have been slightly extended in order to support
the new elements. The Ontology Information renderer provides
useful statistics, such as the number of link properties, foreign
classes, properties and individuals in an E-Connected ontology.
The concise format entity renderer has been extended to display
properly link properties and foreign entities. In the case of link

E-Connected ontologies are referenced using a URL E-
Connected ontologies contain information about the same kind
of entities as OWL ontologies (classes, object properties, etc.),
but they also contain information about link properties. Link
properties are also denoted by URI references.

In order to ensure the separation of vocabularies, a URIreference cannot be both a linkID, an individual-valued property
ID, a datatype property ID, an annotation property ID or an
ontology property ID in an E-Connected ontology. Intuitively,
while individual-valued properties relate individuals to other

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

individuals in the same ontology, link properties relate individuals corresponding to different interpretation domains. Thus, link
properties act as a bridge between different ontologies, which
remain separate, and keep their own identity.

An OWL ontology in the abstract syntax contains a sequence
of axioms and facts. In order to provide support for E-
Connections on the Semantic Web, we propose a syntactic and
semantic extension of OWL-DL with new kinds of axioms and
facts. Every OWL ontology can be seen as an E-Connected ontology in which no link properties have been declared.

5.1.1. Axioms

In a E-Connected ontology, link properties can be defined

using the following axiom:

Link properties used in an abstract syntax ontology must be
declared, and hence need an axiom. A link property cannot be
declared twice as referring to different ontologies.

Link properties can be made functional or inverse functional
and can be given global domains and ranges. As opposed to
object properties, link properties cannot be made transitive or
symmetric.

Link properties can be equivalent to or sub-properties of
others. Of course, in order for these axioms to model useful
information, the link properties that are related through equivalence or subsumption should refer to the same foreign ontology.

In E-Connections the coupling between the ontologies is
achieved through restrictions on link properties. As in OWL, universal (allValuesFrom), existential (someValuesFrom) and value
(hasValue) restrictions can be defined.

5.1.2. Facts

Our proposal extends the OWL-DL facts by adding the following production rule to the normative OWL abstract syntax:

These facts allow to instantiate link properties with named

individuals.

5.2. Direct model-theoretic semantics

This section provides a model-theoretic semantics to E-

Connected ontologies written in the abstract syntax.

As in OWL, the definition of the semantics starts with the

notion of a combined vocabulary.

Definition 1. A combined OWL vocabulary V consists of
a set VL of literals and the following sets of URI references:
for i = 1, . . ., n, VCi are sets of class names, each of which
contains owl:Thing and owl:Nothing; VI are sets of individual names; VDPi, VIPi and VAPi are sets of datatype, object and
annotation property names, respectively, where each VAPi contains owl:versionInfo, rdfs:label, rdfs:comment, isDefinedBy,
seeAlso; VD is the set of datatype names, which also contains the
URI references for the built-in OWL datatypes and rdfs:Literal;
VO the set of ontology names and VOP the set of URI references
for the built-in ontology properties; finally, for i, j = 1, . . ., n with
i= j, Eij are sets of URI references denoting link properties.
In any vocabulary, the (VCi {owl:Thing, owl:Nothing}) are
pair-wise disjoint, and disjoint with VD. Also, i, j = 1, . . .,
n; i= j the VDPi, VIPi, (VAPi {owl:versionInfo, rdfs:label,
rdfs:comment}), VOP, Eij are all pair-wise disjoint.

Given an E-Connected ontology, the vocabulary must include
all the URI references and literals utilized in each of the ontolo-

gies, as well as those used in ontologies that are imported or
referenced through a link property by any of the component
ontologies, but can contain other URI references and literals as
well.

Range axioms and restrictions on link properties are referred
to foreign class descriptions. Foreign classes are classes that,
though used in a certain E-Connected ontology, correspond to a
different ontology in the combined knowledge base. If a foreign
description is used in a range axiom or in a restriction corresponding to a link property, it will always be interpreted in the
domain of the target ontology of the link property.

As in OWL, a datatype d is characterized by a lexical space,
L(d), which is a set of Unicode strings; a value space, V(d); and
a total mapping L2V(d) from the lexical space to the value space.
Definition 2. A datatype map D is a partial mapping from URI
references to datatypes that maps xsd:string and xsd:integer to
the appropriate XML Schema datatypes.

The model-theoretic semantics is provided by the notion of

a combined interpretation.

Definition 3. Let D be a datatype map. A combined OWL
interpretation with respect to D with combined vocabulary V
is a tuple of the form:
I = (R, (Ri)lin, (ECi)lin, (ERi)lin, L, (Si)lin,

ED, LV, N),

where (with P being the powerset operator):
 R the set of resources of the interpretation is a non-empty set
 LV R, the set of literal values of I, contains the set of Unicode
strings, the set of pairs of Unicode strings and language tags,
and the value spaces for each datatype in D
 Ri = Oi  LV, where Oi is non-empty, disjoint from LV and
disjoint from Oj, j = l,. . .,n; i= j
 ECi: VCi  P(Oi)
 ED: VD  P(LV)
 ERi: VIPi  P(Oi  Oi)
 ERi: VDPi  P(Oi  LV)
 ERi: Eij  P(Oi  Oj)
 L: TL LV, where TL is the set of typed literals in VL
 ERi: VAPi  P(Ri  Ri)
 ERi: VOP  P(Ri  Ri)
 Si: VIi  Oi
 Si : VIi  VCi  VD  VDPi  VIPi  VAPi 
Eij{owl:Ontology, owl:DeprecatedClass,
owl:DeprecatedProperty} N, where N R12 is disjoint
with LV and with each of the Oi, i = 1, . . ., n
 ECi(owl:Thing) = Oi  R
 ECi(owl:Nothing) =
 ECi(rdfs:Literal) = LV
 If D(d
) = d, then ED(d
 If D(d
) = d, then L (vd
) = L2V(d)(v)
) = d and v / L(d), then L(vd
 If D(d

) R LV

) = V(d)

In a combined OWL interpretation, the functions (ECi)1in
provide logical meaning for URI references used as classes in
the E-Connected ontology Ki. The functions (ERi)1in assign
logical meaning to the URIs in the ontologies (Ki)1in that are
used as OWL properties or links.13 In a combined interpretation
the abstract interpretation domain is partitioned into n disjoint
parts, each of which corresponding to a different component
ontology. Link properties are interpreted through (ERi)1in as
pairs of elements corresponding to different parts of the abstract
logical domain (Fig. 2).

The function L provides meaning for typed literals and the
function ED to the datatypes used in the E-Connection. Note that,
as opposed to the abstract interpretation domain, the domain in
which datatypes and literals are interpreted is not partitioned.
The functions (Si)1in provide meaning to OWL individu-
als. Analogously to OWL, these functions are extended to plain
literals in VL by mapping them onto themselves. Note that, if
the same literal l is used in different component ontologies,

12 Vocabulary names.
13 As in OWL, the property rdf:type is added to the annotation properties in
order to provide meaning for deprecation.

Fig. 2. A combined interpretation.

say i, j, the functions Si, Sj will map it to the same value in LV,
i.e. Si(l) = Sj(l) = l LV.

The functions ECi are extended to class descriptions, individuals and annotations an in the OWL specification [3]; the
additional constructs are interpreted according to Table 1, where
l is a link property declared in Ki with foreign ontology Kj.

A combined OWL interpretation I satisfies axioms and facts

as given in the OWL specifications [3] and in Table 2.

We now define precisely the notion of the E-Connection
induced by an ontology, introduced informally in Section 2.3.
Definition 4. Let K1 be an E-Connected ontology. The E-
Connection induced by of K1 is defined to be the following
set of E-Connected ontologies:
K = (K1, . . . , Kn) = clos(K1)
where the set clos(K1) is inductively defined as follows:
 K1  clos(K1)
 If K

belongs to clos(K1) and there is a link property with

source K

and target K

, then K  clos(K1).

Note that an E-Connected ontology K1 is an ordinary OWL
ontology, as specified in the normative documents if and only if
the E-Connection induced by K1 is precisely itself, i.e. K = (K1).
Since a URI can be used in an E-Connected ontology either as
local or foreign, we need to provide a formal distinction between
both cases. For such a purpose, we introduce the notion of a URI
to belong to an E-Connected ontology as follows:
Definition 5. Let K = (K1, . . ., Kn) be the E-Connection induced
by K1. We say that a URI reference u belongs to the E-Connected
ontology Ki if either of the following conditions holds:
 It is used in Ki or in an ontology imported by Ki, but not in
the context of a restriction on a link property.
 It is used in Kj, j= i in the context of a restriction on a link
property with foreign ontology Ki.

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

Table 1
Extension of ECi

Abstract syntax

restriction(l allValuesFrom(ForeignClass(c)))
restrict ion (l someValuesFrom(ForeignClass(c)))
restriction(l value(ForeignIndividual (id)))
restriction(l minCardinality(n))
restriction(l maxCardinality(n))
restriction(l Cardinality(n))

Table 2
Interpretation of axioms and facts

Directive

Link(l [Deprecated]
foreignOntology (Ontj)
annotation(p1 o1) . . .
. . . annotation(pk ok)
super(s1) . . . super(sn))
domain(d1) . . . domain(dn)
range(r1) . . . range(rn)
[inverseOf(m)]
[Functional]
[InverseFunctional]
EquivalentProperties(l1 . . . ln)
SubpropertyOf(l1, l2)

Table 3
The SH family of Description Logics

Construct name

Atomic concept
Universal concept
Atomic role
Conjunction
Disjunction
Negation
Existential Restriction
Value restriction
Transitive role
Role hierarchy
Inverse role
Nominals
Functional role
Functional
Number restrictions
Unqualified
Number restrictions

Interpretation (value of ECi)
{x Oi|(x, y) ERi(l)  y  ECj(c)}
{x Oi|(x, y) ERi(l), y  ECj(c)}
{x Oi|(x, Sj(id)) ERi(l)}
{x Oi| = ({y  Oj : (x, y) ERi(l)})  n}
{x Oi| = ({y  Oj : (x, y) ERi(l)})  n}
{x Oi| = ({y  Oj : (x, y) ERi(l)}) = n}

Conditions on interpretations
[(Si(l), S(owl:DeprecatedProperty)) ERi(rdf:type)]
ERi(l) Oi  Oj
Si(l) ECi(annotation(p1 o1)) . . .
. . . Si(l)) ECi(annotation(pk ok))
ERi(l) ERi(s1) . . . ERi(sn)
ERi(l) ECi(d1) Oj  . . . ECi(dn) Oj
ERi(l) Oi  ECj(r1) . . . Oi  ECj(rn)
ERi(l) = (ERj(m))
x Oi y, z Oj, (ERi(l))(x, y)(ERi(l))(x, z) y = z
y, z Oi x Oj, (ERi(l))(y, x)(ERi(l))(z, x) y = z
ERi(lj) = ERi(lk)1 j k n
ERi(l1) ERi(l2)


DL syntax

C D
C D

R.C
R.C
Trans(R)
R S

S = R
{o1, . . ., on}
Funct(R)
2R
1R
nR
nR

OWL syntax

A(URI reference)
owl:Thing
R (URI reference)
intersectionOf(C,D)
unionOf(C,D)
ComplementOf(C)
restriction(R someValuesFrom(C))
restriction(R allValuesFrom(C))
ObjectProperty(R [Transitive])
subPropertyOf(R,S)
ObjectProperty(S [inverseOf(R)])
OneOf(o1,. . .,on)
ObjectProperty(R [Functional])
restriction(R minCardinality(1))
restriction(R maxCardinality(1))
restriction(R minCardinality(n))
restriction(R maxCardinality(n))

Logic

For example, assume that the URI foo:Publication is used
in an E-Connected ontology O1 in the context of the following
restriction: restriction(l Foreign-Class (foo:Publication)), where
l is defined to be a link property with foreign ontology O2; then,
the URI would belong to the ontology O2 and would necessarily
need to be declared as a class in O2.

The semantics of an E-Connection is given as follows:

Definition 6. Let D be a datatype map, K1 be an E-Connected
ontology, and K = (K1, . . ., Kn) the E-Connection induced by
K1. A combined OWL interpretation I with respect to D with
vocabulary V, satisfies K1 (denoted by I  K1) iff:

(1) Each URI reference belonging to Ki, used as a classID
(datatypeID, individualID, data-valued property ID, annotation property ID, annotation ID, ontology ID) belongs to
a single component ontology Ki and is contained in VCi(VD,
VIi, VDPi, VIPi, VAPi, VO, respectively).

(2) Each literal in Ki belongs to VL.
(3) Each URI reference in Ki used as a linkID, with foreign

ontology Kj, is in Eij.

(4) I satisfies each directive in Ki, except for ontology annota-
tions.
. . ., n some oi  N R with
(oi, Si(owl:Ontology)) ERi(rdf:type) such that for each

(5) There is,

for all

i = 1,

ontology annotation of the form Annotation(p v), (oi,
Si(v)) ERi(p) and if the component ontology Ki has name
ni, then Si(ni) = oi.

(6) I satisfies each E-Connected ontology in K.
(7) I satisfies each ontology mentioned in an owl:imports anno-

tation directive of any Ki.

At this point, it is worth discussing the semantics we have

provided to URIs within an E-Connection.

The meaning of names is a contentious issue in the Semantic
Web. Numerous proposals have been given for how to provide
meaning for names in the Semantic Web, ranging from a strict
localized model-theoretic semantics to proposals for a unified
single meaning. Certainly, the latter was the original goal of
URIs, as global identifiers. However, currently, the meaning
of a name in RDF and hence in OWL is relative to a particular
RDF graph [15]. In other words, the meaning of the same URI
in other documents is not considered at all. The only way that
the OWL standards provide in order to take into account the
meaning of a URI in a different ontology is to import that ontol-
ogy. When an ontology imports another one, identical URIs are
merged; otherwise, the meaning of a URI is entirely local to
an RDF/OWL document.

In the framework of E-Connections, we provide a stronger
meaning to URIs. Roughly, we prevent the use of the same
global name (URI reference) to denote different things within
an E-Connection. Suppose we use the same URI to denote an
individual in two different ontologies. For example, assume we
use the URI http://www.mindswap.org/bob to denote an individual in an ontology about people and in an ontology about
pets and suppose that we consider an E-Connection which
includes both ontologies. It is a fundamental assumption in
the E-Connections formalism that the (interpretation) domains
of the component ontologies are disjoint. Hence, if the URI
http://www.mindswap.org/bob is used as a name for an individual in both the pets and people ontology, it necessarily
refers to two different entities. In such a case, an E-Connections
aware reasoner should detect an inconsistency. Thus, we are
extending the meaning of a URI from a single document to the
context of its induced E-Connection.

Recall also that, although each ontology within an E-
Connection is interpreted in a different domain, datatypes in
every ontology are interpreted in the same domain. As opposed
to the case of object domains, there is no reason to partition the
datatype domain. Note that the original E-Connections framework as presented in [8] does not consider datatype theories, nor
we considered datatypes in the reasoning algorithms presented in
[16]. However, our approach in this paper concerning datatypes
does not affect the results in [8] and allows for a straightforward
extension of the algorithms in [16].

The main reasoning services are, as in OWL, consistency and

entailment.
Definition 7. An E-Connected ontology K1 is consistent with
respect to a datatype map D (denoted by I |=D K iff there is some
combined interpretation I with respect to D such that I satisfies
K1.

Definition 8. An E-Connected ontology K1 entails an E-
Connected ontology K2 with respect to a datatype map D,
denoted by K1 |=D K2 iff every combined interpretation that
satisfies K1 with respect to D also satisfies K2 with respect to D.
The following results are a straightforward consequence of
the definitions of entailment and satisfaction under a combined
interpretation:
Consequence 1. Let K1 be an E-Connected ontology and
K = (K1, . . ., Kn) be the E-Connection induced by K1. Then K1
|=D Kj, j = 1, . . ., n.
Consequence 2. The E-Connection K = (K1, . . ., Kn) induced
by K1 entails the E-Connection O = (O1, . . ., Om) induced by O1
with respect to a datatype map D (K |=D O) iff K1 |=D O1.

These results show that a E-Connection is identified in a
Semantic Web context by its generating E-Connected ontol-
ogy.

6. Reasoning

6.1. Reasoning in OWL

OWL-DL and OWL-Lite can be seen as expressive Description Logics, with an ontology being equivalent to a Description
Logics knowledge base. Among the myriad of very expressive
DLs, the SH family of logics plays a prominent role [17]. All
modern, highly optimized DL reasoners, such as FaCT [18],
RACER [19] and Pellet [12] have been designed for these log-
ics.

In order to obtain a suitable balance between computational
properties and expressivity, the design of the DL-based species
of OWL has been grounded on the SH family of logics. OWLLite corresponds to SHIF(D), while OWL-DL corresponds to
SHOIN(D).

The first algorithm for the logic SH was presented in [20].
The extension for SHIF was presented in [21], and qualified
number restrictions (an extension of the number restrictions used
in OWL) were introduced for the logic SHIQ in [17]. Nominals
and datatypes were presented for the logic SHOQ(D) in [22].
In [23] it was proved using the tableau systems formalism that
satisfiability in SHIO can be decided with a tableau algorithm.
Finally, the design of a reasoning procedure for SHOIQ has
been achieved only very recently [24].

6.2. A family of E-Connection languages

There are two ways to obtain new E-Connection languages
(Table 4). The first possibility is to vary the set of component
logics; the second would be to change the logic of the link prop-
erties, i.e., to vary the set of operators that can be applied on link
properties. Different choices in the component logics and in the
logic of the link properties will yield, in general, different combination languages, with different expressivity and computational
properties.

A family of E-Connection languages can be specified by
fixing the component logics and varying the logic of the link

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

Table 4
E-Connection languages

Construct name

Atomic link

Existential restriction
Universal restriction
Atleast number restriction
Atmost number restriction
Link inversion
Funct. link axiom
Funct. number restrictions
Link inclusion axiom

Syntax
p Eij
p.Z
p.Z
np
np


Funct(p)
2p,1p
p q

Naming scheme

C(SHIN(D), SHON(D),
SHIO(D))

properties. In this paper, we have tacitly specified, in the
abstract syntax and semantics section the E-Connection language CE
IHN(SHOIN(D)), i.e., the E-Connection language that
allows the use all the expressivity of SHOIN(D), and hence of
OWL-DL, in the component ontologies, and the use of inverse
link properties, link hierarchies and someValuesFrom, allValues-
From, hasValue and Cardinality restrictions on link properties.
It is not hard to see that the first requirement for reasoning on
an E-Connection language is the ability to reason independently
on each of its component logics. Our aim is to show that it is possible to design and implement practical tableau-based algorithms
for E-Connections on top of existing DL reasoners. Therefore,
in this paper, we will focus on the family of combination languages having as component logics the three most prominent
fragments of SHOIN(D) that have been implemented in DL
reasoners, namely SHIN(D), SHON(D) and SHIO(D) and
investigate their expressiveness, usefulness, and computational
properties.

Once the component logics have been identified, it remains
to investigate the expressivity that should be allowed on link
properties. The language, SHON(D), SHIO(D) is the most
expressive fragment of that can be obtained using as component
logics SHIN(D), and SHIO(D). In this language, each of the
component ontologies can be written either in SHIN(D), or in
SHON(D), or in SHIO(D), and the full expressivity on link
properties is allowed.

However, due to the presence of inverses in this language,
cardinality restrictions on link properties allow to transfer nominals in its full generality from one component to another [8],
which would invalidate the separation of domains and hence
break the E-Connection.14

However,

it

cases, we

is worth emphasizing here that,

in many
IHN(SHIN(D),
special
SHON(D), SHIO(D)) combined ontologies, even if number
restrictions and inverses on link properties, as well as nominals,
are used in the combination.

can still process CE

A CE

IHN(SHIN(D), SHON(D), SHIO(D)) E-Connected
KB K = (K1, . . ., Kn) can be processed as long as, for every
possible pair of component ontologies Ki, Kj for i,j {1, . . .,
n},i= j, the following conditions do not hold simultaneously:

14 Obviously, if none of the component logics contained nominals, it would be
safe to use the full expressivity on the link properties.

(1) Any of Ki, Kj contains nominals.
(2) An inverse of a link property from Ki to Kj or vice versa is

used.

(3) Number restrictions on links from Ki to Kj or vice versa are

used.

Of course, in order to be able to handle arbitrary combined
ontologies, we need to further restrict the expressivity allowed
on link properties.

In the sections that follow, we will discuss how the two obvious fragments of CE
IHN(SHIN(D), SHON(D), SHIO(D)) not
containing inverses and cardinality restrictions on link properties simultaneously can be handled algorithmically.

6.3. Tableau algorithms for E-Connections of description
logics

So far, we have discussed which E-Connection languages we
can handle algorithmically, but we have not yet explained how
the reasoning is actually performed and implemented. In this
section, we provide a general intuition on how the reasoning
algorithms we have developed for E-Connections work. We will
not include here a detailed formal presentation of the algorithms,
nor the proofs of correctness and completeness; we refer the
interested reader to [16] for a detailed discussion.

Modern DL reasoners, like FaCT, RACER and Pellet implement the tableaux method [25] for solving the main reasoning
tasks in expressive Description Logics.

Tableau algorithms are focused on satisfiability; other reasoning problems, like subsumption, or entailment (the main
inference problem in OWL) can be solved by first reducing them
to satisfiability [26].

In order to check satisfiability of a given concept C0 w.r.t.
a knowledge base , a tableau algorithm tries to construct a
common model of C0 and . If it succeeds, then the algorithm
determines that C0 is satisfiable w.r.t. , and unsatisfiable oth-
erwise.

The main elements that specify a tableau algorithm are [27]:
 An underlying data structure, called the completion graph.
 A set of expansion rules.
 A blocking condition, for ensuring termination.
 A set of clash-triggers,

logical contradictions

to detect

(clashes).

Completion graphs are finite, labeled, directed graphs, which
roughly correspond to abstractions of possible models for C
and . Depending on the DL under consideration, completion
graphs can be restricted to trees (for example, in SHIQ), forests
(in SHOQ and SHIO) or to directed acyclic graphs SHOIN
Each node and edge in a completion graph G is labeled with
a set of concepts and a set of roles, respectively. To decide the
satisfiability of C w.r.t. , the algorithm generates an initial
graph G, constructed from C and  and repeatedly applies the
expansion rules until a clash (i.e. a contradiction) is detected in
the label of a node, or until a clash-free graph is found to which
no more rules are applicable. The application of a rule may add

new concepts to the label of a node, trigger the generation of a
new node or cause two different nodes to merge.

Tableau algorithms for expressive DLs are non-deterministic
in the sense that there might exist completion rules that yield
more than one possible outcome. A tableau algorithm will return
satisfiable iff there exists at least one way to apply the nondeterministic rules such that a clash-free graph is obtained, to
which no rules are applicable.

Termination is guaranteed through blocking: halting the
expansion process when a cycle is detected [25]. When the
algorithm detects that a path in the graph will be expanded forever without encountering a contradiction, then the application
of the generating rules is blocked, so that no new nodes will
be added to that path. There are different kinds of blocking
conditions, depending on the presence of inverses and number
restrictions in the logic.

The basic strategy to extend a DL tableau algorithm with
E-Connections support is based on coloring the completion
graph.15 Nodes of different colors, or sorts, correspond to
different domains (ontologies).

The presence of someValuesFrom and minCardinality restrictions on a node label trigger the generation of a successor node
of a different color. The presence of different kinds of nodes
in a the graph has several consequences in the way the tableau
algorithm works:
 A node may only be blocked by an ancestor node with the
same color, and the blocking condition applied to those nodes
depends on the logic of the corresponding component ontolo-
gies. This implies, for example, that if a certain component
ontology does not contain inverse object properties, we can
apply subset blocking to its corresponding nodes in the tableau
expansion even if other component ontologies do contain
inverses.
 If a node x is a successor of a node y with a different color, then
a special blocking condition is applied to x. Such a blocking
condition only depends on the logic of the link properties,
and not on the logic of the component ontology to which
x corresponds. Intuitively, if inverses on link properties are
present, then equality blocking is applied; otherwise, subset
blocking suffices.
 In Description Logics, a TBox (the part of the ontology that
does not contain facts) can be made equivalent to a single
class. Such a concept is then added to the label of all the
nodes in the graph during the execution of the algorithm.
With E-Connections, each component ontology TBox is made
equivalent to a different class, and each of those classes is
added only to the labels of nodes corresponding to that component ontology.
 The presence of maxCardinality restrictions and nominals
(has-Value, oneOf) in node labels may cause the merge of
two nodes in the graph. Obviously, only nodes of the same
color can ever be merged.

15 Please, note that our problem has no relation with the graph coloring problem.
We just use the term color metaphorically to distinguish between different
kinds of nodes.

When implementing tableau algorithms for E-Connections
as an extension of an OWL reasoner, all these issues have to be
thoroughly considered.

6.4. Implementation in an OWL reasoner

We have implemented the tableau algorithms for the E-
IH(SHIN(D), SHON(D), SHIO(D))
HN(SHIN(D), SHON(D), SHIO(D)) in the OWL rea-

Connection languages CE
and CE
soner Pellet.

Pellet is a sound and complete tableau reasoner for the
Description Logics SHIN(D), SHON(D) and SHIO(D) (with
ABoxes). Pellet implements the usual suite of optimizations,
including lazy unfolding, absorption, dependency directed back-
jumping, and semantic branching. It provides support for handling conjunctive ABox queries and incorporates datatype reasoning for the built-in primitive XML Schema datatypes. Pellet
is implemented in pure Java and available as open source soft-
ware.

Pellet has been extended to process E-Connected ontologies
written in the RDF/XML syntax presented in the first part of this
paper. Reasoning support for E-Connections has been integrated
as a true extension of Pellet, since reasoning with a single knowledge base can be seen as a particular case of E-Connections
where no link properties are present. An E-Connected knowledge base has been implemented as a collection of TBoxes and
RBoxes, indexed by the ontology they correspond to. During
parsing, each class, object property, datatype property and link
property is added to its corresponding component, and after parsing each component of the KB is pre-processed separately.

When performing a satisfiability test, the nodes in the tableau
expansion are also labeled with the ontology they refer to. Links
are implemented as object properties of a special kind, since they
indicate the name of the foreign ontology they point to. When
the generating link rules are applied, the ontology label of the
new nodes is set to the foreign ontology of the link property
involved in the rule application. The distinction between different kinds of nodes also implies that the rules will only merge
nodes belonging to the same ontology, and the class names in
labels will be replaced by their definition in the corresponding
ontology.

Finally, blocking distinguishes between nodes which are generated as link successors and nodes created as successors of
common roles, since different conditions apply.

When a KB is represented using E-Connections, we can use
a set of optimization techniques that would not be applicable if
the KB had been represented monolithically using a single KB
in OWL. All these techniques take advantage of the partitioning
of the domains in order to reduce the computational cost:
 Detection of obvious non-subsumptioms: Detecting nonsubsumptions is hard for tableaux algorithms [28]. Typically,
when computing the classification hierarchy of a DL ontol-
ogy, many subsumption tests that are performed at each node
are very likely to fail. These unnecessary tests can be computationally costly and also very repetitive, and hence they
affect significantly the performance of a DL reasoner. This

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

problem is usually dealt with using caching, an optimization
technique that allows to prove non-subsumptions by using
cached results from previous satisfiability tests.
In an E-Connection, many non-subsumptions become obvi-
ous, since a subsumption test A B involving two classes A,
B belonging to different ontologies in the E-Connection will
necessarily fail. However, if these classes were contained in
a DL ontology, the satisfiability test could have been actually performed. Hence, the separation of ontologies using
E-Connections naturally enhances the effect of caching for
avoiding unnecessary subsumption tests.
 Separation of non-absorbable GCIs: When general inclusion
axioms are present in a knowledge base, a disjunction must
be added to the label of each node for each GCI. The resulting
increase of non-determinism in the tableau expansion dramatically affects the performance of the DL reasoner. In order to
overcome this problem, modern DL reasoners implement an
optimization technique called absorption [28], which allows
to transform many GCIs into primitive definition axioms.
However, although absorption typically allows to eliminate
most of the GCIs in a knowledge base, many general axioms
may still remain. Non-absorbable GCIs, even in a reduced
number, can notably degrade the performance of reasoners.
In an E-Connection, non-absorbable GCIs are typically also
spread among the different ontologies of the combination.
When performing the tableau expansion, a GCI only adds a
disjunction to the nodes corresponding to the ontology the
GCI belongs to, whereas, in the case of a single ontology, the
same GCI would add a disjunction in all the nodes during the
expansion.
 Separation of ABox individuals: Typical reasoning services
when ABoxes are present are instantiation (checking if an
individual is an instance of a concept), and retrieval (com-
puting all the instances of a certain concept). The presence
of a large ABoxes degrades significantly the performance of
DL reasoners. When using E-Connections, the ABox axioms
and individuals are partitioned among the different ontologies in the combination. This separation is important since it
may spare the application of a large number of rules in many
satisfiability tests.
 Optimization of blocking and better use of certain optimization techniques: Blocking ensures the correct termination of
tableau algorithms by limiting the tree expansion depth, which
otherwise would become infinite. However, when dealing
with logics like SHIQ, the blocking condition is quite sophisticated and blocking may occur late in the tableau expansion.
Having a more permissive blocking condition is important to
establish blocks at a shallower depth, and can substantially
increase performance. Although the restrictions can be made
less strict [29], the resulting blocking condition still remains
less efficient than subset or equality blocking, which unfortunately are not sound for logics like SHIQ. However, in
an E-Connection, blocking is optimized for each of the com-
ponents, which implies, for example, that subset blocking is
still applicable in a component without inverse properties,
even if such a component is connected to a SHIQ com-
ponent. On the other hand, certain optimization techniques

are not valid for certain logics. For example, caching the
satisfiability status of nodes within a tableau expansion cannot be performed in logics containing inverse roles. For the
same reason as in blocking, optimizations like caching could
still be applied to some of the component ontologies in the
combination.

Finally, when decomposing a SHOIN(D) ontology into an
E-Connection, the resulting E-Connection is likely to be written
in one of the combined languages we have presented, for which
we provide a tableau-based decision procedure. For example, let
us consider again the Wine Ontology. The ontology is written in
SHOIN(D), whereas its corresponding E-Connected version
is represented in the language CE
HN(SIO(D)), since the logic
underlying the component ontologies is ALR+IO for regions,
AL(D) for years and wineries, ALCO for wine descriptors,
ALO for grapes and ALC for wines. Such a language is a fragment of CE
HN(SHIN(D), SHON(D), SHIO(D)), that we can
handle algorithmically.

Note that the expressivity of the original ontology is split
among the different component ontologies and the link proper-
ties. This fact can be exploited for optimizations.

7. Related work

The most prominent formalism that has been proposed so far
for combining and linking OWL ontologies is the Distributed
Description Logics (DDL) [30] framework, which resulted in
an extension of Web Ontology Language, called C-OWL [31].
Distributed Description Logics is a formalism for combining
different DL knowledge bases in a loosely coupled information
system. The idea of the combination is to preserve the identity and independence of each local ontology. The coupling
is established by allowing a new set of inter-ontology axioms,
called bridge rules. A bridge rule is an expression of one of the
following forms16:

where, Ci, Cj are classes and ai, bj individuals in the ontolo-

gies Oi, Oj, respectively.

From the modeling point of view, bridge rules have been
conceived for establishing directional (view dependent) subsumption relationships between classes and correspondences
between individuals in different ontologies. The motivation for
bridge rules, hence, covers a wide variety of intuitive modeling scenarios on the Semantic Web. For example, suppose that
in ontology O1 we have a class Beer defined as a subclass
of GermanProduct and which does not exist in ontology O2.
However, in ontology O2 there is a class Drink, but there is no
class modeling the concept of Beer. Both ontologies could be
linked by using a bridge rule stating that Beer in ontology O1
is a subclass of Drink in O2.

16 We will consider bridge rules without complete individual correspondences
along the paper.

Fig. 3. (a) Single ontology where concept Penguin is unsatisfiable. (b) Same definition with bridge rules where contradiction cannot be detected anymore.

These kind of modeling scenarios are appealing, because they
nicely fit in the vision of the Semantic Web in which the notion
of a universal upper ontology is abandoned by the notion of a
web of distributed, linked and independently developed ontolo-
gies. Researchers in the Semantic Web community are starting
to realize the importance of extending OWL with a suitable formalism that provides inter-ontology mappings with a precise
logical semantics. A first attempt in this direction resulted in C-
OWL [31], a syntax and semantic extension of OWL that adds
the DDL formalism to the language.

However, C-OWL, as presented in [31] has some difficulties.
First, no reasoning support is provided for the language. Extending the existing tableau rea-soners to deal with such an extension
is certainly a crucial issue. Second, some expressive features
that are beyond DDLs (and also beyond E-Connections), like
the inclusion of inter-ontology role subsumption statements, are
included in the language without the required discussion. This
kind of expressive power could even make the reasoning unde-
cidable.

Third, and most importantly, C-OWL fails to model certain
crucial properties of subsumption relations. For example, consider the ontology Fig. 3a. The ontology O defines two disjoint
concepts Flying and NonFlying, the concept Bird and the concept Penguin. The axioms in O state that all birds fly and also
that a penguin is a bird, but it does not fly. In this case, in which
all the axioms are gathered in a single logical space, the concept
Penguin would be clearly unsatisfiable.17

Now, imagine that we split the knowledge about the domain
in two coupled ontologies, shown in Fig. 3b. The ontology A
states that the concepts Flying and NonFlying are disjoint and
states that all birds fly. On the other hand, the ontology B defines
the concept Penguin and states, using DDL subsumption links,
that a penguin does not fly and that a penguin is a bird. However,
it is easy to see by direct application of the semantics that in this
case the obvious (and relevant) contradiction is not detected, and
Penguin is satisfiable in the coupled system.

The problem is that bridge rules can be reduced to simple
axioms in an E-Connection with a single link property, which
is hidden in the syntax of bridge rules. A bridge rule always
involves a restriction on that implicit link property. Intuitively,

17 A Class is unsatisfiable in an ontology if it is evaluated to the empty set by
every model of the ontology.

there is nothing contradictory in these bridge rules in the same
way that there is no contradiction between two axioms like
Father hasChild.Male and FatherhasChild.Male in an
ordinary ontology.

This result, together with the fact that inter-ontology subsumption relations do not propagate transitively, shows that
DDLs can be misleading and counterintuitive, and do not seem
to capture the notion of subsumption links across a Web of
ontologies. The example suggests that a formalism for dealing
with inter-ontology subsumption relationships is still lacking.
E-Connections, though suitable for covering a wide variety of
relevant modeling scenarios in the Semantic Web context, do not
capture the idea of linking ontologies with subsumption relation-
ships, but, as opposed to DDLs, were not conceived for such a
purpose.

Finally, it is also worth mentioning CYC microtheories [32].
CYC is partitioned into sets of axioms, called contexts or
microtheories, so that each CYC entity must be contained in
at least one of them. Whenever CYC is asked a question, or
has to do some reasoning, the task is always performed in
some particular context. CYC microtheories are very similar
to imports in OWL in that a given microtheory can be used
by other microtheories, in which case all the axioms in the
used (say, imported) microtheory are brought into the importing context. If there is an axiom somewhere in CYC that is not
in that Microtheory, then CYC will not use that axiom: it is
inaccessible.

8. Conclusion and future work

In this paper, we have presented E-Connections as a suitable
formalism for combining OWL ontologies. We have discussed
the applicability and usefulness of E-Connections as a combination technique for many application scenarios.

In order to integrate E-Connections in the Semantic Web,
we have extended the syntax and semantics of the OWL-DL
recommendation and we have discussed the issues of handling
URIs and imports in this new framework.

We have provided suitable tool support for browsing and edit-

ing E-Connected ontologies in SWOOP.

We have shown how to reason with certain families of E-
Connections and proved that it is possible to implement our
tableau algorithms for E-Connections as an extension of existing
DL reasoners, as shown by our implementation in the Pellet

B. Cuenca Grau et al. / Web Semantics: Science, Services and Agents on the World Wide Web 4 (2006) 4059

system. Our initial empirical results suggest that reasoning over
expressive E-Connections is reasonably efficient and, in practice,
it is not harder than reasoning with OWL itself.

Finally, we have also identified the limitations of E-
Connections as a combination technique, in particular for tasks,
such as ontology refinement, that involve connecting ontologies
dealing with highly overlapping domains.

The results presented in this paper raise a number of issues
for future work. First, our implementation and initial results
show that E-Connections suggest new optimization techniques.
The empirical evaluation of these optimizations as well as the
development and implementation of new ones is a priority in our
future research agenda.

Second, we are investigating the applications of E-
Connections for partitioning automatically OWL ontologies into
its relevant sub-parts. The theoretical and empirical results [33]
we have obtained so far are very encouraging.

Third, we aim to explore the design and implementation
of practical algorithms for combinations of Description Logics with spatial and temporal logics that are within the ADS
framework. These combinations are important for many appli-
cations, since OWL is not a suitable formalism for representing
temporal and spatial information. For instance, in the Wine
Ontology example, the ontology about regions could be represented using a qualitative spatial logic, like S4u, instead of using
OWL. In [8] the decidability of such combinations was proved
and the development of practical algorithms will provide a
strong motivation for bringing these formalisms to the Semantic
Web.

Finally, although rules formalisms are beyond the ADS
framework, we strongly believe that a generalization of many
(decidable) rules languages is possible and that there will be
decidable combinations of such a generalization with ADSs in
the spirit of E-Connections. Such a result would open new horizons in the integration of ontologies and rules on the Semantic
Web.
