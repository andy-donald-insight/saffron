Changing Ontology Breaks Queries

Yaozhong Liang, Harith Alani, and Nigel Shadbolt

Intelligence, Agents and Multimedia Group
School of Electronics and Computer Science

University of Southampton

Highfield, Southampton
England, United Kingdom
yl504r@ecs.soton.ac.uk

ha@ecs.soton.ac.uk
nrs@ecs.soton.ac.uk

Abstract. Updating an ontology that is in use may result in inconsistencies between the ontology and the knowledge base, dependent ontologies and applications/services. Current research concentrates on the
creation of ontologies and how to manage ontology changes in terms of
mapping ontology versions and keeping consistent with the instances.
Very little work investigated controlling the impact on dependent appli-
cations/services; which is the aim of the system presented in this paper.
The approach we propose is to make use of ontology change logs to
analyse incoming RDQL queries and amend them as necessary. Revised
queries can then be used to query the ontology and knowledge base as
requested by the applications and services. We describe our prototype
system and discuss related problems and future directions.

General Terms. Ontology Management.

Keywords. Ontology Change Management, Ontology Versioning, Knowledge Management, Semantic Web.

1 Introduction and Related Work

Ontologies are quickly becoming indispensable parts of the Semantic Web. The
number of ontologies that are being developed and used by various applications
is continuously increasing. One of the major problems with ontologies is change.
Ontology changes may cause serious problems to its data instantiations (the
knowledge base), the applications and services that might be dependent on the
ontology, as well as any ontologies that import that changed ontology [3].

Most work so far has focused on ways to handle ontology change, such as
change characterisation [3], ontology evolution [4], ontology versioning [2], and
consistency maintenance [5, 6, 7]. However, not much has been done with respect
to using change-tracks to eliminate or reduce any impact that ontology change
can have on any dependent applications and services. It would be very costly
and perhaps even unrealistic to expect all parties that could be affected by

I. Cruz et al. (Eds.): ISWC 2006, LNCS 4273, pp. 982985, 2006.
c Springer-Verlag Berlin Heidelberg 2006
?

?

?
a change to coordinate any such changes [1]. Therefore, we believe that it would
be very beneficial to have a system that could track such changes, relate changes
to incoming queries, amend such queries accordingly, and inform the query source
of those changes and actions taken.

In this paper we describe a prototype system that targets these problems. The
system uses a semantic log of ontology change to amend RDQL queries sent to
the ontology as necessary. Such a system could save many hours of application
re-development by not only updating queries automatically and maintaining the
flow of knowledge to the applications as much as possible, but also to inform the
developers of such changes in the ontology that relates to their queries.

2 System Description

The solution shown in Figure 1 to tackle the identified problems is described as
a series of steps as follows:

Fig. 1. An overview of the Approach

1. Capture: The changes made between two versions of the same ontology
is captured at this stage. Currently, we identify changes by comparing two
versions using PromptDiff in Prot eg e [4].

2. Instantiate: The Log Ontology is populated with cha- nge information iden-

tified in step 1.

3. Analyse: Queries submitted by the applications are analysed to find out
whether any of the entities within the queries could be affected by the
changes stored in the Log Ontology.

4. Update: If entities within the queries are found to have been changed,
they are replaced with their changes to form the new queries with updated
entities, and then resubmitted to the queried ontology.

Y. Liang, H. Alani, and N. Shadbolt

Fig. 2. The working process of the Middle Layer System

5. Respond: After the new-formed queries are submitted to the ontology for
processing, the results are returned back to the application. At the same
time, a summary of change/update information will also be returned back
to the end-users with the query results so as to inform users of the updates.

Analyse, Update and Respond are implemented in the Middle Layer System

in Figure 1. Its working process is presented in Figure 2.

3 Conclusions and Future Work

We proposed an approach for handling ontology changes by means of using
change-tracks to eliminate or reduce any impact that ontology change can have
on the application queries. We developed a prototype system that analyses the
incoming queries, amends the entities within the queries according to the change
information stored in the Log Ontology built to store and manage change information between ontology versions, and informs the end-user of any changes and
actions taken. We showed that with the extra support of the middle layer, some
of the queries that are targeting parts of the ontology that have changed can be
updated and processed properly.

In our next stage work, Enabling Log Ontology to capture a series of changes
between multiple versions of the same ontology would be a necessity to assist our
system to cope with more complex changes. In addition, (semi-)automatic collecting ontology change information between ontology versions would make our system
usable in a large scale. Providing the mechanism to inform the end-user of the correlated changes appropriately besides those directly related to the entities explicitly
mentioned in the query, and the ability to decide the order of changes happened
on the ontology are our next stage work. This would enhance the system to handle
more complex changes as well as help us understand deeply the ontology change.
?

?

?
Acknowledgments

This work has been supported under the Advanced Knowledge Technologies
Interdisciplinary Research Collaboration (AKT IRC), which is sponsored by the
UK Engineering and Physical Science Research Council under grant number
GR/N15764/01. Special thanks for the excellent technical supports from my
colleague David Dupplaw (dpd@ecs.soton.ac.uk).
