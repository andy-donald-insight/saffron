On the Semantics of Linking and Importing in

Modular Ontologies

Jie Bao1, Doina Caragea2, and Vasant G Honavar1

1 Artificial Intelligence Research Laboratory,

Iowa State University, Ames, IA 50011-1040, USA

Department of Computer Science,
{baojie, honavar}@cs.iastate.edu

2 Department of Computing and Information Sciences
Kansas State University, Manhattan, KS 66506, USA

dcaragea@ksu.edu

Abstract. Modular ontology languages, such as Distributed Description Logics (DDL), E-connections and Package-based Description Logics
(P-DL) offer two broad classes of approaches to connect multiple ontology modules: the use of mappings or linkings between ontology modules
e.g., DDL and E-connections; and the use of importing e.g., P-DL. The
major difference between the two approaches is on the usage of for-
eign terms at the syntactic level, and on the local model disjointness
at the semantic level. We compare the semantics of linking in DDL and
E-connections, and importing in P-DL within the Distributed First Order Logics (DFOL) framework. Our investigation shows that the domain
disjointness assumption adopted by the linking approach leads to several
semantic difficulties. We explore the possibility of avoiding some of these
difficulties using the importing approach to linking ontology modules.

1 Introduction

Because the web is a network of loosely coupled, distributed, autonomous en-
tities, it is inevitable that the ontologies on the web to be modular, collaboratively built and partially connected. Hence, there is significant interest on
modular ontology languages, such as, Distributed Description Logics (DDL) [4],
E-connections [12,9] and Package-based Description Logics (P-DL) [3].

These proposals adopt two broad classes of approaches to asserting semantic
relations between multiple ontology modules: the use of mappings or linkings
between ontology modules e.g., DDL and E-connections; and the use of importing e.g., P-DL. The major difference between the two approaches has to do with
the use of foreign terms in ontology modules. In a linked ontology, different
modules have disjoint terminologies and disjoint interpretation domains, and semantic relations between ontology modules are only enabled by a set of mapping
axioms, such as bridge rules in DDL or E-connections. Therefore, the direct usage of terms defined in one module is forbidden in another module. In contrast,
importing allows an ontology module to make direct reference to terms defined
in other ontology modules, i.e., importing of foreign terms.

I. Cruz et al. (Eds.): ISWC 2006, LNCS 4273, pp. 7286, 2006.
c Springer-Verlag Berlin Heidelberg 2006
?

?

?
Serafini et.al. (2005) [15] compare mapping or linking based approaches to
the integration of multiple ontology modules such as DDL and E-connections
by reducing them to the Distributed First Order Logics (DFOL) [6] framework.
However, there is little work on the formal investigation of the importing approach to integrating ontology modules. Against this background, we compare
the semantics of the two approaches within the DFOL framework, with the study
of their strengthes and limitations. Such an investigation reveals that the importing approach, with the removing of the module disjointness assumption adopted
by the linking approach, can provide stronger expressivity and avoid many of
the semantic difficulties in current modular ontology language proposals.

2 Desiderata for Modular Ontology Languages

We first list a set of minimal requirements for modular ontology languages [2]
on the semantic web as the basis for our comparison of the semantics of DDL,
E-connections and P-DL within the DFOL framework:

1. Localized Semantics. A modular ontology should not only be syntactically
modular (e.g. stored in separated XML name spaces), but also semantically
modular. That is, the existence of a global model should not be a requirement
for integration of ontology modules.

2. Exact Reasoning. The answer to a reasoning problem over a collection
of ontology modules should be semantically equivalent to that obtained by
reasoning over an ontology resulting from an integration of the relevant ontology modules. Thus, if an ontology O contains A  B, B  C, C  D, and
a modularized version of O has two modules M1 = {A  B}, M2 = {C  D}
and a semantic connection r(B, C), which represents the modularized version of B  C, the answer to any reasoning problem obtained by integration
of M1, M2 and r(B, C) should be the same as that obtained by using a sound
and complete reasoner on O.

3. Directed Semantic Relations. The framework must support directional
semantic relations from a source module to a target module. A directional
semantic relation affects only the reasoning within the target module and
not the source module.

4. Transitive Reusability. Knowledge contained in ontology modules should
be directly or indirectly reusable. That is, if a module A reuses module B,
and module B reuses module C, then effectively, module A reuses module
C.

Other desiderata that have been considered in the literature include: the ability to cope with local inconsistency or global inconsistency, and local logic com-
pleteness. We believe that the desiderata listed above are among the most critical
ones for a modular ontology to be semantically sound and practically usable.

J. Bao, D. Caragea, and V.G. Honavar

3 Distributed First Order Logics

A DFOL knowledge base (KB) [6] (and hence, a DFOL ontology) includes a
family of first order languages {Li}iI, defined over a finite set of indices I. We
will use Li to refer to the ith module of the ontology . An (i-)variable x or
(i-)formula  occurring in module Li is denoted as i : x or i :  (we drop the
prefix when there is no confusion).

The semantics of DFOL includes a set of local models and domain relations.
For each Li, there is an interpretation domain i. Let Mi be the set of all
first order models of Li on i. We call each m  Mi a local model of Li. A
domain relation rij, where i = j, is a subset of i  j. The domain relation
rij represents the capability of the module j to map the objects of i in j, or,
the js subjective view of the relation between i and j. In general, rij = r

ji.
 in rij to denote that from the point of view of j, the object d in
 is called
, and d
i is mapped to the object d
an image of d. In general, domain relations can be injective, surjective, bijective,
or arbitrary. For an object d  i, rij(d) denotes the set {d
  rij}.
  j|d, d
For a subset D  i, rij(D) denotes dDrij(d), is the image set of D.

 in j; d is called a pre-image of d

We use d, d

4 Semantics of Linking in DDL

One influential family of modular ontology formalisms is the linking approach.
The linking approach is aimed at preserving the autonomy of loosely coupled
modules, while allowing restricted mappings between formulae of linked mod-
ules. Formally, a linking approach holds the follow assumptions:
 For any Li and Lj, i = j, i-terms and j-terms are disjoint.
 The semantic connection between Li and Lj is enabled only by mapping
rules between i-terms and j-terms, which are interpreted as domain relations
rij  i  j.
 Local interpretation domains and domain relations are disjoint. For any i =
j, i  i (or j  j) has intersection neither with rij nor with rji.
Based on DFOL, Distributed Description Logics (DDL) [4] is one of the first
linking-based modular ontology formalisms. In DDL, the semantic mappings
between disjoint modules Li and Lj are established by a set of inter-module
axioms called Bridge Rules(Bij) of the form:

 INTO rule: i : 
 ONTO rule: i : 

 j : , semantics: rij(mi)  mj
 j : , semantics: rij(mi)  mj

where mi(mj) is a model of Li(Lj), ,  are formulae, rij is a domain relation
which serves as the interpretation of Bij. Note that Bij is directional. We will
only consider bridge rules between concepts, not roles [5], since there is still no
reasoning support for role bridge rules [14].
?

?

?
Distributed concept correspondence between two modules in DDL covers some
important scenarios that require mapping between ontology modules. However,
the expressivity of DDL is limited in some settings that arise in practical ap-
plications: For example, DDL cannot be used to express a person x works in
a region y. In general, it can not construct new concepts using terms across
modules, such as restrictions 1 : R.2 : D and 1 : R.2 : D, where C, D are
concepts and R is role.

In addition to the expressivity limitations, DDL may present semantic difficulties in some situations. While DDL bridge rules are intended to simulate concept
inclusions [4,5], arbitrary modelling with bridge rules may lead to undesired
semantics, such as in the Subsumption Propagation problem and Inter-module
Unsatisfiability problem, as noted in [9,7]:
Example 1 (Subsumption Propagation). AKBd includesmodulesL{1,2,3},
 2 : F owl}, B23 = {2 :
each with an empty TBox; bridge rules B12 = {1 : Bird
 3 : Chicken cannot

 3 : Chicken}. The entailment problem 1 : Bird

 2 : C and 1 : B

 2 : B and 2 : B  2 : C, it can be inferred that 1 : A

F owl
be answered since bridge rules B13 are not given, nor can be inferred.
Note that bridge rules may be inferred between the same pair of modules. For
 2 :
example, if 1 : A
C. Intra-module subsumption may also be reused in some particular cases. For
 2 : D, it can be inferred
example, if 1 : A  1 : B, 1 : A
that 2 : C  2 : D [16]. However, Example 1 shows that in general bridge rules in
DDLs are not transitively reusable, thereby are restricted for many application
scenarios.
Example 2 (Inter-module Unsatisfiability[9,7]). DDLs may not detect unsatisfiability across ontology modules. A KB d includes modules L{1,2}, L1 =
 2 :
{1 : Bird  1 : F ly}, L2 = {2 : P enguin  }, B12 = {1 : Bird
 2 : P enguin}. P enguin is still satisfiable in d.
P enguin, 1 : F ly
Such difficulties are rooted in the implicit local domain disjointness assumption
of DDL: individuals in each local domain are private to that domain, and DDL
semantics does not take into account if individuals in different local domains may
represent the same physical world object. Therefore, a bridge rule, while intended
to simulate concept inclusion, cannot be read directly as concept inclusion, such
as i : A  j : B. Instead, it must be read as a classic DL axiom in the following
way [4]:

 i : A
 i : A

 j : B  (i : A)  Rij.(j : B)
 j : B  (j : B)  R

ij .(i : A)

where Rij is a new role representing correspondences Bij between Li and Lj.
Such translations are best understood as shown in Figure 1.
tailment Chicken  R
fiability problem, concept P enguin ( R

Therefore, for the given subsumption propagation example, if B13 = , en-

13.Bird is not always true. For the inter-module unsatis-
12.(F ly)) is satisfiable.


12.(F ly)  R


J. Bao, D. Caragea, and V.G. Honavar

Fig. 1. Semantics of DDL Bridge Rules

Thus, the semantics of DDL are designed to simulate concept inclusion with
a special type of roles, i.e., bridge rules. However, in the absence of a principled
approach to avoid arbitrary domain relation interpretations for bridge rules, all
semantic relations (bridge rules) between DDL modules are localized to pairs of
modules that are bridged by the rules in question. Consequently, semantic relations between a pair of DDL modules cannot be safely reused by other modules,
thereby precluding general subsumption propagation, and more generally, module transitive reusability. Note further that in order to enable distributed (not
necessarily exact) reasoning in general, a DDL KB needs explicit declaration of
domain relations between each pair of modules, leading to an exponential blowup
in the number of bridge rules, with the attendant inefficiency and increased risk
of inconsistencies.

Serafini et al. [14] has asserted that the inter-module unsatisfiability difficulty is the result of incomplete modelling. They have argued that it can be
 2 : P enguin and
eliminated if extra information, for example, 1 : Bird
 2 : P enguin, is added to guarantee one-to-one domain relations.
1 : F ly
Our investigation reveals a more general result: one-to-one domain relations can
guarantee that reasoning over DDL always yields the same result as that obtained from an integrated ontology when bridge rules are replaced with general
concept inclusions (GCI). First, we have the definition:

 D or C

 D, for any x  C

Definition 1. A domain relation rij for bridge rules Bij is said to be one-to-
Ii, there is one and
one if for any bridge rule C
only one unique y  j such that x, y  rij.
The integration process from a DDL ontology to a ordinary (global) DL ontology
is given in [4]. For a DDL ontology {Li}, the global DL (GDL) ontology is defined
as follows:
 There is a new top concept g and a new bottom concept g in GDL.
 The primitive concepts of GDL consist of i : A obtained from primitive
concepts or constant concepts A (such as i and i) of Li
 The primitive roles of GDL include i : p obtained from primitive or constant

roles p of Li

The mapping #() from concepts/roles in Li to concepts/roles in GDL is defined
as follows: for atomic concepts, roles, and individuals i : M, #(i : M) = i : M;
?

?

?
for a complex concept constructor  with k arguments, #(i : (X1, ..., Xk)) =
i  (#(X1), ..., #(Xk)). For example, #i : (p.C) = i  (i : p).(i  i : C).
Applying #() to a DDL knowledge base  = {Li},{Bij}, we get an inte-

 j : D  Bij
 j : D  Bij

grated GDL [4] #() that contains:
 #(i : A)  #(i : B) for all i : A  B  Li
 i  g
 #(i : A)  i for each atomic concept A of Li
 Axioms that ensure the domain and range of any i-role to be i: i  (i :
s).i, i  (i : s).g
However, in contrast to the approach taken in [4], we will translate bridge
rules in DDL as GCIs in GDL. Hence, #() will include in addition to the
above:
 #(i : C)  #(j : D) for all i : C
 #(i : C)  #(j : D) for all i : C
Since the motivation of DDL bridge rules is to simulate concept subsumption
as mentioned in DDL proposals [4,5,14], we believe that GCIs offer a more appropriate translation for bridge rules in comparing the result of reasoning in the
distributed setting with that of the centralized setting. Note that the semantic
difficulties of DDL under incomplete modelling is actually due to the semantic differences between concept subsumptions (i.e., GCIs) and bridge rules (as
shown in the Examples 1 and 2). The following theorem reveals that the domain
relations being one-to-one is a sufficient condition for exact reasoning in DDL
if bridge rules are intended to represent inter-module concept inclusions (proof
can be found in the longer version of the paper 1).
Theorem 1. Suppose  = {Li},{Bij} is a DDL KB, where none of Li uses
role constants or role constructors, and all domain relations in all models of 
are one-to-one, then
 #()  #(i : X)  #(i : Y ) if and only if  d i : X  i : Y
 #()  #(i : X)  #(j : Y ) if and only if  d (i : X

 j : Y or

(j : Y

 i : X)

 D for each C

At present, there is no principled approach in DDL to specify such domain
 D, as suggested in [14], does not
relations. Adding C
necessarily result in injective (and hence, also not one-to-one) domain relations
for any inter-module concept relations.
Example 3. A KB d includes modules L{1,2}, TBox of L1 is {W oman 

M an}, TBox of L2 is {Girl  Boy}; bridge rules B12 = {1 : M an
 2 : Boy i.e.
2 : Boy}. According to [14], we should also add 1 : M an
1 http://archives.cs.iastate.edu/documents/disk0/00/00/04/08/index.html

J. Bao, D. Caragea, and V.G. Honavar

 2 : Girl to B12. However, that doesnt rule out the possibility of
1 : W oman
a Girl object being both an image of a M an object and a W oman object, neither
ensure one-to-one correspondence between M an objects and Boy objects.
Example 4. (adopted from [17]) Module L1 entails   1 : Car, module L2

entails U sef ulT hing  U selessT hing, and there are bridge rules 1 : Car
 2 : U selessT hing. There is no required new
2 : U sef ulT hing and 1 : Car
bridge rules to be added according to [14]. However, 1 : Car is not unsatisfiable,
since DDL semantics allows empty domain relations.

DDL, as presented in [4], meets the localized semantics and directional semantic
relations requirements, but not the exact reasoning and transitive reusability
requirements. In general, DDL in its present form does not provide a satisfactory
formalism for inter-module or inter-ontology subsumption. In the following text,
we will show it can be improved by restricting domain relations to be one-to-one,
by P-DL or a combination of DDL and E-connections.
5 Semantics of Linking in E-Connections
While DDL allows only one type of domain relations, E-connections allow multiple link relations between two domains, such as worksIn and bornIn between
2 : P erson and 1 : Region. E-connections between ADSs [12], and in particular,
between DLs [11,9], restrict the local domains of the E-connected ontology modules to be disjoint. Roles are divided into disjoint sets of local roles (connecting
concepts in one module) and links (connecting inter-module concepts).
Formally, given ontology modules {Li}, an (one-way binary) link (more expressive E-connections are beyond the scope of this paper) E  Eij, where
Eij, i = j is the set of all links from the module i to the module j, can be
used to construct a concept in module i, with the syntax and semantics specified
as follows:
 E(j : C) or E.(j : C) : {x  i|y  j, (x, y)  EM , y  CM}
 E.(j : C) : {x  i|y  j, (x, y)  EM  y  CM}}
where M = {mi},{EM}EEij
 is a model of the E-connected ontology, mi is
the local model of Li; C is a concept in Lj, with interpretation CM = Cmj ;
EM  i  j is the interpretation of an E-connection E. E-connections also
permit number restrictions on links [12].
An E-connection model M can be mapped to a DFOL model Md={mi},{rij}
with each EM (E  Eij) acting as a domain relation rij [15]. Extending the semantics of E-connection axioms ((1) and (3) below) given in [15] so as to allow
the use of constructed concepts (E.D and E.D) on either side of the sub-
sumption, we have (also see Figure 2):
1) C  E.D : EM(Cmi)  Dmj
2) C  E.D : (C)mi  (EM )((D)mj ), i.e., x  i, EM (x)  Dmj 

x  Cmi
?

?

?
r is the interpretation of link E, also acting as the domain relation between the two
local domain.

Fig. 2. Semantics of E-Connections

  E.D and C

3) C  E.D : Cmi  (EM )(Dmj )
4) C  E.D : EM((C)mi)  (D)mj , i.e., Cmi  (EM )(Dmj )
where (EM ) is the inverse of EM , C is an i-concept and D is a j-concept, C
can be an atomic or complex concept. Note that case (2)(similarly also for (4))
  C in i, since  is the short
can not be reduce to defining C
for  and .
It has been argued that E-connections are more expressive than DDL [12,7]
because DDL can be reduced to E-connections. However, the reliance of the
 D to
reduction on the equivalence of C
E.C  D [12,7], presents semantic difficulties with regard to DDL and E-
) rules in DDL is
connections semantics in the DFOL framework [15]: ONTO(
actually mapped to type d interpretation constraints in DFOL while E.C  D
is mapped to type b interpretation constraints in DFOL.
We show that inverse links being allowed is a necessary condition for E-

 D to E.C  D and C

connections to be more expressive than DDL bridge rules:
Theorem 2. E-connections, as presented in [12,7] is strictly more expressive
than DDL as presented in [4], only if inverse links are allowed.
Proof Sketch: Comparison of the semantics of DDL and E-connections, if we
treat the only domain relation in DDL as a E-connection E, as shown in [15,4],
 D (rij(Cmi)  Dmj ).
C  E.D has the same semantics as the into rule C
 D (rij(Cmi)  Dmj ), can be translated into
However, onto rules, such as C
D  E

Thus, the language CE
HI(SHIQ,SHOQ,SHIO) is more expressive than DDL
but CE

HQ(SHIQ,SHOQ,SHIO) (allowing no inverse link) [7] is not.

.C only if the inversion of E-connections is allowed.



J. Bao, D. Caragea, and V.G. Honavar

Note that for i : C

ji, therefore F = E


 j : D, defining an E-connection F from j to i, the
onto rule still cannot be translated into D  F.C, since DDL semantics doesnt
. To assert the inverse relation, we still need
assume rij = r
inverse link constructors in E-connections.
E-connections allow multiple links between modules and the construction of
new concepts e.g. W orkF orce  worksInRegion, while DDL does not. Module transitive useability can be realized in a limited form by transitive links [13].
E-connections are also directional. Reasoning in E-connections without generalized links is exact w.r.t a combined TBox of the E-connected ontology, since
a concept is satisfiable in the E-connected ontology if and only if there is a
combined model for the combined TBox and the concept [9,8].
However, the applicability of E-connections in practice is also limited by the

need to ensure that the local domains are disjoint:

 To enforce local domain disjointness, a concept cannot be declared as subclass of another concept in a foreign module thereby ruling out the possibility
of asserting inter-module subsumption and the general support for transitive useability; a property cannot be declared as sub-relation of a foreign
property; neither foreign classes nor foreign properties can be instantiated;
cross-module concept conjunction or disjunction are also illegal.
 E-connected ontologies have difficulties to be used with OWL importing
mechanism, since importing may actually decouple the combination and
result in inconsistency [7].

6 Semantics of Importing  P-DL
Our investigation of the semantics of DDL and E-connections suggests that many
of the semantic difficulties of linking approaches might be the result of a fundamental assumption that the local language and local models are disjoint. Thus,
it is interesting to consider formalisms that relax this assumption.

OWL does not make such module disjointness assumption. Instead, it adopts
an importing mechanism to support integration of ontology modules. However,
the importing mechanism in OWL, in its current form, suffers from several serious drawbacks: (a) It directly introduces both terms and axioms of the imported
ontologies into the importing ontology, and thus fails to support local semantics
(b) It provides no support for partial reuse of an ontology module.
Package-based Description Logics (P-DL)[3] offer a tradeoff between the
strong module disjointness assumption of DDL and E-connections, and the OWL
importing mechanics, which forces complete overlapping of modules.

6.1 Syntax and Semantics of P-DL

In P-DL, an ontology is composed of a collection of modules called packages.
Each term (name of a concept, a property or an individual) and each axiom
is associated with a home package. A package can use terms defined in other
packages i.e., foreign terms. If a package Lj uses a term i : t with home package
?

?

?
Li (i = j), then we say t is imported into Lj, and the importing relation is
denoted as rt
ij. Li may contain the usual TBox and ABox of DL. For simplicity,
we do not present advanced features of P-DL, such as package hierarchy and
scope limitation modifiers [3].
We denote the package extension to DL as P. For example, ALCP is the
package-based version of DL ALC. In what follows, we will examine a restricted
type of package extension which only allows import of concept names, denoted
as PC. We will show that even this restricted form of package extension is not
trivial and is more expressive than DDL and E-connection.
ontology {Li},{rt
mi is the local model of module i, (rt
importing relation rt

The semantics of P-DL is expressed in DFOL as follows: For a package-based
ij)M}i=j, where
ij)M  i  j is the interpretation for the

}i=j, a distributed model is M = {mi},{(rt

ij, which meets the following requirements:

ij

 Every importing relation is one-to-one, and for every object in tmj there is

a single unique object in tmi as its pre-image (therefore rij(tmi) = tmj ).

 Term Consistency: importing relations are consistent for different terms.
Each object in the model of a source package corresponds uniquely to an
object in the model of any target package for interpretations of importing
relations of all terms, i.e., for any i : t1 = i : t2 and any x, x1, x2  i,
(rt1
ij )M (x) = (rt2

ij )M (x2) =   x1 = x2.

ij )M (x) and (rt1

ij )M (x1) = (rt2

ik )M (x) = y1, (ri:t2

 Compositional Consistency: if (ri:t1

jk )M
(y2) = y3, , (where t1 and t2 may or may not be same), and y1, y2, y3 are
not null, then y1 = y3. Compositional consistency helps ensure that the
transitive reusability property holds for P-DL.
The domain relation between mi and mj is rij = t(rt

ij )M (x) = y2, (rj:t3

ij)M .

Lemma 1. Domain relations in a P-DL model are one-to-one.

Lemma 1 states that a domain relation rij in a P-DL model isomorphically
maps, or copies, the relevant partial domain from mi to mj. For any concept
i : C, rij(Cmi), if not empty, contains the copy of a subset of objects in Cmi.
Such domain relations allow us to relax the domain disjointness assumption
adopted in DDL and E-connections, since the construction of a local model is
partially dependent on the structure of local models of imported modules, with
the benefits of preserving exact semantics of terms shared by different modules.

Immediately from the one-to-one domain relation property, we have:

Lemma 2. In a P-DL model m, for any domain relation rij and concept i : C,
we have rij(Cmi)  rij((C)mi) = .
If a term is indirectly used in a non-home package, compositional consistency
property of domain relations makes the domain relation inferrable. For exam-
ple, if some terms defined in L1 are imported into L2, and some terms in L2
are imported into L3, then the importing relation r13 can be inferred from the
composition r12  r23.
?

?

?
Lemma 3. For domain relations in a model of P-DL, rik = rijrjk, i = j, j = k.
In the following text, rij refers to either an explicitly given domain relation or
an inferred domain relation, or their union, between package i and j.
If i : C is imported into j, we define inter-module subsumption i : C P j : D
as rij(Cmi) = Cmj  Dmj and i : C P j : D as rij(Cmi) = Cmj  Dmj (see
Figure 3). Note that inter-module subsumption is substantially different from
bridge rules in DDL. DDL bridge rules bridge semantic gaps between different
concepts, and there is no principled way to ensure subjective domain relations
to be semantically consistent (in the sense of one-to-one mappings and compositional consistency). In contrast, P-DL importing mechanism bridges the semantic
gaps between multiple references of the same concept in different modules. Importing of C from i to j cannot be reduced to a DDL equivalency bridge rule
mj are
, since in DDL rij(Cmi) = C

interpretations for the same concept.

mj does not guarantee Cmi and C

 C

We show below that such a relaxation of module disjointness does not sacrifice
localized semantics and can help us to solve many semantic difficulties presented
in other approaches and provide stronger expressivity.

6.2 Features of P-DL Semantics

Fig. 3. Semantics of P-DL

The loss of local model disjointness in
P-DL does not sacrifice localized semantics property of modules, since the local
models (unlike in OWL which requires
completely overlapping of local models)
are, only partially overlapping. The semantics of the part of a module that is
not exported to any other module remains
local to that module. Consequently, there
is no required global model. The example
below demonstrates that P-DL also satisfies directional semantic relation and
module transitive reusability properties.
Example 5. Consider four modules L{1,2,3,4} as shown in Figure 4.
1. Transitivity of inter-module subsumption holds: r14(Am1) = r24(r12(Am1)) 
r24(r12(Bm1)) = r24(Bm2)  r24(Cm2)  r24(P m2) = P m4  Qm4, i.e.,
A P Q. Although no term in L1 is directly imported into L4, we can infer
the domain relation r14 from r12j  r24 utilizing their compositional consistency property.
2. The importing relation is directional. Thus, r12(Am1)  r12(Dm1) is enforced
only in L2, while Am1  Dm1 is not required in L1. There is no information
backflow in importing. Therefore, while L2 and L3 are inconsistent, they
are all consistent to L1, and the consistency of L1 is still guaranteed.

3. The model overlapping is only partial, e.g., E and F in 1 are semantically

separated from L2 and have no correspondence in the local model m2.
?

?

?
An integrated KB can be obtained from
a P-DL KB by combining axioms in all
packages. Because of the isomorphic nature of importing relations, we have the
theorem (proof is in the longer version of
the paper):

Theorem 3. Reasoning in a P-DL KB is
exact w.r.t. its integrated KB.

Fig. 4. P-DL Ontology Example

The intuition behind this proof is as follows: since the only type of semantic
relations between modules are importing relations, and shared terms are always
interpreted consistently in different modules, we can transform a distributed P-
DL model into a classic DL model by merging all copied objects in each of the
local models.

However, a limitation of the importing approach adopted by P-DL is that
the general decidability transfer property does not always hold in P-DL since
the union of two decidable fragments of DL may not in general be decidable
[1]. This presents semantic difficulties in the general setting of connecting ADSs
[1,12]. Fortunately, in the case of a web ontology language where different ontology modules are specified using subsets of the same decidable DL language
such as SHOIQ(D) (OWL-DL), the union of such modules is decidable. With
the availability of the decision procedure [10] and highly optimized reasoners
for SHOIQ(D), we can ensure the decidability of P-DL ontology within the
modular web ontology setting. Therefore we have:
Theorem 4. SHOIQPC(D) is decidable
P-DL also has some expressivity limitations. PC does not allow role inclusions
across different modules, using foreign role to construct local concept, declaring
a local role as the inverse of a foreign role, nor the importing of nominals defined
in other modules. Due to the one-to-one domain relation requirement, P-DL can
support only one-to-one ABox mappings, and not many-to-one, one-to-many, or
many-to-many ABox mappings. The semantics of more expressive P-DL that
allows importing of role and individual names still needs further investigation.

The reduction from DDL to P-DL is straightforward. An into rule i : C

6.3 Relation Between P-DL, DDL and E-Connections
P-DL, despite its stronger domain relation restrictions, can be used to model
DDLs and E-Connections.

j : D in DDL can be reduced to a P-DL axiom C P D in module j and C is an
 j : D in DDL is translated as
imported concept; similarly, an onto rule i : C
C P D in module j and C is an imported concept. The semantic interpretation
of such a reduction is clear since rij(Cmi) = Cmj , therefore rij(Cmi)  Dmj iff
Cmj  Dmj and rij(Cmi)  Dmj iff Cmj  Dmj .

P-DL may avoid the semantic difficulties presented in DDL.

J. Bao, D. Caragea, and V.G. Honavar

, rF owl

, rF ly

Example 6 (Subsumption Propagation). A P-DL KB includes three modules L{1,2,3}, L1 has empty TBox, L2 = {1 : Bird  2 : F owl}, L3 = {2 :
F owl  3 : Chicken}, importing relations are rBird
. The inter-module
subsumption problem 1 : Bird  3 : Chicken can be answered, since in any model
of the KB, Chickenm3  r23(F owlm2)  r23(r12(Birdm1)) = r13(Birdm1),
therefore Bird P Chicken is always true.
Example 7 (Inter-module Unsatisfiability). A P-DL ontology contains two
modules L{1,2}, L1 = {1 : Bird  1 : F ly}, L2 = {1 : Bird  2 : P enguin,1 :
F ly  2 : P enguin}, importing relations are rBird
12 . For any model m of
the ontology, P enguinm2  r12((F ly)m1)  r12(Birdm1), and r12(Birdm1) 
r12(F lym1). Therefore P enguinm2  r12((F ly)m1)  r12(F lym1)   is not
satisfiable.
An E-connection-like constructed concept such as (i : E).(j : D) can be defined
in the module i, where j : D is imported into i, with semantics: {x  i|y 
)  Emi, y  Dmj}}. (i : E).(j : D) can be con-
j, y
structed similarly. It is easy to see a combined model (Tableau) of E-connections
[7] can be reduced to a P-DL model by transforming every E-connection instance
) to the domain
e(i : x, j : y) to a role instance e(i : x, i : y
relation rji if it has not already been added.
Since links in E-connections can be specified as local roles in P-DL with foreign concepts as ranges, link inclusion, link inverse, and link number restriction
can also be reduced into normal role axioms in P-DL. Therefore, we have:
Theorem 5. P-DL SHOIQPC(D) is strictly more expressive than the DDL
extension to SHOIQ with bridge rules between concepts, and E-Connections
HQ (SHIQ,SHOQ,SHIO) and CE

Some types of DDL and E-Connections can not be reduced to the P-DL extension
PC, e.g., DDL bridge rules between roles and individuals or generalized links [13]
in E-connections. However, we believe future extension of P-DL may cover some
of these scenarios.

HI(SHIQ,SHOQ,SHIO).

 = rji(y)  i, (x, y

) and adding (y, y

Another observation is that it is possible to simulate the one-to-one domain relations that are required in P-DL by the combination of DDL and E-
connections2. If we use bridge rules as a special type of E-connections with
 1 cardinality restriction in E-connections, it effectively encodes the one-to-
one domain relations. More precisely, for any pair of module i, j, if we denote E
as the E-connection for bridge rules from i to j, F as the E-connection for bridge
rules from j to i,, the following axioms can be added:
 In module i: i  1E.j
 In module j: j  1F.i
 F = E
2 We thank the anonymous reviewers of the Description Logics Workshop for pointing

.

this out.
?

?

?
However, such a simulation does not always meet the compositional consistency requirement of P-DL. Therefore, such a combination of DDL and E-
connections, while it can solve the inter-module unsatisfiability problem, may
fail on some problems that require module transitive reusability, such as the
general subsumption propagation problem as outlined in Example 1.

7 Summary
In this paper, we have investigated the semantics of DDL, E-connections and P-
DL. We have shown that (a) one-to-one domain relation is a sufficient condition
for exact DDL reasoning; (b) E-connections, in general, are more expressive
than DDL only with inverse links; c) an importing approach in P-DL can be
used to ensure transitivity of inter-module subsumption without sacrificing the
exactness of inference in P-DL with only a compromise of local semantics. Our
results raise the possibility of avoiding many of the semantic difficulties in current
modular ontology language proposals by removing the strong assumption of
module disjointness.

Acknowledgements. This research was supported in part by grants from the
US NSF (0219699, 0639230) and NIH (GM 066387).
