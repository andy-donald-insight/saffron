Web Semantics: Science, Services and Agents

on the World Wide Web 3 (2005) 116131

OntoTrack: A semantic approach for

ontology authoring

Thorsten Liebig


, Olaf Noppens

Department of Artificial Intelligence, University of Ulm, D-89069 Ulm, Germany

Received 1 June 2005; accepted 2 June 2005

Abstract

OntoTrack is an ontology authoring tool that combines a graph-based hierarchical layout and instant reasoning feedback
within one single view. Currently OntoTrack can handle ontologies with an expressivity almost comparable to OWL Lite. The
graphical representation provides an animated and zoomable subsumption graph with context sensitive features such as click-able
miniature branches or selective detail views, together with drag-and-drop editing. Each editing step is instantly synchronised with
an external reasoner in order to provide appropriate graphical feedback about relevant modeling consequences. A recent extention
of OntoTrack provides an on-demand textual explanation for subsumption relationships between classes. This paper describes
the key features of the current implementation and discusses future work, as well as some development issues. OntoTrack can
be downloaded at http://www.informatik.uni-ulm.de/ki/ontotrack/.
 2005 Elsevier B.V. All rights reserved.

Keywords: Ontology development; Semantic web; Description logics

1. Introduction

High quality ontologies are crucial not only for Semantic Web applications [1]. Unfortunately, the task of
building and maintaining mature ontologies turned out
to be a difficult task. It is not only non-sophisticated
users that are commonly faced with comprehension
problems such as the proper use of role hierarchies, the


Corresponding author. Tel.: +49 731 50 24207;

fax: +49 731 50 24119.

E-mail addresses: liebig@informatik.uni-ulm.de (T. Liebig),

noppens@informatik.uni-ulm.de (O. Noppens).

influence of transitive roles on reasoning, or the effect
of domain and range restrictions [2]. In an analysis of
different efforts of formalizing knowledge by KR ex-
perts, it has been shown that a significant amount of
system failures were caused due to implicit modeling conflicts or a misunderstanding of the inference
algorithm [3]. Even worse, the effect of those faulty
axioms typically remains hidden until the KR system is
used or intensively tested. In order to avoid those modeling problems as early as possible, the authors of the
latter analysis suggest encouraging development of interactive tools for building, maintaining and evaluating
ontologies.

1570-8268/$  see front matter  2005 Elsevier B.V. All rights reserved.
doi:10.1016/j.websem.2005.06.004

Obviously, such an ontology authoring tool not only
has to provide a convenient browsing interface or intuitive editing capabilities, but also has to support the
user in understanding the logical meaning of an on-
tology. The latter distinguishes ontology editors from
text editors, but is largely neglected in current authoring systems. This is rather surprising since the primary
purpose of an ontology is to specify a semantic model.
This model can be exported into semantically equivalent but syntactically different representations. In the
case of the Web Ontology Language (OWL), an ontology can be serialized into many syntactically varying
XML/RDF documents which are not inter-convertible
without considering their semantics. Therefore even
the most sophisticated XML editor is at best a second choice for OWL editing. As a consequence, the
explicit representation of the semantical consequences
should become an integral part of any serious ontology
authoring tool.

OntoTrack implements such a novel approach
using one integrated view for straightforward brows-
ing, manipulating, and understanding even large OWL
ontologies. Within this view, ontologies are laid out
as directed rooted graphs according to their primary
structuring relation,
the subsumption relationship.
OntoTrack provides animated expansion and contraction of class descendants, continuous zooming,
panning, and uses elaborated layout techniques such
as click-able miniature branches or selective detail
views. At the same time OntoTrack allows for quite a
number of editing features, such as mouse-over anchor
buttons and graphical selections, without switching
into a special editing layout. In addition, every single
editing step is sent to an external reasoner in order
to make implicit modeling consequences explicitly
available for graphical feedback. OntoTrack has
recently been enhanced with an on-demand component for textual explanation of subsumption between
classes. OntoTrack supports a reasonable subset of
OWL Lite without individuals. The system can read
as well as write XML/RDF serializations of OWL
ontologies.

The remainder of the paper is organized as follows.
In the following section we first present some related
approaches for ontology visualization and editing. Section 3 contains a detailed illustration of our ontology
authoring tool OntoTrack. In Section 4 we discuss
some implementation issues, describe the system ar-

chitecture as well as current work. We will end with an
outlook on possible future extensions.

2. Related work

Many ontology authoring tools use functionally
disjoint interfaces for either browsing, editing, and
reasoning with ontologies. The very first browsing
interfaces used expand- and contract-lists as shown in
Fig. 1(a). Such collapsible lists are still found in almost
all editing environments, e.g. OilEd [4], OntoEdit
[5], Prot eg e [6], WebODE [7], SWOOP [8], and
others. From a usability perspective, in our opinion
those interfaces inherently have substantial drawbacks
concerning search and navigation speed, as well as
user orientation [9]. First, the number of visible classes
is limited by the screen height requiring scrolling even
for medium sized ontologies. For instance, the list representation of Fig. 1(a) is not able to show the complete
hierarchy of our example ontology. Second, because of
the tree-centered representation, multiple inheritance
needs to be approximated with help of cloned classes
appearing in the list of descendants of every superclass.
Not surprisingly expand lists are regarded as not suitable for providing a good overview for larger ontologies
within an evaluation of ontology development tools
[10].

A graph-based rendering technique for networks utilize spring-layouts, where nodes repel each other while
edges attract them. This force-directed method is laid
out either as a snapshot, as in OI-Modeller [11], or
as a dynamic, interactive net, as in TGVizTab [12],
or OntoEdit. Those tools allow for incremental graph
navigation, as for example expanding or collapsing
nodes, or specifying a radius of interest. As can be seen
in Fig. 1(b), a spring representation places connected
nodes close to each other. As a result, even sparsely
connected clusters often aggregate to cluttering heaps
of nodes. In addition, global placement of node clusters
is unpredictable over time because rotation and projection of a graph may change after user interaction.

Hyperbolic trees typically utilize spring-embedding
algorithms to position nodes with respect to their connectivity relationship. This layout technique is exemplarily shown in Fig. 1(c), and currently found in
two ontology browsers: OntoRama [13] and DeLogViz
[14]. Both are limited to spanning trees, and therefore

T. Liebig, O. Noppens / Web Semantics: Science, Services and Agents on the World Wide Web 3 (2005) 116131

Fig. 1. Different visualization techniques for the same sample ontology.

need cloned nodes for visualizing multiple inheritance.
Beyond that, hyperbolic tree visualization is based on
a mapping of euclidian to hyperbolic geometry typically resulting in translocation of nodes after each focus change [15]. In addition, hyperbolic trees have the
disadvantage of fish-eye distortion, which makes it
difficult to read off-center labels. Furthermore, as a heritage of its spring-based layout, node labels are often
drawn on top of each other.

Another tree-centered visualization technique for
ontologies adopt tree maps [16]. Fig. 1(d) shows a
nested view representation of our example ontology
given by the Jambalaya plugin [17] for Prot eg e. Here,
the user can zoom into branches of the ontology on
mouse click. However, without an additional naviga-

tion view users often loose orientation after a few focus
changes. The additionally offered overlay visualization
for restrictions or multiple ancestors with help of edges
is also a source of confusion. Beyond that, the depth of a
node is hard to grasp without counting the surrounding
boxes.

In our opinion, the most natural layout for an
ontology is a hierarchical layered graph. For instance,
the rooted graph of Fig. 2 allows the easy grasp of
the overall structure of the ontology by equal space
requirement in comparison to the previous approaches.
Furthermore, since graphs natively support multiple
ancestors, nodes need not be cloned as in the previous
tree-centered approaches. In addition, according to our
personal experience, only the combination of graphs

rently, only the SWOOP editor offers instant reasoning
feedback during editing.

3. A new graphical authoring tool for OWL
Lite

OntoTrack is a multi-platform Java application
combining authoring of ontologies with reasoning
about ontologies. As a consequence of its reasoning
capabilities, running OntoTrack requires access to an
appropriate reasoning system before loading or creating a new ontology. Currently OntoTrack provides a
built-in TCP link-up to the highly optimized RACER
reasoner [19].

The next subsection specifies the OWL language
constructs OntoTrack is currently able to handle. For
the sake of broad usability and a clear and concise
graphical representation, we have restricted this language to a sensible fraction of OWL Lite, called
OWL Lite
. This is followed by a more detailed explanation of OntoTracks browsing, editing, reasoning
as well as explaining capabilities.


3.1. OWL Lite


: a sensible fraction of OWL Lite

OntoTrack is designed to be an authoring tool for
ontology languages with an expressivity almost comparable to that of OWL Lite. The expressivity of OWL
Lite is about that of the DL language SHIF(D) [20].
OWL Lite is a fraction of OWL DL, aiming to provide
a useful subset of language features that are easier to
present to naive users and relatively straightforward for
tool developers to support [21]. In particular, OWL Lite
excludes syntax constructs for unions, complements,
and individuals in descriptions or class axioms. In ad-
dition, it limits cardinalities to either 0 or 1 and nested
descriptions to concept identifiers. However, these restrictions come with relatively little loss in expressive
power. With the help of indirection and multiple definitions for a single class identifier, all of OWL DL can be
captured in OWL Lite except those descriptions containing either individuals or cardinalities greater than
1 [20].

Simulating full negation or disjunction in OWL Lite
with the help of general inclusion axioms (GCIs) and
multiple definitions is rather obscure, and obviously
conflicts with the design goal of OWL Lite. Those

Fig. 2. Hierarchical, rooted graph of the sample ontology of Fig. 1.

together with a strict hierarchical ordering of layers
with nodes of the same depth are appropriate for
comprehensive ontology visualization. The orientation
of this ordering (e.g. top-down, left-right) is a matter
of personal preference, though. For instance, the graph
layout provided by ezOWL [18] does not preserve a
strict hierarchical ordering by allowing arbitrary class
arrangements. In addition, its representation does not
contain the built-in OWL root class (Thing) which
makes it difficult to locate those classes without an
explicit superclass axiom.

The majority of the currently implemented visualization interfaces does not allow for substantial editing
and is designed as view-only application or plugin. For
editing, all mentioned ontology editors use expand and
contract list representations for selection of classes or
properties, together with predefined forms and pop-up
windows for manipulation in an additional display area.
As a consequence, the definition of a new value restriction may require several (possibly overlapping) pop-up
windows for a step-wise specification of the respective elements of the restriction. In addition, if editing
and visualization are strictly separated, the user has to
choose between an enhanced browsing or full editing
mode, which obviously is a disadvantage for effective
and seamless ontology authoring.

Almost all editors offer consistency checks or classification with the help of an external reasoner. How-
ever, these services explicitly have to be activated by
the user. In addition, after classification some editors
distinguish between the syntactical and the semantical
ontology model and their different visualizations. Cur-

T. Liebig, O. Noppens / Web Semantics: Science, Services and Agents on the World Wide Web 3 (2005) 116131

constructs will very likely rarely occur in real world
OWL Lite ontologies. Instead, users will presumably
use OWL DL when it comes to disjunction or negation for a certain application domain. Beyond that,
there is no intuitive and unambiguous way for rendering classes with multiple, possibly mixed partial and
complete, definitions. We therefore decided to restrict
the usage of OWL Lite in a way we believe was originally intended by the language designers themselves.
This language fragment is called OWL Lite
in the fol-
lowing. In particular, we have restricted classes to be
defined only once in a way that could be equally expressed by one single owl:equivalentClass or
rdfs:subClassOf statement over the conjunction
of the collection of superclasses and restrictions (i.e.
the definition of a class A is A  D or A  = D where
A is an atomic name and has no other definition). As
a result, GCIs, full negation and disjunction are not

expressible within OWL Lite


Within this context, it is worth mentioning that different analyses of online available ontologies (e.g. [22]
or [23]) showed that most users only exploit a very
limited set of the available language constructs. More
precisely, only a very small fraction of those ontologies
would be outside the scope of the OWL Lite subset processable with OntoTrack.

3.2. Browsing and searching

The primary structuring element of ontologies is
the subsumption relationship between classes and
properties. Consequently, OntoTrack draws an
ontology as a directed acyclic graph with either classes
or properties as nodes and the subsumption relationship as directed edges either in top-down, left-right,
bottom-up, or right-left orientation. In this respect,
OntoTrack adapts and extends the node link tree
approach of an application called SpaceTree [15]. The
drawn hierarchy may vary from the explicitly given
subclass statements of the loaded ontology source
document. This is due to OntoTracks most important
layout principle which imposes the visualization of the
subsumption relationship as implied by the semantical
model of the given ontology axioms. Therefore, by
taking the modeling consequences explicitly into ac-
count, OntoTrack is sensitive not only to syntactically
given, but also to semantically implied subsumption
relationships.

Fig. 3 shows the OntoTrack application window. It
consists solely of a menu bar, a search bar, and a combined browsing and manipulation area. OntoTrack
can handle multiple ontologies in parallel, which are
accessible via corresponding tabs at the bottom of the
application window. The ontology displayed in Fig. 3 is
a fraction of a sample generation ontology in top-down
orientation. Note that the subsumption paths of the currently selected class (Sister) up to the OWL root class
(Thing) are outlined by a darker node background and
thicker edges in order to provide an optimal overview
concerning depth and branching.

Unexpanded sub-branches of classes are rendered as
triangles of varying length, width, and shading, approximating the depth, branching and number of subclasses
(see class Parent in Fig. 3 for an example). If the number of descendants is below a user definable threshold,
a contracted sub-branch will alternatively be drawn as
a miniature graph in order to give an overview of its
topological structure (see Descendant in Fig. 3). This
idea of different kinds of thumbnails is adapted and
extended from the SpaceTree visualization [15]. The
icons of a miniature graph are expandable on mouse
click and show their class names via mouse-over tool
tip. In addition, the whole ontology layout can continuously be zoomed or panned simply by right resp. left
mouse-button movements.

The direct descendants of a class are expanded resp.
de-expanded in an animated fashion on left mouse button click. OntoTracks ontology layout is driven by
the expansion direction of the user. The layout strategy aims at clustering the descendants of a selected
class (locally simulating an ordinary tree representa-
tion). This means that an ontology with multiple inheritance may end up with a different layout for exactly
the same set of expanded classesdepending on the
users expansion order.

As mentioned before, OntoTrack always shows
all (even implicit) direct subsumption relationships between classes. However, when dealing with classes
with multiple ancestors, it might be the case that some
ancestors are in unexpanded branches. Instead of expanding all those ancestors, OntoTrack will draw
them as click-able thumbnail classes in order to always
show the semantically correct hierarchy, while minimizing the number of expanded classes at the same
time. Our technique of drawing a thumbnail graph
within a strict hierarchical layout is based upon com-

Fig. 3. Upper fraction of a generation ontology with triangle and miniature sub-branches. Anchor buttons for class Sister show up because of
mouse over action.

pound graphs [24]. The class names of all thumbnail
classes are displayed when hovering with the mouse
over the thumbnail node. As an example, Fig. 4 shows
three thumbnail ancestors for the classes Sister and
Brother which appear after expansion of class Sibling.
OntoTrack will not expand them by default because
of the assumption that the user is much more interested
in the descendants of Sibling (the user actually asked
for) instead of their ancestors.

An auxiliary navigation feature of OntoTrack is
the birds eye view, which will appear in the upper left
corner of the workspace only if the ontology exceeds
the available rendering area at its current scale factor.
The birds eye view consists of a miniaturized graph of
the current ontology expansion and an overlaid rectangle representing the current rendering area. The latter
can be moved via mouse, which will result in a corresponding relocation of the original view.

Fig. 4. Ancestor thumbnails of classes Sister and Brother after expansion of class Sibling.

T. Liebig, O. Noppens / Web Semantics: Science, Services and Agents on the World Wide Web 3 (2005) 116131

Fig. 5. Match highlighting for string search when querying for class names starting with Grand.

OntoTrack also implements a string matching
search with graphical highlighting based on the
principles of the dynamic query approach [25]. Each
modification of the search string directly results in an
updated highlighting of matching parts of the ontology
(expanded or not). Fig. 5 shows the sub-string matches
for the search string Grand within class identifiers.
Note that even thumbnails or triangle sub-branches
are highlighted. Optionally, the user can fan out the
ontology, resulting in an expansion of all matching
classes via one click.

3.3. Ontology editing

Browsing and editing in OntoTrack is done within
one single view. This allows for the re-use of already
available navigation principles for the task of building
and manipulating ontology definitions. A new sub- or
superclass can easily be added by using OntoTracks
anchor mode, for example. Here, click-able triangle
buttons appear when hovering with the mouse pointer
over a class node (see class Sister in Fig. 3). These anchor buttons allow for the specification of an additional
superclass or new subclass via mouse click, and are

sensitive with respect to the layout orientation. An existing subclass relationship can be changed via mouse
drag-and-drop, or deleted by selection and Del-key
usage as long as this relationship is not implied by other
logical axioms of the ontology.

In addition, OntoTrack offers further editing functions while in its detailed view mode. The detailed
view mode is activated or deactivated for each class separately using the mouse-wheel down-resp. up-wards
with the mouse pointer on the class (alternatively Pg-
Down/PgUp). When activated, OntoTrack uses an
UML-style class diagram showing the list of defined
property restrictions for this class in abstract DL syntax in its bottom compartment. OntoTrack supports
unqualified cardinality restrictions (,,= with cardinality 0 or 1), as well as existential and universal (, )
quantifications. A restriction can be deleted by clicking
on the round (red) button at the right hand side of the
corresponding row, and a new restriction can be added
by clicking on the round (green) button at the bottom of
the class box. At present, object-, datatype-properties,
as well as classes within those restrictions, are chosen
with the help of selection lists. Fig. 6 shows a selection of classes within detailed view mode. Since each

Fig. 6. Detailed view mode for class Person (amongst others) during specification of an universal quantification.

Fig. 7. Representation of two equivalent classes. Here, equivalence is implied because of the existential restriction on has-child within both
classes and the range restriction of this property (see Fig. 9).

property views allow for manipulation of global
domain and range restrictions, global cardinality
constraints, as well as logical characteristics of the
property with the help of selection lists or checkboxes.
Fig. 9 shows an example datatype- as well as the objectproperty hierarchy with different detailed views. Here,
both hierarchies are visible as the corresponding
checkboxes in the root node are selected.

As an extra feature, the property representation can
be rendered as a read-only transparent layer onto the
class representation and vice versa. The transparency
rate of the secondary layer is freely adjustable.

3.4. Instant reasoning feedback

As mentioned before, OntoTrack is equipped with
an interface for interaction with an external OWL reasoning system. All changes after each editing step
(e.g. list selection, subclass manipulation) are immediately sent to this system. The reasoner will then make
all modeling consequences explicitly available. OntoTrack will hand over relevant consequences to

compartment of a restriction is freely editable, redefinitions (e.g. replacing a property) can easily be performed
without removing the complete restriction statement
and adding a new one. In future versions, properties as
well as classes may be selectable by mouse click.

Additional editing features such as class deletion
or switching between complete and partial definitions
are accessible via a right mouse button context menu.
In order to visually distinguish between a complete
and a partial class definition1, we have adopted the
UML notation of derived types for complete class def-
initions. More precisely, a complete class definition is
characterized by a slanted line in the upper left corner
of the class box. From the semantical point of view,
OntoTracks graphical notation is interpreted as fol-
lows: a class is equivalent to (if complete) or a subclass of (if partial) the conjunction of the collection
of superclasses and restrictions. Semantically equivalent classes are displayed within one combined node
(see Fig. 7), whereas all editing functionality is still
available for each class. In addition, a detailed view
mode is also available for combined nodes offering further information about explicit subsumption definitions
(if any) between the equivalent classes as exemplarily
shown in Fig. 8.

In addition to the class hierarchy view, OntoTrack
also provides an analogous graphical representation
for object- as well as datatype-properties. Here, the
root node allows for the selection of object-, datatype-,
or both property types to be shown. Different detailed


1 In OWL Lite

we allow for exactly one definition per class iden-

tifier (see Section 3.1).

Fig. 8. Detailed view mode for the combined representation of equivalent classes shows explicit subsumption relationship.

T. Liebig, O. Noppens / Web Semantics: Science, Services and Agents on the World Wide Web 3 (2005) 116131

Fig. 9. Property hierarchy showing object-, as well as datatype-properties with examples of different detailed view modes.

the user by providing appropriate graphical feedback.
These consequences currently cover subsumption and
equivalence between classes, as well as unsatisfiability
of classes. For example, adding an existential restriction (minimal or exact cardinality restriction with 1 or
existential quantification) on a property with a domain
restriction will result in a subsumption relationship between the edited class and the property domain. Those
updates are also animated in order not to confuse the
user with a new hierarchy layout in one step. This kind
of direct feedback obviously will help users to identify faulty or non-intended modeling. As an example,
one of the most common modeling errors consists of
using a universal rather than existential quantification,
according to [2]. The logical consequence of A  =r.B
instead of A  =r.B are quite different, however. The
former definition implies equivalence, the later a subsumption relationship between A and Thing. Instant

reasoning feedback would make this distinction immediately evident by directly updating the class hierarchy.
Another example is given in Fig. 10 which shows a
contradiction between a restriction in the class Person
and a restriction in the class Sibling. The latter requires at least one filler for the property has-sibling.
In contrast, the cardinality constraint given in the class
Person restricts the number of fillers to exactly 0. As
a consequence, Sibling and all subclasses thereof are
unsatisfiable, and therefore outlined in red. Semanti-
cally, all unsatisfiable classes are equivalent to the predefined OWL class Nothing. However, Nothing is a
very special class and will not be drawn within the
class hierarchy in OntoTrack. If it were drawn, the
set of unsatisfiable classes would have to be rendered
within one single node. Instead these classes remain
within their previous taxonomic position in order not
to (incidentally) flatten large parts of the hierarchy.

Fig. 10. Contradicting restrictions cause Sibling (and at least all its descendants) to be unsatisfiable.

Note that the last edited class is not necessarily the
(only) one which potentially will become inconsistent.
OntoTrack will therefore query its reasoner for conflicting or equivalent definitions in any part of the ontology after each editing step. Concerning the example
shown in Fig. 10, it can be seen that there is at least one
unsatisfiable descendant of Parent (the corresponding
sub-branch triangle is colored red).

3.5. On-demand explaining

for explanation of

Providing feedback on the logical consequences of
recent user changes helps users to check for imprecise,
redundant or faulty modeling. Important consequences
with respect to an ontology authoring tool are sub-
sumption, equivalence and unsatisfiability. These
consequences often depend on logical interrelations
of nested definitions, which themselves may depend
on other definitions. As a result, most consequences
are not easily traceable or intuitive to non-experienced
users. Current
reasoning systems provide no or
only limited support
logical
consequences.2 OntoTracks most recent extention
is a prototypical facility for an on-demand explanation
of subsumption between classes. The user can invoke
an explanation by using a right mouse-button context
menu while over a subsumption link. Our explanation
generator is an external component and uses a tableauxstyle algorithm. It will generate a quasi-natural language explanation compiled from text patterns which
correspond to applied rules of the underlying tableaux
proof. This approach is based on the work of Borgida et
al. [27] which we have extended to a more expressive
language [28]. We built our own system, since currently available tableaux reasoners potentially capable
of handling OWL are either not available as source
code or are based on highly optimized algorithms not
easily extensible for explanation generation.

Currently, this component is able to generate explanations within unfoldable ALEHFR+ ontologies,
i.e. ontologies with unique acyclic definitions (negation
and disjunction comes implicitly due to the refutation
strategy of the tableaux proofs). Note that this explanation facility does not aim to replace the external core
reasoning component and will only be activated on user
request.

2 The Classic system is a notable exception here [26].

Fig. 11 shows the textual explanation of

the
subsumption relationship between Person-with-
Nephews and Uncle-or-Aunt. Definitions which are
relevant to the given explanation are also shown in
Fig. 11.

4. Implementation issues and current work

A recent analysis of online available ontologies [22]
showed that most ontologies contain more than 100
classes. Upcoming ontologies very likely will consist
of several hundreds of classes, presumably referencing dozens of other ontologies. Obviously, performance
and scalability of ontology authoring tools are a key issue for user acceptance and wide adoption of Semantic
Web techniques. We have chosen Piccolo [29] as our
graphical library for OntoTrack, which has proven to
be sufficiently fast and reliable even for large numbers
of graphical objects. Piccolo is a Java2D graphical interface toolkit supporting animation and zooming, as
well as providing a view model with multiple cameras
and layers, etc. Our implementation of OntoTracks
visualization components also adopts the node link
tree approach of SpaceTree [15], which itself uses the
Piccolo toolkit. SpaceTree makes use of elaborated layout techniques to dynamically zoom and lay out tree
branches in an animated fashion. Fig. 12 shows that
OntoTracks layout technique is even suitable to depict the overall structure of ontologies with more than
60 classes.

As illustrated in Fig. 13, we applied the well-known
model-view-controller paradigm [31] to OntoTrack
in order to strictly separate the graphical representation
and the internal model. This paradigm also allows for
the seamless integration of additional components such
as our on-demand explanation component described in
Section 3.5. The core ontology model is based on the
Jena 2.1 [32] RDF API and parser functionality. We
have enriched this model with a high-level event notification mechanism needed for propagating changes
to the views or to the external reasoner representa-
tions. Furthermore, this approach allows us to easily
plug-in different reasoner systems or non-standard reasoning services. Our most elaborated reasoner link-up
uses RACER via KRSS syntax [33] over TCP. We are
currently implementing interfaces for Pellet [34] and
LOOM [35].

T. Liebig, O. Noppens / Web Semantics: Science, Services and Agents on the World Wide Web 3 (2005) 116131

Fig. 11. Explanation of a subsumption relationship within our example ontology.

OntoTrack is sensitive to logical consequences
and therefore a very reasoning-intensive application.3
This requires an ontology API offering a high level
publish-subscriber mechanism on the reasoner side
about logical implied consequences concerning TBox,
as well as ABox changes. Otherwise each application (most notably our graphical view) would be
responsible for requesting all changes it is interested
in. Unfortunately, none of the currently available
reasoning systems
supports a publish-subscriber
mechanism for TBox reasoning. We were therefore

3 Besides ontology authoring tools, we expect further reasoning

intensive application in the future.

forced to implement the requester approach which,
as expected, turned out to be difficult for a couple of
reasons. For example, in order to become aware of a
new subsumption relationship due to a recently added
property restriction, OntoTrack needs to query
the reasoner about direct superclasses for almost all
classes of the ontology in turn.4 Instead of querying for
all possible changes with respect to a specific conse-

4 One could of course narrow this set to those classes that also
have an explicit or inherited restriction on that particular property
or a subproperty thereof. But this requires explicit knowledge about
inherited restrictions or subproperties, which in turn may result in
additional queries.

Fig. 12. A modified fraction of the IEEE SUMO ontology [30] with more than 60 classes expanded and a birds eye view in the upper left corner.

quence for each editing step, we would like to have an
event-triggered publish-subscribe mechanism on the
reasoner side [36]. Another problem is concerned with
incremental reasoning and retraction of definitions.
Since handling incremental additions to a knowledge
base is still unknown [37], complete reclassification
after each user interaction is necessary.

OntoTracks prototypical explanation facility is
currently implemented in CommonLisp as an external component parallel to the reasoning system. In
order to avoid redundant computation, it is desirable
to combine reasoning and explaining within one system component in the future. Beyond that, we plan to
enhance the explanation presentation with additional

Fig. 13. OntoTrack system architecture.

T. Liebig, O. Noppens / Web Semantics: Science, Services and Agents on the World Wide Web 3 (2005) 116131

mouse-enabled features and different levels of detailed
information.

Current work also focuses on further editing fea-
tures. Comments, labels and ontology header information are imported, as well as exported correctly, but
are not editable in OntoTrack at the moment. We are
also working on the integration of further editing and
searching facilities such as regular expression search
or undo operations. Such an undo functionality can be
added to OntoTrack by providing an additional history component listening to all ontology changes and
an undo-controller for user interaction. In a first step
this functionality could be realized by collecting all
high-level ontology changes. A more optimized component would obviously cooperate more tightly with
the reasoner in order to prevent unnecessary reclassification steps when switching to a previous state of the
ontology.

We will also extend OntoTracks support for properties by providing additional consistency checks. For
instance, properties appearing in cardinality constraints
are not allowed to be transitive [38].

5. Future work

5.1. Ontology authoring

Support for cross ontology references between different definitions is also a point of further investigations
and is still under discussion within the Web Ontology
Working Group [39]. In a first naive approach our plan
was to draw a superclass from a different ontology as a
thumbnail ancestor using a dashed subsumption link (in
order to distinguish between local and external ances-
tors). In the case of selecting such an ancestor, the corresponding ontology should be loaded and expanded up
to the referred class in a new tab of OntoTrack. Un-
fortunately, this functionality carries some problems
regarding import statements and referencing mechanisms of OWL/RDF. For example, OWL allows for the
distribution of a class specification across multiple definitions in various RDF documents. It is even possible
to define a class bearing a virtual URI not related to
any of the defining documents. Now, when referring
to this class from elsewhere, its corresponding definition cannot be found at the URI implied by the class
ID. In other words, we can not infer the location of

a definition from its URI reference. Beyond that, the
meaning of the referenced ontology entity can only be
taken into account when importing those documents,
containing RDF triples about this entity. Note that importing RDF triples via an ontology import statement is
not the same as referencing them. Furthermore, the notion of an ontology, by specifying an ontology header
with owl:Ontology, is an additional but optional
structuring concept within OWL. In fact, the relationship between class/property descriptions and an ontology is unclear. More complex, even if it is optional or
may appear more than once in a document, an ontology header is the only way to import other documents.
This means that a serious OWL authoring tool needs
to carefully distinguish between documents, ontologies
and references.

Another serious issue of general future research is
concerned with debugging of ontologies not developed
from scratch within OntoTrack. Here standard inference services provide only little help to resolve inconsistencies in logically incoherent ontologies. In [40] a
new reasoning service for pinpointing logical contradictions within ALC ontologies has been introduced.
A similar methodology would obviously be helpful
within OntoTrack.

Recently novel inference services intended to support the building of an ontology have been developed
(see Section 6.3 in [41] for a summary). One interesting service consists of the matching of class patterns against class descriptions in order to find already
defined classes with a similar structure. Another approach tries to create class definitions by generalizing
one or more user-given ABox assertions. In order to
support the bottom-up construction of an ontology, the
non-standard inference service of computing the least
common subsumer (e.g. as in [42]) is of benefit. In a
bottom-up approach, a user could select two or more
classes which are generalized into a single new class
(the least common subsumer).

In addition to the ontology scheme, future work will
also be concerned with the visualization and manipulation of individuals in OntoTrack, either with the help
of an additional visualization component optimized for
this purpose (e.g. as in [43]), or embedded within our
current hierarchy-based layout.

It turned out that property hierarchies are often flat
hierarchies concerning to the inheritance relationship.
In the near future, we will study further visualization

and navigation improvements (such as fish-eye menus
and context+focus techniques) for our ontology browsing and editing paradigm, especially for use with flat
and less structured hierarchies.

5.2. System evaluation

OntoTrack is not a research prototype anymore
but still under development. Therefore, OntoTrack
has not been extensively evaluated yet. However,
some of the underlying browsing principles have been
benchmarked in a set of experiments comparing three
tree-based browsing tools (MS Explorer, a Hyperbolic
tree browser, and SpaceTree) [15]. This comparison
showed some performance advantages for the SpaceTree approach concerning tasks such as first-time node
finding, listing all ancestors of a node, or differentiate
between branches with varying numbers of nodes.
These results may serve as an indicator with respect to
navigation, user orientation and editing performance
of OntoTrack in comparison with other editing tools.
However, in order to have some qualitative results
concerning average navigation, especially from the
ontology authorings point of view, we plan to conduct
a controlled experiment in the near future.

6. Conclusion

The broad adoption of Semantic Web technology
strongly depends on the availability of convenient and
flexible tools for browsing, editing, and evaluating on-
tologies. A clear presentation, intuitive editing abilities,
and subsidiary reasoning services are key properties of
ontology editors suitable even for users without deep
logical background. Traditional expand and contract
style interfaces, template based editing forms, or treecentered visualizations inherently have substantial
drawbacks in this respect. In our opinion, none of these
layout techniques is well suited for typical ontology
browsing tasks such as comparing different expansion
paths concerning level depth or common ancestors.
To our knowledge, there is currently no appropriate
tool for displaying the overall structure of more than
60 directly editable classes together with additional
information about unsatisfiable classes,
selective
detail information and search results, as is shown in
Fig. 12.

Our new graphical ontology authoring tool OntoTrack combines navigation and direct manipulation
in one single hierarchical view, together with instant
reasoning feedback and rudiments of an explanation
component. We have proposed a semantic-oriented ontology visualization integrating enhanced results of research in the field of HCI (such as zoomable interfaces,
thumbnail previews and dynamic) with aspects of ontology authoring. We see OntoTrack as a first step towards an easy-to-use interactive ontology editor, even
for non-experienced users and especially large ontolo-
gies.

We also see OntoTrack as a platform for further
tasks such as cooperative ontology construction, ontology merging and alignment, or ontology evaluation.
Currently, we are adding a plugin architecture to OntoTrack which allows for the extension of our application with different reasoning services, additional
visualizations, as well as allowing third-party plugins.
This contribution attempts to inspire the Semantic
Web community in two ways. Concerning research, we
hope to stimulate the development of non-standard inference services and incremental reasoning systems.
On the user side, we aim to motivate even nonexperienced domain experts to build, understand and
use ontologies more widely in order to push the Semantic Web from academia to industry.
