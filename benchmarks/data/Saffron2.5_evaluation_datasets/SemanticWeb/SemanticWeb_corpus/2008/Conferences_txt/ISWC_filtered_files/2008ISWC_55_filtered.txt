Identifying Potentially Important Concepts and

Relations in an Ontology

Gang Wu1,2, Juanzi Li1, Ling Feng1, and Kehong Wang1

1 Department of Computer Science, Tsinghua University, Beijing 100084, P.R. China

2 Department of Computer Science, Southeastern University,

Nanjing 210000, P.R. China

wug@keg.cs.tsinghua.edu.cn, ljz@keg.cs.tsinghua.edu.cn,

fengling@tsinghua.edu.cn, wkh@keg.cs.tsinghua.edu.cn

Abstract. More and more ontologies have been published and used
widely on the web. In order to make good use of an ontology, especially a new and complex ontology, we need methods to help understand it first. Identifying potentially important concepts and relations
in an ontology is an intuitive but challenging method. In this paper, we
first define four features for potentially important concepts and relation
from the ontological structural point of view. Then a simple yet effective
Concept-And-Relation-Ranking (CARRank) algorithm is proposed to simultaneously rank the importance of concepts and relations. Different
from the traditional ranking methods, the importance of concepts and
the weights of relations reinforce one another in CARRank in an iterative
manner. Such an iterative process is proved to be convergent both in
principle and by experiments. Our experimental results show that CARRank has a similar convergent speed as the PageRank-like algorithms,
but a more reasonable ranking result.

1 Introduction

Ontology provides Artificial Intelligence and Web communities the remarkable
capability of specifying shared conceptualization explicitly and formally. A diversity of ontologies have been widely used as the bases of semantic representation
in many applications such as knowledge bases, multi-agents and the Semantic
Web. As the amount, scale, and complexity of ontologies are increasing rapidly,
it requires more efforts for ontologists and domain experts to understand them.
Hence, Ontology Understanding, the process of getting familiar with an ontology
[4], has to seek helps from computer intelligence.

The state-of-the-art ontology engineering projects, like IsaViz, Ontoviz, and
Jambalaya, use information visualization techniques to represent ontologies. They
have the ability to help humans understand and navigate in complex information
spaces [9]. However, for a complex ontology, graphically presenting all concepts

 This work is supported by the National Natural Science Foundation of China under
Grant No.90604025 and the Major State Basic Research Development Program of
China (973 Program) under Grant No.2003CB317007 and No.2007CB310803.

A. Sheth et al. (Eds.): ISWC 2008, LNCS 5318, pp. 3349, 2008.
c Springer-Verlag Berlin Heidelberg 2008

G. Wu et al.

and relations indistinctively makes above tools generate unreadable visualization
results. Users who are unfamiliar with the ontology will probably get lost in such
a maze.

To resolve the problem, some researchers have proposed approaches by drawing users attention to those potentially important (or alternatively interesting)
concepts within one ontology. They calculate the importance of concepts either
by tracking the users browsing activities [7], or according to the concept hierarchy [20]. These solutions are straightforward. While more detailed information
about ontology structure, like the correlation between concepts and relations, is
not explored. In some other studies, traditional link analysis ranking algorithms
on Web pages and objects are employed to rank the importance of concepts [3],
and even the importance of relations [8, 17]. These solutions need the help of
additional statistic information or time-consuming machine learning schemes.

In this paper, we propose a simple yet effective algorithm, named Concept
And Relation Ranking (CARRank), for identifying potentially important concepts and relations in an ontology. By efficiently ranking the importance of concepts and relations simultaneously, CARRank can find out which concepts and
relations might be the ones the ontology creator would like to suggest to users
for further consideration. In this way, CARRank can promote the usability for
ontology understanding. Users can even outline an interested sub-scope of an
ontology, of which important parts are taken out. Although CARRank is rather
an automatic ranking algorithm than a specific visualization approach, it can be
easily integrated into the existing ontology visualization tools to provide a novel
perspective. Main contributions of this paper include:

1) To make good use of ontology structural information, we give a graph representation of ontology which makes it easy for applying link analysis ranking algorithms while preserves the semantics expressed by RDF-based ontology languages.
2) To determine the potentially important concepts and relations in an on-
tology, we introduce an importance ranking model. The model tries to imitate
the creation process of an ontology from the ontological structural point of view
by defining four representative features.

3) To calculate the importance of concepts and relations, we propose an efficient algorithm according to the model, named CARRank. The difference between
CARRank and existing PageRank-like algorithms is two-fold. Firstly, with this
algorithm, the importance of vertices (i.e. concepts) and the weights of edges (i.e.
relations) reinforce one another in an iterative process. Such a dynamic computation on edges weights as well as vertices importance has never been studied
previously. Secondly, the directions of walk for the algorithms are opposed, which
makes CARRank more suitable for supporting ontology understanding. CARRank
is proved to be convergent, and thus is universal for simultaneously ranking vertices importance and edges weights in arbitrary directed labeled graph.

4) Experiments are conducted to demonstrate the effectiveness and efficiency

of the approach to support understanding of ontologies.

The remainder of the paper is organized as follows. We review the closely
related work in Section 2, and present our CARRank model in Section 3. We
?

?

?
then bring forward the CARRank algorithm in Section 4. Experimental results
are shown in Section 5. The final section is about the conclusion and discussion.

2 Related Work

Cognitive Support for Ontology Understanding. The DIaMOND project
[7] and the holistic imaging ontology [20] are two most related studies. DIaMOND [7] is a plug-in for Prot eg e1 to help users find concepts of interest within
an ontology. By tracking users navigation activities on an ontology, it continuously calculates the degree of interest for each concept. The navigation overhead
can thus be reduced by drawing users attention to the highlighted concepts
of high interest degrees. The degree calculation of this method is user-specific.
In [20], authors exploited degrees of interest of concepts as a filter for labeling
important concepts in a large scale ontology. Its degree calculation is holistically based on concept hierarchy without considering non-subsumption relations
between concepts. Our work differs from these approaches. First, we think that
the importance measurement of a concept should take into account the contributions from all the other concepts in the ontology through relations including both
subsumption and non-subsumption ones. Second, relations between concepts are
also helpful for ontology understanding.
Ontology Ranking in the Semantic Web. OntoSelect [6], OntoKhoj [18],
and AKTiveRank [1] are three approaches that were developed to select (or
rank) one or more ontologies that satisfy certain criteria [19], with an ontology document as the ranking granularity. The first two approaches relied on
the popularity, which assumed that ontologies referenced by many ontologies are
more popular, while the third one considered several structural evaluation met-
rics, including Density (DEM), Betweenness (BEM), Semantic Similarity (SSM),
and Class Match measure (CMM). Although AKTiveRank does not intend to
rank the importance of concepts or relations in an ontology, the above complex
networks analysis metrics it employs are useful for reference in this work. According to the pre-existing statistic information on instances, Swoogle [8] could
enable both document level and term level ranking, including the class-property
relationship ranking.

Compared with this line of research, our study aims to finding out potentially
important information in a given ontology, so the granularity of output is concept
and relation, rather than a whole ontology. Besides, the method can evaluate the
importance of general relations of concepts, as well as concepts themselves. Fur-
thermore, no prior knowledge or user interaction is required, which may be more
applicable in dealing with new ontologies. Table 1 lists some of the differences.
Ranking Algorithms. In ranking Web pages, hyperlink is the only relation to
be considered. PageRank [5] pointed out that a good authority page is the one
pointed to by many good authorities. The evaluation is performed in a random
surfer manner over all pages on the Web graph. Unlike PageRank, HITS [13]

1 http://protege.stanford.edu/

G. Wu et al.

Table 1. Related Work in the Semantic Web

Concept Rank Relation Rank Ranking Methods

CARRank
DIaMOND
[20]
OntoSelect
OntoKhoj
AKTiveRank
Swoogle
?

?

?
-
-
-
?

?

?
-
-
-
-
-
?

?

?
CARRank
Tracking users navigation
Concept hierarchy
PageRank-like
PageRank-like
CMM+DEM+SSM+BEM
PageRank-like

exploited a mutual reinforcing relationship between hub pages and authority
pages within a subgraph of the Web. By extension of PageRank and HITS,
Reverse PageRank [10] was investigated as a reasonable approach to browse the
Web, which reverses the direction of all hyperlinks before applying PageRank.
In this study, we browse an ontology in a similar manner to Reverse PageRank.
Apart from the hyperlink relation, there exist more edge types in an ontol-
ogy, such as property-of, subclass-superclass, etc. The edge type is an important
factor in determining the importance of vertices. This was addressed recently
in a series of object-level link analysis ranking algorithms. In the field of data-
base, ObjectRank [3] applied link analysis methods to rank the importance of
database objects and tuples. Different weights are set according to link types
either manually or by statistic information. PopRank [17] is a machine learning
approach to automatically assign the weights and rank the importance of Web
objects. These weight assignment approaches are not applicable for ontology understanding where absence of priori knowledge is fairly common. We attempt to
resolve it by evaluating the weights simultaneously in the ranking process according to only the mutually reinforcing relationship between concepts and relations.

3 CARRank Model

3.1 Ontology Graph

Before any link analysis could be performed, an ontology should be represented
as a graph. As an ontology defines the concepts and the relations between them
in certain domain [16, 11], it is suggested to model a concept as a vertex and a
relation as a directed edge linking two concepts. We call such constructed graph
the ontology graph.
Definition 1. Given an ontology O, the ontology graph G = (V,E, lV , lE) of
O is a directed labeled graph. V is a set of nodes representing all concepts in O.
E is a set of directed edges representing all relations in O. lV and lE are labeling
functions on V and E respectively.
Definition 1 is a representation of an ontology at the syntactic level. Its semantic
capabilities will be presented in section 3.4.

The ontology graph illustrated in Figure 1 is our running example. It describes concepts and relations in an open software project domain, especially
the relationships between developers and projects.
?

?

?
Foundry_member

Version

Usage_statistic

has_project

has_version

has_usage_statistic

sub_category

Person

rdfs:subClassOf

Category

belong_to

Member

member_of

Project

has_released_package

Release_package

rdfs:subClassOf

developed_by

reply

has_public_forum

Developer

rdfs:subClassOf

Message

has_message

Public_forum

post

manage

rdfs:subClassOf

rdfs:subClassOf

Project_admin

Help

Disscussion

Fig. 1. The running example

3.2 Mapping RDF-Based Ontology to Ontology Graph

In practice, the most important ontology languages in the Semantic Web are
RDF Schema (RDFS) and OWL. In these languages, an ontology is expressed
as a set of triples. A triple (s, p, o)  (U  B)  U  (U  B  L) is called an
RDF triple where U, B, and L are infinite sets of URI references, blank nodes,
and literals respectively. Here, s is called the subject, p the predicate, and o the
object of the triple. A set of such RDF triples is defined as an RDF graph [21],
and represented as a directed labeled graph as shown in Definition 2. We will
use the RDF graph to refer to both a set of RDF triples and its directed labeled
graph representation throughout the rest of this paper.
Definition 2. Let T be a set of RDF triples. The directed labeled graph
representation of T is G = (V, E, lV , lE), where
V = {vx|x  subject(T )  object(T )}
E = {es,p,o|(s, p, o)  T}

lV (vx) =(x, dx)

x

if x is literal (dx is datatype identifier)
else

from(es,p,o) = vs, to(es,p,o) = vo, and lE(es,p,o) = p

V is the set of vertices in G. E is the set of directed edges. lV and lE are
labeling functions on V and E. subject(T ) and object(T ) are used to achieve all
the subjects and the objects in T . Function from() and to() return the starting
and ending vertex of an edge.
However, for the same ontology, an RDF graph and an ontology graph are
unequal. Suppose an ontology consists of a relation manage linking from
Project Admin to Project. The ontology graph is shown in Figure 2. To express the same semantics, an RDF graph needs two triples (manage, rdfs:domain,
Project Admin) and (manage, rdfs:range, Project) as shown in Figure 3.

The difference lies in that, for an ontology, a relation does not exist as a directed edge but a vertex in an RDF graph. A relation is associated with a concept

G. Wu et al.

Project_Admin

manage

Project

Project_Admin

rdfs:domain

manage

rdfs:range

Project

Fig. 2. An ontology graph representation

Fig. 3. An RDF graph representation

by the semantics of rdfs:domain or rdfs:range (the concept is named domain or
range accordingly). Such indirect relationships will hinder the importance propagation during the ranking, because there is no path between the domain and
the range. Hence, we propose a map function  to map an RDF graph to an
ontology graph in Definition 3.
Definition 3. Let G = (V, E, lV , lE) be the RDF graph of an ontology O. We
define a map  : G  G as follows: (G) = (V,E, lV , lE) where,

V = V,
E = {es,p,o|es,p,o  E  lE(es,p,o) = rdfs:domain  lE(es,p,o) = rdfs:range}

lV = lV ,

 EDR  ED  ER,

EDR = {es,p,o|ep,rdfs:domain,s  E  ep,rdfs:range,o  E},
ED = {es,p,keg:Sink|ep,rdfs:domain,s  E  ep,rdfs:range,o  E},
ER = {ekeg:Source,p,o|ep,rdfs:range,o  E  ep,rdfs:domain,s  E},
es,p,o  E , from(es,p,o) = vs, to(es,p,o) = vo, and lE (es,p,o) = p

Here, keg:Source and keg:Sink are defined to be the virtual domain and range of
those relations having no domain or range defined explicitly.

Each edge in the output ontology graph is an RDF triple. Therefore the same
relation can be distinguished between different domain concepts and range con-
cepts. The map removes those edges taking rdfs:domain or rdfs:range as their
labels, while adds new labeled edges to directly link the domains to the ranges
according to the rules in Definition 3. In this way, (G) presents an ontology
graph that preserves the semantics of G and makes it easy for ranking. Thus,
the RDF graph in Figure 3 can be mapped to the ontology graph in Figure 2. In
fact, our running example shown in Figure 1 is mapped from a real ontology2.

3.3 Model Description

The creation of an ontology is a composition process where the creator operates
with a set of concepts and relations. Hence, the ontology could be considered
as the image of the creators own understanding of the knowledge, just like
a literary work to its author. This phenomenon of human consciousness can
be best explained with William James famous stream of consciousness theory
[12]. He observed that human consciousness has a composite structure including
substantive parts (thought or idea) and transitive parts (fringe or penumbra), and
keeps moving from thought to thought. Transitive parts play an important role
in controlling the orderly advance of consciousness from one thought to another.

2 http://keg.cs.tsinghua.edu.cn/project/software.owl
?

?

?
By analogizing concepts and relations to substantive parts and transitive parts,
the creation of an ontology could be described as drifting on the stream of the
creators consciousness of the domain knowledge from one concept to another
via a particular relation. The initially created concept has a certain possibility of
being one of the creators emphasis (suggestions to users). For the concepts to be
suggested, the creator would always like to create more relations to describe its
relationships with other concepts. Consequently, ontology users will implicitly
follow the creators stream of consciousness for understanding the ontology.

We characterize four features for potentially important concepts and relations
which drive the drift on the stream of consciousness. It turns out to be our model
for Concepts And Relations Ranking (the CARRank model):

1. A concept is more important if there are more relations starting from the

2. A concept is more important if there is a relation starting from the concept

to a more important concept.

concept.

concept.

3. A concept is more important if it has a higher relation weight to any other

4. A relation weight is higher if it starts from a more important concept.
There are three meanings here. First, it explains what is important (or alternatively interesting). In this paper, term importance is used as a metric for
measuring the extent that the ontology creator suggests a concept or relation
to users. Second, a concept is regarded as a source that owns a set of relations
related to other concepts. We refer to this character as the hub like that in HITS
[13]. Finally, concepts and relations exhibit a mutually reinforcing relationship.
In our running example, concepts Project, Project admin and Devel-
oper are more attractive because they either have abundant relations to other
concepts (e.g. Project), or locate deeply in the subsumption hierarchy (e.g.
Project admin), or have a relation to other attractive concept (e.g. Devel-
oper). Accordingly, relation manage between Project and Project admin
becomes more meaningful. These observations coincide with the creators comment that declares to emphasize the relationship between developers and projects.
Our inquiry to the creator about the design process is answered as follows: First
defined the concept Project with some decorative literals such as Version and
Usage statistic. Next, provided another concept Developer to complement
the description of Project through a relation developed by from Project
to Developer. Then, a hierarchy was built about Developer from Person
to Project admin. The process continued until all information was included.

3.4 Semantic Abilities

By using  mapping, any RDF-based ontology, like RDF Schema, DAML+OIL,
and OWL (including three increasingly-expressive sublanguages: OWL Lite,
OWL DL, and OWL Full), can be ranked with the CARRank model. In the
section of experiments, we will further analyze the ranking results of CARRank
for the same ontology in three languages with different expressive powers.

G. Wu et al.

Furthermore, CARRank even has the ability to support axioms expressed
as rules, e.g. SWRL [22] rules, because there exists RDF-compatible modeltheoretic semantics [15] of SWRL by which we can interpret SWRL rules in the
framework of RDF graphs. In a broad sense, any inference scheme for ontology
is supported by CARRank, if it is resolvable on the level of RDF graphs.

Moreover, since a relation is represented as a vertex in an RDF graph, and
then kept in the ontology graph after  mapping, the hierarchies and properties of relations will also impact the global importance of these relations. That
means if there is a deeper hierarchy or more properties for a specific relation,
the importance of that relation is higher. Here, whereas we only concern about
the comparison locally among relations starting from the same concepts rather
than globally among all relations, because the importance may be quite different
when associated with different concepts.

Finally, since ontology understanding is affected by many factors, here the

importance only means some potential to be important in our context.

4 CARRank Algorithm
Definition 4. Suppose an ontology graph G has |V| = n  1 concepts v1, ..., vn 
V. The adjacency matrix representation of G, A = (ai,j), is a n n matrix
where 1  i, j, k  n and
?

?

?
ai,j =

if ei,k,j  E,

0 otherwise.

(1)
?

?

?
0 < wi,j  1
wi,j = 0

Let w(vi, vj) be a relation weight function, and wi,j = w(vi, vj) be the weight of
all relations from vi to vj. The relation weight matrix representation of G,
W = (wi,j), is a n  n matrix where 1  i, j, k  n, and
if ei,k,j  E,
otherwise.

(2)
Definition 5. For any concept vi  V, the forward concepts of vi are defined
as Fvi = {vj|vj  Vei,k,j  E}, and the backward concepts of vi are defined
as Bvi = {vj|vj  V  ej,k,i  E}.
Definition 6. Suppose an ontology graph G has |V| = n  1 concepts v1, ..., vn.
Let r(vi) be an importance function on V, and ri = r(vi) be the importance value
of vi where 0  ri  1,
ri = 1, and W = (wi,j) be the relation weight matrix.
We call R = (r1, ..., rn) the ontology graph Gs concept importance vector ,
and Li = (r1wi,1, , rnwi,n) the concept vis relation importance vector .
It is possible that there exists more than one relation from concept vi to concept
vj. Therefore, rjwi,j is the total importance value of all the relations from concept
vi to concept vj. Suppose there are m > 0 such relations, ei,k1,j, ..., ei,km,j. We
m for any 1  l  m.
define the importance of individual relation ei,kl,j to be rjwi,j
?

?

?
Since a concept, like a hub according to the first two features of our model,
sinks the importance of other concepts, the computation for the importance is
totally the reverse of the process in PageRank. In fact, CARRank traces the
stream of consciousness reversely similar to the idea of Reverse PageRank [10].
The difference is that it updates the weight of relations during the iteration
according to the last two features of the model. Given an ontology graph G =
(V,E, lV , lE), after k (k = 0, 1, 2, ...) iterations, the importance of a concept s  V
and the weight of relation(s) from s to another concept t  V are written as
rk+1(s) and wk+1(s, t) respectively. They are recursively evaluated in Equations
3 and 4.

wk+1(s, t) =

rk+1(s) =

rk(s)

rk(ti)

tiBt

1  |V| + 

rk(ti)wk+1(s, ti)

(3)

(4)
?

?

?
tiFs

Like PageRank-like algorithms, we use a damping factor 0 <  < 1 as the
probability at which CARRank will get bored of reversely tracing the stream of
consciousness and begin looking for another concept on the ontology graph.

For any initial distribution of concept importance vector R0 = (r0

Equations 3 and 4 reflect the features of our potentially important concepts
and relations model. Equation 3 formalizes the last feature, which computes the
weight of relation(s) starting from concept s to concept t at the (k+1)th iteration.
The weight is in proportional to the importance of s and in the inverse ratio of the
sum of all importance of ts backward concepts at the kth iteration. Therefore, an
important concept will increase the weight of those relations starting from itself.
Equation 4 formalizes the first three features, which compute the importance
of concept s at the (k + 1)th iteration. The importance consists of two parts.
One is contributed by all the importance of ss forward concepts and the weight
of relations from s to the forward concepts with probability . The other is
contributed by some independent jump probabilities (here is 1|V|) when CARRank
leaves the current stream of consciousness with probability 1  .
n),
2, ..., r0
we have proved3 that the iterative sequence {Rk | k = 0, 1, 2, ...} will converge
to R which is the solution of this non-linear equations, i.e. the final result
of concept importance vector. Correspondingly, W is the final result of the
relation weight matrix. In numerical analysis, it is reasonable to take Rk+1 as
the approximation of R and stop the iterative process, if the difference between
two successive iterations  Rk+1  Rk  is small enough. Thus ranking the
importance of the concepts is performed by sorting the entries in R. With a
slight effort, ranking the importance of the relations related to certain concept
is performed by sorting the entries in the relation importance vector which is
computed with W and R.
3 For the details of the proof, see our technical report [24]. The proof indicates that
CARRank is a flexible algorithm for evaluating the importance of vertices and edges
simultaneously in any kind of directed graph.

1, r0

G. Wu et al.

Let A be the adjacency matrix representation of an ontology graph4, and S be
the initial concept importance vector. In terms of Equation 3, 4 and the above
descriptions, we present the CARRank algorithm as follows.

CARRank(A, S)
1 R0  S, W0  0, k  0
?

?

?
repeat

  ARk
for i  1, 2, ..., n

do for j  1, 2, ..., n
= 0

do if k
i,j
then wk+1
i,j

 rk
i
k

i,j

Rk+1  Wk+1Rk
d  Rk1  Rk1
Rk+1  Rk+1 + dE
  Rk+1  Rk1
k  k + 1

until  < 

return (Wk, Rk)

The algorithm consists of two parts, the update of the relation weight matrix
(line 3 to 7) and the update of the concept importance vector (line 8 to 10). k
i,j is
the sum of ranks of concepts which are is backward concepts at step k. Damping
factor  in Equation 4 is represented in vector as E where E1 = . Ignoring the
differences in concepts, E is usually a uniform distribution. Threshold 0 <  < 1
controls the termination of the iteration. The algorithm returns Rk and Wk as
the limits of the concept importance vector and the relation weight matrix.

5 Experiments

We study the feasibility of CARRank from three aspects: ranking qualities, semantic abilities, and efficiencies.

5.1 Experimental Settings
Evaluation Metrics. The metric for measuring the efficiency of ranking algorithms is the number of iterations k that minimizes the difference between two
successive iterations  Rk+1  Rk  to a given threshold . A smaller k indicates
a faster convergence.

In order to measure the quality of concepts ranking results, we employ a
variant first 20 precision metric [14]. The improved first 20 precision, P @20 =
n1320+n41017+n112010
, assigns different weights for the first 3, the next 7,
and the last 10 results to increase the value for ranking effectiveness.

Similarly, we define P R = cC120
|C120|

to measure the quality of relation
ranking results, where C120 is the relevant concepts in the first 20 most important concepts, and mc is the count of relevant relations in the first 5 most
important relations starting from concept c.

mc

4 A is obtained by parsing an ontology file into an RDF graph, and mapping it to an

ontology graph, and finally constructed according to Definition 4.
?

?

?
A higher value of P @20 or P R means a better quality of ranking the impor-

tance of concepts or relations.
Ranking Methods. Most of the related work in Section 2 are not specific for
ontology understanding as shown in Table 1. Appropriate modifications are made
in order to make them comparable. 1) We choose the standard PageRank(PR)
algorithm [5] on behalf of those PageRank-like algorithms. 2) We extract the
importance based labeling method from [20] which represents the methods that
only consider concept hierarchy(CH). 3) AKTiveRank [1] algorithm is modified by only considering the aggregation of density and betweenness measures
(DEM+BEM) for each concept as the importance. CMM and SSM are irrelevant to the task of ontology understanding.
Experimental Environments. The experiments were carried out on a Windows 2003 Server with two Dual-Core Intel Xeon processors (2.8 GHz) and 3GB
memory. For some ranking methods, let damping factor  = 0.85, and threshold
 = 1  106 by default.

5.2 Ranking Qualities

To evaluate our proposed approach, we tried to collect representative ontologies
and their accurate answers (a list of ranked concepts and relations) as possible as we could. In this experiment, four representative ontologies from the
SchemaWeb5 dataset are selected as shown in Table 2. OWL is a well-known
meta ontology. Software Project is a full version of our running example which
has a small number of concepts and relations, while, Copyright Ontology and
Travel Ontology are more complex.

Table 2. Four ontologies

Concept# Property#

Software Project
Copyright Ontology
Travel Ontology
?

?

?
http://www.w3.org/2002/07/owl.rdf
http://keg.cs.tsinghua.edu.cn/persons/tj/ontology/software.owl
http://rhizomik.net/ontologies/2006/01/copyrightonto.owl
http://learn.tsinghua.edu.cn:8080/2003214945/travelontology.owl

We take the ontology creators feedback to the ranking task as the reference
answers. We sent emails to the four contact creators, and got three ranks (for
Software Project, Copyright Ontology, and Travel Ontology) and one suggestion
(the creator of OWL recommended [23] as his answer) back in their replies. In
our inquiry email, the following ranking instruction is described:

For each ontology file, list top 20 (or as many as you like) important
concepts (with URI) of your ontology in your mind. And for each top
concept, please give top 5 (or as many as you like) important relations
(with URI) for that concept.

5 http://www.schemaweb.info/

G. Wu et al.

Table 3. The importance of concepts  Software ontology

Rank Reference Answer PageRank
?

?

?
Project
Member
Developer
Category
Public forum
LastestNew
Message
Version
homepage
Usage statistics

DEM+BEM
Project
Usage statistics Usage statistics Category
Developer
Statistic record Message

Message
has usage statistics
statistics bugs
statistic record support Statistic record Developer
Category
Member
Project
Release package Person
Developer
Category
super category
page views

Member
Message
Public forums Member
Member
Developer
Message
Person
Category
Project admin
Help
Project admin Public forums Public forums

User Study
Project

CARRank
Project

Discussion
Help

Table 4. The importance of relations  Software ontology

User Study

Ranking results
CARRank
has usage statistics project homepage
developed by
belong to category activity ranking
translations
intended audience
post message

has public forum
has usage statisitics
person name

title

Top 5

Concepts

Reference Answer

1 title
2 summary
3 activity ranking
4 project homepage
5 project of statistic
1 login name
2 publicly displayed name site member since
3 email address
4 user id
5 site member since
1 skills
2 project role
?

?

?
1 hasProject
2 category name
3 super category
4 sub category

1 hasMessage
2 belong to project
Public Forum 3 project of forum

hasProject
sub category
super category
category name

login name
email address
publicly displayed name
member of project
project role
skills
user id

Developer

hasMessage

Category

Project

Member
?

?

?
person name

super category
sub category
category name
hasProject

hasMessage

With these reference answers, we compare CARRank with the four other ranking methods mentioned above and a user study. The user study was conducted
on 5 volunteers whose research interests include the Semantic Web. We provided
each volunteer the four ontologies that they never knew about before, in their
original file formats, e.g. RDF or OWL. And then, for each ontology, volunteers
were required to independently give the top 20 important concepts and the top
5 important relations for each top concept as their own ranking results. In this
way, given one of the four ontologies, for each volunteer, we can computed a
P @20 value and a P R values according to his/her ranking results. The arithmetic means on five P @20 values and five P R values are used to represent the
corresponding metrics of the user study.

Table 3 and 4 present the comparisons on concepts and relations ranking for
a full version of our running example. Here, we choose one of the five ranking
results collected in the user study which has the highest P @20 value.

Items listed in italic bold font are relevant ranking results. In Table 3, there are
5 relevant items in the first 10 ranking results for PageRank, 7 for DEM+BEM,
7 for CARRank, and 6 for the user study. Obviously, CARRank and DEM+BEM
?

?

?
both have better ranking qualities than the user study. It means that they can
somewhat support the ontology understanding. It also shows that PageRank
is not a proper method in ranking the importance of concepts with less relevant results than the user study. Both CARRank and DEM+BEM rank concept
Project the first place. The major difference of their results is that DEM+BEM
considers Person and Project admin, while CARRank considers Help and
Release package. However, Person is relatively not important in this ontology because it is a base class of Developer and Member in the class
hierarchy and rarely instantiated. PageRank fails in ranking Project the first
place, which greatly lower its ranking qualities.

As the other four ranking methods do not directly support to rank the importance of relations, Table 4 only gives the comparisons of CARRank and the
user study. It lists the first 5 relations (if available) starting from each concept of
the first 5 concepts in the reference answers6. Apparently, CARRank can better
reflect the importance of relations except for the concept Project, since its
ranking results are closer to the reference answers most of the time. For concept
Project, several owl:DatatypeProperty type relations, e.g. title, summary,
activity ranking, and project homepage, are given in the reference answers.
Such relations usually link to those simple data type values which have no outgoing edges hence very low importance as concepts. Therefore, according to
Equation 3, owl:DatatypeProperty type relations are assigned low importance.
We believe that it is beyond the scope of link analysis ranking algorithms.

We further examine the quality of ranking results with P @20 and P R. The
comparisons are illustrated in Figure 4 and Table 5. CARRank has some affirmative ability for helping ontology understanding, because it obtained a better
result than the user study did. Though the precision of CARRank for Software
is only about 4 percentage higher than that of users decision, the degree of the
support will be amplified along with the increase of the ontologys scale and complexity as shown in Figure 4. We find users can hardly decide the top important
?

?

?
~P
@

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0.0

 DEMBEM

 CARRank

Table 5. The Comparison of
Ranking Relations

CARRank User

copyright
software

0.06
0.586

0.562

owl

software

copyright

travel

Different Ontologies

Fig. 4. The Comparison of Ranking Concepts

6 In fact, every concept listed in Table 4 has more than five relations except Pub-
lic Forum. However, the creator could not provide us more relations than the reference answers.

G. Wu et al.

concepts for Copyright Ontology for its complexity. Obviously, CARRank is
helpful in this case. Another interesting observation is that our algorithm is also
effective to those meta ontologies like OWL.

5.3 Comparison of Semantic Abilities

To exhibit the semantic abilities of CARRank, we generate three variations of
FOAF ontology7, i.e. OWL-Full, OWL-DL, and OWL-Lite, with a tool named
foaf cleaner [2]. Then, CARRank is applied on the three versions of FOAF and
the original FOAF. Results are shown in Table 5.

Original OWL-Full OWL-DL OWL-Lite

Person

Document

Organization

Project
Agent

OnlineEcommerceAccount 6
OnlineChatAccount
?

?

?
OnlineGamingAccount
OnlineAccount

PersonalProfileDocument 10

Image
Group

Pearson Correlation Coefficients
?

?

?
0.867
?

?

?
1.0
?

?

?
1.0

Table 6. Top 10 Concepts for

Rank
?

?

?
Concepts

RNAPolymerase
ExtensionOf-C-Regular
ClosedUnderGeneralizations-Classical
NetworkPortNumber
SimpleWord
GLFGraph
BrigadeOrRegimentSized
BrigadeOrRegimentSized
ExtensionOf-K-Normal
GLFAnalysisDiagramGraph

Fig. 5. Top 10 Concepts for FOAF

There are totally 12 concepts involved. The values in the first two columns
are the concepts and their ranks produced by applying CARRank on the original
FOAF ontology. The values in the last three columns are the ranks for the three
versions. We use the Pearson Correlation Coefficient to measure the similarity of
ranking results between one OWL version and the original version. The ranking
results for the OWL-Full and OWL-DL are the same as that for the original
one, though owl:imports of the OWL and RDFS ontologies are removed from the
original, and owl:InverseFunctionalProperty on owl:DatatypeProperty is removed
from OWL-Full. The only affection happens to the ranking results of OWL-Lite
when owl:disjointWith is removed from OWL-DL. However, the similarity is still
over 85%. This indicates that CARRank can capture most of the semantics even
when the language expressive power changes.

Another challenge for semantic abilities of CARRank is to rank large scale
ontologies, e.g. CYC8 (23.7MB). Large scale ontologies are always developed
collaboratively by many creators for a long time. Because of the limitations of
individual creator and the limitation of the time, a global design intention may
be unstable or even inconsistent. The interesting ranking results of CYC are
listed in Table 6. There are 30432 classes and properties defined with 254371
RDF triples. It seems that CARRank ranks higher some abstract concepts for

7 http://xmlns.com/foaf/spec/
8 http://www.cyc.com/2004/06/04/cyc
?

?

?
their complicated class hierarchy constructed with rdfs:subClassOf. Although it
is hard to determine the quality of ranking results for such large scale ontology,
we still suggest to use CARRank to periodically rank the concepts during its
composition in order to discover early the deviation of design intention.

5.4 Efficiencies

Convergence Comparison. Figure 6 presents the comparisons among PageR-
ank, Reverse PageRank, and CARRank. Rankings are performed on Relation-
ship9 ontology which has 169 vertices and 252 directed labeled edges in its
ontology graph. Obviously, CARRank and Reverse PageRank have conformable
convergent speed because both consider the hub score instead of authority score.
The only difference is that the additional time spent on updating the relation
weight matrix makes CARRank a little slower than Reverse PageRank.

On the other hand, the convergent speed of both CARRank and Reverse
PageRank are quite different from that of PageRank. The reason is that PageRank considers authority score instead of hub score. Therefore, the convergent
speed may be various with respect to the topological structure of the ontology graph. In Figure 6 the convergent speed of PageRank is much faster. How-
ever, take UNSPSC10 ontology on SchemaWeb for another example. There are
19600 vertices and 29386 directed labeled edges. As shown in Figure 7, CARRank
and Reverse PageRank express the same convergent speed and converge to the
threshold early than PageRank. In any case, the convergent speed is acceptable
for CARRank.

Fig. 6. Convergence (Relationship)

Fig. 7. Convergence (UNSPSC)

6 Conclusion and Discussion

CARRank is a simple yet effective algorithm for identifying potentially important concepts and relations in an ontology. The experimental results show the
feasibility of CARRank from the ranking qualities and the semantic abilities.

9 http://purl.org/vocab/relationship/
10 http://www.ksl.stanford.edu/projects/DAML/UNSPSC.daml

G. Wu et al.

Although ontology understanding means much more than our proposed solu-
tion. we expect CARRank to be a preliminary step towards identifying potentially
important concepts and relations user-independently. In addition, we also agree
that being user-independent may not meet all the needs of application. Fortu-
nately, CARRank can be personalize by letting user provide a sub-graph of the
ontology which mainly contains the concepts and relations concerned about. It
would be interesting to explore the ranking based on users tasks and needs in
the future work.

Acknowledgments

We would like to thank all the ontology creators who contributed their ranking
results, and all the reviewers for their constructive comments and suggestions.
