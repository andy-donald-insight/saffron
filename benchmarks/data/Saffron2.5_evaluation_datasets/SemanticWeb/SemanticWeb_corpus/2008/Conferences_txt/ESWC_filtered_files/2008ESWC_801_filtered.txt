Cicero: Tracking Design Rationale in
Collaborative Ontology Engineering

Klaas Dellschaft, Hendrik Engelbrecht, Jos e Monte Barreto,

Sascha Rutenbeck, and Steffen Staab

Universit at Koblenz-Landau, ISWeb Working Group

{klaasd,engelbrecht,monte,srutenbeck,staab}@uni-koblenz.de,

Universit atsstr. 1, 56070 Koblenz, Germany

http://isweb.uni-koblenz.de

Abstract. Creating and designing an ontology is a complex task requiring discussions between domain and ontology engineering experts as well
as the users of an ontology. We present the Cicero tool, that facilitates
efficient discussions and accelerates the convergence to decisions. Fur-
thermore, by integrating it with an ontology editor, it helps to improve
the documentation of an ontology.

1 Introduction

Creating and designing an ontology is a complex task that requires the collaboration of domain and ontology engineering experts. For coming to a consensual
model of a domain that is expressed by an ontology, the participants in the engineering process must discuss their different viewpoints in an efficient manner.
Thus, discussions are an important part of collaborative ontology engineering.
In the following, we will present the Cicero tool that has been developed in
the context of the NeOn project.1 It facilitates an asynchronous discussion and
decision taking process between participants of an ontology engineering project.
Two main objectives of capturing discussions in Cicero can be distinguished:

 Higher efficiency: Cicero supports its users in discussing the design rationale
of ontologies. The whole discussion including the pro and contra arguments
is recorded, leading to fewer redundancies in disputes. It has been shown
that the applied discussion methodology facilitates efficient discussions and
accelerates convergence to a solution.

 Enhanced documentation: The captured discussions reflect the design rationale of an ontology. By attaching a discussion to the entities in the ontology,
it is possible later to understand why certain elements are modeled as they
are. Furthermore, prior discussions can easily be resumed if e. g. new requirements have to be taken into account.

1 http://www.neon-project.org/. This work has been supported by the European

project Lifecycle Support for Networked Ontologies (NeOn, IST-2006-027595).

S. Bechhofer et al.(Eds.): ESWC 2008, LNCS 5021, pp. 782786, 2008.
c Springer-Verlag Berlin Heidelberg 2008
?

?

?
The first objective is accomplished by the Cicero tool itself.2 Its underlying
argumentation model and discussion workflow are described in section 3 and 4.
The second objective is accomplished by integrating Cicero with an ontology
editor, which is described in section 5.

2 Use Case

Examples for collaborative ontology engineering are the development processes
of the AGROVOC thesaurus3 or the Gene Ontology4. They are both maintained
by teams of ontology engineers and domain experts that are coordinated by a
central organization like FAO or the Gene Ontology Consortium respectively.

The world-wide users of the publicly available ontologies can influence their
further development by e. g. proposing new terms or definitions for inclusion
or by suggesting the reorganization of sections of the ontologies. The issues
are then discussed between the members of the maintenance team. During the
discussion, it may be necessary to ask the issue creator for further clarification
or for commenting on the proposed solution(s).

3 Cicero Argumentation Model

The argumentation model, that is underlying the Cicero tool, is based on the
DILIGENT argumentation framework [1] and the Potts and Bruns model [2].
They are both extensions of the idea of the Issue Based Information Systems
[3,4]. All these models help in structuring an issue or problem and to simultaneously derive possible solutions with the help of discussions.

On the one hand, the Potts and Bruns model extends the IBIS approach to
discussions that lead to the creation or change of a concrete artifact (e. g. elements in an ontology). The discussion serves as a connection between the old and
the new version of the changed artifact, thus documenting its design rationale
or provenance. On the other hand, the DILIGENT argumentation framework
amongst others introduces certain argument types to IBIS, that accelerates issue resolution. In [1], it has been shown that participants of a discussion, who
mainly used the identified argument types, needed less time for coming to a
successful conclusion of the discussion.

The Cicero argumentation model combines the general structure for representing discussions from the DILIGENT argumentation framework with the idea of
annotating ontology elements and changes with the corresponding discussions.
In Cicero, a discussion always starts with an issue that is raised by either of
the participants (i. e. ontology/knowledge engineers or users). Subsequently, solutions are proposed and discussed. After some time, it has to be decided which
of the proposed solutions will be implemented in the ontology (see Fig. 1).

2 It can be downloaded from http://isweb.uni-koblenz.de/Research/Cicero/
3 http://www.fao.org/agrovoc/
4 http://www.geneontology.org/

K. Dellschaft et al.

Fig. 1. Prototypical workflow for discussions about the design rationale

4 Using the Model in Cicero

Cicero is an extension of the Semantic MediaWiki. On the one hand, this has
several advantages: For example, one can also use the Wiki for maintaining
documents related to the collaborative ontology engineering, e. g. requirements
documents. Furthermore, the Semantic MediaWiki allows for accessing its contents as RDF streams which is useful for integrating it with other tools like the
NeOn toolkit. But on the other hand, it has to be extended with functionality
that supports the discussion workflow presented in the previous section.

4.1 Discussions

In Cicero exists for each discussion thread an overview page summarizing the
issue and all proposed solutions (see Fig. 2). The page is automatically generated
as soon as a new issue is created. The actual discussion consisting of solution
proposals and arguments then takes place on the talk page of the overview page.
During the discussion, a user can propose solutions of the issue. The different solution proposals can then be supported or objected by all discussion

Fig. 2. Overview page of an issue in Cicero
?

?

?
participants. Three different argument types are supported by Cicero, that have
been identified in [1] as accelerating issue resolution.:

 Example: An supporting or objecting example corresponds to a pattern
that should or should not be imitated. Examples are used for illustrating
similar cases that may serve as a model for the solution to which they reply.
 Evaluation: An evaluation gives criteria which help to assess the strengths

and weaknesses of a solution proposal.

 Justification: A justification describes the relevant circumstances that help

to understand why a certain solution is supported or objected by a user.

4.2 Taking a Decision

After some time of discussion, the decision taking procedure may be started in
Cicero. During decision taking, no new solution proposals or arguments can be
added to the discussion and users with the corresponding access right can cast
their ballot. It depends on the settings of an issue whether users can cast their
ballot for one solution proposal only or for several of the solution proposals.

Two decision taking modes can be distinguished: During preferential voting
mode, all users with the corresponding access right can cast their ballot. The
solution proposal with the most votes is subsequently marked as the decided
solution. During dictator mode, only a single user with the corresponding access
right decides on the solution of the issue.

5 Integration with NeOn Toolkit

The NeOn toolkit5 is an ontology engineering environment that can be easily
extended. Currently, a plugin is being developed that integrates the functionality
of Cicero into the NeOn toolkit.6 The plugin will allow for an easy creation of
new discussions and for searching existing discussions that are related to specific
ontology entities.

For example, if a user of the NeOn toolkit wants to create a new discussion
he may select the ontology entities in the environment that should be discussed,
i. e. the issue gets related to ontology entities. Before actually creating the new
issue, a list of already existing issues related to the selected ontology entities can
then be presented to the user. Thus, he can check whether it is really necessary
to create a new issue or whether it is better to participate in the discussion of
one of the already existing issues.

After a decision is taken, the NeOn toolkit is used for implementing the selected solution proposal. All changed, deleted or added ontology entities get also
related to the discussion, i. e. a provenance relationship between ontology entities
and their design rationale in form of the discussions is established.

5 http://www.neon-toolkit.org/
6 http://www.neon-toolkit.org/wiki/index.php/Cicero

K. Dellschaft et al.

6 Conclusions and Related Work

Aspects of Cicero and its integration with the NeOn toolkit can be compared
with Collaborative Prot eg e [5], Tadzebao and WebOnto [6] as well as Compendium [7,8]. Because of lack of space, the comparison in Tab. [6] is concentrated on the aspects of Cicero highlighted in this paper.

Table 1. Comparison of Cicero with related work

Collaborative Tadzbao &

Prot eg e WebOnto Compendium Cicero

IBIS-based
Arg. Framework

Integration with
Ontology Editor

Establishing
Provenance Links

no

yes

yes

no

yes

no

yes

no

no

yes

yes

yes

Altogether, Cicero helps with its IBIS-based argumentation framework to have
better structured and more efficient discussions. Furthermore, the integration
with an ontology editor leads to a better support of the ontology engineering
lifecycle in which discussions about the design rationale of ontology elements
play an inherent role. Finally, Cicero and its integration with the NeOn toolkit
reduces the required effort for establishing the provenance links between design
rationale discussions and the affected ontology elements.
