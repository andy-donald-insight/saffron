Pattern-Based Annotation of HTML-Streams

Florian Schmedding, Max Schwaibold, and Kai Simon

Institute of Computer Science,

Albert-Ludwigs-University Freiburg, Germany

{schmeddi,schwaibo,ksimon}@informatik.uni-freiburg.de

Abstract. Web pages containing RDFa markup facilitate a broad range
of new agents that improve their usability for human readers. Unfortu-
nately, there still exist only few web sites featuring such annotations. In
this paper, we demonstrate Atheris, a system that annotates structured
web pages by means of our web data extraction tool ViPER. Atheris
runs inside a web proxy service, making it transparently available. Our
approach enables the web browserthe mostly used web agentto operate intelligently on the displayed page by providing a semantic view
over previously meaningless data in order to support human readers.

1 Introduction

Many new applications are facilitated by RDFa [1], a recent W3C-recommen-
dation. RDFa-aware agents are able to combine the visual representation of
data with their meaning, thereby offering additional value to users (cf. [2] and
Sec. 3). In this paper, we will demonstrate our approach to annotating structured
web pages to enable the application of such agents. An example is shown in
Fig. 1. It depicts a product list of an online pharmacy with information about
medicine (price, producer, and additional information). Here, an agent could
compare products from other pages with the current products depending on the
users actual interaction with the displayed page and his current focus of interest
(w. r. t. the displayed content or the mouse pointer, for instance).

Fig. 1. Product list excerpt from an online pharmacy

Atheris, our semi-automatic web data annotation tool, recognizes such pattern
structures and annotates the contained data. By implementing it into a web
proxy we make the annotation step invisible to the user and provide a semantic
view on previously not machine-readable web sites.

L. Aroyo et al. (Eds.): ESWC 2009, LNCS 5554, pp. 893897, 2009.
c Springer-Verlag Berlin Heidelberg 2009

F. Schmedding, M. Schwaibold, and K. Simon

_:a a pp:pharmaProduct ;

pp:productLink

ex:shop/Aspirin.html ;

pp:productName "Aspirin" ;
pp:pzn "1738533" ;
pp:manufacturer "Bayer" ;
commerce:costs _:b2 .

_:b a commerce:Price ;

commerce:amount "2.99" ;
commerce:currency "$" .

<tr typeof="pp:pharmaProduct"

xmlns:pp="http://www.example.org/pharma_product#"
xmlns:commerce="http://purl.org/commerce#">
<td><a href="/shop/Aspirin.html"><img

src="/img/Aspirin.png" alt="Aspirin" /></a></td>

<td><a href="/shop/Aspirin.html"

property="pp:productName" rel="pp:productLink"
>Aspirin</a><br />20 pcs.  pills<br />article

no. <span property="pp:pzn">1738533</span></td>

<td><span property="pp:manufacturer">Bayer</span></td>
<td rel="commerce:costs"><table><tr><td>Normal&nbsp;price:

</td><td>3.99&nbsp;$</td></tr></table>

<table typeof="commerce:Price"><tr><td>Your&nbsp;price:
<span property="commerce:amount">2.99</span>&nbsp;
<span property="commerce:currency">$</span></td></tr>
</table></td></tr>

Listing 1. RDF statements for
the pharmacy example

Listing 2. XHTML snippet. RDFa inserted according to Listing 1 appears in bold print.

With RDFa, arbitrary RDF statements [3] can be embedded into XHTML at
any position using the structure and content of the document itself to express
them. We refer to the reference specification in [4] instead of explaining RDFa
and show a reasonable RDF description (Listing 1) and its embedding (Listing 2)
for the before-mentioned example.

1.1 Related Work

Research in the field of web data extraction and annotation has brought up a
broad range of approaches and tools (cf. the surveys in [5] and [6]). Some of
these systems are specialized in extracting relevant data from pages (e. g. Lixto
[7], SparqPlug [8]), but w. r. t. RDFa-agents it is important to include the semantic annotations into the page. For instance, Piggy Bank [9] uses extractions
and is thus unable to adapt the offered functionality to the users current in-
terest. Manual tools like Annotea1 do not fit the requirements either although
Annotea relates the annotations with corresponding page elements by XPointer
expressions. MnM [10] or S-CREAM [11] are better suited. Both are able to add
additional XML-tags around the relevant data but further knowledge is necessary
to convert them into RDF. Similar to PowerMagpie2, they are rather designed
for continuous text than for structured content. Thresher [12] is most related to
our approach yet uses a non-standardized formalism to relate terms and concepts within documents. Other systems like Greasemonkey3 and Chickenfoot
[13] are also adding further functionality to page elements identified by screenscraping techniques. However, this is achieved by hard-coded scripts within the
document.

In contrast, our system uses RDFa to annotate the identified concepts and
relations between them. Hence, its output can be used by existing RDFa-agents
and so is independent from the annotation process. Additionally, Atheris is available as proxy service to provide an easy access for web browsers.

1 http://www.w3.org/2001/Annotea/
2 http://powermagpie.open.ac.uk/
3 http://greasemonkey.mozdev.org/
?

?

?
1.2 ViPER
Our wrapper extraction tool ViPER [14] automatically identifies and extracts
different regularly structured content with high accuracy according to several
visual features. We build Atheris upon it due to its fast and robust pattern
matching algorithm. ViPER was refined into RexViPER [15] to also derive postprocessing rules from the extracted and aligned data. The purpose of these rules
is the automatic labeling of named entities, the splitting of strings, and the
removal of text from data entities to simplify further rule assignments. Rules
can be assigned manually or with a drag-and-drop tool for non-expert users as
implemented in [16]. The generated extraction pattern matching the structure
of the data records in our example is described by the (abbreviated) HTML tag
sequence:
Position
Pattern <TR> <TD> <A> <IMG> </A> </TD> <TD> <A> TEXT </A> <BR> TEXT <BR> TEXT </TD> ... </TR>

...

The attached set of rules (depicted in Listing 3) consists of both automatically
learned rules found with the aid of RexViPER and manually assigned RDFa
annotation rules to enrich the appropriate data items with RDFa semantics.
The first argument of a rule references a pattern element by its position. For
instance, the rule split(32,&nbsp;) splits the content of the 32nd element
according to hard space. Here, the content will be split into Your, price: 2.99, and
$. The resulting substrings can be referenced using the sub-indices 32.0, 32.1 and
32.2. RDFa-specific rules are shown in the next section.

2 Atheris

To annotate pages, Atheris has to extend their structure to make the patterns
data visible to agents instead of disregarding it. Thus, being an extraction
tool, some modifications inside ViPER were necessary to facilitate annotations.
The changes are summarized by three points. First, to insert the RDFa-markup
correctly (mostly attributes and span-elements), we store all tag positions w. r. t.
the HTML-stream. Second, we implement new rules besides adapting the existing
ones to the stored tag positions. Third, to ensure the well-formedness of the
output, changes to the handling of formatting elements like b and i are necessary.

Annotation Rules. Listing 3 represents the rules used to annotate the example page. Additionally, two rules are used to set up the namespaces in the
tr-element. We illustrate the respective results with Listing 2. The rules typeof
and relation insert @typeof into elements 0 and 29 respectively @rel into elements 7 and 18. This suffices to express triples 1, 2, 6, and 7 in Listing 1. The
remaining statements follow from property which delimits the desired literals
by span-tags (except for element 7) and inserts the associated predicate into the
@property-attribute. Rules to declare datatypes or other constructs are not used
here and therefore left out. We want to highlight the join-rule that combines
separated text elements into a single literal: In the example, this could be used
to attach elements 11 and 13 to a predicate like pp:additionalInformation.

F. Schmedding, M. Schwaibold, and K. Simon

typeof(0, pp:pharmaProduct)
property(7, pp:productName)
remove(13, article no.)
relation(18, commerce:costs)
split(32, &nbsp;)
remove(32.1, price:)

relation(7, pp:productLink)
property(13, pp:pzn)
property(16, pp:manufacturer)
typeof(29, commerce:Price)
property(32.1, commerce:amount)
property(32.2, commerce:currency)

Listing 3. Annotation rules

Two or More Patterns. When a web page contains more than one type of
structured information, it is not known in advance which kind of data is going to
be used by agents in the annotation scenario. It is therefore necessary to annotate all patterns before sending the page to the client. We enhanced the pattern
recognition engine in ViPER to execute concurrent parallel pattern matching
threads in spite of running Atheris for each pattern serially. This approach benefits from a better performance by avoiding multiple input parsing.

2.1 Proxy

To deliver the annotated pages easily to web browsers, we decided to implement
an HTTP proxy service due to the transparent access. With the proxy, users
also benefit from sharing the annotation patterns and rules. Incoming requests
are classified as either annotable or others. Not annotable requests are handled
by the proxy4 itself while annotable requests are passed over to Atheris and
processed according to the proxys pattern and rule database.

Like ViPER, Atheris is working on the raw HTML stream in favor of a smaller
latency for the clients. This streaming capability is the reason why it is possible
to use chunked encoding for the annotation handling giving better response times
and thus making the proxy as transparent as possible for clients.

3 Conclusion and Future Work

We have presented Atheris, our system to annotate web pages with RDFa-
markup. Atheris relies on the robust pattern-matching technique of ViPER and
introduces an abstraction layer between web pages and additional functionality
for these pages (changing the appearance, adding information, etc.) by embedding meta data with RDFa. Due to the provided semantic view over previously
not machine-readable data, the web browser can be turned into a semantic user
agent operating on structured pages in a meaningful way that has been impossible before. Because of the clear separation between data and functionality it is
also possible to change either of the components without side effects.

Despite its just mentioned advantages, an HTTP proxy is unable to annotate streams in secure channels (cf. also [13]). It has also limited resources and
can quickly induce a bottleneck under heavy load. Therefore, and because the
primary use of annotated pages would occur in combination with the rendered
presentation, it is an option to implement the system directly inside a browser.
If the annotation step could be performed directly inside the browsers parser,
4 Subclass of Mentalis proxy, http://www.mentalis.org/soft/projects/proxy
?

?

?
this would even improve the performance. Of course, to keep the benefit of col-
laboration, the system should request the patterns and rules from a common
store. To make it available to other RDFa-consuming systems it could be published as web service, too. We are also improving the annotation rules to capture
more cases. For instance, the rule to annotate currencies should implement an
automatic conversion from symbols to the required ISO-4217 literals ($ to USD
in our example) for commerce:currency. Additionally, we are currently working
on a browser plugin that integrates RDFa into the DOM of web pages to identify
the annotated parts of a page with SPARQL queries. This enables the plugin to
show feedback from other agents just beside the annotations.
