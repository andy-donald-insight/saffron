K-Tools: Towards Semantic Knowledge Management 

Sam Chapman1, Vitaveska Lanfranchi2, and Ravish Bhagdev1,2 

1 Knowledge Now Limited, 217 Portobello, Sheffield, S1 4DP, United Kingdom 

2 Department of Computer Science, Regent Court, 211 Portobello, Sheffield,  

N.Surname@k-now.co.uk 

S1 4DP, United Kingdom 

N.Surname@dcs.shef.ac.uk 

Abstract.  This  paper  details  the  use  of  Semantic  Web  tools  for  supporting 
networked  knowledge  acquisition,  search  and  sharing  in  large  distributed 
organisations.  The  demonstration  will  showcase  from  a  user  perspective  an 
application  developed  to  aid  knowledge  management  in  large  organisations, 
detailing the problems and technical solutions employed.  

Keywords: Semantic Web, Search, Forms, Knowledge Management, Business 
Intelligence, K-Now, K-Tools, Knowledge Capture, Enterprise. 

1   Introduction 

The amount of information that large organisations need to collect and store in digital 
archives and repositories is growing exponentially. Traditional knowledge management 
and  sharing  practices  fail  to  address  this  data  explosion:  centralised  fixed  capture 
methodologies  struggle  to  cope  with  dynamic,  varied  and  specialised  knowledge  (i.e. 
the  long  tail  of  an  organisations  knowledge).  Although  such  knowledge  is  highly 
variable  it  is  also  essential  to  specific  parts  of  organisations  that  want  to  share  and 
collaborate  using  it  in  conjunction  with  existing  centralised  knowledge.  Many 
organisations attempt to capture this growing knowledge in shareable digital formats to 
encourage reuse. Semantic wikis [1] are sometimes utilised but they require training and 
time  to  use,  lack  integration  with  pre-existing  knowledge  representations  and  do  not 
encourage knowledge integration and discovery across an organisation.  

We propose a general knowledge lifecycle management methodology where Semantic 
Web  Technologies  are  adopted  to  improve  efficacy  and  efficiency  in  preserving  and 
sharing  organisational  memory  [2].  We  therefore  introduce  a  new  framework  for 
knowledge management, K-Tools, which uses Semantic Web Technologies to empower 
distributed  networked  representation,  capturing,  retrieval  and  sharing  of  knowledge 
within  large  enterprises.  K-Tools  is  described  in  detail  (including  technologies  and 
implementation choices), followed by the demonstration plan. 

2   K-Tools 

K-Tools  is  a  Semantic  Knowledge  Management  Framework  that  targets  the  whole 
knowledge  lifecycle  in  an  easy  and  usable  way,  thus  maximising  the  potential 
adoption inside an organisation. K-Tools is composed of two main technologies:  

L. Aroyo et al. (Eds.): ESWC 2009, LNCS 5554, pp. 806810, 2009. 
 Springer-Verlag Berlin Heidelberg 2009 
?

?

?
1)  K-Forms supports knowledge acquisition and representation (the definition of 
the knowledge structures, e.g. an ontology) as well as capture (the creation of 
instances);  

2)  K-Search  enables  flexible  searching  and  sharing  of  information  and 

knowledge across differing views, perspectives and documents.  

Both tools use the concept of forms as the user interaction paradigm. Form-based 
solutions  are  very  familiar  to  users  being  very  common  in  knowledge  management 
and in every-day life therefore they are very easy to understand and use. 

2.1   Key Technologies Adopted in K-Tools 

K-Forms  supports  knowledge  acquisition  allowing  easy  creation  and  deployment  of 
web forms that can instantly be used to capture knowledge at its generation time.  

Forms are divided into sections and fields. Sections having further subsections and 
fields, e.g. the section designed to hold data about a person will be a concept; a person 
will  have  a  series  of  properties  e.g.  name,  address  and  date  of  birth.  Sections  are 
presented as sub-forms to be filled. Fields are typed (e.g. text field, integer field, text 
area,  checkbox,  option  list,  etc.).  Fields  represent  meta-properties  of  the  document 
(e.g. author, date, etc.) or its content (e.g. an issue to be reported). Simple fields will 
require just the inputting of a value at filling time (a number, a string, a text, a date, 
etc.). When a field is defined, the user selects a field type and must input appropriate 
properties  for  the  specific  field  (e.g.  size,  validation  constraints,  default  value,  help 
text, etc.).  If parts of an existing form are imported, the system automatically imports 
any associated constraint (e.g. on data types).  

When a form is created (see Figure 1), K-Forms translates a template into an OWL 
Ontology  with  the  form  being  represented  as  an  OWL  class  (<FormName>  Class) 
with  its  own  NameSpace  to  avoid  name  conflicts.  Form  sections  are  represented  as 
OWL classes (<ConceptName> Class) which can have subsections (related classes) 
or individual fields (properties). Relations between concepts are represented as OWL 
relations between classes.  Adding relations between parents (section or entire form) 
and the contained subsections (object type properties) enables reuse of entire sections. 
Relational  tables  can  be  represented  as  advanced  sections.  The  domain  of  some 
relations may be the overarching <FormName> Class. When concepts are introduced 
at the top level, a relation is formally created domain <FormName> Class and range 
<ConceptName> Class. Individual fields (such as text box, text area, check box) can 
be added as a property of each section, subsection, or directly in form classes; they are 
represented  as  OWL  properties.  Some  of  them  (as  FormCompilationDate)  are 
properties  of  the  overarching  <FormName>  Class.  Restrictions  can  be  set  for  the 
possible  values  of  the  individual  fields  using  xml  datatype  schema  (for  example 
declaring  a  type  to  be  a  positive  integer).  Again  individual  fields  can  be  reused 
between 
forms, 
owl:equivalentClass is created. This is due to the fact that uses may reuse the concept 
but change non conceptual details regarding its visualisation.  

forms  and  classes.  When  concepts  are 

reused  across 

S. Chapman, V. Lanfranchi, and R. Bhagdev 

 

Fig. 1. K-Forms showing the generation of a new form 

 

When (parts of) a form are reused (see Figure 1), an explicit mapping between (parts 
of) the two underlying ontologies is established. This means that instead of creating new 
concepts into the form namespace, the new ontology will use the concept in the other 
forms namespace.  If the concept is modified, then a link between the two concepts is 
maintained  by  automatically  creating  a  meta-class  capturing  the  common  parts.  This 
may happen either at the single concept level or at the whole form level. This creates 
automatically a network of interconnected ontologies.  

Knowledge  acquisition  using  the  new  form  is  then  realised  by  transforming  all 
input  data  into  RDF  statements  related  to  the  form  ontology,  which  can  then  be 
searched using standard query languages such as SPARQL and SERQL. This allows 
all  captured  knowledge  to  be  automatically  linked  across  an  organisation  for 
instantaneous reuse. K-Forms is described in detail in [3].  
 

Fig. 2. The Ontology (left) produced by K-Forms after a new form is created can be instantly 
viewed in K-Search for searching newly generated knowledge 

 
?

?

?
After knowledge has been stored, it can be searched and explored using K-Search 
(see Figure 2). Going beyond keyword approaches, K-Search enables Hybrid Search 
(HS) [4] over multiple repositories at once, from the perspective of a document type, 
a departmental view, a personal view or from a full company ontology. In HS, users 
can combine within the same query:  

(i) 
(ii) 
(iii) 

ontology-based search;  
keyword-based search and  
keyword-in-context based search.  

Ensuring consistency in the framework, K-Search has been designed following the 
same  form-based  interaction  paradigm,  providing  an  interface  that  allows  users  to 
flexibly  query  conditions  on  both  structured  knowledge  and  unbounded  keywords 
within the same query. 

The query output of K-Search is a set of ranked documents displayed as a list on 
the mid-right panel of the interface; each item in the list is identified by the values in 
the  metadata  that  satisfy  the  ontology-based  search.  Moreover,  K-Search  provides 
ways of inspecting the results of the query as bi-dimensional graphs (pie or bar chart) 
according  to  two  elements  e.g.  issue  and  component);  items  in  the  graph  (e.g.  pie 
chart  slices)  are  clickable  to  focus  on  the  associated  subset  of  data  (e.g.  associated 
documents or data). The retrieved triples can be exported if needed (in RDF, CSV or 
XLS formats) for external analysis or automated processing. K-Search is described in 
details in [4].  

3   System Demonstration 

The demonstration focuses on showing how K-Tools fit the dynamic needs of large 
organisations,  collecting  knowledge  across  multiple  sites/departments  with  various 
changing  focuses.  For  demonstration  purposes,  K-Tools  will  utilise  data  from  preexisting industrial applications and then show in real-time how pre-existing forms can 
be modified or reused and how newly created content can be queried in a flexible way 
alongside pre-existing knowledge. 

The  system  will  be  demonstrated  from  a  user  perspective,  showing  through  K-
Tools  interfaces  how  a  single  user  within  a  large  organisation  can  create  forms, 
distribute  them,  fill  them  and  search  the  available  knowledge.  The  underlying 
technology will be explained at each stage (although normally hidden in such a way 
as to allow any user within an organisation to use the system with minimal training). 

Firstly from the point of capturing new knowledge relevant to an individuals task, 
e.g.  a  simple  form  design  process  whereby  a  user  can  create/reuse/modify  fields  or 
sections  of  forms  previously  entered  and  then  use  them  as  they  wish.  This  wide 
flexibility helps addressing the long tail of organisational  knowledge allowing  large 
companies to capture specific knowledge across departments/groups/users.  It will be 
shown how a user can easily create, modify and reuse form components by selecting 
some  simple  properties  (e.g.  type,  name,  validation  constraints,  default  value,  help 
text, etc.)  the  underlying ontology(-es)  will  then be shown to better showcase the 
semantic mapping processes happening in background.  

S. Chapman, V. Lanfranchi, and R. Bhagdev 

For the knowledge capturing stage, during the demonstration it will be possible to 
fill  in  created  forms  and  then  analyse  the  RDF  triples  that  have  been  automatically 
generated by the system.  

Knowledge  sharing  and  reuse  will  be  demonstrated  through  K-Search,  showing 
how  the  previously  created/modified  forms  and  the  collected  information  are 
immediately available for exploration by keyword, semantic and hybrid queries in a 
single interface. Most importantly this demonstration will highlight real world cases 
where semantics alone cannot solve a problem and show how integration with legacy 
data/systems  aids  in  organisational  adoption.  The  hybrid  search  modality  will  be 
showcased to explain how K-Search bridges the gaps with pre-existing unstructured 
knowledge and how it is possible to search information that is not fully represented by 
the available ontologies. 
 
Acknowledgments. The work was supported by 1) IPAS, a project jointly funded by 
the UK DTI (Ref. TP/2/IC/6/I/10292) and Rolls-Royce plc, 2) X-Media, an Integrated 
Project on large scale knowledge management across media, funded by the European 
Commission  as  part  of  the  IST  programme  (IST-FP6-026978),  (www.x-media-
project.org) and 3) Knowledge Now Ltd. 
