RaDON  Repair and Diagnosis in Ontology Networks

Qiu Ji, Peter Haase, Guilin Qi, Pascal Hitzler, and Steffen Stadtm uller

Institute AIFB

{qiji,pha,gqi,phi}@aifb.uni-karlsruhe.de,

Universit at Karlsruhe (TH), Germany

steffen.stadtmueller@stud.kit.edu

Abstract. One of the major challenges in managing networked and dynamic
ontologies is to handle inconsistencies in single ontologies, and inconsistencies
introduced by integrating multiple distributed ontologies. Our RaDON system
provides functionalities to repair and diagnose ontology networks by extending
the capabilities of existing reasoners. The system integrates several new debugging and repairing algorithms, such as a relevance-directed algorithm to meet the
various needs of the users.

1 Introduction

Next generation semantic applications are characterized by a large number of ontolo-
gies, some of them constantly evolving. As the complexity of semantic applications in-
creases, more and more knowledge is embedded in applications, typically drawn from
a wide variety of sources. This new generation of applications thus likely relies on ontologies embedded in a network of other ontologies. Ontologies and metadata have to
be kept up to date when application environments and users needs change. One of the
major challenges in managing these networked and dynamic ontologies is to handle
potential inconsistencies in single ontologies, and inconsistencies introduced by integrating multiple distributed ontologies.

For inconsistency handling in single, centralized ontologies, several approaches are
known, see the survey in [4,3]. There are mainly two ways to deal with inconsistent
ontologies [5]. One way is to simply live with the inconsistency and to apply a nonstandard reasoning method to obtain meaningful answers. The second way to deal with
logical contradictions is to resolve logical modeling errors whenever a logical problem
is encountered [16,15,12].

There is relatively little work done on handling inconsistency in networked ontolo-
gies. For example, in [1], the authors deal with the problem of inconsistency in DDL by
removing some bridge rules which are responsible for the inconsistency. However, there
is no tool available to diagnose and repair inconsistencies in networked ontologies.

To meet the above mentioned needs, we develop the RaDON system to repair and
diagnose not only single ontologies but networked ones, where several new debugging
algorithms, such as a relevance-directed algorithm and a paraconsistency-based algo-
rithm, have been integrated into RaDON to meet the various needs of the users.

 This work is partially supported by the EU in the IST project NeOn (IST-2006-027595).

L. Aroyo et al. (Eds.): ESWC 2009, LNCS 5554, pp. 863867, 2009.
c Springer-Verlag Berlin Heidelberg 2009

Q. Ji et al.

2 The RaDON System

RaDON1 has been developed to deal with inconsistency2 and incoherence3 for ontology
networks. It supports OWL-DL and is implemented in Java as a plug-in for the NeOn
toolkit4, which is an extensible ontology engineering environment to handle multiple
networked ontologies. The RaDON plugin has already been applied in the FAO5 case
study in the context of diagnosing and repairing automatically learned ontologies. Results of these applications have been reported in NeOn Deliverable D1.2.2 [13].

In this section, we first introduce the functionalities of the RaDON system and then
we present the process to debug and repair ontology networks. Afterwards, we describe
the two new algorithms respectively: relevance-directed algorithm and paraconsistencybased algorithm for debugging ontologies.

2.1 Functionalities of RaDON

RaDON provides a set of techniques for dealing with inconsistency and incoherence in
ontologies. In particular, RaDON supports novel strategies and consistency models for
distributed and networked environments.

RaDON extends the capabilities of existing reasoners with the functionalities to
deal with inconsistency and incoherence. Specifically, the functionalities provided by
RaDON include: (1) debugging an incoherent or inconsistent ontology to explain why
a concept is unsatisfiable or why the ontology is inconsistent, (2) repairing an ontology
automatically by computing all possible explanations w.r.t. all unsatisfiable concepts if
the ontology is incoherence, or w.r.t. the inconsistent ontology if it is inconsistent, (3)
repairing an ontology manually based on the debugging results. For the manual repair,
the user can choose the axioms to be removed for restoring the coherence or consis-
tency. (4) coping with inconsistency based on a paraconsistency-based algorithm.

2.2 Process to Debug and Repair Ontology Networks

The plug-in can be used to diagnose and repair not only a single ontology, but also
multiple ontologies that are networked. In particular, we consider ontologies that are
networked via mappings. Mappings essentially are correspondences between the elements of two different ontologies, in the most simple case in the form of subclassOf or
equivalentClasses axioms (cf. [2] for a definition of the networked ontology model).
The mapping assertions may additionally be annotated with confidence values.

RaDON takes as input an ontology network consisting of ontologies and mappings
between the ontologies. For our definition of inconsistency in the ontology network, we
follow a global model semantics: An ontology network is inconsistent (resp. incoherent)
if the ontology obtained by merging the ontologies and their mappings is inconsistent

1 http://radon.ontoware.org/demo.htm
2 An ontology is inconsistent iff it has no model.
3 An ontology is incoherent iff it contains at least one unsatisfiable concept in its terminology.

A concept is unsatisfiable if it is mapped to the empty set in all models of the ontology.

4 http://www.neon-toolkit.org/
5 http://www.fao.org/
?

?

?
(resp. incoherent). For the repair process we focus on repairing the mappings, assuming the ontologies are already individually coherent and consistent. Consequently only
axioms in the mappings could be removed to resolve incoherence or inconsistency.

If the merged ontology is incoherent, the system computes all the unsatisfiable con-
cepts. When an unsatisfiable concept is selected, all the minimal unsatisfiabilitypreserving subsets (MUPS)6 w.r.t. this concept are computed. Similarly, inconsistencies
in the ontology network are debugged: For inconsistencies, all the minimal inconsistent
subsets (MIS)7 w.r.t. the ontology are computed.

After obtaining the debugging results, we can repair the ontology automatically according to the proposed solution by our system. Also, the user can repair the ontology
by manually choosing the axioms to be removed. To help the user to make a decision,
our system provides the confidence values or scores for each axiom which could be
removed to resolve incoherence or inconsistency. See [13] for more details.

2.3 Relevance-Directed Algorithm

A key problem of diagnosing and repairing ontology networks is to compute all or some
MUPS for an unsatisfiable concept efficiently. The RaDON system provides various
strategies to compute some or all MUPS based on the relevance-directed algorithm [7].
This algorithm incrementally selects sub-ontologies using a selection function and finds
a set of MUPS from these sub-ontologies for an unsatisfiable concept. Our algorithm
is adapted from the algorithm given in [8] which is based on Reiters Hitting Set Tree
(HST) algorithm [14].

Specifically, the relevance-directed algorithm provides the following strategies when

computing MUPS for an unsatisfiable concept:

 Compute one MUPS;
 Compute all MUPS and all hitting sets8 for the set of all MUPS;
 Compute some (not all) MUPS and some hitting sets for the set of all MUPS.

Therefore, the users could choose different strategies according to the ontology and
their purpose. For example, if the testing ontology is relatively small, they could try to
compute all MUPS. Also, if the users only intend to resolve the incoherence with some
but not all solutions, we can choose the third strategy.

2.4 Paraconsistency-Based Algorithm

In RaDON we also provide the functionality to provide inconsistency-tolerant reason-
ing. Specifically, an algorithm for paraconsistent reasoning given in [10] has been integrated into RaDON which helps the user to cope with the inconsistency. This algorithm
6 Let C be a named concept which is unsatisfiable in an ontology O. A set MO is a minimal
unsatisfiability-preserving subset (MUPS) [16] of O if C is unsatisfiable in M, and C is
satisfiable in every subset M  M.
7 Given an inconsistent ontology O, a set MO is a minimal inconsistent subset (MIS) w.r.t. O
if M is inconsistent and every subset M  M is consistent.
8 Given a set S = {M1, ..., Mn} of MUPS of an ontology O for an unsatisfiable concept, a
hitting set T for S is a subset of O such that Mi  T =  for all 1  i  n.

Q. Ji et al.

considers inconsistent ontologies to be based on a four-valued semantics. Such ontologies are translated to new consistent ontologies, in a way such that classical two-valued
reasoning tasks with the translated ontologies result in the same conclusions as paraconsistent four-valued reasoning. The user can decide whether he wants to translate all
inconsistent ontologies automatically or select the ontologies, that should be translated.
Further information on the theory can be found in [10].

3 Related Work

To our best of knowledge, the most closely related tools are Swoop, Prot eg e, PION and
DION.

Swoop [9] provides a user interface for computing explanations of an unsatisfiable
concept and for repairing an ontology using several kinds of ranking methods. Our plugin differs from theirs in the following main aspects. First of all, Swoop only considers
a single ontology while RaDON can deal with not only single ontologies but ontology
networks. Secondly, RaDON can repair both incoherence and inconsistency. Thirdly,
the internal repair algorithm by using confidence values is different (more details can be
found in [13]). Finally, we integrated our plug-in into the NeOn toolkit which provides
a flexible framework to deal with ontology networks.

As for Prot eg e [11] (here, we use Prot eg e 4.0 alpha), it is able to compute explanations and provide a manual way to repair an ontology. The differences mentioned
above for Swoop can apply to Prot eg e as well. Furthermore, no functionality to repair
an ontology automatically is implemented in Prot eg e.

PION [6] and DION [17] have been developed in the SEKT project9 to deal with
inconsistency. PION is an inconsistency-tolerant reasoner which can return meaningful
answers when querying an inconsistent ontology. It tries to answer a query by selecting
a consistent sub-ontology from the inconsistent ontology. DION provides debugging
support to compute MUPS or MIPS. But DION does not consider repairing inconsistent
or incoherent ontologies. Furthermore, DION it cannot be applied to deal with very
expressive ontologies, such as OWL DL ontologies.

4 Conclusion and Future Work

In our demonstration, we present the RaDON system, which provides support to diagnose and repair ontologies automatically or manually. In particular, RaDON supports
novel strategies to handle incoherence and inconsistency for ontology networks. To repair an ontology network in which the ontologies are related via mappings, we focus
on the repair of mappings between ontologies, assuming the individual ontologies are
locally coherent and consistent and are more important and reliable than the mapping.
In the demonstration, the process to debug and repair ontology networks will be shown
with practical examples. Besides, for various needs of the users different algorithms to
deal with incoherence and inconsistency will be demonstrated.

As future work, we intend to support ontology networks in which ontologies are
networked in different way, e.g. via dependency and extension relationships in modular
ontologies.

9 http://www.sekt-project.com/project
?

?

