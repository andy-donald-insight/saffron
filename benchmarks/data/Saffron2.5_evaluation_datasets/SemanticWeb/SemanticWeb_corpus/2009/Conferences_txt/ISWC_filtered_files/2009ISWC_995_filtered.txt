Ontologies for User Interface Integration

Heiko Paulheim

SAP Research

heiko.paulheim@sap.com

Abstract. Application integration can be carried out on three different
levels: the data source level, the business logic level, and the user interface level. With ontologies-based integration on the data source level
dating back to the 1990s and semantic web services for integrating on
the business logic level coming of age, it is time for the next logical step:
employing ontologies for integration on the user interface level. Such an
approach supports both the developer (in terms of reduced development
times) and the user (in terms of better usability) of integrated applica-
tions. In this paper, we introduce a framework employing ontologies for
integrating applications on the user interface level.

1 Introduction

Applications are often described in three layers: data, business logic, and user
interface. Consequently, application integration can be performed on each of
those three levels [1], as depicted in Fig. 1:

 Integrating the data sources, and developing common business logic and user

interface layers above the integration layer,

 integrating the business logic, and developing a common user interface above

the integration layer, and

 integrating the user interfaces.

Integrating applications on the user interface level means reusing existing user
interfaces or parts thereof and coupling them in a way that a user can interact
with those interfaces as if they were a single application. Such an integration
may include that the applications share a common toolbar or menu, that one
application reacts to user actions performed with another one, e.g. related objects
are highlighted in other applications when selected in one application, objects
can be dragged and dropped from on application to the other, etc. There are some
approaches such as plugin-based systems [2], portals [3], and mashups [4] that
propose integration on the user interface level. However, all of those approaches
are either very limited concerning cross-application interaction or require deep
changes of the applications in order to facilitate such interactions [1].

With semantic database integration [5] as well as ontology-based agents [6]
and semantic web services [7,8], there have been considerable efforts to using
ontologies in the integration on the database and business logic layer. However,
little research has been conducted on ontology-based integration on the user

A. Bernstein et al. (Eds.): ISWC 2009, LNCS 5823, pp. 973981, 2009.
c Springer-Verlag Berlin Heidelberg 2009

H. Paulheim

Fig. 1. Three layers of integration; based on [1]

interface level so far. In contrast to integration on the lower layers, user interface
level integration has two significant advantages:

 The development of the user interface consumes up to 50% of the total efforts
in developing an application [9]. Therefore, the benefit from reusing existing
user interface components is significant.

 Users interacting with applications integrated on the user interface level will
experience a decreased learning effort if already familiar with the applica-
tions original interfaces, compared to interacting with a newly developed
common user interface.

Yu et al. argue that user interface integration requires a description of the interfaces to be integrated that is formal, human readable, modular, and simple [10].
Ontologies perfectly meet the first two criteria and also provide the possibility
for modularization [11]. As simplicity is a rather subjective criterion, and the
description language must be flexible enough to cover all possible cases of inte-
gration, hence must not be too simple, we claim that ontologies are a suitable
approach.

Since, as discussed above, interaction plays a crucial role in integrated user
interfaces as well as it imposes problems in current approaches to user interface integration, the approach discussed in this paper aims at describing such
?

?

?
interactions with ontologies. We introduce a prototype framework that allows
run-time integration of user interfaces based on ontological descriptions of the
interactions they support.

2 State of the Art

There are some approaches that employ ontologies for user interface integration
in portals and mashups. The approach described in [12] uses semantic web ser-
vices, i.e., web services described by means of ontologies. It rather focuses on
communication between a portlet and its backend system than on inter-portlet
communication and on user interaction. The work described in [13] uses ontologies to annotate the contents delivered by portlets. That approach is rather
data-centric and has little focus on interaction. The work described in [14] shows
how ontologies can help building mashup applications to integrate contents from
diverse data sources in one mashup.

The work described in [15] and [16] shows how ontologies can be used to
formalize user interfaces and to generate user interfaces with a model driven ap-
proach. The approach suggested in [17] also formalizes user interfaces with the
help of ontologies, but with the aim of making user interfaces accessible to people with disabilities. Other approaches, such as [18] and [19], annotate software
components in general (not necessarily user interface components) with ontologies to support the developer in searching and choosing appropriate components.
The work described in [20] and [21] propose ontologies for describing different
types of user interfaces on a rather general level, such as characterizing different
input and output devices. Such formalizations are helpful, but so far, they have
not been applied to integrating different user interfaces.

A research direction which comes close to ontologies-based user interface integration is the Semantic Desktop [22]. Here, data encapsulated in different applications is made accessible via a central query interface. In some semantic desktop
systems, existing applications may be integrated as plugins [23]. The main focus
of this direction, however, is to provide an integrated access to data in different applications rather than on cross-application interaction; it can therefore
be regarded as an approach to data integration rather than to user interface
integration.

3 Roadmap

3.1 Prototype

So far, a first prototype has been developed that shows how user interfaces can
be integrated by using ontologies [24]. Three types of ontologies are used (see
Fig. 2):

 An ontology of the user interfaces and interactions domain, which defines
basic categories for describing applications. This ontology is part of the
framework discussed in this paper.

H. Paulheim

Fig. 2. Using two domain ontologies and several application ontologies for integration
on the user interface level

 An ontology of the applications real world domain, which defines the categories of real world objects of the domain that the integrated application is
built for (such as banking, travel, etc.). The information objects processed
by the application represent those real worlds objects. When integrating applications from a given domain, an appropriate domain ontology has to be
chosen or developed. A set of different real world domain ontologies may be
used in case of modular domain ontologies or when developing cross-domain
applications.

 One or more application ontologies, which use the user interfaces and interactions ontologys basic concepts to describe the applications to be integrated,
and the interactions that are possible with them. The application ontologies may refer to the real world domain ontology for describing the types
of objects that may be processed by the integrated applications. During the
integration process, one application ontology per integrated application has
to be developed.

This categorization resembles Guarinos classification [25] (without the top level
layer, which may also be present in our framework, but its presence is not es-
sential)  here, two kinds of domain ontologies are used. While the ontology of
the user interfaces and interactions domain is a part of the integration frame-
work, the real world domain ontology and application ontologies are dynamically
added for each integrated application. It is particularly noteworthy that there is
no direct connection from the user interfaces and interactions domain ontology
to the real world domain ontology. Thus, the framework is domain independent.
Fig. 3 shows an overview of the framework prototype, which is based on Java
and the OntoBroker reasoner [26]. Integrated applications consist of a class model
for representing data, a user interface, and a business logic (the classical model
view controller [27] components), and are described by an application ontology.
?

?

?
Fig. 3. Overview on the prototypes framework architecture. Applications are described
by ontologies. A reasoning component evaluates those ontologies to facilitate integration at run time.

Applications communicate via events which are annotated using the respective
application ontology. One key design decision is that no application sends events
directly to any other application. Instead, events are processed by a reasoning
component. For example, one application sends an event that a certain object
is selected. The reasoner reads the event, queries the application ontologies to
determine those applications which declare to react to that sort of event, and
notifies the respective applications. Thus, no application has to directly react to
other applications events and only needs to process the event types defined in
its own application ontology.

To allow mediation between different data models, an object ontology mapping
registry is introduced. In this registry, each application stores annotations of its
data model. Classes as well as properties may be annotated with concepts from
the domain ontology. When the reasoner receives an object from an application
or vice versa, the receiver consults the registry to analyse that object and convert
it into a representation which can be processed by the reasoner.

3.2 Further Research Plan
While the prototype shows that the approach is valid and feasible, there are
quite a few open research questions. We have shown that simple interactions
(such as highlighting objects selected in different applications) are possible with
our framework. More complex interactions will require extensions and refactoring
of both the application ontology and the prototype implementation.

So far, we have only considered typical single-user WIMP (Windows, Icons,
Mouse, Pointing) interfaces when modelling the application ontology. A more

H. Paulheim

sophisticated ontology describing interactions would be flexible enough to allow
different input and output devices (such as speech interfaces, gestures, and so
on) [28], as well as multi-user interaction. Coupling the application ontology with
a device ontology, such as the FIPA device ontology [29], could lead to a more
universal framework.

Complex interactions may have conditions under which they may be per-
formed, e.g. the visibility of a component or the presence of an application which
is able to perform a certain task. To evaluate those conditions, an applications
internal state has to be exposed to a certain extent. Thus, the relevant state
information has to be identified and modelled in the user interfaces ontology.
Furthermore, the state information has to be made known to the reasoner, either by the reasoner dynamically querying the applications or by the applications
sending updates to the reasoner. A special case of preconditions are the users
rights to perform a certain interaction. Thus, adding an ontology of users rights,
such as the one proposed in [30], would be a feasible approach to account for
that requirement.

The design decision that each application can use their own data model eases
the reuse of existing components, but it comes with certain challenges in data
integration. As there is a large variety of heterogeneities that may occur here
[31], some methods to cope with those heterogeneities is needed. Such methods
will probably impose certain restrictions on the data model used (such as a 1:1
mapping between elementary data types in the data model and data attributes
in the domain ontology). We aim at finding a minimal set of such restrictions in
order to allow a maximum degree of freedom in the applications data models.
The application ontologies describing the interactions possible with applications may not only be used for integration. Another way of utilizing those
ontologies is the provision of user assistance, such as automatic generation of
help texts, or highlighting possible drop locations in different applications when
dragging an object. The latter has already been successfully demonstrated in
our prototype.

Finally, the approach requires validation beyond having a running prototype.
We plan to conduct case studies where different example applications are to be
integrated in a way providing a given set of interactions. Here, development efforts can be measured, e.g. in lines of code, and expert interviews with developers
can reveal additional insights into the feasibility of the approach. In addition,
studies with end users may be conducted to demonstrate the advantage of integrated user interfaces over non-integrated side-by-side use of applications.

4 Conclusion

In this paper, we have presented the idea of using ontologies for integrating applications on the user interface level. In our framework, applications are described
by application ontologies, making use of two or more shared domain ontologies.
A first prototype shows that the approach is feasible. It has been successfully
used in the SoKNOS project [32], where an integrated emergency management
?

?

?
software has been built, consisting of twelve integrated single applications, serving purposes such as planning measures with resources, handling messages, or
displaying relevant mission data on charts and geographic maps.

This prototype as well as the underlying ontology and algorithms are going to
be subsequently extended. The aim is to enhance the framework in a way that it
covers the most common interaction patterns between integrated applications,
and that it can be enhanced in cases where more unusual interactions are to be
implemented.

In summary, we believe that such a framework for integrating applications on
the user interface level is a useful complement to existing integration efforts on
the data and business logic level.

Acknowledgements

The work presented in this paper has been partly funded by the German Federal
Ministry of Education and Research under grant no. 01ISO7009.
