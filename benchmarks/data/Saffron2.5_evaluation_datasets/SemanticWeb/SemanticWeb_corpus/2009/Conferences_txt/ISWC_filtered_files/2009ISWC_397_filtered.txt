Optimizing QoS-Aware Semantic Web Service

Composition

Freddy L ecu e

The University of Manchester

Booth Street East, Manchester, UK

firstname.lastname@manchester.ac.uk

Abstract. Ranking and optimization of web service compositions are some of
the most interesting challenges at present. Since web services can be enhanced
with formal semantic descriptions, forming the semantic web services, it becomes conceivable to exploit the quality of semantic links between services (of
any composition) as one of the optimization criteria. For this we propose to use
the semantic similarities between output and input parameters of web services.
Coupling this with other criteria such as quality of service (QoS) allow us to
rank and optimize compositions achieving the same goal. Here we suggest an
innovative and extensible optimization model designed to balance semantic fit
(or functional quality) with non-functional QoS metrics. To allow the use of this
model in the context of a large number of services as foreseen by the strategic
EC-funded project SOA4All we propose and test the use of Genetic Algorithms.

Keywords: Semantic Web, Web service, Service composition, Quality of service
and composition, Automated reasoning.

1 Introduction

The Semantic Web [1], where the semantic content of the information is tagged using
machine-processable languages such as the Web Ontology Language (OWL) [2], is considered to provide many advantages over the current formatting only version of the
World-Wide-Web. OWL is based on concepts from Description Logics [3] and ontolo-
gies, formal conceptualization of a particular domain. This allows us to describe the
semantics of services, e.g., their functionality in terms of input and output parameters,
preconditions, effects and invariants. Such descriptions can then be used for automatic
reasoning about services and automating their use to accomplish intelligent tasks such
as selection, discovery and composition.

Here we focus on web service composition and more specifically on its functional
level, where a set of services is composed to achieve a goal on the basis of the semantic
similarities between input and output parameters as indicators of service functionality.
To measure semantic similarity, we use the concept of (functional) semantic link [4],
defined as a semantic connection (i.e., part of data flow) between an output and an
input parameter of two services. Web service compositions could thus be estimated

 Foundation Project: Supported by European Commission VII Framework IP Project Soa4All.

A. Bernstein et al. (Eds.): ISWC 2009, LNCS 5823, pp. 375391, 2009.
c Springer-Verlag Berlin Heidelberg 2009

F. L ecu e

and ranked not only along well known non functional parameters such as Quality of
Services (QoS) [5] but also along the dimension of semantic similarity as indicator of
functional fit [6]. Considering semantics on connections of services is useful in case
the information required and provided by services does not match perfectly in every
data flow. This is the case of semantic-based description of services. In this work we
propose to unify both types of criteria in an innovative and extensible model allowing
us to estimate and optimise the quality of service compositions.

Maximizing the quality of service composition using this model is essentially a
multi-objective optimization problem with constraints on quality of services and
semantic links, which is known to be NP-hard [7]. Most approaches in the literature
addressing optimization in web service composition are based on Integer linear Programming (IP) e.g., [8]. However, IP approaches have been shown to have poor scalability [5] in terms of time taken to compute optimal compositions when the size of the
initial set of services grows. Such a case can arise in the future semantic web, where
a large number of semantic services will be accessible globally. This is the vision of
SOA4All, a strategic EC-funded project. Rapid computation of optimal compositions
is especially important for interactive systems providing service composition facilities
for end users, where long delays may be unacceptable. Here we demonstrate that the
optimisation problem can be automated in a more scalable manner using Genetic Algorithms (GAs), and propose an approach to tackle QoS-aware semantic web service
composition.

The remainder of this paper is organised as follows. In the next section we briefly
review i) semantic links, ii) their common descriptions and iii) the web service composition model. Section 3 introduces the quality criteria for QoS-aware semantic web
service composition. Section 4 details the GA-based evolutionary approach, including the strategies of the crossover, mutation and fitness function. Section 5 reports
and discusses results from the experimentations. Section 6 briefly comments on related work. Finally section 7 draws some conclusions and talks about possible future
directions.

2 Background

In this section we describe how semantic links can be used to model web service com-
position. In addition we remind the definition of Common Description in semantic links.

2.1 Semantic Links between Web Services

In the semantic web, input and output parameters of services referred to concepts in a
common ontology1 or Terminology T (e.g., Fig.2), where the OWL-S profile [9] or SAWSDL [10] can be used to describe them (through semantic annotations). At functional
level web service composition consists in retrieving some semantic links [4] noted sli,j
(Fig.1) i.e.,

.= si, SimT (Out si, In sj), sj

sli,j

(1)

1 Distributed ontologies are not considered here but are largely independent of the problem

addressed in this work.
?

?

?
between output parameters Out si  T of services si and input parameters In sj  T
of other services sj. Thereby si and sj are partially linked according to a matching function SimT . Given a terminology T , [11] and [12] value the range of the latter function
along five matching types: i) Exact i.e., Out si  In sj, ii) PlugIn i.e., Out si 
In sj, iii) Subsume i.e., In sj  Out si, iv) Intersection i.e., (Out si  In sj  )
and v) Disjoint i.e., Out si  In sj  .

In0 si

Ink si

Inn si

Out0 si

si

Service

Semantic Link sli,j
(SimT (Out si, In sj))
In sj

Out si

Outn si

Inn sj

In0 sj

sj

Service

Out sj

Semantic Link sl

Service

Input Parameter

Output Parameter

Fig. 1. A Semantic Link sli,j between Services si and sj

Example 1 (Matching Type)
Suppose sl1,2 (Fig.3) be a semantic link between two services s1 and s2 such that the
output parameter NetworkConnectionof s1 is (semantic) linked to the input parameter SlowNetworkConnectionof s2. According to Fig.2 this link is valued by
a Subsume matching type since N etworkConnection  SlowN etworkConnection.
The matching function SimT enables, at design time, finding some types of semantic
compatibilities (i.e., Exact, PlugIn, Subsume, Intersection) and incompatibilities (i.e.,
Disjoint) among independently defined service descriptions. In this direction the latter
function can be used to define the quality of data flow in web service composition at
semantic level.

2.2 Common Description of a Semantic Link

Besides computing the matching type of a semantic link, authors of [13] suggest computing a finer level of information i.e., the Extra and Common Descriptions between
Out si and In sj of a semantic link sli,j. They adapt the definition of syntactic difference [14] for comparing ALE DL descriptions and then obtaining a compact represen-
tation. The Extra Description In sj\Out si:

In sj\Out si

.= mind

{E|E  Out si  In sj  Out si}

(2)

refers2 to information required by In sj but not provided by Out si to ensure a correct
data flow between si and sj. The Common Description of Out si and In sj, defining
as their Least Common Subsumer [15] lcs, refers to information required by In sj and
provided by Out si
2 With respect to the subdescription ordering d.
3 In case Out si  In sj  , In sj\Out si is replaced by its more general form i.e.,
In sj\lcs(In sj, Out si).

3.

F. L ecu e

N etworkConnection  netP ro.P rovider  netSpeed.Speed
SlowN etworkConnection  N etworkConnection 
Adsl1M  Speed   mBytes.1M

netSpeed.Adsl1M

Fig. 2. Sample of an ALE Domain Ontology T

Example 2 (Extra & Common Description)
Suppose sl1,2 in Example 1. On the one hand the Extra Description missing in Network Connection to be used by
input parameter SlowNetwork
Connection is defined by SlowN etworkConnection\N etworkConnection i.e.,
netSpeed.Adsl1M . On the other hand the Common Description is defined by
lcs(SlowN etworkConnection, N etworkConnection) i.e., N etworkConnection.

the

2.3 Modelling Web Service Composition

In this work, the process model of web service composition and its semantic links is
specified by a statechart [16]. Its states refer to services whereas its transitions are labelled with semantic links. In addition some basic composition constructs such as se-
quence, conditional branching (i.e., OR-Branching), structured loops, concurrent
threads (i.e., AND-Branching), and inter-thread synchronization can be found. To simplify the presentation, we initially assume that all considered statecharts are acyclic and
consists of only sequences, OR-Branching and AND-Branching.

Example 3 (Process Model of a Web Service Composition)
Suppose a composition extending Example 1 with six more services si,1i8, eight more
semantic links sli,j. Its process model is depicted in Fig.3.

The example 3 illustrates a composition wherein tasks Ti and abstract semantic link
slA
i,j have been respectively concretized by one of their n candidate services (e.g., si)
and n2 candidate links (e.g., sli,j). Indeed some services with common functionality,

T2
s2

Slow
Network
Connection

sl2,3

T3
s3

sl3,5

OR-Branching

sl5,6

T5
s5

sl1,2

T1
s1

Network
Connection

sl1,4

T4
s4

sl4,5

sl5,7

T6
s6

sl6,8

T8
s8

sl7,8

Branching

T7
s7

Semantic Link sl

Input Parameter

Output Parameter

T: Task

s: Service

Fig. 3. A (Concrete) Web Service Composition
?

?

?
preconditions and effects although different input, output parameters and quality can be
selected to perform a target task Ti and obtaining a concrete composition. Such a selection will have a direct impact on semantic links involved in the concrete composition.
In the following we assume that compositions of tasks (achieving a goal) have been
pre-computed. This computation can be performed by template-based and parametric-
design-based composition approaches [17]. So the control flow of the pre-computed
compositions is fixed since it is pre-defined. The choice of the service (that fulfills a
given task) will be done at composition time, based on both quality of i) services and
ii) their semantic links (i.e., quality of data flow).

3 Quality Model

Here we present a quality criterion to value semantic links. Then we suggest to extend
it with the non functional QoS to estimate both quality levels of any compositions.

3.1 Quality of Semantic Link
We consider two generic quality criteria for semantic links sli,j defined by si, SimT
(Out si, In sj), sj: its i) Common Description rate, and ii) Matching Quality.
Definition 1 (Common Description rate of a Semantic Link)
Given a semantic link sli,j between si and sj, the Common Description rate qcd  (0, 1]
provides one possible measure for the degree of similarity between an output parameter
of si and an input parameter of sj. This rate is computed using the following expression:

qcd(sli,j) =

|lcs(Out si, In sj)|

|In sj\Out si| + |lcs(Out si, In sj)|

(3)

This criterion estimates the proportion of descriptions which is well specified for ensuring a correct data flow between si and sj.
The expressions in between | refer to the size of ALE concept descriptions ([18] p.17)
i.e., ||, ||, |A|, |A| and |r| is 1; |C  D| .= |C|+|D|; |r.C| and |r.C| is 1 +|C|.
For instance |Adsl1M| is 3 in the ontology illustrated in Fig. 2.

Definition 2 (Matching Quality of a Semantic Link)
The Matching Quality qm of a semantic link sli,j is a value in (0, 1] defined by SimT
(Out si, In sj) i.e., either 1 (Exact), 3

2 (Subsume) or 1

4 (PlugIn), 1

4 (Intersection).

The discretization of the matching types follows a partial ordering [19] where the assignment of values to matching types is driven by the data integration costs. Behind
each matching type, tasks of XML (Extensible Markup Language) data type integration
and manipulation are required. The PlugIn matching type is more penalized than the
Exact matching type in this model. Indeed the data integration process is lower (in term
of computation costs) for the Exact matching type than for PlugIn matching type.

F. L ecu e

Contrary to qcd, qm does not estimate similarity between the parameters of semantic
links but gives a general overview (discretized values) of their semantic relationships.
Given these quality criteria, the quality vector of a semantic link sli,j is defined by:
?

?

?
q(sli,j) .=

qcd(sli,j), qm(sli,j)

(4)
?

?

?
i,j) if qcd(sli,j) > qcd(sl
?

?

?
i,j) and qm(sli,j) > qm(sl

The quality of semantic links can be compared by analysing their qcd and qm elements.

For instance q(sli,j) > q(sl
i,j).
Alternatively we can compare a weighted average of their normalised components in

case the value of the first element of sli,j is better than the first element of sl
i,j but
worse for the second element [20].
Example 4 (Quality of Semantic Links)
Let s
an input. The link sl
?

?

?
2 be another candidate service for T2 in Fig.3 with NetworkConnectionas

1,2) > q(sl1,2).
In case si, sj are related by more than one link, the value of each criterion is retrieved
by computing their average. This average is computing by means of the And-Branching
row of Table 1, independently along each dimension of the quality model.
?

?

?
2 is better than sl1,2 since q(sl
?

?

?
1,2 between s1 and s

3.2 QoS-Extended Quality of Semantic Link
We extend the latter quality model by exploiting the non functional properties of services (also known as QoS attributes [21] - given by service providers or third parties)
involved in each semantic link. We simplify the presentation by considering only:
 Execution Price qpr(si)  %+ of service si i.e., the fee requested by the service
provider for invoking it.
 Response Time qt(si)  %+ of service si i.e., the expected delay between the
request and result moments.
A quality vector of a service si is then defined as follows:

q(si) .= (qpr(si), qt(si))

Thus a QoS-extended quality vector of a semantic link sli,j:

q (sli,j) .= (q(si), q(sli,j), q(sj))

(5)

(6)

Given an abstract link between tasks Ti, Tj, one may select the link with the best functional quality (matching quality, common description rate), and non-functional (the
cheapest and fastest services) quality values, or may be a compromise (depending on
the enduser preferences) between the four by coupling (4) and (6) in (6). Moreover the
selection could be influenced by predefining some constraints e.g., a service response
time lower than a given value.

Example 5 (QoS-Extended Quality of Semantic Link)

2) < q(s2). According
Suppose T2 and its two candidate services s2, s

to example 4, s
2 should be preferred regarding the quality of its semantic link with s1,
whereas s2 should be preferred regarding its QoS. So what about the best candidate for

q? Before addressing this question in Section 4 through
slA
equation (9), we first focus in quality of composition in Section 3.3.

1,2 regarding both criteria:
?

?

?
2 wherein q(s
?

?

?
3.3 Quality of Composition

We present definitions for comparing and ranking different compositions along the common description rate and matching quality dimension. The rules for aggregating quality
values (Table 1) for any concrete composition c are driven by them. In more details the
approach for computing semantic quality of c is adapted from the application-driven
heuristics of [6], while the computation of its non functional QoS is similar to [22].

Definition 3 (Common Description rate of a Composition)
The Common Description rate of a composition measures the average degree of similarity between all corresponding parameters of services linked by a semantic link.

The Common Description rate Qcd of both a sequential and AND-Branching composition is defined as the average of its semantic links common description rate qcd(sli,j).
The common description rate of an OR-Branching composition is a sum of qcd(sli,j)
weighted by psli,j i.e., the probability that semantic link sli,j be chosen at run time.
Such probabilities are initialized by the composition designer, and then eventually updated considering the information obtained by monitoring the workflow executions.

Definition 4 (Matching Quality of a Composition)
The matching quality of a composition estimates the overall matching quality of its
semantic links. Contrary to the common description rate, this criteron aims at easily
distinguishing and identifying between very good and very bad matching quality.

The matching quality Qm of a sequential and AND-Branching composition is defined
as a product of qm(sli,j). All different (non empty) matching qualities involved in
such compositions require to be considered together in such a (non-linear) aggregation
function to make sure that compositions that contains semantic links with low or high
matching quality will be more easily identified, and then pruned for the set of potential solutions. The matching quality of an OR-Branching composition is defined as its
common description rate by changing qcd(sli,j) by qm(sli,j).

Details for computing Execution Price Qpr and Response Time Qt can be found

in Table 1, and further explained in [22].

Table 1. Quality Aggregation Rules for Semantic Web Service Composition

Composition

Construct

Sequential/

AND- Branching

OR-Branching
?

?

?
1|sli,j|
?

?

?
Qcd

qcd(sli,j)

sli,j

Qm

qm(sli,j)

sli,j

Functional
?

?

?
qcd(sli,j).psli,j

sli,j

qm(sli,j).psli,j

sli,j

Quality Criterion
?

?

?
Non Functional

Qt

qt(si) 
?

?

?
Qpr

qpr(si)

si

qpr(si).psi

si

maxs qt(s)
qt(si).psi

si

si

Using Table 1, the quality vector of any concrete composition can be defined by:

Q(c) .= (Qcd(c), Qm(c), Qt(c), Qpr(c))

(7)

F. L ecu e

Although the adopted quality model has a limited number of criteria (for the sake of
illustration), (4), (5), (6) as well as (7) are extensible: new functional criteria can be
added without fundamentally altering the service selection techniques built on top of
the model. In this direction the binary criterion of robustness [13] in semantic links can
be considered4. In addition, other non-functional criteria such as reputation, availability,
reliability, successful execution rate, etc., can also be considered in such an extension.

4 A Genetic Algorithm Based Optimization

The optimization problem (i.e., determining the best set of services of a composition
with respect to some quality constraints) which can be formalized as a Constraints
Satisfaction Optimization Problem (T, D, C, f) where T is the set of tasks (variables)
in the composition, D is the set of services domains for T (each Di representing a set
of possible concrete services that fulfil the task Ti), C is the set of constraints and f
is an evaluation function that maps every solution tuple to a numerical value, is NP-
hard. In case the number of tasks and candidate services are respectively n and m, the
naive approach considers an exhaustive search of the optimal composition among all
the mn concrete compositions. Since such an approach is impractical for large-scale
composition, we address this issue by presenting a GA-based approach [23] which i)
supports constraints on QoS and also on quality of semantic links and ii) requires the
set of selected services as a solution to maximize a given objective. Here compositions
refer to their concrete form.

4.1 GA Parameters for Optimizing Composition

By applying a GA-based approach the optimal solution (represented by its genotype)
is determined by simulating the evolution of an initial population (through generation)
until survival of best fitted individuals (here compositions) satisfying some constraints.
The survivors are obtained by crossover, mutation, selection of compositions from previous generations. Details of GA parameterization follow:

s3

T3
?

?

?
s2
s2
T2

s4
T4

s: Service

s1
T1
T: Task

s5

T5

s6
T6

s8

s7

T8

T7
Selected si for Ti

Fig. 4. Genotype Encoding for Service Composition

4 Contrary to [6], we did not consider robustness because of its strong dependency with the
matching quality criterion. Indeed they are not independent criteria since the robustness is 1 if
the matching type is either Exact or PlugIn, and 0 otherwise.
?

?

?
 Genotype: It is defined by an array of integer. The number of items is equal to the
number tasks involved in the composition. Each item, in turn, contains an index to an
array of candidate services matching that task. Each composition, as a potential solution
of the optimization problem, can be encoded using this genotype (e.g., Fig.4 is encoding the genotype of composition in Fig.3).
 Initial Population: It consists of an initial set of compositions (characterized by their
genotypes) wherein services are randomly selected.
 Global, Local Constraints have to be met by compositions c e.g., Qcd(c) > 0.8.
 Fitness Function: This function is required to quantify the quality of any composition c. Such a function f needs to maximize semantic quality attributes, while minimizing the QoS attributes of c:

f(c) = cd Qcd(c) + m Qm(c)
pr Qpr(c) + t Qt(c)
?

?

?
(8)

(9)

(10)

where Ql{pr,t,cd,m} refer to Ql normalized in the interval [0, 1]. l  [0, 1] is the
l{pr,t,cd,m} l = 1. In this way
weight assigned to the lth quality criterion and
preferences on quality of the desired compositions can be done by simply adjusting l
e.g., the Common Description rate could be weighted higher.

In addition f must drive the evolution towards constraint satisfaction. To this end

compositions that do not meet the constraints are penalized by extending (8) wrt. (9).
?

?

?
(c) = f(c)  pe

f
?

?

?
l {pr,t,
cd,m}

2

 Ql
(c)  Qmin

l

(c)

Qmax

l

where Qmax
constraint, pe weights the penalty factor and  Ql{pr,t,cd,m} is defined by:

are respectively the maximum and minimal value of the lth quality

, Qmin

l

l

Ql  Qmax

Qmin

l

l

 Ql =

if Ql > Qmax
if Qmin
 Qlif Ql < Qmin

l

l

l

 Ql  Qmax

l

Contrary to [5], compositions that violate constraints do not receive the same penalty.
Indeed the factor pe is further penalized in (9). This function avoids local optimal by
considering also compositions that disobey constraints. Unfortunately, (9) contains a
penalty for concrete compositions, which is the same at each generation. If, as usual, the
weight pe for this penalty factor is high, there is a risk that also concrete composition
violating the constraints but close to a good solution could be discarded.

The alternative is to adopt a dynamic penalty, i.e., a penalty having a weight that
increases with the number of generations. This allows, for the early generations, to also
consider some individuals violating the constraints. After a number of generations, the

F. L ecu e

population should be able to meet the constraints, and the evolution will try to improve
only the rest of the fitness function. The dynamic fitness function (to be maximized) is:

f

(c, gen) = f(c)  pe.

gen

maxgen

.

 Ql
(c)  Qmin

l

(c)

Qmax

l

(11)
?

?

?
l {pr,t,
cd,m}

2

gen is the current generation, while maxgen is the maximum number of generations.
 Operators on Genotypes: They define authorized alterations on genotypes not only
to ensure evolution of compositions population along generations but also to prevent
convergence to local optimum. We use: i) composition mutation i.e., random selection
of a task (i.e., a position in the genotype) in a concrete composition and replacing its service with another one among those available, ii) the standard two-points crossover i.e.,
randomly combination of two compositions and iii) selection of compositions which is
fitness-based i.e., compositions disobeying the constraints are selected proportionally
from previous generations.
 Stopping Criterion: It enables to stop the evolution of a population. First of all
we iterate until the constraints are met (i.e., Ql = 0 l  {pr, t, cd, m}) within
a maximum number of generations. Once the latter constraints are satisfied we iterate
until the best fitness composition remains unchanged for a given number of generations.

4.2 GA for Optimizing Composition in a Nutshell

The execution of the GA consists in i) defining the initial population (as a set of compo-
sitions), and computing the fitness function (evaluation criterion) of each composition,
ii) evolving the population by applying mutation and crossover of compositions (Tasks
with only one candidate service are disregarded), iii) selecting compositions, iv) evaluating compositions of the population, and v) back to step (ii) if the stopping criterion is
not satisfied. Section 5 further details the parameters.

In case no solution exists, users may relax constraints of the optimization problem.
Instead, fuzzy logic could be used to address the imprecision in specifying quality con-
straints, estimating quality values and expressing composition quality.

5 Experimental Results

We analyze the performances of our approach by i) discussing the benefits of combining QoS and functional criteria, ii) observing the evolution of the composition quality

in (11) (equal weights are assigned to the different quality criteria) over the GA
f
generations by varying the number of tasks, iii) studying the behaviour of our approach
regarding the optimisation of large scale compositions, iv) evaluating performance after decoupling the GA and the (on-line) DL reasoning processes, and v) comparing the
convergence of our approach (11) with [5]. Before turning our attention to the latter five
sets of experiments, we first draw the context of experimentation.
?

?

?
5.1 Context of Experimentation

Services, Semantic Links and their Qualities. Services5 are defined by their semantic
descriptions using an ALE ontology (formally defined by 1100 concepts and 390 prop-
erties, 1753 individuals, without data property), provided by a commercial partner. We
have incorporated estimated values for Qos parameters (price and response time). Common description rate and matching quality of semantic links are computed according to
an on-line DL reasoning process.

Implementation Details. The common description rate (3) is calculated by computing
the Extra Description (2), the Least Common Subsumer [15], and the size ([18] p.17) of
DL-based concepts. These DL inferences and the matching types have been achieved by
a DL reasoning process i.e., an adaptation of Fact++ [24] for considering DL difference.
The aggregation rules of Table 1 are then used for computing each quality dimension of any composition. Finally the combination of QoS with semantic calculation is
computed by means of (11), thus obtaining the final quality score for the composition.
Our GA is implemented in Java, extending a GPL library6. The optimal compositions are computed by using an elitist GA where the best 2 compositions were kept
alive across generations, with a crossover probability of 0.7, a mutation probability of
0.1, a population of 200 compositions. The roulette wheel selection has been adopted
as selection mechanism. We consider a simple stopping criterion i.e., up to 400 gen-
erations. We conducted experiments on Intel(R) Core(TM)2 CPU, 2.4GHz with 2GB
RAM.

Compositions with up to 30 tasks and 35 candidates per task (352 candidate semantic
links between 2 tasks) have been considered in Sections 5.2, 5.3, 5.5, 5.6, especially for
obtaining convincing results towards their applicability in real (industrial) scenarios.
Experiment results reported in Section 5.2 provide some benefits of combining QoS
and functional criteria for the overall quality of composition, whereas those in Sections
5.3, 5.4, 5.5 and 5.6 are related to scalability.

5.2 Benefits of Combining QoS and Functional Criteria

Fig.5 reports the benefits of combining QoS and functional criteria. In more details,
we studied the impact of functional quality on the costs of data integration, which
enabling the end-to-end composition of services. The data integration process aligns
the data flow specification of a composition by manipulating and transforming the
semantic descriptions of contents of outgoing and incoming messages of annotated
services.
Our approach and [5] are compared on ten compositions ci,1i10 with Qcd(ci) =
101  i and Qm(ci) = 10i10 as functional quality to reflect gradually better quality.
5 The choice of proprietary services has been motivated by the poor quality of existing benchmark services in terms of number of services or expressivity (limited functional specification,
no binding, restricted RDF-based description). We plan further experimentations with OWL-S
TC 3.0 (http://www.semwebcentral.org/frs/?group_id=89) and SA-WSDL
TC1 (http://projects.semwebcentral.org/projects/sawsdl-tc/).

6 http://jgap.sourceforge.net/

F. L ecu e

)
s
(
 
s
e
m

i

 
.

g
v

l

e
a
c

m
h

 

t
i
r
a
g
o

n

i

Our Approach
[CanPEV05]

 Syntactic
 based
 service
 description

c1

c2

c3

c4

c5

c6

c7

c8

c9

c10

Web Service Composition

Fig. 5. Costs of Data Integration (through Data Flow Specification)

On the one hand, as expected, the costs of data integration is low (actually trivial) for
both approaches, regarding the composition with the best quality (i.e., c10). Indeed the
parameters of services match exactly, hence no further specification is needed..

On the other hand, these costs decrease with the functional quality of compositions
in our approach, whereas they are steady but very high for compositions computed by
[5] (purely based on non functional quality of composition). This is due to i) the lack of
specification of functional quality (hence a hard task to build semantic data flow from
scratch), and ii) the manual approach used to link data in compositions.

Appropriate qualities of semantic links are very useful i) to discover data flow in
composition, ii) to ease the specification (semi-automated process with Assign/Copy
elements + XPath/XQuery processes a la BPEL4WS) of syntactic (and heterogeneous)
data connections (for the persons who develop these mappings), so limiting the costs of
data integration. Indeed the better the quality of semantic links the better the semantic
mapping between the outgoing and incoming (SA-WSDL for instance) messages.

5.3 Evolution of the Composition Quality

Fig.6 reports the evolution of the composition quality over the GA generations, by varying the number of tasks. This illustrates different levels of convergence to a composition

)

%

(
 

n
o

i
t
c
n
u

s
s
e
n

t
i

)
s
n
o

i
t

u
c
e
x
?

?

?
f

o

 

e
g
a
r
e
v

(

A Composition of 10 Tasks
A Composition of 20 Tasks
A Composition of 30 Tasks

Generation

Fig. 6. Evolution of the Composition Quality
?

?

?
Table 2. Overview of Computation Costs

Tasks Num. Max. Fitness (%) Generation Num. Time (ms)
?

?

?
that meets some constraints and optimizes its different criteria by maximizing the common description and matching quality while minimizing price and response time.

Table 2 and Fig.6 present the computation costs and the number of generations required to obtain the maximal fitness value. The more tasks (and services) the more
time consuming to converge to the optimum. Obviously, the population size and the
number of generations should be extended to reach the optimum of more complex
compositions.

5.4 Towards Large Scale Based Compositions

In this experiment we suggest to study the behaviour of our approach regarding the optimisation of compositions with a large number of tasks (up to 500 tasks) and candidate
services (500). To this end we focus on its scalability and the impact of the number of
generations as well as the population size on the GA success.

Table 3. Large Scale Compositions

Tasks Num. Max. Fitness (%)

Generation Num./
Population Size

Time (ms)
?

?

?
400/200
700/400
400/200
1500/500
400/200
3000/1000
?

?

?
As illustrated in Table 3, increasing both the number of generations and the population size does actually result in better fitness values for problems with a larger number
of tasks and candidate services. For example, regarding the optimisation of a composition of 500 tasks with 500 candidate services, a number of generations of 400 and a
population size of 200 do result in a low fitness value of 24% of the maximum, whereas
considering a number of generations of 3000 and a population size of 1000 achieve 95%
of the maximum. Note that better fitness values can be reached by further increasing
the sizes of generations and populations. However doubling these sizes only improves
the fitness value by 2%. This shows that each optimisation problem converges to a
limit.

F. L ecu e

5.5 Decoupling GA Process and DL Reasoning

Since our approach is mainly depending on DL reasoning (i.e., Subsumption for qm,
Difference and lcs for qcd) and the GA-based optimization process, we suggest to decouple and detail the computation costs of Table 2 in Fig.7.

)
s
n
o

)
s
m

(
 
t
s
o

n
o
i
t
a
t
u
p
m
o

i
t
u
c
e
x
?

?

?
f
o
 
e
g
a
r
e
v

(

DL Difference for qcd
DL lcs Computation for qcd
DL Subsumption for qm
Pure GA Process

DL GA

DL GA

DL GA

Task Num. = 10

Task Num. = 20

Task Num. = 30

Fig. 7. DL and GA Processes in our Approach

DL reasoning is the most time consuming process in optimisation of QoS-aware
semantic web service composition wherein the number of tasks and candidate services
are greater than 10 and 35. This is caused by the critical complexity of qcd computation
through DL Difference (even in ALE DL).

5.6 Convergence of GA-Based Approaches

In this experiment, we compare the convergence of our approach (11) with the main
alternative at present [5]. To this end the functional criteria of our approach are disregarded in order to focus only on the GA-driven aspects of the optimisation process.

According to Table 4, the advantage of our approach is twofold. Firstly we obtain
better fitness values for the optimal composition than the approach of [5]. Secondly,
our approach converges faster than the approach of [5]. In addition our function avoids
getting trapped by local optimums by i) further penalizing compositions that disobey
constraints (the factor of pe in (9) and (11)) and ii) suggesting a dynamic penalty, i.e.,
a penalty having a weight that increases with the number of generations.

Table 4. Comparing GA-based Approaches (Population size of 200)

Tasks
Num.

Approach

Our Model (11)

[5]

Our Model (11)

[5]

Our Model (11)

[5]

Max.

Generation

Fitness (%)
?

?

?
Num.
?

?

?
Time (ms)
?

?

?
These results support the adoption of our model in the cases where a large number

of tasks and services are considered.

6 Related Work

Review of existing approaches to optimising web service compositions reveals that no
approach has specifically addressed optimisation of service composition using both QoS
and semantic similarities dimensions in a context of significant scale.

Indeed main approaches focus on either QoS [5,8] or on functional criteria such as
semantic similarities [6] between output and input parameters of web services for optimising web service composition. In contrast, we present an innovative model that addresses both types of quality criteria as a trade-off between data flow and non functional
quality for optimizing web service composition.

Solving such a multi-criteria optimization problem can be approached using IP [8,6],
GA [5], or Constraint Programming [25]. The results of [5] demonstrate that GAs are
better at handling non-linearity of aggregation rules, and provide better scaling up to
a large number of services per task. In addition they show that dynamic programming
(such as IP-based approaches) is preferable for smaller compositions. We follow [5]
and suggest the use of GAs to achieve optimization in web service composition, yet we
also extend their model by i) using semantic links to consider data flow in composition,
ii) considering not only QoS but also semantic quality (and contraints) of composition,
iii) revisiting the fitness function to avoid local optimal solution (i.e., compositions
disobeying constraints are considered).

The optimization problem can be also modelled as a knapsack problem [26], wherein
[27] performed dynamic programming to solve it. Unfortunately the previous QoSaware service composition approaches consider only links valued by Exact matching
types, hence no semantic quality of compositions. Towards the latter issue [6] introduces a general and formal model to evaluate such a quality. From this they formulate
an optimization problem which is solved by adapting the IP-based approach of [8]. All
quality criteria are used for specifying both constraints and objective function.

7 Conclusion

We studied QoS-aware semantic web service composition in a context of significant
scale i.e., how to effectively compute optimal compositions of QoS-aware web services
by considering their semantic links. On the one hand the benefits of a significant domain
such as the Web is clear e.g., supporting a large number of services providers, considering large number of services that have same goals. On the other hand, the benefits of
combining semantic links between services and QoS are as following:

The computation of web services composition whilst optimising both the non
functional qualities and the quality of semantic fit along non-trivial data
flow, where the information required and provided by services does not match
perfectly in every dataflow, using semantic-based description of services.

By addressing non trivial data flow in composition , we aimed at limiting the costs of
(semantic heterogeneity) data integration between services by considering appropriate

F. L ecu e

quality of semantic links. To this end we have presented an innovative and extensible
model to evaluate quality of i) web services (QoS), ii) their semantic links, and iii)
their compositions. In regards to the latter criteria the problem is formalized as an optimization problem with multiple constraints. Since one of our main concerns is about
optimization of large-scale web service compositions (i.e., many services can achieve a
same functionality), we suggested to follow a GA-based approach, faster than applying
IP. The experimental results have shown an acceptable computation costs of our GAbased approach despite the time consuming process of the on-line DL reasoning. In case
of semantic link-less models, the benefits are mainly based on penalizing constraint
violation (of the fitness function) which makes the approach faster than [5].

In future work we will consider a finer difference operator, which is also easy-to-
compute in expressive DLs. Determining the most appropriate parameters for the GA
phase requires further experimentations.
