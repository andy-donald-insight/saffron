Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 2127

Contents lists available at ScienceDirect

Web Semantics: Science, Services and Agents

on the World Wide Web

j o u r n a l h o m e p a g e : w w w . e l s e v i e r . c o m / l o c a t e / w e b s e m

Policy-based spectrum access control for dynamic
spectrum access network radios
Filip Perich, Mark McHenry

Shared Spectrum Company, 1595 Spring Hill Road, Vienna, VA 22182, USA

a r t i c l e

i n f o

a b s t r a c t

Article history:
Received 17 August 2007
Received in revised form
30 November 2007
Accepted 17 February 2008
Available online 3 April 2008

Keywords:
Interference avoidance
Dynamic spectrum access
Policy control
Radio spectrum management
Software-defined radios

1. Introduction

We describe the design of a policy-based spectrum access control system for the Defense Advanced
Research Projects Agency (DARPA) NeXt Generation (XG) communications program to overcome harmful
interference caused by a malfunctioning device or a malicious user. In tandem with signal-detection-based
interference-avoidance algorithms employed by cognitive software-defined radios (SDR), we design a set
of policy-based components, tightly integrated with the accredited kernel on the radio device. The policy
conformance and enforcement components ensure that a radio does not violate machine understandable policies, which are encoded in a declarative language and which define stakeholders goals and
requirements. We report on our framework experimentation, illustrating the capability offered to radios
for enforcing policies and the capability for managing radios and securing access control to interfaces
changing the radios policies.

 2008 Elsevier B.V. All rights reserved.

Cognitive software-defined radios (SDR) offer tremendous performance and operational benefits, including the ability to employ
dynamic spectrum access (DSA) methods, tailor the system design
to a users unique circumstance, and remotely configure and control deployed wireless networks; however, SDRs could pose high
security risks hindering deployment of the technology. The main
concern is that a malicious user could reconfigure a deployed SDR
or that a SDR could malfunction in its adaptation, and cause a significant interference to live-dependent services such as aviation or
global positioning systems.

To address the challenges of the SDR technology and to quantify
the benefits the technology has to offer, Shared Spectrum Company
has been selected as the prime contractor by the U.S. Department of Defense Advanced Research Projects Agency (DARPA) to
develop novel technologies and system concepts for dynamically
redistributing allocated spectrum along with novel technologies to
enable spectrum pooling and secondary spectrum sharing as part of
the Phase III of the NeXt Generation (XG) Communications Program
[3]. The program focuses on technical challenges, such as processing
power and signal sensing requirements, and acceptance challenges,
a subset of which are the security concerns related to harmful

 Corresponding author. Tel: +1 703 761 2818.
E-mail addresses: fperich@sharedspectrum.com (F. Perich),

mmchenry@sharedspectrum.com (M. McHenry).

1570-8268/$  see front matter  2008 Elsevier B.V. All rights reserved.
doi:10.1016/j.websem.2008.02.003

interference and certification of the SDR technology by regulatory
stakeholders.

As part of the XG program, we have developed a policy-based
network management system for controlling dynamic spectrum
access. This article reports on the design and experimentation
results of the effort.

Our contributions to the XG program consist of (i) accredited
policy enforcement components embedded within a SDR, (ii) an
administration system for securely creating, managing, and controlling policies for groups of SDRs, and (iii) a foundation language
for representing the high-level spectrum access control policies
consisting of computer-understandable rules that define the scope
of operations for SDRs. The contributions extend our prior work
in the early phases of the XG program and, in part, are based on
the collaboration efforts with our subcontractors [4] and work performed by other organizations involved in previous phases of the
program [1].

2. Policy system architecture

For assuring correct operations and for eliminating harmful
interference, traditional regulatory approaches employ a prevention mode. Regulators define fixed requirements for building an
application-specific radio. Manufacturers must meet the requirements with their radios to be certified for sale; however, as a
result, the radios are locked because they cannot be re-used for
other applications.

F. Perich, M. McHenry / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 2127

Fig. 1. XG-Enabled SDR device includes a cognitive System Strategy Reasoner for monitoring and adjusting the device for balancing its performance and a Policy Conformance
Components for providing operational assurance to stakeholders.

In order to enable users and operators to fully utilize the potential of DSA and at the same time provide control and assurance to
regulators and stakeholders that the technology does not significantly harm other systems, we advocate an avoidance model and
design the XG architecture accordingly.

As shown in Fig. 1, we divide the XG-enabled SDR device into
three areas: (i) the SDR communication stack and the underlying
radio hardware, (ii) the cognitive System Strategy Reasoner (SSR),
and (iii) the Policy Conformance Components (PCCs).

The SSR represents a cognitive module that controls the hard-
ware, gathers data, forms strategies, and acts as an interface for
transmitting and receiving data. The SSR is responsible for interacting with the PCCs for determining spectrum access opportunities
that are currently available, e.g. frequencies, bandwidth, power
level, or modulation techniques the SDR can use to transmit given
its current environment. The SSR then executes applicable strategies needed for the radios transmissions to conform to the policies.
The SSR is also responsible for providing the PCCs with an access
to its current state, evidential results obtained from other radio
components, including detectors measurements, and data received
from other radios.

The PCCs are responsible for assuring that the device operates
correctly and does not cause harmful interference by enforcing
that the SSR configures the radio to one of the approved states
only and by filtering illegal transmission requests. Whereas the
manufacturer can implement custom SSRs, the PCCs represent
standardized, accredited components in order to conform with
regulatory stakeholder requirements as they represent the core
trusted components on the SDR device.

The PCCs consist of the Policy Manager (PM), Database, and
Policy Conformance Reasoner (PCR) and Policy Enforcer (PE).
Depending on the resources available to a SDR, the PCCs can be
embedded on the SDR. Alternatively, the Policy Manager, Database,
and Policy Conformance Reasoner can be moved to a remote proxy
and accessed remotely by the Policy Enforcer on the SDR.

2.1. Policy Manager

The Policy Manager acts as a gateway to the accredited PCCs. The
PM is responsible for processing and responding to remote commands from any authorized stakeholder and for maintaining a pol-

icy database. Fig. 2 lists the set of commands supported by the PM.
All commands are expressed using the IETF NETCONF [11] format
for providing a maximum compatibility with other networking sys-
tems. Additionally, the PM relies on a X.509 Public Key Infrastructure (PKI) for authorization, authentication, and accounting [12].

The PM maintains one running mode and multiple standby
modes. Each mode is associated with a set of policies that should
be enforced by the PCCs when the mode is activated. This enables
administrators to pre-plan policy configurations and quickly switch
among them as needed.

2.2. Policy Enforcer

The Policy Enforcer restricts the SDRs access to a spectrum by
ensuring that the SDRs configuration conforms with regulatory and
system policies. The filtering of transmission requests is achieved
by evaluating current configuration of the device, its components,

Fig. 2. Remote Policy Commands.

collected environmental data, and a specific transmission request
against policy rules and constraints.

The PE includes a Guard component, which periodically clears all
frequency channels considered by the SDR against available poli-
cies. The PE maintains representation of the current state of the
device as well as a cache of recent approvals and denials to speedup the decision making process. For each channel, the PE maintains
a set of pre-approved device states that the SSR must match in order
to be permitted to transmit. Each pre-approved state represents a
configuration in terms of values and allowed deviation to parameters maintained by the SSR that are used for matching a request.
Alternatively, for each channel the PE inquires with the Policy Conformance Reasoner for determining if the current state for that
channel would be approved. The PE maintains these decision caches
as to limit the amount of work required from the computationintensive PCR. Ultimately, the PE pro-actively monitors channels
the SSR is attempting to use and pro-actively enforces that transmissions originating from the SSR fully satisfy policy requirements.

2.3. XG Policy Language

The PCR depends on policies expressed in the XG Policy
Language. The language represents a declarative language for
expressing policies and logic used for guiding operation of the SDRs.
The language is based on the W3C Web Ontology Language (OWL)
Lite [14] and W3C Semantic Web Rule Language (SWRL) [6] for
maximum compatibility with other military systems.

We define ontological concepts for expressing knowledge about
an SDR device, its hardware and software components, protocol
stacks, capabilities, and current state. This includes an operational
configuration of a transmitter in terms of power and frequency as
well as history of collected signal detections from a detector, the
latter represented as evidence. The information is maintained by
the SSR in the manufacturers chosen format; however, when the
information is provided to the PCCs, the data is annotated in the XG
ontology.

By using the XG ontology, the system provides an interoperable
framework for sharing and evaluating information across different
SDR implementations. This enables manufacturers to implement
custom SSR and stakeholders to certify and reuse PCCs on multiple
platforms. The XG ontology also enables stakeholders to express
spectrum requirements using an abstract terminology without the
need to understand specific SDR implementations.

The language defines concepts for expressing restrictions on the
SDRs and their states in terms of SWRL rule constraints. We define
rules for expressing the applicability of a specific policy and for
accordingly determining actions the policy permits or prohibits a
device to perform.

The fundamental modeling primitive of

the language is
xg:Policy, which is defined as an OWL class. Each policy is
associated with a collection of facts and constraints used to determine whether a policy applies to the radios current configuration.
We differentiate among two policies: (i) xg:PermissivePolicy
permits devices to access a spectrum whenever a device
and its evidence can satisfy the policys constraints; and (ii)
xg:ProhibitivePolicy prohibits devices to access a spectrum
whenever a device and its evidence violate one of the policys con-
straints.

We differentiate among a set of constraint categories, which
outline the traditional spectrum access requirements imposed by
spectrum stakeholders based on frequency, time of the day, device
capability, and agreements among stakeholders. The rule categories
can be combined to provide complex rules. Fig. 3 shows an excerpt
from a sample policy and its effects.

Fig. 3. Sample Policy Template.

The language defines terminology for allowing the architecture
to operate in the presence of multiple policies from multiple stake-
holders. When multiple policies are activated, the PCCs need to
resolve conflicts among policies. We define a default de-confliction
rule by stating that a prohibitive policy overrides a permissive pol-
icy. This rule is explicitly implemented by the PCCs because the
systems primary goal is to limit interference. At the same time,
we define meta-level vocabulary for defining absolute and relative
prioritization of policies, thus overriding the default rule. The language defines vocabulary for assigning numeric priority levels to
policies. The language also defines vocabulary for relatively ordering policies by defining relationships between pairs of policies. The
combination of the default rule and the prioritization schemata,
however, always determine an absolute order among policies thus
assuring enforcement consistence and correctness.

2.4. Policy Conformance Reasoner

The PE relies on the PCR to evaluate policies. The PCR is responsible for parsing and validating a policy for syntax conformance
and meta-level validity. Once validated, the PCR converts the policy
into its internal representation. The PCR extracts the data defined
inside the policy document and loads them into its knowledge
base. The PCR also extracts rules defined by the policies and converts them into workflows. During the conversion process, the
PCR optimizes the estimated execution time of each workflow by
reordering the workflow components based on the expected cardinality of answers and computing complexity of each component.
For example, the PCR defers all geospatial-computational workflow
components to be processed after knowledge-lookup components.
The PCR uses the policys meta-description for inserting the policy in a sorted list of active policies based on decreasing importance.
This reduces the workload required for the PCR to reach a transmis-

F. Perich, M. McHenry / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 2127

Fig. 4. Spectrum access enforcement.

sion approval decision and for computing available spectrum access
opportunities.

Using this approach, the PCR dynamically merges and deconflicts policies as they are made available to the radio. The
de-confliction is based on applying the default rule for breaking
ties between permissive and prohibitive policies, numerical priority levels assigned to policies, and relative policy ordering. Even
in the event of one permissive policy and one permissive policy
being more important than each other, i.e. a presence of a cycle
among policies, the default rule guarantees that a prohibitive policy
takes precedence and thus avoids potentially harmful interference
by rather denying a requested transmission.

2.5. Spectrum access enforcement

The primary function of the PCCs is to avoid interference by
interrupting transmission commands sent to the SDRs modem.
Before the SDR transmits, the SSR must first obtain an approval
from the PCCs component using the process shown in Fig. 4. The
PCCs component also has a direct access to the hardware to preclude the SSR from sidestepping the PCCs and transmitting using
an illegal configuration.

The PE maintains a set of pre-approved state models based on
configuration policies and associated validity time period. During
the adjustable time period, the PE assumes that the pre-approved
device state would in fact be approved. The time period may range
from zero to potentially hours as defined in, for example, the
Dynamic Frequency Selection (DFS) standard [5].

Fig. 5. Opportunity discovery.

When no pre-approved state is applicable, the PE sends a full
Petition request to the PCR, which evaluates it against an ordered
list of policies based on decreasing priority. The PCR finds the first
policy in the ordered list that applies to the Petition and uses its
decision to approve or deny the transmission.

2.6. Spectrum Access Opportunity Discovery

Since the policies restrict spectrum access, the SSR can use the
constraints to learn about newly available channels and requirements that the SSR must meet prior to transmitting on those
channels, as shown in Fig. 5. The SSR obtains the opportunities by
submitting partially populated configuration states to the PCR and
asking the PCR to evaluate the request against policies for discovering missing values of unpopulated parameters that would render
the request a valid. For example, the PCR may discover that for a submitted configuration to be approved, the transmission frequency
must be either 2310 or 5180 MHz. In this case, the PCR returns two
opportunities.

There are situations when the PCR will be unable to find or fully
populate an opportunity. If the request does not match any policy
or if it violates a policy, then no opportunity is found. On the other
hand, a parameter may not be bound if there is an unbound set of
possible values. For example, while a value may be restricted to a
certain range, depending on the accuracy it would be very expensive to bound a devices position to be within continental USA by
enumerating all matching geospatial coordinates. Therefore, while
for most cases the PCR is able to find a spectrum opportunity; it
may be unable to do so in every situation.

2.7. Policy management and provisioning

To enable an end-to-end control of the policy-based system, we
also define Policy Authoring Tool and Policy Administration Console
within the system for authoring and managing policies as shown
in Fig. 6.

Fig. 6. Policy management and provisioning tools.

We implemented the Policy Administrator Console and the Policy Authoring Tool as Windows-based applications. Additionally,
we integrate the Policy Administration Console with a custom dissemination framework for remotely controlling and monitoring
XG-enabled SDR devices. Using the Administration Console, an
authorized operator can query status of any radio in its domain.
The operator can choose between communicating with one radio
or with a set of radios at a time. Through the interface, an operator
can send commands to PMs to add and remove policies, activate
modes or delete log entries. Additionally, an operator can use the
interface to obtain a list of currently active policies on a certain
radio as well as preview historic decisions made by the radio.

3. Experimentation

Our experimentation focuses on the performance of the PCCs.
The PCCs are implemented to execute on a small general-purpose
processor that is embedded within an XG radio. The processor has
computing resources equivalent to a personal digital assistant or a
smart phone. Moreover, the PCCs are limited by the fact that they
must share the processor and the memory with the SSR and other
components of the XG-enabled radio. Additionally, the PCCs must
account for limited battery life of XG-enabled radios.

Our main challenges, therefore, were to implement a fully operational Policy Manager, Policy Enforcer, Policy Database, and Policy
Conformance Reasoner with support for OWL and SWRL processing
on a small-scale, embedded general-purpose processor. The Policy
Conformance Reasoner represented the largest bottleneck.

Based on results from our initial Prolog-based implementation,
we developed a C++ Policy Conformance Reasoner for meeting processor and main memory requirements. We adopted the LibRDF
[2] library as in-memory storage for RDF graphs [9]; however, we
implemented a custom storage engine for automated indexing of
RDF statements and for automated assertion and retraction of sub-

class and sub-property statements. Additionally, we implemented
a custom policy storage engine, which extracts the relevant information from OWL documents based on the XG Policy Language
and pre-computes answers to frequent RDF queries. We also implemented a custom SWRL processor with support for rule and atom
reordering, caching, and forward and backward chaining. Finally,
we implemented custom translation libraries between the RDF
storage, policy storage, and the storage employed by the SSR for
minimizing overall system requirements, which allowed us to significantly decrease the memory requirements and at the same time
improve processing speed.

Fig. 7 shows a sample screen snapshot from the XG radio soft-
ware. The figure shows a total of six channels on the top of the screen
currently considered by the SSR. Three channels in the lower bands
are marked as unavailable by the PCCs due to policy violations. The
upper three channels are marked as available (colored in black). The
SSR is currently using one of these the channels (colored in blue).
The screen snapshot was taken after injecting a permissive policy
into the system that enabled transmissions in the 350800 MHz
range, which included the higher channels of the radio. There
was no policy for the lower channels, those channels were hence
marked as unavailable due to the default deny-transmission rule.
We optimized and executed the PCCs on the next version of
the XG-enabled SDR, which uses a 400 MHz PowerPC processor
and 128 MB of DRAM main memory; however, the PCCs share the
processor and the memory with the underlying Linux operating
system, the XG radio software including the SSR, and the XG detection software.

The XG policy software is a significant user of the computing
resources. Specific processing requirements depend on the number of policies, the types of policies, and the number of policy
requests per second. Benchmarks on the XG hardware revealed
results shown in Table 1. We used DFS as a benchmarking policy
as it is currently the only policy defined by FCC for SDRs. For this

F. Perich, M. McHenry / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 2127

Fig. 7. Testing XG Radio Console showing three blocked channels and three available channels for operation.

Table 1
Policy Resource Requirement Benchmark Results

Number of policies

Average decision time

Memory consumed (code + data)

N/A
21 ms
22 ms
25 ms
29 ms
30 ms
31 ms

3.7 MB
3.8 MB
3.9 MB
4.1 MB
4.4 MB
5.2 MB
6.8 MB

benchmark, each DFS policy had 2 rules and 345 policy statements.
The results show that it is feasible to use OWL and SWRL-based
reasoning engines on an XG-enabled SDR device, since our average
decision time meets the XG program has requirement of 100 ms
get-off time.

Additionally, we field-tested the policy-enabled XG SDRs at Fort
A.P. Hill in order to test the end-to-end implementation of tem-
poral, geospatial, spectral, and priority-based policy reasoning. A
sample policy test is shown in Fig. 8. We equipped two vehicles

with XG-enabled SDRs. The vehicles traveled throughout the field
range while maintaining a communication link. The radios were in
presence of other radio systems and their policies were dynamically
changed using our remote tools.

As shown in Fig. 8, the radios were operating in a frequency
range from 426 to 440 MHz. A policy was added at 11:20 a.m.
prohibiting transmissions in a certain geographical area. As the
vehicle moved out of the area, at time 11:25 a.m., the radio was
permitted to transmit. A second, permissive, policy was added
at 11:46 a.m. overriding the initial policy for frequencies from
435 MHz until 440 MHz. Therefore, when the radio entered the geographical area again, it was permitted to transmit in the higher
channels in contrary to the first policys requirements. The figure
also shows that after the policies were unloaded at 12:05 p.m., all
transmissions were defined due to the default deny-transmission
rule.

The results show that the policy-based approach is applicable
and viable to the SDRs. In combination with detecting mechanisms
employed by XG-enabled SDRs, the approach ensures that the SDRs
do not cause harmful interference. Additionally, the policy-based

Fig. 8. Geospatial and priority-based policy reasoning field test results.

approach showed the capabilities to manage radios and secure
access control to interfaces changing the radios configuration, thus
addressing the second type of concerns.

4. Related work

Cognitive SDR technology and policy-based control have
recently received vast interest across many communities. This can
be evidenced by the interest in the IEEE P1900 Standards Coordinating Committee for DSA networks [8] and in the IEEE Dynamic
Spectrum Access Networks conferences [7]. While the XG program
is one of the initial research efforts on developing cognitive SDR,
there now exists a number of additional ongoing programs.

The Center for Wireless Telecommunications at Virginia Tech
developed a cognitive software engine for dynamically adjusting
configuration of a legacy Proxim Tsunami 5-GHz radio in response
to changing interference and propagation environment [13]. The
cognitive engine collects information about the radios environment and uses the data for identifying a radio behavior that worked
well in such environments in the past and instructs the radio to
configure itself to adapt to such a behavior. The approach is similar
to the XG architecture; however, we also define and implement the
necessary policy-based control mechanism for enforcing regulatory
compliance.

Additionally, the Centre for Telecommunications Value-Chain
Research at Trinity College Dublin is exploring issues related to
policy-based management mechanisms [10]. The group explores
alternative organizational structures for defining and enforcing
policies in order to allow SDR devices to self-organize based on
multiple groupings with differing goals and spectrum access poli-
cies. The approach is similar to the XG architecture in that it
allows multiple stakeholders to define conflicting policies; how-
ever, the proposed architecture de-conflicts the policies based on
the dynamic roles of organizations prior to deploying the precomputed policy model onto the radios.

5. Conclusions and future work

We designed and implemented a policy-based system as part
of the DARPA NeXt Generation communications program to study
and address the harmful interference and incorrect radio operation
concerns raised with software-defined radios.

To avoid a harmful interference caused by a malfunctioning
software-defined radio, in tandem with signal-detection-based
interference avoidance algorithms employed by XG-enabled
software-defined radios, we designed a set of policy-based components that are tightly integrated with the accredited kernel on
the device. The policy conformance and enforcement components
are responsible for ensuring that a device does not violate policies,

which are encoded in a declarative language and which define regulatory and other stakeholders requirements. Moreover, to avoid
a harmful interference caused by a malicious user, we use secure
management and distribution mechanisms for preventing malicious users from altering loaded policies as well as from inserting
additional policies.

Since regulators and other stakeholders are unable to certify
every state of a device, we moved the certification and enforcement processes closer to the software-defined radio. The policy
components represent official regulatory proxy agents that enforce
devices operations on behalf of the regulators based on their
dynamic rules and requirements.

As part of a future work, we plan to demonstrate that the architecture supports low cost, low processor power radios by fielding
the framework in a military domain and a public safety/homeland
security disaster scenarios.

Acknowledgement

This work was supported by the U.S. Department of Defense
Advanced Research Projects Agency XG Program under Contract
FA8750-05-C-0150.
