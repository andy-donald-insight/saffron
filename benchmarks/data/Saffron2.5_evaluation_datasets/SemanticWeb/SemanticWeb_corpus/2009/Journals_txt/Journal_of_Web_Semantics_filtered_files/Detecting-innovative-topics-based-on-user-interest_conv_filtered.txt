Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 107120

Contents lists available at ScienceDirect

Web Semantics: Science, Services and Agents

on the World Wide Web

j o u r n a l h o m e p a g e : w w w . e l s e v i e r . c o m / l o c a t e / w e b s e m

Detecting innovative topics based on user-interest ontology
Makoto Nakatsuji a,, Makoto Yoshida b, Toru Ishida c

a NTT Cyber Solutions Laboratories, NTT Corporation, 1-1, Hikarinooka, Yokosuka-Shi, Kanagawa 239-0847, Japan
b Data Center Facilities Department, NTT Facilities Inc., Granpark Tower, 3-4-1, Shibaura, Minato-ku, Tokyo 108-0023, Japan
c Department of Social Informatics, Kyoto University, Kyoto 606-8501, Japan

a r t i c l e

i n f o

a b s t r a c t

Article history:
Received 6 December 2007
Received in revised form 20 December 2008
Accepted 29 January 2009
Available online 10 February 2009

Keywords:
Detecting innovative topics
User-interest ontology
Measuring similarity between ontologies

In this paper, we detect innovative topics, those that are new and hopefully interesting to the user. We
try to expand user interests significantly by letting the user browse those topics.

We first generate user-interest ontologies that allow user profiles to be constructed as a hierarchy of
classes where a user interest weight is assigned to each class and instance. Next, we measure the similarity
between user interests by using interest weights on their user-interest ontologies and generate user group
GU that has high similarity to user u. The innovative topics for u are then detected by determining a suitable
size of GU and analyzing the ontologies in GU.

 2009 Elsevier B.V. All rights reserved.

1. Introduction

In this section, we first describe the background and purpose of
our study. We explain our approach to detecting innovations, and
then describe the impact of applications based on our method.

1.1. Background and our purpose

Blogs are becoming more popular for publishing and discussing
shared interests among users. Information sharing systems for
blogs could enable users to expand their interests by browsing the
collections of blog entries published by other users. However, to
retrieve information from blog entries, current blog services simply
employ keyword searches of blogs using Google or simple metadata
attached to blog-entries, i.e. RSS metadata such as titles, creators,
dates and so on. Unfortunately, neither approach offers detailed
semantics about the description content in blog entries. Moreover,
there is no function to generate personalized searches easily, users
are restricted by their own knowledge or imagination when entering search keywords. Such keyword searches are time consuming
and troublesome. For example, users cannot perform a keyword
search if they do not understand what they want to search for to
some degree beforehand. Thus, when keywords cannot be specified,
information retrieval from blog entries often cannot be performed

 Corresponding author. Tel.: +81 46 859 2349.
E-mail addresses: nakatsuji.makoto@lab.ntt.co.jp (M. Nakatsuji), yoshida2h@ntt-

f.co.jp (M. Yoshida), ishida@i.kyoto-u.ac.jp (T. Ishida).

1570-8268/$  see front matter  2009 Elsevier B.V. All rights reserved.
doi:10.1016/j.websem.2009.01.001

even if the database contains topics that the user might become
interested in.

To counteract the above problems, the study on adaptive information filtering (AIF) [6] cooperates with the user in constructing
a user profile; recommendations are offered based on the profile.
Making a user profile interactively beforehand is good for offering recommendations to users, as indicated by the high-accuracy
of AIF. Unfortunately, a common complaint about AIF is the users
need to make his/her own profiles, and often known information is
encountered many times. This is because recommendation systems
with conventional AIF only check the possibility of the user being
interested the document and fail to identify if the information has
already been presented to the user or not.

For filtering these redundant documents, novelty-detection
researchers [18] define a novel document as a document that
includes new information that is relevant according to the user pro-
file. They extract relevant documents from a document stream and
then classify the documents as novel or not; novel documents are
provided to the user. Novelty detection can, however, provide documents that offer new information about concepts that have already
present in the user profile.

In our study [11], we define an innovative topic as a topic that
includes new concepts that are likely be interesting to the user even
though those concepts are not present in the user profile. The goal
is to expand the users interests significantly by detecting innovative topics and recommending those to the user. In particular, we
focus on the detection of innovative topics in blogs because blogs
have become a popular method of publishing and searching for
information that can appeal to the users.

M. Nakatsuji et al. / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 107120

1.2. Approaches

For achieving the above-mentioned goal, we use the following

approaches.
 We start with a proposal to automatically extract a user profile as
a user-interest ontology, which is a class hierarchy of user interests according to user-interest weights assigned to each class and
instance. In this ontology, we consider that instances are defined
as topics that the user is interested in, such as music artists, music
songs, movie titles and so on. On the other hand, the classes
are defined using a taxonomy of instances in a service domain.
For example, we can set classes as genres, which are defined by
instance sets. Thus, a taxonomy of topics of a user-interest ontology is generated according to that of a service-domain ontology.
We classify user entries according to the service-domain ontology and remove classification mistakes automatically by using
the taxonomy of topics and continuity of descriptions about user
interests as explained in Section 3.2.2. By using a taxonomy of topics in classifying blog entries into the service-domain ontology,
we can automatically generate user interests with high accuracy.
 Next, we measure the similarity of user-interest ontologies by
considering the degree of interest agreement between each class
and instance. Most previous techniques of measuring similarity
between ontologies [12,5,9] first need identification of the classes
that have the same meaning in different ontologies. They then
measure the similarity of the relationships between a class and
sub-classes in different ontologies. On the other hand, by generating the taxonomy of instances in interest ontologies according
to that of a service-domain ontology, our similarity measurement technique supports large-scale datasets of user-interest
ontologies, see the similarity measurement performed in our
experiments in Section 5. Furthermore, by considering the degree
of interest agreement between each class and instance, we can
measure the similarity between the interests of users considering
the width and depth of a users interests through the taxonomy
of topics in user-interest ontologies.

Innovative topics for each user u are identified by analyzing the
classes, C, of the ontologies of users in user group GU that have
high similarity to the ontology of u even though the user-interest
ontology of u lacks C. For detecting attractive and innovative
topics for a user, determining the best size of user group GU is
important. We establish a new evaluation method that determines a suitable size of GU by observing the difference between
the user-interest ontology of user u and user-interest ontologies
of user group GU while changing the size of GU.
 We show two evaluation steps based on a large number of blog
entries as collected by the blog portal Doblog1 and a music
service-domain ontology.
(1) The first step is an offline experiment on extracting interestontologies and detecting topics that are innovative to users.
The results show the effectiveness of our technique in
generating user-interest ontologies. We also evaluated our
detection of innovative topics in comparison with a recommendation list created by service-domain experts. Our
scheme was confirmed to detect more innovative topics than
the manually created recommendation lists even though our
results cover most of the topics covered by the manual rec-
ommendation.

(2) The second step is an online experiment for analyzing user
reactions to topics recommended based on our assessments

of an online experimental service.2 Most prior works used
only offline synthetic data to evaluate their recommendation techniques. However, analyzing the reactions of actual
users to recommendations is very important for confirming whether the recommended innovative topics are actually
effective. By analyzing the frequency of user access to innovative instances output by our recommendation scheme over
time, we confirmed the effectiveness of our user-interest
ontology extraction and innovative topic detection. We found
that the innovative topics recommended by our technique
were used for creating new communication links between
users; this was confirmed by evaluating the frequency of comments between users who came to know each other through
our online recommendations.

1.3. Impact of applications based on our method

Most recommendation schemes fail to consider the semantic
relationships between a user and items that are recommended to
the user. Thus, the user cannot easily understand why particular
items were recommended. The semantic relationships described
above are necessary if the user is to accept recommended items,
especially when the user has not thought of those items before.

Our method can attach the degree of innovation, which indicates
how innovative the recommended items are to the user, defined
further in Section 4.2, to the relationships between the interests of
a user and the items that are recommended to the user, by using
a taxonomy of instances defined by service designers. That is, our
method can recommend to user a content items that belong to the
concept that user a does not know of, together with their degree
of innovation. Here, we consider concept as a class defined in the
service-domain ontologies. By presenting instances with supporting information such as innovation level of those instances, the
user can more readily become interested in instances not stored
in his/her profile and so acquire new interests.

Some examples might help understanding. Consider user A who
has instances i1 and i2 under the class Rock in her interest ontol-
ogy, and we extract users X whose interests are similar to those of
A according to the results of similarity measurements between the
interest ontology of user A and those of the other users. If there
are many users in X who are interested in instance i3 under the
class Classic, we can recommend instance i3 of class Classic to
user A together with information indicating its high level of inno-
vation, because Classic and Rock are not similar semantically given
the definition in taxonomy of instances in music domain. Thus, we
can recommend items to user A with the phrase you may not have
heard about instance i3 in Classic genre, but users whose interests
are similar to yours, are interested in instance i3. By presenting
some unknown instances to the user together with the level of
innovation, or using phrases like the one described above, user A
may develop an interest in i3 even though its concept may not be
known to user A, i.e. not stored in a profile of A. However, user A has
a chance to expand his/her interests significantly, if he/she accesses
innovative instance i3.

The paper is organized as follows. Section 2 introduces related
works. Section 3 describes our automatic user-interest ontologyextraction method. Section 4 describes detecting innovative topics
by measuring the similarity between user-interest ontologies and
by determining a suitable size of user group GU. Sections 5 and 6
describe our offline and online experimental studies, respectively.
Section 7 describes how to create a deep taxonomy by fusing various

1 http://www.doblog.com is one of the biggest blog portals in Japan. In December

2 We provided an experimental service DoblogMusic at http://music.doblog.

2006, Doblog had about 55,000 users.

com/exp/ for Doblog users from August to December 2006.

kinds of metadata attached to content items, using examples in the
movie domain, and concludes this paper.

3.1. Designing service-domain ontology

2. Related works

In [4], the authors classify web pages and place them in a
topic directory by using pages in the directory and hyperlink relationships among pages. On the other hand, we extract interest
ontologies and use them for innovative blog entry detection. There-
fore, we do not need a huge volume of web pages and hyperlink
relationships. We classify blog entries by only using a servicedomain ontology, and remove classification mistakes by using class
characteristics and continuity of descriptions about user inter-
ests.

In [8,1], the authors try a major technique that extracts blog community web pages by adapting a current extraction technique that
is similar to the technique in [7] and the PageRank algorithm [14].
The problems in applying the technique in [8,1] to creating and
activating a blog community are that the technique cannot provide
innovative information to users because pages are only extracted if
they already have link relationships.

Many online content providers such as Amazon,3 offer recommendations based on collaborative filtering [17,3,16], which is
a broad term for the process of recommending items to users
based on the intuition that users within a particular group tend
to behave similarly under similar circumstances. One advantage
of collaborative filtering techniques is that they can recommend
relevant items that are different from those in a users profile.
However, the existing collaborative filtering techniques do not consider the semantic relationships between user A and content items
that are recommended to A by using the taxonomies attached to
content items. As a result, the user cannot understand semantic
reasons why those items are recommended and how innovative
the recommended items are, and so is less likely to access the rec-
ommendation.

For applying a semantic approach to retrieving information
from a blog, semblog [13] tries to construct a user profile using a
personal ontology, which is a manual construction of a users classification of blog entries in a category directory of the ontology
according to their interests. A category directory is built by users
beforehand to construct an ontology-mapping-based search frame-
work. However, manual ontology creation is a time-consuming and
troublesome task for users, and applying a semantic ontology to
a blog community is difficult. We automatically extract a userinterest ontology; thus, creating and updating ontologies is easy
for users.

In research studies of ontology mapping [12,5,9], similarity
measurements considering approximation of classes and class
topologies are proposed in [9]. In addition to class topology,
we consider each users weighted interest in each class and
instance. Furthermore, in analyzing conjunctions in class topologies of ontologies with high similarity scores, we detect innovative
instances, those that other users have in their ontologies but the
user does not.

3. Interest ontology extraction

We first explain how to design the service-domain ontology of
a service domain, examples are provided for the content delivery
services of music and movies, and then describe an method that
can automatically extract interest ontologies.

We describe the procedure so as to support the generation of

interest ontologies.

We use OWL (web ontology language) [10] for describing a
service-domain ontology in detail. The problem is that most users
find it very difficult to design detailed ontologies. Our solution is to
permit the use of simple ontologies. These ontologies require only
a hierarchical relationship among the classes (subClassOf descrip-
tion) and a property description that specifies the enumeration of
the instances (oneOf description); they restrict the succession condition in the class hierarchy. Our method, described in Section 3.2,
can automatically extract an interest ontology by classifying user
blog entries into service-domain ontologies without user interven-
tion.

As shown in Fig. 1, first, the ontology designer chooses the target service domain for extracting user interests. The designer then
chooses metadata that reflects user interests by analyzing the activity of an existing community such as a bulletin board system (BBS).
In the music domain, the designer chooses metadata of genres or
artists, considering that the community is founded on this meta-
data. Finally, the designer chooses the metadata that represents
the restriction properties of a class hierarchy and classifies other
metadata into classes. For example, the designer chooses genres as
a property and classifies artists as instances of classes.

Service designers need only construct a service-domain ontology with the intended domains and gradually increase the number
of ontologies as the service is expanded. Designers also should
adjust the granularity of end classes for reflecting user interests
in detail. Fortunately, the designers of many content directories,
such as all media guide (AMG)4 and listen Japan,5 have developed
content taxonomies with fine granularity to support users when
they browse and buy content according to interests. Therefore, we
construct service-domain ontologies according to these directories.

3.2. Interest ontology generation algorithm

We explain the interest ontology generation algorithm by ana-

lyzing the interest distribution of users, as shown in Fig. 2.

3.2.1. Basic ontology generation algorithm

First, we describe the merit of generating user interests accord-

ing to a service-domain ontology.

We use the service-domain ontology as defined by the experts in
each service domain. By using the accurate and detailed knowledge
included in the service-domain ontology, we can extract the userinterest ontologies accurately. We note that many service providers
assign various name attributes to their content items with the idea
of assisting users in locating content items via keyword search. The
current version of our method uses exact keyword matching to
extract user interests as described in his/her blog-entries. The polysemy problem can be eased by applying maintenance knowledge
of service-domain ontologies.

The basic ontology generation algorithm (BOGA) is described

below.

(1) BOGA makes index files for all blog entries (can be collected
through the ping server). For example, our experiments in Sections 5 and 6 used all Doblog blog-entries stored over a roughly
4-year period. Here, we assume that each collected blog entry
has a unique user ID.

3 http://www.amazon.com.

4 http://www.allmediaguide.com/.
5 http://listen.jp/.

M. Nakatsuji et al. / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 107120

Fig. 1. Procedure for designing service-domain ontology.

(2) BOGA classifies all collected blog entries into a service-domain
ontology. BOGA classifies blog entry Ei into instance Ii( classCi)
if there is a name attribute of Ii in Ei. BOGA permits each blog
entry to be classified into two or more classes. For example,
consider the service-domain ontology in Fig. 2. BOGA classifies
the blog entry into instance Happy Mondays of class Madchester when there is a Happy Mondays character string in the
description in the blog entry.

(3) BOGA measures the number of users interested in each instance
of Ce, which is one of the end classes in the service-domain
ontology. In calculating the number of interested users, BOGA
counts the number of users as one, even if the same user
describes the same instance or class in two or more blog entries.
BOGA calculates the number of users interested in class Ce by
obtaining the number of users interested in all instances in Ce.
Thus, the interested user distribution in the domain can be measured by recurrently counting the number of users from Ce to
the root class Cr.

(4) BOGA extracts only the classification results about one user ID
from all classification results in order to develop an interest
ontology for this user ID. In Fig. 2, BOGA can extract an interest

ontology of user A when the blog entries of this user describe
instances of Stone Temple Pilots, New Order, and Farm.

(5) Finally, our method allows the user to inspect and delete
instances that he/she considers are not his/her actual interests,
from his/her interest ontology.

3.2.2. Ontology-filtering algorithms

For example, BOGA classifies blog entries that describe Farm,
actual reference is to an agricultural farm, into the instance Farm
of class Madchester. To filtering the mistakes caused by words
with several meanings, we make use of the following characteristics
such as taxonomy of instances in ontologies and the durability of
user interests as expressed in the users blog.

 Instances that belong to the same class have the same character-
istics.
 Adjacent classes have similar characteristics. Instances of those
classes also have similar characteristics.
 User interests that continue for a certain period and describe an
interest over 2 or more days.

Fig. 2. Procedure for generating interest ontologies.

Fig. 3. Hops in filtering algorithms.

Fig. 4. Applying interest weight to ontology.

We propose two filtering algorithms: FA1 and FA2. First, we

explain FA1.

3.2.2.1. Filtering algorithm 1. We subdivide procedure (2) of BOGA
to permit FA1 to be applied.
(2-1) When the name attribute n(Ii) of instance Ii( Ci) is described
in blog entry Ei, FA1 checks whether a name attribute of an
instance of the same class Ik{(Ik  Ci)  (Ik /= Ii)} is described
in all blog entries that the user has accumulated. We call
instances Ik classification decision elements (CDEs).

(2-2) Blog entry Ei is classified as mentioning instance Ii when
there is a description of CDEs, and not classified as mentioning instance Ii when there is no description. In Fig. 2,
when the description of Farm exists in Ei, and New Order
is described among all accumulation blog entries of a user,
Ei is assumed to be a blog entry about instance Farm of
Madchester and is classified accordingly.

We can filter classification mistakes accurately by using the
many CDEs created from the accurate and comprehensive knowledge contained in the service-domain ontology maintained by
expert domain designers.

3.2.2.2. Filtering algorithm 2. In addition, we propose filtering algorithm 2 (FA2) that provides more restrictive classification than FA1.
In procedure (2-1) of FA1, FA2 checks whether CDEs are described
in blog entry Ei. Blog entry Ei is classified in Ii if CDEs are described,
and not otherwise.

3.2.3. Adjusting range of CDEs

In addition, we introduce a mechanism that adjusts the range
of CDEs by using the class hierarchy. We consider that descriptions of classes and instances of interest often appear together with
instances of the same class and those of neighboring classes. We add
a new adjustment parameter, hop limit, which defines the range of
CDEs. In Fig. 3, we assume there are CDEs that include instances of
brother classes and those of the grandfather class when two hops
from end classes are permitted.

3.3. Introducing interest weight to ontology

In addition, we introduce the interest weight as a parameter that
indicates the degree of a users interest in each class and instance
of an interest ontology. By using this parameter, we can create a

virtual-community of those users who have almost the same degree
of interest in the same classes or instances.

Here, we explain the idea of calculating interest weight using

Fig. 4.

In this paper, we extract the interest weight of a user for item
Ii by analyzing the number of times Ii is present in all of his/her
blog entries. Note that the users interest means more than just the
simple number instances since Ii might be simply part of a list. Our
proposal is to apply the following ideas to extract interest weight
from blog entries.

(1) The interest weight of every blog entry is one.
(2) If N(Ei) kinds of name attributes of interest instances appear in
blog entry Ei, the interest weight of each instance in Ei becomes
1/N(Ei).
(3) When we define the set of all accumulated blog entries of a
user as E, the interest weight S(Ii) of each instance Ii is S(Ii) =
|E|
(Ii  Ei)(1/N(Ei)), and the interest weight S(Ci) of each class Ci
is S(Ci) = 
We also consider that a user who is interested in Ii is also
interested in class C if Ii lies under class C. In the same way, we
consider that a user who is interested in C, is also interested
in the super class of C. Thus, we give the following definition. A
user who has an interest in instances in a deeper class hierarchy,
tends to have upper class hierarchies that have larger interest
weight values.

S(Ii).

Ii  Ci

(4) The interest weight of the instances is reflected in that of the
class that includes the instance. The interest weight of the
classes is reflected in that of the super class.

For example, in Fig. 4, we give the interest weight of instance
Stone Roses as 1/4, that of instance My Bloody Valentine as
(1/4) + (1/2) = 3/4, that of class Shoegaze as (3/4) + (1/2) =
5/4, and that of class Alternative as (1/2) + (5/4) + (1/4) = 2.

4. Detecting innovation by similarity measurements

In this section, we propose to measure the similarity between
ontologies through a consideration of interest weights. We detect
innovative topics for user u by measuring the similarity between the
user-interest ontology of u and those other users. Next, we determine a group of users, of appropriate size, whose interest ontologies
are similar to that of u.

M. Nakatsuji et al. / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 107120

Fig. 5. Measuring similarity based on degree of interest agreement.

4.1. Interest-weight-based similarity measurement

We now explain our similarity measurement in detail by using
Fig. 5. We use Table 1 that gives definitions of terms used in this
section, and examples based on Fig. 5.

We first define the terms interest ontology OA of user A and
OB of user B, topology T1, which is composed of a class and subclass relationship, and topology T2, which is composed of a class
and instance relationship. Furthermore, we define common classes
Ci as classes that both ontologies have, and common instances Ii
as instances that both ontologies have. For example, there are five
common classes, a1, b1, b2, c3, and c4, in Fig. 5.

In particular, we define a common class set that formalizes topology T1 as C(T1), and a common class set that formalizes topology
T2 as C(T2). For example, in Fig. 5, C(T1) has common classes a1 and
b2, and C(T2) has common classes b2, c3, and c4. We also give the
degree of interest agreement of common instance Ii as I(Ii), that of
common class Ci as I(Ci), and that of common topology created by
common class Ci as It(Ci).

In [9], the authors calculate the similarity between ontologies
considering the degree of similarity between class topologies T1. In
addition, we apply the following ideas to create user-interest-based
virtual communities.

 Evaluating the degree of interest agreement between Ci s and Ii
s from the interest weight with smaller value. This filters users
who simply enumerate a lot of instances in an blog entry and
creates a virtual community among users who have similar or
larger interest weight values with respect to that of each user.
 Treating topologies T1 and T2 separately because we consider
that T1 reflects the width and depth of a users interests while
T2 reflects the objects in which users are interested.

Table 1
Definitions of terms and examples.

Definition

Explanation

 Decreasing the computational complexity by generating the class
schema of user-interest ontologies according to that of servicedomain ontologies. Accessing a large number of blog entries, as
is done in our experiments in Section 5, is important for useful
ontology mapping.

(1) We analyze classes common to OA and OB and extract common

classes that belong to C(T1) and C(T2).

(2) When common class Ci has common instance Ii between ontolo-
gies, we assign the smallest value of the interest weight of
common instances Ii to I(Ii). For example, I(a) is 2.

(3) Similarly, we assign the smallest value of the interest weight of

common class Ci to I(Ci). For example, I(b1) is 3.

(4) We define the product sets of sub-classes of Ci, which are common to a class set, as N(Ci), and the set union of sub-classes of
Ci among Ci  C(T1) as U(Ci). For example, if we insert common
class a1 C(T1) to N(Ci) and U(Ci), N(a1) = {b1, b2} and U(a1) =
{b1, b2, b3}. We then we give It(Ci) as
I(Cj)/|U(Ci)|.
For example, It(a1) is given by (3 + 18 + 0)/3 = 7. Thus, we
obtain the degree of interest agreement S(T1) of C(T1) as

It(Ci). In Fig. 5, S(T1) = (3 + 18 + 0)/3 + (9 + 3)/2.

Cj  N(Ci)

Ci  C(T1)

Ii  Ci

(5) We also define an instance set of Ci in ontology OA as IA(Ci), and
an instance set of Ci in ontology OB as IB(Ci) among Ci  C(T2).
I(Ii)/|IA(Ci)  IB(Ci)|. For example,
We then give It(Ci) as
It(c3) is given by ((2 + 0 + 3 + 0)/4) = 5/4. Thus, we assign the
degree of interest agreement S(T2) of C(T2) as
It(Ci).
In Fig. 5, S(T2) = 2/1 + 5/4 + 0.

Ci  C(T2)

(6) By using evaluation function f (X), which corresponds to the
relative degree of importance of a topology, we finally determine the similarity score between ontologies SO(AB) as S(T1) +
f (S(T2)). For example, if f (X) equals X, in Fig. 5, SO(AB) = 13 +
13/4.

I(Ii)
It(Ci)
N(Ci)
U(Ci)
S(T1)
S(T2)

Degree of interest agreement of common instance, Ii
Degree of interest agreement of under the common class, Ci
Product sets of sub-classes of Ci
Set union of sub-classes of Ci
Degree of interest agreement of C(T1)
Degree of interest agreement of C(T2)

Examples based on above figure
I(a) = 2
It(b2) = (9 + 3)/2
N(a1) = {b1, b2}
U(a1) = {b1, b2, b3}
S(T1) = (3 + 18 + 0)/3 + (9 + 3)/2
S(T2) = (2/1) + (5/4) + 0

Fig. 6. Community creation service of recommending innovative blog entries.

As explained in procedures (4) and (5), our algorithm determines
that interest ontologies that are more similar follow topology T1,
which expresses the depth and width of user interest. Our similarity measurement between ontologies returns higher similarity
values if there are more common classes C(T1) that form topology
T1 in both ontologies (in other words, if there are more classes that
appear in both ontologies).

Our method yields almost the same effect as calculating the similarities between T1 when calculating similarities between topology
T2 in different ontologies. Thus, our method identifies two different ontologies as being similar if they have common instances in
common classes (deeper level) or wider level of their hierarchies.

4.2. Innovative blog-entry detection

We use our similarity measurement for innovative blog-entry

detection and user-oriented community creation.

(1) We calculate the similarity between the ontology of user A and
the ontologies of other users in set U. By using the heuristic
threshold X, we derive X users who have high similarity to user
A as the interest-sharing virtual community GU.

(2) We then analyze difference instances between the ontology of
user A and the ontologies of GU. We also define a parameter
called the degree of innovation, which indicates how many hops
we need to get from difference instances of an ontology of GU to
the class of the ontology of user A. In Fig. 6, we need three hops to
go from difference instance Elf Power of the ontology of user B
to class Rock of the ontology of user A. By recommending blog
entries with a high degree of innovation, the interests of users
may be significantly expanded. Lowering the level of innovation
may produce more comfortable new concepts but these will
prove to be less satisfying.

(3) Finally, we extract innovative instances GI, which are unknown
to user A, but that are well-known to users in GU; the innovative
blog entries about GI are recommended to user A together with
the degree of innovation. As we defined in Section 1.1, innovative topic are concepts that are new and interesting to the user,
thus the value of degree of innovation of an innovative instance
is more than one.

reduced, the difference between user-interest ontologies is smaller,
and instances in GI may be close to the user-interest ontology of
each user. However, there may be few innovative instances in GI. On
the other hand, if the size of GU is increased, the difference between
user-interest ontologies is larger, and instances in GI may be too
innovative for the user. Thus, we observe the difference between
the user-interest ontology of user u and those of GU while changing
the size of GU. The most suitable size of GU is the point at which
there is a rapid increase in the number of GI. Details of this process
are given in Section 5.5.

An example of community creation is depicted in Fig. 6. User B is
included in user group GU whose interest ontologies are measured
as similar to the interest ontology of user A. If users in GU often have
an interest in Elf Power, user A has the potential to be interested
in Elf Power even though the class Elephant 6 that includes Elf
Power is many hops from the class Rock that user A has a known
interest in. Furthermore, by browsing blog entries concerning these
innovative instances, users may expand their interests and share
interests with each other.

5. Offline experimental results

We now present the results of offline experiments and simulation studies that demonstrate the performance of interest ontology
extraction and innovative blog-entry detection.

5.1. Datasets and methodology

The proposed methods were tested using the large-scale blog
portal Doblog, which holds 1,600,000 blog entries from 55,000
users. We also used the service-domain ontology of the music
domain, as shown in Fig. 2, which was created by referring to
public information on listen Japan, a web portal storing music
artist genre information.6 Our experimental service-domain ontology contains 114 classes as genres, covering a wide range of genres
in the music domain, Rock, Classic, Jazz, and Soul and the instances
are 4300 artists; it has, on average, four level class hierarchies;
the deepest class hierarchy has five levels. Furthermore, each class
and instance of the service-domain ontology has two or more

Here, determining the most suitable size of GU is very important
for detecting attractive and innovative instances. If the size of GU is

6 A genre hierarchy almost similar to our service-domain ontology is referred to

in URL http://listen.jp/store/genre 20000.htm of listen Japan.

M. Nakatsuji et al. / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 107120

Fig. 7. Experimental results of user distributions and ontology extraction. (a) Interest distribution of blog users in experimental service-domain ontology; (b) comparing the
precision of instances with one word among BOGA, FA1 and FA2.

name attributes. For example, the instance R.E.M. has the name
attributes R.E.M. and REM. Overall, the 4300 instances were
given 7600 name attributes.

For evaluating accuracy, we defined correct answers as blog
entries that have descriptions of classified classes or instances and
evaluated the generated interest ontology by using the precision
and recall of the classification results. In this paper, precision means
the proportion of correct answers in the classification results and
recall means that of correct answers in all blog entries. When recall
is high, the extracted interest ontologies better cover user interests.
However, when precision is low, created interest ontologies include
classification mistakes, and the innovative topics detected for the
user are unreliable. Thus, achieving high precision is indispens-
able. In the evaluation, we used filtering algorithms to eliminate
instances that consisted of just one word such as police, because
we consider that such instances have a high probability of having
several meanings. We used Namazu to generate index files of blog
entries.7

5.2. Measuring interest distributions of blog users

Graphs of user distributions in the music domain examined are
depicted in Fig. 7(a). This figure shows the number of users in each
class in the different level of class hierarchy in the ontology. Each
class has about 200 users, even the end classes. By checking the
blog entries classified in end classes, we confirmed that these blog
entries frequently have unique words that describe the features of
these classes. For example, blog entries classified into the end class
Death Metal have the phrase death voice with high probability.
This is because the end classes in our service-domain ontology have
a granularity that is appropriate for extracting the uniqueness of
the blog entries classified into these classes. End class granularity
is important because it controls whether we can determine if a user
is interested in end class instances or not.

7 http://www.namazu.org/.

Table 2
Experimental results of our ontology extraction and detection of innovative topics.

(a) Accuracy of extracted interest ontology (FA2, two hops)

Precision

94.9%

Recall

80.3%

(b) Comparing accuracy of instances with one word

Precision
Recall

FA 2

70.0%
32.6%

FA1

57.9%
93.0%

18.9%
100.0%

(c) Comparing accuracy by changing hop counts

Precision

Zero hops

89.1%

Two hops

91.0%

Four hops

85.6%

(d) Comparing degree of innovation in recommendation lists

Degree of innovation

Percentages of instances

(e) Comparing degree of innovation in our detections

Degree of innovation

Percentages of instances

5.3. Measuring performance of extracted interest ontology

We evaluated the accuracy of FA2 by checking 1/4 (randomly
selected) of the classified blog entries. As shown in Table 2(a),
the achieved precision is higher than 90% with high recall of 80%.
Thus, our filtering algorithm is effective for generating suitable
user-interest ontologies.

The reason why we achieved high performance is that we
used comprehensive knowledge contained in the service-domain
ontology as explained in Section 3.2.1. We can filter classification
mistakes accurately by using a lot of CDEs defined in Section 3.2.1
in the service-domain ontology.

Fig. 8. (a) Number of users obtained by changing X; (b) number of users that have high interest weight after changing X.

We also found that negative comments constituted only about
5% or so of all comments. It seems that if the user has a negative
opinion related to a hobby, most often he/she does not express it. A
positive opinion leads to a lot of comments.

From those results, we assume that the users comment is positive if the blog entry repeatedly refers to something about their
hobbies. Interest weight reflects information about how many
times the user described a certain instance in a certain class
as explained in Section 3.3. We also note that there are a few
events/people, such as Michel Jackson, that are described in blog
entries as a form of gossip. Extracting and manually checking these
instances may improve system accuracy if they are frequent in blog
entries over a certain period of time.

5.4. Comparing filtering algorithms

We compared BOGA and filtering algorithms by randomly checking 1/4 of the blog entries that were classified into instances with
one word.

Graphs of the precisions achieved by BOGA, FA1, and FA2 for
the 83 instances that were randomly selected from among the 827
instances with one word, are shown in Fig. 7(b). The accuracies
of BOGA and filtering algorithms are shown in Table 2(b). These
results indicate that precision improves in the order of BOGA, FA1,
and FA2, while recall decreases significantly with FA2, even though
FA1 decreases only slightly compared to BOGA. To improve recall
while holding the high precision in FA2, we will add a method that
checks for CDEs in the blog entries with these elements having a
high probability of appearing such as trackbacks of entries or entries
near each other in a time series.

Analyzing Fig. 7(b) in more detail, there are eight instances
in which the precision cannot be improved even with FA2, and
those instances lower the overall precision. We thus extracted the
instances in which the classification number increased by ten times
or more when FA2 was replaced by FA1. This yielded 28 instances,
and 5 of those instances had precision of 0. The reason for this is that
they do not co-occur in the same blog entry with CDEs, even though
the user was interested in them and described the name attribute of
these instances often. Thus, precision can be effectively improved
by deleting these instances from the service-domain ontology.

We also evaluated the accuracy of FA2 while changing the hop
limit number. Two hops were better than zero hops with respect
to the number of correct answers and precision, as shown in
Table 2(c). However, four hops yielded worse precision than two
hops, although the number of correct answers was slightly better.
This is because our service-domain ontology has a large number of
instances in end classes, and the relationship between end classes
and super classes is closer than the relationship between super
classes and grandfather classes. For example, end class Acid Metal
has the super class Metal and grandfather class Rock. In this

case, the relationship between Acid Metal and Metal is closer
than the relationship between Metal and Rock. Thus, two hops
offer better precision than zero hops because two hops include
many CDEs. Four hops have lower precision than two hops because
the resulting instances are far from the end classes.

Furthermore, we analyzed the cases in which the number of classified blog entries changed by at least a factor of four hops were
used instead of two hops. Such cases represent classification mis-
takes. For example, CDEs of the instance Europe in class Northern
Metal with four hops, included instances in class Adult Contemporary under the class Rock. In this case, blog entries with
the description Europe tour were also classified into Europe in
Northern Metal. Therefore, the number of correct answers with
high precision can be effectively increased by deleting these mistakenly classified blog entries from the classified instances by changing
the hop limit number.

5.5. Analyzing size of user-oriented community

We determined the suitable size of GU, as described in Section
4.2, by observing the difference between the user-interest ontology
of each user u and those of GU while changing the size of GU.

First, we selected user A from among all users extracted by our
service-domain ontology and analyzed a suitable size of GU by
changing parameter X, which represents the number of users who
have high similarity to user A in interest-sharing community GU,
see Section 4.2. In this evaluation, we divided innovative instances
GI into three instance groups in order of the appearance rate of
instances when we set X to 70: a very popular instance group, a
moderately popular instance group, and instance group with a small
number of fans. We then calculated the number of users who were
interested in the artists of each instance group while changing X
from 10 to 70 in steps of 1.

Graphs of the number of users who were interested in each
instance group obtained while changing X are shown in Fig. 8(a).
Next, we focused on users who had high interest weights in their
interest ontologies. Graphs of the number of such users obtained
while changing X are shown in Fig. 8(b). The very popular instance
group was recommended to users regardless of the value of X,
see Fig. 8(a). The instance group with a small number of fans,
on the other hand, was recommended most often when X was
10 (Fig. 8(b)); the moderately popular instance group was recommended more often as X was increased. This is because users with
high interest weights tend to discuss instances in the instance group
with a small number of fans, rather than discussing instances in
the famous instance group. Furthermore, the number of users in
each instance group increased suddenly when X is greater than 60.
This is because the difference between a users ontology and those
of GU is larger when X is greater than 60, and instances with low
probability of being interesting come to be recommended more

M. Nakatsuji et al. / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 107120

Fig. 9. Snapshot of online experimental service DoblogMusic.

often. From this result, innovative topics are effectively detected
with respect to detailed user interests when X is smaller than 60
given the datasets used in our experiment. This result also suggests
that the suitable size of GU is given by X = 60 because the number
of instances of each group radically increased when X exceeded that
point.

5.6. Measuring performance of detecting innovative topics

We next evaluated innovative blog-entry detection. In the eval-
uation, we compared the proportion of innovative instances in the
manually defined recommendation lists created by you might like
these artists in a music portal listen Japan to the proportion
of innovative instances in the recommendation lists created by
our methods. Designers of music portal listen Japan have manually defined artists (An) that are considered to relevant to artist
(Ai).

We checked the 75 users, out of the total of 1503 users, who were
judged to be interested in the music domain of our service-domain
ontology. First, we identified X users who had high similarity to user
A as described in Section 5.5.8 We took from the recommendation
lists created by our method the top 150 instances that appeared
frequently in the interests of those X users. The manually defined
recommendation lists were generated by passing the user inter-
ests, extracted by our algorithm, to the portals recommendation
system. The manual recommendation lists included, on average, 23
instances.

Table 2(d) and (e) shows the percentages of recommended
instances and their degree of innovation for the manually generated
recommendation lists and our lists, respectively. These results indicate that our technique recommends more instances with a higher
degree of innovation than the manually created recommendation
lists. Another conclusion that can be drawn is that users actually
have a much wider range of interests than predicted by the music
portal experts.

8 According to Section 5.5, we set X to 60.

6. Online experimental results

To evaluate the effectiveness of innovative topic detection, we
offered an experimental service DoblogMusic to Doblog users. We
used a larger service-domain ontology (325 classes and about
25,000 instances) of the music domain than considered in the
offline evaluation, since the service covered both Japanese music
and non-Japanese music.

6.1. Explaining our online experiment

As shown in Fig. 9, when doblog users, who were predicted to
have an interest in artists on our service-domain ontologies, logged
into Doblog, DoblogMusic set Recommendations tabs in the blog
site of each user. Clicking the Recommendations tab yielded a
page listing recommended innovative artists. Neighboring users
who had interest ontologies with scores similar to that user were
also presented. If the user clicked the Entries of Neighbors tab, he
was presented with summarized blog entries of the neighboring
users on the innovative artists (see procedure (2) in Fig. 9). A user
could select one of these summaries to browse the complete blog
entry at the Doblog portal. Furthermore, users that logged in and
were analyzed to be interested in the artists in our service-domain
ontology could also browse DoblogMusic through the Recommendations tab. As shown in Fig. 9, in our experiment, the degree of
innovation ranged from zero to three. We updated the user-interest
ontologies once a week for the service if users created blog entries
and described music artists in our service-domain ontology.

The following subsections evaluate the performance of interestontology extraction, detection of innovative topics, and generation
of a virtual community through recommendations.

6.2. Evaluating recommendation results based on extracted
interest ontology

Graphs of the number of users accessing DoblogMusic are shown
in Fig. 10. There are about 55,000 Doblog users, of which about 1000
log in each day. We analyzed 3632 Doblog users who were interested in the music of our service-domain ontology in December

Fig. 10. User accesses to DoblogMusic. (a) Number of users accessing DoblogMusic; (b) number of accesses of DoblogMusic.

2006. Considering the ratio of the number of users who logged in
to DoblogMusic to the number of all users in Doblog, we can expect
that about 66 users among those logged in to Doblog each day had
an opportunity to access DoblogMusic. From the results depicted
in Fig. 10(a), the average number of users that accessed DoblogMusic each day was about 63. Furthermore, we found that about
65% of those users were interested in the artists in our servicedomain ontology. From the results depicted in Fig. 10(b), more users
were presented with their own DoblogMusic recommendation list
in November 2006. This is because we increased the number of
artists in the service-domain ontology at that time. These results
indicate that recommending innovative instances is effective for
encouraging users to continue to access DoblogMusic, i.e. they do
not become bored.

6.3. Evaluating detection of innovative topics

We also evaluated the detection of innovative topics. In the recommendation page of DoblogMusic, users could select innovative
artists according to their degree of innovation (see procedure (2) in
Fig. 9). We found that 75% of the selections made were for artists
with a degree of innovation of two or three. The offline evaluation,
see Section 5.6, Table 2(e), showed that content items that have the
degree of innovation of two or three, are presented to users most
frequently, about 53.5%. It is obvious that users prefer innovative
recommendations.

To summarize, users were interested in recommendations even
though they were comparatively far from the users known interests
from the viewpoint of the class hierarchy in our service-domain
ontology. The results of Sections 6.2 and 6.3 confirm that innovation
detection is effective for inducing users to expand their interests by
browsing the blog entries of innovative artists.

6.4. Evaluating activation of blog community

We found that presenting blog entries about the innovative
artists recommended to a user stimulated communication between
users. If user A selected a summarized blog entry of user B presented as part of the recommendation service, user A could browse
the complete blog entry on the blog site of user B. In this experi-
ment, we checked the number of message exchanges made between
users in two cases: (1) the number of exchanges (between users A
and B) in the 2-month period before user A accessed the blog site
of user B through the recommendation page of DoblogMusic and
(2) the number of exchanges in the 2-month period immediately
after the access. Fig. 11(a) compares (1) and (2). It shows that there
was a 30% increase in the number of exchanges due to DoblogMu-
sic. Next, we focused on the users who exchanged comments no
more than twice in case (1), see Fig. 11(b). This comparison showed
a roughly 250% increase in exchange number after DoblogMusic
access. These results suggest that our innovative blog-entry recommendation system is effective for activating the communications

between users who love music. Furthermore, we consider that users
were interested in discovering innovative instances or users who
described innovative instances presented by our method, because
the users subsequently exchanged many comments. (Sending a
comment to an unknown user is not easy.)

7. Discussion and conclusion

We start by discussing how to apply our method to domains

other than music and then conclude the paper.

7.1. Discussion

Many service providers assign metadata to their contents prior
to Web publication, especially content items such as movies, games,
and books. In this paper, we evaluated our method using the
metadata of music content items (genres and artists), because we
thought that it would be easy for the readers to understand.

However, our method can achieve interest detection in other
domains. For example, content providers such as AMG provide a
genre hierarchy to assist users in accessing their movies. We can
use this and similar genre hierarchies created by experts to create
a taxonomy of movie content items.

Furthermore, we can create a deep class hierarchy from a created taxonomy by using various kinds of metadata that have already
been attached to the content items. Using this deep taxonomy, we
can extract detailed user interests, and measure the level of innovation in detail when detecting innovative instances for the user.

In this section, we discuss how to create a deep taxonomy by
fusing various kinds of metadata attached to content items, using
examples in the movie domain, see Fig. 12. We also explain how to
measure the level of innovation in other domains.

(1) As shown in Fig. 12, first, the ontology designer chooses a service
domain for extracting user interests. We can select any service
domain that tags content items with metadata, such as fashion,
book, and movie domains. It is better if the content items have
metadata with a deep hierarchy, but we can apply our method
even if content items have no metadata, i.e. a not a so deep
hierarchy, as we explain for the example of the music domain
content items above.

(2) The designer then chooses metadata that reflects user interests
as in the case of the music domain. For example, the designer
chooses metadata of genres, directors, and actors of movie content items, considering that the community is founded on this
metadata. The designer chooses the metadata that represents
the restriction properties of a class hierarchy and classifies other
metadata into classes. For example, the designer chooses genres and directors as a property and classifies movie titles as
instances of classes. For example, the class horror has the
property horror in Fig. 12.

M. Nakatsuji et al. / Web Semantics: Science, Services and Agents on the World Wide Web 7 (2009) 107120

Fig. 11. Increasing user-user communication through DoblogMusic. (a) Number of comments generated by accessing DoblogMusic; (b) number of comments focused on
users with low-comment activity.

(3) In the music domain, we can classify music artists as instances
into hierarchies with genre as classes because the genre of music
is deep. Thus, we can analyze interests of users in detail as we
explained in the above sections. Some other domains do not
have metadata that forms a deep hierarchy. In that case, the
designers can select several metadata as classes, and create subclasses of those classes by combining the characteristics of those
classes. We explain how to combine different types of classes
to create their sub-classes by using the example of the movie
domain in Fig. 12.

For example, the service designer can consider that the
movie content items created by the same director, say A, have
almost the same characteristics, and can define a class that has
instances, that are content items that A created. We name this
class A hereafter. The class A has property of director A.
Furthermore, the director can create the sub-class of A that
has instances, which are content items that have the property

director A and horror. We call this sub-class A & horror
hereafter.

In this way, the ontology designer can create a deep class hierarchy from the given metadata set in the movie domain. However,
the designer should be careful in creating the class hierarchy in the
following two points.

(1) The instances are set to classes in the end level of hierarchies in the service-domain ontology if possible. For example,
if content item Ii has metadata that shows that Ii is included
in horror genre and was created by director A, the designer
sets Ii to class horror & director A, not to horror. This is
because, the interest weight under horror has greater value
if we set two Ii s in class horror and horror & director A
using our proposal in Section 3.3. If the designer wants to
set instance Ii under the class horror, not horror & direc-

Fig. 12. Taxonomy in movie domain.

tor A, it is not a problem. This example is movie title C in
Fig. 12.

(2) The designer should not create sub-classes under the classes
that have the same properties that restrict class succession;
such as genre or director. For example, we can define those
properties by using owl:allValuesFrom, if we use OWL to
describe the service-domain ontology. This restriction allows
us to calculate the degree of innovation properly, as explained
below.

The method proposed in Section 3.3 must be changed in the following three points to create classes by combining different classes.

(1) In our method, we assume there is a super class assigned to each
class in the service-domain ontology. However, there are several super classes defined when we combine different classes to
create a deeper service-domain ontology. In this case, the interest weight of instances under the classes created by combining
the different classes, such as horror & director A are reflected
more in the interest weights of their super classes in the userinterest ontology, because interest weights of those instances
are reflected in all their super classes, such as class horror and
director A. To solve this problem, we set the interest weights
of those instances to the value calculated by dividing the interest weights of such instances (that are actually extracted by our
proposal in Section. 3.3) by the number of super classes of those
classes.

(2) A class created by combining different classes, such as horror
& director A, is treated as two different classes, under the class
horror and under the class director A by assigning unique
IDs to those assumed classes. Modifications (1) and (2) allow us
to measure the similarity of two different user-interest ontologies using the same method proposed in Section 4.1.

(3) We can re-define the degree of innovation for the servicedomain ontology created by using the procedures explained
above. Simply, we calculate the number of properties that are
added or deleted between the class that is in user-interest
ontology and the class that is a candidate, i.e. may include innovative instances. For example, we assign the value of the degree
of innovation of movie title C to three, because two proper-
ties, Akira Kurosawa and Horror are deleted, and one property
Japanese period-play is added to Japanese period play from
class Akira Kurosawa & Horror. We assign the value of the
degree of innovation of movie title B to two, because one prop-
erty, Horror, is deleted, and one property, Japanese period play
is added to class Akira Kurosawa & Japanese period play from
class Akira Kurosawa & Horror.

Service designers need only construct a service-domain ontology with the intended domains and gradually increase the number
of ontologies as the service expands. Furthermore, more servicedomain ontologies that have a deep hierarchy will emerge on the
web if users need those deep hierarchies to find their interests.

For example, taxonomies have been created in various service
domains on the Web. The DBPedia project [2] extracts structured
information from Wikipedia9 and makes this information available
on the Web. The authors in [19] extract a taxonomy from English
Wikipedia, by inducing isa and notisa labels for the edges of the category network [15] automatically distinguishes between instances
and classes in large-scale taxonomies derived from Wikipedia.

9 http://en.wikipedia.org/wiki/Main Page.

7.2. Conclusion

This paper proposed user-interest ontology generation algorithms that classify users blog entries into service-domain
ontologies and that measure the similarity between user interests
using the interest weights entered into their user-interest ontolo-
gies. They allow us to detect innovative topics for a user by analyzing
the ontologies of user group GU that have a high similarity to the
ontology of the user. We can detect attractive and innovative topics for user u by observing the difference between the user-interest
ontology of u and those of the users in user group GU, for which
there is an optimum size that depends on the service. We also performed offline and online experiments based on a large number of
blog entries from an actual blog portal.
 In the offline experiments, we executed detailed evaluations after
removing classification mistakes through the use of taxonomy
of instances and continuity of descriptions about user interests.
Those evaluations indicated that our user-interest ontology generation algorithms achieved about 95% precision and 80% recall.
 We also examined the appropriate size of user group GU to detect
innovative instances for each user by changing the number of
users in GU. In an experiment on confirming the detection of
innovative topics, our technique detected more instances with a
higher degree of innovation than were found in the manually created you might like these artists recommendation lists provided
by the music portal site.
 In the online evaluation, our recommendations,
innovative
instances, were accessed repeatedly by users who were analyzed to be interested in instances in our service-domain ontology
during the period of the online experiment. Furthermore, about
75% of accesses among those users were to instances with high
degrees of innovation. We also evaluated the number of messages exchanged between users who came to know each other
through our recommendations. As a result, users who seldom or
never exchanged messages before seeing the recommendation
page of innovative instances, exchanged significantly more mes-
sages. Thus, we conclude that our proposed algorithms can well
detect innovative instances in the blog entries of other users and
effectively create new virtually communities.

Future work is required to study how users control their userinterest ontologies by providing feedback about their collective
knowledge with the goal of updating their taxonomy of instances.
In addition, we need to evaluate our proposal further by applying
them to other domains such as fashion and movies.

Acknowledgments

This research used data from the blog portal Doblog of NTT Data
Corporation. I wish to express my gratitude to the Doblog team,
which kindly cooperated in offering the data and discussing the
blog community creation service.
