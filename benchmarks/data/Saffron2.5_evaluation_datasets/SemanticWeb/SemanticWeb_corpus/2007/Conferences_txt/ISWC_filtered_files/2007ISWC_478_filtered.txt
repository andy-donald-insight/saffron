Instance Migration in Heterogeneous Ontology

Environments

Luciano Serafini and Andrei Tamilin

Foundation B. Kessler - IRST (formerly ITC-IRST)

Via Sommarive 18, 38050 Trento, Italy
{serafini,tamilin}@itc.it

Abstract. In this paper we address the problem of migrating instances between
heterogeneous overlapping ontologies. The instance migration problem arises when
one wants to reclassify a set of instances of a source ontology into a semantically related target ontology. Our approach exploits mappings between ontologies,
which are used to reconcile both conceptual and individual level heterogeneity,
and further used to draw the migration process. We ground the approach on a
distributed description logic (DDL), in which ontologies are formally encoded
as DL knowledge bases and mappings as bridge rules and individual correspon-
dences. From the theoretical side, we study the task of reasoning with instance
data in DDL composed of SHIQ ontologies and define a correct and complete
distributed tableaux inference procedure. From the practical side, we upgrade the
DRAGO DDL reasoner for dealing with instances and further show how it can be
used to drive the migration of instances between heterogeneous ontologies.

1 Introduction

The semantic web steadily evolves growing into a container of multiple distributed on-
tologies. Although ontologies are supposed to provide a consensual model of the world,
those found in practice are far from being so. They rather formalize a subjective view in
accordance with diverse assumptions, such as target goals, available background knowl-
edge, biases, etc. This fact inevitably leads to a situation in which the same domain is
represented by more than one ontology in heterogeneous ways.

The classical approach to the problem of reconciling heterogeneity between ontologies consists of two essential steps: matching and reasoning. By matching one creates a
set of mappingscomprising semantic correspondencesbetween elements of different ontologies. For example, a mapping can express the fact that the concept Scholar in
one ontology is equivalent to the concept Student in another ontology, or that the individual Samuel Clemens in one ontology corresponds to the individual Mark Twain in
the other ontology. Mappings can be created manually, by domain experts, or discovered
(semi-)automatically by existing matching techniques [8]. Once mappings are stated, it
is necessary to provide a method for reasoning with them. Formally, this amounts to
evaluating logical consequences of mappings on the mapped ontologies.

Mappings form a source to a target ontology can be used to transfer knowledge
between the two ontologies. When ontologies are represented in OWL (formally corresponding to DL knowledge bases) there are two types of knowledge that can be trans-
ferred: terminological knowledge (i.e., mappings can force new concept subsumptions

K. Aberer et al. (Eds.): ISWC/ASWC 2007, LNCS 4825, pp. 452465, 2007.
c Springer-Verlag Berlin Heidelberg 2007
?

?

?
in the target ontology) and assertional knowledge (i.e., mappings can assert new instances of a certain concept). To motivate and explain the problem, let us consider a
scenario in which ontology mappings are used for migrating instances.

Example 1 (Motivating scenario). A computer science department of some university
employed an ontology OCS Dept for accessing data related to organization of the de-
partment. Successively, a human resource office of the university decides to make use
of ontologies to represent data about the employees of the whole university. For this
purpose they create an ontology OHRO Uni and further populate it with instance data.
To save time, they decide to reuse the work done by the computer science department.
However, to do that they need to solve the following two problems. First, the conceptualization in OHRO Uni is different from the one in OCS Dept, so the classification of
instances done in OCS Dept must be adapted to the classification schema implemented
in OHRO Uni. Second, the identifiers used in OCS Dept for people do not coincide with the
identifiers used in OHRO Uni, thus they have to provide a way to transform (regenerate)
identifiers of the people they want to insert in their ontology.

The main objective of the paper is to provide a logical characterization of the assertional information enforced by a set of mappings. Based on this characterization, we
propose a sound and complete distributed tableaux algorithm that reclassifies instances
of a source ontology into a target ontology in accordance to the mappings. The feasibility of this approach is shown by describing the implementation of such an algorithm
in the DRAGO DDL Reasoner1. The approach described in the paper, relies on the
logical framework of distributed description logics (DDL) [4]. In such a framework a
distributed knowledge base consists of a family of standard DL knowledge bases, corresponding to each given ontology, a set of bridge rules, corresponding to mapping between pairs of terminologies (T-boxes), and individual correspondences, corresponding
to rules for transforming individuals across instance storages (A-boxes). The concrete
contribution of the present work includes:

 characterization of the role that bridge rules and individual correspondences play
when reasoning with instances in DDL; in particular, we show that they are capable
of propagating concept membership assertions across ontologies
 definition of a sound and complete distributed extension to SHIQ-A-box tableau
for reasoning with instances in DDL; the algorithm implements the backward
chaining strategy for computation of propagated assertions by distributed communication with DL tableaux reasoners attached to other ontologies

 extending the DRAGO DDL Reasoner, currently limited to reasoning without in-
stances, with the algorithm proposed in this paper and further showing its application to drive instance migrations.

The paper is organized as follows. In Section 2 we introduce the definition of a
DDL distributed knowledge base with bridge rules and individual mappings. In Section
3 we study how bridge rules and individual mappings propagate information across
knowledge bases. The implementation in DRAGO and the application to the instance
migration scenario is further outlined in Section 4. We end up with an overview of
related work and concluding remarks.

1 http://sra.itc.it/projects/drago

L. Serafini and A. Tamilin

2 Distributed Knowledge Bases

As introduced by Borgida and Serafini in [4], DDL is a formalism for representing
multiple ontologies pairwise interconnected by directional semantic mappings. In this
section we recall and extend the basic definitions of DDL.

2.1 Syntax and Semantics

A distributed knowledge base formalizes a set of ontologies interconnected by semantic
mappings. The first component of a distributed knowledge base is a family of knowledge bases K = {Ki}iI. According to a standard DL definitions, each Ki consists
of a terminological component Ti (T-box) and an assertional component Ai (A-box).
Since the very same symbol can be used in two knowledge bases with different mean-
ing, to unambiguously refer to elements of Ki, they are prefixed with the index i of
the knowledge base. The notations i : a i : C, i : C  D, i : C(a) and i : R(a, b),
stand for an individual a, concept C, subsumption C  D, assertions C(a) and R(a, b),
respectively in the knowledge base Ki.
Mappings from Ki to Kj knowledge bases with (i = j) are encoded as bridge rules

and individual correspondences, which are expressions of the following forms:

 j : D (into-bridge rule)
 j : D (onto-bridge rule)

 i : C
 i : C
 i : a  j : b (individual correspondence)
where C and D are concept names of Ti and Tj, and a and b are individuals of Ai and
Aj respectively.2
Both bridge rules and individual correspondences from Ki to Kj express relations
between Ki and Kj viewed from the j-th subjective point of view. Intuitively, the into-
 j : Thesis states that, from the j-th point of view
bridge rule i : PhDThesis
the concept PhDThesis in i is less general than its local concept Thesis. Similarly,
 j : ConferencePaper expresses the
the onto-bridge rule i : InProceedings
more generality relation. The individual correspondence i : mario phd thesis 
j : mario thesis expresses the fact the Ajs individual mario thesis is one of the
possible translations in the language of Kj of the Ais individual mario phd thesis. In
the general case we admit that an individual can have more than one translation.
A distributed T-box T consists of T-boxes Ti and a collection B of bridge rules between them. A distributed A-box A consists of A-boxesAi and a collection of individual
correspondences C. A distributed knowledge base K is then a tuple T, A.
The semantics of DDL is defined with a fundamental assumption that each knowledge base Ki in the family is locally interpreted on its local interpretation domain.
To support directionality, (i.e., mappings from i to j only propagate in the i-to-j-
direction),we admit the hole interpretation I	 with empty domain (see more details
2 In this work we concentrate only on individual correspondences, and dont consider complete

correspondences which does not have any additional effect in data migration.
?

?

?
Fig. 1. Visualized semantics of DDL framework

in [15])3. By definition, we impose that I	 satisfies any knowledge base. To resolve
heterogeneity between different domains the DDL defines a binary domain relation r
between pairs of these domains. Figure 1 intuitively depicts component elements of
DDL semantics.
A distributed interpretation I of a distributed knowledge base K = T, A consists
of a family of local interpretations Ii on local interpretation domains Ii and a family
of domain relations rij  Ii  Ij between pairs of local domains.
A distributed interpretation I satisfies a distributed knowledge base K = T, A, is
called a model of K, if all its components are satisfied according to the following rules:
 Ii satisfies Ki
 rij(CIi)  DIj for all i : C
 rij(CIi)  DIj for all i : C
 bIj  rij(aIi)

 j : D
 j : D
for all i : a  j : b

2.2 Inference Services

Although both in DL and Distributed DL the fundamental reasoning services lay in verification of concept satisfiability/subsumption and instance checking/retrieval within a
certain ontology, in DDL, besides the ontology itself, the other ontologies and mappings between them should be taken into account. Given a distributed knowledge base
K = T, A, the distributed inference services can be defined as follows:
3 Classically, DL interpretation maps every individual into an element of the domain, while
the hole maps everything into the empty set. To allow homogeneous treatment of standard
DL interpretations and holes, we require that any individual x is standardly interpreted into a
singleton set, rather than into an element of the domain. Hence, Ii |= C(a)  a
Ii ,
rather than a

Ii . We thank the anonymous reviewer for pointing at this mismatch.

Ii  C

Ii  C

L. Serafini and A. Tamilin

Satisfiability. A concept C is satisfiable in i with respect to K if there exists a dis-

tributed interpretation I of K such that CIi = .
Subsumption. A concept C is subsumed by a concept D in i with respect to K if for
every distributed interpretation I of K we have that CIi  DIi. In this case we
will write K |= i : C  D.
Instantiation. An individual a is an instance of a concept C in i with respect to K if
for every distributed interpretation I of K we have that aIi  CIi. In this case we
will write K |= i : C(a).
Retrieval. Computing the individuals in Ki that instantiate a given concept C in i with

respect to K.
The group of concept satisfiability/subsumption services is typically referred to as
terminological reasoning services, while the remaining instantiation/retrieval services
are grouped into assertional reasoning services.

The question of providing terminological services for DDL has been already studied
in [15]. It has been shown that certain combinations of into- and onto-bridge rules can
lead to the propagation of knowledge in form of subsumption axioms across ontologies
participating in DDL. Moreover, in case of DDL with SHIQ components without instances adding these additional propagation rules to existing DL tableaux algorithms
leads to a correct and complete reasoning in DDL. The presented method has been also
implemented in the DRAGO DDL reasoner.

In the consequent sections, we investigate the assertional reasoning services.

3 Reasoning with Instances in Distributed Knowledge Bases

For the sake of clarity, we start considering the case of DDL with two component knowledge bases and unidirectional sets of bridge rules and individual correspondences. For
the general results and proofs we refer the interested reader to the technical report [16].

3.1 Inference Patterns
In the following we characterize the knowledge propagated from a knowledge base i
(the source) to j (the target) by a set of propagation rules of the form:

(1) facts in i,

(2) bridge rules from i to j,

(3) individual mappings from i to j

(4) fact in j

which must be read as: if the facts in (1) are true in Ki, the bridge rules in (2) are
contained in Bij, the individual correspondences in (3) are contained in Cij, then the
fact in (4) must be true in Kj.

Following the semantics of mappings in DDL outlined in the previous section, it can
be observed that the individual correspondences can interact with into-bridge rules with
the effect of propagating concept membership assertions:

(1)

i : C(a),

i : C

 j : D,
j : D(b)

i : a  j : b

Indeed, bIj  rij(aIi)  rij(CIi)  DIj .
?

?

?
In practice, this means that if an ontology O1 defines an instance mario of a concept PhDStudent, and an ontology O2 has some individual name person 123, then
 2 : Student and an individual correspondence
a bridge rule 1 : PhDStudent
1 : mario  2 : person 123 entail the O2s assertion that person 123 is an instance of Student.
the propagation of instance membership over a disjunction of n  0 concepts:
i : a  j : b

In languages that support disjunction, the above propagation can be generalized to

i : (C1  . . .  Cn)(a),

 j : Dk (1  k  n),

i : Ck
j : (D1  . . .  Dn)(b)

(2)

Several observations on the stated propagation pattern require a specific attention.
Generality. Rule (2) appears to be the most general form of assertion propagation in
DDL when individual correspondences are restricted to be functional. A set of individual correspondences Cij is functional if for every individual a of Ai the set Cij
contains at most one individual correspondence i : a  j : b. For the sake of pre-
sentation, in this paper we restrict ourself to functional individual correspondences,
leaving the most general case to the technical report [16])4

Inconsistency propagation. When n = 0, the inference pattern in (2) becomes the

following inference rule:

i : (a),

i : a  j : b

j : (b)

(3)
which states that to propagate the inconsistency of Ki to Kj its enough to have one
single individual correspondence. From the representational point of view this inference rule is very fragile. We currently do not see an easy solution to fix this sensitivity
to inconsistency propagation. This topic will be subject for further studies.

Instance migration. Up to now, we have supposed that individual correspondences
are explicitly enumerated in Cij. However in real situation, with thousands of in-
dividuals, one cannot expect to pre-compile all the individual mappings. However,
the formalism support a more compact approach of declaring individual correspondences via a translation function fij, defined on the domain of the source ontology
i and producing individuals in the domain of target ontology j. For example, fij
can be the identity function, hence its application yields all instances from Ki to be
copied to Kj. Such an approach is practically applicable to the instance migration
scenario described in the introduction.
Once a translation function fij is defined, we can revisit propagation pattern (2):

i : (C1  . . .  Cn)(a),

j : (D1  . . .  Dn)(fij(a))

i : Ck

 j : Dk (1  k  n)

(4)

4 To give an intuition of the effect of non functional individual mappings, consider the case in
 j : D2 and, the
which there are two into-bridge rules i : C1
non functional set of individual mappings {i : a  j : b,
i : a  j : c}. Then the fact
that Ki |= C1  C2(a) entails the disjunctive assertion (D1(b)  D1(c))  (D2(b)  D2(c)).
This implies that, for the general case we have to introduce the technicalities for disjunctive
A-boxes.

 j : D1 and i : C2

L. Serafini and A. Tamilin

This later means that a fresh individual fij(a) is injected into Kj and asserted as an
instance of the disjunction of the Dks.

3.2 Soundness and Completeness

To demonstrate the correctness and completeness of the inference pattern presented in
Section 3.1, we follow the approach similar to the one taken in [15]. The main idea consists in construction of an operator which essentially applies the generalized inference
pattern (2) to extend knowledge bases with new assertions induced by mappings.
Given a set of bridge rules B12 and set of individual correspondences C12 from K1
to K2, the individual correspondence operator C12(), taking as input a knowledge base
K1 and producing an A-box of K2, is defined as follows:

C12(K1) =




(D1  . . .  Dn)(b)
?

?

?
K1 |= (C1  . . .  Cn)(a)
1 : Ck
1 : a  2 : b  C12

 2 : Dk  B12 (1  k  n)






It is remarkable that onto-bridge rules do not affect instance propagation. The reason is
that onto-bridge rules impose only existence of preimages of objects that already exists
in the target ontology. Into-bridge rules, instead, constraint the individual mappings to
be defined whithin a certain range. The individual correspondence operator formalizes
the assertional knowledge that is propagated across ontologies.

The characterization of the propagation of the terminological knowledge is characterized by an analogous operator, called bridge operator, introduced in [15] and defined
as follows: B12(), taking as input a knowledge base K1 and producing a T-box of K2:

B12(K1) =






B  D1  . . .  Dn
?

?

?
T1 |= A  C1  . . .  Cn
 2 : Dk  B12 (1  k  n)
1 : Ck
 2 : B  B12
1 : A






With the remarkable exception of inconsistency propagationby rule (3)the individual correspondences do not affect the propagation of terminological knowledge. The
inferences formalized by the two operators described above completely describe the
possible propagations that are forced by a set of bridge rules and individual correspon-
dences. This is formally stated in the following theorem.

Theorem 1 (Soundness and completeness). Let K12 be a distributed knowledge base
consisting of K1, K2 SHIQ knowledge bases, and B12, C12 mappings between them.
For any statement  (of the form C  D or C(a)) in the language of K2
K12 |= 2 :   T2  B12(K1), A2  C12(K1) |= 

The proof of the generalization of the Theorem 1 is fully described in the technical

report. Some remarks are necessary.

Independence between terminological and assertional propagation. From the characterization above, one can see that propagation of terminological and assertional
?

?

?
knowledge are orthogonal. The two effects can be computed in parallel and indepen-
dently. What is more important, however, is that the change of the A-box does not
affect the propagation of the terminological knowledge. This means that if the source
T-box does not change the terminological propagation is computed once for all.
operator
ensures, if a change of the source A-box involves only the set of individuals{a1,. . .,
an}, then assertional propagation must be computed only for the portion of the target A-box A2 concerning the set of individuals {b | 1 : ai  2 : b  C12}.

Local propagation of assertional knowledge. Assertional

propagation

Upper bound and complexity. If the mapping from 1 to 2 is finite and contains m
into-bridge rules, n onto-bridge rules, and o individual correspondences, then the
bridge operator B12 applied to any knowledge base generates at most n  2m subsumption statements, and the individual correspondence operator C12 generates at
most o2m instantiation statements. In total, the maximal number of statements that
can propagate from K1 to K2 via mappings is (n + o)  2m. Since the propagation
of statements needs checking subsumption and instantiation in the source knowledge base, which is EXPTIME complete, we have that computing subsumption and
instantiation in a distributed setting is EXPTIME complete in the dimension of the
source knowledge base plus mappings.

Vanilla implementation. The above theorem supports a vanilla implementation of forward chaining inference engine for DDL. The implementation consists of three
steps: computation of propagation operators B12(K1) and C12(K1), construction
of extended version of knowledge base K2 as T2  B12(K1), A2  C12(K1),
and finally applying to this knowledge base one of existing DL reasoners, such
as FaCT++ [18], Racer [10], or Pellet [17].

This approach to reasoning has a strong advantage of reuse of existing highly optimized DL reasoners, however it can be very costly for situations when semantic mappings are changed dynamically or when the required number of reasoning questions to
be verified is relatively small. In the next section, we propose an alternative, backward
chaining reasoning approach, which does lazy, or on demand, computation of propagated axioms and hence better fits to instable and short-living distributed environments.

3.3 Distributed Tableaux Algorithm

In this section we present a distributed tableaux algorithm for reasoning with instances
in DDL. The main design idea consists in constructing a network of standard DL
tableaux, one for each ontology in DDL, which communicate via mappings in a backward fashion.
Since we restricted the expressivity of ontologies participating in DDL to SHIQ
DL, we will consider in the following that ontologies K1 and K2 from a distributed
knowledge base K12 = T12, A12 are attached with SHIQ-tableau reasoning procedures Tab1 and Tab2 [13]. Due to the reduction of reasoning with concepts to reasoning
with instances [2], we suppose that each procedure Tabi() can check the satisfiability
of any statement  of form i : C  D, i : C(a).

L. Serafini and A. Tamilin

0 and xm

As described in [13], the SHIQ-tableau works on a so called completion forest, a
collection of trees whose root nodes correspond to instances in A-box. Given a knowledge base, the algorithm initializes a completion forest F with a set of root nodes
x0 = {xk
0} corresponding to a set of instances bk in A-box, labels each xk
0 with a
set L(xk
0) of concepts C for each concept assertion C(bk) in A-box, and finally draws
0 for each role assertion R(hk, hm) in A-box. After that, the
an edge between xk
set of SHIQ completion rules expanding the forest F is applied. The fully expanded
forest then represents a model of the knowledge base. To test entailment of arbitrary
assertion X(a), X(a) is added to A-box and further the tableau is expanded to see
whether a model of such knowledge base can be constructed or not.
To accommodate the knowledge propagation from K1 to K2 in K12, we intervene in
the completion process of Tab2 in order to capture new facts induced by bridge rules
and individual correspondences. Hence, we get a distributed tableaux procedure DTab2
which extends Tab2 with two additional expansion rules:

C12-rule:
if 1. x  x0, such that x is a node corresponding to individual b and 1 : a  2 : b,

H  {Hk | 1 : Bk
B = {Bk | Hk  H, 1 : Bk
B) (a)) = true for

 2 : Hk  B12},
 2 : Hk  B12},
H  L(x),
?

?

?
2. Tab1((
then L(x)  L(x)  {

H}

B12-rule:
if 1. G  L(x), such that 1 : A

H  {Hk | 1 : Bk
B = {Bk | Hk  H, 1 : Bk
B) = true for

2. Tab1(A  
then L(x)  L(x)  {

H}

 2 : G  B12,
 2 : Hk  B12},
 2 : Hk  B12},
H  L(x),
?

?

?
The principle idea of these additional expansion rules consists in implementing backward versions of bridge and individual correspondences operators introduced in Section
3.2. According to rule C12, if DTab2 encounters a root node x connected by an individ-
H should be added to the label
ual correspondence, then a disjunction of concepts
L(x) if
H(x) is entailed by interaction of individual correspondence with into-rules.
To determine this entailment, DTab2 remotely requests foreign Tab1 to check if it is
the case that

B(b) in K1.

The role of B12-rule is to analyse the nodes of completion forest and import consequences of subsumption propagations. If DTab2 encounters a node x which contains a
label G connected by an onto-bridge rule, then if G  
H is entailed by the bridge
H is added to x. While in order to determine the entailment, DTab2
rules, the label
invokes the procedure Tab1 with a question whether a subsumption A  
B holds
in K1.
?

?

?
Graphically, the distributed execution of DTab2 can be depicted as follows:

y1

z1

Tab1()
y2

. . .

Tab1()
z2

. . .

yn

zn

w1

Tab1()
w2

. . .

wn

C12

C12

B12

x1

DTab2()
x2

. . .

x

xm

. . .

Theorem 2 (Termination, Soundness, Completeness). Given SHIQ DL knowledge
basesK1 and K2, let K12 = {T1,T2}, B12 ,{A1,A2}, C12 be a distributed knowledge base. Then, given a SHIQ statement 
1. a distributed procedure DTab2() terminates, and
2.  is satisfiable in K2 with respect to K12 if and only if DTab2() yields a complete

and clash-free completion forest.

It can be shown that the proposed algorithm enjoys generalization to arbitrary number of SHIQ knowledge bases participating in DDL, and moreover can be extended
to distributed knowledge bases containing cyclical pathes of bridge rules and individual
correspondences. For the sake of clarity, we omit the discussion of these generalizations
and refer the reader to the technical report [16] for details.

4 Implementation and Application

In this section we first outline the implementation of the distributed tableaux procedure
on top of the DRAGO DDL Reasoner; second we describe its application to a problem
of instance migration between heterogeneous ontologies.

4.1 DRAGO DDL Reasoner
DRAGO DDL Reasoner implements a peer-to-peer architecture for reasoning with a
set of ontologies {Oi}iI interconnected by semantic mappings {Mij}i=jI . The principal component of DRAGO is the DRAGO Reasoning Peer, or shortly DRP. Each

L. Serafini and A. Tamilin

DRAGO  Reasoning Peer

DRAGO  peer network

n
o
i
t
a
r
t
s
i
g
e

e
c
i
v
r
e

Parser

Ontology parser

Mapping parser

DRP -1

DRP -2

DRP -3

DRP -4

g
n
i
n
o
s
a
e

s
e
c
i
v
r
e

...

n
o
i
t
a
c
i
n
u
m
m
o

e
c
i
v
r
e

x
o
b
-

x
o
b
-

x
o
b
-

Distributed

Knowledge Base

g
n
i
n
o
s
a
e

e
c
a
f
r
e
t
n

g
n
i
m
m
a
r
g
o
r

Acquaintances

Reasoner

Standard DL

Tableau Reasoner

Additional DDL

tableau completion rules

Reasoning Requests Propagator

  

Fig. 2. DRAGO Architecture

DRP P can host a set OP = {Oi}iIP (where IP  I) of ontologies, and a set of
mappings MP = {Mij}iI,jIP incoming into OP . Mappings can come both from
ontologies of the peer P , or from ontologies of other peers. Each DRP P supports both
local and distributed reasoning tasks on each ontology in OP . Local reasoning tasks
are standard DL reasoning tasks defined on one single ontology. Distributed reasoning
tasks are those defined on the distributed knowledge base induced by the ontologies and
mappings managed by all the DRPs. When the DRP P executes a distributed reasoning
task on an ontology with mappings coming from another peer Q, P submits the reasoning sub-tasks to Q. Figure 2 sketches the overall architecture of DRAGO and displays
principle components forming the Reasoning Peer.

The Reasoner is the central component of DRP. It is implemented by extending a
standard tableaux based DL reasoner with additional completion rules that implements
the distributed reasoning. DRAGO is based on the Pellet reasoner, an open-source Java
implementation of tableau for reasoning with OWL ontologies [17]. In accordance with
algorithm presented in Section 3.3, these new completion rules comprise the bridge rule
and individual correspondence. Due to the remark to Theorem 1 on independence of
terminological and assertional propagation, we reused the bridge completion rule from
available purely terminological version of DRAGO, and implemented an individual
completion rule, new due to the present paper.

Practically, DRAGO works with ontologies represented in OWL [3] and semantic
mappings encoded in C-OWL [5]. Syntactically, C-OWL extends OWL with constructs
for specification of semantic mappings, while semantically it is founded on the presented DDL framework.
?

?

?
4.2 Execution of Migrations with DRAGO
In the following we describe how to use DRAGO to execute the task of instance migration between heterogeneous ontologies. Given a source ontology Os and a target
ontology Ot, the task of instance migration from Os to Ot can be encoded into the
following steps:
1. Match concepts of Ot with concepts of Os and then encode discovered semantic
relations into a set Bst of bridge rules between Ot and Os. This task can be done
manually or with the help with some (semi-)automatic ontology matcher.
2. Choose a translation fst from individuals of Os to individuals of Ot, and generate
the set of individual correspondencesCst={s: x t : fst(x)|x individual of Os}.
The simplest case of translation function is the identity function, when exactly the
same set of individuals of Os are included into the target ontology Ot. However,
this is not always the case. E.g., if Os and Ot follow different naming conventions,
then individuals of Os are needed to be renamed in accordance with rules Ot.
mapping Bst  Cst.

3. Instantiate DRAGO Reasoning Peer DRPs for Os and DRPt for Ot with semantic

4. Ask DRPt to classify translated individuals in accordance with Ot.

4.3 Experimental Run
To see the instance migration in work and get the practical impression from the
implemented distributed tableaux, we emulated and executed the motivating scenario
described in the introduction. As a source of instances, we used a publicly available
ontology populated with data on publications at the Semantic Web Conference5. To evidence the correctness of migration, as a target ontology we used a source ontology with
all instance data removed from it. As required, the establishment of into-bridge rules between the same concepts of source and target and the application of identity function
to translation of source ontology instances yields the exactly the same classification of
migrated instances in target ontology.

Besides the correctness, the performed practical run demonstrated the necessity of
developing optimization strategies for completion of distributed tableaux for instance
migration. This is due to the relatively slow speed of migration (e.g., the reclassification
of 50 instances of the selected source ontology through 30 established into-bridge rules
takes around 5 minutes). The slow speed is a consequence of the necessity to consider
all possible disjunctions of concepts connected by into-bridge rules when completing
distributed tableaux. In the next study, we investigate possible optimization strategies
for reducing the amount of disjunctions to be considered to still guarantee the complete
reasoning result.

5 Related Work

The problem of heterogeneity is one of the crucial issues to be resolved on the semantic web. This explains the big research interest to devising frameworks capable of

5 http://annotation.semanticweb.org/iswc/iswc.owl

L. Serafini and A. Tamilin

representing and reasoning with multiple ontologies interrelated by semantic mappings.
While DL is already a standard for working with web ontologies, the question of formal
representations and reasoning with mappings is still a subject to the standardization.
Hence, multiple frameworks co-exist.

In OntoEngine [7], the authors address the problem of translating instances from
a source ontology into a heterogeneous target. In their approach mappings between
ontologies are represented using the same primitives as for encoding knowledge within
ontologies themselves, i.e., using subClassOf,subPropertyOf, etc. axioms. The reasoning with mapping is based on idea of merging ontologies together with the mappings
into a single ontology, in which further the standard reasoner can execute instantiation
queries over vocabulary of target ontology. The main drawback of this approach is its
strong centralization, which is not typically affordable on the web.

In contrast, the SomeWhere [9] targets a question of decentralized approach to querying heterogeneous ontologies. Similarly to OntoEngine, mappings in SomeWhere has a
form of a subsumption statements, but the reasoning is based on rewriting techniques
for combining reasoning over heterogeneous ontologies. The big advantage of the presented approach is its scalability, while the disadvantage is its limitation to a proposi-
tional ontologies, containing only disjunction, conjunction and negation.

Another recent example of decentralized infrastructure for querying distributed ontologies is KAONp2p [11,12]. The authors adopt the approach of [6] to express mappings as correspondences between conjunctive queries over ontologies. The querying
further requires the terminologies and mapping to be merged into a single global ontol-
ogy, while instance data is then retrieved from distributed instance storages.

The recent study of query answering in distributed description logics has been proposed in [1]. The main idea consist in constructing a closure ontology by forward prop-
agating, via DDL mappings, relevant axioms contained in other mapped ontologies (in
a vein of vanilla implementation of DDL reasoner discussed in the current study). Doing so, further enables reformulation of distributed query answering problem into local
query answering. Although the approach of [1] is sound, the authors point out the incompleteness of their study.
Another important framework is E-connections [14]. Original purpose of E-
connections is to aggregate ontologies that model different (non-overlapping) aspects of
the world, rather then integrate those overlapping as in DDL. Nonetheless, it has been
shown in [14] that mathematically DDL constructs can be simulated in E-connections,
however sacrificing the directionality of knowledge propagation. Another difference
concerns with reasoning approach. In contrast to distributed coordinating tableaux in
DDL, in E-connections a global tableau, both theoretically and practically, needs to be
constructed.

6 Conclusion

In the present study, we investigated a task of correct and complete migration of instances of one ontology into another heterogeneous ontology. We formally grounded
our approach on DDL framework, which allowed us to instantiate the problem of migration into the problem of reasoning with instances in DDL distributed knowledge base.
?

?

?
We theoretically formalized this inference and defined the distributed tableau algorithm
for reasoning with multiple SHIQ DL onotlogies. Do demonstrate the feasibility, we
implemented the preliminary version of the algorithm in DRAGO Reasoner and applied
it to a simple migration task.
