Alternating-Offers Protocol for Multi-issue Bilateral

Negotiation in Semantic-Enabled Marketplaces

Azzurra Ragone1, Tommaso Di Noia1, Eugenio Di Sciascio1,

and Francesco M. Donini2

1 SisInfLab, Politecnico di Bari, Bari, Italy

{a.ragone,t.dinoia,disciascio}@poliba.it

2 Universit`a della Tuscia , Viterbo, Italy

donini@unitus.it

Abstract. We present a semantic-based approach to multi-issue bilateral negotiation for e-commerce. We use Description Logics to model advertisements, and
relations among issues as axioms in a TBox. We then introduce a logic-based
alternating-offers protocol, able to handle conflicting information, that merges
non-standard reasoning services in Description Logics with utility thoery to find
the most suitable agreements. We illustrate and motivate the theoretical frame-
work, the logical language, and the negotiation protocol.

1 Introduction

Fully automating negotiation mechanisms in e-marketplaces calls for adopting logical languages to model and reason on advertisements whenever the negotiation has to
take place on complex descriptions, going beyond plain undifferentiated goods, where
a single issue (usually price) is amenable to negotiation. Description Logics (DLs) are
natural candidates languages for this purpose: they are the basis of Semantic Web Languages and they can be much more expressive than e.g., Propositional Logic, yet they
have decidable inference problems that can be useful in a number of negotiation scenar-
ios. In this paper, in particular, we present a DL-based approach to multi-issue bilateral
negotiation and introduce a novel logic-based alternating-offers protocol. The protocol merges DLs formalism and non-standard reasoning services with utility theory, to
find the most suitable agreements. To this aim it takes into account existing logical relations between issues in requests and offers and related utilities of agents, expressed
through logical formulas. The roadmap to the rest of this paper is as follows: next Section outlines the approach and assumptions we make. Then we move on to the logical
formalism we adopt. Section 3 presents and motivates the protocol we devised. We discuss features of the protocol in Section 4. A brief analysis of relevant related work and
a summary of the approach close the paper.

1.1 Scenario and Assumptions

We consider a marketplace of peer entities where users submit their semantically annotated descriptions, and negotiations among agents take place in a fully automated way.
We start outlining: the negotiation protocol, i.e., the set of rules that specifies how an

K. Aberer et al. (Eds.): ISWC/ASWC 2007, LNCS 4825, pp. 395408, 2007.
c Springer-Verlag Berlin Heidelberg 2007

A. Ragone et al.

agreement can be reached; the negotiation strategy, that specifies the action to take in
each situation, given an explicit set of rules specified in the negotiation protocol [15];
the utility function of the agents, which is used to evaluate the possible outcomes of the
negotiation [11]. The assumptions characterizing the proposed negotiation mechanism
are:
one-to-many: the negotiation is a one-to-many negotiation, since the buyers agent will
negotiate simultaneously with other m different agents  each one representing a seller,
whose offer has been previously stored in the e-marketplace.
rationality: agents are rational, they behave according to their preferences and seek to
maximize their utilities [11, p.19] doing in each step the minimum possible concession,
i.e., the concession involving the minimum utility loss, see protocol Section 3.
incomplete information: each agent knows its utility function and ignores the opponent disagreement thresholds and utility functions.
conflict deal: disagreement is better than an agreement iff the agents utility over such
an agreement is smaller than disagreement thresholds1 set by the agent before negotiation starts. Therefore when the agents utility deriving from accepting an agreement (or
going on with the negotiation) and opting out it is the same, it will prefer not to opt out
[11].

Here we just give a quick outlook of the protocol we propose in the framework,
and will thoroughly detail it in Section 3. The protocol is inspired to Rubinsteins
alternating-offers one [16]. In that setting an agent starts making an offer to its oppo-
nent, who can either accept, make a counter-offer or exit the negotiation. If a counteroffer is made, the negotiation goes on until one of the agents accepts an offer or exits the
negotiation. In some cases there is a negotiation deadline; if such deadline is reached
before one agent has accepted an offer, the negotiation ends in a conflict deal. Our
protocol anyway is different from that of Rubinstein; actually we consider: multi-issue
negotiation: buyer and seller do not negotiate on a single item or on a single bundle of
items, but on many issues, which are related with each other through an ontology; such
issues may also characterize more complex items (e.g., in a computer store domain a
notebook equipped with Wi-Fi adapter and DVD recorder). Note also that at this stage
of our work we do not consider a time deadline. The protocol is sorted out by a finite
set of steps2: the negotiation always terminates because either the agreement has been
reached or because one agent opts out. The agent who moves first is selected randomly
for each negotiation. At each step the agent who moves has two choices: concede or
opt out, while the other one stands still. Agents are forced to concede until a logical
compatibility is reached between the initial request and the supply, i.e., until the inconsistency sources are eliminated. At each step, amongst all the allowed concessions that
satisfy the concession criteria enforced by the protocol, the agent should choose the
concession that gives the highest utility to itself: the minimal concession. Therefore a
concession should be minimal w.r.t. the utility loss paid by the agent who makes the

1 Disagreement thresholds, also called disagreement payoffs, or reservation values, are the min-

imum utility that each agent requires to pursue a deal [15].

2 In the following, for the sake of simplicity, we always describe an interaction between only
two opposite agents; although we notice that multiple negotiations can be performed at the
same time, among one agent and many candidate partners.
?

?

?
concession [9]. The negotiation ends either if a logical compatibility is reached (the
negotiation succeeds) or if one agent opts out (the negotiation ends in a conflict deal).
For what concerns strategy, the main target of the agent is to reach the compatibility,
because only through compatibility it is possible to reach an agreement. If it is its turn
to move, an agent can choose to concede or opt out: if the utility of the agent at that step
is smaller than its disagreement threshold, then the agent opts out and the negotiation
ends immediately. Otherwise, it will do a concession: the concession is the minimum
possible concession, that is the concession less decreasing its utility.

We define an agents utility function over all possibile outcomes [11] as:

(1)
where p  {, }  and  stand for buyer and seller respectively A is the set of
all possible agreements, Opt stands for Opt out.

up : A  {Opt}  

2 Logical Formalism
In this paper we will refer to AL(D) [1], a fragment of OWL-DL, where besides
owl:Class and owl:ObjectProperty, one is able to express owl:DataTy-
peProperty f (for Features) on objects such as year of building, length, weight and
many others by means of concrete domains. Without loss of generality we assume that
concrete domains we deal with are admissible3. In order to model the domain knowledge and represent relationships among elements, we use an ontology O containing
Concept Inclusion axioms of the form A  C and A  C, where the concept name A
can appear only once on the left-had side of axioms. We restrict O to be acyclic, i.e.,
the definition of A should not depend on A itself (see [1] for a precise definition). Using AL(D) it is possible to express subclass relations, disjointness relations involving
concept names. As an example consider the following axioms (hereafter we will use
DL syntax which results more compact than OWL one):

CheapPC  PC  (price  600) (Subclass)

WinX  Unix (DisjointClasses)

Formulas representing demands D and supplies S, are expressed as generic OWLDL expressions. So, an example description can be the following one:
PCNotebook(ram  1024)(hdd  160) hasOShasOS.Linux monitor
monitor.(LCDmonitorcharacteristicscharacteristics.(inch  17))
formally modeling this advertisement: personal computers, no notebooks, with a RAM
of 1 Gbyte (with the possibility to extend), with an hard disk of at most 160 Gbytes and
a 17 LCD monitor..
Notice that for what concerns numerical properties, also range expressions are allowed in the form (f  n)  (f  m). In order to better explain the approach, in the
rest of the paper we will refer to ontology O in Figure 1.

Even though subsumption and satisfiability are basic and useful reasoning tasks in
a number of applications, there are typical problems related to negotiation that call for
3 It is well known that  is admissible [2].

A. Ragone et al.

HomePC  PC  hasOS  hasProcessor;
Pentium  Intel Processor  (mhz  3000) Centrino  Pentium

CheapPC  PC  (price  600)
Unix  OperatingSystem
Unix  WinX

WinX  OperatingSystem;
Linux  Unix;

Fig. 1. The ontology used in the examples

non-standard reasoning services. For instance, suppose you have the buyers agent 
with her Demand represented by the concept D and the sellers agent  with his Supply
represented by S. In case s request D and s offer S are in conflict with each other
with respect to the domain knowledge modeled in the ontology O in formulae S 
D O   how to suggest to  which parts in D are in conflict with S and conversely
to  which parts in S are conflict with D? The above question is very common, among
others, in negotiation scenarios where you need to know what is wrong between D
and S and negotiate on it. In order to give an answer to the previous question and
provide explanations, Concept Contraction [5,8] can be exploited.
Concept Contraction. Given two concepts C1 and C2 and an ontology O, where C1
C2 O  holds, find two concepts K (for Keep) and G (for Give up) such that
both C1  K  G and K  C2 O .

In other words K represents a contraction of C1 which is satisfiable with C2, whilst
G represents some reason why C1 and C2 are not compatible with each other. With
Concept Contraction, conflicting information both in s request w.r.t. supply can be
computed and vice versa. Actually, for Concept Contraction minimality criteria have
to be introduced. Following the Principle of Informational Economy [10], for G we
have to give up as little information as possible. In [5,7] some minimality criteria were
introduced and analyzed. In particular, if the adopted DL admits a normal form with
conjunctions of concepts as AL(D), G minimal irreducible solutions can be defined.
Definition 1. Let C1 and C2 be two concepts such that C1  C2 O . For the corresponding concept contraction problem Q, we say the solution Girr, Kirr problem is
G-irreducible minimal if the following conditions hold:
?

?

?
i=1...n

Gi where both Girr O R and Kirr O R iff C2  R.;

1. Girr =
2. K  Gi  C2 O , for every i = 1 . . . n;
3. if G, K is a solution to Q satisfying Condition 1 then K O Kirr holds.
The rationale behind the three conditions in above definition is the following:

Condition 1. This condition is needed in order to avoid solutions, i.e., negotiation out-
comes, which could not be useful in the user perspective. Consider the following
example referring to the ontology in Figure 1.

D = HomePC  hasOS.Linux
S = PC  hasOS.WinX
?

?

?
Now, D and S are in conflict with each other w.r.t. O; in order to regain the com-
patibility,  may contract her request. In this case two possible solutions are:

G1, K1 = HomePC, PC  hasProcessor  hasOS.Linux
G2, K2 = hasOS.Linux, HomePC

The first solution does not satisfy Condition 1 because for the property hasOS
both HomePC O hasOS and PC  hasProcessor  hasOS.Linux O
hasOS. If  decides to contract her request following this solution, then she keeps
all the specifications of requested characteristics (also the one on the operating
system) but her choice would lead to a vacuously true agreement on the operating
system specification with . In fact, K1  S implies hasOS. i.e., no operating
system is admitted.

Condition 2. We desire to keep the number of conjuncts in Girr as small as possible
in order to avoid redundancies (minimality of Girr). Turning back to the previous example, another solution to the same Q is G3, K3 = hasOS.(Linux 
Unix), HomePC.
Condition 3. Conversely, we want to keep as much information as possible in Kirr. In
this example G4, K4 = hasOS.Linux, HomePChasOS.OperatingSystem.
With respect to the above example the only solution satisfying Definition 1 is G4, K4.
To compute a G-irreducible minimal solution, the algorithm proposed in [6] can be
simply adapted and used. Notice that even though within O in Figure 1 the disjunction
relation is between WinX and Unix, the concept contraction procedure suggests to give
up hasOS.Linux because Linux is a sub-class of Unix.

2.1 Dealing with Incomplete Information

Information about supply/demand descriptions can be, in our setting, incomplete. This
may happen not only because some information may be unavailable, but also because
some details have been considered irrelevant by either the seller or the buyer when they
submitted their advertisements. For instance, some user may find tiresome to specify a
lot of characteristics related to the brand or more technical characteristics of the product
the user can be unaware of. Currently, the most common approach to this problem
is avoiding incompleteness by forcing the user to fill long and tedious forms. There
are several ways to deal with incomplete information and the choice may influence a
negotiation. Suppose to have the following two entries in the e-marketplace:

D: I am looking for a PC equipped with Wi-Fi and DVD recorder.
S: I offer a home PC with Intel Processor equipped with Linux Operating System.

The above descriptions are then formalized as:
D: PC  hasDevice.WiFi hasStorageDevice.DVDrecorder
S: HomePC  hasProcessor.Intel  hasOS.Linux

Under an open-world assumption we have two possible choices. First, we can keep
incomplete information as missing information: we do not know e.g., if the buyer is
not interested in a particular characteristic or he simply has forgotten to specify it. In

A. Ragone et al.

this case the system has to contact to buyer/seller to further refine her/his description.
Asking users to refine their descriptions before the negotiation process starts seems
quite unrealistic, because of the amount of descriptions that can be stored in the system
itself. It appears more feasible to leave this phase to a second negotiation stage related
to a small subset of supplies/demands. For instance, the ones with the highest utility
product. In fact these solutions are known to be Pareto-efficient and fair, according
to Nash [11]. Once buyer and seller have refined their descriptions it is possible to
start a new negotiation (the so-called post-negotiation phase) where only the updated
information is negotiated. On the other hand, still in the open-world assumption setting,
a second possible choice can be to assume incomplete information as an any-would-
fit assertion (dont care), so the system should cope with this incompleteness as is.
Therefore also this information will be presented in the final agreement. Following the
above example the final agreement would be:
A = HomePC  hasProcessor.Intel  hasOS.Linux  PC 
hasDevice.WiFi  hasStorageDevice.DVDrecorder
In the latter case no human intervention is needed. In this paper we take this approach,
with agents not caring about missing information.

3 Logic-Based Alternating-Offers Protocol

In this section we model an alternating-offer protocol taking into account the semantics
of request and offers as well as the domain knowledge modeled within an ontology
in the OWL DL fragment we identified in Section 2, exploiting Concept Contraction.
For the sake of clarity and without loss of generality, from now on we consider that
the agent entering the marketplace is the buyer  and her potential partners are the
sellers agents . The first step of the protocol is the normalization of both s demand
D and s supply S. The normalization step substitutes A with A  C everywhere in
a concept, if either A  C or A  C appears in O, then considers the equivalence
R.(A  B)  R.A  R.B as a recursive rewrite rule from left to right. After the
normalization stage, D is a conjunction of elements in the form:

D =

Ci

(2)
?

?

?
i



where Ci  Norm with



Norm =
?

?

?
CNCN
(f  n)
(f  n)
(f = n)

 CN is a Class N ame

R  R is an Object P roperty

 Constraints on numerical f eatures

R.C  with C  Norm

As an example consider the concept in Section 2. After normalization it is rewritten as:
PCNotebook (ram  1024)(hdd  160) hasOShasOS.Linux monitor
monitor.LCDmonitor monitor.characteristics
monitor.characteristics.(inch  17) .
?

?

?
In the normalized form Ci represents issues the user is willing to negotiate on. The
buyer is able to express her utilities on single issues or on bundles of them. For instance,
w.r.t. the previous request the buyer may set utility values on PC (single issue) as well
as on the whole formula (ram  1024)monitor.LCDmonitor (bundle of issue).
We indicate these concepts with Pk  for Preferences.

Now, for each Pk the buyer  expresses a utility value u(Pk) such that

u(Pk)
= 1. As usual, both agents utilities are normalized to 1 to eliminate outliers, and make
them comparable. Since we assume that utilities are additive, the global utility is just a
suitable sum of the utilities for preferences entailed by the final agreement. In particular,
given a concept expression A representing a final agreement, we define the final utility
associated to the agent p, with p  {, }, see (1) as:
{up(Pk) | A  Pk}

up(Opt) = tp

up(A) =
?

?

?
(3)
?

?

?
i

where tp is the disagreement threshold of agent p (see Section 1.1).

k

3.1 The Protocol

Summing up, before the real negotiation starts (step 0) we have a demand D and a
supply S such that:

D =
?

?

?
i

Ci

S =
?

?

?
j

Cj

Based on Ci and Cj, the buyer and seller, respectively, formulate their preferences Pk
(for the buyer) and Ph (for the seller) and for each of them set a utility value such that:
?

?

?
k

u(Pk) = 1
?

?

?
h

u(Ph) = 1

Finally, both for  and  we have the corresponding disagreement thresholds and
utility functions t, u and t, u.
If D S O  then demand and supply descriptions are in conflict with each other and
 and  need to negotiate on conflicting information if they want to reach an agreement.
The negotiation will follow an alternating offers pattern: at each step, either  or  gives
up a portion of its conflicting information choosing the item with the minimum utility.
At the beginning, both  and  need to know what are the conflicting information.
Notice that both agents  and  know D and S, but they have no information neither on
counterpart utilities nor preferences. Both  and  will solve two Concept Contraction
problems, computing a G minimal irreducible solution, and rewrite D and S as:

S = G

0  K 

D = G

0  K 
0 and G

In the above rewriting G
0 represent, respectively, some of the causes that make
D in conflict with S and the reason why S is in conflict with D. At a first glance it
would seem  needs only G
0  and  needs G
0 . We will see later that 

0 , K 

0 , K 

A. Ragone et al.

needs also information on  in order to check its fairness during negotiation steps.
Since we compute G-irreducible solutions we can normalize G
same procedure for D and S, as:

0 and G

0 , following the

G

0 = G

(0,1)

 G

(0,2)

 . . .  G

(0,n) =

G

0 = G

(0,1)  G

(0,2)  . . .  G

(0,m) =

n

i=1
m

j=1

G

(0,i)

G

(0,j)

In the previous formulas, indexes (0, i) and (0, j) represent the i-th and j-th conjunctive
element in G and Gat round 0. Due to the structure of D, S and O we have that: for
each G
(0,i) there always exists a Ci in the normalized version of D as represented in
Equation (2)  such that G
(0,j) and
Cj in the normalized form of S. Hence, some of Pk and Ph can be partially rewritten
in terms of G
0 are the
reason why an agreement is not possible, then either  or  will start conceding one of
G

(0,i) = Ci. The same relation holds between each G

(0,j) respectively. Since the information in G

(0,i) and G

0 and G

(0,j) reducing their global utility of u(G
(0,i) or G
Suppose  starts the negotiation and gives up G

(0,i)) or u(G
(0,2) = C5 with P3 O G

(0,j)), respectively.

(0,2). Then

she reformulates her request as

D1 =
?

?

?
Ci

i=1..4,6..

and sends it to . Notice that since P3 O G

(0,2), the global utility of  decreases to

u
1 =
?

?

?
u(Pk)

k=1..2,4..

1 , K 

Now,  is able to validate if  really changed her request to reach an agreement and did
1  solving a concept contraction problem w.r.t.
not lie. To do so,  computes G
the new demand D1 and checks if G
1 is more general than G
0 . In formulas,  checks
if G
1 holds, in case of positive answer, then  knows that  did not lie and
he continues the negotiation process. Otherwise he may decide to leave the negotiation
(conflict deal) or ask  to reformulate her counteroffer. If the negotiation continues, 
computes his conflicting information w.r.t. to D1 and rewrites S as:

0 O G

S = G

1  K 

where

G

1 =

m

j=1

G

(1,j)

Again, for each G(1,j) there exists a Cj in the normalized version of S. Hence, if  decides to concede G(1,j), his global utility decreases proportionally to the utility of Ph to
which G(1,j) belongs to. Once  sends his counteroffer to , this latter is able to check if
?

?

?
 lied. Similarly to  in step 0,  computes G
process ends when one of the following two conditions holds:

1  and checks if G

1 , K 

0 O G

1 . The

1. the global utility of an agent is lower than its disagreement threshold. In this case

the negotiation terminates with a conflict deal.

2. there is nothing more to negotiate on and the global utility of each agent is greater
than its disagreement threshold. In this case the negotiation terminates with an
agreement. The agreement A is computed simply as A = Dlast  Slast, where
Dlast and Slast are the request and the offer in the last step.

3.2 Minimum Concession

Since users can express an utility value also on bundles, whenever they concede an
issue as the minimum concession (in term of minimum global utility decrease), the set
of all the bundles in which the issue is present has to be taken into account. They choose
based on the utility of the whole set. For instance, suppose the buyer sets as preferences
the following ones:

P1 = monitor.LCDmonitor
P2 = (hdd  200)
P3 = monitor.LCDmonitor  monitor.characteristics.(inch = 17)

with the following utilities: u(P1) = 0.1, u(P2) = 0.4 and u(P3) = 0.5.

At the n-th step the conflicting information is:

n = monitor.LCDmonitor  (hdd  200)
G

Hence,  can concede whether monitor.LCDmonitor or (hdd  200). If she
concedes monitor.LCDmonitor then her global utility decreases of u(P1) +
u(P3) = 0.6, while conceding (hdd  200) her utility decreases of u(P2) = 0.4
only. In this case the minimum concession is (hdd  200).

3.3 The Algorithm

Here we define the behavior of agents during a generic n-th round of the negotiation
process. We present only the algorithm related to s behavior since the behavior of 
is dual w.r.t. s one.

1-4 If there is nothing in conflict between the old Dn1 and just-arrived Sn, then there
is nothing more to negotiate on: the agreement is reached and returned. Notice that
while computing the final agreement we use the any-would-fit approach to deal
with incomplete information (see Section 2.1).

5-11 If  discovers that  lied on his concession, then  decides to exit the negotiation and terminates with a conflict deal. If we want  ask  to concede again it is
straightforward to change the protocol to deal with such a behavior.

13-15 If after the minimum concession, the utility of  is less than her disagreement

threshold, then the negotiation ends with a conflict deal.

A. Ragone et al.

if Dn1  Sn O  then
agreement A reached;
return A = Dn1  Sn;

end
if n > 0 then

n from Dn1 and Sn;
n then

compute G
if G

n, K 
n1 O G
 lied;
conflict deal: exit;

end

end
compute minimum concession G
if u

n1 < t then
conflict deal: exit;

(n1,i);

end
formulate Dn deleting G
send Dn to  ;

(n1,i) from Dn1;
?

?

?
Algorithm 1. The behavior of  at step n

3.4 An Illustrative Example
Keeping the computer equipment as reference domain, consider the following example:
a buyer  looking for a personal computer equipped with an Intel processor whose
clock frequency is at least 3000 MHz, 2 Giga bytes of RAM. The computer must have
Linux operating system pre-installed. A 19 LCD monitor is also requested.. On the
other side, a seller offers a personal computer for domestic use with a 2500 MHz Pentium on board. The computer is provided with a Windows operating system, a 17 LCD
monitor and a WiFi adapter.. Both the request D and the offer S can be formalized as:

D = PChasProcessorhasProcessor.(Intel Processor (mhz  3000))
hasOShasOS.Linux (hdd  100)monitormonitor.(LCDmonitor
characteristics  characteristics.(inch = 19))  (ram = 2048)

S = HomePChasProcessor.(Pentium(mhz = 2500))hasOS.WinX(hdd = 80)

monitor  monitor.(LCDmonitor  characteristics 
characteristics.(inch = 17))  hasWiFi

Their normalized forms4 are respectively:
D = PC  hasProcessor  hasProcessor.Intel Processor 

hasProcessor.(mhz  3000)  hasOS  hasOS.Linux  (hdd  100) 
monitor  monitor.LCDmonitor 
monitor.characteristicsmonitor.characteristics.(inch = 19)
(ram = 2048)

4 In order to keep the example compact, we do not consider here the normalization step (f =
n)  (f  n)  (f  n), which should be taken into account.
?

?

?
S = HomePC  hasProcessor.Pentium  hasProcessor.(mhz = 2500) 

hasOS.WinX  (hdd = 80)  monitor  monitor.LCDmonitor 
monitor.characteristicsmonitor.characteristics.(inch = 17)
hasWiFi

Now both agents  and  set their preferences with corresponding utilities and utility
threshold.

1 = monitor.LCDmonitor
P 
2 = (hdd  100)
P 
3 = hasOS.Linux
P 
4 = monitor.LCDmonitor
P 

monitor.characteristics.(inch = 19)

5 = (ram = 2048)

P 
t = 0.6

1 = monitor.characteristics.(inch = 17)
P 
2 = hasProcessor.(mhz = 2500)
P 
P 
3 = (hdd = 80)
4 = hasOS.WinX
P 
t = 0.5

u(P 
u(P 
u(P 

1 ) = 0.4
2 ) = 0.2
3 ) = 0.2

u(P 
u(P 

4 ) = 0.1
4 ) = 0.1

u(P 
u(P 
u(P 
u(P 

1 ) = 0.4
2 ) = 0.3
3 ) = 0.2
4 ) = 0.1

0 = monitor.characteristics.(inch = 19)hasProcessor.(mhz  3000)
G

K and G are computed for both  and .
0 = PC  hasProcessor  hasProcessor.Intel Processor  hasOS
K 
hasOS.OperatingSystem  monitor  monitor.characteristics
monitor.LCDmonitor  (ram = 2048)
hasOS.Linux  (hdd  100)
0 = HomePC  hasProcessor.Pentium  monitor  monitor.LCDmonitor 
K 
monitor.characteristics  hasWiFi
0 = monitor.characteristics.(inch = 17)hasProcessor.(mhz = 2500)
G
(hdd = 80)  hasOS.WinX

Now suppose that by coin tossing,  moves first. She starts giving up the constraint
on processor clock frequency, which is her minimum concession since a utility not
assigned to a characteristic is usually equivalent to a utility equal to zero. Then she
computes her utility and, since it is greater than the threshold value, decides to go on
with the negotiation process. In the following step we have:
1 = PC  hasProcessor  hasProcessor.Intel Processor  hasOS
K 
hasOS.OperatingSystem  monitor  monitor.characteristics
monitor.LCDmonitor  (ram = 2048)
1 = monitor.characteristics.(inch = 19)  hasOSLinux  (hdd  100)
G
1 = HomePC  hasProcessor.Pentium  monitor  monitor.LCDmonitor 
K 
monitor.characteristics  hasWiFi  hasProcessor.(mhz = 2500)
?

?

?
1 = monitor.characteristics.(inch = 17)  (hdd = 80)  hasOS.WinX
G
At this point,  gives up hasOS.WinX which is the preference with the minimum util-
ity. The protocol continues until agents reach logical compatibility. A final agreement
could then be:
A = HomePChasOShasOS.LinuxhasProcessorhasProcessor.(mhz =

2500)  hasProcessor.Pentium  (hdd = 80)  (ram = 2048)
monitor.LCDmonitor  monitor.characteristics
monitor.characteristics.(inch = 19)  hasWiFi,
3 ) + u(P 

1 ) + u(P 

4 )+ u(P 

with corresponding utilities u = u(P 
and u = u(P 
3 ) = 0.5 for .

2 ) + u(P 

5 ) = 0.8 for 

4 Features of the Negotiation Mechanism

We briefly point out some characteristics of the proposed negotiation protocol [15].
Semantics. In the proposed protocol a formal language is exploited. Using a domain
ontology it is possible to discover implicit conflicting information between a demand D
and a supply S. Furthermore, a general logic-based technique, i.e., Concept Contraction,
grounded in well-known belief revision theory [10], is adopted to compute concessions.
Bundles. Users (both  and ) can set utility values not only on single issues but also
on a bundle of issues. Strong Agreement. During the negotiation process the agents
negotiate on conflicting issues. Hence, if the negotiation does end with an outcome,
no conflicting information are present in the final agreement. Simplicity. Interaction
among agents requires low communication costs: agents do not have to guess either
the preferences of their opponent or their utility function. Moreover it is possible to
compute strategy in a reasonable amount of time [11]. Distribution. The negotiation
mechanism does not require a mediator helping parties to reach an agreement during the
negotiation process or managing the entire process. Agents negotiate on their own with
no need of an external help. Efficiency. If the protocol ends with an agreement, this is on
the Pareto frontier. Due to the structure of formulas  and  and G-irreducible solutions
to concept contraction problems, during round n for each G
n, representing
the source of information in Dn, there is always at least one (in the most general case,
 G
more than one) G
n representing the corresponding source of information in
Sn. Hence, if  concedes G
(n,i), losing the utility of bundles containing G
(n,i), then 
is sure to maintain the utility on bundles involving G
(n,j). In other words, if an agent
concedes something decreasing its utility then the opponents utility does not decrease.
Notice that, in order to reach a surely Pareto-efficient agreement and always find a Nash
bargain solution, while maintaining the same logic approach and the use of bundles, a
protocol similar to the one proposed in [9] can be adopted. Nevertheless, if we want to
consider the willingness to risk conflict of both agents, in order to decide for each round
which agent will concede, it becomes hard to maintain the approach fully distributed.
If the approach remains distributed then we have to hypothesize agents estimate the
willingness to risk conflict of the opponent. In this case we would probably lose in
simplicity.

 G

(n,j)

(n,i)
?

?

?
5 Related Work and Summary

Several recent logic-based approaches to negotiation are based on propositional logic.
In [3], Weighted Propositional Formulas (WPF) are used to express agents preferences
in the allocation of indivisible goods, but no common knowledge (as our TBox) is
present. Utility functions expressed through WPF are classified in [4] according to the
properties of the utility function (sub/super-additive, monotone, etc.). We used the most
expressive functions according to that classification, namely, weights over unrestricted
formulas, but for the fact that our formulas are DL conceptsi.e., non-propositional.
In [17] an agreement is defined as a model for a set of formulas from both agents, but
agents preferences are not taken into account. In [12] a propositional logic framework
endowed of an ontology T is proposed, where a one-shot protocol is exploited to reach
Pareto-efficient agreements. In order to reach a Pareto-efficient agreement a trusted mediator is needed, to whom agents reveal their preferences, and which suggests to the
agents the most suitable agreement. The framework in [12] was further improved in
[14], extending propositional logic with concrete domains in order to handle also numerical features as price, weight, time etc. In this work, instead, no mediator is needed.
The work presented in [18] adopts a kind of propositional knowledge base arbitration
to choose a fair negotiation outcome. However, common knowledge is considered as
just more entrenched preferences, that could be even dropped in some deals. Instead,
the logical constraints in our ontology T of formulas must always be enforced in the
negotiation outcomes. Finally we devised a protocol which the agents should adhere to
while negotiating; in contrast, in [18] a game-theoretic approach is taken, presenting
no protocol at all, since communication between agents is not considered. Although we
used a rather inexpressive DL, our approach can be easily extended up to ALEH(D),
which can express qualified existential concepts and sub-properties. Summarizing, we
have motivated and illustrated a logic-based approach to bilateral negotiation in P2P
e-marketplaces; we proposed a semantic-based alternating-offers protocol exploiting
Description Logics, non-standard inference services, and utility theory to find the most
suitable agreements. To the best of our knowledge there is only another work exploiting
DLs in negotiation scenarios [13]. In that work the more expressive SHOIN(D) is used
to model the logic-based negotiation protocol, and only standard inference services,
such a satisfiability, are exploited in order to catch inconsistency sources between D
and S. Instead, the use of a non-standard inference service, such a Concept Contrac-
tion, can be useful to provide also an explanation of what is wrong between D and S,
i.e., the reason why  and  can not reach an agreement and what has to be given up in
order to reach that. However, in this paper we model a scenario with partial incomplete
information (agents know opponent preferences, but not utilities of such preferences),
while in [13] a scenario with fully incomplete information is studied, where agents do
not know anything about the opponent one (neither preferences nor utilities). Moreover,
differently from the approach presented in [13], the negotiation mechanism also works
without agents knowing their exact utilities. It is enough that each agent knows, at every round, which issue to concede next; so only partial orders on issues are needed.
Work is ongoing on various directions, namely: extending the DL adopted, finding a
cheap way to ensure that the reached agreement is Pareto-efficient, and carry out
large-scale experiments with real advertisements. We also plan to apply our approach to

A. Ragone et al.

Semantic Web Services (SWS) contracting, for negotiating Service Level Agreements
(SLA) between users and SWS providers.

Acknowledgments

We acknowledge support of project EU-FP-6-IST-026896 TOWL. We are grateful to
one anonymous reviewer for useful suggestions.
