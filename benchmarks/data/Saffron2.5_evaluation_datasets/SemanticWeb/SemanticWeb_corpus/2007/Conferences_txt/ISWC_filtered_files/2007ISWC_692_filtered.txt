Semantic Cooperation and Knowledge Reuse by Using

Autonomous Ontologies

Yuting Zhao1, Kewen Wang1, Rodney Topor1, Jeff Z. Pan2, and Fausto Giunchiglia3

1 Griffith University, Australia
2 University of Aberdeen, UK
3 University of Trento, Italy

{yuting.zhao,k.wang,r.topor}@griffith.edu.au

jpan@csd.abdn.ac.uk, fausto@dit.unitn.it

Abstract. Several proposals have been put forward to support distributed agent
cooperation in the Semantic Web, by allowing concepts and roles in one ontology
be reused in another ontology. In general, these proposals reduce the autonomy
of each ontology by defining the semantics of the ontology to depend on the
semantics of the other ontologies.

We propose a new framework for managing autonomy in a set of cooperating
ontologies (or ontology space). In this framework, each language entity (con-
cept/role/individual) in an ontology may have its meaning assigned either locally
with respect to the semantics of its own ontology, to preserve the autonomy of
the ontology, or globally with respect to the semantics of any neighbouring ontology in which it is defined, thus enabling semantic cooperation between multiple
ontologies.

In this way, each ontology has a subjective semantics based on local interpretation and a foreign semantics based on semantic binding to neighbouring ontologies. We study the properties of these two semantics and describe the
conditions under which entailment and satisfiability are preserved. We also introduce two reasoning mechanisms under this framework: cautious reasoning
and brave reasoning. Cautious reasoning is done with respect to a local ontology and its neighbours (those ontologies in which its entities are defined); brave
reasoning is done with respect to the transitive closure of this relationship. This
framework is independent of ontology languages. As a case study, for Description Logic ALCN we present two tableau-based algorithms for performing each
form of reasonings and prove their correctness.

1 Introduction

The Semantic Web vision is to develop a distributed environment in which software
agents can automatically, conveniently and effectively interpret and apply the data that
is available on the Web. To this end, a system of knowledge representation which supports semantic cooperation between distributed agents is required. Such a system must
be based on ontologies which define the terms and relationships used in a particular
application domain. Each such ontology reflects the objective and shared views of a
community of users working in that domain. However, the original use of the word

K. Aberer et al. (Eds.): ISWC/ASWC 2007, LNCS 4825, pp. 666679, 2007.
c Springer-Verlag Berlin Heidelberg 2007
?

?

?
ontology in philosophy was to describe a complete, self-contained domain of dis-
course. This usage does not scale to the open and distributed Web, where there are
ontologies for each different application domain and even different ontologies for the
same domain. Thus, to support semantic cooperation between agents, it is necessary to
manage and reason about multiple ontologies, which we call an ontology space. How
to do this effectively is a major research problem for the Semantic Web.

AI researchers have also studied management and reasoning in multiple representations of application domains using contextual reasoning [6,7,5]. For this reason, it is a
natural and interesting issue to combine ontology-based and context-based approaches
so that the advantages of both ontology and contextual reasoning can be employed in
the same system. This idea led a series of interesting work.

C-OWL [4] sets up relations outside the ontologies by a set of bridge rules between the concepts (individuals) from different ontologies. Its semantics relies on the
domain relation in DDL [3], which is a directional mapping from the elements of one
domain to the other domain. E-Connection [10] puts the relations inside the ontology,
by extending OWL with a new kind of link property. It connects two sets of strictly
disjoint concepts from different domains. P-DL [2] treats every foreign term as an imported relation, and semantically interprets it by an image domain relation which is
a one-to-one and compositional consistent mapping between two domains. Semantic
Importing [12] focuses on the overlaps of domains; it allows a subconcept which falls
into the conjunction of two domains to be semantically imported and used in the other
ontology. Conservative Extension [9] restricts multiple ontology modules in the same
global interpretation domain and allows them be interpreted using standard semantics.
It is easy to see that the above approaches somehow weaken the autonomy of an
ontology. In order to bridge the gaps between the semantics of different ontologies, a
class of approaches based on cross-domain relations (i.e., domain relations in C-OWL,
directional binary relation in E-connection, and image domain relation in P-DL) needs
the information of the domain element in the other ontology to interpret a bridge rule
in C-OWL, a link property in E-connection, or an importing relation in P-DL. For ex-
ample, suppose that there is well-accepted ontology on the Web called Vehicle, in
which a concept Car is defined as: A car consists of two parts: engine and body. In
C-OWL, this concept is represented as V ehicle : Car which indicates that the concept
Car is defined in the ontology Vehicle. Both BMW and Toyota may wish to borrow the concept Car when they design their own ontologies. These two companies
have different interpretations on engine and body. In C-OWL, V ehicle : Car has
different local interpretations in BMW and Toyota. However, a user cannot distinguish
this difference and confusion may be caused when other people use V ehicle : Car.
Semantic Importing does not rely on domain relations, but one needs to know exactly
the domain elements and how the concepts/roles are interpreted in the other ontology.
Conservative extensions require a single global domain, and prevent each module from
local interpretation its axioms under its own context.

In this paper, we propose a new framework for managing autonomy in a distributed
ontology space. On the one hand a language entity (concept/role/individual) is interpreted totally under local domain semantics in order to preserve the autonomy of an
ontology; on the other hand a (shared) language entity is restricted by a semantic

Y. Zhao et al.

binding if necessary in order to enable semantic cooperation among several ontologies.
In this way, one ontology is able to express its subjective opinion by local interpreta-
tion, and to receive its foreign semantics by semantic binding. We use the term foreign
semantics of one ontology to express the semantic meaning of an foreign entity from
another ontology connected by semantic binding. Accordingly, we also introduce two
reasoning mechanisms: cautious reasoning and brave reasoning. The former relies on
an ontology and its foreign semantics from its neighbors ontologies connected by semantic binding, but it does not trust the foreign semantics of its neighbour from their
neighbors. The latter believes an ontology and its foreign semantics, and also its neighbour ontologies and their foreign semantics.

The main contribution of this paper are the followings:

 We introduce a novel approach to define semantic cooperation between different
ontologies. By semantic binding, the semantics of language entities from one ontology is able to be accessed in other ontologies. This is different from the existing
domain-relation based approaches.

 We formalize two forms of reasoning mechanisms: cautious reasoning and brave
reasoning. The former only does reasoning in one ontology and its neighbors ontologies associated by its semantic binding; the latter does reasoning in one ontology and its neighbours ontologies and their neighbours ontologies and so on.

In the rest, we briefly review ontologies and ontology spaces in Section-2, and introduce
the notion of an autonomous ontology in Section-3. In Section-4 we introduce the two
reasoning mechanisms and the algorithms. The related work review and conclusion are
given in Section-5.

2 Preliminaries: Ontology Space and Foreign Entity

In general understanding [14], an ontology is a set of annotated terminological axioms
and facts. Current discussion is based on normal Description Logic (DL) [1]. The proposed framework can be restricted or generalized to some DL languages such as OWL,
SHOIN(D+), etc.

2.1 Ontology and Ontology Space

Let C be a finite set of concept names, R a finite set of role names, and E a finite sets of
individual names. A language L has a vocabulary of the disjoint union of C, R and E.
Definition 1 (Ontology). Let L be the language. An Ontology O is a tuple T, A,
where T and A are TBox and ABox respectively in Description Logic on L.
Definition 2 (Ontology interpretation). An (abstract) ontology interpretation I is a
is a mapping that assigns
pair
1. to each concept name c  C a subset of I
2. to each role name R  R a subset of I  I
,
3. to each individual name e  E an element of I

is an nonempty domain, and I

,

I ,I
?

?

?
, in where I

.
?

?

?
Definition 3 (Ontology Space). Let I be a set of indexes, standing for a set of URIs for
ontologies. Let LI = {Li}iI be a set of languages. An Ontology Space OI on LI is a
family {Oi}iI, s.t. every Oi is an ontology on language Li, where i  I.
In ontology space OI = {Oi}iI , we denote, by Ci the set of concept names in
ontology Oi. Analogous to Ri and Ei. Actually language Li has a vocabulary of the
disjoint union of Ci, Ri and Ei. In the rest of the paper, we use language entity to
denote concept, role, or individual in one ontology.

2.2 Foreign Entity

In ontology space, sometimes a language entity is defined in one ontology, but could
be used in another ontology. So we partition the language Li in two parts: the local
entity and the foreign entity (originated from local language and foreign language in
[4]). Intuitively, local entities are the roles, concepts, and individuals that one invites
in her own ontology; foreign entities are the roles, concepts, and individuals that she
borrows from the other ontologies in order to define something in her ontology.

In this paper, when we are talking about semantics and reasoning, we always tell
a language entity in the ontology space by a way showing (1) where it is used, and
(2) where it is originally defined. Suppose that C  Li and i, j  I, then formally
in ontology space we have a language entity like, (i : j : C), which means a language
entity C appears in ontology Oi, but is originally defined in ontology Oj. This kind of
denotation is applied to concepts, roles, and individuals in ontology space.

One of the advantages of this denotation is, in syntax two concepts/roles with the
same name but used in different ontologies are distinguishable. For example, suppose we use (BM W : auto : engine) for the engines in BMW car ontology, and
(T oyota : auto : engine) for those in Toyota car ontology; obvious these two concepts
should be different, and it is easy to see from the syntax: (BM W : auto : engine) =
(T oyota : auto : engine). This denotation is important in this paper because, the approach proposed in this paper assigns local semantics to this kind of concepts/roles, and
treats them as totally different entities.

3 Autonomous Ontology

In one ontology space, each ontology reflects the subjective opinion on a partial structure of the universe. In Semantic Web, in general one party presents her personal knowledge (understanding) by her ontology. Thereafter we argue each ontology should be
semantical independent and keeping autonomy.

Formally an autonomous ontology is composed by two parts: one is an ontology
which is to be interpreted locally in order to keep the autonomy of one party; the other
is a set of foreign entities, which is called semantic binding in this paper, in order to
accept foreign information or knowledge from the other parties.
Definition 4 (Autonomous Ontology). Let OI = {Oi}iI be an ontology space, where
I is a set of indexes. An autonomous ontology is a tuple AOi = Bi, Oi, in which
Oi  OI, and Bi is the semantic binding of AOi, which is a set of foreign entities.

Y. Zhao et al.

AO1

1 : 1 : F  1 : 1 : E
  
1 : 1 : G  1 : 1 : F

AO3

3 : 3 : S  3 : 2 : A
3 : 3 : T  3 : 2 : C

AO2

2 : 2 : A  2 : 1 : E
2 : 2 : B  2 : 1 : E
2 : 2 : C  2 : 1 : F
  
2 : 2 : C  2 : 1 : G

Fig. 1. Autonomous ontology space

An autonomous ontology space AOI is a set of autonomous ontologies. In an autonomous ontology space AOI = {AOi}iI, if an entity (j : j : x), which is original
defined in AOj, is semantic bounded in AOi; i.e., (i : j : x)  Bi, then we say AOj is
the binding neighbour of AOi.

In fact it is easy to treat an autonomous ontology as a normal ontology; for example

in OWL we could just introduce a binding annotation like:
Annotation ( binding <http://www.auto.org/engine#> )
to express the semantic binding. So in the rest of the paper sometime we also mean an
autonomous ontology by ontology.

Example 1 (Autonomous Ontology). Consider the autonomous ontology space
in
Figure-1, suppose we have following semantic bindings: B1 = , B2 = {(2:1: E), (2:
1 : F )}, and B3 = {(3 : 2 : A), (3 : 2 : C)}. So AO1 is the binding neighbour of AO2,
and AO2 is the binding neighbour of AO3. We note that in autonomous ontology it
allows some foreign entity outside of the semantic binding, e.g., (2:1: G) in AO2. 

Ii,Ii
?

?

?
3.1 Local Interpretation
Definition 5 (Local Interpretation). For autonomous ontology AOi = Bi, Oi, a
local interpretation Ii is a pair
, in where Ii is an nonempty domain, and
Ii is a mapping , s.t. Ii assigns
1. (for local entities)
(a) a subset of 
(b) a subset of 
(c) an element of 

Ii to each local role name (i : i : r);
Ii to each local individual name (i : i : e),

Ii to each local concept name (i : i : c);
Ii  

2. and for i = j (for foreign entities)

(a) a subset of 
(b) a subset of 
(c) an element of 

Ii to each foreign concept name (i : j : c);
Ii  

Ii to each foreign role name (i : j : r);
Ii to each foreign individual name (i : j : e).

As we see in the above definition, in local interpretation not only local entities but also
foreign entities including those in the semantic binding are interpreted under local do-
main. Actually, the local interpretation of an autonomous ontology is the interpretation
of the ontology. From this aspect the abstract interpretation of ontology in Section-2 is
?

?

?
also a local interpretation. The difference is, the definition in the last section is for a
single ontology, but here we focus on one ontology among an ontology space.
Following common understanding, if an axiom a  A is true under an interpretation
I, we say that interpretation I satisfies the axiom a , and denote this by I |= a.
Definition 6 (Satisfiability of autonomous ontology). Let AOi be an autonomous ontology and an I its local interpretation, we say that I satisfies AOi, if for any axiom
a  AOi, we have I |= a. We call I a local model of AOi, and denote this fact by
I |=L AOi.
Definition 7 (Local Entailment). Let AOi be an autonomous ontology,  a concept
description or an assertion. We say that  is a local entailment of AOi, iff for any local
model Ii of AOi, Ii |= . This fact is denoted by AOi |=L .
Example 2 (Local semantics). Consider the autonomous ontology space in Figure-1.
We have AO2 |=L (2:2: B)  (2:2: A), because for any local model I,

I |= (2 : 2 : B)  (2 : 1 : E),
I |= (2 : 2 : A)  (2 : 1 : E)
I |= (2 : 2 : B)  (2 : 2 : A)

and

.

3.2 C-Binding Consistency
For autonomous ontology AOi  AOI, let Bi = { 
jI Bij} be the semantic binding
1, in which Bij = {(i: j : C)}i,jI contains all of the semantic-bounded foreign entities
which are original defined in Oj.
In autonomous ontology AOi  AOI, a j-concept (j-role) is an class (property)
description which is composed by the entities in Bij. For example, a j-concept of AOi
could be (i: j : hasChild).(i: j : M ale).

Let j be a j-concept , obviously in j all of the entities are prefixed by i : j : .
If we change the prefix of every entity in j from i : j :  to j : j : , and then
we get 
j the original image of j in Oj. For example, let j be (i :
j : P erson)  (i : j : hasChild).(i : j : F emale), then its original image 
j is
(j : j : P erson)  (j : j : hasChild).(j : j : F emale).

j. We call 

We note that the original image 

j of a j-concept j may not has a concept name in
Oj; it may not be explicitly defined there.
Definition 8 (C(j)-binding Consistent Model). Let AOi = Bi, Oi be an autonomous
ontology, and j  I. Let I be a local model of AOi, if for any j-concept j, we have
(1)
then we say I is the C(j)-binding consistent model of AOi. This fact is denoted by
I |=C(j) AOi
Example 3 (C(j)-binding consistent model). Let 2 = {, } be the domain of AO2
in Figure-1. Considering following two local interpretations of AO2:
1 It is possible that some foreign entities are not included in Bi. Actually these foreign entities

iff AOj |=L 

I |= j

j

are not semantic-bounded; they are free-access entities according to [17].

Y. Zhao et al.

Table 1. Example of interpretations for the autonomous ontology AO2

symbol
?

?

?
(2 : 2 : A)
(2 : 2 : B)
(2 : 2 : C)
(2 : 1 : E)
(2 : 1 : F )
(2 : 1 : G)



I21
{, }
{}
{}
{, }
{}
{, }
{, }


I22
{, }
{, }
{}
{}
{, }
{}
{, }


(2 : 1 : F )  (2 : 1 : E) N ot satisf iable Satisf iable

Obviously both I21 and I22 are local models of AO2, i.e., I21 |=L AO2 and I22 |=L
AO2. Let  = (2 : 1 : F )  (2 : 1 : E), from Table-1 we find I21 |= . Since B21 =
{(2 : 1 : E), (2 : 1 : F )},  is the 1-concept, and AO1 |=L , we have I21 is not a C(1)-
binding consistent model. Actually I22 is a C(1)-binding consistent model of AO2. In
this example we also note that foreign entity outside of the semantic binding does not
carry any semantical information from its original ontology; e.g., since (2:1: G)  B21,
although AO1 |=L (1 : 1 : G)  (1 : 1 : F ), in AO2 C(1)-binding consistent model I22
does not need to satisfy (2:1: G)  (2:1: F ).

Definition 9 (C(j)-binding Entailment). Let AOi be an autonomous ontology,  a
concept description2 or an assertion. We say that  is the C(j)-binding entailment of
AOi, iff for any C(j)-binding consistent model I of AOi, I |= . This fact is denoted
by AOi |=C(j) .
In Example-3 we have AO2 |=C(1) (2 : 1 : F )  (2 : 1 : E), and AO2 |=C(1) (2 : 2 : C) 
(2:2: A).
Definition 10 (C-binding Consistency). Let I be a local model of AOi. If for any
j = i  I, I is the C(j)-binding consistent model of AOi, then I is the C-binding
consistent model of AOi. We say AOi is C-binding consistent in AOI if there exists a
C-binding consistent model.
We say an autonomous ontology AOi = Bi, Oi is C-satisfiable, if it is C-binding
consistent and Oi is satisfiable.
Let AOi be an autonomous ontology and i = j  I, we note that not every local
model is a C(j)-binding consistent model; it is not necessary for a local model to satisfy a
j-concept , but it is for a C(j)-binding consistent model. We also note that not every C(j)-
binding consistent model is a C-binding consistent model; a C(j)-binding consistent
model may not satisfies a k-concept for k = j. So an autonomous ontology which
is satisfiable under the local semantics could be unsatisfiable under the autonomous
semantic.
2 Here for convenient we treat a subsumption x  y as a concept description x  y. Same for
the rest of the paper.
?

?

?
Definition 11 (C-entailment). Let AOi be an autonomous ontology,  a concept description or an assertion. We say that  is the C-entailment of AOi, iff for any C-binding
consistent model Ii of AOi, Ii |= . This fact is denoted by AOi |=C .
Lemma 1. Let AOi be an autonomous ontology,  a concept description or an asser-
tion. We have AOi |=L  = AOi |=C .
In this paper, we use C(AOi) = {| AOi |=C } to denote the set of C-entailments
of AOi, and call it Cautious theory of AOi. Comparably, we also use L(AOi) =
{| AOi |=L } to denote the set of local entailment of AOi under local semantics,
and call it local theory of AOi.
Theorem 1. For a autonomous ontology AOi, we have L(AOi)  C(AOi).
Proposition 1. Let AOi = Bi, Oi be C-binding consistent, for any j = i  I and
any j-concept  of AOi, we have AOi |=C  if AOj |=L 
Example 4. In the autonomous ontology space in Figure-1, we have AO2 |=C (2 : 2 :
C)  (2:2: A). However for AO3, since AO2 |=L (2:2: C)  (2:2: A), AO3 |=C (3:
2 : C)  (3 : 2 : A), and then we do not have AO3 entails (3 : 3 : T )  (3 : 3 : S) under

C-entailment.

.

In this paper when we say cautious semantics of an autonomous ontology we mean the
C-binding model(s). We say an autonomous ontology space AOI is C-binding consistent if every autonomous ontology is C-binding consistent.

Definition 12 (C-entailment of Ontology Space). Suppose autonomous ontology
space AOI = {AOi}iI is C-binding consistent. Let AOi  AOI, and  a concept
description or an assertion. We say that  is the C-entailment of autonomous ontology
|=C  , iff there exists i  I, s.t. AOi |=C  . We also
space AOI, denoted by AOI
say i  I is the provenance of the entailment .

3.3 B-Binding Consistency

B-binding stands for brave binding. One autonomous ontology not only relies on
its binding neighbors, it also trusts the neighbors of its binding neighbors. In this way
B-binding could build more stronger semantic cooperation among multiple ontologies
than C-binding, in the sense that some information in one ontology is transitively reused
by, not only its neighbour but also the neighbours neighbour.
For example in the autonomous ontology space in Figure-1, AO3 does not entail
(3 : 3 : T )  (3 : 3 : S) under C-binding semantics because AO2 |=L (2 : 2 : C) 
(2 : 2 : A); but it could entail this subsumption under B-binding semantics because
AO2 |=C (2:2: C)  (2:2: A). Details will be given later.
Definition 13 (B-binding Entailment). Let AOi = Bi, Oi be an autonomous ontol-
ogy, and I a local interpretation of it. We say I is a B-binding consistent model of AOi,
which is denoted by I |=B AOi, if

Y. Zhao et al.

1 I is a local model of AOi, and
2 for any j  I and any j-concept j we have I |= j iff

(a) AOj |=L 
(b) AOj |=C 
(c) AOj |=B 

j

j

j

, or
, or

We say AOi is B-binding consistent in AOI if there exists a B-binding consistent model.
Let  be a formula. For any B-binding model I of AOi, if I |= , then we say  is the
B-entailment of AOi. This fact is denoted by AOi |=B 

Above is a recursive definition on the B-binding semantics for an autonomous ontology . Local knowledge in one ontology is used to support a logical result in its binding
neighbour-reached ontology. We say AOj is binding neighbour-reached from AOi,
if there exists a sequence (AOx,1, AOx,2,  , AOx,k) such that for 1  y < k
AOx,(y+1) is a binding neighbour of AOx,y and AOx,1 = AOi and AOx,k = AOj.

From above definition it is easy to get the following lemma.

Lemma 2. For a autonomous ontology AOi  AOI, every B-binding model is a C-
binding model.

Lemma 3. Let AOi be an autonomous ontology,  a concept description or an asser-
tion. We have AOi |=C  = AOi |=B .
In this paper, we use B(AOi) = {| AOi |=B } to denote the set of B-entailments
of AOi, and call it brave theory of AOi. From Lemma-2 and Lemma-3, the following
theorem is obvious.
Theorem 2. For a autonomous ontology AOi, we have C(AOi)  B(AOi).

According to Definition-13 the following proposition is obvious.
Proposition 2. Let AOi = Bi, Oi be B-binding consistent, for any j = i  I and
any j-concept  of AOi, we have AOi |=B  if AOj |=C 
Example 5. In the autonomous ontology space in Figure-1, we have AO3 |=B (3 : 3 :
T )  (3:3: S) under the brave semantics.

.

In this paper when we say brave semantics of an autonomous ontology we mean the B-
binding model(s). We say an autonomous ontology space AOI is B-binding consistent
if every autonomous ontology is B-binding consistent.

Definition 14 (B-entailment of Ontology Space). Suppose autonomous ontology
space AOI = {AOi}iI is B-binding consistent. Let AOi  AOI , and  a concept
description or an assertion. We say that  is the B-entailment of autonomous ontology
|=B  , iff there exists i  I, s.t. AOi |=B  . We also
space AOI, denoted by AOI
say i  I is the provenance of the entailment  .
?

?

?
4 Tableaux Algorithms of Reasoning on ALCN

In this section, we present two distributed tableaux algorithms to realize cautious reasoning (under cautious semantics) and brave reasoning (under brave semantics) in autonomous ontology space respectively.
Here we consider ontologies represented as ALCN TBoxes (which consists of only
class axioms). These algorithms are designed for verifying class satisfiability in an autonomous ontology space AOI, and can also be used to verify class subsumption3.

4.1 Preliminary of Tableaux Algorithm

Tableaux algorithms are very useful to solve class satisfiability problem. They test the
satisfiability of a class 4 by trying to construct an interpretation for , which is represented by a completion tree T which is formally defined as following: A completion
tree is a tuple T = x0, N, E, L, where x0 is the root of T , N and E are the sets of
nodes and edges, respectively, of T , and L is a function that maps a node x in T to its
label L(x) , and an edge x, y in T to its L(x, y), respectively.

A tableaux algorithm starts from an labeled initial tree (usually simply a root node),
and is expanded by repeatedly applying the completion rules. The algorithm terminates
either when T is complete (no further completion rules can be applied) or when an
obvious contradiction, or clash, has been revealed.

Intuitively, our tableaux algorithm expands a completion tree w.r.t. the local axiom
box, and then project some part of the tree (which is related to other autonomous ontology ) for further expansion w.r.t. the axiom boxes of the neighbour autonomous ontology , (e.g., sending the original image of a j-concept to AOj and start a new tableaux
algorithm to check the satisfiability) and then back-project some semantics results to the
local completion tree. We say that a completion tree T is S(j)-bound if there exist some
j-concept or j-role descriptions in the labels of all nodes and edges of T . In this section,
we use procedure Tab(AOi,T ) as a well known (local) ALCN tableaux algorithm to
expand T w.r.t. a local ontology AOi. Tab(AOi,T ) has two distinguished features that
we need: (1) it takes not only a single node but an arbitrary initial completion tree, (2)
the algorithm can cache reasoning states, i.e., backtracking points. In the algorithms
below we also use backtrack(Tab(AOi,T )) to denote the operation to expand tree T
from the backtracking point and return a completion tree.

Projection is to bring information from one autonomous ontology to the binding

neighbour.
Definition 15 (Projection of Completion Tree). Let AOi=Bi, Oi be an autonomous
ontology, and Bij  Bi the set of semantic binding of foreign entities from another
autonomous ontology AOj. Let T be a clash-free completion tree with root x0 in
AOi. The projection of T w.r.t. Bij, denoted as P (T , Bij), is a completion tree T  =
0, N, E, L generated in the following way:
x
3 Since subsumption relation C  D in AOi w.r.t. AOI iff C  D is unsatisfiable in AOi
w.r.t. AOI.

4 Here we assume  is in negation normal form; i.e., negation is only applied to class names.

Y. Zhao et al.
= {x

1. N
= {x

2. E
) = { (j : j : C)| if (i : j : C)  L(x) and (i : j : C)  Bij},

3. L(x
4. L(x

, y

 | if x  N},

, y
) = { (j : j : R)| if (i : j : R)  L(x, y) and (i : j : R)  Bij},

 | if x, y  E},

4.2 Cautious Reasoning

Cautious reasoning relies on the knowledge of an ontology as well as the knowledge of
its binding neighbour ontologies.
Given an autonomous ontology space AOI = {AOi}iI, the procedureC-Tab(AOI,
k, )5 verifies the satisfiability of an ALC class description  in ontology AOk under
the cautious semantics w.r.t. AOI.
Algorithm A-1. C-Tab(AOI, k, )
1: Let T := T ab(AOk,x0,{x0},, {L(x0) = {}}) // local expansion w.r.t. AOk
2: repeat
3:
4:
5:
6:
7:

end if
for every binding neighbour autonomous ontology AOi (i  I) of AOk do

if there exist S(i)-bound maximal sub-trees T1, . . . ,Tn of T with roots x1, ..., xn,
respectively then

if T has a clash then
return unsatisfiable

n := P (Tn, Bki) // sub-trees projection to AOi
n) // local expansion of T 
?

?

?
n := T ab(AOi, T

1 ), . . . ,T 

1 , . . . ,T 

n

8:
9:

1 := P (T1, Bki), . . . ,T 
T 
1 := T ab(AOi,T 
T 
w.r.t. AOi
if any of T 
1 , . . . ,T 

else

end if

end if

n has a clash then

return unsatisfiable

if T is backtrackable then

end if
end for
return satisfiable

T :=backtrack(Tab(AOi,T )) // backtrack and expand

10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: until false
In this algorithm, T is initialized with a root x0 with L(x0) = {}, and is expanded
by local completion rules w.r.t. AOk (line 1 of A-1). As T can have multiple binding
neighbour ontologies, each of them should be taken care (line 6 of A-1). Note that T
might not be k-bound, the algorithm just project the maximal k-bound sub-trees, and
then expand them by local completion rules w.r.t. AOi, and expanded w.r.t. AOI (lines
7-9 of A-1). If any of the projected sub-tree has a clash, T needs to be backtracked (line
12 of A-1), expanded and start the checking all over again.
Theorem 3. C -Tab(AOI, k, ) is a decision procedure to verify the cautious semantics
satisfiability of an ALCN -class description  in ontology AOk w.r.t. AOI.
5 This Algorithm is originated from [12], in which only positive concepts/roles can be projected

to the original ontology, but the approach in this paper does not have this restriction.
?

?

?
To prove the theorem, we need to show that: (1) The algorithm always terminates. (2)
|=C . (3) The algorithm returns satisfiable

The algorithm returns unsatisfiable if AOI
if AOI

|=C . Due to limited space, we skip the detail.

4.3 Brave Reasoning

return satisfiable

Brave reasoning not only relies on its binding neighbors, but also trusts the neighbors
of its binding neighbors.
Given an autonomous ontology space AOI = {AOi}iI, the procedureB -Tab(AOI,
k, ) verifies the satisfiability of an ALC class description  in ontology AOk w.r.t. AOI
under brave semantics. It calls a recursive procedure DB-Tab(AOI, k, T ) to expands a
completion tree T of AOk w.r.t. AOI under brave semantics.
Algorithm A-2. B -Tab(AOI , k, )
1: Let T := x0,{x0},, {L(x0) = {}})
2: T := DB-Tab(k, T )
3: if T has a clash then
return unsatisfiable
4:
5: else
6:
7: end if
Algorithm A-3: DB-Tab(AOI , k, T )
1: let T :=Tab(AOk,T ) // local expansion w.r.t. AOk
2: repeat
3:
4:
5:
6:
7:

end if
for every binding neighbour autonomous ontology AOi of AOk do

if there exist S(i)-bound maximal sub-trees T1, . . . ,Tn of T with roots x1, ..., xn,
respectively then
n := P (Tn, Bki) // sub-trees projection from AOk to
1 ), . . . , T 

return T // unsatisfiable

n := DB-Tab(AOI , i, T
?

?

?
n) // recursive calling

if T has a clash then

8:

9:

1 := P (T1, Bki), . . . ,T 
T 
AOi
T 
1 := DB-Tab(AOI , i,T 
DB-Tab for brave reasoning on T 
if any of T 

1 , . . . ,T 

if T is backtrackable then

n has a clash then

1 , . . . ,T 

n w.r.t. AOi

10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24: until false

end if

else

end if
T1 := (Bki,T1,T 

end if

end if
end for
if T is not changed, then
return T // satisfiable

T :=backtrack(Tab(Oi, T )) // backtrack and expand
return T // unsatisfiable

else

1 ), . . . ,Tn := (Bki,Tn,T 

n) //back-project

Y. Zhao et al.

In this algorithm, initially T has a root x0 with L(x0) = {} (line 1 of A-2), and then
it is expanded by local completion rules w.r.t. AOk (line 1 of A-3). As T can have
multiple binding neighbour ontologies, each of them should be taken care (line 6 of
A-3). Note that T might not be S(i)-bound, maximal S(i)-bound sub-trees then should
be projected, and expanded by local completion rules w.r.t. AOi, if possible it also need
to project to the binding neighbour of AOi. (lines 7-9 of A-3). If any of the projected
sub-tree has a clash, T needs to be backtracked (line 12 of A-3), expanded and start the
checking all over again; otherwise, we need to back-project the new S(i)-bound labels
back to T (line 17 of A-3). The algorithm A-3 would not stop until T is not changed.
Theorem 4. B -Tab(AOI, k, ) is a decision procedure to verify the brave semantics
satisfiability of an ALCN -class description  in ontology AOk w.r.t. AOI.
To prove the theorems, we need to show that: (1) The algorithms always terminates. (2)
|=B . (3) The algorithm returns satisfiable
The algorithm returns unsatisfiable if AOI
if AOI

|=B . Due to limited space, we skip the proof.

5 Conclusions

In general understanding, ontologies are used for describing the structure of domain
knowledge. Techniques for (partial) ontology reuse are important for ontology building,
ontology discovery, and practical application of ontologies.

How to realise semantic cooperation among multiple ontologies is an important problem in the field of (partial) ontology reuse. In this paper we have proposed and analyzed
a new framework for managing multiple ontologies that both preserves the autonomy of
individual ontologies and also enables the semantic cooperation of different ontologies.
We have also proposed two different reasoning mechanisms, called cautious reasoning
and brave reasoning, for this framework and studied their properties. As we discussed in
Section-1, this work is related to DDL [3], C-OWL [4], E-Connection based approach
[10], P-DL [2], Semantic Importing [12], and conservative extension [9].

Ontology modularization [15,16,8,13,11] is another interesting problem in this field.
It attempts to partition one ontology and isolate functional modules. How to present
formal functional modules in a single ontology by semantic binding (as proposed in
this paper) could be an interesting extension of this approach.

Another interesting task is to explore whether our approach to ontology spaces and
semantic binding can be applied to problems of forgetting, importing and extending in
ontology spaces.

A natural task for the immediate future is to implement our two reasoning mecha-

nisms and empirically evaluate their performance.

Acknowledgment. Thanks to Luciano Serafini at ITC-IRST in Trento Italy for discussions on primary ideas of this paper. This work was partially supported by the Australia
Research Council (ARC) Discovery Project 0666107.
?

?

