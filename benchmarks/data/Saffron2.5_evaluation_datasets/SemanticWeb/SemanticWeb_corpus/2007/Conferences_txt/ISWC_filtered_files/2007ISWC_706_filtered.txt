An Unsupervised Model for Exploring

Hierarchical Semantics from Social Annotations

Mianwei Zhou, Shenghua Bao, Xian Wu, and Yong Yu

APEX Data and Knowledge Management Lab

Department of Computer Science and Engineering

Shanghai Jiao Tong University, 200240, Shanghai, P.R. China
{kopopt,shhbao,yyu}@apex.sjtu.edu.cn wuxian@cn.ibm.com

Abstract. This paper deals with the problem of exploring hierarchical
semantics from social annotations. Recently, social annotation services
have become more and more popular in Semantic Web. It allows users
to arbitrarily annotate web resources, thus, largely lowers the barrier
to cooperation. Furthermore, through providing abundant meta-data re-
sources, social annotation might become a key to the development of Semantic Web. However, on the other hand, social annotation has its own
apparent limitations, for instance, 1) ambiguity and synonym phenomena and 2) lack of hierarchical information. In this paper, we propose
an unsupervised model to automatically derive hierarchical semantics
from social annotations. Using a social bookmark service Del.icio.us as
example, we demonstrate that the derived hierarchical semantics has the
ability to compensate those shortcomings. We further apply our model
on another data set from Flickr to testify our models applicability on different environments. The experimental results demonstrate our models
efficiency.

1 Introduction

Social annotation services have recently attracted considerable users and inter-
est. Prominent web sites like Flickr1, Del.icio.us2 are widely used and achieve
significant success. These services not only provide user-friendly interfaces for
people to annotate and categorize web resources, but also enable them to share
the annotations and categories on the web, encouraging them to collaboratively
enrich meta-data resources. In 2004, Thomas Vander Wal named these services
Folksonomy, which came from the terms folk and taxonomy [1].

Compared with the traditional meta-data organization, folksonomy represents
high improvement in lowering barriers to cooperation. Traditional taxonomy,
which is predefined only by small groups of experts, is limited and might easily
become outdated. Social annotation just solves these problems by transferring
the burden from several individuals to all web users. Users could arbitrarily

 Xian Wu is now working in IBM China Research Lab.
1 http://www.flickr.com
2 http://del.icio.us

K. Aberer et al. (Eds.): ISWC/ASWC 2007, LNCS 4825, pp. 680693, 2007.
c Springer-Verlag Berlin Heidelberg 2007
?

?

?
annotate web resources according to their own vocabularies, and largely enrich
the meta-data resources for Semantic Web.

However, although social annotation services have large potential to boom
the Semantic Web, development of these services are impeded by their own
shortcomings. Such shortcomings are mainly due to two features of folksonomy:
 Uncontrolled vocabulary. Breaking away from the authoritatively determined
vocabulary, folksonomy suffers several limitations. One is ambiguity. People
might use the same word to express different meanings. Another phenomenon
is synonym. Different tags might denote the same meaning. With ambiguity
and synonym, users might easily miss valuable information while gain some
redundant information.

 Non-hierarchical structure. Folksonomy represents a flat but not hierarchical
annotation space. This property brings difficulties in browsing those systems,
moreover, makes it hard to bridge folksonomy and traditional hierarchical
ontologies.

Aimed at overcoming those shortcomings, many researches have been con-
ducted, for instance [2,3,4]. [2] introduced the concept of navigation map which
described the relationship between data elements. The author showed how to
gain semantic related images when users made queries. [3] gave a probabilistic
method to allocate tags into a set of parallel clusters, and applied these clusters
to search and discover the Del.icio.us bookmarks. Both of [2] and [3] focused
on exploring relations between tags in the uncontrolled vocabulary, but still did
not solve the non-hierarchy problem. In [4], the author proposed an algorithm
to derive synonymic and hierarchical relations between tags, and demonstrated
promising results. But the model is supervised, thus could not be effectively
extended to other contexts, and also, lacks a sound theoretical foundation.

In our paper, we propose an unsupervised model, which could automatically
derive hierarchical semantics from the flat tag space. Although search engines
which aim to derive hierarchy out of search results have already existed(e.g.
Viv simo3), to the best of our knowledge, no work has been done before on
exploring hierarchical semantics from tags. We demonstrate that the derived
hierarchical semantics well compensates folksonomys shortcomings.

In order to derive the hierarchical semantics, our model proceeds in a topdown way. Beginning with the root node containing all annotations, we apply
the splitting process to gain a series of clusters, each of which represents a specific
topic. Further apply the splitting process on each cluster, smaller clusters with
narrower semantics are gained. Its easy to observe, this recursive process helps
us obtain a hierarchal structure. A probabilistic unsupervised method named Deterministic Annealing(DA) algorithm is utilized in each splitting process. Unlike
other clustering algorithm, DA algorithm could well control the cluster number
and each clusters size with the help of a parameter T . We make use of this
feature to ensure that each nodes semantics could be identified by a few tags.

Different from previous work, our model has several important features:

3 http://vivisimo.com/

M. Zhou et al.

 Unsupervised model. Without any need of training data, it could be easily

extended to other social annotation services.

 Hierarchical model. In the derived structure, each node represents an emergent concept and each edge denotes the hierarchical relationship between
concepts.

 Self-controlled model. In our model, the number and the size of clusters are

automatically determined during the annealing process.

The hierarchical semantics derived from our model has a large number of
applications. Take two for example: 1)Semantic Web. The derived hierarchical
semantics well serves as a bridge between the traditional strict ontology and
the distributed social annotations. It would make ontology more sensitive to
users interests and demands, and reflect the current trends in the Internet;
2)Resource Browsing & Organization. The derived hierarchical semantics could
also be utilized as effective tools for resources browsing and organization. Users
could easily trace the path from the root to the node which contains information
they want.

The rest of the paper is organized as follows. Section 2 briefly reviews the
previous study of social annotation and DA algorithm. Section 3 gives a detailed
description of our algorithm. Section 4 gives the experimental results and related
evaluations. Finally we make a conclusion in Section 5.

2 Related Work

2.1 Related Work on Social Annotation

In these years, social annotation becomes a hot topic, on which many researches
have been conducted. Part of these researches focused on discussing features
of social annotations. [5,6] pointed out the advantages and limitations of social
annotation, and described the contribution it would make to World Wide Web.
[7] gave a brief review of those social annotation services available on network.
In [8], the author discovered statistical regularities behind those collaborative
tagging systems, and predicted the stable patterns through a dynamic model.
[9] improved [8]s work. The author showed the regularity behind those services
could be described by a power law distribution. Furthermore, it showed that
co-occurrence networks could be utilized to explore tags semantic meaning.

For Semantic Web, the metadata resources usually exist as a form of predefined ontology. As social annotation services popularize, researchers aim to
derive emergent semantics[10] from those systems, and utilize the derived structure to enrich the Semantic Web(e.g. [11,3,12]). [11] proposed an approach to
extend the traditional bipartite model of ontologies with the social annotations.
[3,12] are similar with our work. They respectively proposed model to derive
emergent semantics from social annotations. However, in [3], the derived structure was still flat but not hierarchical. In [12], although the author constructed
a topical hierarchy among tags, the derived structure was a simple binary tree,
which might not be applicable for some complex social annotation environments.
?

?

?
Different from their work, we propose a novel model to derive hierarchical semantics which could effectively reflect the semantic concepts and hierarchical
relationship from social annotations.

In addition to Semantic Web, some researches aimed at facilitating the social annotation application itself. In [2], the author proposed a similarity search
model that allowed users to get concept-related data elements. [4] further explored the hierarchical relation between tags. [13] changed the perspective. The
author presented a model to visualize the evolution of tags on the Flickr, thus
users could gain the hottest images in any time interval. In [14], the author
presented a model named FolkRank to exploit the structure of the folksonomy.
[15] proposed two algorithms to incorporate the information derived from social
annotations into page ranking.

2.2 Deterministic Annealing Background

The key algorithm in our model is named Deterministic Annealing (DA). It is an
algorithm motivated by physical chemistry and mainly based on the information
theory. In computer science, DA was widely utilized in the area of computer
linguistics , computer vision and machine learning (e.g.[16,17,18,19]).

3 The Proposed Method

In this section, we give a detailed description of our model. The social annotations we use as our data set come from a popular bookmark service called
Del.icio.us. It is very easy to extend our model to other common social annotation services such as Flickr, Technorati and so on.

3.1 Data Analysis

Del.icio.us is a social bookmark web service for sharing web bookmarks. Users
could not only store and manage their own bookmarks, but also access others
bookmark storage at any time[20]. It is a flexible and useful tool for users with
similar interests to share topics.

The data in Del.icio.us could be described as a set of quadruples:

(user, tag, website, time)

which means that the website is annotated by the user with the tag at the
specific time. In our model, we focus on the tag and web elements. Let us denote
the set

Stag = {t1, t2, ..., tN}, Swebsite = {w1, w2, ..., wM}

Spair = {t(i), w(i)|i  [1, L]}

where N, M, L respectively represent the number of tags, websites and pairs,
and t(i), w(i)represent that the ith pair includes the t(i)th tag and the w(i)th
website.

M. Zhou et al.

3.2 Algorithm Overview

Our model builds the hierarchical structure in a top-down way. Beginning with
the root node, the model recursively applies splitting process to each node until
termination conditions are satisfied. In each splitting process, Deterministic An-
nealing(DA) algorithm is utilized. Figure 1 gives an intuitive description of this
splitting process.

T=T0

music
lyric

mp3

home

cooking

T=a2T0 (0<a<1)

music

lyric

mp3

home

cooking

web

design

blog

game

poker

web

design

blog

game

poker

T=aT0 (0<a<1)

music

lyric

mp3

home

cooking

T=a3T0 (0<a<1)

music

lyric

mp3

home

cooking

web

design

blog

game

poker

web

design

blog

game
poker

Fig. 1. The Emergent Semantics during the Annealing Process

In Figure 1, we observe that controlled by a parameter T , DA algorithm splits
the node in a gradual way. As T is lowered from the first to the fourth subgraph,
the cluster number increases from one to four finally. This process terminates
when all clusters become Effective Cluster, or the number of Effective Clus-
ter reaches a upper bound. The term Effective Cluster refers to those clusters
whose semantics could be generalized by some specific tags. We name those tags
Leading Tag for this cluster. It should be noted that the effective clusters do
not emerge immediately. In the second sub-graph, neither of the clusters are
effective clusters, because their semantics are too wide to be generalized by any
tag. In the fourth sub-graph, all clusters are effective clusters, leading tags for
which are music, home, web and game respectively. In our model, we
design a criterion, which is given in section 3.4, to identify an effective cluster.
An overview of our model is given in Algorithm 1. In Algorithm 1, we maintain
a queue Q to store the information of nodes which are waiting for splitting. Vector
P in the queue indicates the probability that each tag emerges in this node. At
line 1, elements of P 0 are all initialized with 1, because all tags are contained in
the root node. From line 2 to 10, the algorithm recursively splits each node until
the termination condition is satisfied. We finally gain a hierarchical structure
and each nodes semantics is identified by its corresponding leading tags.

Line 4 is a key part of our model. The function fD serves as a clustering ma-
chine. Input the nodes information, and fD outputs a series of effective clusters
?

?

?
Algorithm 1. Deriving Hierarchical Semantics
1: Initialize Q. Q is a queue containing one N dimensions vector P 0 = (1, 1, ..., 1)
2: while Q is not empty do
3:
4:
5:
6:
7:
8:

Extract leading tags tci to stand for the semantics of cluster ci
if ci could be further split then

Pop P from Q. Let P = (p0, p1, ..., pN ).
{p(ci|tj)|i  [1, C], j  [1, N ]}  fD(P )
for each cluster ci, i = 1, 2, ..., C do

Let P

= (p
?

?

?
0, p
?

?

?
1, ..., p
?

?

?
N )
?

?

?
j =

p
?

?

?
pj  p(ci|tj ) tj = tci
tj = tci
?

?

?
Push P

into Q.

The remaining tags except leading tags tci form leaves for the current node.

else

9:
10:
end if
11:
end for
12:
13: end while

derived from this node. Each cluster is described by the value p(ci|tj) represents
the relativity between the jth tag and the ith cluster. As discussed before, DA
algorithm is utilized in fD. Detailed implementation of this algorithm is given
in the following section. The termination condition for DA algorithm is given in
section 3.4.

3.3 Apply Deterministic Annealing for Clustering

In this section, we introduce how to apply Deterministic Annealing(DA) algorithm to split a tag set on a node into several effective clusters. In mathematics,
DA and other similar optimizing algorithms could all be stated as a process to
minimize a predefined criterion. In our model, such criterion is given below:

D =

N

C

i=1

j=1

p(cj|ti)  d(ti, cj)

(1)

where d(ti, cj) measures the relativity between tag ti and the cluster cj. We used
KL-divergence to describe this distance.

d(ti, cj) =

p(wk|ti)  log(

M

k=1

p(wk|ti)
p(wk|cj)

)

(2)

where p(w|ti) and p(w|cj) respectively measure tag tis and cluster cjs distributions on all websites. Through measuring KL-divergence between these two
distributions, we gain the semantic distance between tag ti and the concept
that cluster cj represents. With closer semantic relation between them, d(ti, cj)

M. Zhou et al.

becomes smaller. It is easy to observe, as D is minimized, the value of p(c|t)
indicates a clustering result.

In the minimizing process of D above, general clustering algorithm might easily suffer a poor local minimum. In order to overcome this problem, DA recasts
the minimization problem by introducing an annealing process. The minimization of D is converted to the minimization of free energy F subject to a specified
level of randomness.

F = D  T H

(3)

H is a measure of level of randomness, given below

H =  N

C

p(cj|ti)  log[p(cj|ti)]

i=1

j=1

(4)

Free energy F and entropy H are two terms in the physical annealing theory.
Temperature T could control entropy H in different scales during the minimization of F . As T is lowered, H also decreases. As illustrated in Figure 1, with
low entropy H, every tag is more definitely linked to clusters, resulting in the
increment of cluster number.

Algorithm 2. Apply DA Algorithm for Clustering
1: Input: P
2: C  2, T  T0.
3: Set p(ci|tj) with random values between 0 and 1, satisfying

all j = 1, 2, ..., N.
?

?

?
i=1 p(ci|tj ) = 1, for

p(0)(ci|tj )  p(ci|tj ), k  0, calculate F (0).
repeat

k  k + 1
Calculate p(k)(ci|tj) with p(k1)(ci|tj ) according to Equation (6)
Calculate F (k) according to Equation (3)

until |F (k)  F (k1)| < 	
Let p(K)(c|t) be the final iteration result.
if all clusters are effective clusters then

return p(K)(c|t)

4: loop
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:

end if
if Critical Temperature for cluster ci is reached then

p(cC+1|tj)  p(ci|tj )/2 + , p(ci|tj )  p(ci|tj)/2  , where  indicates a
random perturbation.
C  C + 1
p(ci|tj )  p(K)(ci|tj )

else

17:
18:
19:
20:
21:
22: end loop

end if
T  T (0 <  < 1)
?

?

?
A detailed implementation of DA is given in Algorithm 2 as a supplement of
line 4 in Algorithm 1. In Algorithm 2, line 1 is the input P which contains the
information of the node waiting for splitting. Line 2 to 3 are the initialization
steps. Line 4 to 21 represent the annealing process of the algorithm. Among
them, Expectation-Maximum(EM) algorithm is utilized to minimize the free
energy F in line 5 to 11. The termination condition for this algorithm is given
in line 12 to 14. From line 15 to 20, we determine when the cluster number
should be increased. In line 19, temperature T is lowered preparing for next
annealing process. In the following section, we would further discuss the detail
about minimizing F and determining the increment of the cluster number.

EM Algorithm for Minimizing F. We utilize EM algorithm to iteratively
minimize F . Firstly, the equation (3) is recast as

N

C

p(cj|ti)  (

M

p(wl|ti)  log(

F =

i=1

j=1

l=1

p(wl|ti)
p(wl|cj)

) + T  log(p(cj|ti)))

(5)

Through EM algorithm, p(c|t) could be estimated by iteratively minimizing
the free energy F . Beginning with the initial value for p(0)(ci|tj), we give the
p(k)(ci|tj) in the kth iteration.

p(k)(ci|tj) =
?

?

?
where

l=1

exp( d(k)(tj ,ci)

)  p(k)(ci)

exp( d(k)(tj ,cl)

)  p(k)(cl)

p(k)(ci) =

N

j=1

p(k1)(ci|tj)  p(tj)  pj

p(k)(wl|ci) =
?

?

?
j=1

p(k1)(ci|tj)  p(tj)  pj  p(wl|tj)

p(k)(ci)

d(k)(tj, ci) =

p(wl|tj)  log(

M

l=1

p(wl|tj)
p(k)(wl|ci)

)

(6)

(7)

(8)

(9)

where, p(c) denotes the probability that the cluster is assigned. p(t) denotes the
probability that the tag occurs in the data set. pi denotes the probability that
the ith tag occurs in the current sub-node. p(w|t) denotes the relativity between
the website and the tag. Among them, p(w|t) and p(t) are invariants which
could be computed directly from the data set, while p(c) , p(w|c), and d(t, c)
are variant, which are converging during the whole iteration process. Given P
and T , F finally converges to a minimum after a series of iterations. For further
details about the derivation of the formulas, refer to [19].

M. Zhou et al.

Critical Temperature Determination. From line 15 to 20 in Algorithm 2,
we introduce a new concept Critical Temperature. In the DA algorithm theory,
once the temperature reaches certain clusters critical temperature, those clusters
should be split, so that the Free Energy could be further minimized. This process
is named Phase Transition. The increment of cluster number in DA algorithm
is achieved by a series of phase transitions. It has been theoretically proved that
this critical temperature could be calculated, but the computation is too com-
plex. [19] introduced a simple alternative to estimate critical temperature. In this
method, an extra copy is kept for each cluster. Only when the critical temperature is reached for a cluster, its copy would split away, otherwise, the copy would
merge again after the iteration. We utilize this method in our model. Once phase
transition for certain clusters is detected, we add a new cluster in line 16.

3.4 Effective Cluster Identification

As discussed in the previous section, DA algorithm in our model terminates only
when all clusters become effective clusters, or the number of effective clusters
reaches an upper bound. In this section, we give a criterion to identify whether
a cluster is effective.

The main difference of the effective cluster from other common ones is that, as
an effective cluster, its semantics could be generalized by some specific tags, which
we name Leading Tag. To measure a tags capability to summarize the whole
clusters semantics, we define Cov(ti, cj) to measure a tags coverage as below.

N

k=1

p(tk|cj)bi,k

Cov(ti, cj) =

(10)
where, bi,k  {0, 1} indicates whether there exists a website annotated by both
tags ti and tk. p(t|c) could be easily gained by applying Bayesian Theorem on
p(c|t). The high value of Cov(ti, cj) indicates that tag ti has covered lots of other
tags in cluster cj, so ti is more capable to summarize cluster cjs semantics. Using
Cov(ti, cj), E(cj) measuring whether cj is an effective cluster is defined.

E(cj) = max
i[1,N]

Cov(ti, cj)

(11)

The qualification for a cluster to be an effective one is measured by the leading tag
with highest Cov(ti, cj) in it. If multiple leading tags are allowed, E(cj) could also
be measured by several largest ones. During the annealing process, E(cj) increases
as the size of clusters is reduced. Once E(cj) reaches a high value, it indicates that
the leading tag tcj has emerged, so we accept this cluster as an effective cluster.

4 Experiment

4.1 Experiment Setup

Our experiment is mainly conducted on two samples of Data: Del.icio.us and Flickr.
We filter those tags and urls which emerge less than 20 times in the data set. The
statistics for both of the raw and the filtered data is present in Table 1.
?

?

?
Table 1. Statistics of Data Sets

Raw Data

Filtered Data

Source

tag

url

pair

Del.icio.us 192143 784617 3357809
204717

32465 23713

Flickr

tag
?

?

?
url
?

?

?
pair

Crawled Time

479035

April 2006
April 2007

4.2 Experiment on Del.icio.us

Derived Hierarchical Structure. We apply our model on the Del.icio.us data
set described above. Figure 2 shows part of the derived hierarchical result.

subtitle

cinema

film-maker

instrument

record

phonetic

onlineshop

supply

houseware

radio

sound

fashion

store

accessory

audio

craft

clothes

jewelry

music

shop

movie
review

film
movie

video

game

Top

Linux

open-source

web
tool
science
education

videogame

poker

security

application

recovery

math

philosophy

travel

hotel

transport

timetable
railway

subway

Fig. 2. Hierarchical Semantics Derived from Del.icio.us

In Table 2, we randomly choose some nodes from each hierarchy, and display
their locations and child-clusters. Each node (tag1, tag2,...) in Table 2 denotes
a cluster with several leading tags. In Figure 2 and Table 2, we observe that the
derived hierarchical semantics is well matched with peoples common knowledge.
Because our model is based on statistics about human behaviors, it is hard
to restrict the derived relationship to a specific type. In further experiment, we
discover that the hierarchical relationship mainly includes three types. Suppose
B is the child node of A

1. B is the sub-type of A(e.g. RPG and videogame are both game).
2. B is the related aspect of A(e.g.hotel and transportation to travel).
3. B is parallel to A(e.g. the sub-node of DVD is WMA, DV).

In Figure 3, we present a statistics of each types portion between different
hierarchies. Its observed that type 1 and 2 mainly exist in the higher level
of the tree, and type 3 exists in the lower level. Although type 3 deviates our
original purpose, we should not expect our model to derive a precise ontology like
Wordnet containing only type 1 and 2. When the semantics of a node becomes

M. Zhou et al.

Table 2. Clusters in Different Hierarchies

Leading Tag Ancestor Node
food, health Top
Top

politics

language

jewelery

webdesign,
webdevise

cryptography,

encrypt

Top (web,
tool)
Top (shop)
Top (web,
tool)  (pro-
gram, develop)
Top (music)
 (video)
Top (web,
tool)  (Linux,
opensource)
(security)

Child Node

(fit), (sport), (eat, bread, coffee), (cook, recipe), (beer)
(government), (law, right), (active), (censorship), (con-
spiracy, 911), (Israel, Iran, Syria), (military, war),
(Africa), (habitat, human)
(write), (English, linguist, word), (translate), (encyclo-
pedia), (Chinese, Mandarin)
(Chicago, glass), (ear, bracelet, bridal, necklace, ring),
(handmade), (unusual), (stainless, diamond)
(html, xhtml, standard), (ajax, xml), (tutorial, code,
opensource), (sql, mysql), (framework, python), (menu,
navigate), (color, palette), (encode, unicode, UTF8)
(WMA, MP4, quicktime), (DV, camcorder, miniDV),
(codec, Divx, mpeg, avi)
(PKI), (computers and internet), (GPG, GNUPG),
(MD5), (OpenSSL)
?

?

?
Fig. 3. Statistics for Each Type of Relation between Different Hierarchy Levels

narrower in lower level, it is a hard task to select leading tags to summarize the
semantics of the node by human, let alone by computer.
Distribution of Tags on Different Nodes. The distribution of tags on different nodes is also studied. In Table 3, we randomly select some tags and give their
linked clusters with largest probabilities. For those well-known polysemantic
words (e.g. wine, apple), their diverse meanings could be observed through
different paths. For other common words, different nodes could represent their
distinct related aspects. For instance, the word honeymoon is related not only
to travel and holiday, but also to gift. This feature of our model well solves
the ambiguity problem. In the derived hierarchical structure, a lot of tags has
more than one related node, but at most five. It is because when temperature is
lowered in the iterative steps, tags would easily converge to one or two clusters,
but not scatter equally on several ones.
?

?

?
Table 3. Distribution of Tags on Different Nodes

Tags

Distribution on Different Nodes
agriculture 1. (environment)  (sustain, green) (agriculture)

wine

price

2. (food)  (garden)  (agriculture, farm)
1. (web, tool)  (Linux, opensource)  (freeware)(Wine)
2. (food)  (coffee, eat, tea)(wine)
1. (money, finance)  (bill)  (price)
2. (shop)  (deal, buy) (price)
1. (shop)  (deal, buy)  (gasoline)
2. (travel)  (transport)  (automobile)  (gasoline)
2. (gift) (jewelry)  (bridal, wed)  (honeymoon)
1. (web, tool)  (Linux, open-source)  (Apple, Mac)
2. (food)  (coffee, eat, tea)  (apple)

gasoline
honeymoon 1. (travel)  (hotel)  (holiday)  (honeymoon)

apple

4.3 Experiment on Flickr

We also apply our model on a sample of Flickr data set to demonstrate our
models wide applicability. With effective self-controlled capability, our model
well captures different features of social annotation environment in Flickr. Figure
4 gives part of the result.

bug

butterfly

bee

sakura

tokyo

cabaret

Flora,
blossom

bird

insect

rock

wedding

sale

Japan

flower

music

Top

Architecture

landscape

travel

abandoned

design

building

Clouds
sea 

tree

snow

sun

faces

window

tile

clear

valley

mountain

Fig. 4. Hierarchical Semantics Derived from Flickr

Form Figure 4, we discover that the derived relation is reasonable according
to peoples knowledge. Compared with the structure derived from Del.icio.us,
the number of derived hierarchical relations is much less. Most of the nodes concentrate on the first and second hierarchies with parallel relations. It is mainly
because Flickr is a Narrow Folksonomy[21] compared with the Broad Folk-
sonomy Del.icio.us. In the Narrow Folksonomy, most of the tags are singular

M. Zhou et al.

and directly linked to the object. This property largely limits the hidden semantics in social annotations. However, our model still captures the hidden topics
behind Flickr and presents a satisfying hierarchical result.

5 Conclusion and Future Work

Social annotation has become more and more popular because of its strengths.
But at the same time, it also has its own shortcomings, for instance, 1)ambiguity
and synonymous phenomena 2)non-hierarchical structure. In order to overcome
these shortcomings, we build an unsupervised model to derive hierarchical semantics from social annotations. The main contributions can be concluded as
follows:

1. The proposal to study the problem of deriving hierarchical semantics from

social annotations.

2. The proposal of an unsupervised model for automatic semantic clustering,

and hierarchical relationship identification.

3. The evaluation of the proposed model on both Del.icio.us and Flickr. The

preliminary experimental result demonstrates the models effectiveness.

In our current work, the evaluation of our model is mainly based on peoples
intuition and common sense. We would do more detailed evaluation by comparing
this hierarchical semantics with other web taxonomy, like ODP. Moreover, we
would emphasize on applying our results in real applications to measure our
models efficiency.

Acknowledgement

The authors would like to thank Xiao Ling, Xiaojun Zhang, Rui Li, Bai Xiao
and Hao Zheng for their valuable suggestions. The authors also appreciate the
four anonymous reviewers for their elaborate and helpful comments.
