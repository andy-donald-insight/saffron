Describing Ontology Applications

Thomas Albertsen and Eva Blomqvist

J onk oping University, J onk oping, Sweden

{alth|blev}@ing.hj.se

Abstract. Semantic Web technologies are finally, after a few years of
infancy, truly entering the business world to support the growing needs of
computer aided information selection and processing. There are already
quite well-defined development processes and methods in the software
engineering field to handle the construction of large scale and complex
enterprise systems, and to reuse knowledge in different software domains
patterns are considered to be common practise. Patterns can be described
on different levels of abstraction, but the patterns in the focus of this
paper are on the software architecture level. In this paper we present a
definition of the notion ontology application pattern, as a special form
of software architecture patterns describing an ontology-based system.
We also show how such patterns, as well as the description of the pattern
instantiations, can be described using a modified architecture description
language.

1 Introduction

In recent years the area of semantic applications has grown from small web ap-
plications, to large scale enterprise systems showing real benefits in the business
applications domain. Technologies intended for the web are now also applied on
company intranets and in enterprise information systems etc. As the technology development increases system capabilities, the systems keep getting larger
and more complex. Semantic applications are comparable to any other software
systems in terms of size and complexity, and thereby require the same rigorous
development process as any other system.

Complexity of a system to be built can be managed through established development processes and knowledge reuse (through for example patterns), this
is common practise in software development. When constructing semantic applications ontologies are usually used as the core knowledge component of the
system. This paper addresses the issue of specifically incorporating ontologies
in the architecture design of a software system through a specialisation of software architecture patterns, and extending an architecture description language
to better suit software architectures including ontologies.

The following section presents motivation and background of our approach,
including related work on patterns and architecture description languages. In
section 3 the term ontology application pattern is defined and described in more

E. Franconi, M. Kifer, and W. May (Eds.): ESWC 2007, LNCS 4519, pp. 549563, 2007.
c Springer-Verlag Berlin Heidelberg 2007

T. Albertsen and E. Blomqvist

detail. A way of describing the specific kinds of software architectures are discussed in section 4. Finally, the paper is concluded with a discussion and some
future work possibilities.

2 Background

This section describes the general background, including definitions, and some
previous work on patterns.

2.1 Ontologies and Patterns

Ontology is a popular term today, used in many areas and defined in many different ways. In our research we adopt the definition from [1], stating that an
ontology is a formal explicit specification of a shared conceptualisation. In our
view this means that an ontology is a hierarchically structured set of concepts
describing a specific domain of knowledge, that can be used to create a knowledge base. An ontology contains concepts, a subsumption hierarchy, arbitrary
relations between concepts, and possibly other axioms.

Even using this definition, ontologies can be used for many different purposes
and applications, and they can be constructed and structured in many different ways. Our research focuses mainly on the abstraction level of domain and
application ontologies (as defined in [2]) within enterprises, so called enterprise
application ontologies, to be used in enterprise applications. When considering
the complexity of the ontologies, our research is mainly focused on terminological
ontologies, to structure and retrieve information.

In a previous paper [3] we have attempted to describe and classify different
kinds of patterns concerning ontologies. In general, patterns are here used in
the sense of a generalised solution to a recurring problem that can be reused
(instantiated and adapted) in the specific engineering task at hand. In [3] the
patterns concerning ontology engineering are divided into five intuitive levels
of abstraction. The four lowest levels deal with the internal structure of the
ontologies, so called ontology patterns, while the fifth level deals with complete
ontologies used within a system, thereby making the connection to software
engineering and software architectures. This level of abstraction is in [3] denoted
ontology application patterns and will be the focus of the rest of this paper.

2.2 Ontology Applications

There are a lot of applications that use ontologies today. In [4] a description of
four classical ontology application scenarios is made: Neutral authoring, common
access to information, ontology as specification and semantic search. Another description of ontology-based applications, more focused on the business domain, is
the classification in [5]. Four slightly different scenarios are described: Knowledge
management, information retrieval, portals and web communities and finally
e-commerce.
?

?

?
The trend is now to move away from traditional heavily knowledge based
systems, using a single ontology, to more open semantic applications (as for example stated in [6]) exploiting and handling the huge size of the web or company
intranets and the diversity of both ontologies and information sources. As stated
already in the introduction of this paper, these kinds of semantic applications are
entering also the business area, through for example intranets, company portals
and e-commerce. As technologies develop, more advanced applications become
possible, which also increases the complexity and size of the software systems
that use the ontologies.

To describe a whole ontology and its use in an application there is a need to
describe the characteristics of the ontology. A formulation of such characteristics has been described in connection with the Ontology Definition Metamodel
presented by the Object Management Group (OMG) in [7], the dimensions described there are:

 Level of Authoritativeness: This is a measure of how authoritative the ontology is of the area it describes. If the author of the ontology is the organisation
that is responsible for specifying the conceptualisation then this is clearly a
highly authoritative ontology.

 Source of Structure: Either the ontology is developed separately from the
application that will use it or else the structure comes directly from the
intended application.

 Degree of Formality: Degree of formality refers to the level of formality of the
specification of the conceptualisation. This could range from highly informal
ontologies, via semantic networks, to highly formal ontologies that include
complex logical axioms.

 Model Dynamics: This concerns the rate of change in the ontology, from the
extreme where the ontology is stable and rarely or ever changes, to very
volatile ontologies that change continuously.

 Instance Dynamics: This dimension is closely related to Model Dynamics

but concerns the instances of the ontology.

 Control and Degree of Manageability: This dimension considers who decides
when and how to change an ontology. One extreme is that the author of the
ontology has the sole decision on changes, and the other extreme is of course
that the ontology changes are based on decisions of outside parties.

 Application Changeability: The applications that use the ontology might be
on one hand developed once and for all, and not frequently changed, and on
the other hand they might be changing dynamically during run time.

 Coupling: This dimension describes how closely coupled applications com-

mitted to shared ontologies are.

To further describe the ontology and what content it should have, competency
questions could be used. Competency questions, as described in [8], are used to
exactly define what information the ontology should provide, in terms of constraints on its content. A competency question can be expressed as a constraint,
but it also contains information on the content of the ontology. Competency

T. Albertsen and E. Blomqvist

questions can be expressed in formal logic or more informally, as requirements
on the ontology. In this paper we mainly consider informally expressed competency questions.

Other requirements that should be specified according to most common on-

tology development methodologies, as described in [9], concern:
 Purpose and Goal: The intended use of the ontology.
 Scope: Describing major subject areas that need to be covered in the ontol-

ogy, and possible boundaries to what is not to be included.

 Level of Detail: Specifying the lowest level of detail considered important

(the instance level).

 Representation Suggestions: Suggestions of naming conventions, representa-

tion language appropriateness etc.
Often a system could exploit not only one ontology but several, perhaps even
exchangeable during runtime. Then these ontologies might need a connection,
in order to for example translate information expressed in one ontology to the
other. This process of translation requires an ontology alignment to be present,
which can be obtained through an ontology matching process as defined in [10].

2.3 Software Architectures and Patterns

A description of a software architecture is the description of the high level structure of a software system. In [11] the term software architecture is defined as
the description of elements from which systems are built, interactions among
those elements, patterns that guide their composition and constraints on these
patterns. [...] a particular system is defined in terms of a collection of components
and interactions among those components.

This definition describes the overall design of the system that includes global
control structure, communication protocols, data access, and the systems major
components and the behaviour of the components. The essential idea of architecture is abstraction, to hide some of the details of the system in order to make
it easier to understand the properties of the system, and to connect the functionality in the requirements to elements of the high level design. If the system
is complex there can be several levels of abstraction, and the elements on each
level can be decomposed into new architectures.

The elements of an architecture can as noted above be divided into com-
ponents, connectors and their configuration. Both components and connectors
provide interfaces that act as connection points to that entity. Sometimes also
the data that is exchanged between components is included in the architectural
view (see for example [12]). The component is classically an abstract unit of
software instructions and internal state that provides a transformation of data.
This can be transformations as computation or as simply loading data to memory from secondary storage. The connectors are an abstract mechanism that
facilitates communication between the components. A connector may have a
subsystem inside it, in order to make this communication possible. Data is the
information that is transferred between the components through the connectors
of the architecture.
?

?

?
An architecture style describes a generalised architectural organisation of software systems, which means that it describes how components and connectors can
be configured into a certain kind of software system with certain properties. In
[11] the notion of architecture style is defined as follows: ... an architectural
style defines a vocabulary of components and connector types, and a set of constraints on how they can be combined. It is also stated that many styles might
in addition include a semantic model that defines how to determine the systems
overall properties from its parts.

Examples of common architecture styles are Pipes and Filters where the
components are filters while the connectors are the pipes. Another architecture
style is the Object Oriented style. The components encapsulate the data and
the operations, as connectors, make it possible for the components, the objects,
to communicate. The connectors are usually procedure calls. If an architecture
style is more formally described it constitutes and architecture pattern, such as
the patterns in [13] and [14].

2.4 Architecture Description Languages

In order to support the description and communication of software architectures the use of architecture description languages (ADLs) have been proposed.
An ADL is usually described as a language designed for describing high level
architectural notions, including components, connectors, and their interfaces,
and that treats connectors as first-class entities. ADLs were originally developed
when existing formal languages and programming languages were found to be
insufficient or inappropriate to describe a software architecture (see discussion
in [11]).

For software ADLs the components in the language are software processes
or modules and the ADL is used to define and model the software architecture.
There are numerous ADLs existing today, examples are Rapide, UniCon, Darwin
and xADL. In order to transfer an architecture description from one ADL to
another the ADL ACME has been constructed to facilitate mapping from one
ADL to another. For a survey and comparison of ADLs see [15].

xADL (see [16]) has been developed by the University of California Irvine
and is defined as a set of XML schemas. The language has a core model with
four elements: Components, connectors, interfaces and configurations. These are
mainly the same elements as discussed in section 2.3. The language has a modular
design that makes it easy to extend with new structures.

3 Ontology Application Patterns

In this section we attempt to define the notion of ontology application pat-
terns, as an extension of software architecture patterns. As software architecture
patterns are usually described using a special template, one such template is
described and detailed to better fit ontology applications.

T. Albertsen and E. Blomqvist

3.1 Definition

Ontology application patterns are very much related to software architecture
patterns, although ontology application patterns include ontologies as compo-
nents. Our definition of ontology application patterns therefore build on the
definition of software architecture patterns stated in section 2.3.

We define an ontology application pattern as a software architecture pattern
describing a software system that utilises ontologies to create some of its func-
tionality. The pattern also describes properties of the ontology or ontologies in
the system, and the connection between the ontology, other ontologies and the
rest of the system.

3.2 Specific Characteristics

The difference between software architecture patterns and ontology application
patterns is that there always exist ontology components in the latter and that
the pattern should give insight in what capabilities these ontology components
should have. First we consider the topology of the complete architecture, to
address the nature of ontology components. How are the ontology components
used in the complete system? There can be several ways to view this, on several levels of abstraction. If the abstraction of the system is high, the ontology
component might include a lot of intelligence such as an inference engine and
additional software functionality. If on the other hand the abstraction level is
low, the component might represent only the ontology, as a data source. These
two views imply different interfaces and connectors of the ontology component,
but both views might be used for describing patterns as well as for describing a
specific software architecture.

To give a simple example, we use a scenario from a research project at
J onk oping University called MediaILOG. The project aims at introducing semantic technologies to address information processing problems within companies of the media industry. Specifically a local newspaper of the J onk oping region
is used as an application case of the project. One part of a proposed framework
in the context of this project is the possibility to rank incoming documents
(whether they are e-mails, articles from a news agency or update reports from a
website) with respect to the companys interests (as represented in their enterprise ontology) and the individual interests or job descriptions of the employees
of the company (also described in the enterprise ontology). This process should
be supported by a software system for evaluating and ranking incoming docu-
ments. A simplified version of such an architecture can be depicted as in figure
1, where part A illustrates the architecture on a high level of abstraction, the
enterprise ontology is an internal part of the profile matching component, and
part B illustrates the case when the ontology is viewed as a component in itself.
In both views described above the internal structure and content of the ontology itself needs to be considered. This leads to the question, what characteristics should be described concerning an ontology in an architecture or even an
ontology application pattern? In section 2.2 a set of ontology characteristics are
given, along with the requirements usually used when constructing ontologies
?

?

?
Fig. 1. Examples of architecture alternatives

(like scope, level of detail and a set of competency questions). Together this can
be viewed as a description characterising the ontology as well as requirements
for its construction. In the example architecture such information would include
the scope of the enterprise ontology, the required level of detail and a set of
competency questions describing the ontology capabilities.

There can be competency questions on several levels; general abstract questions stated for a pattern, and more specific ones developed when implementing
the pattern. An ontology pattern used for ontology construction might describe
the content and internal structure of a part of the ontology in general terms,
like the ontology design patterns of [17], and could be used as a way to describe
the content requirements of an ontology. If for example the ontology application
pattern would suggest the use of a structure similar to the DOLCE roles and
tasks pattern in [17] (describing how objects and events in a certain situation are
described by roles and tasks) it could also include suggestions for competency
questions, representing an abstract interface to the ontology. An example is to
be able to ask the ontology what role has a certain object that participates
in this specific event. When the pattern is instantiated such a question can
be specified into what role has this person participating in this meeting. An
ontology application pattern might suggest ontology patterns for realising the
ontology component and competency questions for realising its interface.

In the example of figure 1 such description of the ontology interface (of alternative B) could include competency questions like i) what are the related
topics of a topic t or ii) what are the interests of employee e. This should
be part of the component description of an ontology component in a software
architecture and thereby also, in more general terms, might be addressed in

T. Albertsen and E. Blomqvist

an ontology application pattern. Such a more general version of the competency
question ii could for example be what are the concepts considered relevant from
the perspective of instance i. In addition, if the more general view (alternative
A) is adopted, including software structures in the ontology component, also the
functionality of the surrounding software and its interface should be described.
Another issue when considering interfaces to ontology components are the
possible and intended connections. The above discussed example component
interfaces support mainly the connection of an ontology component to a pure
software component. Another possibility is to connect an ontology component
directly to another ontology component. Then the interface might constitute
either only the competency questions (for dynamic connections) or the complete
internal structure of the ontology (for more static approaches). Interfaces can
be described both as general types, for ontology application patterns, and as
specific instances of those types for the instantiation of the patterns.

When connecting two ontology components directly the connector between
these probably contains an ontology alignment (see section 2.2). The interface
of the ontology components are in the case of a static alignment the complete
ontology, since the alignment can operate on any internal part of the ontologies.
In the case of a dynamically constructed alignment the interface is a set of competency questions and the connector a set of queries to construct the alignment.
On a pattern level this can be described as an abstract alignment, an alignment
between components, but on the level of the specific pattern instantiation the
nature of the alignment might be further specified.

An example of this situation could also be illustrated through a simplified part
of the framework envisioned in the MediaILOG project previously mentioned.
When collecting relevant information from news agency services the enterprise
ontology of the newspaper can be aligned to ontologies describing the structure
and general content of the information provided by different news agencies, as
illustrated in figure 2. In this way when the newspaper wants to retrieve information from a news agency a wrapper interpreting the alignment between the
enterprise ontology and the news agency ontology is used, to translate the information need of the newspaper into a query to be sent to an appropriate news
agency. In this simplified example, there exists a static connection between the
enterprise ontology and several news agency ontologies. Each ontology acts as a
component of this architecture and the alignments act as the connector component between ontology components. But in practise it may also be used by the
wrapper components, as illustrated in figure 2, which gives the wrappers access
to the aligned ontologies.

3.3 Pattern Template

In order to make it easier to create ontology application patterns a template, corresponding to the commonly used template in [18] is detailed to better fit ontology
application patterns. The suggested template in [18] has the following headings:
 Name of pattern
 Aliases: Aliases, if there are any.
?

?

?
Fig. 2. Example of an architecture involving static alignments

 Problem: Gives a short description of the problem. This could be a statement

or a question.

 Context: The context in which the pattern is valid.
 Forces: Lists and describes each relevant force. A force is a factor or attribute
relevant to the problem, the solution is the result of the tension between
the forces. Examples of forces can be factors such as efficiency or robustness.
Forces can be conflicting and the solution should balance the tension between
the forces present in the problem.

 Solution: Gives a statement of the solution to the problem, can include dia-

grams.

 Resulting Context: Describes the context after the solution is applied.
 Rationale: Explains the logic behind the solution. The user will understand

why this solution is a good solution.

 Known Uses: Gives examples on where the pattern have been used.
 Related Patterns: Lists any related patterns.
 Sketch: A sketch to describe the pattern and a description of the sketch, if

 Author(s): Names of the authors.
 Date: Date created.
 Contact Details: Authors emails
 Pattern Source: The source of the pattern, for example the affiliation of the

 References: A list of references cited in the pattern.
 Keywords: A string of comma delimited terms used for searching.
 Example: Referenced in the pattern. This could be pseudo code, skeleton for

needed.

authors.

classes etc.

To further detail this template for ontology application patterns, information
about the ontology components need to be specified in the template sections. In
the following list subheadings illustrate where new information should be added:

 Context

 Application Context

T. Albertsen and E. Blomqvist

 Forces

 Knowledge Context: Describing the context, especially regarding level of
authoritativeness, model and instance dynamics, application changeability and coupling, for the pattern to be applicable.

 General Forces
 Ontology Forces: Describing forces related to the use of ontologies and

the requirements set by the pattern on the ontology.

 Solution

 Software Solution
 Ontology Solution: Describing the intention and general requirements
set on the ontology by the pattern, like purpose, scope, source of struc-
ture, level of detail, degree of formality, representation suggestions (and
reasoning capabilities) and a set of general competency questions.

 Resulting Context

 Application Context
 Knowledge Context: Describing the model and instance dynamics, ap-

plication changeability and control, and degree of manageability.

 Example: The examples might include parts of ontologies and references to

reusable ontologies.

4 Architecture Description

When using the above described template much of the information regarding an
ontology application pattern can be captured, but only in the ambiguous manner of arbitrary textual descriptions, simple illustrations and examples. To more
formally describe a pattern, or a pattern instance implementation, a structured
language (such as an ADL) is needed. Existing ADLs focus on software components and the interactions between them. We feel there is a need for focusing
more on knowledge components to be able to define an ontology application pattern or an application architecture containing ontologies properly. Many of the
existing ADLs are possible to use for describing ontology components, but to
capture the above noted characteristics of ontology components and connectors
the languages have to be extended.

4.1 Suggested ADL

Architecture description languages usually contain the elements components and
connectors. If ontologies are treated as another component there are several
issues to be considered, as described in section 3. If the component description
in an ADL were to be extended by the characteristics of the ontology this could
be a way to show what the ontologies must be able to do within the component
and the complete system.

As described in section 2.4 there are several ADLs available. In order extend
an ADL to accommodate the use of ontologies an ADL with the property of
being easily extendible were chosen, namely xADL 2.0. xADL has a modular
?

?

?
organisation, where new modules can be added to include more specific expressions in the language. This is a good way to create a description of a system
using ontologies i.e. creating an ADL for ontology applications.

Ontologies can be seen as components in the system with some sort of information inside and given interfaces. Other components within the system should
be able to access and manipulate the ontology. With this in mind, a component
with the additional properties of an ontology should be added to the language.
The characteristics mentioned in 2.2 are used as additional properties of the ontology component and thereby a new element called ontology is created in xADL.
The ontology element has a description element called the Ontology Description,
which has all the ontology characteristics as attributes. This is illustrated in
figure 3 through a graph based notation provided by xADL 2.0.

The interfaces are the connection points to the ontology component and
should describe what services the ontology can provide to the other components
through some connector. In section 3.2 examples of such services are given, and
those are examples of what can be considered ontology interfaces. Mainly there
are two kinds of interfaces; interfaces directly to another ontology component
and software interfaces (possibly constrained by some competency questions).
The interface between ontologies also has two variants, either constituting the
complete ontology or just the set of competency questions. These variants are
added as specialised interface description attributes as illustrated in figure 4.

Fig. 3. Ontology component

T. Albertsen and E. Blomqvist

Fig. 4. Ontology interface

The last of the added elements is the connector, that will make communication to and from the ontology components possible. Connectors can also be of
several kinds, but if the ontology is connected to a software component there is
no major difference to an ordinary software connector, only the possible addition of constraints (competency questions). If the ontology is on the other hand
connected to another ontology component directly, the connector might be a
set of queries or a set of competency questions, or both. These are added as a
specialised attribute in the ontology connector as illustrated in figure 5.

4.2 Architecture Example

When considering the simplified project scenarios discussed earlier in section 3.2,
the first architecture (version B of figure 1) could for example be described using
the suggested additions to xADL. Due to space limitation we can here only give
a brief idea of what this description could contain (using the added attributes
of ontology components, connectors and interfaces).

The ontology component is in this example architecture considered as a data
store with no software functionality of its own. The description of this enterprise ontology using the component template depicted in figure 3 should include
information of all the attributes of an ontology component. Level of authoritativeness would in this case describe the level of authoritativeness required from
the ontology to support accurate ranking of incoming documents. The level of
authoritativeness should be high in order for the rankings to be useful, so the
ontology needs to be tailored to the media company at hand. Source of structure
would include information of the sources for ontology construction, in the case
?

?

?
Fig. 5. Ontology connector

of a local newspaper this might be the paper sections and the actual work division structure between departments and individual employees. The structure
of the ontology needs to be tailored to the task it should perform. The degree
of formality states if informal definitions are acceptable or if each concept needs
a formal logical definition. In this application case a semantic net representation of the ontology is sufficient. Model dynamics describes how dynamic the
enterprise ontology will be, in this case a traditional newspaper with fixed topics
probably has a quite static enterprise ontology. On the other hand, the level of
detail needs to be high, which gives a higher level of instance dynamics. This
kind of reasoning can be performed for each of the attributes of the ontology
component, based on the application case requirements.

As an interface description the competency questions of the ontology should
be one part, in addition the representation language of the ontology needs to
be specified. For the example case the following two competency questions were
suggested in a previous section: what are the related topics of a topic t and
what are the interests of employee e. The ontology representation is needed
to support the implementation of the connector interface. Finally, the connector
between the ontology component interface and the software component (in the
example denoted profile matching) needs to be specified. This will be the
reasoning software used to query the ontology, for example using some ontology
query language, allowing queries corresponding to the competency questions of
the interface. This reasoner will then connect to the software interface of the
profile matching component, thereby letting that component use the services
corresponding to the competency of the ontology.

So far we have not generalised these example architectures into patterns, but
we envision that several architecture patterns can be created in each application
field (as discussed in section 2.2) simply by looking at existing systems. The
extended version of xADL presented above can equally well be used to describe

T. Albertsen and E. Blomqvist

those patterns. All attributes may not apply for every pattern, but generally the
attributes are still valid. The modified pattern template suggested in section 3.3
can be viewed as the natural language correspondence to the added component
templates in xADL.

5 Conclusions and Future Work

In this paper we have defined the notion of ontology application patterns, as
a specialisation of software architecture patterns. Then we have continued to
study the characteristics that differentiate these patterns from ordinary software
architecture patterns. Mainly we can see that engineering ontology applications
may benefit from descriptions and patterns more focused on ontologies and their
use in the system. Therefore we propose a more detailed template to guide the
future description and documentation of ontology application patterns. A next
step will be to construct a catalogue of ontology application patterns according
to our definition and defined using the extended template.

Both pattern descriptions and architecture descriptions in themselves can also
benefit from being described in a more formal manner. Therefore we have extended the general architecture description language xADL 2.0 with specific
ontology component templates, together with specialised connectors and inter-
faces. Future work will involve to evaluate the extended ADL through applying it
in a set of cases and determine the completeness of the attributes. It will also be
used to describe future system architectures of ontology applications developed
by our research group, in projects like MediaILOG.

Acknowledgements

Examples used in this paper were provided by the MediaILOG research project
at J onk oping University, financed by the Swedish Hamrin Foundation. Also
special thanks to the three anonymous reviewers for their valuable comments
on how to improve this paper.
