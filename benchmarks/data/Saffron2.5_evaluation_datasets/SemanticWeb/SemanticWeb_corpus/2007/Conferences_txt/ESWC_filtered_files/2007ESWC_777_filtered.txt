An Annotation Tool for Semantic Documents

(System Description)

Henrik Eriksson

Dept. of Computer and Information Science

Link oping University

SE-581 83 Link oping, Sweden

her@ida.liu.se

Abstract. Document annotation is a common technique for relating
text and knowledge representation. Although the semantic web emphasizes the annotation of web pages, there are other types of documents
that can benefit from ontology-based annotations. PDF documents combined with OWL ontologies form semantic documents that support professional printing, on-line viewing, and ontological models. PDFTab is
an extension to the Prot eg e ontology editor that allows developers to
annotate PDF documents with OWL-based ontologies. It is possible to
add OWL ontologies to preexisting PDF documents and to relate document parts to concepts in the ontology. PDFTab integrates Adobe Acrobat with Prot eg e and allows users to switch seamlessly between the
document and ontology views. PDFTab illustrates how it is possible to
extend semantic-web techniques to the widely-used PDF format while
maintaining strong support for ontology development and editing.

1 Introduction

The semantic web is a well-known approach to adding metadata in terms of ontologies to documents and to facilitating machine-to-machine communication [1].
Although the semantic-web languages and tools are inspired by the web and its
underlying formats, such as HTML and XML, there are other possible application frameworks for the semantic-web approach. For example, there is a growing
interest in multimedia annotation [2]. Furthermore, there are many types of textual documents that require formats other than HTML. For example, Adobes
Portable Document Format (PDF) is a widely-used electronic-document format,
which supports on-line viewing and both desktop and professional printing [3].
The prospect of adding semantic annotations to these document formats is
interesting because it makes it possible to extend the scope of the semantic web
to include this type of electronic documents to form semantic documents. We
have previously explored the benefits of semantic documents based on annotated
PDF documents and their potential applications [4, 5]. One conclusion from this
work is that, while semantic documents integrate well with regular electronic
documents and allow viewing and printing using standard tools, they require
new solutions for document annotation.

E. Franconi, M. Kifer, and W. May (Eds.): ESWC 2007, LNCS 4519, pp. 759768, 2007.
c Springer-Verlag Berlin Heidelberg 2007

H. Eriksson

Semantic document

Text annotations

Embedded ontologybased annotation

Fig. 1. Semantic documents. The ontology annotations are included in the internal
document format.

Adequate tool support is a prerequisite for document annotation. Document
formats such as PDF are difficult to create and modify manually (e.g., using a
text editor). Thus, we need tools that can both read and write the document
format and that can support markup in this format, for instance by selecting
document parts and relating them to the ontology. Our approach is to extend
the ontology editor Prot eg e [6] with a plug-in that supports seamless ontology
development and annotation of PDF documents. The PDFTab extension allows
developers to load PDF documents into Prot eg e and annotate them in a graphical user interface using Adobe Acrobat. Furthermore, PDFTab allows developers
to relate document markup to individuals in the ontology. The advantage of the
PDFTab tool architecture is that it retains the rich ontology-editing functionality of the Prot eg e environment while adding PDF support.

2 Semantic Documents

The semantic-document approach combines electronic documents with ontologies [4]. The principal idea is to store the ontologies in the internal document
representation. Just as RDF and OWL statements can be invisible parts of web
pages, semantic documents include ontologies not shown when users view and
print the documents. Figure 1 illustrates the semantic-document approach. The
documents contain the ontologies and the relationships between concepts in the
ontologies and document parts. The rest of the document, including text, graph-
ics, and formatting information, can remain unchanged. This approach allows
PDF tools such as Adobe Acrobat to recognize and open the documents in the
normal way.

While our approach in general does not assume a particular document for-
mat, there are several advantages of using PDF for prototyping and evaluating
semantic documents.
1. PDF is a common format for printing and on-line publication. Since the
early 1990s, authors and publishers have used PDF for document exchange
and publishing.
?

?

?
2. PDF is an open and documented format [3]. There are many commercial
and open source applications for generating, modifying, and viewing PDF
documents.

3. The PDF specification allows for basic document annotations, such as text
highlighting (by color) and the addition of textual notes (similar to MS Word).
4. PDF specifies document compressions and security (e.g, encryption and sign-

ing). These methods work for ontologies stored in PDF documents.

In addition, Adobe has added the extensible metadata protocol (XMP) to PDF
[7]. XMP supports RDF-based metadata in the file formats of several Adobe
products. Unfortunately, the way XMP uses the RDF structures in Acrobat
makes it incompatible with OWL. Thus, we must store OWL-based metadata
for semantic documents separate from XMP in PDF documents.

Compared to HTML, PDF is a much more complex format. One of the major
advantages of the HTML format is that it allows document creation and editing
with basic tools, such as text editors. Indeed, it is possible to add OWL annotations to HTML documents manually using a text editor (although this requires a
lot of work). However, for a complex document format like PDF specialized annotation tools are essential. As mentioned previously, other widely-used formats,
such as MS Word, may also be used as the basis for semantic-document markup.
Tallis [8] discussed an interesting MS Word extension that supports semantic an-
notations. Authors can use this tool to add OWL statements to MS Word files
interactively.

3 Annotation Model

Before presenting the tool architecture, let us first discuss the annotation model.
There are several models for adding annotations to documents. In this section,
we will discuss three of them. The first possibility is to add metadata to documents without relating the metadata to the document content or parts. XMP,
for example, uses this method. The second modeling alternative is to relate the
metadata to sections of the document text and other document parts. The advantage of the latter model is that it enables tight integration between documents
and ontologies. For example, the model enables users and application programs
to use the document text to look up parts of the ontology and vice versa.

Finally, it is possible to store metadata outside the documents, for instance
in a separate metalevel database. The advantage of this approach is that no
changes are required to the documents. However, the metadata do not follow the
documents if they are copied, moved, or communicated to others electronically.
Moreover, it is not possible to collect metadata from documents published on
the web.

In our work on semantic documents and the PDFTab implementation, we
choose the second approach; that is, to store the metadata in the document
and to relate document annotations to the ontologies. Our motivation for using
this model is that we want to integrate documents and ontologies and keep the
metadata within the documents.

H. Eriksson

4 Tool Architecture

The goal for the tool architecture is to combine advanced ontology development
with full support for PDF, such as fully compatible rendering. The strategy
is to integrate two state-of-the-art tools to form an environment that supports
both perspectives; documents and ontologies. The ontology part of the semanticdocument annotation tool builds on the Prot eg e environment [6]. The PDF handling and rendering part uses Adobe Acrobat.

Prot eg e is a suitable basis for the ontology part because it has an advanced
graphical user interface and it supports different ontology formats, including
OWL [9]. Furthermore, Prot eg e is a widely-used tool with an active user com-
munity. The Java-based Prot eg e implementation features a core application programming interface (API) for manipulation of ontologies and knowledge bases.
The basic system consists of this core API combined with standard plug-ins for
graphical editing and storage of ontologies and knowledge bases. This extendability enables us to add new functionality for adding document views to the
Prot eg e user interface and to interconnect Prot eg e with Adobe Acrobat.

There are many advantages of using Acrobat as the PDF-handling part. Acrobat is the standard tool for creating, manipulating, and viewing PDF documents.
There are alternative PDF viewers, but many of these tools may have rendering
incompatibilities for certain documents. Specifically, we could not find any Javabased PDF viewers with full PDF support. The main disadvantage of Acrobat,
for our purpose, is that there is no support for communication and interoperability with Java programs. It is a major challenge to integrate Prot eg e with
Acrobat because of the different programming languages and communication
platforms used. Nevertheless, we believe that the best semantic-document tool
solution can be accomplished by integrating these systems.

Figure 2 shows the overall tool architecture. Both Prot eg e and Acrobat use
collections of standard extensions. The PDFTab extension interconnects Prot eg e
and Acrobat using such plug-ins. PDFTab act both as a graphical plug-in that
adds a tab to the main Prot eg e user interface and as a module for managing the
communication with Acrobat. The Acrobat plug-in supports graphical markup
of PDF documents and manages the communication with the Prot eg e plug-in.
These plug-ins work in concert to enable the users to move seamlessly between
the ontology and document views.

An important aspect of the architecture is support for multiple documents.
The Adobe and Prot eg e extensions handle several documents, each with their
own ontology. Prot eg e uses a main ontology, which can import subontologies. In
Prot eg e, users can select the active ontology for editing. Likewise, Acrobat supports several open documents. PDFTab allows developers to associate a list of
documents with the main ontology, much like importing the subontologies contained in the documents. The support for multiple documents enables developers to create an ontology structure consisting of a group of semantic documents,
which refers to a common main ontology.

The current PDFTab implementation is a research prototype that allows users
to experiment with semantic documents and to evaluate the architecture in
?

?

?
Protege extensions

Protege

Adobe Acrobat

PDFTab
extension

Acrobat
extension

Fig. 2. The PDFTab tool architecture. Extensions of Prot eg e and Acrobat allow bidirectional communication.

practice. As such, the implementation has a number of limitations. Although
Prot eg e is available on all platforms that support Java and the graphical user
interface Swing and Acrobat is available on almost all major platforms (e.g.,
MS Windows, Apple Macintosh, Sun Solaris, and Linux), the current PDFTab
implementation supports the MS Windows platform only. The Adobe plug-in
API and inter-application communication protocol is platform dependent, and
we choose to focus on the MS Windows platform. The implementation uses
the MS Component Object Model (COM) for the communication between the
applications, because Acrobat supports this technique.

5 User Interface

The overall design goal for the tool user interface is to provide an integrated
environment for documents and ontologies. The user interface should follow the
general interaction and visual style of both Prot eg e and Acrobat while making
it easy for users to move between the documents and ontologies. Furthermore,
the user interface should support handling of multiple documents. Finally, the
other Prot eg e tabs for ontology editing should work as before, including custom
and third-part tab extensions.

The user interface of PDFTab consists of two major parts. The Prot eg e part
is a user-interface tab that adds a document view of the Prot eg e ontology. The
Acrobat part consists of additional toolbar buttons for creating three types of
semantic annotations and the graphical highlighting of document text and re-
gions. Let us begin by discussing the Prot eg e document tab. Figure 3 illustrates
the layout of the tool user interface with the document tab selected (Fig. 3a).
The list of documents provides an overview of the documents associated with
the main ontology in Prot eg e (Fig. 3b). The Acrobat view shows the selected
document and allows users to browse it and add annotations (Fig. 3c). Prot eg e

H. Eriksson

Protege

Classes

Properties

Individuals

Documents

Adobe Acrobat

b

List of

documents

c

a

Fig. 3. The organization of the PDFTab user interface. (a) The tab for viewing PDF
documents. (b) The list of the documents available. (c) The Acrobat view of the selected
document.

uses Acrobat as a user-interface extension just like web browsers, such as MS
Internet Explorer and Mozilla Firefox, use Acrobat to support viewing of on-line
PDF documents. The main advantage of this user-interface layout is that users
can easily move between the document view and one of the ontology views (e.g.,
classes, properties, and individuals).

5.1 Document Management

The support for multiple documents requires user-interface functionality for
adding, removing, and inspecting documents. The list of documents (Fig. 3b)
contains all documents associated with the project. Users can add existing documents to this list by selecting the document add button or by dragging documents to the list. In PDFTab, the documents must be plain PDF files created
by an external application, such as Acrobat Distiller, or PDF-based semantic
documents produced by PDFTab. Users can select items from the list of documents for inspecting metadata and for viewing and annotating in the Acrobat
view (Fig. 3c). Alternatively, users can access a list of all annotations for the selected document. This annotation browser provides an overview of the document
annotations, which is helpful for long documents with many annotations. Selecting an item in the annotation browser brings up the corresponding annotation
individual, which is part of an annotation ontology.

5.2 Annotation Editing

Users edit annotations in the Acrobat view. PDFTab makes easy to add new
annotations to the selected document. To create a new annotation, the user
?

?

?
Fig. 4. Annotation buttons in the Acrobat view

Fig. 5. Document annotation in PDFTab

selects an annotation button, such as the text annotation button, and highlights
the text or area to annotate. Figure 4 shows the buttons for the rectangle, text,
and graphics annotation tools added to Acrobat. By selecting one of these tool
buttons, the user can select a rectangular area, a piece of text, or a figure in the
document for semantic annotation. The Acrobat extension highlights the item
selected and sends a request to Prot eg e to prepare the annotation on the Prot eg e
side.

Figure 5 shows the Prot eg e user interface with the document view, which
enables users to browse the document and navigate to the text to annotate.
(This screen dump corresponds to the user-interface overview in Fig. 3.) Here, the
user has selected the text annotation button and highlighted the text Document
annotation. After the user has marked the text, PDFTab creates automatically
an OWL individual that represents the annotation, the annotation individual,
and opens a form-based editor for this individual (see Fig. 6). In Prot eg e, users
can custom-tailor forms by modifying the layout and selecting widgets for the
fields [6]. This functionality enables users to adjust the form for the annotation
to suit the subject domain. Furthermore, it is possible to navigate from the
document to the ontology by double clicking on the highlighted text, which opens
the editor for the annotation individual. Likewise, users can look up annotations
in the document by clicking on buttons in the annotation-individual forms.

The annotation individual can refer to classes and individuals in the doc-
uments ontology or in another related ontology, such as the main ontology.
By default, the annotation class has a target property, which is a pointer to a

H. Eriksson

Fig. 6. Form for the annotation individual. This individual corresponds to the annotation in the document. The individual contains information about the annotation id,
page number, position, size, creation date, selected text, and an optional reference to
a corresponding domain individual.

Tool selection

Text marking

Document annotation
is a common technique 
to relate...

Document
saving

Document
loading

Annotation individual

Text annotation 

in document

Annotation
ontology

Fig. 7. The annotation process from document loading over annotation creation to
document saving
?

?

?
target individual for the annotation. For example, the target individual can be
a class modeling a domain concept or a domain-specific individual. In this case,
the annotation individual acts as an intermediate between the document annotation and the domain ontology. This approach helps structuring the ontologies
by separating annotation-specific information from domain-specific information.
Figure 7 summarizes the process of creating an annotation. The Prot eg e and
Acrobat extensions load the PDF file (and extracts any previous metadata).
Then the user selects the text annotation tool and marks the text to annotate.
Next, the Acrobat extension initiates the creation process by highlighting the
selected text and sending a creation message to the Prot eg e extension. Prot eg e
then instantiates the text annotation class to create the annotation individual
and opens a form-based editor for the annotation. When the user saves the
document, Prot eg e will serialize all classes and individuals associated with the
document and send this structure to Acrobat for inclusion in the document.
Acrobat then saves the document as a file.

6 Discussion

Integrating documents and ontologies has many advantages. Documents are an
important communication and storage format for human knowledge. Ontologies are a structured way of organizing and representing knowledge, especially
terminologies and conceptualizations. However, to produce and use semantic
documents in practice and extend the vision of the semantic web to documents
beyond web pages, it is necessary to have the appropriate infrastructure for
handling these documents.

PDFTab is a unique tool in the sense that it supports annotation of PDF
documents and combines PDF with advanced ontology-editing support. The
user interface combines ontology editing and document viewing in a seamless
way and allows users to quickly move between the view, just like using a single application. Furthermore, we believe that the tool architecture is scalable.
Both Prot eg e and Acrobat scale well for large ontologies and documents, respec-
tively. PDFTab already supports multiple documents. Therefore, it is possible
to extend the architecture to accommodate for massive document storage in
repositories and databases by redesigning the mechanism for handling multiple
documents.

The PDFTab approach of combining a standard Windows application with
Prot eg e can serve as an architectural template for other development tools. For
example, an interesting prospect is to combine Prot eg e with other office-oriented
applications, such as MS Word and PowerPoint. Such hybrid tools can support
new ways of developing ontologies and integrating them with other types of
documents and application objects. We believe that the semantic web can benefit
from new types of tools that expand the interoperability with common, everyday
applications.

H. Eriksson

7 Conclusion

Extending the semantic web beyond web pages and HTML to complex document and multimedia formats requires new types of tools that can support both
ontologies and the target format in an adequate manner. The PDFTab extension
of Prot eg e illustrates the feasibility of efficient support for semantic documents.
The combination of Adobe Acrobat and Prot eg e forms a solid foundation for
state-of-the-art handling of documents and ontologies. Although the integration
of such different tools requires advanced technical solutions, which adds to the
complexity of the system, it is possible to overcome these difficulties and develop
hybrid tools that combine the document and ontology views.

Acknowledgments

This work was supported in part by VINNOVA under grant no. 24478-1 and in
part by Statistics Sweden.
