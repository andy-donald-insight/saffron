WSMO Studio  A Semantic Web Services

Modelling Environment for WSMO

(System Description)

Marin Dimitrov, Alex Simov, Vassil Momtchev, and Mihail Konstantinov

Ontotext Lab. / Sirma Group

135 Tsarigradsko Shose Blvd., Sofia 1784, Bulgaria

firstname.lastname@ontotext.com

Abstract. The Web Service Modelling Ontology (WSMO) provides a
unique, highly innovative perspective onto the Semantic Web Services
domain. Robust and easy-to-use tools play crucial role for the adoption
of any technological innovation and indeed the overall value of the innovation can be severely undermined by the lack of proper tools supporting
it. In this paper we present a prototype of an integrated modelling environment that supports and elaborates the innovative WSMO perspective.

1 Introduction

Robust and easy-to-use tools play a crucial role for the adoption of any new
technology. Indeed, the overall value of a technological innovation can be severely
undermined by the lack of proper tools to support it. The Web Service Modelling
Ontology (WSMO, [1][2]) provides a unique, highly innovative perspective onto
the Semantic Web Services domain.

Unfortunately, current tool support in the area is still lagging behind the theoretical advancements but real progress can be achieved only when the Semantic
Web Services technology is easily usable. Another major problem with the tool
landscape at present is that almost all of the available tools focus on only one
of the relevant Semantic Web Services aspects (for example only ontology management or only service composition), while end users rarely focus on a single
task and an integrated modelling environment will be more appropriate and
productive.

In this paper we present a prototype that supports and elaborates the innovative WSMO perspective, making the technology accessible and easy to use
for early adopters. In particular, we present WSMO Studio1  an open source
integrated modelling environment for the Semantic Web Services domain, which
is being developed within several EU-funded research projects2.

1 http://www.wsmostudio.org
2 The work described in this document is partly funded by the European Commission
under the IST projects DIP (FP6-507483), InfraWebs (FP6-511723), SemanticGov
(FP6-027517) and SUPER (FP6-026850).

E. Franconi, M. Kifer, and W. May (Eds.): ESWC 2007, LNCS 4519, pp. 749758, 2007.
c Springer-Verlag Berlin Heidelberg 2007

M. Dimitrov et al.

This paper is organised as follows: section 2 presents the goals of WSMO Stu-
dio. section 3 provides details on present WSMO Studio functionality. section 4
attempts to evaluate the extent to which WSMO Studio has achieved the defined
goals and contains a brief overview of several prominent Semantic Web Services
tools and their relation to WSMO Studio. Finally, section 5 provides details on
work in progress for domain specific extensions of WSMO Studio.

2 WSMO Studio Goals

The three main goals of WSMO Studio are:

1. Providing a prototype that supports and elaborates the WSMO approach
to Semantic Web Services, making the technology accessible and easy to use
for early adopters. As we have already pointed out, adequate tool support
is crucial for the adoption of a technological innovation.

2. Providing an integrated environment that maximises the productivity of the
user. Current SWS tools usually focus on only one aspect (ontology editing,
service composition, etc.) but users most often need functionality that covers
various tasks in an integrated manner.

3. Providing an extensible environment where 3rd party tool providers can eas-

ily add new functionality or modify and customise existing functionality.

With respect to the first goal, we have already presented in [3] a summary
of the tasks that a Semantic Web Services modelling environment should cover,
such as:

 ontology modelling,
 semantic annotation of existing web services,
 working with semantic repositories for publishing, browsing and querying of

WSMO ontologies, services, goals and mediators,

 goal-based service discovery,
 specification of service compositions (i.e. orchestration and choreography

 interaction with Semantic Web Service runtime environments (such as

interfaces),

WSMX3 and IRS-III4).

The second goal we have set is providing functionality that covers various
related Semantic Web Services tasks in an integrated modelling environment, so
that users will not need to use several different tools to accomplish their goals.
As noted in [4] users rarely focus on only one aspect or task when they work 
indeed, users usually play different roles and perform different related tasks, so
the environment should provide functionality covering various perspectives and
tasks.
3 http://www.wsmx.org
4 http://kmi.open.ac.uk/projects/irs/
?

?

?
Finally, extensibility is a requirement that is mostly ignored by the current

Semantic Web Services tools. But as noted in [4]:

. . . open-ended extensibility is essential in the commercial IDE arena because no IDE vendor could possibly provide a sufficient set of useful tools
to satisfy all customer needs. Which third party tool will be bundled as
an add-in for a particular IDE is determined by market forces.
This statement, based on commercial IDE experience, can equally well be
applied for SWS modelling environments. Indeed, tool extensibility is even more
important for an emerging domain such as the Semantic Web Services one, so
that when the domain evolves, tools will be able to follow this evolution and
provide the relevant functionality.

3 WSMO Studio Functionality

This section presents a summary of the main features of WSMO Studio, with
respect to the requirements identified in [3]. A detailed overview of WSMO Studio
is available in [5].

WSMO Studio is built on top of the Eclipse platform5. The functionality of
WSMO Studio is available both as a standalone application and as a set of
individual components (called plug-ins), that can be incorporated into 3rd party
applications.

An important feature of Eclipse is that its component model presents a declarative specification of ways to extend an application, called extension points [6].
New plug-ins may extend existing plug-ins and may be easily incorporated into
an application.

3.1 Core Components

The core runtime layer provides functionality common across all components of
the WSMO Studio.

The most important component of this layer is the wsmo4j plug-in, based on
the wsmo4j framework6. The functionality includes: creating WSMO models,
validating models, export and import from various WSML formats (as defined
in [7]) and languages such as RDF and a subset of OWL-DL.

The wsmo4j plug-in publishes several extension points, so that 3rd party ex-

tensions (for example a new parser) can be easily integrated.

In addition, the runtime layer contains several utility components for workspace

management and a shared entity cache.

3.2 WSMO Editor

This plug-in provides the main User Interface for modelling of WSMO ontologies,
goals and services. Import and export from WSML formats, RDF and a subset of
5 http://www.eclipse.org
6 http://wsmo4j.sourceforge.net

M. Dimitrov et al.

OWL-DL is provided via the core layer. Most of the User Interface elements of the
WSMO editor are also available for extension and customisation via published
extension points.

3.3 Choreography Editor

The Choreography editor (Figure 1) provides the User Interface for describing
WSMO choreography interfaces, as defined in [8].

A WSMO choreography description is comprised of:
 a state signature that specifies the concepts and relations of an ontology
that will be used to represent the choreography states, together with their
respective roles.

 a set of transition rules that express the state changes.

Fig. 1. WSMO Studio  choreography editor

The choreography descriptions, created by WSMO Studio, are used by execution environments (such as WSMX) during the execution of Semantic Web
Services.

3.4 SAWSDL Editor

The SAWSDL editor (Figure 2) provides functionality for attaching semantic
annotations to existing WSDL descriptions according to the SAWSDL recommendation [9]. SAWSDL is used at present as the grounding mechanism for
?

?

?
WSMO, i.e. mapping the semantic interface description of a service (in terms of
imported ontologies, capability and choreography interface) to its WSDL inter-
face.

The User Interface allows that semantic annotations are attached to the following WSDL elements: simple / complex XML types, messages, operations and
interfaces.

Fig. 2. WSMO Studio  SAWSDL editor

At present the SAWSDL editor does not provide support for the lifting/lowering
schema, i.e. the XSLT expressions that define the exact mappings between complex XML types defined in WSDL documents and concepts in an ontology, but
such functionality will be provided in future versions.

3.5 Repository Front-End

The Repository front-end provides an abstraction of an Semantic Web Service
repository for storing and querying WSMO descriptions.

WSMO Studio will be able to interact with a particular repository as long as

it provides a special adaptor based on the WSMO API repository interfaces7.

7 http://wsmo4j.sourceforge.net

M. Dimitrov et al.

At present WSMO Studio provides an integrated ORDI repository8 as well as
adaptors for remote IRS-III and WSMX repositories. Adaptors for other repositories will be developed in the future.

3.6 Service Discovery Front-End

Discovery of WSMO services at present is based on the idea of goal-based discovery [10], i.e. the user provides a request represented as a WSMO goal (possibly
with some additional information such as quality-of-service or cost restrictions),
and the discovery component returns a list of matching services, ranked according to some ranking criteria.

The Discovery front-end in WSMO Studio provides a simple User Interface
for goal-based discovery engines. At present only the EPFL QoS-enabled Service
Discovery Component [11] is supported but future versions will provide integration options with other discovery engines and matchmakers.

3.7 Integrated Validator and Reasoners

WSMO Studio provides integrated WSML-Flight and WSML-DL reasoners via
the WSML2Reasoner framework9. The integrated reasoners can be used for validation and satisfiability tests when building WSMO ontologies. The currently
supported reasoners are MINS, KAON2 and Pellet.

WSMO Studio contains an integrated WSML validator from the wsmo4j
framework. All errors, warnings and notifications produced from the validator
are listed in the standard Problems view of Eclipse. The information associated
with each problem is: severity, explanation message and problematic location. To
minimise the processing overhead, validation is performed only when a WSML
file is opened or saved.

4 Evaluation and Related Tools

This section provides an evaluation of the extent to which WSMO Studio has
achieved the defined goals and contains a brief overview of several prominent
Semantic Web Services tools and their relation to WSMO Studio

4.1 Evaluation of WSMO Studio

With respect to the outlined goals in section 2, the following assessments can be
made:

 Functionality  the WSMO Studio functionality, outlined in section 3, covers
most of the basic tasks for Semantic Web Services modelling, namely support
for modelling WSMO ontologies, services, goals; support for choreography

8 http://www.ontotext.com/ordi/
9 http://dev1.deri.at/wsml2reasoner/
?

?

?
descriptions; means for attaching semantic annotations to WSDL documents;
front end to Semantic Web Service repositories and matchmakers; integrated
reasoners and validators.

Other functionality, such as interaction with Semantic Web Services runtime environments (e.g. WSMX and IRS-III) or support for ontology mediation is still not available in WSMO Studio but is already provided by other
tools (e.g. WSMT) and may be easily integrated into WSMO Studio.

 Integration  WSMO Studio provides functionality covering various Semantic
Web Services modelling aspects in a single integrated modelling environment.
Since WSMO Studio is based on the Eclipse platform, the functionality is
provided by means of plug-ins, which can be also integrated into other products and applications.

 Extensibility  the Eclipse extensibility mechanism allows that functionality
is added, replaced or customised by means of published extension points.
WSMO Studio defines several such extension points, which allows customisation and replacement of specific User Interface elements, as well as adding
new functionality (e.g. adaptors for new Semantic Web Services repositories
or matchmakers, reasoners, etc.).

WSMO Studio extensions have already been developed by 3rd parties

within the DIP and InfraWebs research projects.

An additional aspect that influences all three goals is the flexible licensing 
WSMO Studio is licensed under LGPL [12], which allows that individual components (plug-ins) are incorporated within and distributed with 3rd party applications without any restrictions on the licensing terms of the latter. Our expectation is that the Open Source licence increases the visibility of a tool and
the chances for 3rd party contributions and adoption, though it is not possible
to provide a reliable assessment on that.

4.2 Related Tools

Current tool support in the area of Semantic Web Services is still lagging behind
the theoretical advancements. Integrated toolsets, that provide functionality covering many aspects of Semantic Web Services are still not readily available and
tools generally lack means of extensibility, that could improve their reusability
and adoption.

This section contains brief overviews of several prominent Semantic Web Ser-

vices tools related to WSMO Studio.

The Web Services Modelling Toolkit10 (WSMT) is an Eclipse based application which provides an advanced ontology viewer, an ontology mediation component and a WSMX management component as well as support for modelling
WSMO ontologies and an integrated reasoner. Since WSMT is Eclipse based, its
plug-ins can be used from within WSMO Studio and and vice versa.

10 http://sourceforge.net/projects/wsmt

M. Dimitrov et al.

METEOR-S11 is a Semantic Web Services toolset that provides functionality
for adding semantics to web services standards like WSDL, UDDI and WS-
BPEL. Radiant is an Eclipse based tool for adding semantic annotations to
WSDL documents according to the SAWSDL and WSDL-S recommendations.
Lumina provides an Eclipse based user interface for discovery of web services.
Additionally, the METEOR-S toolset also includes a Service Discovery Engine
and a semantically enhanced service registry based on UDDI.

OWL-S Editor12 is a Prot eg e13 plug-in for modelling OWL-S services. The editor provides means for describing atomic and composite processes (i.e. the OWL-
S Process definition). The OWL-S Editor also provides some limited grounding
support, by generating skeleton OWL-S services from WSDL files. The options for integrating new functionality and extensions of existing functionality
are quite limited.

Semantic Tools for Web Services14 is a set of Eclipse plug-ins which offer
two main functionalities: semantic annotation of existing WSDL documents into
WSDL-S [13], and semantic matching and composition of web services (based
on inferencing via the ABLE rule engine), where the queries are represented
by WSDL files and the results are references to the matched WSDL service
descriptions or a composition of services. The plug-ins are not extensible. STWS
is not directly comparable to WSMO Studio since its focus is on WSDL-S based
semantic annotations for WSDL.

5 Future Work

WSMO Studio has already been used as the Semantic Web Services modelling
environment within two EU-funded research projects, DIP15 and InfraWebs16.
Within the scope of two active research projects, SUPER17 and Semantic-
Gov18, WSMO Studio will be enhanced with domain specific extensions for the
Business Process Modelling and eGovernment domains.

Within SUPER, WSMO Studio will provide functionality for modelling and
querying of Semantic Business Processes using ontologies and Semantic Web Ser-
vices, according to the Business Process Modelling Ontology (BPMO) [14][15].
In summary, BPMO provides an abstraction over business process modelling languages such as EPC [16] and BPMN [17], support for workflow patterns [18], and
added semantics in terms of using ontology concepts for explicit modelling of the
dataflow and attaching abstract WSMO goals to process tasks. The BPMO descriptions will be semi-automatically translated to sBPEL, which is the semantic
version of WS-BPEL.
11 http://lsdis.cs.uga.edu/projects/meteor-s/
12 http://owlseditor.semwebcentral.org/
13 http://protege.stanford.edu/
14 http://www.alphaworks.ibm.com/tech/wssem
15 http://dip.semanticweb.org
16 http://www.infrawebs.org
17 http://www.ip-super.org/
18 http://www.semantic-gov.org/
?

?

?
Within SemanticGov, WSMO Studio will provide means for modelling of Public Administration services based on the Governance Enterprise Architecture
(GEA) and the WSMO-PA [19][20] extension of WSMO for the Public Administration domain.

6 Conclusion

In this paper we presented a prototype of an integrated modelling environment
for the Semantic Web Services domain, called WSMO Studio. The prototype has
already been used for modelling of Semantic Web Services in several research
projects.

Our future work will be focused on providing domain specific extensions for
the application of WSMO in the eGovernment and Business Process Modelling
domains.
