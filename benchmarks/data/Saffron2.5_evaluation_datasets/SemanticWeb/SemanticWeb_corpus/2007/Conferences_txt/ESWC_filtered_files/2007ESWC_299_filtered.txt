Knowledge Sharing on the Semantic Web 

Nicholas J. Kings1, Caroline Gale2, and John Davies1 

1 Next Generation Web Research Group, BT Group, Adastral Park, Ipswich, UK 

{nick.kings,john.nj.davies}@bt.com 

2 Chimera  Institute for SocioTechnical Research and Innovation, Essex University, UK 

cgale@essex.ac.uk 

Abstract.  This  paper  details  the  design,  implementation  and  evaluation  of  an 
ontology-based  knowledge  sharing  tool.  The  system,  Squidz,  automatically 
classifies  browsed  web  pages  against  an  ontology,  and  allows  users  to  share 
comments  made  about  those  pages  to  members  of  a  community.  As  the  user 
browses  web  pages,  recommendations  of  relevant  documents  which  have  already been shared are produced, based upon both the users social network as 
well as the semantic content of the page currently in view. Key to the design of 
the system has been the requirement, evidenced by earlier studies, that sharing 
should be easily effected as a side-effect of browsing rather than comprising a 
separate and distracting task. Another feature of the system is the linkage of a 
formal ontology with user-provided tags of shared information, thus combining 
the proven popularity of folksonomy-based systems with the shared and formal 
domain model provided by an ontology. 

Keywords:  Semantic  Web,  Knowledge  Sharing,  Tagging,  Social  Software, 
Communities of Practice. 

1   Introduction 

In general, knowledge sharing tools combine the functions of searching for and distributing information. As a user requires information to undertake a task, information 
relevant  to  that  task  can  be  located.  Underpinning  knowledge  sharing  tools  is  the 
premise that someone in the users wider community has already created or accessed 
relevant information (explicit knowledge transfer) or someone is able to provide help 
or advice (tacit knowledge transfer).  

Knowledge  management can  be defined as the  systematic application of actions  
to  ensure  that  an  organisation  obtains  greatest  benefit  from  the  information  that  is  
available to it [1]. Knowledge sharing  software supports the activities of collating,  
categorising and distributing information [2], which creates a group memory and improves team awareness [3, 4].  

The  application  of  a  knowledge  sharing  tool  has  a  direct  impact  on  the  commu-
nitys behaviour; any interactive digital technology has embedded implicit cultural as-
sumptions. Raybourn et al. [5] suggest that there is no recipe or standard format for 
encouraging participation, nor should any one cultural perspective be forced on such a 
community. However, functions to support the community may be just as important 

E. Franconi, M. Kifer, and W. May (Eds.): ESWC 2007, LNCS 4519, pp. 281295, 2007. 
 Springer-Verlag Berlin Heidelberg 2007 

N.J. Kings, C. Gale, and J. Davies 

as other functions supported by a system [5-10]. Kings et al. [11, 12] further suggest 
that a sense of history and a users reputation are prerequisites for the development of 
a shared community purpose.  

1.1   Models of Knowledge Sharing 

The  Semantic  Web  [13]  can  provide  enhanced  information  access  based  on  the  exploitation  of  machine-processable  meta  data.  Central  to  the  vision  of  the  Semantic 
Web are ontologies, which are seen as facilitating knowledge sharing and re-use between agents, be they human or artificial [14]. They offer this capability by providing 
a consensual and formal conceptualisation of a given domain. As such, the use of ontologies and supporting tools offer an opportunity to significantly improve knowledge 
management capabilities on the intranets of organisations and on the wider web. Fur-
thermore, Mika [15] suggests that although the Semantic Web has been defined to facilitate machine understanding of the World Wide Web, the process of creating and 
maintaining that shared ontology is a purely social activity. Each ontology is created 
in a process that requires a group, or community, to build and share an agreed understanding  of  the  important  concepts  and  objects  for  that  self  same  community.  Mika 
further proposes that the understanding of social presence is crucial in understanding 
how an ontology evolves and gains acceptance. 

Recently,  we  have seen  the emergence of a number of very popular communitybased systems on the Web. Typically in systems such as flickr1 and delicious2, instead 
of  using  a  centralized  form  of  classification,  users  are  encouraged  to  assign  freely 
chosen  keywords,  called  tags,  to  pieces  of  information  or  data,  a  process  known  as 
tagging. As a community of users generate a series of tags for overlapping and common items, a folksonomy can been seen to emerge. Since folksonomies are incremental and end user-generated and therefore inexpensive to implement, advocates of 
folksonomy believe that it provides a useful low-cost alternative to  more traditional 
controlled vocabularies or classification schemes.  

The combination of social networking systems such as FOAF3 and XFN4 with the 
development of tag-based folksonomies, implemented as blogs and wikis initally were 
seen as a basis for the semantic environment. This has been seen as part of a change 
from accessing static web pages to the use of the web as an application platform [16]: 
  The  change  from  centralised  information  sources  to  an  approach  of  creating  and 
distributing Web content itself, characterised by open communication, the willingness to share and re-use information, and the market as a conversation [17]. 

  The  change  from  using  web  sites  as  point  sources  of  information,  stored  within 
static Web pages, to sources of remotely accessible information, through the use of 
network accessible APIs or services.  

In contrast to defined, formal taxonomies, categories in a folksonomy may appear 
to be arbitrary and idiosyncratic. However, a particular tag is chosen for a particular 
Web page based upon an individual's own understanding of the content being tagged, 

                                                           
1 http://www.flickr.com/ 
2 http://del.icio.us/ 
3 http://xmlns.com/foaf/0.1/ 
4 http://gmpg.org/xfn/  
?

?

?
which combines the personal, social, and technical understanding of that content [15]. 
By publishing a tag and tagged content to a wider audience, other users are subtly encouraged to explore other tagged content and other users interests. 

Pind  [18]  suggests  that  there  is  anecdotal  evidence  to  show  that  the  sets  of  tags 
used  within a community tend to converge upon a common set of agreed  meanings 
and usage. Pind further suggests, however, that tagging software could be improved 
by the addition of the following five features: the software should suggest appropriate 
tags; the software should display related tags and topics; suggest tags that others have 
used to describe the same items; infer topic hierarchies from the way tags are used; 
and, allow a user to quickly edit and change tags that have already been applied. The 
Squidz tool addresses all of these issues. 

In  Section  2,  we  describe  the  Squidz  tool.  Two  key  features  of  the  system  are, 
firstly, the requirement, as evidenced by earlier studies, that sharing should be easily 
effected as a side-effect of browsing rather than comprising a separate and distracting 
task [19-21]; and, secondly, the linkage of a formal ontology with user-provided tags 
of  shared  information,  thus  combining  the  proven  popularity  of  folksonomy-based 
systems with the shared and formal domain model provided by an ontology. Section 3 
describes the operation of the software in more detail. Section 4 details the evaluation 
of Squidz. 

2   Software Overview 

The main function of Squidz is to share knowledge in the form of textual annotations 
about  web  pages,  within  a  community  of  business  users.  The  secondary  purpose  of 
Squidz is to allow a user to discover new  social contacts  or sources of information, 
through discovery of shared interests. The important  features to be implemented by 
the software are: 
  To improve software adoption, Squidz must be useful to an individual user without 
relying  on  any  others  contributions.  Squidz  should  be  able  to  be  used  as  an  advanced book marking tool.  

  All users can view and comment upon any others annotations. 
  An annotation is made in a technical and a social context. The technical context is 
represented by the topics associated with the annotation; the social context is represented by the community where the annotation is posted. 

  The software filters and presents appropriate annotations, based upon each users 
technical  and  social  context.  In  effect,  a  relevant  annotation  is  one  made  by  a 
closely related person within a topic area related to the current page. 

  Squidz models a users social network in simple manner [2]: sharing pages to one-
self; sharing to close work or team colleagues; sharing to members of a community 
of practise; or, sharing to all users of the system 

Squidz is implemented as a browser plug-in, making use of a number of web services to classify browsed web pages and to retrieve annotations made by other members  of  the  user  community;  Squidz  is  just  one  potential  interface  to  the  meta-data 
generated within the community. Squidz is being developed for communities of inter-
est,  or  practice,  within  a  corporate  environment.  In  common  with  other  tools  being 

N.J. Kings, C. Gale, and J. Davies 

developed within the SEKT5 project, Squidz is utilising the PROTON ontology [22, 
23]; PROTON6 is an ontology for knowledge management, modelling entities such as 
Documents with associated Topics as well as Users with Interests and Communities 
of Users. 

As a user browses the internet or their intranet, the web page is classified against 
the formal ontology, and that classification is used to retrieve related pages. By clicking on the icons and words in the plug-in, separate information windows are created, 
rather than attempting to merge information within the browsed page. 

Fig. 1. Pages classified during browsing 

 

Figure 1 shows the main user interface to Squidz, after a user has been browsing: 
web pages main topic is copyright and that six related annotated pages have been 
previously shared by other users; the main topic for a web page is either the highest 
ranked topic returned by the classifier or, if this user has already annotated this page, 
the main topic is taken from that annotation. 

2.1   System Architecture 

Squidz has been implemented as a number of server side components and the user interface  is  supplied  as  an  Internet  Explorer  Browser  Helper  Object  (or  plug-in).  The 
server  side  components  write  to  a  database  which  is  mapped  to  an  OWL  ontology 
(PROTON) held in KAON. Information generated by using Squidz is thus fully accessible  to  other  semantic  web  applications.  Thus,  other  applications  developed 
within SEKT, such as Semantic Search and Browse, are enable to share information 
through a semantic repository [22, 24-26]. Squidz has been envisaged as being used 
with a corporate setting, for use within communities of practise or communities of in-
terest. Squidz monitors and tracks a users browsing behaviour; privacy and secrecy 
were  seen  as  less  relevant  within  an  enterprise  setting.  For  use  of  Squidz  within  a 

                                                           
5 http://www.sekt-project.com/ 
6 http://proton.semanticweb.org/ 
?

?

?
community of users across the wider internet, further work would be required to satisfy concerns about user security and privacy. 

For  use  within  British  Telecom  (BT),  BT  procures  the  Inspec  and  ABI  bibliographic record databases, giving access to over 4 million bibliographic records. The 
format for each bibliographic record is based on ISO 2709 (which is based on the Library of Congress MARC format7).  

A classifier has been developed, which assigns subject categories from the ABI and 
Inspec controlled vocabularies to content retrieved from the Web  [27]. The classifier 
identifies  the  occurrence  of  controlled  indexing  terms  in  the  text,  and  selects  those 
terms for classification that are deemed most significant. The significance of each controlled indexing term is not only dependent on its frequency of occurrence in the text, 
but also on its inter-dependencies with other controlled indexing terms. The classifier 
web service returns the four highest ranking subject topics, for each web page, as well 
as up to ten of the most significant words and phrases identified in the text. 

An inspection of the classifications presented by the classifier for a number of web 
pages suggests that it is capable of producing sensible classifications  for previously 
unseen Web content. However, a full evaluation of the classification technique is currently being undertaken.  

2.2   Semantic Annotations 

When  sharing  a  web  page  in  Squidz,  the  user  has  the  opportunity  to  provide  some 
folksonomy-style tags which describe the content of the page, along with a comment 
about the page. Squidz models an annotation as the following: the users comment; a 
set of formal topics, generated by the page classifier; a set of informal user-supplied 
tags;  the  target  audience  (individual,  team,  community  or  world  as  chosen  by  the 
user); and, a set of keywords and phrases, also generated by the page classifier. For 
each user tag, Squidz derives an associated set of keywords; each tag is semantically 
characterised by that keyword vector rather that the character string the user chose to 
represent the concept denoted by that particular tag.  

As web pages are annotated with tags, the set of words for each tag is re-calculated 
automatically based upon the keywords stored within the page annotation. The keywords are associated with each tag in order to find related pages even if pages have 
been tagged with different terms; the derived keywords allow pages to be tagged with 
similar words, even though each user has their own understanding of that word. For 
example, one users tag of project may represent the same concept as another users 
tag of SEKT. Adding an annotation forces the system to recalculate the keywords 
associated with the users tags and subsequently all pages that are now related to the 
current page.  

Though  a  folksonomy  allows  a  community  to  evolve  their  own  vocabulary,  at  a 
low  cost  for  each  contributor,  there  are  associated  problems  of  synonomy  and 
polysemy  [28],  as  there  is  no  central  defined  meaning  for  each  keyword  or  phrase 
used.  Using  the  approach  proposed,  the  semantic  annotation  uses  the  information 
available  from  the  tagged  pages  themselves  to  provide  a  common  basis  for  understanding the communitys concepts. 

                                                           
7 http://www.loc.gov/marc/ 

N.J. Kings, C. Gale, and J. Davies 

Annotations are also made to a particular context, such as Self, Team, Com-
munity or Everyone. This is used as a recommendation as to whom the annotation 
may be most relevant; by taking into account the suitability of an annotation, this may 
reduce the cost of a user understanding the importance or relevance of that particular web page [2]. 

As pages are shared in Squidz, a number of OWL metadata elements are generated 
and  stored  in  the  PROTON  ontology:  a  Squidz  annotation  is  represented  as  a 
PROTON  document  with  an  associated  set  of  ontology  topics  and  informal  usergenerated tags. Thus, the community generates relevant annotated content for its own 
use and this content can be accessed via other Semantic Web applications, such as the 
Semantic Search and Browse tool in BTs Digital Library [22, 26]. 

3   Squidz in Action  

Section 2 presented an overview of Squidz, whereas this section examines each of the 
main software functions in more detail. 

3.1   Fetching Related Pages 

Squidz provides the user with peripheral vision of previously shared web pages and 
annotations related to the current page. As a web page is viewed by a user, a request 
for related pages and their associated annotations is made to the remote web service. 
Related pages are determined in the following manner: 

Initialise candidate topic and tag set, CTT 

Add topics returned by classifier web service, for the 
current page, to CTT 

Add all topics from previous annotations made on current page to CTT 

Calculate similarity of page content to users tags, 
using Dice coefficient 

If similarity of tag exceeds threshold, add tag 
to CTT 

Initialise set of candidate annotations, CA 

Add annotations to CA, for each annotation which has 
been annotated with at least one topic in CTT 

Rank each web page in CA, based on the number of annotations stored for that page and who made the annotation 

The similarity of each tag  in  the system to the current page content is calculated 
with  the  Dice  coefficient,  as  shown  in  Equation  1  [29],  where  KWC  and  KWT  are 
 
?

?

?
sets of keywords: KWC, the set of keywords derived for a viewed page; and, KWT, 
the set of keyword associated with a particular user tag. 

+

(
Dice

,

)

(1) 

 

)



(

=
?

?

?
The similarity measure is taken between the currently viewed pages content and a 
tags keyword vector rather than between the current page contents and the keywords 
associated with each previously stored page for two reasons. Firstly, this decision improves the performance: as there are fewer user tags than annotations, fewer similarity 
calculations need to be under taken. Secondly, by matching user tags, Squidz is returning pages that are associated with a users concepts: one user may be interested another 
users project pages, without actually knowing of that other persons interest. 

In effect, each annotation votes for a web page to be brought to the users atten-
tion;  the  weight  associated  to  the  vote  varies  based  on  who  made  the  annotation. 
Thus, there is a chance that annotations made by people outside of a users direct social  network  will  be  brought  to  a  users  attention.  In  this  manner,  the  technical  or 
topical context of web page and well as a users social context is taken into account to 
account to rank a related page.  

Fig. 2. Topics related to current page 

 

Figure  2  shows  that  eight  topics  have  been  identified  that  are  related  to  the  current 
page: three topics from the defined topic ontology, and, five user created tags: user- generated tags are identified by placing the name of the user who generated the tag in parenthe-
ses. As described above, the defined topics have been identified by the classifier.  

The  list  of  related  user  tags,  shown  in  Figure  2,  is  formed  from  the  tags  found 
within the returned list of related pages. Each underlined topic or tag can be clicked to 
cause  all  of  the  annotations  made  with  that  particular  topic  to  be  retrieved  and  dis-
played. Related topics are calculated in the following manner: 

Initialise related topic set, RTL 
Add all library topics, as calculated by page classi-
fier, to RTL 
For each related page (as calculated above), RP 
    For each annotation, stored for RP 
        Add user tag, UT, to RTL 

N.J. Kings, C. Gale, and J. Davies 

Thus, the list of related topics contains ontology topics, user tags that are similar  
to  the  current  page  and  user  tags  that  have  been  explicitly  added  to  those  related 
pages. Only if an annotation has been created with a particular topic or tag, will the 
name be clickable; Figure 2 shows no annotations have been made with the topic of 
Infringement.  

Fig. 3. Pages related to current page, ranked by social network 

 

Figure 3 shows the scrollable list of annotated pages found to be related to the currently  viewed  web  page.  As  in  Figure  2,  clicking  an  underlined  topic  will  retrieve  
annotations; clicking an underlined URL will cause the browser to load that particular 
page. Implementing the user interface in this manner allows a user to explore across 
web  pages,  rather  than  having  to  visit  a  particular  website  and  then  start  exploring 
tags and relations from that point onwards. 

3.2   Sharing Annotations 

By clicking on Self, Team, Community or Everyone (as shown Figure 1), a 
user can choose to share an annotation about the currently viewed web page. This is 
implemented via a less intrusive pop-up window, rather than by changing the contents 
of  the  main  browser  widow.  Figure  4  shows  that  comments  about  a  particular  web 
page about to be shared to members of this users community.  

Sharing to a particular set of people does not preclude that others outside of group 
will not see the annotation, as having the ability to view every persons contribution is 
a  crucial  way  of  building  an  active  set  of  users.  However,  the  user-chosen  target 
group  of  the  annotation  is  used  in  the  ranking  algorithm  when  calculating  related 
pages: a page shared to Team by one of my team members is ranked higher than a 
page shared by the same person but shared to Community. 
?

?

?
Sharing to a target 

audience of 
community

Free text comment, 
on why this page is 
useful to community 

members

Added user tags

Formal topics 
returned by the 

classifer

 

Fig.  4.  Storing  an  annotation  with  the  user  choosing  to  add  two  tags  and  changing  the  main 
topic 

Figure 5 shows that after the annotation has been made, the web page is now related to nine pages, and the main formal topic for the page is shown as technology. 

By making an annotation the topics related to this page have changed, as shown by 
comparing Figures 2 and 6. As the added annotation explicitly mentions the users tag 
of PhD, this tag would be expected to be shown for this page. However, by annotat-
ing, the algorithm has calculated that there is also a similarity between this page and the 
users tags of Tagging and Classification techniques. Figure 6 also shows that In-
fringement can now be clicked, as there has been an annotation stored for that topic.  

Fig. 5. Further related pages after adding an annotation 

N.J. Kings, C. Gale, and J. Davies 

 

Fig. 6. Recalculated related topics, after the annotation has been added 

3.3   Exploring Annotations 

Squidz can be used as a personal book marking tool as well as for information shar-
ing. Because of the problems that information sharing systems require a critical mass 
of users [4], one of the requirements for Squidz was that the software should be useful 
for a single user. However, in order to support longer term community spirit, it is important that all annotations should be visible to anyone using Squidz. By developing 
Squidz in this manner, information sharing to the community is then a by-product of a 
simple, well understood action of book marking a web page.  

Fig. 7. Exploring my tags 

 

Figures 7 and 8 show a user exploring the topics and tags to find web pages. The 
user interface allows the annotations to be separated into  annotations  made by  your 
self,  your  team  members,  your  community  members  and  everyone.  Figure  9  shows 
the annotation made on a particular web page: the web page can be found by either 
exploring the users tags or exploring the formal topic hierarchy; the web page can be 
found through multiple routes, as it is associated with a number of different topics. A 
user tags are displayed as yellow folders, and their own annotations are shown as yellow stars, while formal topics are shown as red folders. 

 
?

?

?
Fig. 8. Exploring another users annotations and tags 

 

Figure 8 shows a user exploring all the annotations made by everyone. Here annotations made by other people are denoted by blue globes, and their tags are denoted by 
blue folders. Figure 8 also shows that four annotations have been made with the topic 
of technology: three have been by made by the user himself, and a fourth has been 
made by user alsmeydh. From this screen, it can be seen that there is a user tag of 
802.11, and that tag can be subsequently explored. 

4   Evaluation 

4.1   Related Work 

The design for Squidz has been influenced by lessons learnt from the Jasper [30] and 
OntoShare [20, 21] knowledge sharing tools. In those tools, a profile of user interests 
is built to filter information, based upon which web pages have been shared by various users. Notifications, about pages being stored, were sent by email which caused, 
however this caused a disconnect between sharing and commenting and there was little dialogue encouraged between users. Sharing information should be easily effected 
as a side-effect of browsing rather than comprising a separate and distracting task. 

Piggy  Bank  [31]  presents  a  tool  integrated  into  a  web  browser,  coupled  with  the 
use of associated RDF collection utilities. Like Squidz, Piggy Bank allows a community of users to share and collaborate over items of information found. The approach 
taken by Piggy Bank, however, is to present the RDF metadata directly in the user in-
terface; Squidz simplifies the user interface and only exposes parts of the metadata associated with document sharing, such as topic and user. 

Annotea [32, 33] is a framework to support collaboration and sharing of semantically marked objects. The toolset allows users to tag Web pages with concepts, and 
allow the metadata to be repurposed through various XSLT style sheets. Annotea provides a flexible interface to explore bookmarks and topics. Squidz, however, is aimed 

N.J. Kings, C. Gale, and J. Davies 

at  providing  page  recommendations,  through  the  classification  of  the  current  web 
page and retrieval of related items. 

Onomi [34] is also a social bookmarking tool for use within a corporate environ-
ment. Onomi also builds a semantic description of the users tags, however, the technique used within Onomi relies on stemming user tags to provide the common basis 
for  understanding,  rather  than  the  more  sophisticated  use  of  keyword  sets,  as  used 
within Squidz. 

4.2   Experimental Design 

Squidz has been being subjected to a three-stage user-centred evaluation. For the first 
stage, a heuristic evaluation [35] of the user interface was undertaken. A small group 
of five researchers, acting as usability experts, judged whether the user interface adhered  to  a  list  of  established  usability  heuristics;  a  checklist  was  adapted  from  the 
Xerox heuristic evaluation system checklist [36]. A number observations were made, 
most  of  which  were  concerned  with  minor  interface  problems  and  system  perform-
ance. The results of the evaluation were collated and discussed with the development 
team. Squidz was then modified in accordance with these observations.  

The second stage comprised a cognitive walkthrough evaluation [37]. Users were 
asked to use Squidz in order to complete a number of knowledge sharing tasks, where 
the  users  actions  and  behaviours  will  be  recorded.  Users  were  encouraged  to  talk 
through their actions and their concerns as they undertake each task, as this provided 
additional information about the usability of Squidz and the users thought processes 
as they used the application. At the end of each task, users were also asked to complete a short questionnaire. The findings were again discussed with the Squidz development  team.  By  the  completion  of  this  stage,  all  major  interface  issues  had  been  
resolved.  

At the time of submitting this paper, the third and final stage of evaluation is un-
derway: preliminary results are given in the next section. Squidz is being rolled out 
for  use  within  an  intranet,  to  users  with  a  range  of  technical  experience.  This  stage 
consists of a series of semi-structured interviews to find out how useful people have 
found Squidz [38]. The purpose of the interviews is to validate the following hypothe-
ses: knowledge sharing requires both a technical and social context; sharing is more 
likely to occur if the costs of sharing are reduced; and, sharing allows the knowledge 
of the community to built and enhanced. 

4.3   Results and Analysis 

Currently, twenty  users  have  registered and downloaded the software:  nine of those 
are regular users and a further eight users have made at least one annotation. All of 
the users are familiar with information sharing with tools such as email and delicious. 
Longer  term  user  acceptance  will  be  an  important  aspect  to  measure,  since  Squidz 
constantly  monitors  web  page  access.  As  the  current  trial  has  only  been  running  a 
relatively short time at the time of writing, and further longitudinal data is required to 
determine the users long term attitude to sharing information in this manner.  

Nevertheless,  data  from  the  current  valuation  has  validated  the  Squidz  approach: 
users  have  commented  on  the  simplicity  and  ease  of  use  for  the  tool.  The  user  
?

?

?
interviews have also identified a number of new functions that could be incorporated 
into later versions of the software. For example, one requested function would be ability to notify immediately other people that a page has been annotated, as well still 
having the ability to be made aware of that page while browsing. 

The users found the Squidz ranking of pages taking into account the content of the 
page and the original sharer of the page natural and intuitive. Annotations were typically tagged with only a few keywords or phrases. The characterization of tags with a 
keyword vector, however, gives a richer semantic representation of tags than in typical user-tagging applications. Semantic tags allowed users to name topics closer to the 
users own  higher level concepts, rather than each  user  having to add explicitly the 
complete set of keywords describing each web page.  

5   Discussion and Conclusions 

In this paper we have presented the design, implementation of a semantic tool for annotating and sharing information about web pages. Squidz is intended to test the hypothesis that information sharing is more effective when the software is aware of both 
the social and technical context of that information. The approach taken is to associate 
a formal topic ontology alongside an informal folksonomy, through the ability to annotate  web  pages.  Presenting  information  on  related  pages  and  topics,  through  the 
toolbar, allows a user to browse and explore when convenient to the user, rather than 
forcing a particular  mode of  usage;  knowledge sharing occurs as a result of  normal 
user activity (browsing). Though further improvements to the tool are planned, Squidz 
has already gained positive user feedback and acceptance. 

Acknowledgements. The work described in this paper was developed as part of the 
SEKT project, under EU funding (IST IP 2003506826). Further project details may be 
found at http://www.sekt-project.com/.  
