The Web Service Modeling Toolkit - An
Integrated Development Environment for

Semantic Web Services

(System Description)

Mick Kerrigan, Adrian Mocan, Martin Tanler, and Dieter Fensel

Digital Enterprise Research Institute (DERI),

Leopold-Franzens Universit at Innsbruck, Austria

firstname.lastname@deri.org

Abstract. The time of engineers is a precious commodity. This is especially true for engineers of semantic descriptions, who need to be highly
skilled in conceptual modeling, a skill which will be in high demand as Semantic Web technologies are adopted by industry. Within the software
engineering community Integrated Development Environments (IDEs)
like the Eclipse Java Development Toolkit and NetBeans have proved to
increase the productivity of engineers by bringing together tools to help
engineers with their everyday tasks. This paper motivates the need for
such an IDE for the Semantic Web and in particular describes the Web
Service Modeling Toolkit (WSMT), an Integrated Development Environment for Semantic Web Services through the WSMO paradigm.

1 Introduction

The combination of Semantic Web and Web service technologies, to create Semantic Web Services (SWS), with the aim of automating the Web service usage
process has been the aim of the WSMO[4], WSML[5] and WSMX[7] working
groups over the last number of years. The research in this area has produced
a conceptual model, a formal langauge and many back-end services for finding
and using Web services that meet the requirements of end-users. However the
process of creating the required semantic descriptions is a difficult task and the
time of Ontology and Semantic Web Service engineers is a precious commodity.
Within the Semantic Web domain there is much ongoing research into how to
present ontologies and semantic data to users. Each of the tools resulting from such
research tend to address a given problem within the domain, with these individual
research efforts rarely being aligned or integrated together. The lack of integration
results in developers switching back and forward between different tools for different tasks. In this paper we introduce the Web Service Modeling Toolkit (WSMT)1,
an Integrated Development Environment for Semantic Web Services, aimed at increasing the productivity of Ontology and Semantic Web Service engineers.

1 Available for download from http://wsmt.sourceforge.net

E. Franconi, M. Kifer, and W. May (Eds.): ESWC 2007, LNCS 4519, pp. 789798, 2007.
c Springer-Verlag Berlin Heidelberg 2007

M. Kerrigan et al.

An Integrated Development Environment (IDE) is defined as a type of computer software that assists computer programmers to develop software 2. The main
aim of an IDE is to improve the productivity of the developer by seamlessly integrating tools for tasks like editing, file management, compilation, debugging and
execution. Before the creation of the WSMT, developers of semantic descriptions
using the WSMO paradigm were forced to create their ontologies, web services,
goals and mediators by hand in a text editor. This has many inherent problems,
as due to the lack of validation and testing support it is very easy for errors to
creep into these semantic descriptions, which go unnoticed by the developer until
run-time. Many other tasks that are very easy in an IDE, can be hugely time
consuming without one, for example registering a semantic description with an
execution environment. Providing a fully integrated suite of tools for Semantic
Web Services, that meets the needs and requirements of developers should aid
in the adoption of the WSMO technology and reduce the overhead of creating
SWS applications.

In the following section we provide the background for our work, in section
3 we describe the problems currently addressed by the WSMT, in section 4 we
describe related work and finally in section 5 we provide some conclusions and
future work.

2 Background

The Semantic Web aims to make the vast quantities of information available
on the Web machine-understandable, by the use of ontologies to annotate Web
content. Web service technologies have emerged as a contender for the next
generation of Web applications, essentially lifting the Web from a static collection
of information to a dynamic computational entity. Web services have machineprocessable annotations that are well structured (using XML) and describe how
to interface with these services. However these annotations are purely syntactic
and not machine-understandable, thus large amounts of human effort is required
to build Service Oriented Architectures. Semantic Web Services are the extension
of ontologies to describe Web services such that a machine can reason about
the functionality they provide, the mechanism to invoke them, and the data
they expect as input and return as output. Once Web services are described
semantically it allows for large parts of the Web service usage process to be
automated. Services can be discovered based upon their functionality, can be
selected based upon the quality of the service, heterogeneity issues with respect
to the data they exchange or the process to invoke them can be mediated. It
is important to note that the semantic descriptions to enable this functionality
layer on top of the existing syntactic descriptions for existing Web services. Thus
Semantic Web Services are not a reinvention of Web services but an enhancement
to them. There are two main contenders in the field of Semantic Web Services,
namely WSMO[4] and OWL-S[16][15]. Within the scope of this paper we focus
on WSMO as the conceptual model for Semantic Web Services.
2 http://en.wikipedia.org/wiki/Integrated development environment
?

?

?
The Web Service Modeling Ontology (WSMO)[4] is a conceptual model for
creating semantic descriptions for Web services that can be used to resolve interoperability issues and automate the Web service usage process. WSMO is based
on the Web Service Modeling Framework (WSMF)[5] and as such, is based on
the four main elements of the WSMF: ontologies, web services, goals and medi-
ators. The aim of WSMO is to solve the integration problem by describing Web
services semantically and by removing ambiguity about the capabilities of Web
services, the problems they solve and the process of interacting with them.

The Web Service Modeling Language (WSML)[10] is a formalization of the
WSMO ontology, providing a language within which the properties of Semantic
Web Services can be described. There are five language variants, based on Description Logic and Logic Programming. Each language variant provides different
levels of logical expressiveness[10]. These variants are: WSML-Core, WSML-DL,
WSML-Flight, WSML-Rule and WSML-Full. WSML-Core, which corresponds
to the intersection of Description Logic and Horn Logic, provides the basis for all
the variants, while WSML-Full unites the functionality of all variants. WSML
Core is extended in the direction of more expressive Description Logic by WSMLDL and towards Logic Programming by WSML-Flight and WSML-Rule.

A Semantic Execution Environment (SEE) for Semantic Web Services can be
used to bind service requestors and providers together at runtime using semantic descriptions of the users goal and the providers Web service. SEEs provide
functionality for discovering, composing, selecting, mediating, and invoking Web
services that match the end users requirements. There are currently two Semantic Execution Environments for WSMO, namely the Web Service Execution
Environment (WSMX)[7] and IRSIII[2]. The SEE functionality is currently being
standardized through the OASIS standardization.

3 The Web Service Modeling Toolkit

The Web Services Modeling Toolkit (WSMT) is an Integrated Development Environment (IDE) for Semantic Web Services implemented in the Eclipse frame-
work. The WSMT aims to aid developers of Semantic Web Services through the
WSMO paradigm, by providing a seamless set of tools to improve their pro-
ductivity. As already mentioned a Integrated Development Environment (IDE)
is defined as a type of computer software that assists computer programmers to
develop software. IDEs like the Eclipse Java Development Toolkit (JDT)3 and
NetBeans4 for developing java software have proven that good tool support can
improve the productivity of engineers. It could be said that the time of ontology
and Semantic Web Service engineers is a more precious commodity, as the number of people who are currently skilled in conceptual modeling is much less than
those that can code in Java. This underscores the need for adequate tool support for working with semantic technologies and an IDE can tie together these
tools in such a way that the whole application is more than the sum of the parts

3 http://www.eclipse.org/jdt/
4 http://www.netbeans.org

M. Kerrigan et al.

that make it up. The main advantage of using the IBM Eclipse framework is
the existence of other useful plugin projects, for example the Eclipse Web Tools
Platform (WTP)5, which provides tools for Web service technologies like WSDL
and XML. This enables developers to put the WSMT and the WTP together
to build their Web services and semantically describe them with WSMO. The
process of building ontologies or describing Web services semantically involves
the creation of different types of documents. The main tasks in this process
revolve around four main themes:

 Editing: Firstly the actual descriptions must be created. It is important
that users of different skill levels are supported within the IDE, thus editing
support at different levels of abstraction should be provided. Considering
ontologies, it may be more convenient for the engineer to create an ontology
using a textual representation and then to use a graph based representation
to learn more about the ontology.

 Validating: The most common problem that occurs when creating semantic
descriptions is incorrect modeling. It can be very easy for an engineer to make
a mistake without any tool support. Validation of semantic descriptions is a
non trivial task and validation at both the syntactic and semantic levels can
vastly reduce the time an engineer spends debugging an ontology.

 Testing: Once valid semantic descriptions exist the engineer needs to ensure
that they behave in the expected manner in their intended environment
prior to deploying them. Having testing integrated into the development
environment reduces the overhead of the user performing a lengthy, iterative,
deploy-test scenario.

 Deploying: Ultimately the descriptions created within the development environment must be used in some run-time system. Deploying descriptions
can also be a huge overhead on the engineer and having tool support in an
IDE can prevent mistakes occurring at this crucial stage of the process.

The WSMT focuses on three main areas of functionality, namely the engineering
of WSMO descriptions, creation of mediation mappings and interfacing with
execution environments and external systems. Towards these aims, the Eclipse
editors and views available within the WSMT are broken up into three Eclipse
perspectives6. These perspectives are the WSML, Mapping and SEE perspectives
respectively and are described in the next sections.

3.1 The WSML Perspective

Creating ontology descriptions is a non trivial task that requires the skills of
a trained ontology engineer, and many tools exist for building ontologies in
OWL[16] and RDF(S)[1]. In the case of WSMO the engineer must also be knowledgable about both Ontologies and Web services in order to creation semantic

5 http://www.eclipse.org/webtools/
6 Eclipse perspectives are used to group together editors and views that a given de-

veloper will use while performing a given set of tasks.
?

?

?
descriptions. As already described it is important that tool support exists for
efficiently using the time of this skilled engineer. Within the WSML perspective
a number of tools are provided that allow users of different skill levels to create,
manage and interact with semantic descriptions in the WSMO paradigm. These
tools include:
 WSML Validation: WSMO4J7 is an object model for manipulating WSMO
descriptions and is capable of parsing and serializing WSML documents to
and from this object model. WSMO4J also provides a validator for each of
the 5 WSML variants, which is exploited within the WSMT to validate the
files that are located within the WSMT workspace as the user edits these
documents. This validation ensures that the engineer of the semantic descriptions gets immediate feedback of errors they create, both in the syntax
and the semantics of the semantic descriptions, as they create them.

 WSML Text Editor: Until recently ontology engineers using the WSMO
paradigm would create there WSMO descriptions by hand in a text editor.
It is very tempting when creating a toolkit to abstract away from a text
editor and to provide more advanced editing support; However in many cases
the engineer is more comfortable with editing the raw text of the semantic
description. This is especially true with respect to WSML, as the WSML
human readable syntax is a very lightweight syntax. Within the WSMT we
cater for such users and provide them with additional features including
syntax highlighting, syntax completion, in line error notification, content
folding and bracket highlighting.

 WSML Form based Editor: Moving up from the WSML text editor,
we have abstracted to a form based editor that provides the user with an
intuitive interface for building semantic descriptions by completing forms.
In this editor the user can create new elements related to their semantic
description and specify their properties. Within the editor the user is always
manipulating a WSMO4J object model, which can be serialized to the human
readable syntax by saving the editor.

 WSML Visualizer: The WSML Visualizer[8] is a fully integrated graph
based visualization and editing tool for WSML. The WSML Visualizer allows the engineer to learn more information about their semantic descriptions
as they create them. Normally visualization solutions are bolted on top of
existing ontology engineering solutions after the fact, by providing an integrated solution the user need not switch back and forth between an editing
environment and a visualizer to understand the effects of changes to the on-
tology. The visualizer tries to resolve the graph scalability problem that is
often found with visualization solutions by breaking down the visualization
into multiple levels and allowing the user to browse these levels like in a
web browser. The tool includes manipulation features like zoom and rotate,
along with the ability to filter nodes of a certain type.

 WSML Reasoner View: Semantic descriptions are only useful if they can
eventually be reasoned over and much work is ongoing within the WSML

7 http://wsmo4j.sourceforge.net/

M. Kerrigan et al.

community to create reasoners for all 5 variants of the WSML language. This
view exposes the functionality of the WSML2Reasoner framework, which
currently provides access to the Pellet[14] description logic reasoner and
MINS logic programming reasoner8. The purpose of this view is to allow the
engineer of semantic descriptions to be sure that the descriptions they create
yield the expected results when put into a reasoner.

 Discovery View: When engineers are creating Semantic Web Service de-
scriptions, it must always be at the forefront of their mind that these Web
Service descriptions will ultimately be discovered by a users Goal descrip-
tion. The discovery view can be used in a similar way to the reasoner view
to allow the engineer to check that a specified Goal matches the expected
set of the Web Services in the users workspace, i.e. that the Goal will behave
as expected in a given discovery engine.

3.2 The Mapping Perspective

When enabling interoperability between two business partners it is important
that the data exchanged is correct. However it is unlikely that both partners will
use the same ontology to represent their data. Ontology to ontology mediation
within the WSMX environment is considered as a semi automatic process, where
mappings between two ontologies are created at design time and then applied
automatically at runtime in order to perform instance transformation. Automatic
approaches for creating mappings do exist but their accuracy is relatively low and
we believe that for business to business integration an engineer must be involved
in creating and validating the mappings. This is a non trivial task and the user
should be guided through the process of creating the mappings and ensuring that
they are correct. Within the WSMT all mappings are in the Abstract Mapping
Langauge (AML)[13] syntax, which is formalism neutral, and later grounded to
WSML within WSMX.
 AML Validation: The importance of validating semantic descriptions as
the user creates them was already described in section 3.1, and this is equally
true for the Abstract Mapping Language. Within the WSMT we currently
provide validation for the syntax of AML documents and will extend this to
semantic validation when a validator for the AML semantics is available.

 AML Text Editor: The Abstract Mapping Language Text Editor provides
a text editor for the human readable syntax of the AML. It features similar
features to that of the WSML human readable text editor including syntax
highlighting, in line error notification, content folding and bracket highlight-
ing. This editor enables the engineer to create or modify mappings through
textual descriptions, this is especially useful for tweaking mappings that have
been produced by other editors.

 AML View Based Editor: The AML View Based Editor provides a graphical means to create mappings between ontologies. It is often the case that
the expert that understands the problem domain and is capable of aligning

8 http://tools.deri.org/mins/
?

?

?
the two ontologies is not also a specialist in logics. The suggestion of possible
mappings is done by using a set of algorithms for both lexical and structural
analysis of the concepts. Additionally, the guidance is offered by decomposition and context updates. As described in [11], the graphical point of view
adopted to visualize the source and target ontologies makes it easier to identify certain types of mismatches. This viewpoints are called perspectives and
it is argued that by using combinations of these perspectives on the source
and target ontologies, certain types of mappings can be created using only
one simple operation, map, combined with mechanisms for ontology traversal
and contextualized visualization strategies.

 AML Mapping Views: The AML Mapping Views have the role of providing a light overview on the mappings created either by using the AML
Text Editor or the AML View Based Editor. Instead of seeing the full description of mappings it is also useful to see a more condensed version of
this information with the entities in the source and in the target that are
mapped and the conditions associated with them. For this purpose there been
four types of Eclipse views defined (Concept2Concept, Attribute2Attribute,
Concept2Attribute and Attribute2Concept), each corresponding to the combinations of the entities that can participate in a mapping.

 MUnit Testing View: Mappings must be updated as ontologies evolve,
it can be hard for the engineer to be aware of the effects that these constant changes have. The MUnit unit testing view for the Abstract Mapping
Language gives the engineer support to ensure that instances are correctly
transformed. The user can define pairs of sources and targets, specifying that
the result of transforming the sources, using the existing mappings, should
be the targets. These tests can then be incrementally run by the engineer
when validation of the mappings is required.

3.3 The SEE Perspective

Ultimately the purpose of creating semantic descriptions in WSMO and defining
mappings between ontologies is to allow automation of the Web service usage
process and to bind requester and provider at runtime with minimal human
intervention. As described in section 2, Semantic Execution Environments, like
WSMX and IRSIII provide automatic discovery, composition, selection, media-
tion, and invocation of Semantic Web Services. Many of the tasks performed by
the Semantic Web Service engineer involve interfacing with these SEEs. Functionality is provided within the WSMT to reduce the effort normally spent interacting with these environments.

 Integration with WSMX: WSMX exposes a number of Web service interfaces that give access to its functions. These Web services can be split into
two categories, namely services related to executing WSMX and services related to storing and retrieving descriptions. The SEE Perspective provides
access to both of these types of services, users can right click on WSML

M. Kerrigan et al.

and AML documents in the workspace and use the descriptions contained
within these documents to invoke the entry points of WSMX i.e. Achieve-
Goal, InvokeWebService or these descriptions can be stored to the internal
repositories of WSMX. The SEE perspective also shows all the descriptions
currently stored within the WSMX repositories and allows the user to download these descriptions into their workspace.

 Integration with IRSIII: Similar functionality as for the WSMX system
is available for the IRSIII system. One interesting difference is that all data
within IRSIII is described in terms of the Open Universities OCML[12] for-
mat, and the WSMT must translate back and forth from this format when
sending data to or retrieving data from IRSIII.

4 Related Work

This section outlines other efforts in the direction of creating integrated environments aiding users of semantic technologies. For this we have selected the most
popular tool for creating ontologies in OWL, namely the Prot eg e OWL Plugin,
along with WSMO Studio, which is the closest alternative to the WSMT for
creating WSMO descriptions.

Prot eg e[6] is a free open source ontology engineering environment that can be
extended to support different ontology formats. Through a collection of these extensions Prot eg e currently supports Frames, XML Schema, RDF(S) and OWL.
The Prot eg e OWL Plugin[9] was developed at Stanford Medical Informatics9
as a tool for editing the Web Ontology Language (OWL)[16]. The plugin attempts to abstract the user away from the underlying OWL RDF syntax and
provides a number of graphical widgets that can be accessed by the user for
building ontologies and creating instance data. The Prot eg e OWL Plugin can
also be extended with plugins, existing plugins provide functionality for visualizing OWL ontologies, integrating with OWL reasoners etc. The main limitation
of Prot eg e is that, while it is the standard toolkit used within the Semantic Web
community for building ontologies, other tools are not integrated with this en-
vironment. Semantics will soon be present in many different parts of computer
science and as already described integrating Semantic Web tools into the Eclipse
framework allows for them to be used side by side with other toolkits like the
Java Development Toolkit (JDT) or Web Tools Platform (WTP).

WSMO Studio[3] is a collection of tools for editing WSMO descriptions developed for the Eclipse Framework by OntoText Labs10, Sirma. WSMO Studio
offers the engineer functionality for editing WSMO descriptions through the
WSML paradigm. The main difference between the WSMT and WSMO Studio
is the level of abstraction. WSMO Studio focuses squarely on editing descriptions at the form based level and provides only basic functionality in a text editor
for WSML, i.e. Syntax highlighting and no ontology visualization functionality.

9 http://smi.stanford.edu/
10 http://www.ontotext.com
?

?

?
With respect to Semantic Execution Environments, WSMO Studio has functionality for invoking the IRSIII system through its repositories view but does not
provide any functionality for integrating with WSMX. The choice of Eclipse by
both environments allows for the tools of each, which in many ways complement
each other, to be placed in the same application.

5 Conclusions and Future Work

This paper has described the need for an Integrated Development Environment
for the Semantic Web and for Semantic Web Services. It has also introduced
the Web Service Modeling Toolkit (WSMT), which aims to provide such an
IDE to improve the productivity of engineers of semantic descriptions. Section 3
introduced the concepts of editing, validating, testing and deploying in an
IDE. The following table shows how the Web Service Modeling Toolkit meets
these four concepts for each of the descriptions that it supports:

Feature
Editing
Validating
Testing
Deploying

Ontology, Web Service & Goal
Text, Form & Graph
Syntactic & Semantic
Reasoning View & Discovery View
SEE Perspective

Mappings
Text & Dual Tree
Syntactic
MUnit View
SEE Perspective

Future work in the WSMT includes automation of the process of ensuring
that semantic description behave as expected, by the addition of unit testing
functionality for WSML. This unit testing functionality will allow the user to
ensure that their ontologies behave in the expected way as they evolve. Further
integration with the WSMX and IRSIII systems will also be added to the SEE
perspective, allowing the user to visualize the processes that are executing within
the Semantic Execution Environments. Thus allowing engineers to debug their
descriptions with respect to their behavior within a SEE.

Acknowledgments

The work is funded by the European Commission under the projects ASG,
DIP, enIRaF, InfraWebs, Knowledge Web, Musing, Salero, SEKT, SEEMP, Se-
manticGOV, Super, SWING and TripCom; by Science Foundation Ireland under the DERI-Lion Grant No.SFI/02/CE1/I13 ; by the FFG (  Osterreichische
Forschungsf orderungsgeselleschaft mbH) under the projects Grisino, RW2, Sem-
NetMan, SeNSE, TSC and OnTourism.

M. Kerrigan et al.
