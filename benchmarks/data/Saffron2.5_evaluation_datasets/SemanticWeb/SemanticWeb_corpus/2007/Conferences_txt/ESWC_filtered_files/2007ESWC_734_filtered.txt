Semantic Composition of Lecture Subparts for a

Personalized e-Learning

Naouel Karam, Serge Linckels, and Christoph Meinel

{naouel.karam,serge.linckels,christoph.meinel}@hpi.uni-potsdam.de

HPI, University of Potsdam, Germany

Abstract. In this paper we propose an algorithm for personalized learning based on a users query and a repository of lecture subparts i.e.,
learning objects both are described in a subset of OWL-DL. It works
in two steps. First, it retrieves lecture subparts that cover as much as
possible the users query. The solution is based on the concept covering
problem for which we present a modified algorithm. Second, an appropriate sequence of lecture subparts is generated. Indeed, the different
lecture subparts are only reachable when a given prerequisite is fulfilled,
i.e., the learner must have a minimal background knowledge to be able to
assimilate the requested learning object. Therefore, our algorithm takes
into account the users knowledge to generate a personalized lecture composition and suggests a flow of learning objects to the user.

1 Introduction

The Semantic Web aims to provide computer-processable information on the
Internet. It extends the current Web through the use of standards, markup
languages and related processing tools. The recent development of Semantic Web
technologies has a great impact on e-Learning. Indeed, the semantic annotation
of learning resources for the aim of automated retrieval and sequencing is fully
in the stream of the Semantic Web. Recent efforts on standardization led to the
definition of Learning Objects (LOs) as reusable units of educational content
that can be sequenced into larger units to allow personalized learning [17,11].

The availability of LOs in electronic form increases dramatically. Hence, the
task of finding the appropriate information becomes more and more awkward
and time consuming.

In this paper we propose the algorithm LectureComposer for personalized
learning that takes as input a users query and a repository of LOs, both described in a subset of OWL-DL. The algorithm works in two steps. First, it
retrieves LOs that cover as much as possible the users query. Note that these
LOs can belong to different original lectures. Second, it composes a sequence of
LOs according to required prerequisites. The composition takes into account the
users knowledge about the subject in order to propose the best sequence for the
retrieved LOs.

E. Franconi, M. Kifer, and W. May (Eds.): ESWC 2007, LNCS 4519, pp. 716728, 2007.
c Springer-Verlag Berlin Heidelberg 2007
?

?

?
For the first issue, we propose to use the concept covering problem, recently

introduced for a subset of OWL-DL [9]. It is stated as follows:

Given an ontology T and a query description Q, find a combination of
concepts from T that contains as much as possible of common information with Q and as less as possible of extra information w.r.t. Q.

In our solution the concept covering problem allows to select a subset of LOs

from the repository that covers as much as possible the users query.

The work presented here has been developed in the context of the Web University project [2], which aims at exploring novel internet- and IT-technologies
in order to enhance university teaching and research. Our solution can be used
by learners to dynamically compose a personalized lecture according to their
needs and according to their current knowledge about the subject. It is able to
identify the missing information in the yielded resultsi.e., the data that is not
available in the repositoryand the required parts that are needed to fulfill the
users background knowledge. Our solution is particularly interesting for education in a self-directed learning environment, where it fosters autonomous and
exploratory learning. It will be integrated to the e-Librarian Service "CHESt"
[14] which allows students to enter questions in natural language, and yields only
semantically relevant multimedia resources to the students needs.

The remainder of the paper is organized as follows. Section 2 presents an
overview of Description Logics and recalls the definition of the concept covering
problem. Section 3 describes the formalization of the LO composition problem.
Our proposed algorithm is detailed in section 4. An illustration of the algorithm
is given in section 5. Section 6 concludes the paper and outlines future work.

2 Description Logics

Description Logics (DLs) [5] are a family of knowledge representation formalisms
that allow to represent the knowledge of an application domain in a structured
way and to reason about this knowledge. DLs play an important role in the
definition of languages for the Semantic Web [3]. Indeed, the OWL sub-language
OWL-DL is based on DLs.

2.1 Preliminaries

In DLs, the conceptual knowledge of an application domain is represented in
terms of concepts (unary predicates) such as Network and Protocol, and roles
(binary predicates) such as hasProtocol and hasTopology. Concepts denote sets
of individuals and roles denote binary relations between individuals.

Based on basic concept and role names, complex concept descriptions are built
inductively using concept constructors. The different DLs languages distinguish

N. Karam, S. Linckels, and C. Meinel

main and the empty set respectively,

themselves by the kind of constructs they allow. Examples of concept constructs
are the following:
 top-concept  and bottom-concept  denote all the individuals in the do-
 conjunction , e.g., StarTopology  RingTopology denotes topologies that are
 value restriction r.C, e.g., Network hasTopology.StarTopology denotes net-
 existential restriction r.C, e.g., Network  hasProtocol.TCPIP denotes net-

both, star and ring topology (mixed topology),

works that have only a star topology,

works that support the TCP/IP protocol.

Concept descriptions are used to specify terminologies that define the intentional knowledge of an application domain. Terminologies are composed of
inclusion assertions and definitions. The first impose necessary conditions for an
individual to belong to a concept, e.g., to impose that Internet is, among other
things, a network that supports only the protocol TCP/IP, one can use the
inclusion assertion: Internet  Network  hasProtocol.TCPIP. Definitions allow
to give a meaningful name to concept descriptions, e.g., to define that a home
network is a LAN based only on a star topology one can write: HomeNetwork .=
LAN  hasTopology.StarTopology.

top

Protocol

Network

Topology

RingTopology

StarTopology

BusTopology

Fig. 1. Sample of a concept hierarchy about networking

DL systems provide various reasoning services. One of the most important is
subsumption, which is the basis of the concept hierarchy (see figure 1). Formally, a
concept description D subsumes a concept description C (noted C  D) if every
interpretation assigns to C a set of individuals included in the one assigned to D.
By opposition to early standard inferences in DLs, newly introduced inferences
are called non standard inferences. Among these inferences we use the least
common subsumer [4], which stands for the least concept description (w.r.t.
subsumption) that subsumes a given set of concept descriptions.

Another non standard inference is the difference operation. Introduced in [16],
it allows to remove from a given description all the information contained in another description. In some DLs, the difference may contain descriptions which
?

?

?
are not semantically equivalent. Teege defines necessary conditions for a DL to
have a semantically unique difference. Those DLs are said with structural sub-
sumption. Among others, the language ELwhich allows for conjunction (),
existential restriction (r.C) and the top concept ()satisfies this property.
We use this language in the context of our project. In DLs with structural sub-
sumption, the subsumption test can be reduced to the test of inclusion between
clause1 sets. See [16] for further details.
This definition of difference requires that the second argument subsumes the
first one. However, the difference C  D between two incomparable descriptions
C and D can be given by constructing the least common subsumer of C and D:
C  D = C  lcs(C, D).

2.2 The Concept Covering Problem
The concept covering problem [9] defines a cover of a concept C w.r.t. a terminology T as being the conjunction of some defined concepts in T that share
some information with Q. Based on two non standard inferences in DLsi.e., the
least common subsumer (lcs), and the difference operationa cover is formally
defined as follows:
Definition 1. Let L be a DL with structural subsumption, T be an L-terminology
and ST = {Si, i  [1, n]} the set of concept definitions occurring in T . A cover of a
L-concept description Q   using the terminology T is a conjunction E of some
names Si from T such that Q  lcs(Q, E)  Q.
The best cover is defined based on the remaining information in the query (called
Rest) and in the cover (called M iss).
Definition 2. Let Q be an L-concept description and E a cover of Q using T .
The rest of Q w.r.t. to E, written RestE(Q) is defined as follows: RestE(Q) .=
Q  lcsT (Q, E).
M issE(Q) .= E  lcsT (Q, E).
The best cover is the one with the smallest Rest and Miss.

The missing information of Q w.r.t. E written M issE(Q) is defined as follows:

Definition 3. A concept description E is called a best cover of Q using a terminology T iff:
 E is a cover of Q using T , and
 there

that
(|RestE(Q)| ,|M issE(Q)|) < (|RestE(Q)| ,|M issE(Q)|), where RestE(Q)
= Q  lcsT (Q, E), M issE(Q) = E  lcsT (Q, E), and < stands for the
lexicographic order.

of Q using

does not

exists

a

cover E
?

?

?
such

An algorithm to compute the best cover based on hypergraphs theory was introduced in [9]. It is defined for DLs with structural subsumption.
1 A clause is a term of conjunction that cannot be decomposed into the conjunction

of other terms.

N. Karam, S. Linckels, and C. Meinel

3 The LO Composition Problem

3.1 The Notions of Learning Object and Composition Flow

We suppose that lectures (or other educational content) can be split into sub-
parts. Each subpart is an educational entity that is about a precise subject in
the lecture. We call such a subpart a Learning Object (LO). For example, we
split a 90 minutes lecture about "Internetworking" that contains 80 slides into
27 LOs.

Related projects like [7] search for a set of LOs w.r.t. a users query that
is reachable with the users knowledge. However, if the users knowledge is not
sufficient to reach the requested LO, no result is returned at all. Our solution
returns a result even if the users knowledge is not sufficient. In that case, the
missing knowledge is identified and added to the proposed composition flow.
The problem is formalized as follows. Given a learning request Q and a repository of learning objects {LO1, ..., LOn}, find a composition of LOs that covers
the users query as much as possible.

Some LOs may require prerequisites. This means that the users background
knowledge must satisfy the prerequisites before he can reach the requested LOs.
In our solution, the LOs are organized in a way that the user can acquire such required knowledge by reading other LOs. Those complementary LOs are detected
by the system and added to the resulting composition flow.

3.2 Computing the Lecture Cover
The users query and his background knowledge are denoted Q and BK respec-
tively. The knowledge offered by a learning object LOi and the prerequisites
required to reach that LO are denoted LOi and PRi respectively. If the user
has no knowledge about the subject, then BK = . In the same way, when no
prerequisites are needed to reach a LOi, then PRi = .
S = {LO1, ..., LOn}:
 LOS denotes the knowledge offered by all the LOs in S, i.e., the conjunction
 PRS denotes the prerequisites needed to access all the LOs in S, i.e., the

For the sake of clarity, we use the following notations. Given a set of LOs

LO1  ...  LOn,
conjunction PR1  ...  PRn.

Self-contained Set of LOs. A self-contained set of LOs w.r.t. a background
knowledge BK must satisfy the following conditions:
 at least one LO is reachable with the users background knowledge BK, and
 every remaining LO must be reachable with the background knowledge BK

augmented by the knowledge offered by some other LOs.

Formally, a self-contained set against a background knowledge is defined as

follows.
?

?

?
Definition 4. Given a set of LOs S = {LO1, ..., LOn}, S is a self-contained set
against a background knowledge BK if:
 there exists at least one LOi, 1  i  n such that BK  PRi, and
 1  i  n, if BK  PRi then there exists a set Sp  S such that BK 

LOSp

 PRi.

Lecture Cover. We define a lecture cover according to a users query as a
self-contained set against the users background knowledge that shares some
information with the query.
Definition 5. Let L be a DL with structural subsumption, Q a L-concept de-
scription, S = {LOi, i  [1, k]} a set of LOs and T = {LOi, i  [1, k]} a
L-terminology describing the knowledge offered by S. A lecture cover Sc is a set
of LOs Sc  S such that:
 S is a self-contained set against BK, and
 Q  lcsT (LOSc, Q)  Q.
The best lecture cover is the one with the minimal non-covered part in the query.

Definition 6. A best lecture cover of a query Q over a set of LOs S is a set
Sc  S such that:
 Sc is a lecture cover of Q, and

 there exists no lecture cover S
c of Q using S such that
?

?

?
 <
c, Q)
|Q  lcsT (LOSc, Q)|, where < is the lexicographic order from the definition 3.

Q  lcsT (LOS
?

?

?
3.3 Computing the Flow
Once the lecture cover Sc is computed, the identified LOs are assembled into an
appropriated sequence, called the composition flow. The method is the following:
 at each step:

 compute the set of LOs reachable with the users background knowledge
(BK), noted Sr, with Sr  Sc,
 add the set Sr to the composition flow,
 remove Sr from Sc,
 update the users knowledge (BK) with the knowledge of the LOs in Sr:
= BK  LOSr,
BK

 the process stops when no more LO remains in the lecture cover Sc.
Remark 1. We suppose that no cycle can occur in a self-contained set S. We
define the notion of cycle in a set of LOs S as follows. Let LO1 and LO2 be
LOs in S. We say that LO1 directly requires LO2 if LO2  C  PR1, where
C is some concept description. We call "requires" the transitive closure of the
relation "directly requires". Then, S contains a cycle iff there exists a LO in S
that requires itself.

N. Karam, S. Linckels, and C. Meinel

4 An Algorithm for Lecture Composition

Our algorithm to solve the LO composition problem is called LectureComposer.
It is based on the algorithm ComputeBCov proposed in [9] for solving the best
covering problem.

4.1 The Best Covering Algorithm

The problem of computing the best covers of a concept is reduced to searching
for transversals with minimal cost of a hypergraph constructed from T and Q.
Before describing the process we recall the definition of a hypergraph and a
transversal.
Definition 7. A hypergraph H is a pair (,  ) of a finite set  = {V1, ..., Vn}
and a set  of subsets of . The elements of  are called vertices, and the
elements of  are called edges.

A transversal of a hypergraph is a subset that hits all the edges of the hypergraph.
Formally, it is defined as follows.
Definition 8. A set T   is a transversal of H if for each 	   , T  	 = .
A transversal is minimal if no proper subset T
According to [9], we build the hypergraph HSQ corresponding to a concept Q
and a set of LOs S = {LOi, i  [1, k]} as follows:
 each concept name LOi, i  [1, k] is associated with a vertex VLOi, and
 each clause Ai  Q is associated to an edge eAi with eAi = {VLOi
|
Ai  lcs(Q,LOi)}, where  stands for membership modulo equivalence2
of clauses.

 of T is a transversal.

The algorithm follows a classical approach for computing the minimal transversals with some improvements. It works in n steps, where n is the number of edges
in the hypergraph. Starting from an empty set of transversals, it explores each
edge of the hypergraphone edge in each stepand generates a set of candidate
transversals by computing all the possible unions between the candidates generated in the previous step and each vertex in the considered edge. At each step,
the non-minimal candidate transversals are pruned. Heuristics and combinatorial
optimization techniques [6] are used to discard non-minimal transversals at early
steps.

As our definition of the best cover does not take into account a preference
criteria between best covers, it is not necessary to compute all the transversals
of the hypergraph. Thus, we adopt a deep first strategy for computing transversals as described in [13]. The idea is to compute a transversal of the partial
hypergraph and then add the next hyperedge to it. Instead of computing all the
transversals that follow, pick only one and add the next hyperedge. When no
2 Two concept descriptions C and D are called equivalent (C  D) if C
I for all
interpretations I.

= D
?

?

?
more hyperedge remains, the algorithm backtracks to the previous level and picks
the next transversal, etc. In this way the first transversal is displayed quickly.
As we need only one transversal, the process can stop after the computation of
the first transversal. We call the modified algorithm ComputeFirstBCov.

In summary, our algorithm computes from all possible best concept covers
only the first one that it finds. The advantage is that a solutioni.e., a best
coveris found quickly, because not all combinations in the hypergraph have to
be explored.

4.2 The Composition Algorithm

Our algorithm (depicted in figure 2) takes as input a query Q and a set of LOs S.
First, the best cover of Q w.r.t. S is computed (line 1). As explained in section 4.1,
this corresponds to identifying the LOs that cover best the users query. The result
of the cover is the first transversal T r of the corresponding hypergraph HSQ.

Require: a query Q, a set of LOs S = {LOi, i  [1, k]}.
Ensure: T r
1: T r = ComputeF irstBCov(S, Q)
2: P = PRT r  lcsT (BK  LOT r,PRT r)
3: while P   do
4:
5:
6:
7:
8: end while

end for
P = PRT r  lcsT (BK  LOT r,PRT r)

for each edge E  P do

T r  the next transversal obtained by adding E to  .

Fig. 2. The algorithm LectureComposer

Second, the prerequisitesto reach the LOs in the lecture coverare updated
(line 2). All the prerequisites that are not covered by the users background
knowledge or by the knowledge given by other LOs in T r are identified.

Third, the best cover for the required prerequisites is computed. Technically,
the hyperedges of each clause in the prerequisites definitions are added incrementally following the deep-first strategy, and the transversal of the obtained
hypergraph is computed (lines 4  6). The notation P is used to denote the set
of hyperedges corresponding to the clauses of the concept description P .

Again the prerequisites are updated as described above (line 7).
The process is repeated until no more uncovered prerequisites remain (line 3).
We ensure that the algorithm terminates because all the prerequisites are in

the repository and because no cycle can occur (see remark 1).

The next theorem proves that the algorithm LectureComposer returns a
transversal T r that corresponds to the best composed lecture cover of the query
Q over a set of LOs S.
?

?

?
Theorem 1. Let L be a DL with structural subsumption, Q a L-concept descrip-
tion, S = {LOi, i  [1, k]} a set of LOs. Then, T r = LectureComposer(Q, S) is
the best composed lecture cover of Q over S.

LOT r  PRi,

Proof. According to definitions 4, 5 and 6 about the best lecture cover of Q
over S, T r must satisfy the following properties:
(1) there exists at least one LOi, 1  i  n such that BK  PRi,
(2) 1  i  n, if BK  PRi then there exists a set T r  S such that BK 
(3) Q  lcsT (LOT r, Q)  Q, where T = {LOi, i  [1, k]} is the L-terminology
describing the knowledge offered by S,
 of Q using S such that |Q  lcsT (LOT r, Q)|
< |Q  lcsT (LOT r, Q)|, where < is the lexicographic order of definition 3.
Points (3) and (4) follow directly from the definition of the best cover of a

(4) there exists no lecture cover T r

concept w.r.t. a terminology.

Let us prove point (2). The algorithm returns a set T r verifying:

PRT r  lcsT (BK  LOT r,PRT r) = 
?

?

?
1in P ri  lcsT (BK  LOT r,PRT r) = , which again
This is equivalent to:
is equivalent to: P ri  lcsT (BK  LOT r,PRT r) = ,1  i  n. From the
definition of the difference operator we now that, if C  D = E then C  E  D,
so we can write:

lcsT (BK  LOT r,PRT r)  PRi,1  i  n

It follows that:

BK  LOT r  PRi,1  i  n

Thus, we have proven point (2). Let us now turn to point (1). We have proven
in point (2) that LOT r  BK  PRi,1  i  n. Now we must prove that for
at least one i  [0, 1] we have BK  PRi. In other terms, this means that for at
least one i  [0, 1] we must prove that LOT r  PRi.
Let j  [0, 1], we have: BKLOT r  PRj. For all LOi  LOT r, LOi  PRj,
otherwise a cycle occurs in T r. But as stated in remark 1, we suppose that S
is acyclic. Thus, there exists at least one j such that BK  PRj and we have
proven point (1).

5 Illustrating Example

The example is based on a lecture about networking that can be found in the
online tele-TASK archive [1]. A sample of the different LOs in the lecture with
their corresponding prerequisites is shown in figure 3.
The example shows that the LO introducing computer networks (LO1) can
be accessed by beginners because it requires no initial knowledge. The LO about
?

?

?
LO1
LO2
LO3
LO4
LO5
LO6
LO7
LO8
LO9

= 
.
= 
.
= 
.
= 
.
= 
.
= 
.
= 
.
= 
.
= 
.

PR1
PR2
PR3
PR4
PR5
PR6
PR7
PR8
PR9

= 
.
= 
.
= 
.
= 
.
= 
.
= 
.
= 
.
= 
.
= 
.



Fig. 3. Examples of LO descriptions and their corresponding prerequisites

star topology (LO7) requires some knowledge about topologies in general (LO6)
and about LAN (LO3). Therefore, this LO can only be accessed if the users
background knowledge BK fulfills this requirements.

Let us suppose that the user wants to learn something about topologies in
general and star topology in particular, and that he has a basic knowledge about
computer networks. Formally, this is written as follows:
.= structure.Topology topology.StarTopology

BK .= communicationSystem.Network
The associated hypergraph HSQ = (,  ) consists on the vertices  =
} and the edges  = {estructure.Topology,etopology.StarTopology}.
} (see figure 4). It covers

{VLO1 , ..., VLO9
The only minimal transversal is T r = {VLO6 , VLO7
completely the query.

V

V

structure.Topology

topology.StarTopology

Fig. 4. The hypergraph HSQ

The prerequisites required for the set T r are:

PRT r =communicationSystem.Networkstructure.TopologyNetwork.LAN
The part of prerequisites that are not covered by the users background knowl-

edge or by other LOs is:

P = network.LAN

The new hypergraph H

is shown in figure 5.

SQ that is obtained by adding the hyperedges in P

N. Karam, S. Linckels, and C. Meinel

V

V

structure.Topology

topology.StarTopology

V

Fig. 5. The hypergraph H

network.LAN

The new minimal transversal is then T r = {VLO6 , VLO7, VLO3

}. The prereq-

uisites needed for it are:
PRT r =communicationSystem.Networkstructure.Topologynetwork.LAN
The part of prerequisites not covered by the user background knowledge or

by other LOs is:

P = 

Thus, the algorithm stops and returns LO6, LO7 and LO3. Although, LO3 is
not directly requested by the useri.e., it is not a cover of the users query
it is needed to fulfill the missing prerequisite since the user must have some
knowledge about LAN before being able to learn something about star topology.

6 Discussion

In this paper we have proposed a novel algorithm for personalized lecture composition based on lecture subparts. We used two non-standard inferences in DLs
i.e., the least common subsumer (lcs), and the difference operationto compute
the best cover of the users query w.r.t. a repository of LOs. Then, the LOs are
assembled into a composition flow. The algorithm takes into account the users
knowledge as well as the sequencing constraints between the LOs in order to
retrieve a comprehensive and self-contained composition flow.

A lot of recent work has focused on personalized e-learning and composition of
LOs [12,7,8,10]. The work presented in [7] is closely related to ours. The authors
introduced a new definition of the concept covering problem that eliminates the
limitation of the DLs to have structural subsumption. It is based on the concept
abduction problem (CAP) which was introduced in [15] to provide an explanation when subsumption does not hold. But, the proposed algorithm returns a
cover which is not necessarily the best one.

As DLs with structural subsumption are expressive enough for our application,
we chose to use the algorithm of Hacid & al. [9] because it always returns the
best cover. Also compared to [7], the novelty of our approach is that it always
?

?

?
proposes a solution to the user. When the users knowledge is not sufficient, our
algorithm looks for complementary LOs and adds them to the composition flow
in order to fill the missing knowledge.

Currently, we are improving our prototype that will be integrated in the Web
interface of the online tele-TASK archive [1]. Experiments on real scenarios will
be conducted on a set of lectures about "Internetworking". For this purpose, an
appropriated domain ontology is under development.

In future work, we will improve our algorithm by taking into account further criteria for the best composition. We will consider minimizing a number of
parameters like the number of retrieved LOs, optimizing the length of the composition flow, and the number of original lectures involved in the composition
flow.
