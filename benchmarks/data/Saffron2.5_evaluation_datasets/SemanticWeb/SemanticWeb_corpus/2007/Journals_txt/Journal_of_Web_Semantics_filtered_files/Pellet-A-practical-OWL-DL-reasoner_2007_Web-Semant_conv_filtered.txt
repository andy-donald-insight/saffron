Web Semantics: Science, Services and Agents

on the World Wide Web 5 (2007) 5153

Evren Sirin


Pellet: A practical OWL-DL reasoner

, Bijan Parsia, Bernardo Cuenca Grau, Aditya Kalyanpur, Yarden Katz

University of Maryland, MIND Lab, 8400 Baltimore Ave, College Park, MD 20742, USA

Received 3 November 2005; accepted 29 March 2007

Available online 7 April 2007

Abstract

In this paper, we present a brief overview of Pellet: a complete OWL-DL reasoner with acceptable to very good performance, extensive
middleware, and a number of unique features. Pellet is the first sound and complete OWL-DL reasoner with extensive support for reasoning
with individuals (including nominal support and conjunctive query), user-defined datatypes, and debugging support for ontologies. It implements
several extensions to OWL-DL including a combination formalism for OWL-DL ontologies, a non-monotonic operator, and preliminary support
for OWL/Rule hybrid reasoning. Pellet is written in Java and is open source.
 2007 Published by Elsevier B.V.

Keywords: Web Ontology Language; Description logics; Tableau Theorem Proving

1. Introduction

Pellet started as a proof of concept system to help meet the
W3Cs implementation experience requirements for the Web
Ontology Language (OWL). It has since become a practical and
popular tool for working with OWL. Pellet has been the first
reasoner to support all of OWL-DL, i.e. the Description Logic
(DL) SHOIN(D), and recently has been extended to support
the new features proposed in the so-called OWL 1.1 effort,1 i.e.
the DL SROIQ(D). OWL 1.1 extends OWL-DL with qualified
cardinality restrictions, complex subproperty axioms (between
a property and a property chain), local reflexivity restrictions,
reflexive, irreflexive, symmetric and anti-symmetric properties,
disjoint properties.

Pellet is implemented in Java and is open sourced under a
liberal license. It offers a panoply of features including conjunctive query answering, rule support, E-Connection reasoning, and
axiom pinpointing, among others. To make its reasoning capabilities easily accessible to users, Pellet provides various interfaces
including a command-line interface, an interactive Web form
for zero-install use, DIG server implementation, and API bind-


Corresponding author. Tel.: +1 301 405 7027; fax: +1 301 405 6707.
E-mail addresses: evren@cs.umd.edu (E. Sirin), bparsia@isr.umd.edu
(B. Parsia), bernardo@mindlab.umd.edu (B.C. Grau), aditya@cs.umd.edu
(A. Kalyanpur), yarden@umd.edu (Y. Katz).
1 http://www.owl1 1.cs.manchester.ac.uk/.

1570-8268/$  see front matter  2007 Published by Elsevier B.V.
doi:10.1016/j.websem.2007.03.004

ings for RDF/OWL toolkits Jena and Manchester OWL-API.
In this paper, we provide a brief summary of Pellets architec-
ture, features and special capabilities. For more details, we refer
the reader to the technical report [1] and the Pellet Web site:
http://pellet.owldl.com.

2. Implementation and optimizations

2.1. System architecture

Fig. 1 shows the main components of Pellet. Pellet, in its core,
is a Description Logic reasoner based on tableaux algorithms.
The tableaux reasoner checks the consistency of a knowledge
base and all the other reasoning services are reduced to consistency checking. The reasoner is designed so that different
tableaux algorithms can be plugged in. The default algorithm
handles SROIQ(D) but there are several other tableaux algorithms implemented, e.g. for non-monotonic extensions and for
integration with rules.

2.2. Optimizations

Pellet implements most of the state of the art optimization
techniques provided in the DL literature including Nor-
malization, Simplification, Absorption, Semantic Branching,
Backjumping, Caching Satisfiability Status, Top-Bottom Search
for Classification, and Model Merging (see [2] for details about
these techniques).

E. Sirin et al. / Web Semantics: Science, Services and Agents on the World Wide Web 5 (2007) 5153

Fig. 1. Main components of the Pellet reasoner.

In addition, Pellet incorporates several novel optimizations to
improve the reasoning performance in the presence of nominals
(enumerated classes) and individuals. Reasoning with nominals
is especially challenging since some of the existing optimizations in DL reasoners, such as Chain Contraction, are not
applicable anymore. Moreover, in the presence of nominals,
assertions about instances can affect the concept satisfiability
and classification results. We have developed a suite of new
optimizations to tackle this problem. Two key ones are (see [3]
for the rest) are Nominal Absorption, a technique where axioms
involving enumerations are absorbed into type assertions, and
Nominal-based Model Merging, a technique to detect obvious
non-subsumptions and non-instantiations by exploiting the fact
that nominals always have a fixed interpretation in the domain.
These optimizations prove sufficient to handle even the notoriously difficult Wine ontology, and, indeed, all ontologies with
nominals we have encountered.

Another novel optimization technique implemented in Pellet
is for incremental reasoning against dynamic knowledge bases.
In many contexts (ontology editors, web portals, sensor streams),
the knowledge base is in constant flux. We have developed techniques [4] to reuse the reasoning results from previous steps
to process updates incrementally. Our preliminary results show
up to three orders of magnitude improvement after an ABox
addition or deletion.

3. Features and capabilities

3.1. Conjunctive ABox query

Pellet includes a query engine that can efficiently answer
conjunctive ABox queries expressed in SPARQL or RDQL. In
the presence of non-distinguished variables in the query, the
rolling-up technique is used to answer tree-shaped queries.
Otherwise, every query atom can be answered in isolation and
arbitrary shaped queries can be handled. For such queries, the
two factors affecting the query answering time are the number of
atoms in the query and the order these atoms are evaluated. Pellet
has two optimization techniques to deal with these cases: Query
Simplification, finding redundant atoms in the query by using
domain/range axioms, and Query Reordering, sorting the query

atoms by utilizing a randomized sampling technique as adopted
in relational databases. These techniques have been shown to be
very effective in practice [5].

3.2. Datatype reasoning

Pellet uses the type system approach to support reasoning
with datatypes. In particular, Pellet has a datatype oracle that
can reason with XML Schema based datatypes. The datatype
oracle can check the consistency of conjunctions of (built-in or
derived) XML Schema datatypes. Pellet supports user derived
types based on numeric or date/time types so, for example,
numeric or date/time intervals can be defined and used as new
datatypes.

3.3. Axiom pinpointing and debugging

Axiom pinpointing is a non-standard DL inference service
that provides a justification for any arbitrary entailment derived
by a reasoner from an OWL-DL knowledge base. Given an ontology and any of its logical consequences, the axiom pinpointing
service determines the premises in the KB that are sufficient for
the entailment to hold. The justification is useful for understanding the output of the reasoner, which is key for many tasks, such
as ontology debugging, design and evolution.

Axiom pinpointing is achieved by tracking the original source
axioms from the ontology as they are modified and used throughout the tableaux algorithm. As a result, when an inconsistency is
detected in the ontology, a single set of axioms causing the problem can be extracted. Our experiments [6] show that finding a
single justification involves almost no computational overhead.
Pellet can also determine all the justifications for an entailment by combining axiom tracing with a variant of Reiters
well-known hitting set algorithm.

3.4. Integration with rules formalism

Pellet is coupled with a Datalog reasoner to implement the
AL-Log framework for combining DLs with rules. AL-Log
[7] combines Datalog and DLs by allowing DL classes to be
used in the body of a rule. In our implementation, we extend

the AL-Log framework to use SHOIQ(D) (rather then the less
expressive ALC language used in the original paper) and allow
OWL datatypes and SWRL built-ins in the antecedent of Datalog
rules.

Pellet also has an experimental

implementation of a
direct tableau algorithm for integrating DL-safe rules with
SHOIQ(D). Preliminary empirical results [8] have been
encouraging and we think that the DL-safe implementation is
practical for small to mid-sized ontologies especially when the
full expressivity of SHOIQ(D) is needed.
3.5. Multi-ontology reasoning using E-Connections

In addition to the owl:imports mechanism, Pellet
supports a novel ontology combination technique based on E-
Connections to reason with multiple ontologies. E-Connections
are a general framework for combining several families of decidable logics and in [9] we describe tableau algorithms to combine
DLs of varying expressivity. Using this technique, ontologies
can be linked to each other without losing their context (in
contrast to owl:imports which simply merges ontologies).

3.6. Non-monotonic reasoning

Non-monotonic logics have been generally successful in capturing several forms of common sense and database reasoning.
A prominent family of non-monotonic formalisms are rooted
in various forms of the closed world assumption (CWA). The
DL ALCK [10] adds a non-monotonic K operator (which is a
kind of necessity operator) to the DL ALC to provide the ability to turn on the CWA when needed. The reasoning support
for ALCK language has been implemented in Pellet to answer
CWA queries that use the K operator. We also admit a restricted
use of K in the ontologies, in the form of an epistemic rule.

4. Conclusions and future work

In this paper, we have presented Pellet, an open source OWLDL reasoner with a number of unique features. Over the years,
Pellet has become a practical and popular tool because it is eas-

ily accessible through a number of interfaces, provides many
standard and extended reasoning services and exhibits a competitive performance and is open source. In the near future, we
are planning to extend Pellet in several different directions. Most
notably we intend to provide secondary-storage support for reasoning with large number of individuals, optimizations based on
partitioning of ontologies, combinations with other logical formalisms (e.g. spatio-temporal logics), and full SWRL support.

Acknowledgments

The authors would like to thank following people for
their contributions to the code: Christian Halaschek-Wiener
(incremental reasoning), Edna Ruckhaus (AL-Log coupling),
Vladimir Kolovski (DL-safe rules coupling), Ron Alford (TBox
absorption), and Michael Grove (OWL species validation).
