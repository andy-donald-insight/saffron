Semantic Web 1 (2011) 15
IOS Press

The RacerPro Knowledge Representation and
Reasoning System 1

Editor(s): Pascal Hitzler, Kno.e.sis Center, Wright State University, Dayton, Ohio, USA
Solicited review(s): Ulrike Sattler, University of Manchester, UK; Sergio Tessaris, Free University of Bozen-Bolzano, Italy; Zhisheng Huang,
Vrije Universiteit Amsterdam, The Netherlands

Volker Haarslev a, Kay Hidde b, Ralf Moller c, and Michael Wessel d
a Concordia University, 1455 de Maisonneuve Blvd. W., Montreal, Quebec H3G 1M8, Canada
E-mail: haarslev@cse.concordia.ca
b Racer Systems GmbH & Co. KG, Blumenau 50, 22089 Hamburg, Germany
E-mail: hidde@racer-systems.com
c School of Electrical Engineering, Computer Science, and Mathematics, Hamburg University of Technology,
Schwarzenbergstr. 95, 21073 Hamburg, Germany
E-mail: r.f.moeller@tu-harburg.de
d Racer Systems GmbH & Co. KG, Blumenau 50, 22089 Hamburg, Germany
E-mail: wessel@racer-systems.com

Abstract. RacerPro is a software system for building applications based on ontologies. The backbone of RacerPro is a description
logic reasoner. It provides inference services for terminological knowledge as well as for representations of knowledge about
individuals. Based on new optimization techniques and techniques that have been developed in the research field of description
logics throughout the years, a mature architecture for typical-case reasoning tasks is provided. The system has been used in
hundreds of research projects and industrial contexts throughout the last twelve years. W3C standards as well as detailed feedback
reports from numerous users have influenced the design of the system architecture in general, and have also shaped the RacerPro
knowledge representation and interface languages. With its query and rule languages, RacerPro goes well beyond standard
inference services provided by other OWL reasoners.

Keywords: Ontology Reasoning Systems, Description Logic Reasoning Systems, Deduction over Tboxes and Aboxes,
Expressive Ontology-based Query Answering, Abox Abduction

1. Introduction

For all software systems, and in particular for a
knowledge representation and reasoning engine,
it
holds that the system architecture is influenced by typical application areas for which it should be most effec-
tive. This is true also for the RacerPro system, a practical software system for building knowledge-based

1The development of RacerPro was partially supported by DFG
(Deutsche Forschungsgemeinschaft) and the European Commission
under ICT frameworks FP6 and FP7.

*Corresponding author. E-mail:r.f.moeller@tu-harburg.de

systems for demanding application scenarios ranging from autonomous agents on the semantic web to
knowledge-based software engineering. We describe
the main features of the system, in combination with a
motivation for the design principles behind RacerPro.
On the one hand, the goal of the paper is to describe
the features of a state-of-the-art description logic inference system (with support for syntax standards such
as OWL [19]). On the other hand, the description contains a set of literature references such that interested
researchers can find a comprehensive bibliography on
terminological as well as assertional reasoning tech-

1570-0844/11/$27.50 c 2011  IOS Press and the authors. All rights reserved

V. Haarslev et al. / The RacerPro Knowledge Representation and Reasoning System

nology. We hope to be able to stimulate the development of new, even better optimized reasoning architec-
tures, such that even more powerful knowledge-based
applications can be built in the future. The article is
structured as follows. We first give an overview on
the design principles of RacerPro, the description and
query languages as well as on the overall system ar-
chitecture. Afterwards, the article describes the inter-
faces, and it shortly refers to relevant use cases and
application scenarios. In the last section, we conclude
and present an outlook on future developments. We assume that the reader is familiar with description logics
and logic programming. The presentation in this article refers to RacerPro 2.0. RacerPro is freely available
for individuals participating at a degree-granting organization such as a universities or schools. More powerful network-supporting server versions can be licensed
(e.g., for commercial purposes).

2. System Overview and Scientific Impact

2.1. Design Principles

RacerPro is available as a server version (RacerPro
Server) or as a software library with API (RacerMas-
ter for Common Lisp). In this system description we
refer to RacerPro Server, and we will just use RacerPro as a name for the system. RacerPro communicates with client programs via various interfaces, either RacerPro-specific ones (maximum expressivity)
or standardized ones (maximum portability). A powerful graphical interface is provided for manual interaction with the server, and for submitting ad-hoc server
extensions and queries. See Figure 1 for an overview
on the system architecture. It should be noted that RacerPro can be extended using a simple plugin mecha-
nism. For the users convenience, parts of the RacerPro code are open source, and can be used to extend
the RacerPro reasoning server (see below for details).
In an ontology-based application, usually multiple
representation languages are used for different pur-
poses. The backbone is a description logic language
for defining the terminological part (e.g. in OWL 2
syntax [29]), which is often extended with other logical languages for the assertional part, such as, for in-
stance, logic programming rules, the region connection
calculus for aspects of spatial reasoning, or Allens interval algebra for aspects of temporal reasoning, just
to name a few [79]. The RacerPro system is particularly tailored for supporting this kind of applications

which mainly build on the exploitation of assertional
reasoning (Abox reasoning). The main idea is that
Aboxes are not static parts of the ontology, but are
efficiently generated on the fly (referring to a shared
Tbox which is processed only once). Tboxes (on-
tologies) and Aboxes are maintained using the RacerPro server system, which communicates with remote
application programs using well-defined axiom manipulation languages or entailment query languages. In
addition, a rule language (based on SWRL syntax) is
used to conveniently extend Abox assertions stored on
the reasoning server, i.e., rules that are transferred to
the server can be used to extend the expressivity w.r.t.
assertional reasoning and/or make implicit information
explicit on the server. Server-side Aboxes can be remotely cloned and easily extended such that variants
of assertional knowledge can be conveniently managed
as lightweight objects while the Tbox part they refer
to is shared.1 Besides this approach for lightweight
Aboxes, the RacerPro architecture also supports large
Aboxes stored in a triple store database (AllegroGraph,
see below).

One of the main design principles of RacerPro is
to automatically select applicable optimizations based
on an analysis of the language of the input knowledge
bases and the queries being processed.

2.2. Description languages

Ontologies are based on fragments of first-order
logic for describing a shared conceptualization of a
domain using concept and role descriptions (called
classes and properties in OWL, respectively). The initial conceptual representation language of RacerPro
was ALCNHR+(D) [31], and RacerPro was the first
system which efficiently supported concrete domains
for Tbox and Abox reasoning [40,41]. RacerPro was
then extended to also support inverse roles and qualitative number restrictions [44] as part of the description
logic (DL) SHIQ [50], a practically relevant subset
of OWL. Since RacerPro supports concrete domains
effectively, it was found that nominals (concepts representing single domain objects as defined in the DL
SHOIQ [49]) were not of utmost importance for RacerPro users [43]. In many cases, in which users initially wanted nominals, strings were found to be suffi-
cient. Furthermore, since multiple Aboxes should refer

1The Tbox to which an Abox refers can also be changed, but ob-
viously, this requires complete reprocessing of the assertions in the
Abox.

to a single Tbox (preprocessed and indexed offline before Abox query answering), Abox assertions should
not introduce implicit subsumption relationships, a design principle that is, in general, broken if nominals
are supported (the standard approximation of nominals
[14] is provided though by RacerPro).

While interesting optimization techniques for nominals have been developed [66], reasoning with nominals is known as hard not only from a theoretical point
of view [49] but also from a practical point of view
(i.e., hard also for typical-case input). RacerPro can
be extended with nominals, however, once optimization techniques for reasoning with nominals get mature enough such that RacerPro applications can effectively exploit this feature (see, e.g., [61,22,23] for first
results).
Role axioms (SROIQ [48]) are another language
construct that could be integrated into RacerPro such
that the full expressivity of the latest W3C standard for
ontology languages (OWL 2) is not only syntactically
supported but also w.r.t. intensional reasoning.

Fig. 1. RacerPro System Architecture

There are various usage scenarios of DL systems for
which RacerPro is optimized. In one scenario, Tboxes
are usually rather large, and Aboxes are small (< 100
individuals), but many (variants of) Aboxes need to be
handled. In the other scenario, Tboxes are rather small,
and one large Abox (> 100.000 individuals) is referred
to in queries.

2.3. Query Languages

Inference services for concept subsumption and the
taxonomy of a Tbox have been part of description
logic reasoning systems right from the beginning in
the eighties (Tbox classification). Classification is supported in RacerPro with specific optimization techniques [32,33,36,87,86] that are based on or are integrated with results obtained in other projects [24,25]
as well as techniques implemented in mature predecessor DL systems such as KRIS [8,6,7] and FaCT
[46,47,71]. Still, Tbox classification is a very fruitful
research area, and new techniques are being integrated
into RacerPro. Interestingly, for dealing with an ELH
[5] version of the Snomed/CT knowledge base, a very
old structural subsumption technique being integrated
into RacerPro provided for classification in the range
of minutes for this very large Tbox [39], with the additional advantage that (small) parts of the Tbox can
indeed use more expressive language fragments.

Inference services for Aboxes are influenced by
many earlier DL systems, for instance, CLASSIC [13,
14]. In these systems, the query language for finding
individuals is based on concept descriptions, and, thus,
rather limited (see [11,12]). In addition, in order to effective answer queries, in CLASSIC the most-specific
concept names of which individuals are instances are
computed in advance (Abox realization). In contrast,
RacerPro was designed in such a way that the user can
decide whether to compute index structures in advance
or on the fly [37]. Research on RacerPro has focused
on concept-based instance retrieval [34] as well as on
a more expressive form of queries, namely grounded
conjunctive queries [42,43].

The new Racer Query Language (nRQL, pronounced
niracle and to be heard as miracle) was one of the
first expressive query languages for DL systems providing conjunctive queries [18] with variables ranging
over named domain objects, negation as failure, a projection operator, as well as group-by and aggregation
operators (the latter two features were added recently).
With negation as failure and projection, one can also
represent universal quantification in queries.

The formal semantics of nRQL was described in
[82,83]. Interestingly, much later, a query language semantics based on a different viewpoint was described
in [15]. The nRQL language can nowadays be seen as
an implementation of the approach proposed in [15].
It should be emphasized that RacerPro supports query
answering with the pull mode (clients send queries
and retrieve result sets incrementally from the server)

V. Haarslev et al. / The RacerPro Knowledge Representation and Reasoning System

or with the push mode (clients subscribe conjunctive
queries and receive notifications about elements in the
result set incrementally) [35].

Optimization techniques for instance retrieval are
analyzed in [43,58,38]. A little later, also the influential Pellet reasoning system provided support for
conjunctive queries [67,68], and this emphasizes the
enormous practical relevance that the RacerPro Abox
reasoning work had at that time. The KAON 2 system [60] and the DL-Lite system [16] provided highly
regarded transformation techniques for conjunctive
queries w.r.t. Tboxes. A variant of the transformation
approach for a sublanguage of OWL has also been investigated with RacerPro (see [58] for details).

Based on the query language, RacerPro was extended with a rule language such that application programs can transfer rules to the server in order to test
whether certain conditions hold in order to then establish new assertions [30]. Based on practical use cases
(see below), the rule language is designed to conveniently manipulate Abox assertions. It is not designed
as a declarative knowledge representation language.

Also based on the query language, an abductive reasoning component was integrated into RacerPro [17].
In the abductive mode, instantiated atoms of a complex conjunctive query which cannot be proven to hold
are returned as part of the query answer. The space of
abducibles can be defined using named queries. Due
to the use of disjunction in the formulation of these
queries, multiple explanations are possible, and a ranking measure is built into the system [21]. Abduction
for Abox queries is a unique feature of RacerPro.

3. Interfaces

RacerPro can be used as a server application in a
network-wide context. In addition to raw TCP communication interfaces with APIs for Java (JRacer), Common Lisp (LRacer), and also C, RacerPro supports
the OWLlink communication interface [55,63] (a successor of DIG [10]). RacerPro also supports various
OWL 2 syntaxes, namely RDF/XML as well as OWL
Functional syntax. See again Figure 1 for an overview
of the RacerPro system architecture. A standardized
RDF query language for RacerPro is SPARQL [65].
For a an important subset of SPARQL, RacerPro offers ontology-based reasoning. RacerPro also supports
many extensions to SPARQL in a KRSS-like syntax
(e.g., the full nRQL query language, publish/subscribe
interface etc.). RacerPro implements the OWL API

[45] such that a plugin for Protege 4 is available [62]
(Figure 2.3).

Ontologies can be read from files, or can be retrieved
from the web as well as from an RDF triple store managed by the built-in AllegroGraph system (version 3)
from Franz Inc. [1]. AllegroGraph can be used to store
materialized inferences and also provides for a powerful query language based on SPARQL syntax [1]. AllegroGraph can store very large Aboxes for which users
need nRQL query answering.

The RacerPro inference server can be programmed
in a functional language called miniLisp. For instance,
query results can be postprocessed by the miniLisp interpreter running small functional programs being sent
to the server such that query results can be sent in
application-specific XML formats to client programs
via the built-in RacerPro web server/client. The language miniLisp is designed in such a way that termination of miniLisp programs is guaranteed, and miniLisp can be used to specify rather complex queries
and server extensions while the reasoning server is
running (see Figure 5). The functional language miniLisp can be extended by application programs (e.g.,
in the same sense that application programs can generate Javascript programs on the fly and send them
to a web browser). In combination with a miniLisp
program for manipulating query results on the server,
nRQL queries ensure that it is not necessary to transfer
large sets of Abox assertions from the inference server
to application programs.

For more complex extensions, RacerPro supports a
plugin interface. Plugins can be developed with Allegro Common Lisp Free Edition (from Franz Inc.).
Thus, compiled programs can encode arbitrary algorithms to be executed on the RacerPro server. Plugins have been used, for instance, for developing nonstandard inference algorithms [72].

Using the open source library OntoLisp2, large parts
of the RacerPro code for syntactically processing ontologies are publicly available. So, for instance, one
could extend RacerPro with an open source reasoner
such as, e.g., CEL [9] if specific tasks require EL++
reasoning [5], while still exploiting, say, the RacerPro interface services and miniLisp as server-side algorithmic language. Ontolisp can be used for developing new reasoners as well (various Common Lisp systems are supported).

2See

ontolisp/.

http://sourceforge.net/projects/

Fig. 2. RacerPorter, a graphical user interface for RacerPro. The taxonomy of the CYC knowledge base is shown. The taxonomy
can be interactively unfolded.

Fig. 3. Protege 4 with RacerPro selected as the reasoner.

V. Haarslev et al. / The RacerPro Knowledge Representation and Reasoning System

Fig. 4. RacerPorter Shell showing explanation output in a read-eval-print loop.

Fig. 5. RacerPorter Editor with commands that can be sent to the server.

Fig. 6. RacerPro Abox inspector.

The graphical interface RacerPorter [84] can be
used to explore axioms and terminologies (see Figure 2.3). It provides a read-eval-print loop (shell) for
interactively extending and querying one or more RacerPro servers (see Figure 4), or for inspecting, for in-
stance, explanation results for certain inferences. For
the users convenience, a complete Emacs-style text
editor is provided to edit nRQL queries or miniLisp function definitions (see Figure 5). Query results
(bindings for variables) can be interactively inspected
and Aboxes can interactively explored in the Abox inspector showing told and inferred assertions (see Figure 6).

4. Use Cases

We now discuss some use cases of RacerPro in order to characterize some of the main application areas of RacerPro. Ontology development support is
still the most-important application area of description
logic reasoning systems. RacerPro provides all standard inference services (subsumption checking, coherence checking, classification). See Figure 2.3 for an
example taxonomy shown in RacerPro.

The explanation facility of RacerPro has been used
to support the development of the OWL translator for

the SUMO ontology [64]. Explanation features for inconsistent concepts are available for knowledge bases
as large as Snomed CT (the RacerPro explanation facility uses built-in data structures of the tableau rea-
soner). It should be noted that Abox reasoning services
can be used for problem solving. For instance, in [78],
an application of Abox realization for computing solutions to Sudoku problems is presented (note that nominals are not required for this purpose [70]).

Another application area of RacerPro is software en-
gineering. In [69] nRQL has been used to represent
integrity constraints as queries which must return an
empty result set. This early use case also has shaped
the functionalities provided by nRQL. Rob Lemmens
has used Racer for investigating the semantic interoperability of distributed geo-services [54].

Abox reasoning (consistency, direct types, etc.) has
been used to formalize scene interpretation problems
[51]. In particular, it was shown that complete reasoning is necessary for efficiently integrating different
clues obtained from sensors into a coherent whole.
Furthermore, in [51] deduction proved useful to really
find interesting object classifications as well as interesting events for making decisions.

Event recognition was also explored in the BOEMIE
project [59,17,21] as well as in the ContextWatcher
project [81,80]. In the former approach, RacerPro was

V. Haarslev et al. / The RacerPro Knowledge Representation and Reasoning System

extended with CLP(R)-like techniques for dealing with
quantitative information where in the latter approach
the expressivity of nRQL is explored for qualitative
event recognition. Another very interesting approach
in this context is the use of nRQL as a target language
for compiling linear temporal logic (LTL) event de-
scriptions, and using assertional reasoning provided by
RacerPro for solving the actual event recognition problem [4].

would like thank Olaf Noppens for providing the Protege 4 plugin for RacerPro. An earlier interface for
Racer called RICE was built by Ronald Cornet.

RacerPro is built with Allegro Common Lisp, Alle-
groGraph, and AllegroServe [2] (it is also possible to
build the system using Lispworks Common Lisp and
CL-HTTP [57]). RacerPro uses the Wilbur Semantic
Web Toolkit [53] for XML and RDF processing. RacerPorter is built with Lispworks Common Lisp.

5. Summary and Outlook
