Semantic Web 0 (0) 1
IOS Press

LinkedGeoData:
A Core for a Web of Spatial Open Data

Editor(s): Krzysztof Janowicz, University of California, Santa Barbara, USA
Solicited review(s): Simon Scheider, University of Munster, Germany; Prateek Jain, Wright State University, USA; Dalia Varanka, U.S.
Geological Survey, USA
Open review(s): Boyan Brodaric, Geological Survey of Canada, Canada

Claus Stadler a,, Jens Lehmann a, Konrad Hoffner a, Soren Auer a
a Department of Computer Science, University of Leipzig
Johannisgasse 26, 04103 Leipzig, Germany
{cstadler, lehmann, auer}@informatik.uni-leipzig.de, konrad.hoeffner@uni-leipzig.de

Abstract. The Semantic Web eases data and information integration tasks by providing an infrastructure based on RDF and
ontologies. In this paper, we contribute to the development of a spatial Data Web by elaborating on how the collaboratively
collected OpenStreetMap data can be interactively transformed and represented adhering to the RDF data model. This transformation will simplify information integration and aggregation tasks that require comprehensive background knowledge related to
spatial features such as ways, structures, and landscapes. We describe how this data is interlinked with other spatial data sets, how
it can be made accessible for machines according to the Linked Data paradigm and for humans by means of several applications,
including a faceted geo-browser. The spatial data, vocabularies, interlinks and some of the applications are openly available in
the LinkedGeoData project.

Keywords: Linked Data, Spatial Data, Open Data, Interlinking, RDF, RDB2RDF, OpenStreetMap, LinkedGeoData

1. Introduction

The Semantic Web eases data integration tasks by
providing an infrastructure based on RDF and ontolo-
gies. In order to employ the Web as a medium for data
and information integration, comprehensive datasets
and vocabularies are required as they enable the disambiguation and alignment of other data and informa-
tion. With DBpedia [14], a large reference dataset providing encyclopedic knowledge about a multitude of
different domains is already available. A number of
other datasets tackling domains such as entertainment,

bio-medicine or bibliographic data are available in the
emerging Linked Data Web1.

With the OpenStreetMap (OSM)2 project, a rich
source of spatial data is freely available. It is currently
used primarily for rendering various map visualiza-
tions, but has the potential to evolve into a crystallization point for spatial Web data integration.

The goal of our LinkedGeoData (LGD) project is
to lift OSMs data into the Semantic Web infrastruc-
ture. We believe that this will simplify real-life information integration and aggregation tasks that require
comprehensive background knowledge related to spatial features. Such tasks might include, for example,
to locally depict the offerings of the bakery shop next

*This work was supported by a grant from the European Unions
7th Framework Programme provided for the projects LOD2 (GA no.
257943) and LATC (GA no. 256975).

1See, for example, the listing at http://ckan.net/group/

lodcloud and an overview at http://lod-cloud.net.

2http://openstreetmap.org

1570-0844/0-1900/$27.50 c 0  IOS Press and the authors. All rights reserved

Stadler et. al / LinkedGeoData

door, to map distributed branches of a company, or to
integrate information about historical sights along a bicycle track.

The majority of our data is obtained by converting data from the popular OpenStreetMap community project to RDF and deriving a lightweight ontology from it. Furthermore, we perform interlinking with
DBpedia, GeoNames, and other datasets, as well as the
integration of icons and multilingual class labels from
various sources. As a side effect, we are striving for the
establishment of an OWL vocabulary with the purpose
of simplifying exchange and reuse of geographic data.
After our initial LGD release in 2009 [1], we invested substantial efforts in maintaining and improving LinkedGeoData, which include improvements of
the project infrastructure, the generated ontology, and
data quality in general. Our new contributions since
then are:

 A flexible system for mapping OpenStreetMap
data to RDF: We now support nicer URIs (camel
case), typed literals, language tags, and a simplified mapping of the OSM data to classes and
properties. Together this accounts for an improved
data quality.

 Better support for ways: Ways are OpenStreetMap
entities used for modeling things such as streets
but also areas (see Section 2). The geometry of a
way (a line or a polygon) is now stored in a literal
of the corresponding RDF resource, which makes
it easy to e.g. display such a resource on a map.
Furthermore, all nodes referenced by a way are
available both via the Linked Data interface and
the SPARQL endpoints.

 An improved REST interface with integrated

search functions.

 A new publicly accessible live SPARQL endpoint that is being interactively updated with the
minutely changesets that OpenStreetMap pub-
lishes.

 A simple republication method of the corresponding RDF changesets so that LinkedGeoData data
consumers can replicate our store.

 Direct interlinking with GeoNames and the UN
FAO data (interlinks with DBpedia have been up-
dated).

 An improved LinkedGeoData browser.
 Implementation of the Vicibit application to facilitate the integration of LGD facet views in external web pages.

 Integration of appropriate icons and multilinlabels for LinkedGeoData ontology ele-

gual
ments from external sources.

The paper is structured as follows: after introducing
the OpenStreetMap project in Section 2, we outline the
LinkedGeoData architecture in Section 3. Subsequent
sections explain, how the OSM data is transformed
into the RDF data model (Section 4), how the data can
be accessed (Section 5), and how we interlinked it with
other knowlegde bases (Section 6). The live synchronization is explained in Section 7. We present statistics about LinkedGeoData in Section 8. In Section 9,
we showcase a faceted geo-data browser and editor as
well as some 3rd party applications being built around
LinkedGeoData. We present related work in Section 10
and conclude in Section 11 with an outlook to future
work.

2. OpenStreetMap

OpenStreetMap is a collaborative project to create a
free editable map of the whole world. It was inspired
by Wikipedia and as such it provides well known wiki
features such as an edit-tab and a full revision history
of the edits. However, rather than editing articles, users
edit geographic entities. The three fundamental ones
are as follows:

 Nodes are the most primitive entities and represent geographic points with a latitude and longitude relative to the WGS84 reference system.

 Ways are entities that have a list of at least two
node references associated with them. Depending
on whether the first reference equals the last one,
a way is called closed or open, respectively.

 Relations relate points, ways and potentially other
relations to each other, thereby forming complex
objects. Each entity participating in a relation
plays a certain role in it. Multipolygons are modelled with relations.

Each of these entities has a numeric identifier (called
OSM ID), a set of generic attributes, and most importantly is described using a set of key-value pairs,
known as tags.

An example of a relation is the administrative
boundary of Germany having the OSM identifier
51477.3 It is comprised by more than 1000 ways,

3http://www.openstreetmap.org/browse/
relation/51477 can be used to browse this relation.

the German border with Luxembourg e.g.

which represent certain segments of the German bor-
der;
is
composed of approx. 40 way segments. The relation currently has about 30 associated tag-value pairs,
which, for example, contain the name of Germany
in different languages. One of those tag-value pairs
(boundary=administrative) indicates that this
relation represents an administrative boundary. This
information is used by the OSM map renderer to decide how this relation should be rendered on the map.
Further tags are used for timezone, currency, and ISO
country. The relation has also a few metadata entries
(such as the timestamp of the last edit and the last edi-
tor) attached.

To manage those data structures, an infrastructure
evolved encompassing multiple map editing tools, tile
renderers, and data sources, as shown in Figure 1.

The data is stored in a relational database (Post-
greSQL backend). It can be accessed, queried and
edited by using a REST API, which basically uses
HTTP GET, PUT and DELETE requests with XML
payload (similar to the example shown in Listing 4).
The data is also published as complete dumps of the
database in such an XML format on a weekly basis. It
currently accounts for more than 16GB of Bzip2 compressed data. In minutely, hourly and daily intervals
the project additionally publishes changesets, which
can be used to synchronize a local deployment of the
data with the OSM database. The dumps as well as the
changesets can be processed with the Osmosis tool.

OpenStreetMaps community has build different authoring interfaces. These include the online editor Pot-
latch, which is implemented in Flash and accessible
directly via the edit tab at the OSM map view, as well
as the desktop applications JOSM, Merkaartor and
Mapzen. The editors use complementary external services and data such as Yahoo! satellite imagery or Web
Map Services (WMS). Additionally, users can upload
GPS traces which serve as raw material for modeling
the map. Two different rendering services are offered
for the rendering of raster maps on different zoom lev-
els. With Tiles@home, the performance-intense rendering tasks are dispatched to idle machines of community members; thus achieving timeliness. The Mapnik renderer, in turn, operates on a central tile server
and re-renders tiles only in certain intervals.

Since the use of tags and values is not restricted, but
governed by an agile community process, it is important to obtain an overview on emerging tags and tag
values possibly specific to a certain region. Services

such as TagWatch4 periodically compute tag statistics
for different areas. In order for the data to be machine interpretable, as for instance for map rendering,
contributors must follow certain editing standards and
conventions5.

Currently, OSM is in the process of switching from
the Creative Commons CC-BY-SA license to the Open
Database License6. The term Volunteered Geographic
Information (VGI) was coined [9] for the harnessing of
tools to create, assemble, and disseminate geographic
data provided voluntarily by individuals  with OSM
being a driving force behind VGI.

The growth of the OpenStreetMap data has been
enormous (cf. Table 1): Since the founding in July
2004 until now, more than one billion nodes, about
90 million ways and close to 1 million relations have
been contributed by the users7. Some of the data
was imported form public domain datasources such as
TIGER8 for US, AND Automotive Navigation Data9
for The Netherlands, and GeoBase data from the Canadian government10.

3. Architecture

The goal of the LinkedGeoData the project is to contribute rich, open, and integrated geographical data to
the Semantic Web using OpenStreetMap as its base.
This is analogous to the well known DBpedia project,
which follows a similar approach based on Wikipedia.
The necessary work for reaching this goal comprises
the conversion of OSM data to RDF, the interlinking
with other knowledge bases, the dissemination of the
resulting data, and keeping the datasets up-to-date. In
this section, we give an overview of the LinkedGeoData architecture, followed by explanations of the details of the involved components in the next sections.
The architecture of LinkedGeoData is illustrated in
Figure 2. It shows that the data from OpenStreetMap
is processed on different routes: The LGD Dump Module converts an OSM planet file to RDF and loads

4http://tagwatch.stoecker.eu/
5http://wiki.openstreetmap.org/wiki/Map_

Features

6http://www.opendatacommons.org/licenses/

odbl/

7http://www.openstreetmap.org/stats/data_

stats.html, retrieved 2011 May 2nd

8http://www.census.gov/geo/www/tiger
9http://www.and.com/
10http://www.geobase.ca

Stadler et. al / LinkedGeoData

Source:http://wiki.openstreetmap.org/w/images/1/15/OSM_Components.png as of 2011 Apr 27th

Fig. 1. Overview of OpenStreetMaps architecture.

Category
Users (Thousands)
Uploaded GPS points (Millions)
Nodes (Millions)
Ways (Millions)

June 2009

April 2010 May 2011 Growth (past two years)
+ 213%
+ 151%
+ 187%
+ 207%

Table 1

OpenStreetMap statistics 2009 - 2011.
(Obtained
stats/data_stats.html at the specified months.)

from

http://www.openstreetmap.org/

the data into a triple store. This data is then available via the static SPARQL endpoint. A copy of that
triple store serves as the initial basis for the live
SPARQL endpoint. The LGD Live Sync Module downloads minutely changesets from OpenStreetMap, and
computes corresponding changesets on the RDF level
in order to update that triple store accordingly. By publishing these RDF changesets (see Section 7.2), we enable data consumers to sync their own triple store with
ours. Note, that not all OSM entities are loaded into the
SPARQL endpoints due to performance reasons. We
offer SPARQL endpoints for the static and live version,
because some use cases require up-to-date information
whereas for others, it is more suitable that queries yield
the same result over a longer period of time, e.g. due
to caching mechanisms.

For data access LinkedGeoData offers downloads, a
REST API interface, Linked Data, and SPARQL end-
points. The REST API provides limited query capabilities for RDFized data about all nodes and ways of
OpenStreetMap (relations are currently not supported).
It draws its data from a local replica of the OpenStreetMap PostGIS database. The OpenStreetMap
community developed a tool named Osmosis11, which
supports setting up such a database from a planet file
and applying changesets to it. In future work, we aim
for stronger support of spatial SPARQL queries by exposing PostGIS features via SPARQL.

11http://wiki.openstreetmap.org/wiki/Osmosis

Fig. 2. Overview of LinkedGeoDatas architecture.

4. RDF Mapping

In this section, we explain our approach to the generation of RDF triples from OpenStreetMap entities.
Recall that all such OSM entities have a numeric ID
and carry information in form of values for predefined
attributes and sets of tags. The values for the predefined attributes, such as the version, the contributing
user, and timestamp are static and can also be seen as
tags.

We generate URIs for nodes and ways according
to the pattern lgd:node<id> and lgd:way<id>,
respectively.12 The resource corresponding to a ways
list of nodes is lgd:way<id>/nodes.

These URIs are non-information resources, i.e. they
represent real-word entities. As such, stating that a resource corresponding to a pub was created by a building company would be correct, however stating that
it was created with the map editor JOSM would be
wrong. In general, there are two possible solutions to
permit both kinds of statements: a) introduce distinct
URIs for each of the two different meanings, b) make
use of annotation properties, which are intended for
this purpose and do not have any logical implications.

12See Appendix A for prefix declarations.

We chose the latter approach, because it avoids doubling the number of resources and keeps the data sim-
ple.

Our tag mapping approach is based on the assumption that each tag can be mapped in isolation,
i.e. without taking other possibly existing tags into
account. For example, entities with the tag (amenity,
school) become instances of lgdo:School. Note that
this approach does not support more complex rules,
such as mapping all entities having both the tags
(amenity, place_of_worship) and (religion, christian)
to lgdo:Church. Therefore, the generated RDF structures are very close to the structure in OpenStreetMap.
We now specify the mapping process. A tag mapper
is an object for generating RDF from tags. It consists
of a tag pattern that specifies what tags to match, and
a transformation function for generating the RDF.

Tag patterns can 1) match a specific key-value pair,
such as (amenity, school), 2) match all tags with a certain key (regardless of the values), e.g. (tourism, *), or
3) match every tag. More specific patterns take prece-
dence, e.g. a matching pattern in category 1 overwrites
matching patterns in category 2 and 3.

We implemented the following four tag mappers:
 Resource: Maps a tag to a specific property and
object, where both must be URIs. Therefore it

OpenStreetMap.orgLGD Dump ModuleOsmosisChangesetsFull DumpsVirtuosoVirtuosoPostgisStorageData ProcessorsPublic InterfacesData SourceSPARQL (Live)SPARQL (Static)RESTLGD LiveSync ModuleDownloadsFile SystemApplicationsVicibitLGD Browser6

Stadler et. al / LinkedGeoData

can be used for mapping to both object properties and classes. In the latter case the property has to be set to rdf:type. Examples are
(religion, christian) and (amenity, school) which
are mapped to lgdo:religion lgdo:christian and
rdf:type lgdo:School, respectively.

 Text: Treats a tags value as a plain literal. For ex-

ample (note, nice view).

 Datatype: Interpret a value e.g. (seats, 4) with re-

gard to a specific datatype.

 Language: A mapper for tags whose key contains

a language, such as name:en.

All of these mappings are implemented as Java
classes, whose instances are configured with an XML
snippet. Listing 1 shows an example of a configuration of a resource tag mapper that is interpreted as fol-
lows: The simple in the name reflects our limitation
that tags are being mapped in isolation. The mapping
rule is applied to every entity that has a tag matching the pattern (religion,*). The element objectAsPrefix controls whether a tags value should be appended
to the value given as the object. So in this case, a tag,
such as (religion, hindi), is mapped to the predicate
lgdo:religion and object lgdo:hindi. The element describesOSMEntity specifies whether the resulting RDF describes a real world entitys representation on OpenStreetMap or the entity itself. Therefore,
it determines whether a mappings property should become an instance of owl:AnnotationProperty.

The text- and datatype tag mappers are both similar
to the resource tag mapper, except that they map tag
values to objects that are plain or typed literals, respec-
tively. Therefore the language and datatype of these
mappers can be set to a constant in their configuration.
The language tag mapper is used for mapping tag
values to plain literals with language tags inferred
from the tags keys. For instance (name:en, Vienna)
would become (rdfs:label, Vienna@en). The key
of its tag-pattern must be a regular expression containing a group for matching the language, such as
name:([^:]+). Every match for this group is then
cross checked against a list of known languages. This
avoids for example matching alt as a language from
the key name:alt for alternative names.

Listing 1: Example of a mapping declaration.

<SimpleResourceTagMapper>

<property>

http://linkedgeodata.org/ontology/religion

</property>
<tagPattern>

<key>religion</key>

</tagPattern>
<describesOSMEntity>false</describesOSMEntity>
<objectAsPrefix>true</objectAsPrefix>
<object>

http://linkedgeodata.org/ontology/

</object>

</SimpleResourceTagMapper>

This approach makes it possible to add new mappings that require more complex processing easy. For
example, a future tag mapper could extract the values
of opening_hours tags (used 60K times on nodes) and
generate RDF in the Good Relations13 vocabulary.

4.1. The LinkedGeoData Ontology

Based on the OpenStreetMap tags, we derived a
lightweight OWL ontology14. A depiction of an excerpt in shown in Figure 3.

Fig. 3. An excerpt of the LinkedGeoData ontology. More classes and
subclasses exist in the actual version.

The process of its creation is explained as follows:
Subclass relationships are inferred from resource tag
mapper configurations: If there are two tag patterns for
(tag1, tag2) and (tag1, *), which use the rdf:type
property, then the object of the first tag pattern becomes a subclass of the second tag pattern. For exam-
ple, Listing 2 shows an example of such tag mappings
for the (amenity, restaurant) and (amenity, *) tag pat-
terns.

Listing 2: Subclass relationship example.

<SimpleResourceTagMapper>

<property>rdf:type</property>
<tagPattern>

<key>amenity</key>

</tagPattern>
<describesOSMEntity>false</describesOSMEntity>
<objectAsPrefix>false</objectAsPrefix>
<object>

http://linkedgeodata.org/ontology/Amenity

13http://www.heppnetz.de/projects/

goodrelations/
complete

14The

ontology

is

available

at

http://

linkedgeodata.org/ontology/

BenchBreweryCafeBakeryPubVillageTownCityCountryHamletGolfHockeyJudoRugbyPaintballHostelHotelMotelChaletResortAmenitySportPlaceTourismLeisurePitchStadiumTrackBeachDogParkStadler et. al / LinkedGeoData

</object>

</SimpleResourceTagMapper>
<SimpleResourceTagMapper>

<property>rdf:type</property>
<tagPattern>

<key>amenity</key>
<value>restaurant</value>

</tagPattern>
<describesOSMEntity>false</describesOSMEntity>
<objectAsPrefix>false</objectAsPrefix>
<object>

http://linkedgeodata.org/ontology/Restaurant

</object>

</SimpleResourceTagMapper>

In order to determine datatype properties, we scanned
all OSM tags for those that had keys for which the majority of values could be parsed as boolean, integer, or
float datatype values. In order to deal with dirtiness in
tag usage, we applied the following two criteria on the
relative and absolute error rate:

 At least 99% of a keys values must succeed to

parse.

 The absolute number of errors must not exceed

5000.

The most specific datatype meeting these criteria then
became the range of the keys corresponding property.
If a datatype was determined, all invalid values were
omitted in the RDF output.

Object properties were identified as follows: Intu-
itively, tags that might be suitable for being mapped to
object properties meet the condition, that a low number
of distinct values covers most its uses. However, this
heuristic only serves as an indicator for tag candidates,
as the final choice may be subjective. For instance,
only 7 distinct values for the key note:ja are used in
more than 99% of almost 3.5mio tags. However, since
the tag corresponds to a note, we considered a datatype
property to be the right choice. An example for an object property is lgdo:religion, which links to resources
in the lgdo namespace, such as christian, muslim, and
buddhist. Another example is lgdo:wheelchair, which
specifies the extent of wheelchair accessibility, using
resources mainly corresponding to the values yes, no,
limited, and unknown. Using those heuristics, we could
generate seed mappings for OpenStreetMap, which
were then manually reviewed and refined.

4.2. Multilingual labels and icons

The OpenStreetMap community conducts various
internationalization efforts, such as for their website,
their map editing tools, and their search engine. Some
of these efforts are coordinated on TranslateWiki,

which describes itself as a localisation platform for
translation communities, language communities, and
free and open source projects.15 Essentially, this wiki
enables contributors to assign texts in multiple languages to keys. The group OpenStreetMap - Website
defines 1441 keys, and has a 100% translation coverage for 13 languages and 12 more languages with
a coverage of more than 90%16. They keys with the
prefix geocoder.search_osm_nominatim.prefix correspond to human readable representations of individual
tags, and as such form a rich, multilingual, and high
quality source of labels for classes, properties, and in-
stances, which we integrated into the LinkedGeoData
ontology.

These labels could serve as a basis for answering
queries posed in different languages: For a query such
as Bakeries in Munich and its German equivalent
Backereien in Munchen, the search words could be
mapped to corresponding classes and instances from
the LinkedGeoData knowledge base. A system already
capable of processing such types of queries is described in [20].

As for icons, there exists a CC-0 licensed collection of 307 SVG map icons (of which 47 icons
are alternative versions) from SJJB Management.17
Currently the LinkedGeoData ontology associates 90
of them with classes, using the annotation property lgdo:schemaIcon. The icons themselves are republished on our server. They simplify the creation
of visually appealing LGD based applications and
mashups.

5. Data Access

As briefly mentioned in Section 3, we provide sev-

eral ways to access LinkedGeoData:

 dataset downloads (HTML download table18 and
actual files19), including live sync changesets relative to the latest release20 (explained in Section 7)

15http://translatewiki.net
16http://translatewiki.net/wiki/Translating:

OpenStreetMap/stats/trunk retrieved 5th May 2011.

17http://www.sjjb.co.uk/mapicons/ retrieved 6th

April 2011

18http://linkedgeodata.org/Datasets
19http://downloads.linkedgeodata.org
20http://downloads.linkedgeodata.org/

releases/latest/changesets/

Stadler et. al / LinkedGeoData

 a static SPARQL endpoint21
 a live SPARQL endpoint22
 Linked Data via 303 content negotation (RD-
F/XML, Turtle, N-Triples, HTML formats sup-
ported)

 a REST API

We first show an example data excerpt and then ex-

plain the REST API.

5.1. Data example

In Listing 3, we give a brief example on what the
data in LinkedGeoData looks like. The whole type hierarchy is already inferred, as it is being done in DB-
pedia, i.e. rdf:type relations to all super classes
are asserted. The lgdo:directType property was added
on request in order for applications to easily determine the most specific type(s) of instances. For every way, there exists a triple that contains the positions of all nodes. For open and closed ways the predicates are georss:linestring and georss:polygon, respec-
tively. Note that this interpretation is not always cor-
rect, as in the general case closed ways have to be interpreted in the context of the ways tags in order to
determine whether the enclosed area counts to the way
or not. All nodes belonging to a way are kept in an
RDF sequence. In the SPARQL endpoints, geographical coordinates are represented as point geometries
that are typed with virtrdf:Geometry. OpenLinks Virtuoso23 enterprise edition database system automatically indexes such points in an R-tree.

Listing 3: Example dataset in Turtle syntax.

lgd:way4009992

lgdo:Tennis, lgdo:Sport, lgdo:Way;

lgdo:directType lgdo:Tennis;
lgdo:contributor lgd:user2274;
lgdo:hasNodes
georss:polygon "52.1523857 -1.026259

<http://.../way4009992/nodes>;

52.1522675 -1.0264068 ..." .

<http://.../way4009992/nodes>

rdf:_1
rdf:_2
... .

rdf:Seq;
lgd:node21179607;
lgd:node21179608;

lgd:node21179607 geo:geometry

"POINT(-1.02626 52.1524)"^^virtrdf:Geometry

Fig. 4. Data Sources of the REST API.

5.2. The REST API

The LinkedGeoData REST API gives access to all
of OpenStreetMaps nodes and ways. It offers a set
of methods that all have in common that they return
RDF for responses. Each call to the REST API can be
combined with content negotiation to format these responses as RDF/XML, N-Triples, or Turtle. The API
is backed by two things: on the one hand there is a
PostGIS database that is loaded with an OSM planet
file and which is updated with minutely OSM change-
sets. On the other hand, the data for the ontology and
interlinking is drawn from the SPARQL endpoints, as
depicted in Figure 4.

An excerpt of the available methods is given in Table 2. In general, the REST API returns a set of spatial
entities along with their RDF descriptions, which can
be filtered in numerous ways:

 by area: Either a circular or rectangular area can

be selected via WGS84 coordinates.

 by class: Returned resources can be restricted to

a single LinkedGeoData class.

 by name (rdfs:label): It can be set whether
returned points should contain or start with a
certain string. Furthermore, it can be specified
whether name search should be case sensitive and
whether only names with a particular language
tag should be considered.

Using area and label search combined with class restrictions were the most requested features in applica-
tions, which is why we provide them in the REST in-
terface. The main purpose of the REST API is to lower
the entry barrier for data consumers and to internally
optimize the performance of the most commonly used
queries.

21http://linkedgeodata.org/sparql
22http://live.linkedgeodata.org/sparql
23http://virtuoso.openlinksw.com

URLs relative to http://linkedgeodata.org/triplify/near/
(General syntax and specific example)

Description

<latmin>-<latmax>,<lonmin>-<lonmax>
51.02-51.04,13.72-13.74
<lat>,<lon>/<radius>
51.02-51.04/1000
<lat>,<lon>/<radius>/class/<classname>
51.033333,13.733333/1000/class/PlaceOfWorship
<lat>,<lon>/<radius>/class/
<classname>/label/<lang>/contains/<label>
.../class/Amenity/label/en/contains/flower

Resources located in the given rectangle.

Resources located in specified radius in meters from the given point.

Resources in specified radius belonging to the given class.

Resources in specified radius, belonging to the given class with a
label in the specified language containing a specific string.

Excerpt of the methods supported by the LGD REST API.

Table 2

6. Interlinking

In this section, the interlinking between LinkedGeo-
Data, DBpedia, GeoNames and the Food and Agriculture Organization of the United Nations (FOA) is
described. In all cases, we first manually aligned the
classes of these knowledge bases with classes from
LinkedGeoData on a best effort basis. The interlinking
is then done on a per-class basis, where all instances
of a set of classes of LGD are matched with all instances of a set of classes of another data source using
labels and spatial information. As an example, cities in
LGD and DBpedia are matched between all instances
of lgdo:City, lgdo:Town, lgdo:Village and
lgdo:Hamlet on one side and dbo:Settlement
on the other. The interlinking is performed using the
tools SILK [24] and LIMES [17], which use the static
SPARQL endpoint as the backend. As Virtuosos index
support for geometries is limited to points, we needed
to constrain the interlinking to LinkedGeoData nodes.
An overview of triple stores supporting complex geometries is given in Section 10.3.

It should be noted,

that many ways in OpenStreetMap have reference points, e.g. characteristic
points for a given way. Those reference points are not
necessarily located in the geometric center of a way,
but represent a typical point by OSM community con-
sensus.

For each class-mapping, a link specification is
created and executed using the Silk Link Discovery
Framework [24]. The link specs usually include a met-
ric, which is a linear classifier depending on the labels
and the geographic distance, which can be calculated
from the values of wgs84:lat and wgs84:long
properties which are provided by all considered data
sources. By combining classification, naming and spa-

tial features, we are able to obtain very precise interlinking heuristics as shown later.

We used the following matching criterion, which we

explain in detail below:

s(a, b) +

gc(a, b) > 0.95

 a and b are the resources to be compared
 s(a, b) is a the Jaro-Winkler distance [25], between the labels of a and b. If there are multiple
labels, the pair with the maximum score is cho-
sen, ignoring the language-tag. While this could
cause false links in the special case that the label of a resource in one language is very similar
to the label of a resource in a different language,
this type of error was not found in our evaluation.
An advantage of this approach is that it works for
several languages even if the proper language tags
are actually missing.

 c is the maximum distance that two points describing the same object are reasonably expected
to differ. While a good value for c is easily chosen
in some cases (a shop does not span more than a
few hundred meters), it is nontrivial in cases of
large variances in size such as in cities, mountains
or islands. The value of c varies greatly between
classes and is explained by the choice of reference
points, which can differ in each of the considered
knowledge bases.

 gc(a, b) =

1/(1 + e12d+6)

d > c
otherwise

In

this formula, d is the distance between a and
b. The distance is approximated by the haversine formula, which uses a spherical model of the
earth. We then define d = 1  d/c which is a

Stadler et. al / LinkedGeoData

linear function with a value of zero at distance
d = c and one for d = 0. In order to not punish
a slight discrepancy between two points as much
as a linear function would, d is not used directly.
Instead, we employ a scaled logistic curve. The
remaining parameters are adjusted such that two
objects at distance c with exactly the same labels
almost exactly matches the threshold of 0.95 in
the formula above, which is the intended meaning
of the parameter c.

6.1. Interlinking with DBpedia

Since the initial interlinking between LinkedGeoData and DBpedia as described in [1] in 2009, both
knowledge bases have grown and changed signifi-
cantly, resulting in the need of a new interlinking as
well as an exhaustive re-evaluation of the quality of the
interlinks. Table 3 shows the created class-mappings
and the size of the linksets and their estimated preci-
sions. The links were manually evaluated with a random sample of 250 instances each. In cases where the
number of links is smaller than or only slightly higher
than 250 as in the case of the universities, all of the
instances were evaluated.

Table 3

LinkedGeoData-DBpedia linksets.

DBpedia
class

in-
stances

equiva-
lent

nodes

links

c in
km

Airport

Settle-
ment
Country
Univer-
sity
Stadium
School
Island
Moun-
tain

Aero-
drome
239630 several1

620387 88377

25052 Country
11607 Univer-

sity
Stadium
School
Island
Peak

262566 2470

177702 3258

pre-
ci-
sion

302600

Overall
1 City  Suburb  Town  Village
2 The large number of countries is caused by former countries like Re-

1166457 103581 0.966

public of Texas and Inca Empire.

6.2. Interlinking with GeoNames

The GeoNames database contains over 10 million geographical names and has 7.5 million unique
features. It integrates sources such as the National
Geospatial-Intelligence Agencys (NGA) and the U.S.
Board on Geographic Names. While at the time of
this writing there is no official SPARQL endpoint yet,
an RDF-dump and an ontology are available. The ontology is very flat, with only two layers of disjunctive classes, where the superclasses are called feature classes and the subclasses feature codes. The feature codes are very detailed, for example there are
97 feature codes for the feature type T (Peak). Linking GeoNames with LinkedGeoData makes these detailed features available to LinkedGeoData. In addition to the steps used for linking LinkedGeoData with
DBpedia, the labels (which are represented by the
properties gn:name and gn:alternateName in
GeoNames) are first transformed by removing all occurrences of the name of class of the instances (e.g.
city). This increases the string similarity score for
pairs like (Fananu, Fananu Island). Again, 250
links per class were evaluated and the results are shown
in Table 4.

6.3. Interlinking with the Food and Agriculture
Organization of the United Nations (FOA)

The FOA provides detailed information about organisations and countries from which the latter were
chosen for interlinking. While it does not provide
a latitude and a longitude, it provides official, list
and short names and the names for the countries
currency and nationality in many languages. Also
bordering countries, the gross domestic product, the
agricultural area and a validation interval for former states such as the Soviet Union are given. This
makes the FOA a very worthwhile target for inter-
linking. While FOA does not provide a SPARQL end-
point, the data was available as RDF which we uploaded on a local endpoint. Since no positional information is given, the spatial part of our matching formula is omitted and the properties foa:shortName,
listName and officialName are used for string
similarity matching. Between the 207 instances of
foa:self_governing and the 231 instances of
lgdo:Country, the linkset contains 191 links with
a precision of 0.984.

Matching classes and created links between LGD and Geonames.

Table 4

number of
features

LinkedGeoData class

number of
nodes

links

Country

1 000 km

71 764
2 821 405

Park
Hamlet  Village  Town 
City

5 km
100 km1

151 833
818 893

55 648
34 907

School
Park
Stadium
Farm

1 km
5 km
1 km
6 000 m

340 039
157 862
13 001
3 834

168 545
55 648

preci-
sion

224 217
72 130

207 171

32 449

Airport  Aerodrome 
Aerialway  Aeroway
Supermarket  Shop  Mall
PlaceOfWorship
Restaurant
TourismHotel
Hospital
PostOffice
Garden
Police
Library

18 240
231 678
1 195
82 876
16 606
31 244

1 209
10 712
16 379 Memorial
4 409
7 668

45 230
7 533

TourismMuseum
Cliff
University
Bay
Beach  TourismBeach 
NaturalBeach
Castle
GolfCourse
Glacier

3 615
6 288
6 471

2 922 222

10 km

175 006

21 552

1 km
1 km
1 km
200 km
5 km
1 km
1 km
1 km
1 km
100 m
2 km
2 km
2 km
5 km
10 km

2 km
5 km
10 km

572 833
352 673
167 293
63 516
58 095
50 962
35 542
28 363
25 637
22 613
21 442
18 738
17 715
16 595
14 129

8 406
6 880
6 495

201 318

2 214
11 032
20 718

9 225

3 291
4 414

14 670
2 028

3 148 630

606 549

GeoNames feature class or code

PCL  PCLD  PCLF  PCLI
 PCLIX  PCLS

PPL  PPLA  PPLA2 
PPLA3  PPLA4  PPLC 
PPLF  PPLG  PPLL  PPLQ
 PPLR  PPLS  PPLW

FRM  FRMQ  FRMS 

AIRH  AIRP  AIRQ  AIRB

MALL  MKT
TMPL  CH  CTRR

BCHS  BCH

Overall

1 because of many incorrect links in the original matching, only links of settlements with a distance of at most 5 km were finally used.

6.4. Discussion

Overall, we generated 103 581 links to DBpedia,
571 642 to GeoNames and 191 to UN FAO. It should
be noted that we aimed at a high precision of links
at the cost of potentially lower recall, which we deem
reasonable when establishing owl:sameAs links. We
performed a comprehensive evaluation in which we
manually verified 6 526 links. The average precision
weighted by the number of links is 98.3 % In some
cases, it was difficult to pick the best value for the pa-

rameter c described earlier in this section. In future
work, we aim to control to precision-recall tradeoff
more precisely via supervised machine learning tech-
niques, which will potentially allow us to increase the
number of links with only slightly less precision.

During our evaluation, we observed the following
issues, which were responsible for some of the mis-
takes:

1. wrongly classified instances in data sources

Stadler et. al / LinkedGeoData

2. part vs. whole relations (West Anvil Point,Anvil

Point),

3. part vs. another part relations (West Anvil
Point,East Anvil Point), (Red Wall Number
1, Red Wall Number 2)

4. subtle spelling differences (Baren-Klippe, Beeren-

klippe)

The first problem is a data quality issue and can
only partially be solved on our side by helping to improve the involved knowledge bases. The other issues
could be improved by a higher threshold, in particular for string similarity. However, we found out that
this had a very negative effect on recall. The problem
could be remedied by applying techniques like the Stable Marriage Problem [16] to interlinking, which requires to incorporate support for this in the underlying interlinking tools and is subject to future work. A
further problem, which we encountered in the matching problem was that despite several improvements in
SILK, e.g. the introduction of blocking, the matchings
still took several days to compute. Initial experiments
with LIMES gave comparable results in significantly
less time. We expect, that with such a new technology,
will be able to run more extensive tests with different
parameter settings.

7. Live Synchronization

OpenStreetMap data is constantly being updated by
its contributors. For instance, hundreds of shops are
added, removed or updated every day. Static snapshots
of this data cannot reflect such recent changes, which
makes them unsuitable for use cases where users need
up-to-date information. As a solution to this problem,
we implemented a live-synchronization module, which
converts the minutely changesets published by OpenStreetMap to RDF and updates a triple store accord-
ingly. Additionally, we publish our changesets in an
intuitive way that enables users of the LinkedGeoData
service to synchronize their own RDF store with it.

An example of an application of LinkedGeoData
live is the service MovieGoer24, which scrapes websites about cinemas in Munich and Innsbruck for their
program and stores the result as RDF. This data was
then interlinked with LinkedGeoData, as the SPARQL
endpoints provide a simple means of retrieving the addresses and names for these cinemas. The locations

that were found out to be missing during the interlinking were added to OpenStreetMap, which made them
also available at the live LinkedGeoData endpoint. As
a result, a benefit for all involved services was created.
In the remainder of this section we first briefly describe general requirements we pose on the update pro-
cedure. Afterwards, we explain the changeset formats
of OpenStreetMaps and LinkedGeoData. Finally, we
discuss concrete cases that must be considered by our
live-sync module and give a sketch of the algorithm.

7.1. General requirements

Our major design goals for the live sync procedure
were high performance and cleanliness: On the one
hand, the update procedure must be capable of processing minutely changesets from OpenStreetMap in
much less than a minute in order to catch up any lag to
OpenStreetMap. On the other hand, the updates should
not leave our store in a dirty state - i.e. upon a modification or deletion of an OSM entity all RDF statements
about the corresponding resources must reflect the entitys most recent state, and no left-over statements of
a previous state must remain. Meeting both demands
results in a non trivial procedure.

7.2. Changeset formats

We first explain the format of changesets provided
by OpenStreetMap, and the format of our published
RDF changesets. This eases the understanding of the
requirements and details of the live sync procedure that
are explained in the sequel.

OpenStreetMap publishes changesets as sequentially numbered files in the XML-based OSM-Change
(OSC) format. For instance, changeset #786001 is
published at <base-path>/000/786/001.osc.gz.

The root of an OSC document is formed by the
osmChange-element, whose immediate children may
be any number of occurrences of create, modify, and
delete elements. Each of these elements then contains
a number of OSM entities that were changed, as shown
in Listing 4.

Listing 4: Example of an OSM change file.
<!-- The attributes timestamp, uid, user, and

changeset are omitted in this example -->

<osmChange version="0.6" generator="Osmosis 0.37">

<modify>

<node id="1" version="5" lat="50" lon="8" .../>
<node id="2" version="5" lat="51" lon="8" .../>
<node id="3" version="5" lat="50" lon="9" .../>

24http://lokino.sti2.at/

</modify>
<create>

<way id="1" version="5" ...>

<nd ref="1"/>
<nd ref="2"/>
<nd ref="3"/>
<tag k="amenity" v="school"/>
<tag k="name:en" v="Mountain School"/>

</way>

</create>
<delete>

<node id="4" version="5" lat="50" lon="9" .../>

<tag k="created_by" v="Merkaartor 0.12"/>

</node>
</delete>

</osmChange>

The children of the create, modify and delete elements
are elements describing the affected OSM entities.
These descriptions are interpreted in context of their
parent element as follows:

 Create: The state of the newly created entity.
 Modify: The new state of the entity after its mod-

ification.

 Delete: The state of the entity prior to its deletion.
There are two things worth noting: Firstly, changes are
not given on a per-tag, but on a per-entity basis and,
secondly, the prior state to a modification is not given
in the OSC file.

Whenever the LGD live sync module processes an
OSC file with a sequence number s, it publishes two N-
Triples files containing the added and removed triples,
namely s.added.nt.gz and s.removed.nt.gz.
As a result, verification whether our changesets are
correct can be done by examining the corresponding
.osc file.

Since the RDF-based live sync operates on a perstatement basis, but changes are given on a per-entity
basis, the implication is, that during the syncronization
the states of the entities need to be constantly queried.

7.3. Observations

In this part, we present the key aspects that need
to be considered for a synchronization procedure that
meets our requirements. We classify them according to
whether they are general, or pertain to the changes of
nodes or ways.

General aspects
 Filtering: A vast amount of data is changed on
OpenStreetMap every minute. Our experience
with DBpedia [23] was that processing large
amounts of changes in RDF can cause severe performance issues with triple stores. In order to be
performance-wise on the safe side we decided
from the beginning to put filters in place. This en-

ables us to trade the completeness of the coverage of the data for performance by adjusting the
amount of changes that will be processed.

 Relevance: Any update should leave the store
only with relevant data. Relevance in determined
in regard to a filter configuration consisting of
black- and whitelisted tags (See 7.5). The filtering prevents the store from growing too large as
updates are being applied, and also prevents users
from receiving dirty answers to queries, such as
wayNodes that are no longer connected to a way.
 Modifications: In the event of modifications, we
do not get an entities state prior to the change.
Therefore, we need to query our store for each
modified entity in order to compute the changeset.

Node-based aspects

 Repositioning of nodes: When a node position
is changed, the polygons/linestring property of
all referencing ways needs to be updated accord-
ingly.

 Deletions and Modifications: Whenever a node is
deleted or modified and fails the relevance test it
will be removed - unless it is referenced by a relevant way.

Way-based aspects

 Whenever a way is created or modified, it may
contain references to nodes that are not in the
changeset (as the points themselves were not
changed). This makes it necessary to keep track of
all the nodes, as each of them may at some point
in time become connected to a way.

 LineStrings and Polygons: For each way the corresponding linestring or polygon must be assem-
bled.

 For every relevant way, all its referenced nodes

also need to be loaded.

 Irrelevant nodes that are referenced by relevant
ways should not carry any information except
for their position. Such nodes should not even
be explicit instances of lgdo:Node in order to
avoid many non-interesting triples which would
increase the dataset size and reduce performance.
 Whenever a way is modified, it may be no longer
relevant, and therefore needs to be removed.
Whenever a way is removed, all nodes which are
not relevant by themselves also need to be re-
moved.

7.4. Algorithm

Stadler et. al / LinkedGeoData

Our live-sync algorithm is given in Listing 1 and explained as follows. Essentially, for each entity we need
to determine its state before and after its modification.
By this we can figure out the triples that need to be
added or removed from the store. Recall, that we need
to keep track of all node-positions because every creation or modification of a way might introduce a reference to it. Rather than creating triples for more than
a billion node positions, we chose to keep the nodes
positions in a separate relational database, which we
refer to as the node store. We load node positions into
the triple store as needed. The fetchRDF_Node and
fetchRDF_Way functions query the triple store for the
previous state of an entity, whereas the corresponding
generateRDF functions generate the new state. Note
that in the case of ways this also involves all triples
of the ways node-list (see Listing 3). The shape triple
is the one stating the polygon or linestring of a way,
and is updated accordingly on changes. The major optimizations are based on caching: We keep last recently used maps of the node positions and the state
of resources in order to reduce the amount of database
lookups, which speeds up the fetch functions. The
caches are updated accordingly when changes are written to the triple store and node store.

7.5. Filtering

We use a simple filtering system where entities must
pass the following three tag-based filters before their
corresponding RDF data may end up in the dumps and
SPARQL endpoints:

 EntityFilter: Rejects entities with at least one

blacklisted tag.

entity.

 TagFilter: Removes all blacklisted tags from an

 RelevanceFilter: Only accepts entities with cer-

tain white-listed tags.

if created(n) then

end for

else if deleted(n) then

end if

that need to be added and removed, respectively.

end if

else if modified(n) then

Remove entry for (n.id) from the node store
O  O  f etchRDF _N ode(n)

Update (n.id, n.position) in node store
O  O  f etchRDF _N ode(n)
if relevant(n) then

N  N  generateRDF _N ode(n)

Insert (n.id, n.position) into node store
if relevant(n) then

N  N  generateRDF _N ode(n)

end if
for all ways w where n is a member do
sto  f etchShapeT riple(w)
O  O  sto
stn = createNewShapeTripleWithPositionReplaced(sto, n)
N  N  stn

Algorithm 1. LinkedGeoData Live-Sync algorithm
Input: A changeset C
Output: The sets Additions and Removals corresponding to the triples
1: Let: N  , O  
2: for all nodes n in C do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24: end for
25: for all ways w in C do
26:
if created(w) then
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
43:
44:
45: end for
46: procedure REMOVEIRRELEVANTNODES(nodes)
47:
48:
49:
50:
51:
52:
53: end procedure
54: Additions  N \ O
55: Removals  O \ N

end if
wo  f etchRDFW ay(n)
O  O  wo
if relevant(wo) and not relevant(w) then

else if deleted(w) then

end if
O  O  f etchRDF _W ay(n)
RemoveIrrelevantNodes(w.nodeList)

m  f etchN odeP ositionM ap(w.nodeRef s)
N  N  generateRDF _W ay(w, m)

m  f etchN odeP ositionM ap(w.nodeRef s)
N  N  generateRDF _W ay(w, m)

for all nodes n in nodes do

d  f etchRDF _N ode(n)
if not relevant(d) then

O  O  d

RemoveIrrelevantNodes(wo.nodeRefs)

end if
if relevant(w) then

else if modified(w) then

end if

end if

end for

if relevant(w) then

For instance, in the current release the entity filter rejects all entities with a tag whose key equals railway,
unless the corresponding value is station, halt, or
tram_stop. By this, we rule out more than 160K
nodes and 710K ways. As an example for the tag fil-
ter, we reject the created_by tag which seems to
carry little information. As a result, just by considering
the nodes, we can already omit approximately 20 million triples for the most frequently used value JOSM.
The relevance filter was introduced as it was noticed

that only blacklisting certain tags still results in a lot of
seemingly non-interesting data to get processed. The
complete filter configuration is published together with
each release25. As a final filtering step, we reject ways
with more than 20 nodes in order to prevent filling the

25For the filter configuration of the release at the time of writing,
see the files LiveEntityFilter.txt, LiveRelevanceFilter.txt, and Live-
TagFilter.txt at http://downloads.linkedgeodata.org/
releases/110406/

store mainly with way-node relations rather than information based on tags, as each way-node relation results in two triples: one for relating the way to its node,
and one for each node position. Therefore, a single way
with a relevant tag and 20 nodes already results in more
than 40 triples.

8. Statistics

In this section we outline statistics about

three
things: 1) the usage of the LinkedGeoData service, 2)
the LinkedGeoData dataset and 3) performance of the
Live-Sync.

For determining the usage of LinkedGeoData, we
evaluated the usage of both of our SPARQL-endpoints
(static and live) in the time from from Nov 2010
until April 2011, i.e. after they were made publicly
available. In this timespan, they were queried a total
of 127.000 times from 422 distinct machines26. The
top ten machines were responsible for 73% of those
queries. More than 1.000 queries were issued by 19 of
them. Figure 5 shows the number of queries per day.
The diagram indicates that the LGD service is being

Fig. 5. Usage of the SPARQL endpoints.

actively used, and that the usage rate is increasing.

The current LGD release dataset contains about
65 million triples corresponding to about 6.3 million
nodes and 66 million triples corresponding to 7.1 million ways. Table 5 gives an overview of selected instance counts in the static SPARQL endpoint, and their
increase in number in LGD live one after processing
changsets corresponding to roughly three weeks.

Regarding LGD live sync performance, we measured the following values: on average, the process-

ing time of a single minutely OSM changeset takes 5
seconds with our filter configuration. Between April 6
and April 30, about 40 000 changesets were processed,
each of them corresponding to an average addition of
620 and removal of 42 triples affecting 102 distinct re-
sources.

In the initial LGD release of 2009, there were 50
object properties. However most of them were considered to be better suited as classes, resulting in the relatively low number of only 9 object properties in the
current release.

9. Tools using LinkedGeoData

9.1. LGD Browser

In order to showcase the benefits of revealing the
structured information in OSM, we developed a facetbased browser and editor for LinkedGeoData (see Figure 6)27. It allows to browse the world by using a
slippy map28. Once a region is selected, the browser
analyzes the descriptions of nodes and ways in that region and generates facets for filtering. Once a facet or
a specific facet value has been selected, matching elements are displayed as markers on the map and in a
list. If the selected region is changed, these are updated
accordingly.

27Available online at: http://browser.linkedgeodata.

org

28http://wiki.openstreetmap.org/wiki/Slippy_

Map

class

Ways
Nodes

Stream
Parking
Village
Shop
Hamlet
School
PlaceOfWorship
Restaurant
FastFood
Pub

#instances (static)

#instances (live)

7 132 373
6 251 067

2 377 952
520 901
516 547
497 820
415 609
361 239
359 563
173 350
67 980
67 279

Table 5

7 334 925
7 022 481

2 419 467
537 477
522 570
519 164
424 179
366 070
363 225
177 888
69 772
68 279

26Not counting the queries from our own network.

Comparison of data from April 6th with live data from April 30th 2011.

2010-11-252010-12-112010-12-312011-01-182011-02-032011-02-202011-03-092011-03-26020004000600080001000012000SPARQL Queries Per Day16

Stadler et. al / LinkedGeoData

Fig. 6. LinkedGeoData Browser.

Performing the facet analysis naively, i.e. counting
properties and property values for a certain region, becomes slower the greater the size of the search region.
This is due to the fact that the database has to aggregate
the facets from all the entities that fall into the search
region.

To resolve this problem we precomputed tile-based
statistics at various zoom levels. If zoomed in close,
the exact counts will be measured, however if zoomed
out the counts will be approximated by aggregating the
the statistics of the visible tiles.

Furthermore, there are several new smaller LGD
browser features compared to its previous version described in [1]. For instance, an RDF export of the current map selection including its facets can now be per-
formed. This allows the easy extraction of a relevant
fragment of LinkedGeoData for use within other tools.
For each point on the map, its RDF source can be retrieved and it can be edited on OpenStreetMap. The
browser has been extended by a search function powered by OpenStreetMap Nominatum. The facet support
has been extended to object properties, i.e. values of
those properties can now be restricted in the facet se-
lection. Finally, the LGD browser now provides a permanent link feature.

9.2. STEVIE

STEVIE 29 [4] is an application developed by the
Institute for Web Science and Technologies at the University of Koblenz, which uses LinkedGeoData. STEVIE allows one to create and edit points of interests
(POIs) (see Figure 7) and annotate them semantically.
The annotations use the LinkedGeoData ontology and
are also interlinked to DBpedia. The annotations allow
to employ clustering techniques in STEVIE, which are
used to group sets of similar objects within the limited
screen size of a mobile phone. The application enables
the creation of events and, therefore, combines spatial
and temporal information. An emphasis is put on providing an intuitive user interface for navigating those
two dimensions. In order to display POIs and classify
them, STEVIE uses the LinkedGeoData REST inter-
face, ontology and SPARQL endpoint.

9.3. BeAware

BeAware30 is a website, which enables one to manage events and integrates them with geographic in-
formation. It uses its own ontology for events and
integrates LinkedGeoData for choosing locations. In

29http://tiny.cc/stevie10
30http://beaware.at/

Fig. 7. Creation of a point of interest in STEVIE. The application includes a temporal dimension and highlights POIs where events take
place in the selected time span.

particular, the curated ontology of LinkedGeoData
provides benefits for the application31: First of all,
LinkedGeoData ontology that connects all OpenStreetMap categories and properties excellently suits
our interface of new place choosing (in addition, it allows one to use an inference engine, for example, for
retrieving buildings of all types). Figure 8 shows a
screenshot for choosing the location of an event. An
advantage gained by this association is that it facilitates
querying for events at a particular location or within
a particular city. In addition, in some cases further information about the location from an interlinked data
source is available and can be presented to the user.

9.4. Layar

Layar32 is an augmented reality browser for mobile phones. Within Layar, a LinkedGeoData layer was
developed. This allows to view the surrounding objects of a person via the mobile phone camera. The
LinkedGeoData ontology is used to classify objects
and map them to displayed icons. The layer uses
rdfs:label, which is aggregated from several tags

Fig. 9. Vicibit is a tool to generate custom views on LinkedGeoData
via Exhibit. The example shows a faceted view on nearby pubs, bakeries and shops. The code generated by Vicibit can easy be pasted
into blogs, forums and web pages.

in OpenStreetMap, to display the name of an object.
Further triples describing an object are show in a detail
view.

9.5. Vicibit

Vicibit33 (exhibit your vicinity) is a tool working
on top of LinkedGeoData Live, which allows to create
customised views on LinkedGeoData. It enables users
to pick classes from the LinkedGeoData ontology they
are interested in as well as a default map section, which
should be displayed. The tool then generates HTML
code, which creates a map displaying all items belonging to the selected classes as well as the ability to filter by facets. Technically, this is realized by applying
the Exhibit framework34 on data in the LinkedGeoData
Live SPARQL endpoint. A typical use case is that a
webpage or blog entry describing a particular event can
be enriched with a map of nearby pubs and other shops
(see Figure 9).

10. Related Work

We split the presentation of related work into five
parts: First, we describe initiatives for integrating spa-

31http://alexidsa-en.blogspot.com/2010/06/

rdf-vs-nonrdf-for-geodata-at-beaware.html

32http://www.layar.com

33http://vicibit.linkedgeodata.org
34http://www.simile-widgets.org/exhibit/

Stadler et. al / LinkedGeoData

Fig. 8. Marking the location of an event in BeAware.

tial information in the Web of Data. Afterwards, we
summarize work on techniques for converting relational databases to RDF, which is a crucial task we
faced in LinkedGeoData. We then give an overview of
triple stores supporting geographic data more complex
than point data. Finally, we review some related work
done by the GIS community, give pointers to interlinking frameworks and explain our choice of using SILK
and LIMES.

10.1. Spatial RDF Datasets

In the following, we describe spatial data sets, that
are available as RDF and which we consider important.

Ordnance Survey35 is the national mapping agency
in Great Britain. Over the past years, they released some of their products as Linked Data36.
Ordnance Survey provides very accurate, highquality data and represents a major contribution
to the spatial data web. In a comparison between
Ordnance Survey data [10] focused on England
and London in particular, OSM data was, how-
ever, also fairly accurate. A main difference between both efforts is that OpenStreetMap, and
thereby also LinkedGeoData, are world-wide and
community-driven approaches.

GeoNames is a comprehensive global spatial database
containing several million features, such as cites,
forests, and peaks. This data has been converted
to RDF37 and is served as Linked Data. GeoNames provides RDF properties for navigating spatial hierarchies (parent/child), publishes postal
codes, labels, population figures, type information (via feature codes) and other properties of
spatial entities. Due to this wealth of information,
we developed a fine-grained interlinking between
LinkedGeoData and GeoNames as described in
Section 6. A difference between GeoNames and
OpenStreetMap is that OSM allows free tags,
which makes it easier to extend and tailor for
new, previously unforeseen usage scenarios. For
instance, shops in OSM sometimes (specifically
60 thousand times as of April 2011) contain opening hours. Another example is the wheelchair tag,
used 24 thousand times, which indicates whether
or not a spatial entity is accessible via a wheel
chair. OpenStreetMap also has a larger community than GeoNames with several hundred thousand users and more fine-grained data, which
even includes entities such as traffic lights or trash
bins.

The United Nations FAO (Food and Agriculture Or-
ganisation) Geopolitical Data [6] provides RDF

35http://www.ordnancesurvey.co.uk
36http://data.ordnancesurvey.co.uk

37http://www.geonames.org/ontology/

descriptions of countries and other political units
as well as relations between them. While it contains only a small number of instances (298 in
May 2011), it includes very detailed information
on those instances. For this reason, we decided to
provide interlinks with UN FAO.

GeoLinkedData.es is an open initiative to provide
Spanish geospatial data [3]. It focuses on hydrography features and integrates several existing data
sources.

NUTS (Nomenclature of Territorial Units for Statis-
tics) provides a hierarchical system for describing
the economic territory of the European Union 38.
The NUTS hierarchy is established by EuroStat.
EU NUTS data has been converted to RDF 39. It
allows to explore the hierarchy via Linked Data,
e.g. a possible path along the partOf property is
Inner London East  Inner London  London
 UK.

10.2. Relational Database to RDF Conversion and

Mapping

Converting relational databases to RDF is a significant area of research with several approaches published and many tools available. In particular, there is
the W3C RDB2RDF working group, which aims to
standardize a database to RDF mapping language [7].
Instead of providing an in-depth overview, we refer to
recent surveys [21,22] and overviews40 on this topic.
There are various tools available implementing the surveyed approaches such as D2R, Triplify, DartGrid,
DataMaster, MapOnto, METAmorphoses, ODEMap-
ster, RDBToOnto, RDOTE, Virtuoso RDF Views and
VisAVis. For LinkedGeoData, we decided to use a custom mapping solution as described in Section 4, despite the number of available conversion tools. The
reason for this choice was the particular tag structure
of OSM, which allows us to provide a highly flexible
schema as well as handle a very high amount of data
via our approach.

38http://epp.eurostat.ec.europa.eu/portal/
page/portal/nuts_nomenclature/introduction
39http://rdfdata.eionet.europa.eu/ramon/

nuts2008/

40http://esw.w3.org/topic/Rdb2RdfXG/

StateOfTheArt

10.3. Triple Stores supporting Complex Geometries

In the relational database realm, support for complex geometric data (points, lines, and polygons) is already well established. Examples are MySQL41, Post-
greSQL42, and Oracle43. Meanwhile, in the Semantic Web, the support for geometric data has also increased significantly. Currently, we are aware of four
triple stores supporting this kind of data: OWLIM
Standard Edition44 (OWLIM-SE, previously known as
BigOWLIM), Open Sahara45, Parliament46, and Alle-
groGraph47.

So far there has not been a standard query language
for geospatial data in the Semantic Web. GeoSPARQL
is a proposed extension to SPARQL 1.0 [19] with the
aim to provide this functionality. It is currently at the
stage of becoming a standard by the Open Geospatial
consortium48. With these tools, tasks that require complex operations on geometries become possible in the
Semantic Web.

We chose Virtuoso as the backend for LinkedGeoData because of its good performance [2] and our assumption that point geometries would be sufficient for
most of our interlinking tasks. Although this turned out
to be true, in the future we want to extend these tasks
to complex geometries and therefore also evaluate the
other stores.

10.4. Gazetteer Mapping

Our interlinking approach is very similar to the
matching of gazetteers in traditional Geographic Information Systems (GIS): [11] discusses the alignment of two major gazetteers. For this purpose, place
names,
types, and footprints (geographical entities
such as point, lines, and polygons) were identified as
the most fundamental features of gazetteers. These entities closely resemble the concepts of classes, labels
and geometries, on which we based our interlinking.
Prior work about the derivation of an OWL ontology
suitable for similarity searches from gazetteers is given
in [12]. A comprehensive discussion about similar-

41http://www.mysql.com
42http://www.postgresql.org/
43http://www.oracle.com
44http://www.ontotext.com/owlim/geo-spatial
45http://opensahara.com
46http://parliament.semwebcentral.org/
47http://www.franz.com/agraph/allegrograph/
48http://www.opengeospatial.org/

Stadler et. al / LinkedGeoData

ity search paradigms for Description Logics is lead in
[13].

10.5. Interlinking and Ontology Mapping

There have been several decades of research starting with the integration of different database schemata.
Tools like COMA [8] provide rich support for various
matching operations between databases as well as between RDF knowledge bases. [5] describes a semantic
approach for matching export schemas of geographical
database Web services, based on the use of a small set
of typical instances. The paper also contains an extensive experiment, carried out within the context of two
gazetteers, GeoNames, and the ADL gazetteer, to illustrate the idea. [15] describes an approach integrating
spatial data from multiple sources, which also incorporates a temporal dimension. For interlinking Linked-
GeoData, we mainly searched for instance matching
tools, since our main goal is to match specific points
of interests in different knowledge bases. In this area,
SILK and LIMES are the most widely used applica-
tions. We extended SILK with an appropriate metric for matchings based on WGS84 distance between
points, which was later included in the official SILK
release. A main benefit for SILK as well as LIMES,
which we both use, is their ability to handle large
volumes of data and use SPARQL endpoints as input
source.

11. Conclusions and Future Work

The transformation and publication of the OpenStreetMap data according to the Linked Data principles adds a new dimension to the Data Web: spatial data can be retrieved and interlinked on an unprecedented level of granularity. These enhancements
may further contribute to semantic-spatial search en-
gines, such as [13,20], and enable a variety of new
Linked Data applications such as geo-data syndication (publishing information about geographical entities via feeds). Another example is personalized and
context-sensitive spatial Linked Data update propagation and consumption, which might be realized with
systems such as sparqlPuSH [18].

The dynamics of the OpenStreetMap project will
ensure a steady growth of the LinkedGeoData dataset.
Furthermore, we established mappings with DBpedia
and GeoNames as the central interlinking hubs for spatial information on the Web of Data. Despite the re-

cent advances in RDF data management, it became
clear during our work on LinkedGeoData that spatial
data of the size of OpenStreetMap still poses a major
challenge wrt. scalability. Substantial engineering effort was required to optimize the performance of the
querying interfaces, live synchronization, as well as
the interlinking.

Currently, our transformation approach imposes the

following limitations on the use of LinkedGeoData:

 The current ontology is mainly automatically derived from OpenStreetMap tags, with mostly just
minor manual edits. However, it could benefit
from axiomatizations, such that, for example,
any PlaceOfWorship with religion christian is a
Church. The extent to which the addition of disjointness axioms makes sense needs yet to be in-
vestigated. For instance, currently instances corresponding to hotels that also offer a restaurant
are currently tagged with both types. However, an
alternative solution would be to model such instance as a Hotel, that offers a feature that is a
Restaurant. For these kinds of design decisions,
we envision a solution similar to the DBpedia
Mapping Wiki49, that enables the community to
contribute to the axiomatization of the ontology.
 Our filtering (see Section 7.5) currently discards
a significant amount of data from OSM. Hence,
there are use cases that are possible with OSM
data, but not with LinkedGeoData yet. For exam-
ple, since we filter out ways with more than 20
nodes, routing50 is currently not possible based on
the LinkedGeoData SPARQL endpoints.

 Because we do not support OpenStreetMap relations yet, information about compound entities is
also not yet available in LinkedGeoData. Examples of such entities are: multipolygons (collec-
tions of polygons, where each member may act
either as solid or as a hole), or designation signs.
Further examples include large boundaries, wa-
terways, and routes, that are modelled with way
segments.

As for the latter two limitations, we are currently
investigating whether and how these limitations can
be overcome by directly rewriting SPARQL queries
to SQL queries over the relational schema of Open-
StreetMap. Although substantial progress was made in
RDB-RDF mapping during the last years, and imple-

49http://mappings.dbpedia.org
50http://wiki.openstreetmap.org/wiki/Routing

mentations are now more robust, scalability and the
lack of support for geometry datatypes is still an issue
preventing a direct deployment of these technologies
for LinkedGeoData.

Another stream of future work is the better support
for geometries according to the current NeoGeoVocabulary development51, which we are supporting. A semantic misrepresentation currently found in Linked-
GeoData, for example, is the missing separation of geometries (such as points and polygons) and features
(such as hotels and pubs), which we plan to resolve in
the future.

Finally, we identified further candidates that seem

worthwhile for interlinking:

 The CIA World Factbook52 contains detailed information on the country level, such as their conventional names, their birthrate, and their gross
domestic product. An RDF version is hosted by
the Free University of Berlin53.

 The site climb.dataincubator.org hosts
a collection of data of about 1400 climbing locations with latitude/longitude information. The
resources were collected from various climbing
web sites and converted to RDF.

 Last.fm54 has information about music artists, as
well as events, such as performances and festi-
vals. Many event locations are geo-tagged, making them suitable candidates for interlinking.
There exist at least two wrappers for the last.fm
API that return RDF55.

Acknowledgments

We would like to thank OpenLink for providing an
enterprise edition of the Virtuoso database system that
offers support for spatial SPARQL queries. Further-
more, the authors thank the members of the LinkedGeoData community and 3rd party application developers for their valuable feedback and contributions to
the project. In particular, we would like to mention
Robert Schulze for his work on Vicibit. This work
was supported by a grant from the European Unions
7th Framework Programme provided for the projects
LOD2 (GA no. 257943) and LATC (GA no. 256975).

51http://geovocab.org/doc/neogeo.html
52https://www.cia.gov/library/publications/

the-world-factbook/

53http://www4.wiwiss.fu-berlin.de/factbook/
54http://last.fm
55dbtune.org/last-fm/ and lastfm.rdfize.com/
