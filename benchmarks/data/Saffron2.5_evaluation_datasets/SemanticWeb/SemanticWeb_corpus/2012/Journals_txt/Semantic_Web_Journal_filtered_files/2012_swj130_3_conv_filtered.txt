Semantic Web 1 (2011) 1
IOS Press

Context-driven RDF Data Replication on
Mobile Devices 1

Editor(s): Alexandre Passant, DERI, NUI Galway, Ireland; Fabien Gandon, INRIA Sophia Antipolis, France; Harith Alani, KMI, The Open
University, UK
Solicited review(s): Jerome Euzenat, INRIA Grenoble Rhone-Alpes, France; Martin Raubal, ETH Zurich, Switzerland

Stefan Zander a and Bernhard Schandl a,b
a University of Vienna, Research Group Multimedia Information Systems
Liebiggasse 4/3-4, 1010 Wien, Austria
E-mail: {firstname.lastname}@univie.ac.at
b Gnowsis.com
Graumanngasse 7/B/5, 1150 Wien, Austria
E-Mail: bernhard.schandl@gnowsis.com

Abstract. With the continuously growing amount of structured data available on the Semantic Web there is an increasing desire to
replicate such data to mobile devices. This enables services and applications to operate independently of the network connection
quality. Traditional replication strategies cannot be properly applied to mobile systems because they do not adopt to changing
user information needs, and they do not consider the technical, environmental, and infrastructural restrictions of mobile devices.
Therefore, it is reasonable to consider contextual information, gathered from physical and logical sensors, in the replication
process, and replicate only data that are actually needed by the user. In this paper we present a framework that uses Semantic Web
technologies to build comprehensive descriptions of the users information needs based on contextual information, and employs
these descriptions to selectively replicate data from external sources. In consequence, the amount of replicated data is reduced,
while a maximum share of relevant data are continuously available to be used by applications, even in situations with limited or
no network connectivity.

Keywords: Mobile applications, data replication, context awareness

1. Introduction

Mobile devices have become central parts of our
everyday lives for managing our digital assets and
lifestyle. Due to the convergence of traditionally separated networks and information channels and the continuing technical progress of mobile devices, network
and online services can now be accessed regardless
of spatial or temporal constraints: anytime, anywhere,
and whenever network connection allows to do so. In
parallel, with the emergence of the Web of Data, the
amount of structured data available on the Web and in

1This paper is an extended version of [49].

particular on the Semantic Web has been continuously
growing throughout the past years. An increasing advent of applications that utilize and integrate such data
from different, distributed sources can be observed,
providing additional services on top to users or software agents. This trend is even more accelerated by
so-called Semantic Web 2.0 [23] applications.

A common strategy to maintain service availability
and to guarantee a certain service quality is replication
of remote data sets. However, traditional replication
mechanisms do not apply properly to mobile scenarios
for the following reasons:

 Technical

limitations: mobile devices are restricted in terms of memory capacity, CPU per-

1570-0844/11/$27.50 c 2011  IOS Press and the authors. All rights reserved

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

formance, and power supply, which may hinder
the local replication of large data sets.

 Environmental, infrastructural, and security con-
straints: network connectivity may be limited
technically (no cellular radio coverage), economically (the network connection may be expensive),
or because of security restrictions (e.g., when the
network does not permit to establish a VPN con-
nection). Consequently, in case of unstable network connections only the most important and
relevant data sets should be replicated.

 Different application and operation models: mobile devices employ different application models and operating system infrastructures originating from ad-hoc and situational usage-patterns.
For instance, since mobile devices use different modalities in accessing information resources
and are operated in different contexts, it is more
common that current tasks might be intermitted
abruptly or moved to the background.

Due to these significant differences, mobile data
replication should consider the importance of replicated data in relation to user tasks and activities as well
as their operating environments. We therefore adopt
the concepts of context and context awareness and utilize them for replication of RDF data sets to mobile de-
vices. This allows for a proactive, selective, and transparent replication, focusing on the users situation and
information needs. Our proposed solution addresses
these issues from two sides: first, it considers the current (and future) context of the user and, based on
this information, selects subsets of remote data sources
for replication. Hence, the amount of data to be replicated (i.e., to be transferred to, and stored on the mobile device) is reduced. Second, these subsets are replicated to the mobile device proactively and transpar-
ently, whenever network connectivity allows to do so.
As a consequence, data are still available when no network connectivity is present, while access times are
significantly reduced since data can be reused from the
local replica. As a side effect, semantic technology infrastructure is brought to mobile devices, which can be
utilized by any application.

This paper presents the MobiSem Context Frame-
work1, which is designed as a situation-sensible infrastructure framework for Semantic Web applications

running on mobile devices. It uses a loosely coupled
combination of context- and data providers to populate
the local triple store with data from remote sources.
It considers context information acquired from the device itself or the surrounding environment, thus hiding
the tasks of context acquisition and data provisioning
from users and applications.

We want to motivate our approach through a typical
use case of a knowledge worker and its daily working
data items. In this scenario, we assume that the user
will be on travel during the next three days, where a
number of business meetings will take place. The user
cannot rely on a stable network connection during this
trip. Therefore, it is desirable to transfer relevant information about the meetings and, in particular, the persons that will participate in the meetings to the mobile phone. This information can originate from a variety of sources, including public knowledge bases like
Wikipedia/DBpedia2 and GeoNames3, or the users
private data which might be available through their
Semantic Desktop environment (e.g., relevant docu-
ments, email messages, and to-do lists, which are represented in a machine-processable format).

The next section (Section 2) gives an introduction
to the notion of context and context awareness, and it
elaborates on how they can be augmented using Semantic Web concepts and technologies. It is followed
by an overview of currently available mobile RDF
frameworks and related context-aware Semantic Web
projects (Section 3). The architecture of the MobiSem
framework, which can be deployed to mobile devices,
and technical details are presented (Section 4). The
feasibility of this context awareness approach is shown
through a prototypical implementation of an application scenario on the Android platform (Section 5) followed by a comparative performance evaluation of the
underlying RDF processing infrastructure (Section 6).

2. Context and Context Awareness

For the intelligent provision of user-related data,
context awareness it is essential to capture the context
in which the user currently operates. We aim to utilize
the notion of context in order to describe and represent
the users information needs so that relevant data sets
can be proactively retrieved from external data sources
in a transparent and automated manner. In this sec-

1The MobiSem Context Framework has been developed in the
course of the MobiSem project (see http://www.mobisem.
org) and is currently being transitioned into a commercial solution.

2http://dbpedia.org/About
3http://www.geonames.org/

tion, we provide an introduction to the concepts of context and context awareness from a technical perspective and discuss their main problems when used in information systems. That followed, we present several
areas where concepts and technologies from the Semantic Web can substantially enhance context-aware
computing on mobile systems.

2.1. Context and Context Awareness in Information

Systems

Many definitions have been proposed for the notions
of context and context awareness. Context in its widest
sense is defined as everything that surrounds a user or
device and gives meaning to something [43] as well
as anything that can be used to characterize the situation of an entity [14]. We define the term contextual information to refer to any information that is relevant for describing the situation a user or device operates in. Consequently, context can be acquired explicitly where context related information is manually
specified by the user, or implicitly where context information is captured using specific technologies such
as sensors or network communication, or by monitoring user behavior. The main focus of our framework lies on the implicit acquisition of contextual in-
formation, especially from physical sensors embedded
in the device or ubiquitous sensors located in the immediate vicinity, as well as logical or software sensors
that extract context-relevant information from personal
sources such as emails, calendars, or web services. In
this respect, the challenge is to identify the set of relevant features used for capturing and describing a situation or parts of the environment sufficiently [4].

In general, two forms of context awareness can
be found in information systems [21]: direct awareness shifts the process of context acquisition onto the
device itself, usually by embodying sensors that autonomously obtain contextual information; e.g., location ascertainment using the device-internal GPS sen-
sor. Indirect awareness, in contrast, captures contextual information by communicating with sensors or
services via the surrounding environment or infrastruc-
ture. For instance, to capture the social context of a
user, a mobile device may request data from social
communities or portals; to track the users location, a
remote geocoding service (based on the users IP ad-
dress) may be employed.

A fundamental problem of context-sensitive systems is that there exists no general model of context
and context awareness. Especially in mobile comput-

ing, the notion of context is used very ambiguously
across communities and is usually defined according
to specific application domains (cf. [8,37]). This problem is also reflected in the developments of mobile
context-aware applications since no widely accepted
and well-defined programming model exists, resulting
in a tight coupling and low-level interaction between
application code and context acquisition components.
Consequently, interpretation and exchange of sensed
values is anchored within applications in a proprietary manner. Recent approaches propose a more flexible architectural and conceptual design for representing and processing context-relevant information by using formal models for context and context awareness
(e.g., [4,6]) complemented with user and task analysis to enable a dynamic interaction between context-
, task-, and user models (e.g., [38]), or employ middleware infrastructures (e.g., [24,28]) that encapsulate
sensor-specific APIs in dedicated components in order to facilitate communication and interoperability
between context processing components4 and the underlying framework, while making use of knowledge
representation frameworks such as RDF for describing
context information [17,35].

The MobiSem framework extends this idea in that
it has been designed specifically to operate on mobile
systems, and to use Semantic Web technologies to ac-
quire, interpret, aggregate, store, and reason on contextual information, independent of any application or in-
frastructure. Semantic Web technologies and practices,
which are designed as an information processing infrastructure for heterogeneous environments, can help
to solve some of the issues described before, and are
therefore highly relevant for the design and development of ubiquitous and mobile context-aware systems.

2.2. Dynamically Evolving Context Descriptions

Especially in technical disciplines it is a predominant practice to concentrate on sensorial and static
data such as location, time, identity, activity etc. (cf.
[34,41]). In such disciplines, context is predominantly
considered as a representational issue, where the focus is put on its codification and representation [43].
According to that perception, context can be scoped in
advance, is instance-independent, and separable from
user activities [15]. The reasons for that predominant

4That is context producers such as context acquisition compo-
nents, and context consumers such as services, applications, or the
device itself.

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

practice of utilizing context in information systems
can be attributed to the adherence to existing software
methodologies [43].

However, this static perception entirely neglects the
dynamic aspects of context, which arise in the course
of interaction and render the determination of relevance of contextual facts a priori at design time im-
possible. Context should be considered as an emergent phenomenon or feature of interaction that is centered around user activities [43] and continuously renegotiated between communicating partners [12,15,34].
Therefore, the determination of a relevant set of canonical context properties in advance is very difficult and
nearly impossible [17].

To cope with the dynamic and emergent nature of
context, a context processing and management framework must facilitate flexible, extensible, and open context descriptions that are not restricted to a single static
vocabulary or predefined schema. Static context descriptions are not able to deal with unknown context
information at run time, but require links between different context vocabularies to be specified at design
time [17]. Therefore, a fundamental requirement of our
proposed context framework is the ability to handle
new types of context information dynamically using
well-accepted standard vocabularies to guarantee their
accuracy and evolution. In this respect, one can observe an analogy to the real Semantic Web which
deals with providing infrastructure to process information in a distributed and heterogeneous manner.

A general problem of context management and processing is that of context ambiguity [14]. Most contextaware computing approaches are based on the implicit
assumption that the acquired context is a 1-to-1 representation of the surrounding real world context. Obvi-
ously, this assumption is wrong due to the inherently
existing differences in the way context is sensed and
represented electronically, and the way it is perceived
by individuals [14,15]. Therefore, a context framework
can only work on a more or less accurate representation of the surrounding real-world context, where the
degree of accuracy depends on a multitude of different factors (e.g., the users task at hand, their information needs, personal goals, etc.). The dynamic nature of context makes it difficult to specify all relevant
context parameters at a systems design time, since in
general context is always defined relative to the situation in which it is used. Modeling context in information systems is therefore never universal in that a
context model encompasses all information characterizing a certain situation, but rather represents a rele-

vant subset of the constituting characteristics [14,15].
This leads to cases of having multiple representations
of the same situation differing in the accurateness and
the contextual aspects they include.

Detecting all artifacts that constitute a specific context is nearly impossible and cannot be fulfilled by
any context framework. However, applying reasoning
and machine learning techniques only increases the
accuracy of context acquisition and context recognition processes but never accounts for identifying all the
possible artifacts constituting a specific context or situation respectively. Context-aware computing is therefore always an approximation to a real-world situation
rather than a 1-to-1 reflection of it.

issue, several

To deal with that

techniques and
methodologies from different fields such as activity
theory [36,43], aspect-oriented context modeling and
modularization [11], or situational reasoning [6,33]
have been applied to process context on higher, more
abstract levels by aligning contextual aspects to abstract concepts (e.g., business meeting) adhering to
upper-level ontologies. The idea is to aggregate and
transform quantitatively acquired context artifacts into
qualitative statements in order to express complex conceptual relationships and dependencies [6], and for applying classification-based reasoning techniques [22].
Additionally, high-level representations of contextual
information unify access and utilization among appli-
cations. Context consumers do not need to be familiar with low-level data processing and interpretation,
thus context sharing and exchange are simplified. Such
transformations are considered as a means to make
contextual information domain-independent.

The MobiSem Context Framework follows this
idea in that it provides the technical infrastructure on
which additional more sophisticated layers (e.g., for
situation-awareness) can be deployed. Such layers allow for aggregating the contextual artifacts acquired by
the underlying framework and apply different methodologies (e.g., Bayesian networks, case-based reason-
ing, stochastic methods, etc.) for their interpretation,
consolidation, and augmentation. Section 5 describes
a use case in which new contextual information can be
derived by intelligently combining independently acquired contextual artifacts to provide a more sophisticated representation of a contextual aspect (in that
case, location).

2.3. Semantic Web-based Context Representation and

Processing

A general approach to systematically manage context information is to use ontologies, which provide
a common structure for representing and describing
information. The Resource Description Framework
(RDF) enables communication and sharing of context
descriptions between collaboratively communicating
partners; i.e., services or devices. Its open architecture
allows for the integration of different vocabularies so
that context descriptions can dynamically grow and
become more elaborated. Different works in the fields
of pervasive and ubiquitous computing (e.g., [8,17])
have shown that both RDF(S) and OWL are appropriate languages for representing dynamic and evolving
context descriptions [34]. Since these are grounded on
the open world assumption, the possibility of adding
new and more detailed information to existing descriptions makes them applicable in dynamic and unpredictable environments.

Ontologies further help in matching expressed context information to application or service needs in that
only relevant statements are extracted. A context con-
sumer, i.e., a device or application only needs to query
for the information it is interested in, instead of processing the entire context description. If parties expose
context descriptions that cannot be understood by oth-
ers, ontology matching algorithms can be applied in
order to reconcile differences in the description seman-
tics. Ontology alignment services [16] can be used to
account for the compatibility between different context models by identifying correspondences between
context descriptions and performing query transformations to better reflect domain and information space
evolutions [17].

Semantic technologies facilitate both direct and
indirect context awareness, since context-related information can be acquired from external services or
repositories in a structured and well-defined way based
on explicitly represented semantics using open stan-
dards. Sensorial context data can be mapped to vocabularies so that sensed values are embedded in a controlled context description based on ontological se-
mantics, where new facts can be discovered via aggregation and reasoning. In this respect, RDF simplifies
the aggregation of heterogeneous context information,
both on the semantic and syntactical layer.

Since technologies and concepts from the Semantic Web have been designed for heterogenous environ-
ments, they offer languages and technologies that serve

as standards for expressing contextual information,
and can therefore be shared and exchanged among systems and applications. RDF further allows one to represent contextual information in multiple ways by using different vocabularies and transformation rules so
that it can be used and understood by different components or context consumers. RDF thus facilitates transformations or mappings between heterogenous context
representations as well as the reconciliation of context
heterogeneity.

If context-relevant data are represented using Semantic Web languages, they can be integrated and processed even if they were not known at design time of
a mobile system (see [17] p.30 for an example). This
also applies to divergent sensor or service feature descriptions where the identification of correspondences
between heterogeneous descriptions serves as a basis
for utilizing services and integrating acquired information that were not been anticipated at design time of a
mobile system.

Additionally, ontologies facilitate the interpretation
of sensed or derived values to allow for their aggregation and transformation into symbolic values, i.e.,
transforming collected data into statements adhering
to a prescribed vocabulary. Hence, context acquisition
components do not need to anticipate possible queries
beforehand, but provide the data they have and let the
requesting components decide which information is of
relevance to them.

The Semantic Web community has already developed a wide range of vocabularies that can be used
to describe contextual information (including physical
parameters like time5 and location6, technical param-
eters7, or social aspects8). The terms defined in these
vocabularies are known across communities and adhere to a well-defined and commonly understood se-
mantics. Such vocabularies facilitate data interchange
between heterogeneous systems, and are often maintained by a large number of people to guarantee their
accurateness and relevance. Not being bound to a single vocabulary also adheres to the idea of dynamic and
flexible context descriptions evolving in the course of
user-relevant activities that can not be determined a
prioriespecially not at design time of a mobile system or a mobile application.

5http://www.w3.org/TR/owl-time
6http://www.w3.org/2003/01/geo
7http://www.w3.org/Mobile/CCPP
8http://www.foaf-project.org

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

In this section, we have outlined some of the areas in
context-aware computing where Semantic Web technologies can make substantial contributions in repre-
senting, processing, and sharing contextual information as well as in the reconciliation of heterogeneous
context semantics. The potential benefits of semantic
technologies for related areas such as pervasive computing have been discussed in previous works [17].
In the following, we discuss relevant work in terms
of related mobile replication approaches, mobile RDF
frameworks, and existing context-aware mobile Semantic Web applications, and provide an overview of
the MobiSem Context Framework that implements the
ideas and concepts presented in this section. We denote this form of context-aware computing as Semantic Web-based context-aware computing.

3. Related Work

For realizing our idea of making Semantic Web
technologies available on mobile systems for the in-
telligent, context-dependent provision of user-related
data, we analyzed existing Semantic Web frameworks
according to their appropriateness and deployability on
mobile platforms and discuss existing projects that aim
to synthesize semantic technologies, mobile systems,
and context-aware computing.

3.1. Mobile Data Replication

The problem of replicating data to mobile devices
is not new. Standard replication strategiesas known
e.g., from relational data basescannot be directly applied to mobile scenarios because of the special restrictions imposed by changing context parameters, as outlined in Section 2. Therefore, several algorithms were
proposed that estimate the costs of data usage based on
various context parameters, and adapt the used replication strategies accordingly (e.g., costs of data transmission [27], access frequency [47], location [48], or
device and environment characteristics [3]). These approaches are highly optimized towards single specific
context parameters but do not consider the entire user
context; especially they do not focus on the semantics
of replicated data. However, they can be considered
complementary to our approach since they can be used
to determine the frequency of replication updates.

Several approaches follow a more generic strategy and provide architectures that are extensible w.r.t.
the considered context parameters and replicated data

(e.g., [25,32]). However, all these approaches are depending on a server infrastructure, on which context
processing and inference tasks are performed. To the
best of our knowledge, no approach exists that solely
relies on processing executed on the mobile device it-
self, without depending on external components and
services.

3.2. Mobile Semantic Web Frameworks

Typical Semantic Web frameworks like Sesame9,
Virtuoso10, and Jena11 hide the details of RDF data
processing, serialization, and query execution from
higher-level applications. However, these heavy-weight
systems cannot be deployed on typical mobile devices
because of their limited memory and processing ca-
pacities, latencies as well as incompatible application
models and operating system infrastructures [18,30].
Those frameworks are usually developed for powerful server or desktop computing infrastructures incorporating many-core architectures, whereas mobile devices in general contain dedicated single-core RISCbased processors whose architecture was not designed
for processing large data amounts.

Although they have proven to be powerful means
to process, store, and reason over RDF data, they cannot be efficiently deployed on mobile systems due to
the previously mentioned reasons and are therefore not
considered in our related work analysis. Instead, we
exclusively concentrate on RDF frameworks that have
been specifically designed for deployment on mobile
platforms and are available as Java libraries as well
as mobile query and storage frameworks that are built
on top of existing RDF frameworks and provide additional functions for local RDF data query and persis-
tence.
3.2.1. Mobile XML Parsers

kXML12 is a lightweight XML pull parser that was
specifically designed for constrained environments
such as Applets or Java ME-based mobile devices. It is
based on the Common XML Pull API13 and combines
advantages of XML DOM and SAX parsers, such as
aligning XML processing routines to the structure of
an XML document and, at the same time, providing
instant access to parsed document elements. It was

9http://www.openrdf.org
10http://virtuoso.openlinksw.com
11http://jena.sourceforge.net
12http://kxml.sourceforge.net/
13http://xmlpull.org/

specifically designed to be used in CLDC14 applica-
tions. However, development stalled in 2005.

NanoXML for J2ME (+RDF/OWL)15 is a J2ME
port16 of the original non-validating XML parser
NanoXML17 for Java, and has been extended with
RDF and OWL support. It is dedicated to mobile environments and offers convenience methods for navigating and retrieving data from RDF and OWL documents such as resource or property values, but neither
supports inferencing nor elaborates on RDFS/OWL se-
mantics.

3.2.2. Mobile RDF Frameworks

Mobile RDF18 is a Java-based open source implementation for the RDF data model, providing a simple and easy-to-use API for accessing and serializing
RDF graphs. It is specifically designed for Java ME
Personal Profile19 and Connected Device Configuration (CDC)20 compliant devices, which is one of the
main drawbacks of this framework since these application environments are only supported by a comparatively small amount of devices, namely those that
employ a CDC-specific Java Virtual Machine (JVM).
Most current and older J2ME-compliant devices deploy the more widely-used CLDC profile. It provides
specific packages for creating, parsing, and serializing RDF/S and OWL ontologies, and supports RDF
Schema type and property propagation rules as well
as rule-based inferencing. However, RDF graph modifications like deleting or editing RDF triples are not
supported.

Jena21 is a port of the popular Jena Semantic Web
framework, targeted for low-capacity mobile and embedded devices. Although its API is currently in a prototypical state and only allows for processing RDF
data serialized in N-Triples format, it covers the entire set of RDF modeling primitives, provides ontology
and limited inference support, as well as convenience

14http://java.sun.com/products/cldc/
15http://nanoxml-j2me.sourceforge.net
16http://java.sun.com/javame/index.jsp
17http://devkix.com/nanoxml.php?lang=en
18http://www.hedenus.de/rdf/index.html
19http://java.sun.com/products/

personalprofile/

20CDC is a framework specification for deploying and sharing
mobile Java applications on hardware-constraint devices such as mobile devices or set-top boxes. It defines a basic set of libraries and
virtual machine features that the underlying runtime environment
must exhibit.

21http://poseidon.elet.polimi.it/ca/?page_

id=59

classes for handling OWL ontologies. Like in Jena,
RDF data are represented on two levels: on the lower
more generic level, Jena stores triple nodes, where a
model API is deployed on top that offers convenience
methods for accessing and manipulating RDF models.
Androjena22 is a more recent Jena port specifically
created for the Android platform. It adopts Jena version 2.6.2 and offers all the functions and libraries
Jena includes such as full RDF and ontology sup-
port, inferencing, as well as reading and writing RDF
data in different serialization formats. The Androjena
core librariesas the original Jena librariesdo not
include specific APIs for querying RDF data, persis-
tence, Named Graphs [10], or support for external rea-
soners. However, to provide at least a minimum of
query functionality, the Androjena project page also
hosts the ARQoid project23, which is a reduced port
of Jenas SPARQL query engine ARQ. Currently, ARQoid is in prototypical status and lacks some of ARQs
original features such as full-text query support.

In summary, none of the existing mobile RDF
frameworks fully supports queries on RDF data via
SPARQL or other query languages, although Androjena provides a prototypical implementation of the
Jena ARQ libraries. A storage mechanism that translates RDF data into internal storage formats used by
mobile devices (e.g., the SQLite database provided natively by the Android platform) and vice versa could
also not be found.
3.2.3. Query and Persistence Frameworks

RDF On the Go24 is a full-fledged RDF storage
and query framework specifically designed and implemented for mobile devices that feature the Android operating system. It follows an approach similar to An-
drojena, as the Jena core APIs including ARQ have
been adapted to the Android platform to allow developers to directly operate on and manipulate RDF
data models. The primary storage infrastructure are
B-Trees as provided by a lightweight version of the
Berkeley DB25 adopted for mobile usage and deploy-
ment. The internal query processor provides support
for both standard and spatial SPARQL queries, where
an R-Tree based indexing mechanism is used for storing URIs with spatial properties [31]. The current ver-

22http://code.google.com/p/androjena/
23http://code.google.com/p/androjena/wiki/

ARQoid

24http://code.google.com/p/rdfonthego/
25http://www.oracle.com/technetwork/

database/berkeleydb/overview/index.html

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

sion as of March 2011 supports a large set of standard
SPARQL query operations where aggregation, sorting,
and some spatial operations are subject to future implementations [31].

SWIP: Semantic web in the pocket26 was developed in order to support RDF data storage and
exchange in a uniform, schema-less, and systemwide way based on the Linked Data principles [5].
SWIP represents an Android-specific implementation
of an RDF storage infrastructure that is based on the
Android-internal concept of ContentProviders27 for
application-wide data storage and exchange across applications and processes. It maps URIs to data stored
in the local SQLite database deployed on Android systems and returns data in the form of triple sets or tuple
tables. It employs a simple subject-predicate-object table layout for RDF data storage and is currently in prototypical status [13]. For demonstration purposes, data
stored in device-internal data sources such as calendar
entries or contacts have been exposed as RDF-based
Linked Data and visualized through a generic browser
interface.

However, these RDF storage and query infrastructures are available as experimental prototypes or concept studies and lack specific storage and query optimizations for mobile platforms. Nevertheless they
demonstrate that typical RDF processing and storage
tasks can be executed on mobile devices although the
efficient execution of complex processing operations
(e.g., reasoning) or indexing mechanisms is still subject to further research.

3.3. Mobile Semantic Web Applications

DBpedia Mobile28 [2], a location-aware mobile ap-
plication, allows users to access information from the
DBpedia project29 about the physical environment surrounding them. Users are able to receive additional information by exploring links to other resources located
in the Semantic Web.

mSpace Mobile30 [46] takes a similar approach,
where access to related location-based information
with respect to the users current situation is provided
via a spatial browser. Considered contexts are time,
space, and subject.

26http://swip.inrialpes.fr/
27http://developer.android.com/guide/topics/

providers/content-providers.html

28http://wiki.dbpedia.org/DBpediaMobile
29http://dbpedia.org
30http://mspace.fm/projects/mobile

IYOUIT31 [6] collects contextual information about
certain aspects of the users lifestylesuch as visited
places, or people metand displays them on the Web.
People are able to share their personal contexts within
a community portal.

Although these projects make use of Semantic Web
technologies such as RDF, the processing of contextual data is done on external servers or applications
rather than on the device itself. This means, however,
that in case of missing network connectivity the applications become practically useless. While a system
that is deployed on the mobile device also does not
allow to proactively update data from remote sources
without connectivity, it provides at least a local buffer
of the data that has been replicated so far, and hence
allows the user to continue using the applications, although in a restricted manner. Another distinct aspect
is that context acquisition and context representation
is not limited to a predefined set of contextual aspects,
i.e., the context descriptions created by the framework
are dynamic and include as many aspects as could be
acquired. Applications can process the data they are interested in leading to a greater flexibility in elaborating
on contextual constellations.

In summary, our analysis revealed that contextdriven replication of RDF data to mobile devices has
not been addressed by current or related research yet.
The RDF frameworks currently available for mobile
systems provide the necessary functions for such a
replication infrastructure although much space is left
for optimization. In Section 6 we therefore analyze the
performance of mobile RDF frameworks in creating,
parsing, and storing RDF triples directly on a device.
There exist a few mobile storage and query frameworks however, but they are mostly in prototypical
status to date although recent developments indicate
an increasing awareness of deploying Semantic Web
technology on mobile devices (cf. exploiting linked
data for mobile Augmented Reality [39], SWIP [13],
i-MoCo [45]).

4. System Design and Architecture

The MobiSem framework has been specifically designed for direct deployment on mobile platforms.
This allows it to acquire, process, store, and manage
contextual information independently of any applica-

31http://www.iyouit.eu/portal

tion or client-server infrastructure. The main goals of
the MobiSem Context Framework can be summarized
as follows:

 To provide a storage repository for semantic data
on a mobile device. With the increasing proliferation of services based on Semantic Web technolo-
gies, the need for mechanisms to store, manipu-
late, and retrieve RDF data on mobile devices becomes apparent. The local storage of RDF data on
a mobile device not only reduces the dependency
on a permanent network connection, but also enables the implementation of more efficient search
and reasoning algorithms, and extends the users
local information space.

 To make efficient use of available context infor-
mation. Modern mobile devices provide a magnitude of options to capture the users context,
which can be used to infer future information
needs and adapt application and device behavior.
A semantically appropriate interpretation of these
context data helps to build more user-oriented applications and services and enhance the overall
mobile user experience.

 To proactively provide context-relevant data on
the device. As stated before, we cannot rely on a
permanent network connection in mobile scenar-
ios. On the other hand, we can infer future information needs from the users current context information and thus proactively retrieve data from
remote data sources to the mobile device that
might become relevant in the future, and buffer it
using the local storage repository.

 To provide the technical infrastructure for highlevel context processing. The dynamic and flexible characteristic of our context framework enables the deployment of additional high-level
context recognition and utilization services on
mobile devices to enable situation-awareness (cf.
[1,19,33,42,44]). The framework facilitates almost all aspects of a mobile context processing and management architecture and serves as
a foundation for the systematic management and
exchange of context descriptions using open semantic standards.

To realize these goals it is necessary to combine the
processing of context information with the local replication of remote data sources. However, it is also necessary to keep the framework design as flexible as pos-
sible: it depends on the capabilities of the mobile device which context information can be tracked. Fur-

ther, the users information needs might evolve over
time, hence the approach cannot be restricted to a
fixed set of remote data sources and should be flexible enough to enable the dynamic integration of new
potential context sources on the fly.

We have decided to decouple the tasks of context
acquisition and data replication (cf. Figure 1). Context
relevant data are retrieved by dedicated components
(called context providers) and are converted into RDFbased context descriptions. These descriptions are aggregated to an RDF-based global context model that
is used by data providers to replicate RDF data to
the device. Replicated data are stored in a local triple
store and made available through a data access API. A
loose, data-based coupling between context providers
and data providers is realized through a context dis-
patcher, which is notified every time a context provider
detects a change in a context source it observes. The
context dispatcher aggregates, consolidates, and reasons on context information, and forwards them to the
appropriate data provider components.

This architecture exhibits two significant advantages
in comparison to server-based approaches, as it does
not require context information to be transferred outside the mobile device. First, the system does not depend on the availability of an external system. Sec-
ond, all contextual data (which may include highly private information, like the current position, contacts,
appointments, and so on) are processed only on the
mobile device, which reduces security and privacy is-
sues.

In the following, we describe in more detail the in-

dividual system components.

Context Providers We employ two types of context providers: primary (i.e., active) and complementary (i.e., passive) context providers. Primary context
providers encapsulate a hardware or software sensor
and become active whenever a change in a context
source is detected. Complementary, that is passive or
re-active context providers react according to changes
in primary context providers and become active when
a corresponding primary context provider delivers an
updated context model. They complement the contextual data retrieved from primary context providers by
taking these context descriptions as input for initiating
their acquisition tasks (context augmentation).

To provide the necessary flexibility in acquiring
context-relevant data, context providers implement
their own logic and heuristics for transforming any
kind of input data (either sensorial or web-based con-
tent) into an RDF-based context description by using

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

Fig. 1. Architecture of the MobiSem Context-Processing Framework

well-defined and well-accepted semantic vocabularies.
As previously outlined, the acquisition of contextual
data should not be restricted to capture sensorial data
exclusively since the Internet and Web 2.0 applications in particular provide excellent sources for gathering context-relevant data. Context providers therefore
are able to request data from four different types of
sources:

(i) Hardware sensors that are integrated into the
mobile system such as GPS module, luminosity sensor, camera etc. Most modern mobile platforms provide specific APIs for accessing and
utilizing locally deployed hardware sensors.

(ii) Ubiquitous sensors or devices that are located
in the physical environment [20]. Such sensors
must provide open accessible interfaces based on
open network and access protocols.

(iii) Web applications such as Facebook32, LinkedIn33 etc. often contain useful information w.r.t
the users social relationships. Online and Linked
Data repositories in particular provide magnitudes of freely available context-relevant data
that can be exploited for complementing sensorially captured data.

(iv) Software or logical sensors that allow for monitoring user or application behavior to deduce on

32http://developers.facebook.com/
33http://developer.linkedin.com/index.jspa

the type of data that is relevant to the user in a
specific situation.

By employing logical sensors, the acquisition of
user-related contexts is emphasized. Such sensors can
be adjusted towards a particular system infrastructure
to gather context-relevant information by monitoring
system processes to deduce information about the currently running applications as well as the data they operate on34. Context providers can make use of context
descriptions from other context providers as well as
external data sources; e.g., a component may use the
GPS coordinates provided by another context provider
to look up names of the current location using an external service35.

Orchestration Framework To facilitate this kind
of cooperation between decoupled context providers,
an orchestration framework dynamically routes data
between context providers based on the type of context information they provide. It orchestrates context
providers in form of a directed acyclic graph. Within
this graph, primary context providers represent starting nodes, while complementary context providers represent adjacent nodes. Edges represent data flow between context providers; i.e., they indicate compatibility in terms of contextual data so that the data deliv-

34We implemented software sensors that track user queries issued to various mobile applications such as browsers or the internal
quicksearch-function on an Android device.
35See Figure 4 in Section 5 for an example.

Data ProviderData ProviderTriple StoreMobiSemData Access APIMobile ApplicationLinked DataWeb 2.0ApplicationSemanticWeb ServiceQuery Languagee.g. SPARQLHTTP Request / Response API / Remote Procedure CallPhysical SensorsLogical / Software Sensors(active)Context ProviderLow-level Context Acquisition(active)Context Provider(passive)Context ProviderContext Provider OrchestrationContextDispatcherAggregationMergingReasoningNotificationGlobal RDF-based  Context ModelData ProviderRDF-based Context DescriptionsReplicated RDF DataMobile ApplicationMobile ApplicationMobile DeviceS. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

ered by one context provider can be further processed
by another context provider.

The orchestration framework analyzes the data description of each context provider. Such a data description consists of sets of mandatory and optional namespaces as well as terms, which can be processed as input data by the respective context provider, as well as
namespaces and terms that the context provider uses in
its output data.

Figure 2 depicts an excerpt of an exemplary data
description. This complementary context provider extracts contact data from acquired calendar data. A
data description consists of an input description (in-
dicated by the ddesc:input property) and an output description (indicated by ddesc:output prop-
erty). The former specifies the data a context provider
needs for performing its acquisition tasks. It may contain multiple ddesc:vocabulary properties, covering the case that context providers may be capable of
processing data described with different vocabularies.
Multiple vocabulary properties are interpreted by the
orchestration framework as alternatives, that is, they
are interpreted as being connected with a logical or.

A vocabulary specification consists of three parts:
the ddesc:namespace property, which holds the
vocabularys namespace that is used for an upperlevel orchestration, and the ddesc:concepts and
ddesc:properties statements, which specify mandatory and optional concepts and properties that the
context provider processes. Mandatory elements (in-
dicated by the ddsec:mandatory-property) are
those that are inevitable for a complementary context
provider to perform its acquisition tasks. Optional elements (indicated by the ddsec:optional-property)
refer to those elements that a context provider is capable to process but they are not necessarily needed for
a successful execution of the context providers acquisition tasks. Those specifications allow for a detailed,
element-level orchestration of context providers.

Additionally, a data description specifies the namespaces and terms that the context provider emits as output data (indicated by the ddesc:output property).
This property is mandatory for all context providers.
The output description follows the schema of the input description, consisting of parts for vocabulary, con-
cepts, and properties. In contrast to the input speci-

fication, the output specification may consist only of
mandatory elements36.

The orchestration framework can be configured to
either perform a loose orchestration on the namespace
level, or a detailed one by considering concepts and
properties given by the context providers data descrip-
tions. When a new context provider is found in the sys-
tem, the orchestration manager analyzes its data description and based on its configuration integrates the
context provider in the orchestration graph. While running completely decoupled from the context frame-
work, rebalancing the orchestration graph does not affect context acquisition tasks as such.

The orchestration graph is represented as an adjacency matrix whose values are decimal numbers between 0 and 1, indicating the degree of compatibility
between two context providers. The matching value for
each pair of context providers is computed by a matching algorithm based on configurable scores for correspondences on the namespace, concept, and property
levels. The matching algorithms performs an arithmetic matching based on data similarities and is additionally capable of including RDFS semantics such
as rdfs:subClassOf relationships. For instance, if
one context provider emits foaf:Person instances
and another context provider requires foaf:Agent
instances as input data, the matching algorithm detects
the compatibility between these differing concepts
since foaf:Person is a subclass of foaf:Agent
according to the FOAF ontology [9].

Context Dispatcher The context dispatcher is notified by context providers whenever a context description has changed. Before propagating updated context descriptions to data provider components, the dispatcher performs additional processing on the data,
like inference and consolidation. Currently, the reasoning component uses (i) a generic lightweight rulebased reasoner, which allows to specify conditions under which new triples are added to the knowledge base,
and (ii) hard-coded rules which are expressed by implementing a Java interface. The combination of these
two mechanisms can, for instance, be used to specify
that if one resource has multiple values for a functional
property, the values denote the same resource (the
corresponding rule (A :ifp X)  (A :ifp Y) 
(X owl:sameAs Y) can be interpreted by the rulebased reasoner), and that multiple resources that are re-

36According to the RDF semantics it is possible to specify optional data, although they will not be considered by the orchestration
framework in its current version.

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

<urn:uuid:b772a3a2-46d4-4c43-8f71-7080915ddba7>

ddesc:ContextProvider ;

ddesc:input [

ddesc:vocabulary [

ddesc:namespace <http://www.semanticdesktop.org/ontologies/ncal#> ;
ddesc:concepts [

ddesc:mandatory ncal:Attendee, ncal:Calendar, ncal:Event ;
ddesc:optional ncal:Organizer, ncal:EventStatus ] ;

ddesc:properties [

ddesc:mandatory ncal:member, ncal:method ;
ddesc:optional ncal:eventStatus ] ] ] ;

ddesc:output [

ddesc:vocabulary [

ddesc:namespace <http://xmlns.com/foaf/0.1/> ;
ddesc:concepts [

ddesc:mandatory foaf:Organization, foaf:Person ] ;

ddesc:properties [

ddesc:mandatory foaf:knows, foaf:status, foaf:name ] ] ] .

Fig. 2. Exemplary data description for a complementary context provider for extracting contact data from calendar entries

lated via a owl:sameAs property can be merged into
a single resource in order to simplify further processing (a corresponding algorithm can be implemented as
a Java class and be integrated into the reasoning pro-
cess).

Context descriptions are forwarded not only to data
providers, but also back to context providers, so that
they are enabled to mutually reuse and augment their
context descriptions37.

Communication between the context providers and
the context dispatcher is realized via a context description queue that not only buffers the most recent context updates, but also stores previous context updates
for compensation strategies in case a context source is
temporarily not available or malfunctioning. In such
cases, the context dispatcher can revert to previously
committed context description to continue the context
acquisition process. However, the context dispatcher
employs some logic to maintain consistency among
aggregated context descriptions.

Global Context Model The global context model

represents an aggregated version of all context providers
context descriptions received by the context dispatcher.
It is created whenever a primary context provider had
detected a change in the context source it observes and
delivered an updated context description. This context update will first be propagated to all complementary context providers to enrich it with additional data.

37Figure 4 depicts an example of augmenting GPS-coordinates
with data from the http://www.geonames.org web service.

When all context acquisition tasks are completed, the
context dispatcher collects the updated context de-
scriptions, aggregates them, applies reasoning rules as
described before, and creates the global context model
while maintaining context completeness, consistency,
and accuracy.

Data Providers Data providers are responsible
for handling RDF data replication tasks. They receive
aggregated context description models from the context dispatcher and subsequently replicate data of any
kind to the triple store. These data are usually retrieved
from external data sources or may be generated by the
data provider itself. For instance, a data provider may
act upon changes of the current location and retrieve
information about nearby points of interest. Each data
provider is assigned a named graph under which it
stores its data replicas in the triple store.

In addition to the default data providers that merely
retrieve data from remote sources and store them in the
triple store, we have implemented a selective checkout data provider that makes use of a partial versioning mechanism for RDF triples based on triple bitmaps
[40] as well as a write-back data provider that synchronizes the partially replicated data back to the reposi-
tory, if the latter supports write operations.

Triple Store Modern mobile platforms provide
transparent access to persistent storage devices (e.g.,
flash memory cards) through a file system API. There-
fore, the most straightforward way to store RDF data
on a mobile device is to serialize it into a file on such
a device using a standard RDF serialization format,

like RDF/XML or N3. While this storage mechanism
is extremely fast compared to DB-backed mobile storage solutions (cf. Section 6), it also has the significant disadvantage that RDF graphs must completely
be loaded into the mobile devices working memory
(RAM) before they can be further processed (e.g., before a SPARQL query can be issued). Alternatively,
triples can be stored in a relational database, which
causes an increase of read and write times but provides
the possibility for structured queries over the data.

Regardless of which actual storage solution is used,
it can be wrapped by a Java class that maps all read
and write access methods to corresponding operations
on the underlying physical representation (either flat
files or a relational model). Currently, our triple store
implementation does not perform in-memory buffering or caching. However, it can be wrapped by an additional in-memory Graph instance (which provides
faster access) that regularly synchronizes itself with
the database-backed instance.

Data Access API Applications can use the MobiSem Data Access API to access data stored in the devices local triple store. The API assigns to each replicated graph a unique URI, which can be used to access and retrieve the data contained in the graph. It exposes insert, update, delete and query methods and offers multi-grained access to data replicas, i.e., applications can access all replicas cached in the database, a
specific replica, or a specific resource including all adhering triples of a specific replica.38 In the background,
this API hides the details of context processing and
data replication from applications; from the outside the
MobiSem framework looks like a common triple store
whose data are regularly updated.

5. Implementation and Case Study

To demonstrate the feasibility of our architecture,
we have implemented a prototypical framework plus
an initial set of context and data providers. The selection of these components is based on the assumption that the information needs of a mobile user depend on their current context (e.g., their location) as

38This functionality is implemented through an Android Content
Provider that allows for defining explicit URI schemes for data replicas through which operating system-wide data access and data utilization is offered. By exposing distinct URIs (e.g. content://
org.mobisem.rdfprovider/graph#<graphid>)
triples
can be retrieved, added, deleted, and updated.

well as their future context. However, we want to emphasize that this framework is to be considered as an
infrastructure, upon which end-user applications that
provide specific functionality, based on specific context information and replicated data, can be built.

Our implementation is based on the Android platform39 and uses the Jena Framework (cf. Section 3.2.2)
to process RDF graphs40. In the following we demonstrate how the MobiSem framework can be used to
proactively provide RDF data on the mobile device.
Our objective is to permanently equip the user with
data about the locations they are going to visit, about
people they are likely to meet in the upcoming days,
as well as people that are based near the users current
position. To accomplish this, different kinds of contextual information are utilized, including the devices
current position and the users calendar data.

Context Acquisition We have implemented three
context providers: first, a location context sensor using the devices built-in GPS unit to track geographical coordinates returns context descriptions that contain a context:currentLocation property to
describe the coordinates of the current location (cf.
Figure 3).

A second context provider uses the GeoNames service41 to resolve GPS coordinates to geographical en-
tities. This component receives context updates from
the context dispatcher, extracts properties that represent geographical coordinates, and returns information
retrieved from the web servicein our example, a reference to a geographical entity as well as its name (cf.
Figure 4).

In parallel, a third context provider regularly scans
the users calendar and extracts all appointments
within the next 72 hours. From these appointments the
e-mail addresses of all participants are extracted and
returned, as depicted in Figure 5 (in this case, two e-
mail addresses are returned). Further, the locations of
appointments are extracted and are returned as GeoNames features. This context provider uses terms from
the NEPOMUK ontologies42 and from FOAF to describe the extracted resources.

39http://developer.android.com
40As shown in Section 6, Jena exposes a very weak performance
compared to other RDF frameworks; however, more efficient implementations have been made available only recently. We plan to port
our implementation to a more efficient RDF framework in the near
future.

41http://www.geonames.org
42http://www.semanticdesktop.org/ontologies

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

[] a context:Context ;

context:currentLocation [ geo:lat "48.175443" ; geo:long "16.375493" . ] .

Fig. 3. Context description retrieved by a GPS sensor

[] a context:Context ;

context:currentLocation [ geonames:nearby <http://sws.geonames.org/2761369/> . ] .

<http://sws.geonames.org/2761369/>

a geonames:Feature ; rdfs:label "Vienna" .

Fig. 4. Context description retrieved by a GeoNames sensor

[] a context:Context ;

context:upcomingEvent [ ncal:attendee

[ foaf:mbox <mailto:bernhard.schandl@univie.ac.at> ] ,
[ foaf:mbox <mailto:stefan.zander@univie.ac.at> ] ;

ncal:location [ a geonames:Feature ; rdfs:label "Munich" ] .

] .

Fig. 5. Context retrieved from the users calendar

The context dispatcherwhich receives notifications from the context providers every time a
context value changesbuffers, combines, and enriches the context description graphs with additional information. It merges all resources typed as
context:Context into a single one, assigns it a
URI (enabling it to be referenced by other context de-
scriptions), and adds a timestamp as well as a link to
the preceding context descriptor. Moreover, it applies
simple inference rules to the context model: for ex-
ample, the context:currentLocation property
has been defined as functional property (since we assume that the user can be at only one location at the
same time), from which the reasoner can deduce that
the two anonymous location resources returned by the
different context providers are actually the same and
can likewise be merged, as shown in Figure 6.

The context dispatcher distributes this aggregated
context description model to all data providers in the
system whenever a contextual change is detected. It
is then up to each data provider to decide whether to
initiate a new replication tasks, and which information
from the context description they use for this purpose.
Data Provisioning We have implemented a number of data providers that address different information needs and replicate data from different sources to
the mobile device. One data provider uses the Sindice

Semantic Web index43 to retrieve information from
FOAF descriptions (which are distributed across the
Web) based on the e-mail addresses found in the context description. This includes names, contact and location information, and personal interests of the users
prospective business partners. Also, it includes the social network of the meeting participants and is therefore valuable information for business negotiations as
well as smalltalk.

A second data provider retrieves triples about people that are based near the users current location by
looking up resources that are foaf:based_near
the current and future locations. This information allows the user to increase the effectiveness of their trip
by scheduling additional meetings with these persons
without additional travel costs.

A third data provider returns additional data from
DBpedia about the users current and future locations,
by reusing the GeoNames URI provided by the location context provider (a code excerpt from this data
provider is depicted in Figure 7). By doing so, the user
is automatically equipped with information about the
locations they will visit, and about points of interests
in their vicinity.

From an initial analysis, we can expect a significant
effect on the amount of potentially interested data that
is to be replicated to a mobile device. For instance,

43http://sindice.com

<urn:uuid:baac630a-5cdb-4c79-92e6-6ce3d07419bc>

a context:Context ;
context:timestamp "2009-06-16T15:58:22"^^xsd:dateTime ;
context:previous <urn:uuid:d3ee316b-5704-4893-acb9-df1495c79011> ;
context:currentLocation [

geo:lat "48.175443" ; geo:long "16.375493" ;
geonames:nearby <http://sws.geonames.org/2761369/> .

] ;
context:upcomingEvent [ ncal:attendee

[ foaf:mbox <mailto:bernhard.schandl@univie.ac.at> ] ,
[ foaf:mbox <mailto:stefan.zander@univie.ac.at> ] ;

ncal:location [ a geonames:Feature ; rdfs:label "Munich" ] .

] .

<http://sws.geonames.org/2761369/>

a geonames:Feature ;
rdfs:label "Vienna"@en .

Fig. 6. Aggregated context description model

DESCRIBE ?c WHERE {

{ ?c rdfs:label ?l .

?l bif:contains "Vienna" .
?c rdf:type dbpedia-owl:Place .

} UNION
{ ?c rdfs:label ?l .

?l bif:contains "Salzburg" .
?c rdf:type dbpedia-owl:Place .

} UNION
{ ?c rdfs:label ?l .

?l bif:contains "Munich" .
?c rdf:type dbpedia-owl:Place .

8. An

Fig.
DBpediaLocationDataProvider

example SPARQL query

produced

by

the

the public DBpedia data set contains information about
around 462,000 places. While no detailed information
is available, from the overall size of the data set we
can estimate that these places are described by around
88 million triples44. By analyzing the users calendar
and querying DBpedia for corresponding resources,
this amount of data can be significantly reduced. For
instance, if the MobiSem Context Framework detects
three locations in the users calendar, it can convert
them into a SPARQL query (cf. Figure 7) and query
DBpedia. In case the users upcoming events within
the next 72 hours take place in Vienna, Salzburg, and
Munich, the corresponding query (cf. Figure 8) yields

around 8,500 triples, which can be handled by common state-of-the-art smartphones (cf. Section 6).

All replicated data is persisted by a storage component that is compatible to the MobiSem Context
Framework (cf. Section 4). In the case of Android,
RDF graphs are either serialized into flat files (which
is very performant but cannot be directly queried) or
are stored into a custom triple store that is backed by
a SQLite database. Its table layout applies the normalized triple store approach; i.e., it stores triples within
a Triple table that holds references to separate tables for resources and literals. Moreover, it provides
lightweight support for named graphs; therefore the
relational schema contains a separate Graph table.

Any application built on top of this framework is
now enabled to directly access these data via the MobiSem Data Access API. It could, for instance, iterate
over all resources that are typed as foaf:Person
and provide a list of names and phone numbers, disburdening the user from the need to manually search for
these data in case they will miss an appointment and
needs to notify the participants. The MobiSem framework entirely hides all context processing steps: an application is presented with a simple view on the triple
store which is always populated with context-relevant
information.

6. Performance Evaluation of Mobile Semantic

Web Platforms

44http://blog.dbpedia.org/2011/01/17/

dbpedia-36-released/

In the resource-limited context of mobile devices,
efficient processing of RDF data is crucial. In order to

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

public class DBpediaLocationDataProvider extends AbstractDataProvider

// called when the context description is updated
@Override
protected void updateContextImpl() {

this.currentResourceLabels = new ArrayList<String>();

// iterate over all geonames features in the context model
StmtIterator si1 = this.contextModel.listStatements(

null, RDF.type, GEONAMES.Feature);

while(si1.hasNext()) {

Resource featureResource = si1.nextStatement().getSubject();

// iterate over all properties of these features
StmtIterator si2 = this.contextModel.listStatements(

featureResource, null, (Literal)null);

while(si2.hasNext()) {

// check if a label property is attached
Statement s = si2.nextStatement();
this.currentResourceLabels.add(s.getString());

// update data from the remote data source
@Override
protected void updateDataImpl(Model targetModel) {

// construct DESCRIBE query for all location resources
StringBuffer queryBuffer = new StringBuffer();
queryBuffer.append("DESCRIBE ?concept WHERE { \n");
for(String featureLabel: this.currentResourceLabels) {

queryBuffer.append("{ ?c rdfs:label ?l . " +

"?l bif:contains \"" + featureLabel + \"" . " +
"?c rdf:type dbpedia-owl:Place . } UNION \n ");

queryBuffer.append("{} }");

// send query to DBpedia
String url = "http://dbpedia.org/sparql?query=" + URLEncoder.encode(

queryBuffer.toString());

try {

// read model into targetModel (for further processing by abstract superclass)
this.targetModel.read(url, "N-TRIPLE");
} catch (Exception e) { // error handling

7. Code

Fig.
resources.
updateContextImpl() is called by the context dispatcher every time the global context model is updated, while updateDataImpl() is
called whenever the data provider is requested to actually replicate data from the remote data source.

of DBpediaLocationDataProvider,

querying DBpedia

snippet

for

data

about

location

obtain insights on the processing capabilities of modern mobile platforms, we have carried out a performance evaluation of the three existing mobile RDF
frameworks Androjena, Jena, and Mobile RDF (cf.
Section 3.2) on three different mobile devices (cf. Table 1). A very important factor of efficient processing
is the time needed to create and store an RDF model
in-memory, as this is usually the basis for further com-
putation, analysis, inference, or transmission of data
over a network. We did not include RDF on the Go and
SWIP in our evaluation since they either exist as an implementation of a specific platform-dependent technology (SWIP) or have been released after our evaluation
has been conducted (RDF on the Go).

6.1. Test Environment

The Android HTC G145, released in 2008, was one
of the first Android devices available on the market
and now represents the entry-level device class. It contains a 32-bit Qualcomm MSM7201A RISC CPU that
runs with a clock speed of 350 MHz. Tests on this device were performed with the standard memory capacity of 192 MB under the Android operating system version 1.6 update 4.

The Motorola Milestone46 was released in December 2009 and represents the middle-class of Android
capable devices. It runs on a 32-bit TI OMAP3430 Superscalar ARM Cortex-A8 RISC CPU with a nominal
clock speed of 600 MHz. On this device, the tests were
performed with the standard memory capacity of 256
MB under the operating system version 2.1 update 1.
Finally, we have tested a Samsung Galaxy S I900047
smartphone, which was released in Summer 2010. It
uses a Qualcomm S5PC111 ARMv7-compatible CPU
named Hummingbird with a nominal clock speed of
max. 1 GHz paired with a PowerVR SGX540 GPU
chip. This device uses 512 MB main memory and runs
the Android system version 2.2.

We analyzed the creation, parsing, and storage time
for RDF models of various sizes, ranging from 10
to 50,000 triples. These models represent the different model sizes that are involved in the context pro-

45http://www.htc.com/www/product/g1/

specification.html

46http://www.motorola.com/Consumers/
XW-EN/Consumer-Products-and-Services/
Mobile-Phones/ci.Motorola-MILESTONE-XW-EN.
alt

47http://pdadb.net/index.php?m=specs&id=

2298&c=samsung_gt-i9000_galaxy_s_16gb

cessing and data replication tasks performed by our
framework, as described in Section 4. Typically, a single context provider emits very small models in the
range of 10 to 100 triples, while a complete context
model that has been aggregated from the single context providers may have several hundred to thousand
triples in total. Data that are replicated from external
sources may in principle be of arbitrary size, therefore
we have scaled our tests up to 50,000 triples in a single
RDF model.

The distribution of distinct subject, predicate, and
object nodes has been estimated based on an analysis
of the 2009 Billion Triple Challenge data set [40]. In
these data we can observe that typically RDF data sets
have a very high number of distinct object values and a
low number of distinct predicates, while the number of
distinct subjects ranges in between these boundaries.
All benchmarks were performed on the mobile devices
during regular usage of a device where the usual system processes were running in parallel to our tests.

For each framework, device, and operation, we measured the total amount of time needed in milliseconds.
From these measurements we can calculate the standard deviation between different test runs for each size
as well as the number of triples that the particular combination of a device and a framework is able to process
within one second.

In order to eliminate technological differences between SD cards in terms of access times as well as
read-/write performance, we first copied data replicas
from the SD card to the internal non-volatile memory
(ROM) of a device from where they are then parsed
and transformed into a working in-memory model.

Before each benchmark was initiated, the device had
been restarted to ensure identical run-time conditions.
At the end of each benchmark, all files and data that
had been created during a test run were deleted and the
test environment was reseted to avert an influence on
consecutive benchmarks.

6.2. Results

Figures 9, 10, and 11 depict the results of our measurements (detailed numbers can be found in the ap-
pendix) for each analyzed device48.

48RDF/XML, N3, and N-TRIPLE refer to the different serialization formats supported by the Androjena framework. For readability issues we excluded the frameworks name Androjena and
just referred to the respective format for all parsing and storage fig-
ures.

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

Table 1

Overview of the Android Devices Specification

Processor

Qualcomm MSM7201ATM TI OMAP3430 ARM Cortex A8 Qualcomm S5PC111 (ARMv7-comp.)

HTC G1

Motorola Milestone

Samsung Galaxy S I9000

Clock speed in MHz

Memory Capacity (RAM)

350 MHz

192 MB

600 MHz

256 MB

OS Version

Release

Android 1.6-update4

Android 2.1-update1

09/2008

12/2009

1 GHz

512 MB

Android 2.2

06/2010

Constructing In-memory RDF Graphs. When
creating in-memory RDF graphs of certain sizes, we
can observe a similar behavior on all three tested plat-
forms. Androjena and Mobile RDF exhibit very similar results, namely, a nearly constant processing time
per triple, even with increasing model size. Although
processing times of mobile RDF frameworks vary considerably across small context descriptions with sizes
smaller than 500 triples (up to factor 10 on the Samsung Galaxy S I9000 using Mobile RDF for processing
a model containing 100 triples), processing times normalize for models of size greater or equal than 1000
triples on the two frameworks. In general, we can observe that Androjena and Mobile RDF are able to handle RDF graphs containing 20,000 or more triples, although the limiting factor is the devices memory ca-
pacity.

Additionally, the total execution time (in ms) for
Androjena and Mobile RDF scales almost linearly
with the size of context descriptions. The performance
of Jena, on the contrary, decreases significantly with
increasing model sizes, leading to very low processing
times with models larger than 100 triples. Jena tests
with more than 2,000 triples failed on all devices, making it basically unsuitable for the processing of voluminous RDF data.

Processing speed of Androjena ranges between 480
and 680 triples per second on an Android HTC G1, and
1000 and 2000 triples per second on a Motorola Mile-
stone. Interestingly, on the Samsung Galaxy we can
observe that the performance increases when models
with more than 200 triples are processed. The performance of Jena decreases with increasing model size
on all three devices. Mobile RDF exhibits a similar
performance behavior compared to Androjena where
a significant increase in triples per second values on
a Samsung Galaxy can be observed for models with
more than 500 triples. In general, Mobile RDF has
shown to be the most performant framework w.r.t. the

Fig. 9. Construction of RDF graphs (Android HTC G1, Motorola
Milestone, Samsung Galaxy S I9000)

CreationTriples/Sec.AndrojenaMicroJenaMobileRDF1020501002005001.0002.0005.00010.00020.00050.000487,8049180,8318724,6377487,8049628,9308136,0544947,8673628,9308642,673590,36691057,0825642,6735666,666746,75301079,9136300,0000661,594420,17271102,5358661,5944607,53347,4440828,2259607,5334552,0592817,7284552,0592523,6973756,3724523,6973496,5391791,3646496,5391491,5696799,0156491,5696480,453932875781480,4539328757810375750112515001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesAndrojena!JenaMobileRDFTriples/Sec.AndrojenaMicroJenaMobileRDF1020501002005001.0002.0005.00010.00020.00050.0001.162,79072951886,79251.069,51872371639,34431.089,32462061655,62911.315,78951161876,17261.771,4792492290,95071.985,7029172132,19621.727,712572188,66271.708,52552170,60991.681,74632320,50871.627,52472308,08291.600,742744633512.131,4462928820407501500225030001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesAndrojena!JenaMobileRDFTriples/Sec.AndrojenaMicroJenaMobileRDF1020501002005001.0002.0005.00010.00020.00050.000549180,8318901514151,1716803512176,4291772646158,730287082985,269710531.37333,969913801.77416,185321652.3418,474529482.91037853.05842413.0774.1462.6443.246012502500375050001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesAndrojena!JenaMobileRDFS. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

amount of triples processed per second on all tested
devices.

When comparing the different devices, we can observe the expected behavior that the Android HTC
G1 exposes the weakest results due to its slow CPU
and small main memory, leading to memory problems
when creating models with 20,000 or more triples.
The other devices expose a better performance, making them more suitable for processing larger volumes
of RDF data. Only the Samsung Galaxy I S9000 was
able to handle a model of 50,000 triples; on the other
devices tests with this model size failed with out of
memory errors.

Parsing RDF Graphs. Androjena scales reasonably well with available processing power and yields
best parsing results in terms of triples per second ratios with RDF graphs containing more than 200-500
triples. However, we were not able to notice a remarkable difference between the different serialization formats on newer mobile device with graphs smaller than
100 triples, i.e., significant differences in benchmark
results among different serialization formats can first
be noticed on newer mobile devices for graphs with
more than 100 triples.

Jena yields best results with very small RDF
graphs containing less than 20 triples. However, we
were able to observe a dramatic decrease in parsing
performance with models containing more than 20 to
50 triples, which renders Jena inappropriate for processing larger data replicas.

MobileRDF also scales reasonably well with available processing power and turns out to be the fastest
RDF framework in terms of parsing performance, especially for larger RDF graphs with more than 100 to
200 triples. This behavior was more distinctive on less
powerful devices such as the HTC G1 or the Motorola
Milestone but dissolved on recent, more powerful devices such as the Samsung Galaxy49. The best performance results could be measured with RDF graphs
containing around 5,000 to 10,000 triples on the Samsung Galaxy S I9000.

In summary, the parsing benchmark exhibits similar behavior on all three devices revealing that MobileRDF yields the fastest parsing performance followed
by Androjena and Jena. Additionally, Androjena and
MobileRDF scale reasonably well with available processing power. Considering the different serialization

49We verified this assertion using a Dell Streak smartphone that
also runs an ARM Cortex A8 CPU clocked at 1 GHz, where we were
able to ascertain a similar behavior.

Fig. 10. Parsing of RDF graphs (Android HTC G1, Motorola Mile-
stone, Samsung Galaxy S I9000)

formats supported by Androjena, the best parsing results were measured with N-Triple serialized graphs
followed by N3 and RDF/XML.

Serializing RDF Graphs. Storage times of all
frameworks are relatively linear with the amount of
triples to be stored, i.e, we were able to observe a linear
scaling between storage run-times and the amount of
triples to be saved on all three frameworks and on each
device. However, no significant difference w.r.t. the file
sizes between the different frameworks and serializa-

CreationTriples/Sec.RDF/XMLN3NTMJMR1020501002005001.0002.0005.00010.00020.00050.00013,020063,4100162,6000277,0100129,530069,230089,6100196,080025,2300162,3400105,8600148,1500229,570031,7300250,1300108,9600152,4900220,950028,6000298,6900112,9200156,2100234,2500123,8700308,9300100,7100147,1200224,530016,4700253,130096,5200135,3100199,450011,8300254,300091,7600142,3400207,84003,5200261,620094,9800269,740001002003004001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesRDF/XMLN3N-TRIPLE!JenaMobileRDFTriples/Sec.XMLN3NTMJMR1020501002005001.0002.0005.00010.00020.00050.00029,81107,87240,38617,28158,98144,51130,04272,8552,27210,97250,38301,39371,754,00347,71318,07370,23458,306,57346,86363,11405,19602,596,35751,31344,45397,99622,4328,42776,04337,48454,46612,4192,20774,47328,60441,05620,87750,19332,22422,72611,55749,47320,19412,24195,15750,73308,29402,47578,90760,7202004006008001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesRDF/XMLN3N-TRIPLE!JenaMobileRDFTriples/Sec.XMLN3NTMJMR1020501002005001.0002.0005.00010.00020.00050.00042,5572,89166,111.282,05139,66119,05134,68277,78313,48243,90239,23292,57446,83374,81509,68371,75440,92610,13320,20785,55488,28657,251.023,02228,001.030,40617,28844,591.568,38170,061.515,15649,22935,191.609,53138,581.721,76635,991.044,441.994,6129,551.886,79661,44946,681.835,4714,182.203,42551,98813,301.488,292.087,81601,39750,581.237,161.672,34431,1206001200180024001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesRDF/XMLN3N-TRIPLE!JenaMobileRDFProcessed Triples per Second20

S. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

mat yields the best triples per second ratio, followed
by RDF/XML and N-Triple. The best storage performance results could be measured with graphs of sizes
between 100 and 2,000 triples irrespectively of the serialization format and device.

Although by far the least competitive framework
in terms of creation and parsing performance, Jena
yields the best storage performance on the HTC G1
and the Motorola Milestone. However, this behavior
disappeared on the Samsung Galaxy and similar devices such as the Dell Streak50 where MobileRDF and
N3-serialized graphs using the Androjena framework
showed the best results51. Interestingly, the best storage performance results could be measured on the Motorola Milestone that exceeds the results of the other
two devices considerably.

Storage performance of MobileRDF scales with
available processing power for RDF graphs with triple
sizes greater than 200 to 500. Best results could be
measured for graph sizes between 500 and 5,000
triples where the triples per second ratio differs by the
factor 8 between the Samsung Galaxy and the HTC
G1.

In summary we can see that modern mobile de-
vices, in combination with recent RDF frameworks
that are optimized for mobile devices, can without hesitation be used as the basis for Semantic Web applications on mobile devices. Although the behavior of the
tested frameworks differ across machines, we can observe certain trends regarding the applicability of RDF
frameworks for specific purposes. In further work, we
aim to analyze the behavior of these devices w.r.t. modification and deletion operations, as well as querying
and inference over RDF data, depending on the availability of such implementations.

Fig. 11. Serialization of RDF graphs (Android HTC G1, Motorola
Milestone, Samsung Galaxy S I9000)

tion formats could be found, which indicates that storage algorithms do not make use of e.g. QNames. File
sizes of the serialized data replicas are rather similar
among all frameworks and devices.

Androjenas saving performance scales reasonably
well w.r.t. available processing power where best results could be achieved on the Samsung Galaxy; total storage times were seven times faster compared
to those measured on the HTC G1 for all serialization formats. Serializing RDF graphs in the N3 for-

7. Conclusions and Future Work

The notion of context and context awareness are key
factors in providing a selective RDF-based data replication infrastructure for mobile devices. We have outlined that traditional replication strategies do not hold
in mobile scenarios for several reasons. They should
be improved by considering current and future users
information needs as well as the different contexts they
are operating in, thus replicating only selected subsets

50http://www.dell.com/us/p/mobile-streak/pd
51We tested the storage performance also on a Dell Streak smart-

phone, which exhibits similar processing power and clock speed

CreationTriples/Sec.XMLN3NTMJMR1020501002005001.0002.0005.00010.00020.00050.00030,380091,740048,1500282,49006,840038,6200128,210050,5900407,330014,1700104,4500206,530056,2600417,710034,2900114,0500214,220056,1900428,270054,9100100,0300221,580052,1200403,960085,8600106,5000196,210049,1300388,7100139,510098,5400192,120048,2200352,1700170,420096,5600188,710045,8800384,4600191,930094,4300181,3000278,1701252503755001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesRDF/XMLN3N-TRIPLE!JenaMobileRDFTriples/Sec.XMLN3NTMJMR1020501002005001.0002.0005.00010.00020.00050.000106,84300,3095,69990,10130,89141,04449,44142,251.058,20274,73367,38727,80167,281.243,78300,48413,05780,64165,071.331,56356,25322,89811,69153,431.268,23597,37361,38560,04150,921.109,63755,86369,92667,33152,191.185,11753,92351,23684,09150,75692,57342,08687,90147,89691,83325,79631,5842,00666,94302,30594,72137,46758,140375750112515001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesRDF/XMLN3N-TRIPLE!JenaMobileRDFTriples/Sec.XMLN3NTMJMR1020501002005001.0002.0005.00010.00020.00050.00094,70156,4988,73316,46149,03171,53336,13143,99544,96270,64512,30708,22251,26723,59658,76692,521.079,91314,07811,031.194,74630,521.377,41299,58740,19723,07679,901.431,84299,44778,211.418,04685,211.338,51300,56743,881.525,79736,541.276,41309,88763,801.536,92669,531.255,75286,31771,801.614,83586,791.074,55240,121.385,92607,711.016,85200,851.154,5305001000150020001020501002005001.0002.0005.00010.00020.00050.000Processed Triples per Second# of TriplesRDF/XMLN3N-TRIPLE!JenaMobileRDFS. Zander et al. / Context-driven RDF Data Replication on Mobile Devices

of the base data. We therefore adopted the notion of
context and context awareness and synthesized it with
semantic technologies since they provide the necessary flexibility and expressivity for context-dependent
RDF-based data replication on mobile devices. Our
framework employs a loose coupling between context
acquisition and data provisioning components, gained
by applying semantic technologies (data models, vo-
cabularies, inference) to interpret and process context
information. We implemented an example scenario in
which personal information from Linked Data sources
is replicated based on the users current location and
upcoming appointments. Our performance evaluation
has shown that the performance of current RDF processing frameworks, deployed on state-of-the-art mobile devices, is acceptable for the processing of RDF
models of several thousand triples.

Although we have demonstrated that semantic technologies can provide substantial contributions in realizing a mobile context-aware infrastructure for RDF(-
based) data replication, there are still some open issues that need to be addressed in future research: the
integration of dynamically discovered context sources
is a challenge most context-management frameworks
face, especially in ubiquitous environments. We therefore plan to investigate additional methods for dynamic context source discovery and integration as well
as heuristics for transforming sensorial data into qualitative context descriptions. We further plan to consider
re-using functionality already built into the framework
(namely, the acquisition and combination of contextual
information from varying sources) to decide upon the
optimal time for initiating replication tasks. Currently,
our framework does not include feedback loops that
would allow for adjusting context acquisition and aggregation tasks according to data provisioning needs,
and it lacks advanced reasoning capabilities, which we
plan to implement in the near future.

An approach as proposed by [29] to integrate formal
rule languages like SWRL [26] into context processing
tasks would allow for the user- and application-driven
specification of aggregation, reasoning, and consolidation rules for collected and augmenting contextual
data. Additionally, context processing could be complemented with machine learning techniques for detecting usage patters, as proposed by [6,7]. However,
a context framework by itself can be made contextaware to adapt its processing rules and policies according to specific circumstances, for instance to reduce
replication cycles in case of low battery etc. We plan
to address these issues in future work.

Acknowledgements This work has been funded
by the FIT-IT grant 815133 from Austrian Federal
Ministry of Transport, Innovation, and Technology.
We would also like to thank our reviewers Jerome Euzenat and Martin Raubal for their valuable feedback,
and Pascal Hitzler for helping to finalize the paper.
