Web Semantics: Science, Services and Agents on the World Wide Web 16 (2012) 3341

Contents lists available at SciVerse ScienceDirect

Web Semantics: Science, Services and Agents

on the World Wide Web

journal homepage: www.elsevier.com/locate/websem

BOTTARI: An augmented reality mobile application to deliver personalized and
location-based recommendations by continuous analysis of social media streams
Marco Balduini a, Irene Celino b, Daniele DellAglio b, Emanuele Della Valle a,b,, Yi Huang c, Tony Lee d,
Seon-Ho Kim d, Volker Tresp c
a Dip. Elettronica e Informazione  Politecnico di Milano, via Ponzio 34/5, 20133, Milano, Italy
b CEFRIEL  ICT Institute, Politecnico di Milano, via Fucini 2, 20133, Milano, Italy
c Siemens AG, Corporate Technology, Otto-Hahn-Ring 6, 81739 Munchen, Germany
d Saltlux, 7F, Deokil Building, 967, Daechi-dong, Gangnam-gu, Seoul 135-848, Republic of Korea

a r t i c l e

i n f o

a b s t r a c t

In 2011, an average of three million tweets per day was posted in Seoul. Hundreds of thousands of tweets
carry the live opinion of some tens of thousands of users about restaurants, bars, cafes, and many other
semi-public points of interest (POIs) in the city. Trusting this collective opinion to be a solid base for
novel commercial and social services, we conceived BOTTARI: an augmented reality application that
offers personalized and localized recommendation of POIs based on the temporally weighted opinions
of the social media community. In this paper, we present the design of BOTTARI, the potentialities
of semantic technologies such as inductive and deductive stream reasoning, and the lessons learnt in
experimentally deploying BOTTARI in Insadong  a popular tourist area in Seoul  for which we have
been collecting tweets for three years to rate the hundreds of restaurants in the district. The results of our
study demonstrate the feasibility of BOTTARI and encourage its commercial spread.

 2012 Elsevier B.V. All rights reserved.

Article history:
Received 23 January 2012
Received in revised form
10 May 2012
Accepted 12 June 2012
Available online 26 June 2012

Keywords:
Social media analysis
Mobile app
Personalized recommendation
Location-based recommendation
Stream reasoning

1. Introduction

Imagine that you are a tourist in Seoul. You would like to dine
out. You prefer to avoid tourist traps and dine where the locals do.
You have been told that Insadong district would be the perfect
place; it offers a choice of more than a hundred restaurants in
two square kilometres, and most of the district is reserved for
pedestrians.

When you reach Insadong-gil (the main street of the district),
you find yourself surrounded by hundreds of restaurant advertisements (see Fig. 1). You know that you can still open your guide
book and choose one of the few restaurants listed there, but you
definitely want a place where the locals go. You take out your mobile and check various apps that recommend restaurants based on
users reviews. The number of user-rated restaurants is smaller
than you expected: only ten restaurants are rated more than ten

 Corresponding author at: Dip. Elettronica e Informazione  Politecnico di

Milano, via Ponzio 34/5, 20133, Milano, Italy.

E-mail addresses: marco.balduini@polimi.it (M. Balduini),

irene.celino@cefriel.it (I. Celino), daniele.dellaglio@cefriel.it (D. DellAglio),
emanuele.dellavalle@polimi.it (E. Della Valle), yihuang@siemens.com (Y. Huang),
tony@saltlux.com (T. Lee), shkim@saltlux.com (S.-H. Kim),
volker.tresp@siemens.com (V. Tresp).

1570-8268/$  see front matter  2012 Elsevier B.V. All rights reserved.
doi:10.1016/j.websem.2012.06.004

times. This is probably because you are in Seoul, one of the cities
world-wide in which people tweet a lot.1 You wish that a service
existed that continuously analysed the social media streams and
that could show you how the locals have been rating Insadongs
restaurants over the last few months.

This is exactly what we designed BOTTARI for. BOTTARI is
an augmented reality application for personalized and localized
restaurant recommendations, experimentally deployed in the
Insadong district of Seoul. At first glance, it may appear like other
mobile apps that recommend restaurants, but BOTTARI is different:
BOTTARI uses inductive and deductive stream reasoning [1] to
continuously analyse social media streams (specifically Twitter) to
understand how the social media users collectively perceive the
points of interest (POIs) in a given area, e.g., Insadongs restaurants.
In this paper, we describe the choices we made in designing
BOTTARI and the lessons we learned by experimentally deploying
it in Insadong. The paper is organized as follows. Section 2
introduces relevant background. Section 3 illustrates the BOTTARI
mobile app from the users point of view, i.e., the main task being
pursued. Section 4 explains how to understand the data used in
experimentally deploying BOTTARI in Insadong district. Section 5

1 An average of three million tweets were posted each day in Seoul in 2011.

M. Balduini et al. / Web Semantics: Science, Services and Agents on the World Wide Web 16 (2012) 3341

LBSs can almost listen to the pulse of the city; therefore many
tourists, when choosing which museum to visit or where to dine
out, look up the POIs with the highest number of check-ins on LBSs.

2.2. Stream reasoning

In 2008, Della Valle et al., in [11], asked the Semantic Web community for techniques able to reason upon rapidly changing infor-
mation. When reasoning on massive data streams, such as those
characterizing BOTTARI, well-known artificial intelligence techniques have the right level of expressivity, but their throughput
is not high enough to keep pace with the stream (e.g., belief revision [12]). The only technological solutions with the right throughput are Data Stream Management Systems (DSMSs) [13] and
Complex Event Processing [14]; however, they are not sufficiently
expressive. A new type of inference engines was thus needed to
reason on streams. Della Valle et al. named them stream reasoners.
In the following years, a number of stream reasoning approaches were developed [1518]. They share three main con-
cepts: (a) they logically model the information flow as a resource
description framework (RDF) stream, i.e. a sequence of RDF triples
annotated with one or more non-decreasing timestamps, (b) they
process the RDF streams on the fly, often by rewriting queries to
the raw data streams, and (c) they exploit the temporal order of the
streaming data to optimize the computation.

BOTTARI uses both a deductive and an inductive stream rea-
soner. The deductive stream reasoner is based on Continuous
SPARQL (C-SPARQL) [15]an extension of SPARQL that continuously processes RDF streams observed through windows (as done
in DSMSs). The syntax and semantics of C-SPARQL are described
in [19]. The C-SPARQL execution engine and its optimization techniques are illustrated in [20]. The optimization needed for highthroughput RDFS++ reasoning are described in [21]. The approach
to publish an RDF stream as linked data (namely streaming linked
data) is based on [22].

The inductive stream reasoner is based on the SUNS (statisti-
cal unit node set) approach [23,24]a scalable machine learning framework for predicting unknown but potentially true
statements by exploiting the regularities in structured data. SUNS
employs a modular regularized multivariate learning approach
able to deal with very high-dimensional data [25] and to integrate
temporal information using a Markov decomposition [26].

2.3. The LarKC platform

The Large Knowledge Collider (LarKC) is an EU FP7 Integrated
Project [27] that aimed at massive distributed incomplete rea-
soning. The LarKC platform [28] is one of the main results of the
project. It is a pluggable Semantic Web framework that can be deployed on a high-performance computing cluster. It allows for orchestrating multiple heterogeneous units for data processing and
reasoning (named plug-ins), and for exposing their aggregated
capabilities as a SPARQL endpoint.

3. The BOTTARI mobile app

As shown in Fig. 2, BOTTARI is an Android application (for
smart phones and tablets) in augmented reality (AR) that directs
the users attention to restaurants and dining places in the
neighbourhood of their position.

In the Korean language, bottari is a cloth bundle that carries a
persons belongings while travelling. BOTTARI carries the collective
perceptions of social media users about POIs in an area and uses
them to recommend POIs. As shown in the upper-left corner of
the screenshot in Fig. 2(a), BOTTARI users can search POIs in their
proximity using four buttons.

Fig. 1. A picture of Insadong district: the density of restaurants is very high (see
also Section 4).

briefly illustrates the ontology at the core of BOTTARI that was
used to integrate the available information. Section 6 presents the
BOTTARI back-end. Sections 7 and 8 report our evaluation results
both in terms of quality of recommendations and scalability of
the BOTTARI back-end. Finally, Section 9 concludes the paper by
discussing the lessons we learnt and sketches our future works.

2. Background work

In this section, we briefly illustrate the context in which the
idea of BOTTARI was conceived and the technological ingredients
we used in implementing it.

2.1. How tourists locate points of interest in the 2010s

In the first half of the 2000s, the popularity of tourist guide
books faded out. The rise of Web 2.0 impacted the tourist
market: just as virtual travel agencies replaced physical ones, so
collaborative tourist guides such as TripAdvisor,2 Yelp,3 or Qype4
eroded the market of guide books. Todays tourists commonly refer
to those Web sites when planning a travel.

In the second half of the 2000s, the search engine industry
intercepted this trend by introducing the concept of local search:
search facilities to find POIs described on the Web while on
the go [24]. In local searches, users preferred POIs are shown:
those located close to the users current position [57], those
for which ratings are available [8,7], and those that match user
preferences [9,10]. Nowadays, a large number of tourists search the
Web for POIs while on the go.

In the 2010s, the increasing availability of GPS-enabled smart
phones allowed the wide-spread of location-based services (LBSs),
i.e., mobile and Web applications that ask users to check in and,
in response, provide context-dependent information and services.
Examples of LBSs are foursquare,5 Gowalla,6 and Facebook Places.7

2 See http://www.tripadvisor.com/.
3 See http://www.yelp.com/.
4 See http://www.qype.com/.
5 See http://foursquare.com/.
6 See http://gowalla.com/.
7 See http://www.facebook.com/about/location.

Fig. 2. Some screenshots of the BOTTARI Android application.

1. For me, which emphasizes the personalization of POI sugges-

tions as in local search studies such as those of [9,10].

2. Popular, which emphasizes the presence of positive ratings of
social media users as in local search studies such as those of
[8,7].

3. Emerging, which focuses on the most recent ratings posted
on social media that capture seasonal effects (e.g., Insadong
people seem to prefer meat restaurants in winter rather than
in summer) or the POIs in fashion only for a limited period.

4. Interesting, which returns the POIs described with a category of

interest for the user.

By pointing the device to frame the surrounding environment, the
users see in AR the recommended POIs, as shown in Fig. 2(a). In this
view, the POIs are indicated with different icons (e.g., restaurants
with
), and their reputation
is indicated by thumb-up
icons,
which means that the POI is collectively perceived positively or
negatively, respectively.

or snack bars with

and thumb-down

Moreover, given the importance of the distance between
the user and the recommended POIs [57], BOTTARI offers a
functionality for distance-based filtering of the recommended
POIs; see the circles in the upper-right side of Fig. 2(a).

The user can learn more about a POI by touching its icon. As
shown in Fig. 2(b) and (c), BOTTARI can display the POIs details.
Fig. 2(d) shows a peculiar feature of BOTTARI: the trend over time
of the POI reputation as collectively perceived on social media.

A video displaying BOTTARI at work, on a mobile phone and
on a tablet, is available on YouTube at http://www.youtube.com/
watch?v=c1FmZUz5BOo.

4.1. Static descriptions of the POIs

Insadong is a 2 km2 district with a high density of restaurants.
For BOTTARI, the information about the 319 restaurants of
Insadong was collected with considerable manual effort from
Yelp,8 PoiFriend,9 Yahoo! Local,10 TrueLocal,11 several Korean
restaurant Web sites, and a few Korean portals. The result is a
manually curated high-quality geo-referenced knowledge base in
which each restaurant is described by 44 attributes (e.g., name,
images, position, address, ambiance, specialities, categories, etc.).

4.2. Social media streams

The social media streams are gathered from the Web (in
particular from Twitter) and converted into an RDF stream using
the proprietary crawling and sentiment mining infrastructure of
Saltlux. The data used for the experiments (see also Section 8) were
collected over 3 years, from 4 February 2008 to 23 November 2010
(1023 days). 200 million tweets were analysed and, as a result,
109,390 tweets posted by more than 31,369 users were discovered
to positively, neutrally, or negatively talk about 245 restaurants.
Table 1 illustrates some statistics of the collected data set:
 high sparsitydefining sparsity as 1  #Ratings
#POIs#Users , for instance,
the sparsity of the positive ratings is 99.3%;
 incompletenessonly 41% of users positively rated at least one
POI (see also Fig. 3(a) and (b));
 inconsistenciesthe same user can rate a particular POI several
times expressing different opinions;

4. Datasets used in BOTTARI

BOTTARI is built on two types of data: the static descriptions of

the POIs and the social media streams.

8 See http://www.yelp.com/.
9 See http://www.poifriend.com/.
10 See http://local.yahoo.com/.
11 See http://www.truelocal.com.au/.

M. Balduini et al. / Web Semantics: Science, Services and Agents on the World Wide Web 16 (2012) 3341

Fig. 3. Dataset statistics: (a) positive ratings for POIs, (b) positive ratings by users, and (c) tweet distribution over time.

Fig. 4. Ontology modelling of BOTTARI data.

Table 1
Statistics of the data set.

Ratings

Positive
Negative
Neutral
Total

Tweet

User

Sparsity (%)

 exponential growth of micro-posts in time Fig. 3(c) shows the
exponential growth in the usage of Twitter in Korea starting
from 200912; and
 long-tail distribution Fig. 3(a) and (b) show the long-tail distribution of positive ratings over POIs and users, respectively.

4.3. Comparison with traditional channels

BOTTARI information is very rich if compared to what a tourist

can obtain from tourist guides and Web 2.0 sites.

Guide books on average list ten restaurants in Insadong, and
they provide a professional review. For instance, the popular Rough
Guide series,13 which has an edition dedicated to South Korea, lists

only eight restaurants and one of them is even outside the Insadong
district. The BOTTARI knowledge base contains all of them; they are
classical tourist places with a medium-to-low number of positive
ratings.

Web 2.0 sites on average list 20 restaurants reviewed by
34 users. For instance, TripAdvisor has information about 13
restaurants in Insadog district reviewed on average by 3 users and
at a maximum by 12 users. The BOTTARI knowledge base contains
12 restaurant present in TripAdvisor; on average they have been
rated positively by tens of users, and only one received a hundred
positive ratings.

5. Ontology used in BOTTARI

We designed BOTTARI following an ontology-based information access architecture [29]. The BOTTARI ontology is represented in Fig. 4. It extends the SIOC vocabulary [30], defining
TwitterUser as a special case of UserAccont and the concept
of Tweet as being equivalent to Post. It models the notion of
a POI as NamedPlace extending SpatialThing from the W3C
WGS-84 vocabulary.14 A NamedPlace is enriched with a categorization (e.g., the ambience describing the atmosphere of a restau-
rant) and the count of positive/negative/neutral ratings. The most

12 The peak in winter 2010 and the missing data in spring 2010 are due to changes
and improvements on the crawling algorithm.
13 See http://www.roughguides.com/.

14 See http://www.w3.org/2003/01/geo/.

distinctive feature of the BOTTARI ontology is the object property
talksAbout  and its subproperties for positive, negative and
neutral opinions  that allows stating that a Tweet (positively,
negatively, or neutrally) talks about a NamedPlace.

6. Architecture and components

The BOTTARI architecture is illustrated in Fig. 5. It consists of
three parts: (a) a client (described in Section 3) that interacts
with the user and communicates to the back-end sending SPARQL
queries, (b) a data initiated segment (PUSH) that continuously
analyses the social media streams, and (c) a query initiated
segment (PULL) that uses the LarKC platform to answer the SPARQL
queries of the client by combining several forms of reasoning.

6.1. The PUSH segment

The PUSH segment continuously analyses the social media
streams crawled from the Web. The Semantic Media Crawler
and Opinion Miner crawls 3.4 million tweets/day related to Seoul,
identifies the subset related to Insadong restaurants (thousands
per day) and extracts the users opinions.15 The result is an RDF
stream of positive, negative, and neutral ratings of the restaurants
of Insadong. Listing 1 shows a segment of this RDF stream: two
tweets are represented by four triples using the vocabulary of
Section 5.

(<:Alice :posts _:t1 >,
2011-10-12T13:34:41)
(<_:t1 :talksPositivelyAbout :TheVolga >, 2011-10-12T13:34:41)
(<:Bob :posts _:t2 >,
2011-10-12T13:35:07)
(<_:t2 :talksNegativelyAbout :TheVolga >, 2011-10-12T13:35:07)

Listing 1: Social media RDF stream

The RDF stream flows at an average rate of a hundred tweets/day,
peaking at tens of tweets/minute. The RDF stream is processed in
real time by the Streaming Linked Data Server (Sld Server) by
means of the network of C-SPARQL queries illustrated in Fig. 6.

In particular, the query Count +1 for Poi in [1 Day] counts the
positive ratings for each POI in one day. The query Sum +1 for POI
in [7 Days] aggregates the result of the previous one over a week
and, similarly, the query Sum +1 for POI in [4 Weeks] computes
this aggregation over a month.

The results of each query are published as linked data by the
windowers. These counts will be used in the PULL segment to
answer the SPARQL queries for the Emerging recommendations
and to display the trend lines illustrated in Fig. 2(d).

Moreover, the Sum +1 for POI in [1 Year] query further
aggregates the results of the queries upstream over one year.
Its results, made available as linked data by another windower,
are used to compute the Popular recommendations in the PULL
segment.

The last component of the PUSH segment is the BOTTARI
inductive stream reasoner Suns. The Rdf2Matrix plug-in daily
takes the results of the Count +1 for Poi in [1 Day] query
and updates the inductive materialization used for the For me
recommendations.

6.2. The PULL segment

The PULL segment is based on the LarKC platform, which
acts as an ontology-based information-integration platform [29]:
the BOTTARI ontology logically integrates the data models of

15 The Opinion Miner is configured so to boost precision, which is 90%, at the
expense of recall.

Fig. 5. Architecture of the BOTTARI back-end. A data initiate (i.e., PUSH) part of
the system continuously analyses micro-posts, while the BOTTARI client can issue
SPARQL queries to the query initiated (i.e., PULL) part of the system. The pluggable
Semantic Web platform LarKC couples the PULL part of the system with the PUSH
one.

the different plug-ins involved in computing a given type of
recommendations. Whenever a user presses one of the four
recommendation buttons in the BOTTARI interface, the client
issues a query using the BOTTARI ontology. When the Query
Rewriter receives the query, it decomposes it into a set of queries,
one for each plug-in. The plug-ins are executed in parallel. Each
plug-in receives its rewritten query and sends its partial results
to the Query Evaluator. This plug-in joins the partial results and
returns the complete answer to the client, as if the query had been
evaluated on a single integrated knowledge base. Caching of entire
queries and intermediate results is applied in order to minimize
query latency.

There are three plug-ins involved in computing the BOTTARI

recommendations.
 Given a location, a spatial orientation, and a POI category, the
Sor Plug-in returns a list of POIs ordered by distance from the
location. It delegates the query execution to SOR, the Saltlux
spatial-aware RDF store.
 Given a user, the Suns Plug-in returns a list of POIs ordered
by the estimated probability that the user will like them. It
uses the inductive materialization, maintained up-to-date by
the Rdf2Matrix Plug-in.
 Given a period (i.e., a day, a week, a month, or two years), the
Sld Plug-in returns a list of POIs ordered by the number of
tweets that talk positively about the POI in that period. It uses
the linked data published in SLD windowers (see Fig. 6).
To better clarify how we configured the LarKC platform to
evaluate the BOTTARI client requests, let us consider the query in
Listing 2 that represent a mix of the queries the client sends for
Interesting (lines 37), For me (lines 811), and Emerging (line 12)
recommendations.
Lines 37 ask for POIs that may be of interest for foreigners (line
5), located within 200 m from the user position (line 6), when
looking east (line 7). This is the portion of query that the Sor Plugin can evaluate. The Query Rewriter knows this: when rewriting
the query, it extracts lines 37 and sends them to the Sor Plug-in.
We do not show the rewritten query, because it is simply a subset
of the query in Listing 2.

M. Balduini et al. / Web Semantics: Science, Services and Agents on the World Wide Web 16 (2012) 3341

Fig. 6. The network of C-SPARQL that continuously analyses the RDF stream produced by the Social Media Crawler and Opinion Miner and keeps up to date the data used
for the Emerging and Popular recommendations.

geo:lat ?lat ; geo:long ?long ;
ns:category :InterestingForForeigners .

1. SELECT ?poi ?name ?lat ?long
2. WHERE {
3. ?poi a ns:NamedPlace ; ns:name ?name ;
4.
5.
6. FILTER(:within_distance(37.5,126.9,?lat,?long,200))
7. FILTER(:dest_point_viewing(37.5,126.9,?lat,?long,90,200))
8. { :Alice sioc:creator_of ?tweet
9.
10.
11.
12. ?poi twd:numberOfPositiveTweetsInTheMonth ?numPos .
13. }
14. ORDER BY DESC(?numPos * ?prob * distance(37.5,126.9,

?tweet twd:talksAboutPositively ?poi .
WITH PROBABILITY ?prob
ENSURE PROBABILITY [0.5..1) }

?lat,?long,200))

15. LIMIT 10

Listing 2: Sample BOTTARI client query in SPARQL.

Lines 811 add the additional constraint that the requesting
user has not yet talked positively about these POIs, but may do
it in future (i.e., it is probable that the user will like them). Lines
1011 makes use of SPARQL with probability [24]. The triple pattern
at lines 89 matches triples in the inductive materialization
asserting that a user will likely positively talk about a POI. The
PROBABILITY clause at line 10 extends SPARQL with

the probability values associated to each triple in the inductive
materialization. The variable ?prob may assume values between 0
and 1, where 1 means that the user has already positively rated the
POI. The ENSURE PROBABILITY clause at line 11 accepts a pattern
solution to lines 89 only if its estimated probability is greater or
equal to 0.5 but strictly less than 1. The Query Rewriter extracts
lines 811 from the query in Listing 2 and rewrites them in a query
for the Suns Plug-in, as illustrated in Listing 3.

:Alice twd:talksAboutPositively

[ ns:about ?poi ; ns:withProbability ?prob ] }

:Alice sioc:creator_of ?tweet
?tweet twd:talksAboutPositively ?poi .

1. CONSTRUCT {
2.
3.
4. WHERE {
5.
6.
7. WITH PROBABILITY ?prob
8. ENSURE PROBABILITY [0.5..1) }
9. ORDER BY DESC(?prob)
Listing 3: The query in Listing 2 as rewritten for the Suns Plug-in.
Notably, in Listing 3, the WHERE clause (lines 58) corresponds to
lines 811 in Listing 2. The peculiarity of the query in Listing 3 is the
CONSTRUCT clause. It allows one to embed the probability values
in the query results of the Suns Plug-in without using annotations
or reification. An example of the query results is given in Listing 4.

:Alice ns:talksAboutPositively

[ ns:about :TheBanqueting ; ns:withProbability "0.8" ] ,
[ ns:about :JoteunSeed ; ns:withProbability "0.6" ] .
Listing 4: Sample results to the query in Listing 3.

The query in Listing 2 also contains a triple pattern that the
Query Rewriter will use to prepare the rewritten query for the Sld
Plug-in. Line 12 adds the additional requirement that a number
of tweets in the last month must have talked positively about the
POIs.

The three plug-ins are executed in parallel, and each produces
a list of POIs. The Query Evaluator takes care of computing the
global answer to the original query by evaluating the query in
Listing 5 on the combined results of the three rewritten queries.
Notably, at lines 68, the Query Evaluator assumes the existence
of the triples generated by the Suns Plug-in with Listing 3.
1. SELECT ?poi ?name ?lat ?long
2. WHERE {
3. ?poi a ns:NamedPlace ; ns:name ?name ;
4.
5. :Alice twd:talksAboutPositively
6.
7. ORDER BY DESC(?numPos * ?prob / distance(37.5,126.9,

geo:lat ?lat ; geo:long ?long ; ns:distance ?distance .

[ ns:about ?poi ; ns:withProbability ?prob ]

?lat,?long,200))

8. LIMIT 10
Listing 5: The query in Listing 2 as rewritten for the Query
Evaluator.
A final remark on lines 1415 in Listing 2 (reported in Listing 5 as
lines 78) is as follows. Line 14 asks for the POIs to be ordered: the
first result must be the POI with the highest number of positive
tweets, with the highest estimated probability for the user to talk
positively about it, and the closest one to the user position. Finally,
line 15 limits the returned results to the first 10. The ORDER BY and
LIMIT clauses qualify the query in Listing 2 as a top-k query. This
type of query is subject to optimizations [31] typically unavailable
in SPARQL [32].

7. Evaluation

The quality and the efficacy of BOTTARI recommendations was
comparatively evaluated using the data set described in Section 4.

7.1. Methodology

We decided to measure the normalized discounted cumulative
gain (NDCG) and the accuracy of the top N (ACC@N) averaged

Fig. 7. The figure shows the BOTTARI evaluation results. Subfigures (a) and (b) respectively show the NDCG scores and the accuracy values of the top N for all types of
recommendation (except Emerging) in Setting 1. The combination of For me and Popular recommendations produces the best ranking. Subfigures (c) and (d) focus on Setting
2, where special emphasis is put on the dependency of Emerging recommendations on the window size (i.e., 1, 7, 30, 90, and 180 days). The NDCG scores and the accuracy
values of the top 10 show that the Emerging recommendations can be nearly as effective as the Popular recommendations, keeping only a small fraction of the full history.
Finally, subfigure (e) shows the results of the scalability test on the PUSH segment of the BOTTARI back-end, which is able to handle up to 15,000 tweets/second.

among all users. The For me, Popular, and Interesting recommendations were compared with two baselines: random guess (Random)
and k-nearest neighbour (KNNItem).16 The combination of For
me and Popular recommendations was also considered. For all

recommendations, the distance filter was not applied, because our
data set does not contain the user position at tweeting time.

16 Let P be the number of POIs and U be the number of users. For the baseline
KNNItem, we used the cosine as the similarity measure of POIs defined as

similarity(pi, pj) = pi ,pj
pipj , where pi and pj represent the vectors of ratings of the
i-th and the j-th POI given by all users for i, j  {1, . . . , P}, and where , is the
scalar product of two vectors and is the 2-norm of a vector. We set k to the total
number of POIs.

M. Balduini et al. / Web Semantics: Science, Services and Agents on the World Wide Web 16 (2012) 3341

Table 2
Number of ratings with different time frames.

Last day
Last 2 days
Last 7 days
Last 30 days
Last 90 days
Last 180 days
Total

Nr. of ratings

Two types of ground truth were prepared for the evaluation.
They correspond to two experimental settings.
 Setting 1: the standard method of splitting the data into a
training set and a test set was used. In this case, a ground truth
contains one positive rating for each user randomly withheld
from the data set. We repeated this data split five times.
 Setting 2: specifically for the Emerging recommendations,
which uses a time window, a set of ground truths was created
by withholding the newest rating for each user. Different time
frames were considered: 1 day, 2 days, 7 days, 30 days, 90 days,
and 180 days. Table 2 shows the number of ratings considered
for the Emerging recommendations.

7.2. Results

Fig. 7 shows the results we obtained in the two settings. In
Fig. 7(a), the NDCG scores of the tested methods are plotted against
the number of latent variables (an input of the learning model).
Since the two baselines (Random and KNNItem) and the Popular
recommendations are independent of this number, they produce
three horizontal lines. We evaluated For me recommendations
produced bySuns with 20, 50, 100, 150, and 200 latent variables. As
expected, Random was the worst. The Popular recommendations
were slightly better than KNNItem. This might be due to the
bandwagon effect that exists in many social communities. The
For me recommendations significantly outperformed all the others
after the number of the latent variables reached 100. The best
ranking ever was produced by the combination of both For me
and Popular recommendations. These results confirm the idea
presented in [1] that a combined approach of deductive and
inductive stream reasoning works best.
Fig. 7(b) shows the accuracy of the top N (ACC@N) recommended POIs for N = {5, 10, 15, 20, 25, 30}. The quality of the
For me recommendations was much higher than that of all other
methods and, once again, the combination of For me and Popular
recommendations is the best option overall.

A key aspect of BOTTARI is the adoption of stream reasoning
techniques that build on the hypothesis that a sufficiently long
window can capture all the information needed for a given task,
while the rest can be forgotten. In Setting 2, we compared the
Emerging recommendations, which use a time window, against the
other approaches. We varied the size of the time window from 1
day to 180 days. Fig. 7(c) and (d) plot the NDCG scores and the
accuracy of the top 10 (ACC@10) as a function of the length of the
window. The Emerging recommendations, the only curve in the
figure, catch the NDCG scores of Popular recommendations (which
consider years of data) when using the last 30 days of ratings,
and were very close to the accuracy of the top 10 of the Popular
recommendations when using the last 90 days of ratings.

This fact tells us that, in this setting, the Emerging recommendations with a 90-day window are nearly as effective as the Popular
recommendations that keep the full history (i.e., two years of data).

8. Scalability

the Opinion Miner contains an average of 150 RDF triples/day
(corresponding to 75 tweets). The large majority of the crawled
tweets are not related to Insadongs restaurants. The flow rate of
this RDF stream does not stress the PUSH segment of the BOTTARI
back-end that runs on a laptop with CPU 2.8 GHz Intel Core i7 and
8 GB RAM DDR3, which corresponds to a 150 e/month share in a
cloud environment.17

8.1. SUNS scalability

On the deployment machine, the training of Suns on the whole
dataset takes approximately 86 s with 200 latent variables, and
the recommendation of POIs for a user costs on average less
than 5 ms. Internal studies have confirmed that, by exploiting
sparsity, Suns computational requirements scales linearly with
the number of known ratings. In addition, we observed that Suns
is very robust and insensitive to the number of latent variables.
This can be explained by the fact that Suns, in contrast to other
matrix factorization methods such as singular value decomposition
(SVD), is regularized. This property can simplify the use of Suns, in
particular for people without machine learning expertise.

8.2. SLD scalability

To evaluate the scalability of Sld Server, we adopted a technique used in publishsubscribe systems [33]. We measured the
input throughput, i.e. the ability to consume the stream inputs,
computed as
input throughput =

size input

time to process the input

We measure the input throughput by sending a recorded
portion of the RDF stream to the Sld Server and by measuring
the time required to process it. We used seven portions of the
recorded RDF stream of growing length: the shortest one contains
50 tweets recorded between 1 May 2010 and 2 May 2010; the
longest one contains 1085 tweets recorded between 1 May 2010
and 3 June 2010. To improve the confidence, we repeated each
experiment 500 times, and we measured the average, minimum,
and maximum time required to process the RDF stream portion.

The results of these scalability tests on the deployment machine
are illustrated in Fig. 7(e). Initially, when the Sld Server is
able to keep the pace of the growing rate of tweets/second in
input, the input throughput increases with the number of tweets
in the recorded segment. When the input throughput reaches
15,000 tweets/second, the Sld Server saturates the available
computational resources and is no longer able to handle the whole
input. This is a common behaviour in DSMSs, where this kind of
tests allows one to dimension the input queue to handle pick rates
exceeding this saturation point.

9. Conclusions and future work

BOTTARI is a sophisticated application of semantic technologies
that makes use of the rich and collective knowledge obtained
by continuously analysing social media streams. We believe it
was important to hide this complexity from the user using an
intuitive and easy to use interface. The preliminary experiments
we conducted show that BOTTARI can be more effective than guide
books and Web 2.0 travel review sites.

Inspired by the literature on ontology-based information
access, we designed the BOTTARI ontology as a driver of both data
and service integration. It allows for combining real data sources at
a real scale, i.e. location-specific static information about hundreds
of POIs with the results of continuous analysis of dynamic social

The Social Media Crawler (see Fig. 5) probes hundreds
of thousands of tweets/day, but the RDF stream produced by

17 The calculation of the cost per month was done using https://www.gandi.net/
hosting/vps.

media streams. However, we believe that the BOTTARI ontology
was also crucial in handling the heterogeneous data models of the
plug-ins. For instance, the inductive reasoner annotates triples in
the inductive materialization with their probability of being true,
but the other plug-ins cannot understand these annotations, unless
they are transformed into commonly described data (see Listing 3).
BOTTARI is engineered for scalability. Both Suns and Sld show
a scalability that goes largely beyond the actual needs of BOTTARI
deployment in Insadong. Training Suns over two years of data
takes 1.5 min. Sld can handle a flow of 15,000 tweets/second
when the actual rate is tens of tweets/day. These results convinced
Saltlux to start a large-scale deployment of BOTTARI in Korea.

Our future work will be devoted to extend BOTTARIs function-
alities, to reduce its production costs, and to further improve the
technological solution.

We intend to extend BOTTARI by identifying and recommending the mavens of a POI (i.e., social media users that post a large
number of micro-posts related to that POI and are known to influence the opinion of other social media users) as described in [34]
and to cope with an evolving world (e.g., new restaurants open,
some restaurants close, etc.). We would like to reduce the production costs of BOTTARI, in particular those associated to the manual
creation of the spatial-aware knowledge base of the POIs. To this
end, we look forward to integrating BOTTARI with Linked Open
Data (LOD) sources. We are aware that published data sets may not
have sufficient quality, so a first step is to consider the LOD data
available for Insadong and to check the differences on the metric
results compared to the manually curated knowledge base used for
BOTTARI. If this step turns out to be successful, extending BOTTARI
to a bigger area, e.g., such as all of Seoul, is the necessary step to
assess the feasibility of commercial spreading of BOTTARI.

Finally, we intend to improve the BOTTARI back-end by
studying different strategies to deal with the inconsistent ratings
and opinion changes about a POI and by applying to SPARQL some
optimizations studied for top-k queries in relational databases.

Acknowledgment

This work was partially supported by the LarKC project (FP7-

215535).
