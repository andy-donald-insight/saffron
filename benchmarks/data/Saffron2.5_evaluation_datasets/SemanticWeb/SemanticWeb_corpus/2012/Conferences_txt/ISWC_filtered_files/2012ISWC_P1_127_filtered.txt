Concept-Based Semantic Difference

in Expressive Description Logics

Rafael S. Gon calves, Bijan Parsia, and Ulrike Sattler

School of Computer Science

University of Manchester

Manchester, United Kingdom

Abstract. Detecting, much less understanding, the difference between
two description logic based ontologies is challenging for ontology engineers due, in part, to the possibility of complex, non-local logic effects of
axiom changes. First, it is often quite difficult to even determine which
concepts have had their meaning altered by a change. Second, once a
concept change is pinpointed, the problem of distinguishing whether the
concept is directly or indirectly affected by a change has yet to be tack-
led. To address the first issue, various principled notions of semantic
diff (based on deductive inseparability) have been proposed in the literature and shown to be computationally practical for the expressively
restricted case of ELHr-terminologies. However, problems arise even for
such limited logics as ALC: First, computation gets more difficult, becoming undecidable for logics such as SROIQ which underly the Web
Ontology Language (OWL). Second, the presence of negation and disjunction make the standard semantic difference too sensitive to change:
essentially, any logically effectual change always affects all terms in the
ontology. In order to tackle these issues, we formulate the central notion
of finding the minimal change set based on model inseparability, and
present a method to differentiate changes which are specific to (thus directly affect) particular concept names. Subsequently we devise a series
of computable approximations, and compare the variously approximated
change sets over a series of versions of the NCI Thesaurus (NCIt).

Introduction

Determining the significant differences between two documents (so-called diff)
is a standard and significant problem across a wide range of activities, notably
software development. Standard textual diffing algorithms perform poorly on description logic (DL) based ontologies, both for structural reasons (e.g., ontology
serializations, such as those of OWL, tend not to impose stable ordering of ax-
ioms), and due to the highly non-local and unintuitive logical effects of changes
to axioms. This gave rise to several diff notions for OWL ontologies, encompassing various types of change detection and impact analysis mechanisms. Within
change detection there are two key dimensions of change: syntactic and seman-
tic, leading to syntactic and semantic diffs. The former, e.g. those diffs based
on OWLs notion of structural equivalence [3,7,11], detect asserted changes

P. Cudr e-Mauroux et al. (Eds.): ISWC 2012, Part I, LNCS 7649, pp. 99115, 2012.
c Springer-Verlag Berlin Heidelberg 2012

R.S. Gon calves, B. Parsia, and U. Sattler

between ontologies, and thus are of interest for, e.g., versioning. In [3] we addressed the problem of identifying and characterising the impact of such asserted
changes by, for instance, pinpointing whether each change produces a logical ef-
fect. However, that work focused exclusively on axiom level analysis. Since OWL
ontologies are sets of axioms, this is a natural level of analysis. However, ontologies often serve as ways to manage controlled vocabularies, that is, the set of
axioms is a development time artifact supporting the delivery of a hierarchically
organized set of categorical terms. In such cases, end users are most directly
concerned with changes to the terms themselves and may not even have access
to the axioms. Thus, the modeller must not only be aware of the axioms they
have touched, but how those changes affect the concepts in the ontology.

For the purpose of determining entailment (and ergo term) differences, recent
notions of semantic difference based on conservative extensions have provided
a robust theoretical and practical basis for analysing these logical effects [6].
Unfortunately, semantic difference is computationally expensive even for inexpressive logics such as EL. For the very expressive logics such as SROIQ (the
DL underlying OWL 2) it is undecidable [9]. Furthermore, standard semantic
difference runs into other difficulties in more expressive logics when we consider
differences w.r.t. all terms in both ontologies. In particular, if we compare entailment sets over logics with disjunction and negation we end up with vacuously
altered terms: any logically effectual change will alter the meaning of every term.
To address this vacuity problem, we present a non-trivializable notion of semantic difference of concepts, which includes a mechanism for distinguishing
directly and indirectly affected concepts. To address the undecidability of even
our refined semantic difference problem for the SROIQ (i.e., OWL 2) DL, we define a series of motivated semantic diff approximations for expressive description
logics. These algorithms are evaluated on a select subset of the National Cancer Institute (NCI) Thesaurus (NCIt) corpus, by a comparison of the changes
found via the proposed approximations and related approaches. Our experiments
show that our strongest approximation, Grammar diff, finds significantly more
changes than all other methods across the corpus, and far more than are identified in the NCIt change logs. We show that distinguishing direct and indirect
changes is necessary for making concept based change logs manageable.

2 Preliminaries

We assume the reader to be familiar with ontologies and OWL, as well as the
underlying description logics (DLs) [1]. We use terms to refer to concept and role

signatures (i.e., the set of terms occurring in them) as O1 and O2, respectively.
names. When comparing two ontologies we refer to them as O1 and O2, and their
Throughout this paper we refer to O1  O2 as u. This signature is the natural
signature of an axiom  is denoted .

subject of comparison of terminological changes between two ontologies. The

Throughout this paper we use the standard description and first order logic
notion of entailment; an axiom  entailed by an ontology O is denoted O |= . We
?

?

?
refer to an effectual addition (removal) from O1 to O2 as an axiom  such that
  O2 and O1 |=  (  O1 and O2 |= ) [3]. Thus two ontologies are logically
equivalent, denoted O1  O2, if there is no effectual change (addition or removal)
between O1 and O2. The set of subconcepts of an ontology O is recursively defined
as all subconcepts found in each axiom of O, plus {,}. W.l.o.g, we define all
diff functions asymmetrically, thus to get the full diff between two ontologies we
compute Diff(O1,O2) (for additions) and Diff(O2,O1) (for removals).
The restriction of an interpretation I to a set of terms  is denoted I| .
Two interpretations I and J coincide on a signature  (denoted I| = J |) if



for each t  .

= 

and t

= t

Throughout this paper we use the notion of model conservative extension
(mCE) [2,9], and associated inseparability relation [13]. The axioms expressible
in a DL L over a set of terms  is denoted L().
Definition 1. Given two ontologies O1, O2 over a DL L, and a signature .

(1)

(2)

(3)

O2 is model -inseparable from O1 (O1 mCE

{I| | I |= O1} = {J | | J |= O2}



O2) if

O2 is deductive -inseparable from O1 w.r.t. L (O1 L
{  L() | O1 |= } = {  L() | O2 |= }
Diff(O1,O2)
 = {  L() | O1 |=  and O2 |= }



O2) if

 =  if and only if O1 L

Note that Diff(O1,O2)
O2. Also, bear in mind (esp.
for the running example) that O1 L
O2. In the remainder
of this paper we use SROIQ General Concept Inclusions (GCIs) for L, and omit
L if this is clear from the context.

O2 implies O1 mCE







pressed in the designated signature, but does not pick out specific terms in that

3 Exisiting Semantic Diff
Diff(O1,O2) alone, if non-empty, tells us that there are new entailments ex-
signature. The CEX [6] diff method focuses on elements of Diff(O1,O2), so
called witness axioms, with specific forms  subsumptions with an atomic left
hand (resp. right hand) side, i.e., of the form A  C (resp. C  A) where A
is atomic and C is a possibly complex concept, called the witness concept. All
terms that appear in those positions in axioms in Diff(O1,O2) form the set
of affected terms (denoted AT(O1,O2)). By restricting attention to changes
decidable1, 2) produces manageable diff reports (AT(O1,O2) is a subset of the

to individual terms (rather than to sets of terms together), CEX 1) becomes

signature, not of the powerset of the signature), and 3) the diff report is nicely
interpretable. CEX gets interpretability both by focusing on changes to individual terms in themselves (instead of on coordinated changes to sets of terms) and
by exploiting the natural directionality of its witness axioms.
1 At least for the restricted case of acyclic ELHr terminologies (EL extended with role
inclusions and range restrictions).

R.S. Gon calves, B. Parsia, and U. Sattler

eralised, designated AT(O1,O2)R

CEX divides AT(O1,O2) into specialised, denoted AT(O1,O2)L

, and gen-
, concept names depending on whether a term
appears on the left or right hand side of a witness axiom (the same term may
appear in both). The CEX algorithm is sound and complete: If there is a witness

axiom for a term A in the deductive closure of O2, then CEX will find it.
The computational complexity of deciding -entailment is undecidable for
expressive DLs such as SROIQ. For EL it is already ExpTime-complete [10],
while for ALC, ALCQ, and ALCQI it is 2ExpTime-complete [9]. Thus, CEX
is computationally infeasible for expressive logics. Moreover, when considering
differences over u, a direct extension of -difference for more expressive logics
such as ALC would be futile; when we step beyond EL as a witness language
into more expressive logics with disjunction and negation, if O1  O2 then
AT(O1,O2) contain all terms in . Consider the following EL ontologies: O1 =
{A  B}, and O2 = {A  B, C  D}. Clearly O2 is a conservative extension
of O1 w.r.t.  = {A, B}, but if we consider u then that is no longer the case;
a witness axiom for the separability would be, e.g.,  := A  C  D. This
  u; for each witness axiom
witness witnesses a change to every concept A


. Such a witness would
suffice to pinpoint, according to -difference, that all terms in u have changed:
AT(O1,O2)u
= u since   C  D. Consequently, this kind of witness is
uninteresting for any particular concept aside from . Likewise, a change A  
implies that, for all B in the signature of the ontology in question, we have that
A  B. Yet these consequences are of no interest to any concept B.

  C  D we have that O1 |= 

: A
?

?

?
, while O2 |= 
?

?

?
Similar to the case of the least common subsumer [8], the presence of disjunction (and negation) trivialises definitions that are meaningful in less expressive
logics. Thus we need to refine our diff notion when dealing with propositionally
closed witness languages.

A simple approach to coping with the dual problems of computational difficulty and triviality is to use a relatively inexpressive witness language. For exam-

for OWL 2 DL where C conforms to a specific grammar (B is atomic):

ple, ContentCVS [5] computes an approximation of AT(O1,O2)L
Grammar Gcvs : C  B | r.B | r.B | B
Grammar Gcvs is a bit ad hoc, being based on the designers intuitions of what
might be interesting but yet inherently finite. In a user study of ContentCVS,
users criticised the excessive amount of information displayed when using larger
approximations of the deductive difference [5]. The users were not presented
with the affected terms directly, only via presentation of the witness axioms.
ContentCVS avoids triviality by not allowing axiom encoding witness concepts.

 (i.e., A  C)

4 Semantic Diff

Given the shortcomings of existing methodologies, and the triviality of udifference in expressive ontologies, we present a semantic diff method that a)
determines which concepts have been affected by changes. For exposition rea-
sons, we concentrate on concepts, though roles are easily added. And b) identifies
?

?

?
which concepts have been directly (or indirectly) changed. Ideally, a solution to
these problems would be 1) a computationally feasible diff function (for OWL
2 DL), 2) based on a principled grammar, that 3) returns those concept names
affected by changes between two ontologies, while 4) distinguishing whether each
concept name is directly (or indirectly) specialised and/or generalised.

Consider the toy ontologies O1 and O2 defined in Table 1; they will be used

throughout this section as a running example.

Table 1. Ontologies O1 and O2
O1
A  B
B  C
D  r.E
E  s.G
r.I  J

O2
A  B
B  C  D
D  r.E
E  s.(G  F )
r.I  J
t.H  I

1 :
2 :
3 :
4 :
5 :
6 :

1 :
2 :
3 :
4 :
5 :

4.1 Determining the Change Set

since an effectual change implies some change in semantics. In order to
pinpoint this change, we need to find the set of terms 

Given two ontologies O1 and O2, such that O1  O2 (i.e., there exists at
least one effectual change in Diff(O1,O2)), we know that O1 and O2 are not
-inseparable (for  := u) w.r.t. model inseparability, i.e., O1 mCE
O2
s.t. O1 is mCE-

inseparable from O2 w.r.t. the remaining signature  \ 
: O1 mCE
\ O2.
Then we know that, from O1 to O2, there are no changes in entailments over
 \ 
noted MinCS(O1,O2)), in the sense that we can formulate a non-trivial witness
s.t. O1 |=  but O2 |= . Thus we denote these terms as affected.
   is a set of minimal
 O2.

affected terms between O1 and O2 if:

Definition 2 (Minimal Affected Terms). A set 

O1 mCE

 O2 and for all 

: O1 mCE

. We refer to this set of terms 

as the Minimal Change Set (de-

  
?

?

?
axiom  over 
?

?

?

?

?

?
The set of all such sets is denoted MinAT(O1,O2).

In order to form the minimal change set, we take the union over all sets of

Definition 3 (Minimal Change Set). The minimal change set, denoted

affected terms in MinAT(O1,O2).
MinCS(O1,O2), of two ontologies is defined as follows:
?

?

?
MinCS(O1,O2) :=

MinAT(O1,O2) , and

MinCS(O1,O2)C := {C | C is a concept name in MinCS(O1,O2)}.

From the example ontologies in Table 1 we have that {A, D} is a set of minimal
affected terms between O1 and O2; O1 mCE{A,D} O2, because O1 |= A  D

R.S. Gon calves, B. Parsia, and U. Sattler

while O2 |= A  D. {A, D} is minimal since O1 mCE{A} O2, and similarly for {D}.
Analogous cases can be made for {B, D} via witness axiom B  D, {E, s, F}
via E  s.F , {r, t, H, J} via r.t.H  J, and finally {t, H, I} via 6. So the
is MinCS(O1,O2)C := {A, B, D, E, F, H, I, J}.

minimal change set (restricted to concept names) between these two ontologies

4.2 Characterising Concept Impact

Prior to determining how a concept in a signature  has changed (e.g., it has
a new superconcept), we employ a diff function  which, given two ontologies

and , formulates a set of witness axioms over , denoted  Diff(O1,O2),
such that, for each    Diff(O1,O2): O1 |=  and O2 |= . Now given such
a set  Diff(O1,O2), we can tell apart specialised and generalised concepts

depending on whether the witness concept is on the right or left hand side of the
witness axiom, accordingly. Furthermore, we regard a concept name A as directly
specialised (generalised) via some witness C if there is no concept name B that
is a superconcept (subconcept) of A, and C is also a witness for a change in B.
Otherwise A changed indirectly.

Definition 4. A diff function  returns a subset  Diff(O1,O2) of
Diff(O1,O2). For a diff function , the sets of affected concept names for

 otherwise
 otherwise

{} if there is a   C   Diff(O1,O2)
{} if there is a C     Diff(O1,O2)

- AT(O1,O2)

 =
- AT(O1,O2)

 =
 = {A   | there exists A  C   Diff(O1,O2) and
- AT(O1,O2)L
  C /  Diff(O1,O2)
 = {A   | there exists C  A   Diff(O1,O2) and

C   /  Diff(O1,O2)
}
Y {L,R,,} - AT(O1,O2)Y

- AT(O1,O2) =

 AT(O1,O2)R

a signature  are:

}



 (analogously A  -AT(O1,O2)R
),

Given a concept name A  -AT(O1,O2)L
and a set of terms + :=   {,}, we define the following notions:
A direct change of A is a witness C s.t. A  C (C  A)   Diff(O1,O2)
and there is no B  + s.t. O2 |= A  B (O2 |= B  A),O2 |= A  B, and
B  C (C  B)   Diff(O1,O2) .
An indirect change of A is a witness C s.t. A  C (C  A)   Diff(O1,O2)
and there is at least one B  + s.t. O2 |= A  B (O2 |= B  A),
O2 |= A  B and B  C (C  B)   Diff(O1,O2) .

Concept A is purely directly changed if it is only directly changed
(analogously for purely indirectly changed).
?

?

?
take as an example the ontologies in Table 1; we have that B is purely directly

As a consequence of Definition 4, -AT(O1,O2)  MinCS(O1,O2). Once again,
specialised via witness D: O1 |= B  D and O2 |= B  D, while A is indirectly
specialised via the same witness, since O1 |= A  D, O2 |= A  D, O2 |= A  B
and B  D  Diff(O1,O2). In other words, concept A changes via B. Additionally,

the concept D is directly generalised via B, but indirectly generalised via A. Thus
D is not purely directly changed, but rather we have a mixed effect on the concept.
The distinction between directly and indirectly affected concept names, in addition to the separation of concepts affected via  and , allows us to overcome
the problem described in Section 3, w.r.t. propositionally closed description log-
ics. If there exists a global change to  (analogously to ), it is singled out
from the remaining localised changes, and its effect is appropriately marked as
an indirect change to every concept name. Thus the diff results are no longer
polluted by vacuous witnesses such as those exemplified and discussed in Section 3. The notion of change effect as per Definition 4 is applicable to any diff

function  that produces a set of witness axioms  Diff(O1,O2).

4.3 Diff Functions

simple comparison of concept hierarchies between two ontologies, i.e., differences

Deciding the minimal change set between two ontologies involves deciding
whether, for a given signature , two ontologies are mCE-inseparable w.r.t. .
Since mCE-inseparability is undecidable for SROIQ [9],2 we devise several sound
but incomplete approximations to the problem of computing the minimal change
set: to start with, Subconcept diff, denoted SubDiff(O1,O2), and Grammar
diff, denoted GrDiff(O1,O2). The set of differences that would be captured by a
in atomic subsumptions, is denoted AtDiff(O1,O2). Hereafter we refer to the
semantic diff notion used within ContentCVS as CvsDiff(O1,O2).
The SubDiff(O1,O2) approximation is based on subconcepts explicitly asserted in the input ontologies, and returns those differences in entailments of
type C  D, where C and D are possibly complex concepts from the set of
-subconcepts of O1 and O2 (see Definition 5). It is at least conceivable that

many entailments will involve subconcepts, and, if that is the case, those would
be witnesses that the user could understand and, indeed, may have desired. Fur-
thermore, this notion may find entailment differences that would not show up if
we restrict ourselves to either atomic subsumptions, or specific forms of entail-

explicit in either ontology, however, limits the amount of change captured. In

ments (in the manner of CvsDiff(O1,O2)). The restriction to forms of concepts
our ontologies in Table 1, e.g., the change to concept D: O1 |= D  r.s.F ,
while O2 |= D  r.s.F , cannot be captured by SubDiff(O1,O2). However,
in a principled and relatively cheap way, e.g., we have that O1 |= A  r.E,
and O2 |= A  r.E. Obviously we could arbitrarily extend our entailment
grammar to, for instance, a subset of the SROIQ closure, thus finding even
2 Indeed mCE-inseparability is already undecidable for general EL ontologies [10].

the rationale behind this approach is that we could detect other kinds of change

R.S. Gon calves, B. Parsia, and U. Sattler

more witnesses. Though our aim is to capture as much change as possible while
maintaining both computational feasibility and legibility of witness axioms.

Nevertheless, in order to avoid only considering witnesses in their explicitly

asserted form, we extend the previous diff notion to GrDiff(O1,O2), which de-

tects differences in additional types of entailments using the following grammars
(where SC, SC

stand for subconcepts of O1  O2, and r a role name):
?

?

?
Grammar GL : C  SC | SC  SC
Grammar GR : C  SC | SC  SC
GrDiff(O1,O2) combines the basic intuitions about interesting logical forms
with the ontology specific information available from SubDiff(O1,O2) to be

 | r.SC | r.SC | SC
 | r.SC | r.SC | SC

somewhat less ad hoc. By restricting fillers of the restrictions to the (inherently)
finite set of subconcepts, we ensure termination. The grammars are slightly optimized to avoid pointless redundancies, such as testing for A  C  D which
is equivalent to A  C and A  D. It is not obvious how to reasonably extend
these grammars to incorporate features such as number restrictions.

In terms of computational complexity, there are two dimensions to be consid-
ered: 1) the complexity of deciding entailment in the input language, and 2) the
number of entailment tests. Regarding the latter, the maximum number of candidate witness axioms is polynomial in the number of the inputs subconcepts,

namely quadratic for SubDiff(O1,O2) and cubic for GrDiff(O1,O2).
function, including CEX and CvsDiff(O1,O2), is boiled down to finding an
entailment that holds in O2 but not O1; what varies between each function is

The semantic difference between ontologies w.r.t. each mentioned diff

the kind of entailment grammar used, which in turn dictates the computational
feasibility of the diff function.

Definition 5. Given two ontologies, a diff function , and a signature , the
set of -differences is:

 Diff(O1,O2) := {  -ax | O1 |=   O2 |=    }

if  = At,

where the set -ax is defined as follows:
{C  D | C, D  }
{C  D | D a concept over GL, or C a concept over GR}

if  = Sub, {C  D | C, D subconcepts in O1  O2}
if  = Gr,
if  = Cvs, {C  D | C   and D a concept over Gcvs}
if  = CEX, {C  D | C, D subconcepts in L()}

Applying the diff functions At, Sub, and Gr from Definition 5 to our example
ontologies from Table 1, we get the sets of affected terms described in Table 2.
The differences in atomic subsumptions are easily identifiable, and follow from

axioms 1, 2 in O1 and their 1, 2 counterparts in O2. In addition to these,
SubDiff(O1,O2) pinpoints the axioms 4 and 5 as new entailments in O2, thus

concept E is regarded as specialised via 4, and I generalised via 5. Finally
?

?

?
Table 2. Affected concepts (specialised, generalised and total) between O1 and O2
according to the mentioned diff notions

-AT(O1, O2)L
-AT(O1, O2)R
-AT(O1, O2)





 = At
{A, B}
{D}

 = Sub
{A, B, E}
{D, I}

 = Gr

{A, B, D, E}
{D, I, J}

MinCS(O1,O2)C

-

-

 \ {C, G}

{A, B, D} {A, B, D, E, I} {A, B, D, E, I, J}

GrDiff(O1,O2) spots two more affected concepts: D is specialised via witness
axiom D  r.s.(F  G), and J is generalised via r.t.H  J. Taking into
account MinCS(O1,O2)C , it is evident that the more we expand our entailment

grammar, the closer we get to the actual change set, while remaining decidable 
as long as the language generated by the grammar is finite. We already discussed
the computational upper bound above, and will comment on the performance of
our implementation in Section 5.

It is not hard to see that there are subset relations between each diff, and

the set MinCS(O1,O2) that they approximate, as per Lemma 1:

Lemma 1. Given two ontologies and a signature :

At-AT(O1,O2)

 Gr-AT(O1,O2)
 Gr-AT(O1,O2)

 Sub-AT(O1,O2)
Cvs-AT(O1,O2)

 MinCS(O1,O2)
 MinCS(O1,O2)
its current implementation only takes as input acyclic ELHr
As for CEX,
terminologies, that is, ELHr TBoxes which are 1) acyclic and 2) every concept
appears (alone) on the left-hand side of an axiom exactly once. In order to apply
CEX to knowledge bases that are more expressive than ELHr terminologies,
one must rely on approximation algorithms. An EL approximation does not
suffice, as there may exist cycles, GCIs, or more than one axiom with the same
left hand side. Therefore, as a means to apply CEX to expressive ontologies, we
use two ELHr approximations.
Definition 6. For an ontology O, we define the approximation function
ELHrApp1(O) that approximates O into ELHr as follows:
(a) Remove all axioms with a non-atomic left hand side and all non-EL axioms.
(b) If there is an equivalence axiom with an atomic left or right hand side X,
and a non-empty set of subsumptions  that have X on their left hand side,
remove all axioms in  .

(c) Break cycles by non-deterministically removing axioms in cycles until the

resulting ontology is cycle-free.

(d) Remove all but one axiom with a given atomic left-hand side.

The approximation function ELHrApp2(O) is the same as ELHrApp1(O) but

with Step (d) replaced with (d) as follows:

R.S. Gon calves, B. Parsia, and U. Sattler

(d) Replace the set of axioms with a common left hand side concept A, e.g.,
{A  C, A  D}, with a subsumption between A and the conjunction of all
concepts on the right hand side of all such axioms, e.g., A  C  D.

1, O

2, ), resulting in the change set: TempCS.

Based on these approximation algorithms, we can now use CEX as a sub-routine
in a diff function for non-ELHr ontologies.
Definition 7. Given two ontologies, a signature , and an ELHr approximation function ELHrAppi(O), the set of -differences CexiDiff(O1,O2) is:
1. For each j  {1, 2}, execute ELHrAppi(Oj), resulting in O
j.
2. Apply CEX to (O
3. For each   T empCS, add  to CexiDiff(O1,O2) if O1 |=  and O2 |= .
Given the loss of axioms during the input approximation step (via the ELHr
approximation functions), especially due to its non-deterministic nature, we may
well introduce spurious changes. Thus Step 3 in Definition 7 is designed to ensure
that changes detected within the ELHr approximations (obtained in Step 2) are
sound changes w.r.t. the whole (untouched) input ontologies. In other words,
to verify which detected changes are due to the approximation step. Obviously,
this approximation-based procedure throws away a lot of information and is not
deterministic. However, even such an approximation can offer useful insight, particularly if it finds changes that other methods do not. There are more elaborate
existing approximation approaches (e.g., [12]), but they generally do not produce ELHr terminology, so their use requires either changing the approximation
output or updating CEX to take non-terminological EL input.

5 Empirical Results

The object of our evaluation is a subset of the NCIt corpus used in [3], with
expressivity ranging from ALCH(D) to SH(D). More specifically, we take into
account 14 versions (out of 103 in the whole corpus) of the NCIt (from release
05.06f to 06.08d), and perform consecutive, pairwise comparisons between those
versions which contain concept-based change logs. These versions range from
70,000 to 85,000 logical axioms, and from 43,000 to 57,000 concept names.
In order to investigate the applicability of our approach we (1) compare the results obtained via our approximations with those output by Cex1Diff(O1,O2),
Cex2Diff(O1,O2) and CvsDiff(O1,O2), (2) compare the number of (purely)

directly and indirectly affected concepts, and, finally, (3) inspect whether the
devised approximations capture changes not reported in the NCIt change logs.
The experiment machine used is an Intel Xeon Quad-Core 3.20GHz with 16Gb
DDR3 RAM. The system runs Mac OS X 10.6.8, Java Virtual Machine (JVM
v1.5), and all tests were run using the OWL API (v3.2.4) [4].
?

?

?
Table 3. Number of concepts processed per minute by each diff function 

 = Cex1  = Cex2  = At  = Sub  = Cvs  = Gr

#Concepts/Min.

13,547

In terms of computation times, the average number of concepts processed
per minute by each diff function is shown in Table 3.3 The typical total
time ranges from seconds for AtDiff(O1,O2), to about 30 minutes for the
Cex1Diff(O1,O2), Cex2Diff(O1,O2), and Sub-AT(O1,O2) to hours for
GrDiff(O1,O2) and CvsDiff(O1,O2).
GrDiff(O1,O2) and CvsDiff(O1,O2) are rather computationally expensive;

the current implementation uses a naive generate-and-test approach, where, for
each concept, we generate candidate witnesses from the grammar until a witness is
found or we exhaust the set. There is clearly considerable scope for optimization.

5.1 Diff Comparison

The comparison of each diff w.r.t. the total number of affected concept names
found is presented in Table 4. Figure 1 shows a comparison of the number

within the randomly selected signatures. Due to computational issues regard-

of affected concept names found by Cvs-AT(O1,O2) and Gr-AT(O1,O2)
ing GrDiff(O1,O2) and CvsDiff(O1,O2), instead of comparing each pair of
NCIt versions w.r.t. u, we take a random sample of the terms in u (generally
n  1800) such that a straightforward extrapolation allows us to determine that
the true proportion of changed terms in u lies in the confidence interval (+-3%)
with a 99% confidence level.

In general, Gr-AT(O1,O2), even taking into account the confidence inter-

val, consistently detects more affected concepts (both L and R, i.e., specialised
and generalised, accordingly) than all other diffs. The CEX-based approximation

affected concepts than even a comparison of atomic subsumptions. The second

Cex1-AT(O1,O2) performs poorly across the board, consistently capturing less
CEX-based approximation Cex2-AT(O1,O2), however, typically detects more
affected terms than At-AT(O1,O2), apart from two cases (d6 and d10), but
still less than Sub-AT(O1,O2). Regardless of this result, it is not the case
that Sub-AT(O1,O2) is always better than Cex2-AT(O1,O2), as the latter actually detects more generalised concept names than Sub-AT(O1,O2)

in all but one case. The gathered evidence suggests that indeed combining
these approaches would perhaps result in a preferable semantic diff solution
than one or the other, as exhibited by the higher average coverage of 59% in

Un-AT(O1,O2) (although only an 8% increase w.r.t. to the average coverage
of Sub-AT(O1,O2)). As expected, Gr-AT(O1,O2) captures more specialised
3 Note that, originally, CvsDiff(O1,O2) only computes AT(O1, O2)L
, but in order to provide a direct comparison with the diffs here proposed we also compute
AT(O1,O2)R

 according to the Gcvs grammar.

R.S. Gon calves, B. Parsia, and U. Sattler

Table 4. Number of affected concept names, AT(Oi,Oi+1), found by each diff function (in addition to Un-AT := {Cex1-AT Cex2-AT Sub-AT}) w.r.t.  := u, and
their respective coverage w.r.t. Gr-AT(Oi,Oi+1). At this point, no distinction is made
between direct and indirect changes.

Comparison Cex1-AT Cex2-AT At-AT Sub-AT Un-AT Gr-AT
43,096
43,928
45,639
46,929
48,075
48,629
49,189
54,870
55,555
55,948
57,036

d1
d2
d3
d4
d5
d6
d7
d8
d9
d10
d11

2,131
1,816
6,528
45,932
15,691
6,203
6,330
7,428
5,329
6,415
4,325
55%
18%
100%

3,311
3,307
8,818
45,932
15,758
8,570
7,508
8,957
6,913
8,147
5,916
59%
21%
100%

Avg. Cov.
Min. Cov.
Max. Cov.

1,134

5,415
2,145
3,964
2,298
1,893
6,387
1,655
1,512
1,102
18%
3%
47%

1,922
1,746
6,287
6,198
7,656
3,718
3,393
7,397
4,460
3,681
3,026
23%
8%
49%

1,416
1,208
6,135
3,676
4,978
3,923
3,217
6,806
2,745
4,553
1,714
27%
5%
52%
?

?

?
Fig. 1. Comparison of number of specialised concepts found by Cvs-AT(O1,O2) and
Gr-AT(O1,O2) within the signature samples of the NCIt (y-axis: number of concept

names, x -axis: comparison identifier)

concepts than Cvs-AT(O1,O2) in all cases, evidenced in Figure 1.4 Both of

these diff approaches resolve all terms in the random signature as generalised.
4 Note that, since Gr-AT(O1, O2)R
the results of Gr-AT(O1,O2)L

 = Cvs-AT(O1, O2)R
, we only present in Figure 1
 and Cvs-AT(O1,O2)L
.
?

?

?
Thus the projected value implies that nearly, if not every term in the full signature has been generalised.

5.2 Splitting Direct and Indirect Changes

Having the results of each diff at hand, i.e., the set of affected concepts and,
for each of these, the set of witnesses, we can then tell apart those concept
names that are directly, indirectly, or both directly and indirectly affected.

Note that, as an optimisation within the implementation of GrDiff(O1,O2)
and CvsDiff(O1,O2) diff, we only compute one witness per concept. Thus we

do not possess the full set of witnesses, making the distinction of directly and
indirectly affected concepts possibly unsound and incomplete. As such, we apply

the total number of purely direct, purely indirect, and both directly and indi-

this distinction only to SubDiff(O1,O2) and AtDiff(O1,O2). Figure 2 shows
rectly affected concepts found within At-AT(O1,O2) and Sub-AT(O1,O2).
Note that the size of SubDiff(O1,O2) can be smaller than AtDiff(O1,O2),
smaller value (i.e. SubDiff(O1,O2)), and the value of AtDiff(O1,O2) becomes

as in versions v3 and v4. For these particular cases, we bring to the front the
?

?

?
 
 
 
 
 
 
?

?

?
Fig. 2. Comparison of purely directly (P.D.), purely indirectly (P.I.), and both di-

rectly and indirectly (denoted Mix) affected concepts found within At-AT(O1,O2)
(denoted At), and Sub-AT(O1,O2) (denoted Sub) in NCIt versions (y-axis: num-

ber of concept names, x -axis: comparison identifier)

R.S. Gon calves, B. Parsia, and U. Sattler

of AT(O1,O2)L

 and AT(O1,O2)R
.

the increment. Also, this figure presents the total number of changes; the union

In general, the number of purely directly changed concepts is much smaller
than the number of purely indirect or mixed. One case is particularly surprising:

Sub-AT(O1,O2) contains 43,326 purely indirect changes in v4, and only 1,122

purely direct ones. In an ontology engineering scenario, where one or more people
are required to analyse such change sets, having this mechanism for isolating
changes of most interest is conceivably a preferable means to analyse a change
set, in addition to providing a basis for producing more intelligible change logs
with impact analysis.

5.3 Analysis of the NCIt Change Logs

The change logs supplied with each version of the NCIt contain those concept
names which were subject to changes. However, it is unclear whether each reported change may also (or solely) relate to annotation changes. It could be
the case that a reported concept change is purely ineffectual as well. In spite of
this ambiguity, it should be expected that a change log contains at least those
concept names that are directly changed, and this is what we aim to find out in
our next experiment; we extract the concept names mentioned in the change log,
and verify whether the obtained direct changes for each NCIt comparison are
contained in said change logs. The results are shown in Table 5, comparing the

number of directly affected concept names found within At-AT(O1,O2) and
Sub-AT(O1,O2), and how many of those are not present n the NCIt change

logs. Overall, we determined that the change logs are missing a lot of direct
Table 5. Number of directly affected concepts 1) in AT(O1,O2)L
 (denoted L), 2)
in AT(O1,O2)R
 (denoted R), 3) in the union of those two sets (denoted Total),
and 4) that do not appear in the NCIt change logs (denoted Missed in Log), found
by AtDiff(O1,O2) and SubDiff(O1,O2) for  := u

NCIt
version

At-AT(O1,O2)

Sub-AT(O1,O2)

Total Missed in Log

Total Missed in Log

d1
d2
d3
d4
d5
d6
d7
d8
d9
d10
d11
?

?

?
2,321
2,991
1,624 1,187 2,683
1,555 1,009 2,465
1,130

1,190
1,637
6,075 1,421 6,389
1,481
1,766
3,579
3,321

1,043
?

?

?
Total 20421 7,333 25,351
?

?

?
5,546
?

?

?
8,436
?

?

?
1,060

1,298
1,147
2,791
3,090
2,725 1,198 2,814
8,038 1,186 9,142
1,485
1,306
2,720
2,935
6,411 1,465 6,693
2,607
2,782
5,217
4,964
1,404
1,643
?

?

?
34,933 7,897 38,159
?

?

?
5,723
?

?

?
9,993
?

?

?
changes. More specifically, on average, At-AT(O1,O2) contains 767 directly affected concept names not mentioned in the change logs, while Sub-AT(O1,O2)
Subsequently we verify whether the affected concepts in Cex1-AT(O1,O2),
Cex2-AT(O1,O2), At-AT(O1,O2) and Sub-AT(O1,O2) are contained in

uncovers 908 such concept names per NCIt comparison.

the NCIt change logs. This is presented in Table 6. Overall we see that none
of the diffs captures the exact number of reported concept changes in the logs.
The maximum coverage of the change log occurs in comparisons d4 and d5, where

Sub-AT(O1,O2) captures 96% and 91% of the concept names mentioned in the
based approximations and Sub-AT(O1,O2), the average coverage of the change

logs, accordingly. By taking the union of affected concepts found by the CEX-

logs increases to 73%.

Table 6. Number of affected concept names, AT(Oi,Oi+1), found by each diff function (in addition to Un-AT := {Cex1-AT Cex2-AT Sub-AT}) w.r.t.  := u within
the NCIt change logs

NCIt Change

Version

Log
d1
2,159
d2
1,399
d3
4,234
d4
8,447
d5
3,847
d6
2,470
d7
5,302
d8
2,556
d9
3,945
d10
6,046
d11
2,065
Avg. Coverage

Cex1-AT Cex2-AT At-AT Sub-AT Un-AT
?

?

?
2,497
1,327
1,595

1,217

1,060
?

?

?
27%
?

?

?
2,973
1,598
2,655
1,147
1,253

2,205
3,824

43%
?

?

?
3,102
2,734
2,602
1,141
1,982

1,878
3,551

46%
?

?

?
3,148
8,117
3,503
1,312
2,668

2,530
4,076
1,091
67%

1,013
3,150
8,117
3,504
1,406
2,699
1,003
2,755
6,046
1,168
73%

6 Discussion
First thing to notice is that Sub-AT(O1,O2) finds more affected concepts than
At-AT(O1,O2), Cex1-AT(O1,O2), and Cex2-AT(O1,O2), while often not
reaching close to the projected values of Gr-AT(O1,O2) (the average coverage
signatures than Cvs-AT(O1,O2), while the number of generalised concepts is
Considering the high number of affected concepts in Sub-AT(O1,O2) on

being 55%). The latter captures more specialised concepts within the selected

the same for both diffs (i.e., the full signature).

comparisons d4 and d5 of the NCIt, one can argue that analysing such a change
set would be difficult. By categorising concept names in the change set according
to whether they are directly or indirectly affected, we get a succinct representation of a change set, thus significantly reducing information overload. Note that,

R.S. Gon calves, B. Parsia, and U. Sattler

e.g., in d4 there are 45,825 specialised concepts, out of which there are only
78 purely directly specialised concepts, and the majority of the remainder are
purely indirectly specialised concepts (43,100). Similarly in d5, from 15,254 specialised concepts there are only 1,527 purely direct specialisations. Immediately
we see that this mechanism can provide an especially helpful means to 1) assist
change analysis, by, e.g., confining the changes shown upfront to only (purely)
direct ones, and 2) generate more informative concept-based change logs.

7 Conclusions

We have formulated the problem of finding the set of affected terms between
ontologies via model inseparability, and presented feasible approximations to
finding this set. We have shown that each of the approximations can find considerably more changes than those visible in a comparison of concept hierarchies.
Both sound approximations devised capture more changes than the CEX-based
approximations. The restrictions imposed by CEX on the input ontologies make
change-preserving approximations a challenge, as we have seen in our attempt
to reduce the NCIt to EL in a less naive way.

The proposed distinction between (purely) direct and indirect changes allows
users to focus on those changes which are specific to a given concept, in addition
to masking possibly uninteresting changes to any and all concept names (such as
those obtained via witnesses constructed with negation and disjunction), thereby
making change analysis more straightforward. As demonstrated by the NCIt
change log analysis, we have found a (often high) number of direct changes
that are not contained in the NCIt change logs, which leads us to believe the
recording of changes does not seem to follow from even a basic concept hierarchy
comparison, but rather a seemingly ad hoc mechanism.

In future work we aim to optimise the devised approximations so as to compare
all NCIt versions w.r.t. their signature union, and combine the information from
this concept oriented diff with our axiom oriented one.
