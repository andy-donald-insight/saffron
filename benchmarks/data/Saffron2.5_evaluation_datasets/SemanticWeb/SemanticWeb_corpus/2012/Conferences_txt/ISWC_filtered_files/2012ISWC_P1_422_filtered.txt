Hitting the Sweetspot:

Economic Rewriting of Knowledge Bases

Nadeschda Nikitina1 and Birte Glimm2

1 Karlsruhe Institute of Technology, Institute AIFB, DE
2 University of Ulm, Institute of Artificial Intelligence, DE

Abstract. Three conflicting requirements arise in the context of knowledge base
(KB) extraction: the size of the extracted KB, the size of the corresponding signature and the syntactic similarity of the extracted KB with the original one.
Minimal module extraction and uniform interpolation assign an absolute priority
to one of these requirements, thereby limiting the possibilities to influence the
other two. We propose a novel technique for EL that does not require such an extreme prioritization. We propose a tractable rewriting approach and empirically
compare the technique with existing approaches with encouraging results.

1 Introduction

In view of the practical deployment of the W3C-specified OWL Web Ontology Language [9] and its specific tractable sublanguages (the so-called profiles [5]), non-stan-
dard reasoning services supporting different ontology engineering tasks for lightweight
logics have gained in importance. Amongst others, the task of semantics-preserving
knowledge base extraction for a particular subset of terms has been investigated by the
research community: given a knowledge base using a certain vocabulary (called a sig-
nature), and a subset of relevant terms of that vocabulary, find a knowledge base that
contains as little irrelevant information as possible, and, at the same time, contains all
information about the relevant terms.

Among the applications of knowledge base extraction is ontology reuse, which helps
reducing the expenses of knowledge intensive applications by exploiting the variety of
the existing large ontologies. Since the size of a knowledge base has a crucial impact
on the maintenance costs and often on the performance of reasoning, it is important
to keep the corresponding knowledge base as compact as possible. Knowledge base
extraction ideally reduces the amount of irrelevant information imported from external
sources, and, at the same time, preserves all relevant consequences. Another application
is supporting knowledge engineers in modeling a particular domain or in understanding
existing models by revealing dependencies between particular concepts and roles, as,
for instance, in the case of interactive ontology revision [8]. Due to its usefulness in
various contexts, the task of knowledge base extraction has been investigated by different authors. The currently existing semantics-preserving approaches can be divided into
those that compute a subset of the original ontology entailing all relevant consequences
(module extraction), e.g., [3,1], and those rewriting the original ontology to contain
only relevant terms while preserving all relevant consequences (uniform interpolation),

P. Cudr e-Mauroux et al. (Eds.): ISWC 2012, Part I, LNCS 7649, pp. 394409, 2012.
c Springer-Verlag Berlin Heidelberg 2012
?

?

?
e.g., [2,4,7]. The complexity results for approaches computing a minimal solution are
not very promising: even for the lightweight logic EL, the task of minimal module
extraction is EXPTIME-hard and the task of uniform interpolation is even 3-EXPTIME-
hard with a tight triple-exponential bound on the size of uniform interpolants in case a
finite result exists [7]. Given that most applications of knowledge base extraction are of
particular interest for large ontologies and that there are scenarios, in which long computation times are not feasible due to user interaction, tractable approaches computing
a small but not necessarily minimal solution would often be a reasonable alternative.
Moreover, both types of approaches are based on a specific prioritization of objectives
that might be necessary in particular scenarios, but is disadvantageous in many others
due to its negative impact on the size of the extracted knowledge bases.

In this paper, we consider three conflicting objectives for knowledge base extraction:
reducing the size of the extracted knowledge base, reducing the size of its signature
and preserving the syntactic similarity of the extracted knowledge base with the originally given one. We demonstrate that, both, minimal module extraction and uniform
interpolation, assign an absolute priority to one of these objectives, thereby limiting
the possibilities to achieve an improvement w.r.t. the other two. While minimal module extraction only considers subsets of the original knowledge base, thereby requiring
a very strong notion of syntactic similarity, uniform interpolation fixes the signature
of the extracted knowledge base, possibly yielding triple-exponentially many doubleexponentially large axioms. To address scenarios, where the above uncompromising
prioritization is not required, we investigate alternative prioritization, allowing for a
more balanced relationship between the extents to which the objectives are achieved.
We consider the task of knowledge base extraction for the lightweight logic EL
based on two alternative, less restrictive notions of structural similarity, further assigning the second-highest priority to the knowledge base size. First, we discuss the extraction of knowledge bases consisting only of sub-expressions occurring in the original
knowledge base. We give a polynomially-bounded rewriting making particular simple
consequences within the knowledge base explicit, such that minimal modules meeting
this similarity requirement can be obtained in EXPTIME by applying minimal module
extraction to the extended knowledge base.

Second, we consider the extraction of knowledge bases that consist of concepts structurally equivalent to sub-expressions occurring in the original knowledge base, i.e., concepts with the same structure but possibly a different set of atomic concepts. While the
extraction of such minimal knowledge bases by first extending the knowledge base and
then applying minimal module extraction requires in the worst-case double-exponential
time, we propose a tractable rewriting approach that aims at obtaining small but not
necessarily minimal knowledge bases. The approach is based on the same elementary
rewriting operation as uniform interpolation in [7], namely replacing atomic concepts
within expressions by their subsumees and subsumers. However, in order to obtain polynomial bounds and preserve the required structural similarity, we impose additional restrictions on the rewriting, excluding elementary rewriting operations with a negative
effect on the module size or structure.

As we show in our evaluation using the Gene Ontology, knowledge bases obtained
by our approach on average contain half as many axioms as their minimal justifications

N. Nikitina and B. Glimm

within the original knowledge base. A comparison with the existing implementations
also yields promising results. In case of the minimal module extractor for DL-Litebool,
the extracted modules are 2 to 2.2 times larger than the knowledge bases obtained by
our approach. The locality-based module extractor, which is a tractable approach for
extracting small but not necessarily minimal subsets of an ontology, extracts modules
that are on average 12 times larger than the knowledge bases obtained by our approach.
The paper is organized as follows: In Section 2, we recall the necessary preliminaries on EL. Section 3 formally introduces the task of knowledge base extraction and
discusses the conflicting objectives for this task. In Section 4, we show how minimal
modules meeting the corresponding requirements of syntactic similarity can be obtained
using minimal module extraction. In Sections 5 and 6, we propose a tractable alternative for minimal module extraction based on rewriting. After introducing rewriting in
Section 5, in Section 6 we discuss the necessary restrictions on rewriting operations in
order to obtain polynomial bounds and preserve the required structural similarity. Fi-
nally, we present the evaluation results in Section 7 before we conclude in Section 8.
Further details and proofs can be found in the extended version of this paper [6].

2 Preliminaries

Let NC and NR be countably infinite and mutually disjoint sets of concept symbols
and role symbols. An EL concept C is defined as C ::= A||C  C|r.C, where A
and r range over NC and NR, respectively. In the following, we use symbols A, B
to denote atomic concepts and C, D to denote arbitrary concepts. A terminology or
TBox consists of concept inclusion axioms C  D and concept equivalence axioms
C  D used as a shorthand for C  D and D  C. While knowledge bases in
general can also include a specification of individuals with the corresponding concept
and role assertions (ABox), in this paper we abstract from ABoxes and concentrate
on TBoxes. The signature of an EL concept C or an axiom , denoted by sig(C) or
sig(), respectively, is the set of concept and role symbols occurring in it. To distinguish
between the set of concept symbols and the set of role symbols, we use sigC (C) and
sigR(C), respectively. The signature of a TBox T , in symbols sig(T ) (correspondingly,
sigC (T ) and sigR(T )), is defined analogously. Next, we recall the semantics of the
above introduced DL constructs, which is defined by the means of interpretations. An
interpretation I is given by the domain 

assigning each concept
A  NC a subset A

. The
interpretation of  is fixed to 
. The interpretation of an arbitrary EL concept is

and (r.C)
, y 
defined inductively, i.e., (C  D)
?

?

?
= C
I}. An interpretation I satisfies an axiom C  D if C
. I is a model of
I  D

a TBox, if it satisfies all of its axioms. We say that a TBox T entails an axiom  (in
symbols, T |= ), if  is satisfied by all models of T .

I  

= {x | (x, y)  r

and each role r  NR a subset r

and a function I

I  D

of 

of 

3 Knowledge Base Extraction Revisited

While, in principle, there exist many approaches without a logical background, in this
work we focus on logic-based approaches, i.e., approaches that guarantee a preservation
?

?

?
of the semantics for the set of relevant entities. We say that the semantics is preserved, if
all logical consequences concerning only the relevant entities are preserved. The logical
foundation for such a preservation of relevant consequences is given by the established
notion of inseparability. Two knowledge bases, T1 and T2, are inseparable w.r.t. a signature  if they have the same -consequences, i.e., consequences whose signature is
a subset of . Depending on the particular application requirements, the expressivity
of those -consequences can vary from subsumption queries and instance queries to
conjunctive queries. In the following, we consider concept inseparability of general EL
terminologies defined analogously to previous work [3,2,4,7], as follows:
Definition 1. Let T1 and T2 be two general EL knowledge bases and  a signature. T1
and T2 are concept-inseparable w.r.t. , in symbols T1 c
T2, if for all EL concepts
C, D with sig(C)  sig(D)   holds T1 |= C  D, iff T2 |= C  D.
Given a signature  and a knowledge base T , the task of knowledge base extraction
in general is to compute a knowledge base T 
, which is entailed by T and is conceptinseparable from it. We call the result T 
Definition 2. Let T be an EL knowledge base and  a signature. An EL knowledge
T 
base T 
and (2) T |= T 
The above definition is very generic. It captures the preservation of the semantics, but
does not address the quality criteria important for general modules in order to be useful
in practice. We consider the following requirements for the task of knowledge base
extraction:

is a general module of T w.r.t. , written T   MOD(T , ), iff (1) T c





a general module of T .

.

1. Syntactic Similarity: In scenarios, where the knowledge base is meant to be used
by human experts, the syntactic structure of the module determining its comprehensiveness or cognitive complexity has to be taken into account. The extent, to which
a general module has to be syntactically similar to the original knowledge base T
depends on the particular application requirements. For instance, modules can be
required to be a subset of T, to consist only of sub-expressions occurring in T or to
consist only of concepts structurally equivalent to sub-expressions occurring in T ,
but possibly referencing different atomic concepts.

2. Small Knowledge Base Size: Reducing the size of the knowledge base is a core
objective for the task of knowledge base extraction, since smaller knowledge bases
(assuming that the particular syntactic similarity requirement is fulfilled in both
cases) require less computational and manual effort in many different ontology
management activities.

3. Small Signature Size: Decreasing the size of the signature results in a decrease of
irrelevant entities occurring in the knowledge base, which is also one of the core
objectives of knowledge base extraction.

While uniform interpolation clearly prioritizes small signature size making no compromises w.r.t. the other two requirements, minimal module extraction gives the highest
priority to syntactic similarity, thereby not allowing for rewriting and, therefore, limiting the possibilities to reduce the size. While such uncompromising prioritization can

N. Nikitina and B. Glimm

1  i  14, i = 13

A13  A9 A10  A13  A16 A9  r.A9 Ai+1  Ai

be required in some particular scenarios, in other scenarios it leads to a disadvantage.
The following example demonstrates the drawbacks of minimal module extraction and
uniform interpolation in terms of knowledge base size caused by the extreme choice of
priorities.
Example 1. Consider the following knowledge base T :1
For the signature  = {A1, A8, A12, A15, A16, r}, neither the uniform interpolation
nor minimal module extraction are effective in terms of reducing the size. While minimal module extraction would return the whole knowledge base, uniform interpolation fails to extract a finite knowledge base due to the cyclic dependency given by
A9  r.A9. However, if we are not restricted to subsets of T , but are also interested in modules consisting of sub-expressions occurring in T , then there is a representation of the relevant information about , which uses half as many axioms as
the original TBox: {A12  A10, A15  A13, A10  A13  A16, A10  A9,
A13  A9, A9  r.A9, A9  A8, A8  A1}. If we are, additionally, allowed to
exchange atomic concepts within sub-expressions while leaving the structure of expressions unchanged, then there is an even smaller representation consisting of 6 axioms:
{A12  A15  A16, A12  A9, A15  A9, A8  A1, A9  A8, A9  r.A9}.
In the following, we aim at establishing a balance between these requirements in order to account for scenarios not requiring the above mentioned extreme prioritization.
The following example completes the picture roughly sketched above and demonstrates
mutual influences of the three requirements upon each other.
Example 2. The following TBox T models a counter with numbers X0, . . . , X10,
where the lowest number X0 has two subsumees:

A1  X0 A2  X0 r.Xi  s.Xi  Xi+1

0  i  9

Given this TBox, we could extract a knowledge base not referencing a particular atomic
concept by replacing its occurrence by its direct subsumees. For instance, if we want
to represent the information without using X1, we can omit r.X0  s.X0  X1 and
replace X1 on the left-hand side of the remaining axioms by its direct subsumee r.X0
s.X0, leading to r.(r.X0  s.X0)  s.(r.X0  s.X0)  X2. Concerning the
extraction of knowledge bases from T , we can more generally observe the following:
 Assume that we are interested in the dependencies between X0, and X10 including
those using roles r, s. By replacing any of the concepts X1, ..., X9 by their direct
subsumees, we reduce both, the number of axioms and the number of referenced
concept names, but we increase the nesting depth of the resulting TBox. A complete
replacement of X1, ..., X9 would yield a subsumee of X10 with a nesting depth of
10 and exponentially many occurrences of X0. Even though the TBox contains
only three axioms and no irrelevant concept names, it is less comprehensive than
the original knowledge base.

1 The TBox is structurally similar to minimal modules obtained within our evaluation and can
be extended to a more typical TBox by adding more axioms to the subsumption hierarchy
without any effect on the obtained general modules.
?

?

?
 Assume that we are interested in A1, A2 instead of X0. Eliminating X0 from T
would yield four different subsumees of X1, namely r.A1s.A1, r.A1s.A2,
r.A2  s.A1 and r.A2  s.A2. Each of these subsumees is required in order
to preserve the relevant consequences, since none of the four concepts subsumes
another. Replacing X0 in the extracted knowledge base using only A1, A2, X0, X10
and r, s by its two subsumees, A1 and A2, would result in double exponentially
many (2210
) different subsumees of X10. Therefore, the elimination of a single
concept name is, in most cases, not justified from the practical point of view.

While Example 1 focuses on the disadvantage in terms of knowledge base size caused
by an unnecessarily strong notion of syntactic similarity, the latter example demonstrates more clearly the effect of unrestricted rewriting aiming at signature reduction
on the knowledge base size. In the following, we consider two particular, more balanced requirement prioritizations. Analogously to minimal module extraction, we aim
at preserving syntactic similarity of the extracted knowledge base, however based on
the following, less restrictive similarity notions:

1. Identical Sub-Expressions:2 Modules fulfill this notion of similarity, if they con-

sist only of sub-expressions occurring in the original knowledge base.

2. Structurally Equivalent Sub-Expressions: Modules fulfill this notion of sim-
ilarity, if for all of their sub-expressions there is a structurally equivalent subexpression occurring in the original knowledge base, i.e. an expression with the
same syntactic structure, but possibly different atomic concepts. For instance, A 
r.A is structurally equivalent to B1  r.B2.

In the next sections, we investigate the task of knowledge base extraction based on
these two notions of syntactic similarity with the second-highest priority given to the
knowledge base size. We first show how we can extend the original knowledge base to
contain all minimal general modules such that minimal module extraction can identify
one of them. Subsequently, we add the computational complexity as a forth dimension.
We investigate how we can obtain a tractable alternative to minimal module extraction
by sacrificing the minimality guarantee, while fulfilling the requirement of syntactic
similarity and reaching a decent effectiveness in terms of module size. In our evaluation,
we show that, on average, the approach outperforms minimal module extraction applied
directly to the original knowledge base.

4 Computing Modules Using Minimal Module Extraction
In this section, we show how, by normalizing the original knowledge base T and extending it with a subset of its deductive closure, we can obtain a union of all general
modules fulfilling the syntactic similarity notions of identical sub-terms and structurally
equivalent sub-terms. Applying minimal module extraction to this extended knowledge
base would yield all minimal general modules, which can subsequently be ordered according to the signature size.

2 Conjunctions containing a subset of conjuncts are not considered as sub-expressions.

N. Nikitina and B. Glimm

In order to obtain a union of all minimal general modules under the restriction to
identical sub-terms, we need to identify all subsumptions between sub-terms occurring
in T . We can structurally transform the knowledge base as follows: we assign a temporary concept name to each non-atomic sub-term occurring in T , such that the knowledge
base can be represented without nested expressions, i.e., using only axioms of the form
A  B, A  B1  . . .  Bn, and A  r.B, where A and B(i) are atomic concepts or
. This can be realized in time linear in the size of T by recursively replacing complex
concepts C(i) in expressions C1  ...  Cn and r.C by fresh concept symbols with the
corresponding equivalence axioms. Note that the original form of the knowledge base
can easily be obtained by replacing the temporary concept names by their definitions.
By classifying the obtained knowledge base and extending it with the classification results, all subsumptions between sub-terms occurring in T are explicitly present
, which we call normalized T . Thus, we obtain a
in the resulting knowledge base T 
polynomially-bounded, complete union of all possible general modules consisting of
sub-terms occurring in T by replacing the temporary concept names by their defini-
tions. Applying minimal module extraction to this knowledge base yields minimal general modules fulfilling the corresponding syntactic similarity requirement. In this way,
we obtain a linear bound on the size of the general modules and, as demonstrated by
Example 1, in most cases outperform minimal module extraction applied to the original
knowledge base w.r.t. both, size of the signature and size of the general module.
If, in addition to identical sub-terms from T , we can also use structurally equivalent sub-terms, we can introduce temporary concept names for all structurally equivalent sub-terms and then apply classification to obtain the corresponding dependencies.
However, extending the knowledge base with all dependencies of the corresponding
form and then applying minimal module extraction would lead to an increase of the
overall complexity from exponential to double-exponential.

5 Computing Modules Using Rewriting

In the following, we propose a tractable approach to extracting general modules consisting of concepts structurally equivalent to sub-expressions of the original knowledge
base. The approach is based on rewriting as it is used for uniform interpolation [7] and
the aim of this section is to show how general modules are obtained using this rewriting.
In order to simplify the tracking of subsumption dependencies during the rewriting,
we use the normalization introduced in the last section. Given a normalized EL knowledge base, the elimination of roles can be done by omitting all axioms with subsumees
and subsumers containing irrelevant roles without loosing any relevant consequences.
In the following, we focus, therefore, on the elimination of irrelevant concept names
and assume w.l.o.g. that the sets of subsumees and subsumers do not contain any roles
not from .

During the rewriting, we keep two relations that map each atomic concept in a TBox
to a set of concepts. These relations initially contain, for each atomic concept, the subsumees and subsumers as given by the normalized TBox. Each rewriting step then refines these relations in such a way that the union of all corresponding subsumption
axioms is still a general module.
?

?

?
Definition 3. Let T be a normalized EL knowledge base and R

 relations that
map each atomic concept B  sigC (T ) to a set of subsumees and a set of subsumers of
B entailed by T . Any pair R
 is called a subsumee/subsumer relation pair for

T and it is called the initial subsumee/subsumer relation pair for T if R

 are
as follows:

 and R

, R

, R

(B) = {C | C  B  T or C  B  T },

(B) = {C | B  C  T or B  C  T }.

1. R
2. R
If T is clear from the context, we simply write R, R. Starting with the initial
subsumee/subsumer relation, our rewriting aims at obtaining another pair of relations
that allows for constructing a uniform interpolant as follows:
Definition 4. Let R, R be a subsumee/subsumer relation pair and  a signature.
We denote by ext(R, R) the extension of  with atomic concepts occurring in the
range of R and R. We construct a knowledge base M(R, R, ) from R, R
and  as:
M(R, R, ) = {C  A | A  ext(R, R), C  R(A)} 
{A  D | A  ext(R, R), D  R(A)} 
{C  D | there is A / ext(R, R), C  R(A), D  R(A)},

If M(R, R, )  MOD(T , ), we say that R, R is complete w.r.t. .
The above definition avoids an unnecessary extension of the knowledge base signature with atomic concepts in case A / ext(R, R). Note that even in the initial
subsumee/subsumer relation pair this case can occur, namely when concepts not from
 do not have atomic subsumers or subsumees. We can show that the initial subsu-
mee/subsumer relation pair meets the completeness criterion:
Theorem 1. Let T be a normalized EL knowledge base,   sig(T ) a signature,
and R, R the initial subsumee/subsumer relation pair for T , then R, R is
complete w.r.t. .

Before defining the rewriting step that refines the initial subsumee/subsumer relation
pair into another subsumee/subsumer relation pair preserving completeness, we show
the initial subsumee/subsumer relation pair R, R and the according general module TM = M(R, R, ext(R, R)) for the knowledge base T from Example 1.
We first normalize T by introducing two temporary concepts, B1  A10  A13 and
B2  r.A9, then we classify the normalized knowledge base and obtain the initial
subsumee/subsumer relation pair shown in Fig. 1.
The knowledge base TM contains, for each Ai with i  {1, . . . , 16}, all axioms of
the form C  Ai with C  R(Ai) and Ai  C with C  R(Ai). This also holds
for B1 and B2. It is not difficult to check that, after replacing B1 by A10  A13 and
B2 by r.A9 in TM, each axiom of {A12  A10, A15  A13, A10  A13  A16,
A10  A9, A13  A9, A9  r.A9, A9  A8, A8  A1} is contained in it.
Thus, the result contains, among other axioms, the general module given in Section 3
consisting of sub-expressions of T , which shows completeness of R, R.

N. Nikitina and B. Glimm

R
A16 B1
A15 
A14 A15
A13 B1, A14, A15
A12 
A11 A12
A10 B1, A11, A12, A15
A9 B1, A10, . . . , A15
A8 B1, A9, . . . , A15
A7 B1, A8, . . . , A15
A6 B1, A7, . . . , A15
A5 B1, A6, . . . , A15
A4 B1, A5, . . . , A15
A3 B1, A4, . . . , A15
A2 B1, A3, . . . , A15
A1 B1, A2, . . . , A15
B2 r.A9, A9, . . . , A15, B1 r.A9
B1 A10  A13

R

A1, . . . , A9, B2, A13, A14
A1, . . . , A9, B2, A13
A1, . . . , A9, B2
A1, . . . , A11, B2,
A1, . . . , A10, B2
A1, . . . , A9, B2
A1, . . . , A8, B2
A1, . . . , A7
A1, . . . , A6
A1, . . . , A5
A1, . . . , A4
A1, . . . , A3
A1, A2
A1

A10  A13, A1, . . . , A10, A13, B2, A16

Fig. 1. The initial subsumee/subsumer relation pair R, R for Example 1

Since rewritings aiming at eliminating all irrelevant concept names yield smaller
modules for sparse relation pairs, we will only use a subset of the subsumee/subsumer
relations used as input for minimal module extraction. We compute a reduced sub-
sumee/subsumer relation pair that only uses the transitive reduction of the classification
results, i.e., we consider B1  B2 only if there is no B3 such that B1  B3 and
B3  B2. Furthermore, we compute, in polynomial time, a reduced graph by recursively eliminating subsumers and subsumees not from  that do not have any outgoing
edges. It is easy to check that the completeness of the initial subsumee/subsumer relation pair stated in Theorem 1 still holds. In the next section, we assume this reduced
form of initial subsumee/subsumer relation pair R, R.

As demonstrated in Example 2, within the task of uniform interpolation, a single
rewriting step replaces occurrences of an atomic concept in all subsumees and subsumers within a relation pair by its subsumees and subsumers, respectively. Since, in
general, an atomic concept can have infinitely many subsumees and subsumers, using
the whole set of subsumees and subsumers for rewriting is not feasible in practice. In-
terestingly, if the initial relation pair is complete, then a small subset of all subsumees
and subsumers of the replaced concept is sufficient to preserve the completeness of
the relation pair (in general, however, the sets of direct subsumees and subsumers are
not sufficient). Among other things, the relevant subset does not need to include subsumees that can be obtained from other subsumees by adding arbitrary conjuncts to
arbitrary sub-expressions. For instance, if B is a subsumee of A, then we do not need
B  B
for the replacement of A. Similarly, the minimal subset of subsumers required
for replacement does not include concepts that can be obtained from other subsumers
by omitting arbitrary conjuncts from arbitrary sub-expressions. While, in case of sub-
sumees, a conjunction is not required if at least one of the conjuncts is a subsumee, in
?

?

?
case of subsumers, we need to introduce a conjunction in particular when replacing an
atomic concept within the scope of an existential restriction. Using the standard substitution notation C[A/B] for denoting the concept obtained by replacing all occurrences
of B within C by A, we give the following definition of an elementary rewriting.
Definition 5. Let T be a normalized EL knowledge base,   sig(T ) a signature,
and R, R a subsumee/subsumer relation pair for T . For atomic concepts A, B 
sigC (T ) and  {,}, an elementary rewriting RewR(B, C, A) of a subsumee/sub-
sumer C  R(B) w.r.t. A is given by
) | A
1. RewR(B, C, A) = {(B, C

{(B, C
) | D

) | A
{(B, C
?

?

?
where (a) is used when A is within the scope of an existential restriction and (b) is used
otherwise. Let SA = {(B, C) | C  R(B) and A occurs in C}. A rewriting w.r.t. A
is given by RewR (A) =

/A]}.

= C[A

DR(A) D, C
= C[D
/A]},

= C[A

  R(A), C

=
  R(A), C

RewR(B, C, A)  R \ SA.

2. RewR(B, C, A) =
?

?

?
/A]},

(a)

(b)

(B,C)SA
?

?

?
In order to keep the relations as small as possible, we further remove trivial subsumees
and subsumers obtained during the rewriting, namely atomic concepts themselves and,
in case of subsumee relations, conjunctions with the atomic concept itself as one of
the conjuncts. This check is inexpensive from the computational point of view, since
such trivial subsumees and subsumers can be identified independently from other subsumees and subsumers. In what follows, we assume that such trivial subsumees and
subsumers are removed after each rewriting. We obtain the following result concerning
the completeness w.r.t. :
Theorem 2. Let T be a normalized EL knowledge base,   sig(T ) a signature,
R, R a subsumee/subsumer relation pair for T that is complete w.r.t. . Then, for
) are subsumee/subsumer
any B
relation pairs for T, which are complete w.r.t. .
Thus, starting with the initial subsumee/subsumer relation pair R, R, after each
rewriting step we obtain a subsumee/subsumer relation pair over T that is complete
w.r.t. . However, without further restrictions, the above rewritings would potentially
introduce many large nested concept expressions or might not even terminate. In the
next section, we show how these problems can be avoided by stating the corresponding
validity criteria for rewritings on subsumee/subsumer relation pairs.

), R and R, RewR(B

/  holds RewR(B
?

?

?
6 Restricting Rewriting

In this section, we address the problems caused by unrestricted application of rewriting pointed out in Example 2. On the one hand, the example shows that rewriting can
significantly change the syntactic structure of a knowledge base. On the other hand, it
demonstrates that, while in some cases an elimination of a particular concept name can
lead to a smaller knowledge base, it can cause the knowledge base to grow by several
factors or even get infinite in other cases.

N. Nikitina and B. Glimm

A12

A11

A10

A16

B1



A9

A8
...

A1

A12

A11

A10

A15

A14

A13
r
B2

A15

A14

A13
r
B2

A16

B1



A9

A8
...

A1

(a) Initial R (left) and R (right)

A12

A10

A16

B1



A9

A8

A12

A10

A15

A13
r
B2

A16

B1



A9

A8

A15

A13
r
B2

A1

A1

(b) Rewriting w.r.t. A2  A7, A11, A14

Fig. 2. Hypergraphs for the knowledge base in Example 1

In order to avoid the above negative effects of rewriting, after each rewriting step we
identify and exclude invalid rewritings, i.e., rewritings having a negative impact on the
structure of the resulting module or the size of the relation pair. In particular, we exclude rewritings replacing atomic concepts by the conjunction of their direct subsumers
corresponding to case (a) in Definition 5, since such a replacement possibly introduces
concept expressions with a new structure not occurring in the original knowledge base.
Thus, the set of valid rewritings is restricted to replacements of atomic concepts by
their direct subsumees and subsumers. For the same reason, we additionally exclude
rewritings yielding nested concept expressions, i.e., replacements of an atomic concept
within a conjunction or existential restriction by one of its non-atomic subsumees or
subsumers. Since the initial subsumee/subsumer relation pair contains only concepts of
the form B,r.B and B1  ...  Bn, after each valid rewriting step, all subsumees and
subsumers have also this simple form. In this way, subsumee/subsumer relations can
be represented as hypergraphs with atomic concepts as nodes and three types of edges,
namely A  B representing atomic subsumees/subsumers, A r B representing ex-
 B1, ..., Bn representing conjunctions. The
istential restrictions, and multi-edges A
corresponding hypergraphs for the initial subsumee/subsumer relation pair R, R
for the knowledge base in Example 1 are shown in Fig. 2(a).

In the following, we give a set of excluding conditions for rewritings according to the
requirement of syntactic similarity and an inequation excluding rewritings negatively
affecting knowledge base size. Within the excluding conditions, we distinguish three
types of successors and predecessors according to the types of edges. For an atomic
concept A and a relation R with  {,}, we use

INA(A) := {B  sigC(T ) | A  R(B)}
OUTA(A) := R(A)  sigC (T )
INRoles(A) := {B | r.A  R(B)}
OUTRoles(A) := {B | r.B  R(A)}
INCon(A) := {B | B
OUTCon(A) := {B
?

?

?
 ...  B

| B
n
?

?

?
 ...  B
?

?

?
n

 R(B) with A = B
i for some i  {1, ..., n}}

 . . .  B
 R(A)}
?

?

?
n
?

?

?
Further, let IN(A) = INA(A)  INRoles(A)  INCon(A) and OUT(A) = OUTA(A) 
OUTRoles(A)  OUTCon(A).

In order to avoid an introduction of structurally new concept expressions during the
rewriting and ensure termination, we exclude a rewriting w.r.t. an atomic concept A if
one of the following conditions is true:

(INRoles(A)  INCon(A) = ) and OUTA(A) contains temporary concepts;
(INRoles(A)  INCon(A) = ) and (OUTRoles(A)  OUTCon(A) = );
R is a subsumer relation and |INRoles(A)|  1 and |OUT(A)|  2;
Some C  R(A) contains A;

(1)
(2)
(3)
(4)

For instance, in Example 1 the rewriting w.r.t. A9 in R is invalid due to Condition (3)
and rewriting w.r.t. A10, A13 in R are invalid due to Condition (2).

In order to identify rewritings that would increase the size of a relation, we compare
the number of edges before and after the rewriting. While the number of edges potentially affected by a rewriting w.r.t. a concept A can be given by |IN(A)| + |OUT(A)|,
the corresponding number of affected edges after the rewriting is in general bounded
by |OUT(A)| + |IN(A)|  |OUT(A)|. Interestingly, if a concept B is unreferenced, it is
usually possible to remove some elements from the corresponding sets R(B) and
R(B) without losing any  consequences, or even without losing any axioms in
M(R, R, ext(R, R)). We can remove subsumees and subsumers of unreferenced
concepts, if none of the corresponding axioms in M(R, R, ext(R, R)) that contain these subsumees and subsumers, add any new  consequences to M(R, R,
ext(R, R)). Thus, in order to determine if a subsumee C  R(B) of B   is
unnecessary, we check for each element D  R(B), if M(R, R, ext(R, R)) \
{C  D} |= C  D. Unnecessary subsumers can be determined in the same manner.
For instance, in case of A2 in Example 1, after the corresponding rewriting of both relations we can remove its subsumee A3 and subsumer A1, if M(R, R, ext(R, R))\
{A1  A3} |= A1  A3. It is easy to check given the corresponding hypergraphs that
this is indeed the case. In fact, the corresponding sets of necessary subsumees and subsumers after the rewriting are empty for A2, . . . , A7, A10, A11, A13, A14 and B1, B2.
 obtained by omitting such unnecessary elements from the
set R(B), we can use a tighter bound on the number of edges after rewriting based on
nR = |Rred
 (B)| instead of |R(B)|. Thus, we obtain the following inequation that
holds for rewritings potentially increasing the size of relations:

Given the relation Rred

|IN(A)| + |OUT(A)| < nR + |IN(A)|  |OUT(A)|

(5)
In Example 1, |INA(Ai)| = 1 and |OUTA(Ai)| = 1 holds for all i  {2, ..., 7, 11, 14}.
Since both, nR and nR are 0 for all Ai, the number of edges decreases by one in case
of each rewriting. After each rewriting including the subsequent omitting of unnecessary successors of the replaced concept, the number of edges as well as nR and nR
remain the same for all remaining concepts. Thus, the conditions for the remaining concepts Ai with i  {2, ..., 7, 11, 14} do not change during any of the above rewritings.
After performing all of the above rewritings, we obtain the subsumee/subsumer relation
pair shown in Fig. 2(b).

N. Nikitina and B. Glimm

A15

A13

A12

A10

A12

A10

A16



A9

A8

A15

A13

r

A12

A9

A8

A1
A1
(a) Rewriting w.r.t. B1, B2

A16



A9

A8

A1

A15

A12

A15

r

A9

A8

A1

(b) Rewriting w.r.t. A10, A13

Fig. 3. Rewriting for the knowledge base in Example 1

In case of B1, in R we have only outgoing edges. Since both, nR and nR are 0,
we can eliminate the concept from in R by omitting its subsumers. In R, we have
three incoming and one outgoing edge, i.e., Inequation (5) does not hold. The number
of edges decreases also in this case, since two of the conjunction edges obtained by
rewriting are trivial as specified in the last section and are removed directly after the
rewriting. In case of B2, we only need to consider R, since in R the concept is
already unreferenced. Since we again have one incoming and one outgoing edge and
nR is 0, we can also perform the corresponding rewriting and eliminate B2, thereby
obtaining the relation pair shown in Fig. 3(a).

Now, we can also perform rewriting w.r.t. A10, A13 in R, since Condition (2) does
not hold any more. Checking for unnecessary subsumees and subsumers reveals that
both, nR and nR are still 0 for both, A10 and A13. Since Inequation (5) does not
hold in any of the two graphs, we can perform the corresponding rewriting and eliminate
both, A10 and A13, thereby obtaining the relation pair shown in Fig. 3(b).
We recall that, in Example 1,  = {A1, A8, A12, A15, A16, r}. Thus, the only atomic
concept not from  still referenced within the subsumee/subsumer relations is A9,
which is not eligible for rewriting due to Condition (4). Therefore, the rewriting process
is finished. After computing M(R, R, ext(R, R)), we obtain the smaller of the
two general modules given in Example 1.
Algorithm 1 shows the rewriting process starting with the initial subsumee/subsumer
relation pair R0, R0. The computation terminates, when no further subsumees/sub-
sumers could be eliminated during one iteration. We obtain a rewritten subsumee/sub-
sumer relation pair R, R over T complete w.r.t. , which is of a polynomial size
in the size of the original (not normalized) knowledge base To and does not contain
any nested concept expressions. Moreover, after replacing all temporary concept names
in M(R, R, ext(R, R)) by their definitions, we obtain a general module of To,
which does not contain any structurally new concept expressions not occurring in To.
We can summarize the results as follows.
Theorem 3. Let T be a normalization of an EL knowledge base To,   sig(To) a
signature, R, R the output of Algorithm 1 for an initial subsumee/subsumer pair
R0, R0 of T . For Tr the knowledge base obtained by replacing all temporary concept
names in M(R, R, ext(R, R)) by their definitions:
?

?

?
base

Algorithm 1. Rewriting of Subsumee/Subsumer Relation Pairs
Data: R0, R0 initial subsumee/subsumer relation pair for a normalized knowledge
Result: R, R rewritten subsumee/subsumer relation pair
1 R, R  R0, R0;
2 while fixpoint is not reached do
for B  sigC (T ) \  do

if Conditions (1)(4) are false then

nR  |Rred (B)|;
nR  |Rred (B)|;
if Inequation (5) does not hold then

R  RewR (B) \ (R(B) \ Rred (B));
R  RewR (B) \ (R(B) \ Rred (B));

10 return R, R;

in the size of To;

 M(R, R, ext(R, R)) can be computed in polynomial time and is polynomial
occurring in Tr there is a sub-expression C of To such

 for all sub-expressions C
?

?

?
that C

can be obtained from C by exchanging atomic concepts.
?

?

?
7 Evaluation
For our evaluation, we use the EL fragment of the Gene Ontology3 describing gene
product characteristics in terms of how gene products behave in a cellular context. The
OWL version of the ontology (April 2012) comprises 36,251 atomic classes, 8 object
properties and 316,580 logical axioms, out of which 66,117 axioms are terminological
(the EL fragment contains 66,101 terminological axioms).

We implemented our approach in Java based on the OWL-API. The aim of the evaluation is to compare the results of our approach in terms of module size and computation time to minimal module extraction and Locality-based extractor [1]  an existing
tractable approach to (not necessarily minimal) module extraction not based on rewrit-
ing. To the best of our knowledge, there are currently no existing implementations of
minimal module extraction for EL, but only for DL-Litebool [3]. Therefore, we compare the two implementations on the DL-Litebool fragment of EL, obtained from an
EL knowledge base by replacing qualified existential restrictions by the corresponding
unqualified restrictions. In order to also estimate the difference in the module size for
EL, we implemented a module extractor based on minimal justifications, which, given a
general module obtained using our approach, computes a subset of the original ontology
entailing the general module.

For the evaluation, we use signatures with 10, 30 and 50 atomic concepts and
4 roles each. For each signature size, we randomly choose 10 signatures and let the

3 http://www.geneontology.org/

N. Nikitina and B. Glimm

Table 1. Evaluation results on the DL-Litebool fragment of EL

Signature size Rewriter Minimal module extractor Locality-based extractor
?

?

?
4.8
10.3
28.8

9.7 (2.0)
22.2 (2.2)
60.4 (2.1)

167 (34.8)
436 (41.1)
1245 (43.2)

Table 2. Evaluation results on EL

Signature size Rewriter Minimal justification extractor Locality-based extractor
?

?

?
43 (2.0)
104 (2.3)
306 (2.0)

259 (12.3)
659 (14.6)
1787 (11.8)

different extractors compute the corresponding general module. Subsequently, we compute the average module size, shown in Tables 1 and 2 (the number in brackets is the
average module size measured in the corresponding average size of the modules computed by the rewriter). The first table shows the results for the DL-Litebool fragment
of EL. Due to the lower expressivity, the obtained DL-Litebool modules are considerably smaller than their EL correspondents in Table 2. We observe that the size of
the minimal DL-Litebool modules containing only axioms from the original knowledge
base T are between 2.0 and 2.2 times larger than the corresponding general modules
consisting of sub-expressions of T with possibly exchanged atomic concepts obtained
using rewriter. The corresponding DL-Litebool modules obtained by the locality-based
extractor are even between 34.8 and 43.2 times larger. In case of EL modules, the minimal justifications of the general modules computed by rewriter are between 2.0 and 2.3
times larger, while the modules obtained by the locality-based extractor are between
11.8 and 14.6 times larger.

We further analyzed whether different proportions of particular axiom types influence the effectiveness of rewriter, but did not find this to be the case. Our conjecture is
that this is a result of the simple structure of GO, which contains only axioms referencing exactly two atomic concepts, e.g., atomic subsumptions and existential restrictions.
In case of such axioms, exactly two substitutions of atomic concepts are possible, each
of which can potentially replace a justification consisting of several axioms, e.g., a chain
of subsumption axioms. Since the effect of each such replacement is not dependent on
the axiom type, but rather on the referenced concepts, this conjecture seems reasonable.
Concerning the computation time, we observe a significant difference between the
tractable approaches (rewriter and the locality-based extractor) and the minimal module
extractor. While, for the signatures with 50 atomic concepts, the first two approaches
require less than one minute, minimal module extractor required between two hours and
two days depending on the signature.

8 Summary

In this paper, we show that knowledge base extraction gains in effectiveness in terms
of knowledge base size, when modules are not required to be subsets of the original
?

?

?
knowledge base. We investigate the task of knowledge base extraction for EL based on
two alternative, less restrictive notions for syntactic similarity.

First, we discuss the extraction of knowledge bases consisting only of sub-expres-
sions occurring in the original knowledge base. We show how minimal modules fulfilling this similarity requirement can be obtained in EXPTIME by introducing temporary
concept names for complex concepts, adding a subset of the deductive closure to the
knowledge base and subsequently applying minimal module extraction.

Second, we consider the extraction of modules that consist of concepts structurally
equivalent to sub-expressions occurring in the original knowledge base.We propose a
tractable approach that, in most cases, yields small knowledge bases, but does not guarantee the minimality of the result. As we show in our evaluation, modules extracted during our evaluation using minimal module extractor for DL-Litebool are 2.0 to 2.2 times
larger than those obtained by our approach. In case of EL, knowledge bases obtained
by our rewriter on average contain half as many axioms as their minimal justifications
within the original knowledge base. In case of the locality-based module extractor, the
extracted EL modules are on average 12 times larger than the general modules obtained
by our approach.

Acknowledgements. This work is supported by the German Federal Ministry of Education and Research (BMBF) under grant 02PJ1002 (SyncTech).
