Reusing XML Schemas Information as a Foundation   

for Designing Domain Ontologies 

Thomas Bosch   

GESIS - Leibniz Institute for the Social Sciences, Mannheim, Germany 

thomas.bosch@gesis.org 

Abstract.  Designing  domain  ontologies  from  scratch  is  a  time-consuming   
endeavor requiring a lot of close collaboration with domain experts. However, 
domain descriptions such as XML Schemas are often available in early stages 
of the ontology development process. For my dissertation, I propose a method 
to  convert  XML  Schemas  to  OWL  ontologies  in  an  automatic  way.  The  approach addresses the transformation of any XML Schema documents by using 
the  XML  Schema  metamodel,  which  is  completely  represented  by  the  XML 
Schema Metamodel Ontology. Automatically, all Schema declarations and definitions are converted to class axioms, which are intended to be enriched with 
additional domain-specific semantic information in form of domain ontologies.   

Keywords: Semantic Web, Ontology Design, OWL, XML, XSD, XSLT. 

Problem and Research Question 

XML represents a large set of information within the context of various domains and 
has reached wide acceptance as standard data exchange format. Traditionally, ontology engineers work in close collaboration with domain experts to design domain ontologies manually, which requires a lot of time and manpower. Domain ontologies as 
well as XSDs describe domain data models. In many cases, XSDs are already existent 
and can therefore be reused in the process designing domain ontologies from scratch. 
As a consequence, saved time and effort could be used more effectively to enrich data 
models  with  supplementary  domain-specific  semantic  information,  not  or  not  satisfyingly covered by the underlying XSDs. The main research question, how the timeconsuming  process  designing  domain  ontologies  based  on  already  available  XSDs 
could be accelerated, results from the stated problem.   

Proposed Approach 

Concept.  Bosch  and  Mathiak  have  developed  the  concept  of  the  generic  multilevel 
approach  to  design  domain  ontologies  based  on  already  available  XSDs  [1].  XSDs 
determine the terminology, the vocabulary and the syntactic structure of XML document instances. XSDs are instances of the XSD metamodel. The components of the 

P. Cudre-Mauroux et al. (Eds.): ISWC 2012, Part II, LNCS 7650, pp. 437440, 2012. 
 Springer-Verlag Berlin Heidelberg 2012 

T. Bosch 

XSD  abstract  data  model,  also  called  element  information  items  (EIIs)  in  the  XML 
representation,  are  mapped  to  classes,  universal  restrictions  on  datatype  and  object 
properties of a generic ontology, the XML Schema Metamodel Ontology (XSDMO). 
The idea of the developed approach is to convert any XSDs automatically to classes, 
hasValue restrictions on XSDMOs datatype properties and universal restrictions on 
XSDMOs object properties using XSLT (Bosch and Mathiak explain implementation 
details  in  [2]).  Any  XSD  can  be  transformed  into  a  generated  ontology,  since  each 
component of the XSD abstract data  model is covered by this approach. On the instance  level,  XML  document  instances  are  translated  into  an  RDF  representation  of 
the  generated ontologies by  means of a Java program as  XSLT is less powerful  for 
this purpose. After these two transformation processes, which take only seconds, all 
the information located in the XSDs is re-used in generated ontologies and their RDF 
representations can now be published in the LOD cloud and be linked to other RDF 
datasets. Generated ontologies are not directly as useful as manually created domain 
ontologies, as XSD and OWL follow different modeling goals, since generated ontol-
ogies structures are rather complex, and as generated ontologies are not conform to 
the highest quality requirements of domain ontologies. Therefore, the generated on-
tologies  class  axioms  are  intended  to  be  further  supplemented  with  additional  do-
main-specific  semantic  information,  not  specified  in  underlying  XSDs,  in  form  of 
domain ontologies. These domain ontologies can be derived automatically out of the 
generated ontologies using SWLR rules on the schema as well as on the instance lev-
el. Consequentially, all XML data conforming to XSDs can be imported automatically 
as  domain  ontologies  instances.  The  effort  and  the  time,  however,  delivering  high 
quality domain ontologies subsequently is much less than creating domain ontologies 
completely manual and could be used more effectively to expand the XSDs domain 
knowledge. 
Related Work. The XSDMO corresponds to the general database ontology designed 
by Kupfer et al. [3]. They have defined a schema-to-ontology mapping: database ontologies  are  generated  automatically  from  database  schemas.  Semantic  domainspecific information is added supplementary to database ontologies in form of domain 
ontologies.   
Motivation and Use Case. Bosch et al. delineate the DDI ontology [4], whose derivation  serves  as  complete,  intuitive,  and  representative  use  case  to  motivate  the  ap-
proachs  application.  The  Data  Documentation  Initiative  (DDI)  is  an  acknowledged 
international standard for the documentation and management of data from the social, 
behavioral, and economic sciences. Excerpts of the DDI ontology are derived out of 
the underlying XSDs describing the statistics domain. DDI XML documents include 
XML elements Question containing QuestionText elements, which may comprise 
plain text such as How old are you?. The element Question is an instance of the 
XSD EII element whose name and type attributes have the values Question and 
QuestionType.  The  complex  type  QuestionType  includes  the  EII  complexCon-
tent containing the EII extension which comprises a sequence. This sequence contains a reference to the global element QuestionText, the type of the XML element 
QuestionText. QuestionText includes the text How old are you? which if of the 
XSDs primitive datatype string.   
?

?

?
XSDs EIIs are converted to generated ontologys classes which are defined as sub-

tionText  (<xs:element  name="QuestionText"/>),  for  example,  is  translated  into  the 
class  QuestionText-Element...  which  is  specified  as  sub-class  of  the  super-class 

is also part of the Element class extension. EIIs attributes values are converted to 
XSDMOs datatype properties <attribute>_<domain meta-EII>_String and to hasVa-

QuestionText-Element-Reference... 

sources  must  have  at 
the  datatype  property 
name_Element_String  to  the  string  individual  Question.  EIIs  attributes  values 
referring  to  other  EIIs  are  transformed  into  XSDMOs  object  properties  universal 

least  one  relationship  along 

meta-EII>_String.{<String>}.  The  value  Question  of  the  element  EIIs  attribute 
name  (<xs:element  name="Question"/>)  is  translated  into  the  datatype  property 
name_Element_String and into the datatype propertys universal restriction Question-

classes  of  XSDMO  super-classes:  <EII>   <meta-EII>.  The  global  element  Ques-
Element (<QuestionText-Element...>  <Element>), as each particular EII element 
lue restrictions on these datatype properties: <domain EII>   <attribute>_<domain 
Element...     name_Element_String.{'Question'},  since  Question-Element...  rerestrictions  <domain  EII>      <ref|substitutionGroup|refer>_<domain  meta-
QuestionText-Element-Reference...     
into  universal  restrictions  on  XSDMOs  object  properties  <domain  EII>    
Element...     type_Element_Type.QuestionType-Type....  The  part-of  relationship 
translated  into  the  object  propertys  universal  restriction  Sequence...     contion  Sequence...     sequence.QuestionText-Element-Reference....  As  resources  of 
QuestionText-Element...   value_Element_String.String is defined.   

EII>_<range meta-EII>.<range EII>. The value QuestionText of the element EIIs 
attribute  'ref'  (<xs:element  ref="QuestionText"/>)  referring  to  the  EII  element  with 
the  name  QuestionText  is  translated  into  the  object  propertys  universal  restriction 
ref_Element_Element.Question  Textinstances  can  only  have 
Element...,  as 
ref_Element_Element  relationships  to  QuestionText-Element...  resources  or  have 
no such relations. Values of EIIs' attributes referring to type definitions are translated 

type|base_<domain  meta-EII>_Type.<range  EII>.  The  value  QuestionType  of  the 
attribute type of the Question EII element (<xs:element name="Question" type = 
"QuestionType"/>) is converted to the object propertys universal restriction Question-

tains_Sequence_Element.QuestionText-Element-Reference....  The  strict  order  of  the 
in the sequence contained EIIs is expressed by the object propertys universal restric-

the  class  QuestionText-Element...  may  have  text  as  content,  the  datatype  property 
value_Element_String is introduced and the datatype propertys universal restriction 

of  the  EII  sequence  (<sequence><element  ref=QuestionText/></sequence>)  is 

We  want  to  derive  that  the  Question-Element...  resource  age  is  also  of  the  type 
Question  with the question  text  How old are  you?. The following program  fragment demonstrates the antecedent and the consequent of the SWRL rule, executed by 
a rule engine to derive the two statements: (?a type_Element_Type ?b)  (?b contains_ComplexType_ComplexContent  ?c)    ...    (?g  rdf:type  QuestionText-
Element...)  (?g value_Element_String ?h) -> (?a rdf:type Question)  (?a 
questionText ?h) The  two  statements  can  be  derived  since  the  individual  age, 
substituting the SWRL variable ?a, has a relationship along type_Element_Type to 

T. Bosch 

an individual replacing the variable b. This resource is linked to an instance ?c via 
contains_ComplexType_ComplexContent.  Further,  theres  a  navigation  path  from 
the ?c individual to the ?g instance along the stated properties. As XML elements 
QuestionText may contain text nodes like How old are you?, the ?g instance is 
assigned to the class QuestionText-Element... ensuring that derived question texts 
are only strings contained in QuestionText-Element... resources. The ?g resource 
must  have  a  value_Element_String  relation  to  a  ?h  individual.  As  the  instances 
age  and  How  old  are  you?  correspond  to  the  SWRL  rules  antecedent,  it  can  be 
inferred  that  the  resource  age  is  a  question  with  the  question  text  How  old  are 
you?.   

Results and Future Work 

The approachs concept has been finalized and the mapping of the XSD metamodel to 
the  XSDMO  has  been  defined  and  implemented.  The  mapping  between  XSDs  and 
generated ontologies has been specified and programmatically realized. Also the generality of the approach has been verified, since the generic test cases have shown that 
all  meta-EIIs  of  the  XSD  metamodel  are  covered  and  thus  each  XSD  can  be  transformed into a generated ontology using the same transformation rules. 

Currently,  Im  writing  a  Java  program  translating  XML  documents  into  RDF  representations of the generated ontologies. So far, the most relevant subsets of the DDI 
domain ontology are derived and appropriate SWRL rules are defined. To verify the 
hypothesis that the effort and the time delivering high quality domain ontologies using the developed approach is much less than creating domain ontologies manually, 
the  traditional  manual  and  the  proposed  semi-automatic  approach  will  be  compared 
by  means  of  a  user  study.  For  an  extensive  evaluation  of  the  work,  it  is  absolutely 
essential to create generated ontologies and to deduce domain ontologies out of XSDs 
of multiple and differing domains.     
