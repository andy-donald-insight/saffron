Semantic Web journal, to appear 0 (2012) 10
IOS Press

Paraconsistent OWL and Related Logics

Editor(s): Krzysztof Janowicz, University of California, Santa Barbara, U.S.A.
Solicited review(s): Two anonymous reviewers

Frederick Maier a Yue Ma b, Pascal Hitzler a
a Kno.e.sis Center, Wright State University, Dayton, OH, U.S.A.
b LIPN  UMR7030, Universit e Paris 13  CNRS, France

Abstract. The Web Ontology Language OWL is currently the most prominent formalism for representing ontologies
in Semantic Web applications. OWL is based on description logics, and automated reasoners are used to infer
knowledge implicitly present in OWL ontologies. However, because typical description logics obey the classical
principle of explosion, reasoning over inconsistent ontologies is impossible in OWL. This is so despite the fact
that inconsistencies are bound to occur in many realistic cases, e.g., when multiple ontologies are merged or when
ontologies are created by machine learning or data mining tools.
In this paper, we present four-valued paraconsistent description logics which can reason over inconsistencies.
We focus on logics corresponding to OWL DL and its profiles. We present the logic SROIQ4, showing that it is
both sound relative to classical SROIQ and that its embedding into SROIQ is consequence preserving. We also
examine paraconsistent varieties of EL++, DL-Lite, and Horn-DLs. The general framework described here has the
distinct advantage of allowing classical reasoners to draw sound but nontrivial conclusions from even inconsistent
knowledge bases. Truth-value gaps and gluts can also be selectively eliminated from models (by inserting additional
axioms into knowledge bases). If gaps but not gluts are eliminated, additional classical conclusions can be drawn
without affecting paraconsistency.

Keywords: Web Ontology Language, OWL, Description Logic, Paraconsistency, Semantic Web, Complexity,
Automated Deduction

1. Introduction

The Semantic Web is based fundamentally on
the idea that the usefulness of data on the Web can
be significantly increased by publishing it together
with corresponding metadata, the latter giving a
formal and machine processable account of the
datas meaning [31,32]. The Web Ontology Language [30] OWL, now a W3C recommended stan-
dard, specifies this metadata using ontologies
logical knowledge bases that precisely describe a
given domain of interest.

OWL is closely related to description logics
(DLs). Specifically, OWL DL corresponds to the
description logic SROIQ [34], while the profiles

*Corresponding Author

OWL EL, OWL QL and OWL RL [57] correspond
to the DLs EL++ [8], DL-LiteR [12], and DLP [28],
respectively. The formal semantics of OWL, which
gives meaning to OWL knowledge bases and determines their logical consequences, is based on DL
semantics, and the automated tools used to reason
over OWL knowledge bases are typically based on
algorithms developed for description logics.

Standard description logics are in turn closely
related to classical first-order logic [31]. In par-
ticular, they have a set-theoretic semantics that
espouses the law of noncontradiction (no statement can be simultaneously true and false), and
the DL account of logical entailment is essentially
the same as classical logics: A set K of statements
entails a statement P if and only if there is no in-

0000-0000/12/$00.00 c 2012  IOS Press and the authors. All rights reserved

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

terpretation making all of the members of K true
and P false.

A result of this is that the formal semantics of
standard description logics is rendered useless in
the presence of contradictory information. Since
the statements of an inconsistent knowledge base
cannot simultaneously be true, everything is entailed by them. This is called the principle of ex-
plosion.
If K |= P and K |= P, then K |= Q for all Q.
For any statement P and its negation P, and
any set of statements K, if both P and P are
entailed by K, then all statements Q are also entailed by K. The principle holds in all standard
description logics, and it means that these logics
cannot be used to reason over inconsistencies. In
Poppers words, A theory which adds to every
information which it asserts also the negation of
this information can give us no information at all
[61].

If inconsistencies were rare or could be easily identified, then this problem would be unin-
teresting. However, real knowledge bases are distributed and multi-authored, or created using inductive methods or by merging other knowledge
bases, and it is unreasonable to expect them to be
logically consistent all of the time. Furthermore,
it is well known that ascertaining consistency in
expressive formal systems is quite difficult (some-
times impossible).

And so it is important to develop ways of dealing with inconsistencies. One method of doing this
is to maintain the principle of explosion, treating inconsistencies as errors to be repaired (e.g.,
by rejecting or modifying statements until consistency is restored) [39,66]. This approach has the
virtue of allowing classical logic to be used, albeit over an altered set of statements. However, in
addition to the difficulty of determining whether
or not a knowledge base is inconsistent (and also
of pinpointing the sources of inconsistencies), the
approach has the drawback of deleting or modifying some subset of statements. This necessarily
removes valuable information.

An alternative solution is to reject the principle of explosion itself, employing a so-called paraconsistent logic, i.e., a logic in which inconsistencies do not entail everything. Using one, classically
sound and informative consequences can be drawn
from inconsistent knowledge bases.

The paraconsistency approach is the one taken
here. Extending results found in a collection of
papers [47,48,49,50,51], we present 4-valued paraconsistent semantics for selected DLs and show
how knowledge bases under the 4-valued semantics can be embedded (i.e. translated) into corresponding knowledge bases under classical DL se-
mantics. The virtue of the approach is that the embedding allows existing classical reasoners to draw
inferences according to the new semantics (which,
again, are classically sound).
We focus on the logic SROIQ4, the paraconsistent variant of SROIQ. We prove that SROIQ4
is sound wrt SROIQ and so can be used to correctly reason over SROIQ knowledge bases. We
also show that the embedding of SROIQ4 into
SROIQ is consequence preserving: a statement is
entailed in SROIQ4 if and only if its translation
is entailed in SROIQ. Furthermore, we show that
by adding axioms of a special type, the law of noncontradiction and the law of the excluded middle
can be selectively enforced in SROIQ4 knowledge
bases. This allows one to draw further classically
correct conclusions while at the same time (and
with certain caveats) maintaining paraconsistency.
We also apply the paraconsistent framework to
several varieties of tractable description logic, including Horn-DLs [43], logics in the DL-Lite fam-
ily, EL++, and the tractable rule language ELP
[44]. As with SROIQ, the paraconsistent varieties
of these can be embedded into their classical coun-
terparts. In order to ensure tractability, however,
restrictions must be specified in each case.

Importantly, we also point out a limitation
of the paraconsistent framework described here.
Specifically, while many DL constructs do not affect paraconsistency one way or another, the interaction of nominals and cardinality restrictions
prevents some knowledge bases from having fourvalued models. For these, the principle of explosion
still applies.

The remainder of the paper is organized as fol-
lows: Section 2 gives a brief overview of multivalued logics and of the difficulties (such as the failure of Modus Ponens) encountered in the 4-valued
context. The implication operators (material, in-
ternal, and strong) forming the basis for concept
inclusion in SROIQ4 are also presented. The syntax and semantics for SROIQ4 are defined in Section 3, and SROIQ4 is shown to be sound relative
to SROIQ. Section 4 discusses removing truth

value gaps and gluts from SROIQ4 by adding
further axioms. The embedding of SROIQ4 into
SROIQ is given in Section 5, as are the theorems asserting that the embedding is consequence
preserving. Section 6 shows how the interaction of
nominals and cardinality restrictions causes paraconsistency to break down. Sections 7 and 8 discuss embedding tractable logics into their classical
counterparts. It is shown there that tractability is
lost if translations are based on strong or material inclusion. A series of empirical tests on OWL
ontologies is described in Section 9. Although the
experiments are limited and of a tentative nature,
their results reinforce the theoretical results of earlier sections: efficient reasoning performance can
be obtained if internal inclusion is used, but typically not if material or strong inclusion is used.
Section 10 discusses related work.

Proofs for results not reported elsewhere are in-

cluded in the Appendix.

Acknowledgements: This work is a longer version
of materials appearing in [46] and [53], which are
in turn based upon earlier research [47,48,49,50,
51]. The current work was performed while the
first coauthor was a postdoctoral fellow at the
Florida Institute for Human and Machine Cogni-
tion, and later while at Wright State University.
The work was partially supported by the National
Science Foundation under award 10172225 III:
Small: TROnTractable Reasoning with Ontolo-
gies, and partly realized as part of the Quaero
Programme, funded by OSEO, the French state
agency for innovation.

2. Multivalued Paraconsistent Logics

A logic is paraconsistent if the principle of explosion fails in at least one case, that is if there
exist statements P and Q, and a set of statements
K, such that K |= P and K |= P but K |= Q.
Classical logic fails to be paraconsistent because
no set entailing P and P possesses a model. In
the 4-valued logics upon which SROIQ4 is based,
paraconsistency is achieved essentially by redefining what interpretation and model mean, so
that classically inconsistent sets can have models.
We will briefly discuss multivalued paraconsistent logics here. The important properties of multivalued logics can be illustrated with proposi-

tional logics over the usual set of connectives: 
(negation),  (conjunction),  (inclusive disjunc-
tion), and  (material implication). As such, well
restrict ourselves to discussing these.
An n-valued logic specifies a set V of truth val-
ues, |V | = n, and some subset D  V of designated
values. An n-valued interpretation (or assignment)
assigns an element of V to each atomic statement,
and the values of compound statements are defined using truth-functions. An n-valued model of
K is an interpretation where each statement of K
is given a value from D, and K entails P iff every
n-valued model of K is an n-valued model of P.
In the context of computing, the use of four
truth values {n, 0, 1, b} can be traced to Belnap
[9,10], with the four values corresponding to what
a computer knows or has been told about P: nothing (n); that P is false (0); that P is true (1);
that P is true and that P is false (b). Belnap intended the four values to be treated epistemically.
They correspond to what the computer has been
told about P, rather than denoting an actual truth
value.

The semantics for the logical connectives can
be given using Belnaps Bilattice (Figure 1). The
truth values are partially ordered according to two
relations: t (the truth ordering), and k (the
knowledge ordering). Both define complete lattices
over the set of truth values. The truth-functions
for  and  are defined as

 v(P  Q) = glbt(v(P), v(Q))
 v(P  Q) = lubt(v(P), v(Q))

where glbt(x, y) and lubt(x, y) refer, respec-
tively, to the greatest lower bound and least upper
bound of x and y in the t-lattice. Negation inverts the diagram in the t-ordering. This semantics yields the characteristic truth tables given in
Table 1, where material implication PQ is defined as P  Q.

The value b is a truth value glut, while n is a
truth value gap. If one allows gluts but not gaps,
then one gets Graham Priests 3-valued Logic of
Paradox (LP) [62]. Allowing gaps but not gluts
yields Kleenes strong 3-valued logic K3 [42]. If one
allows neither gaps nor gluts, then one is left with
classical logic. Typically, if gluts are allowed in a
logic L and b is designated, then L is paraconsis-
tent. E.g, LP is paraconsistent, while K3 is not.

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

Table 1

4-valued semantics for the traditional connectives.

 Supraclassicality: For all truth-value assignments v, if v(P)  v(Q)  {0, 1}, then v(P 
Q) = v(PQ).
Let |=4 indicate the consequence relation defined over the propositional language of , , ,
and , and using V = {n, 0, 1, b} and D = {1, b}.
With the exception of Transposition, none of the
above items hold for material implication relative
to |=4. It is in particular the combined failures of
Modus Ponens and the Deduction Theorem that
have led to the development of alternative implication operators. SROIQ4 and the other description logics described below use operators defined
in the logics of Arieli and Avron [5,6]. The basic
operator () is called internal implication, while
strong implication () is defined in terms of it.
Equivalence () is defined in turn using strong
implication. For any truth-value assignment v, the
semantics for the three are given below.

 v(P  Q) = 1 if v(P) / {1, b};
v(P  Q) = v(Q) otherwise.
 v(P  Q) = v((P  Q)  (Q  P))
 v(P  Q) = v((P  Q)  (Q  P))

The semantics gives rise to the truth tables shown
in Table 2. Internal implication satisfies Modus
Ponens, the Deduction Theorem, Identity, and
Supraclassicality, but not Modus Tollens, Transposition or Strong Equivalence. Strong implication
satisfies all of these except (as shown below) the
Deduction Theorem.

Example 1. Let A and B be atomic formulas.
Clearly, {(AA), B} |=4 (AA). However, any
truth value assignment v on which v(A) = b and
v(B) = 1 shows {(A  A)} |=4 B  (A  A).
The failure of the Deduction Theorem for strong
implication naturally leads one to ask whether
there are any operators  that satisfy Modus
Ponens, Identity, Supraclassicality, Transposition,
Modus Tollens, and Strong Equivalence, but also
the Deduction Theorem. This is not the case.


Fig. 1. Belnaps Bilattice

It should be pointed out that, ceteris paribus,
all of the consequence relations defined using the
multivalued framework possess the following prop-
erties.

 Reflexivity: If P  K, then K |= P.
 Monotonicity: If K |= P, then for all K, K 
 Transitivity: If K |= P for all P  K, and

K |= P.
K |= Q, then K |= Q.

The same holds for all of the paraconsistent description logics defined in later sections.

Several traditional rules of inference, however,
often do not hold in the 4-valued context. In particular some involving material implication do not
hold. Because of this, alternative implication operators (symbolized here using ) have been pro-
posed. Below, P and Q are arbitrary statements,
and K is an arbitrary set of statements.
 Disjunctive Syllogism: If K |= P and K |=
 Modus Ponens: If K |= P  Q and K |= P,
 Modus Tollens: If K |= P  Q and K |= Q,
 Identity: K |= P  P.
 Transposition: If K |= P  Q, then K |=
 Deduction Theorem: If K  {P} |= Q, then

P  Q, then K |= Q.
then K |= Q.
then K |= P.

Q  P.
K |= P  Q.
 Strong Equivalence: For all truth-value assignments v, [v(P  Q)  {1, b} and v(Q 
P)  {1, b}] iff v(P) = v(Q).

Table 2

Truth tables for internal implication, strong implication, and equivalence.


Proposition 2. If  satisfies Modus Ponens and
the Deduction Theorem, then  satisfies none of
Modus Tollens, Strong Equivalence, or Transposi-
tion.

The above proposition holds whether or not

Supraclassicality or Identity is satisfied.
Since strong implication satisfies Strong Equiv-
alence, P  Q is a tautology iff the values of P
and Q coincide in every interpretation. The analogous claim does not hold if equivalence were to
be spelled out using .

3. SROIQ and SROIQ4

The syntax and semantics for classical SROIQ
are given in Table 3. Below, NC, NR, and NI are
disjoint sets of atomic concept names, atomic role
names, and individual names. Well-formed formulas are created from them, together with the connectives , (cid:117), (cid:116), etc., and punctuation symbols. A
SROIQ knowledge base is the union of a TBox,
RBox, and ABox, defined below. The original presentation of SROIQ is found in [34].
Definition 3. The set of SROIQ role descriptions
is NR  N
R = {R|R  NR}. R and
R are inverses of each other. NR contains a universal role U .
Definition 4. R1  . . .  Rn (cid:118) R, where n  1 and
R, Ri  NRN
R , is a role-inclusion axiom (RIA).
A role-hierarchy is a finite set of RIAs.

R , where N

Above, an expression such as R1  . . .  Rn is
used to denote a composition of roles. A role R is
simple if it: 1) does not appear on the right-hand
side of an RIA; 2) is the inverse of a simple role;
or 3) appears in the right-hand side of an RIA
only if the left-hand side consists entirely of simple
roles. Simplicity is needed to ensure decidability
of SROIQ.

Definition 5. Ref (R), Irr(R), and Dis(R, S),
where R and S are roles other than U , are role
assertions. A set of role assertions is simple wrt
role-hierarchy H if each assertion Irr(R) and
Dis(R, S) uses only roles that are simple wrt H.

Ref , Irr, and Dis are used to specify that a
role is reflexive, irreflexive, or disjoint with another
role. Sym and T rans may be used to express symmetry and transitivity, but since they can be encoded via other means, we will not discuss them.
Decidability also requires the role hierarchy to

be regular.
Definition 6. A strict partial order  on NR  N

is a regular order iff the following holds for all
roles R and S: S  R iff S  R.
Definition 7. Let  be a regular order on roles. An
RIA w (cid:118) R is -regular iff R  RN and w has
one of the below forms.
1. R  R
2. R
3. S1  . . .  Sn, where each Si  R
4. R  S1  . . .  Sn, where each Si  R
5. S1  . . .  Sn  R, where each Si  R
A role hierarchy H is regular if there exists a regular order  such that each RIA in H is -regular.
Definition 8. An RBox is a finite, regular role hierarchy H together with a finite set of role assertions simple wrt H.
Definition 9. If a1, . . . , an are in NI , then {a1, . . .,
an} is a nominal. No is the set of nominals.
Definition 10. The set of SROIQ-concept descriptions is the smallest set such that:
1. , , each C  NC, and each o  No is a
2. If C is a concept description, then C is a

concept description.

concept description.

3. If C and D are concept descriptions, R is a
role description, S is a simple role descrip-
tion, and n is a nonnegative integer, then the
following are all concept descriptions:

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

Table 3

Syntax and semantics of SROIQ.
Syntax
C  NC
a  NI

SROIQ Semantics

CI  I
aI  I

{a
n}
1 , . . . , a
RI  I  I

RI = {(y, x)|(x, y)  RI}

UI = I  I

{(x, z)|(x, y1)  R

1  (y1, y2)  R

2  . . .

. . .  (yn, z)  R

n}

I = I
I = 

(C)I = I /CI

1  C

1  C

(C1 (cid:117) C2)I = C
(C1 (cid:116) C2)I = C

{x|(y)[(x, y)  RI  y  CI ]}

{x|(y)([(x, y)  RIy  CI ]}

{x|(x, x)  RI}

{x|{y|(x, y)  RI  y  CI}  n}

{x|{y|(x, y)  RI  y  CI}  n}

SROIQ Semantics

1  C

(R1  . . .  Rn)I  R
{(x, x)|x  I}  RI

n+1

{(x, x)|x  I}  RI = 

SI  RI = 

aI  CI

aI = bI

(aI , bI )  RI

(aI , bI ) / RI

Concept

atomic
concept

individual

nominal

role

inverse role

universal role

role

composition

top

bottom

negation

conjunction

disjunction

exists

restriction

value

restriction

self

restriction

atmost

restriction

atleast

restriction

Axiom

concept
inclusion

role

inclusion

reflexivity

irreflexivity

disjointness

class

assertion

inequality
assertion

role (instance)

assertion

negative role

assertion

{a1, . . . , an}, ai  NI

R  NR

R, R  NR

R1  . . .  Rn

C1 (cid:117) C2
C1 (cid:116) C2
R.C

R.C

R.Self

 nR.C

 nR.C

Syntax
C1 (cid:118) C2

R1  . . .  Rn (cid:118) Rn+1

Ref (R)

Irr(R)

Dis(R, S)

C(a)

a = b

R(a, b)

R(a, b)

(C (cid:117) D),
(C (cid:116) D),
 nS.C,  nS.C,

R.C,
S.Self .

R.C,

N . C(a) can thereby take on one of Belnaps four
values.

Definition 11. If C and D are concept descrip-
tions, then C (cid:118) D is a general concept inclusion
(GCI) axiom. A TBox is a finite set of GCIs.
Definition 12. If C is a concept description, a, b 
NI , R, S  NR  N
R , and S is a simple role de-
scription, then C(a), R(a, b), S(a, b), and a = b,
are individual assertions. A SROIQ ABox is a
set of individual assertions.

assertions will uniformly be called axioms.

All GCIs, RIAs, role assertions, and individual
The semantics of SROIQ is classical. A 2-
valued interpretation (or 2-interpretation) is a tuple (cid:104)I,I(cid:105), where I is a nonempty set (the
universe of discourse), and I is a valuation function defined inductively as shown in Table 3. A 2-
interpretation I 2-satisfies (is a 2-model of ) an axiom A if the corresponding condition of SROIQ
in Table 3 is met. I 2-satisfies (is a 2-model of) a
knowledge base KB iff it 2-satisfies each axiom in
KB. KB is 2-satisfiable (2-unsatisfiable) iff it has
(does not have) a 2-model. KB entails an axiom A
wrt SROIQ (KB |=SROIQ A) iff every 2-model
of KB is a 2-model of A.
Since it is classical, SROIQ obeys the principle

of explosion.
Example 13. Let KB be a SROIQ knowledge base
containing the following axioms:

Sedan(c435),
Van(c435),
Sedan (cid:118) Van,
Incident(i90),
involvedIn(c435, i90),
assignedTo(unit1, i90),
memberOf(tom, unit1).

The knowledge base is intended to describe an accident involving a vehicle, the response team assigned to the accident, and the members of the
team. The first three axioms are inconsistent, how-
ever, and because of this, unintuitive consequences
such as memberOf(c435, unit1) and Incident(tom)
are entailed according to the classical SROIQ se-
mantics.

To create the 4-valued logic SROIQ4, we assign
to each concept description both a positive extension P and a negative extension (anti-extension)

aI  P , aI / N .
aI / P , aI  N .
aI / P , aI / N .
aI  P , aI  N .

1:
0:
n:
b:

Roles are given a 4-valued semantics as well (in
earlier papers [46], we at times treated them clas-
sically). Specifically, RI is (cid:104)P, N(cid:105), where P and
N are subsets of I  I . The reason for this
treatment is to maintain paraconsistency while allowing Irr, Dis, Ref , R.Self , and negative role
assertions to be used in knowledge bases.
The syntax for SROIQ4 differs from SROIQ
in that it allows three types of inclusion axiom,
based on the operators of Arieli and Avrons logic.

C1  C2
C1  C2
C1  C2

material inclusion
internal inclusion
strong inclusion

Strictly speaking, axioms using the new inclusion
operators are not defined in classical SROIQ.
However, we choose to extend the SROIQ syntax and semantics, stipulating that (C  D),
(C  D), and (C  D) have the same semantics in SROIQ as (C (cid:118) D). We also stipulate
that (C (cid:118) D) is to be read as (C  D) in
SROIQ4. This allows a common language L for
both SROIQ and SROIQ4 knowledge bases and
simplifies some of the proofs later in the paper.
If a knowledge base makes use of only (cid:118), then
we will call it a SROIQ knowledge base. Other-
wise, it is a SROIQ4 knowledge base. It should
be noted that SROIQ encompasses several other
description logics discussed in the literature. E.g,
ALC is the logic defined using only NC, NR, NI ,
and the connectives (cid:117), (cid:116), , , and . SHIQ adds
qualified cardinality restrictions.1 As this is so, we
can also speak of ALC4 and SHIQ4 knowledge
bases. The paraconsistent framework defined here
for SROIQ applies equally well to them.
The semantics of SROIQ4 parallels that of
its classical counterpart. A 4-valued interpretation
(4-interpretation) is a tuple (cid:104)I,I(cid:105), where I is
nonempty and I is a valuation function defined

1SHIQ also allows an assertion of the form T rans(R).

However, this can be simulated in SROIQ.

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

Syntax
C  NC
a  NI

R  NR

{a1, . . . , an}, ai  NI

R, R  NR

R1  . . .  Rn

C1 (cid:117) C2
C1 (cid:116) C2
R.C

R.C

R.Self

 nR.C

 nR.C

Syntax
C1  C2

C1  C2

C1  C2

R1  . . .  Rn (cid:118) Rn+1

Ref (R)

Irr(R)

Dis(R, S)

C(a)
a = b
R(a, b)
R(a, b)

Table 4

Syntax and semantics of SROIQ4.

SROIQ4 Semantics

CI = (cid:104)P, N(cid:105), where P, N  I

aI  I

(cid:104){a
n}, N(cid:105), where N  I
1 , . . . , a
RI = (cid:104)P, N(cid:105), where P, N  I  I
RI = (cid:104)P , N(cid:105), where RI = (cid:104)P, N(cid:105),

P  = {(b, a)|(a, b)  P}, N = {(b, a)|(a, b)  N}

UI = (cid:104)I  I , (cid:105)

1 )  . . .  (yn,z)  p+(RI
(cid:104){(x,z)|(y1...n)[(x,y1)  p+(R

{(x, z)|(y1...n)[(x, y1)  p(R
1 )  . . .  (yn, z)  p(RI

n ]})
n ]})(cid:105)

I = (cid:104)I , (cid:105)
I = (cid:104), I(cid:105)

(C1 (cid:117) C2)I = (cid:104)P1  P2, N1  N2(cid:105), where C
(C1 (cid:116) C2)I = (cid:104)P1  P2, N1  N2(cid:105), where C

(C)I = (cid:104)N, P(cid:105), where CI = (cid:104)P, N(cid:105)

i = (cid:104)Pi, Ni(cid:105)

i = (cid:104)Pi, Ni(cid:105)

(cid:104){x|(y)[(x, y)  p+(RI )  y  p+(CI )]},
{x|(y)[(x, y)  p+(RI )y  p(CI )]}(cid:105)
(cid:104){x|(y)([(x, y)  p+(RI )y  p+(CI )]},
{x|(y)[(x, y)  p+(RI )  y  p(CI )]}(cid:105)

(cid:104){x|(x, x)  p+(RI )}, N(cid:105), N  I

(cid:104){x|{y|(x, y)  p+(RI )  y / p(CI )}  n},
{x|{y|(x, y)  p+(RI )  y  p+(CI )} > n}(cid:105)
(cid:104){x|{y|(x, y)  p+(RI )  y  p+(CI )}  n},
{x|{y|(x, y)  p+(RI )  y / p(CI )} < n}(cid:105)

SROIQ4 Semantics

1 ))  p+(C

(I  p(C

2 )

p+(C

2 )

1 )  p+(C

2 ) and p(C

p+(C

1 )  p+(C

2 )  p(C

1 )

p+((R1  . . .  Rn)I )  p+(R
{(x, x)|x  I}  p+(RI )
{(x, x)|x  I}  p(RI )

n+1)

p+(RI )  p(SI ) and p+(SI )  p(RI )

aI  p+(CI )

aI = bI

(aI , bI )  p+(RI )
(aI , bI )  p(RI )

inductively as shown in Table 4. We will also make
use of the following notation: If C is a concept
and I is a 4-interpretation such that CI = (cid:104)P, N(cid:105),
then p+(CI) =def P and p(CI) =def N . A 4-
interpretation 4-satisfies (is a 4-model of ) an axiom A if the corresponding condition of SROIQ4
in Table 4 is met. I 4-satisfies a knowledge base
KB iff it 4-satisfies each axiom in KB. KB is
4-satisfiable (4-unsatisfiable) iff it has (does not
have) a 4-model. KB entails an axiom A wrt
SROIQ4 (KB |=SROIQ4 A) iff every 4-model of
KB is a 4-model of A.

Example 14. The following interpretation is a 4-
model of the knowledge base in Example 13.
I = {c435, i90, tom, unit1}
c435I = c435
i90I = i90
tomI = tom
unit1I = unit1
SedanI = V anI = (cid:104){c435}, I(cid:105)
IncidentI = (cid:104){i90}, I  {i90}(cid:105)
involvedInI = (cid:104){(c435, i90)}, (I )2  {(c435, i90)}(cid:105)
assignedToI = (cid:104){(unit1, i90)}, (I )2  {(unit1, i90)}(cid:105)
memberOfI=(cid:104){(tom, unit1)}, (I )2  {(tom, unit1)}(cid:105)

The interpretation in Example 14 is a 4-model
regardless of whether the single inclusion axiom
of the knowledge base is read as material inclu-
sion, internal inclusion, or strong inclusion. The
interpretation is not a 4-model of the assertions
Incident(tom) and memberOf (c435, unit1), how-
ever, and so the knowledge base does not entail
them according to SROIQ4.
It should be pointed out that internal inclusion
 approximates , in the sense that the consequences obtainable using  are a subset of those
obtainable using .
Proposition 15. Let KB be a SROIQ4 knowledge
base, A a SROIQ4 axiom, and KB the knowledge base obtained by replacing one or more occurrences of  with . If KB |=SROIQ4 A, then
KB |=SROIQ4 A.
In contrast, material inclusion  does not approximate  in a similar way.
Example 16. In general, {C  D} |=SROIQ4
C  D but {C  D} |=SROIQ4 C  D. This
can be seen by modifying the interpretation in Exand VanI are defined to
ample 14 so that Sedan

be (cid:104){c435},{c435}(cid:105). Under the modified interpre-
tation, Sedan  Van is satisfied but Sedan 
Van is not.

As in the classical setting, several equivalences

In SROIQ4, inequality assertions a = b have
a classical semantics: a = b is true if and only if
aI = bI, and it is false otherwise. In other words,
we have not given (in)equality a paraconsistent
semantics. This is done to facilitate embedding
SROIQ4 into classical SROIQ so that classical
tools can be used to reason paraconsistently. How-
ever, the use of classical semantics here entails the
existence of SROIQ4 knowledge bases that do not
have 4-valued models. This is discussed in subsequent sections.
involving negation hold in SROIQ4.
Proposition 17. For any SROIQ4 concepts C, D
and 4-interpretation I the following hold.
1. ()I = I
2. ()I = I
3. (C)I = CI
4. ((C (cid:117) D))I = (C (cid:116) D)I
5. ((C (cid:116) D))I = (C (cid:117) D)I
6. (R.C)I = (R.C)I
7. (R.C)I = (R.C)I
8. (  nR.C)I = ( n + 1R.C)I
9. (  nR.C)I = ( n  1R.C)I

In the classical DL setting, concept C is subsumed by concept D if and only if CI  DI for
each classical interpretation I, and C and D are
equivalent if and only if CI = DI . These are easily related to satisfiability of GCIs. Since the semantics for SROIQ4 is 4-valued, distinct notions
of subsumption and equivalence naturally arise.
Definition 18. Let C and D be SROIQ4 concept
descriptions and KB a SROIQ4 knowledge base.
1. C is 4-satisfiable wrt KB if there is a 4-model

I of KB such that p+(CI) is not empty.
2. C is weakly subsumed by D (D weakly subsumes C) wrt KB if p+(CI )  p+(DI ) in
every 4-model I of KB.
3. C is strongly subsumed by D (D strongly
subsumes C) wrt KB if p+(CI )  p+(DI )
and p(DI )  p(CI ) in every 4-model I of
KB.
4. C and D are weakly equivalent (C  D) wrt
KB iff p+(CI ) = p+(DI ) on each 4-model I
of KB.

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

5. C and D are strongly equivalent (C  D)
wrt KB iff CI = DI on each 4-model I of
KB.

In Example 13, Van is 4-satisfiable relative to
the knowledge base KB defined there, even though
the only models for it assign common elements
to both its positive and negative extensions. Sim-
ilarly, since in every model of KB it holds that
)  p+((Van)I ), regardless of the

p+(Sedan
model I in question, Sedan is weakly subsumed
by Van. It is not strongly subsumed, however.
For instance, if the interpretation of Example 14
= (cid:104){c435},{c435}(cid:105) but

is modified so that Sedan
VanI = (cid:104)I ,{c435}(cid:105), then KB is still satisfied.
However the criteria for strong subsumption are
not met.
The below sets of claims follow immediately
from Definition 18 and the semantics of SROIQ4.
Proposition 19. Let C and D be SROIQ4 concept
descriptions. The following all hold relative to any
SROIQ4 knowledge base KB.
1. C is 4-unsatisfiable iff C is weakly subsumed

by .

2. C and D are weakly equivalent iff C weakly

subsumes D and D weakly subsumes C.

3. C and D are strongly equivalent iff C strongly

subsumes D and D strongly subsumes C.

Proposition 20. Let C and D be SROIQ4 concept
descriptions. The following all hold relative to any
SROIQ4 knowledge base KB.
1. C is weakly subsumed by D iff C  D is sat-
2. C is strongly subsumed by D iff C  D is
3. C and D are weakly equivalent iff C  D and
4. C and D are strongly equivalent iff C  D

isfied on each I.
satisfied on each I.
D  C are both satisfied on each I.
and D  C are both satisfied on each I.

3.1. SROIQ4 is Sound

Every 2-interpretation I2 of a knowledge base
KB corresponds to a 4-interpretation I4, which
we will call the 4-counterpart of I2:
 I4 =def I2 .
 For each a  NI , aI4 =def aI2 .
 For each R  NR, RI4 =def (cid:104)RI2, (I2 
I2)  RI2(cid:105).
 For each C  NC  No, or C = R.Self ,
CI4 =def (cid:104)CI2, I2  CI2(cid:105).

Since I4 =def I2, we will use  to refer to the
common domain of discourse. In the counterpart
I4, the positive and negative extensions of each
atomic concept partition . In fact, this holds for
even non-atomic concept descriptions.
Proposition 21. If I2 is a 2-interpretation and I4
its 4-counterpart, then for any concept description
C, CI4 = (cid:104)CI2 ,   CI2(cid:105).
Proposition 22. If I2 is a 2-interpretation and I4
its 4-counterpart, then for any SROIQ4 axiom A,
I4 is a 4-model of A iff I2 is a 2-model of A.

Given Proposition 22 and the fact that concept inclusion axioms have the same semantics in
SROIQ regardless of their type, the following are
all equivalent:

 I2 is a 2-model of C (cid:118) D.
 I4 is a 4-model of C  D.
 I4 is a 4-model of C  D.
 I4 is a 4-model of C  D.

Example 23. Let KB2 be the knowledge base from
Example 13 with the assertion Van(c435) removed.
KB2 is classically satisfiable, and we may define
a 2-valued model I2 as follows:
  = {c435, i90, tom, unit1}
 c435I2 = c435, i90I = i90,
 SedanI2 = {c435}
 VanI2 = 
 IncidentI = {i90}
 involvedInI = {(c435, i90)}
 assignedToI = {(unit1, i90)}
 memberOfI = {(tom, unit1)}

tomI2 = tom, unit1I = unit1

The 4-valued counterpart I4 of I2 looks exactly
like the 4-valued interpretation in Example 14,
save that interpretations for Van and Sedan are as
shown below.

 Sedan
 VanI = (cid:104), I(cid:105)

= (cid:104){c435}, I  {c435}(cid:105)

Given this, (Van)I4 is (cid:104)I , (cid:105), which is in agreement with Proposition 21. Furthermore, it can be
readily verified that I4 is a 4-model of KB2, in
agreement with Proposition 22.
Proposition 24. Let KB be a SROIQ4 knowledge
base and A a SROIQ4 axiom. If KB |=SROIQ4
A, then KB |=SROIQ A.
Proof. If KB |=SROIQ4 A and I2 2-satisfies KB,
then by Prop. 22 the 4-counterpart I4 of I2 4-

satisfies KB and hence A. Again by Prop. 22, I2
2-satisfies A.

And so SROIQ4 is sound wrt SROIQ.

Example 25. In Examples 13 and 23, one may
conclude Van(c435) (which follows trivially by
Modus Ponens). In Example 13, one may also conclude Van(c435) (by Reflexivity). In both cases,
these conclusions are sound relative to classical
SROIQ (in Example 13, since KB is classically
inconsistent, everything follows from it).

Significantly, regardless of what inclusion operator is used in SROIQ4, if A is entailed in
SROIQ4, then it is also entailed according to
SROIQ. We can show this by replacing each inclusion symbol with (cid:118).
Proposition 26. Let KB be a SROIQ4 knowledge
base, A a SROIQ4 axiom, and KB and A the
SROIQ knowledge base and axiom obtained by
replacing each occurrence of , , and  with (cid:118).

If KB |=SROIQ4 A, then KB |=SROIQ A

Proof. If KB |=SROIQ4 A and I2 2-satisfies KB,
then by Prop. 22, the 4-counterpart I4 of I2 4-
satisfies KB. Furthermore (by Prop. 22), I4 4-
satisfies KB. Since KB |=SROIQ4 A, I4 4-satisfies
A, and so by Prop. 22, I2 2-satisfies A. If A =
A, then A must be a SROIQ4 inclusion axiom,
which has the same semantics in SROIQ as A.
And so I2 2-satisfies A.

Example 27. Consider the set KB

{Sedan(c435), Van(c435), Sedan (cid:118) Van}

of axioms from Example 13 (and recall that (cid:118)
has the same semantics as  in SROIQ4). One
can conclude Van(c435) in SROIQ4 but cannot
conclude Sedan(c435), as internal inclusion does
not permit Modus Tollens. However, the latter expression does follow if Sedan (cid:118) Van is replaced
with Sedan  Van. In both cases, the conclusions are sound relative to classical SROIQ, and
they would remain so if, e.g., Sedan(c435) were removed in the second case to make the knowledge
base consistent.

Recall the two accounts of equivalence given ear-
lier. Strong equivalence corresponds most closely
to the classical account, and it is the account used
in Arieli and Avrons logic. It is often more than

one needs, however, since satisfaction and entailment in SROIQ4 are defined using only the positive extensions of axioms. E.g.,

{C(a)} |=SROIQ4 D(a) and
{D(a)} |=SROIQ4 C(a)

hold iff C and D are weakly equivalent. Further-
more, because SROIQ4 is sound wrt SROIQ, if
C and D are even weakly equivalent in SROIQ4,
then the concepts are equivalent in classical
SROIQ. Something similar holds for disjointness.
For instance, if

KB |=SROIQ4 C  D or
KB |=SROIQ4 D  C,

then C and D are classically disjoint wrt KB.

4. Removing Gaps and Gluts

A paraconsistent logic typically rejects one or

both of the below traditional laws.

 Law of Noncontradiction (LNC): (P  P)
 Law of the Excluded Middle (LEM): P  P

SROIQ4 rejects both.
Example 28. Consider KB = {(a)}. In a classical setting, one could infer that a is a member of Person (cid:116) Person. However,
in the 4-
valued setting, this is not the case. E.g., aI /
p+((Person (cid:116) Person)I ) in any 4-valued interpretation I in which PersonI = (cid:104), (cid:105). Similarly,
in the classical setting, one would be able to infer that a is not a member of Person (cid:117) Person.
However, (Person (cid:117) Person)(a) is satisfied in
any 4-valued interpretation I in which PersonI =
(cid:104), (cid:105).

Nevertheless, inserting additional axioms into a
SROIQ4 knowledge base can selectively enforce
the two laws, effectively making the knowledge
base more classical. In particular, if LEM is enforced but not LNC, then additional classical consequences can be drawn from the knowledge base
while at the same time maintaining paraconsis-
tency.

Following Arieli [3], we define the sets EM (KB)
(excluded middle) and EF Q(KB) (ex falso
quodlibet). In any 4-model of KB  EM (KB),
LEM holds for concept assertions: For any indi-

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

vidual a and atomic concept A, either A(a) or
A(a) is satisfied. Similarly, in any 4-model of
KBEF Q(KB), LNC holds: At most one of A(a)
or A(a) is satisfied.
Definition 29. Let KB be a SROIQ4 knowledge
base.

 EM (KB) =def {  (A (cid:116) A) : A =
R.Self or A  NC  No}.
 EF Q(KB) =def {(A (cid:117) A)   : A =
R.Self or A  NC  No}.

Proposition 30. I is a 4-model of EM (KB) iff for
each concept C of KB,

p+(CI)  p(CI) = I.

Proposition 31. I is a 4-model of EF Q(KB) iff
for each concept C of KB,

p+(CI)  p(CI) = .

In [3], adding the analog of EM (KB) to Arielis
logic yields Kleenes K3, while adding the analog
of EF Q(KB) yields LP . The maneuver here can
be seen as simulating similar logics in the DL set-
ting. Both of these logics are deductively stronger
than SROIQ4. Since the purpose of SROIQ4
is to reason paraconsistently, adding EM (KB)
to a knowledge base brings SROIQ4 closer to
SROIQ without abandoning that objective.
Adding both EM (KB) and EF Q(KB) allow
one to simulateto a pointSROIQ reasoning
in SROIQ4. Let I4 be a 4-interpretation of KB.
We define a corresponding 2-interpretation I2 as
shown below. Only the positive extensions are used
in the construction.
 I2 =def I4.
 For each individual a  NI , aI2 =def aI4.
 For each role R  NR, RI2 =def p+(RI4).
 For each C  NC  No, CI2 =def p+(CI4).

Proposition 32. I4 is a 4-model of EM (KB) 
EF Q(KB) iff for each concept C,

CI4 = (cid:104)CI2,   CI2(cid:105).

Proposition 34. If KB is a SROIQ4 knowledge
base lacking axioms of the form R(a, b), Irr(R),
or Dis(R, S), then

KB  EM (KB)  EF Q(KB)

has a 4-model iff KB has a 2-model.

Example 35. Consider the set KB

{Sedan(c435), Van(c435), Sedan (cid:118) Van}

of axioms from Example 13, and let I4 be defined
as follows: I4 = {c435}, c435I4 = c435, and
I4 = VanI4 = (cid:104){c435},{c435}(cid:105). I4 is a 4-
Sedan
valued model of the axioms. However, it is not a
4-valued model of (Van (cid:117) Van) (cid:118) , and so it is
not a 4-valued model of EF Q(KB).
The 2-valued counterpart I2 of I4 is: I2 =
{c435}, c435I2 = c435, Sedan
I2 = VanI2 =
{c435}. This is not a 2-valued model of KB (the
knowledge base has no such models). As implied
by Proposition 34, KB  EF Q(KB) has no 4-
valued models. This can be seen by noting that
c435I  p+(VanI )  p(VanI ) in any 4-valued
model I of KB.

Propositions 33 and 34 do not allow the role assertions above because we cannot add axioms for
roles similar to EM (KB) and EF Q(KB). Such
constructions involving roles are not allowed in
SROIQ or SROIQ4. If roles are taken as biva-
lent, then obviously the ban can be lifted.2

5. Embedding SROIQ4 into SROIQ

To allow the use of classical DL reasoners with
SROIQ4, we provide a translation function 
(Table 5) from SROIQ4 into SROIQ. Each
atomic concept C in a SROIQ4 knowledge base
is left untouched, but the negated concept C becomes the new atomic concept C. In this way
the 4-satisfiable concept C (cid:117) C becomes the 2-
satisfiable C (cid:117) C.3 Below, L is used to refer to the
language of SROIQ4, and L will be used to refer

Proposition 33. Let I4 be a 4-model of EM (KB)
EF Q(KB). If A is a SROIQ4 axiom of KB and
not of the form R(a, b), Irr(R), or Dis(R, S),
then I2 is a 2-model of A iff I4 is a 4-model of A.

2Alternatively, one could attempt to address this issue
by enhancing the language with further constructs for roles,
as is done in [65]. However, the details of this remain to be
spelled out.

3The basic approach is based on a method of translating
paraconsistent propositional logics into classical logic [7,3].

to the language created by adding primed counterparts to all atomic roles and concepts in L. We
also add new atomic concepts CR.Self for each R
in L, and Co for each nominal o  No. These will
be used to stand for the negations of R.Self and
nominals, respectively.
It is clear that if KB is a SROIQ4 knowledge base, then (KB) is a SROIQ knowledge
base. Furthermore, since the transformation does
not syntactically affect role inclusion axioms, if the
role hierarchy is regular in KB, then it will be
regular in (KB). Similarly, the counterpart of a
simple role in KB is itself simple in (KB). As
this is so, it is assured that  does not lead to
undecidability.
As equality between individuals is interpreted
classically in SROIQ4, the most obvious translation of cardinality restrictions sometimes leads
to unnecessary inconsistencies. Example 36 below
illustrates how  avoids it. Section 6 shows that
nominals cause a similar difficulty. In that case,
however, the inconsistencies cannot be removed.

Example 36 ([46], Ex. 1). The assertion
(( 2R.C)  ( 1R.C))(a)

is 4-satisfiable but not 2-satisfiable. If the following
scheme is used to translate cardinality restrictions

( nR.C) = nR.(C)
(  nR.C) = (n + 1)R.(C)
( nR.C) = nR.(C)
(  nR.C) = (n  1)R.(C)

then the assertion remains unchanged and so classically unsatisfiable. The actual
translation ,
however, yields the 2-satisfiable ( 2R.C)  (
1R.C). While concepts C and C intuitively
refer to the same thing, they are formally distinct.
In general, the relationship between K |= P and
the unsatisfiability of K  {P} does not hold in
the paraconsistent context, and so entailment cannot be reduced to satisfiability checking. Never-
theless, there is a strong and useful relationship
between KB and (KB) that allows the use of
satisfiability. If KB entails A in SROIQ4, then
(KB) entails (A) in SROIQ (Proposition 39).
From this, it follows that (KB){(A)} is classically inconsistent.
Let L be the language of SROIQ4. If I
is a 4-interpretation of L, then define the 2-

interpretation I (the primed counterpart of I)
over L as follows:
=def I.

=def p(RI ).

 For each individual a  NI , aI
 For each role R  NRN
R , RI
and RI
 For each atomic concept C  NC, CI
=def p(CI ).
p+(CI ) and CI
 For each nominal o  NO, oI

o =def p(oI ).
and C
 For each role R  NRN
p+((R.Self )I ), and
 For each role R  NR  N
p((R.Self )I ).

R , (R.Self )I

R , C

=def

R.Self =def

=def aI.
=def p+(RI )

=def

=def p+(CI ),

and p(CI) = (C)I

It is clear that there is a 11 correspondence
between the 4-interpretations of L and the 2-
interpretations of L.
Proposition 37. For any 4-interpretation I with
primed counterpart I, and SROIQ4 concept C,
p+(CI) = (C)I
both
hold.
Proposition 38. For any 4-interpretation I, I is a
4-model of SROIQ4 axiom A iff its primed counterpart I is a 2-model of (A).
Proposition 39. For any SROIQ4 knowledge
base KB and axiom A, KB |=SROIQ4 A iff
(KB) |=SROIQ (A).
It is Proposition 39 that shows that reasoning
with SROIQ4 can be performed using the translation  and a classical reasoner.
Example 40. Consider {Sedan(c435), Van(c435),
Sedan  Van, Sedan  Vehicle}. In any 4-
valued model I, it must be the case that c435I 
) and c435I  p+(VanI ), and also

p+(Sedan
c435I  p+((Van)I ) and c435I  p+(Vehicle

).
, c435I  VanI
As such, c435I  Sedan

c435I  Sedan

, where

is
(Van). Note that (Sedan  Van) = Sedan (cid:118)
Van. It is trivial to determine that I must be a
2-valued model of (KB) (Proposition 38).
In agreement with Proposition 37, p+(VanI ) =
and p(VanI) = (Van)I
VanI

Also, Vehicle(c435) is entailed both by the original knowledge base under the 4-valued semantics
and by the translated knowledge base under the 2-
valued semantics, in accordance with Proposition
39.

is the primed-counterpart of I and Van

, and c435I  VanI

= (Van)I

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

Translation of SROIQ4 into SROIQ.

Table 5

(C) = C, where C  NC
(o) = o, where o  No

() = 
() = 
(E (cid:117) D) = (E) (cid:117) (D)
(E (cid:116) D) = (E) (cid:116) (D)
(R.C) = R.(C)
(R.C) = R.(C)
(R.Self ) = R.Self
( nR.C) = nR.(C)
( nR.C) = nR.(C)
(C(a)) = (C)(a)

(R(a, b)) = R(a, b)
(Ref (R)) = Ref (R)
(Dis(R, S)) = {R (cid:118) S, S (cid:118) R}
(C  D) = (C) (cid:118) (D)
(C  D) = (C) (cid:118) (D)
(C  D) = {(C  D), (D  C)}
(w (cid:118) Rn+1) = w (cid:118) Rn+1, with w = R1  . . .  Rn

(C) = C, where C new
(o) = Co, o  No and Co new
(C) = (C)
() = 
() = 
((E (cid:117) D)) = (E) (cid:116) (D)
((E (cid:116) D)) = (E) (cid:117) (D)
((R.C)) = R.(C)
((R.C)) = R.(C)
(R.Self ) = CR.Self
( nR.C) = (n + 1)R.(C)
( nR.C) = (n1)R.(C)
(a = b) = (a = b)
(R(a, b)) = R(a, b)
(Irr(R)) = Ref (R)

material inclusion

internal inclusion
strong inclusion
role inclusion

6. Partial Paraconsistency

SROIQ4 is intended to avoid the explosions
caused by inconsistencies. Unfortunately, some
SROIQ4 knowledge basese.g., {( (cid:117) )(a)}
have no 4-models, and so SROIQ4 is only partially paraconsistent. In some cases, inconsistent
knowledge bases can be re-written into a classically equivalent form that avoids explosion. How-
ever, this is not the case in general.
In [50], it was reported that consistency can
be maintained in SHIQ4 by replacing  and
 with classically equivalent formulas. Specifi-
cally, let SF (KB) be the knowledge base obtained
by replacing each  with A (cid:116) A and each 
with A (cid:117) A (where A is a new atomic concept).
SF (KB) is guaranteed to possess a 4-model. How-
ever, nominals can conflict with cardinality restric-
tions, and so the analogous claim does not hold for
SROIQ4. For instance, any assertion of the form
 n + 1R.{a1, . . . , an}(b) has no 4-valued models.4
More simply, nominals can directly conflict with
inequality assertions.

4This is so regardless of whether nominals are interpreted

classically or as done here.

Example 41. Suppose that the unique name assumption is enforced in a given knowledge base
for days of the week (using axioms monday =
tuesday, tuesday = wednesday, etc.). Then the
following set of assertions has no 4-valued models.

AvailableDay  {monday, wednesday},
AvailableDay(tuesday)

In order to maintain satisfiability, either cardinality restrictions (and inequality assertions with
them) or nominals must go.

Proposition 42. If C is a concept description in
which nominals, , and  do not appear, then C
is 4-satisfiable.
Proof. Let n be the largest integer used in an 
nR.C restriction. Let CI = (cid:104), (cid:105) for each C 
NC, where || = n+1. For each R  NR, let RI =
(cid:104)2, 2(cid:105) and (R.Self )I = (cid:104), (cid:105). We induct on
a the degree of C. If C  NC, the claim clearly
holds. Examining the SROIQ4 semantics shows
that where C is D, D (cid:116) E, D (cid:117) E, R.D, R.D,
 nR.D, or  nR.D, CI = (cid:104), (cid:105).
Proposition 43. If KB is a SROIQ4 knowledge
base in which inequality assertions and nominals
do not appear, then SF (KB) has a 4-model.

Proof. We use the interpretation I above. For simple assertions C(a) and R(a, b), the claim obviously holds. Since the anti-extension of each role
R is 2, R(a, b) also holds (we here reasonably
assume that R = U ), as do Ref (R), Irr(R), and
Dis(R, S). Since for all concepts C and D, CI =
DI = (cid:104), (cid:105), it follows that C  D and C  D
hold. For C  D, observe that I  p(CI) = ,
and so C  D must be true in I. The cases for
RIAs are similar to C  D.
Proposition 44. If C is a SROIQ4 concept description in which , , , and  do not appear,
then C is 4-satisfiable.
Proof. Let I = {d}, CI = (cid:104){d},{d}(cid:105) for each
C  NC  No, and aI = d for each a  NI . For
each R  NR, let RI = (cid:104){(d, d)},{(d, d)}(cid:105) and
(R.Self )I = (cid:104){d},{d}(cid:105). Inducting on the degree
of C, if C  NC  No or C = R.Self , then the
claim holds. Examining the semantics of the concept description operators shows that the claim
holds for C, C (cid:116) D, C (cid:117) D, R.C, and R.C.
Proposition 45. If KB is a SROIQ4 knowledge
base in which inequality assertions, , and , do
not appear, then SF (KB) has a 4-model.
Proof. Using I above, consider each type of axiom.
For C(a) and R(a, b), the claim obviously holds.
Since p(RI ) = {(d, d)}, R(a, b) also holds (we
assume that R = U ). It is clear that Ref (R),
Irr(R), and Dis(R, S) also hold. Since for all concepts C and D, CI = DI = (cid:104){d},{d}(cid:105), C  D
and C  D hold. For C  D, I  p(CI) = ,
and so I 4-satisfies C  D. The cases for RIAs
proceed similarly.

One obvious solution to the conflict between
cardinality restrictions and inequality assertions,
on the one hand, and nominals on the other is
to use pseudo-nominals in place of real nomi-
nals. E.g., instead of specifying the days of the
week with the nominal {monday, tuesday, . . .}, we
represent the individuals with classes M onday (cid:116)
T uesday (cid:116) . . .. In practice, this is sometimes done.
However, it is well known that the ontology obtained via the substitution is not classically equivalent to the original, and furthermore that the use
of pseudo-nominals leads to intuitively incorrect
results. Its the same in the 4-valued context. How-
ever, to achieve paraconsistency, something of the

classical logic must be abandoned, and for many
applications, the loss of real nominals might be
acceptable.

7. Tractable DLs

The latest revision of the Web Ontology Language (OWL 2) [30] features profiles having polynomial time complexities [57]. Below, we examine the tractable languages upon which these profiles are based. In particular, we examine EL++,
which corresponds to OWL 2 EL; DL-Lite, which
corresponds to OWL 2 QL; and Horn-SHOIQ,
which is an extension of OWL 2 RL. We focus on
whether reasoning with the four-valued semantics
presented earlier can preserve the tractability of
these logics. Specifically, we focus on whether the
reduction to classical logics yields formulas still
within a tractable logic. It turns out that it does,
provided internal inclusion is used. For material
and strong inclusion, however, the reduction produces formulas outside of the tractable fragment.
7.1. EL++

The syntax of EL++, which restricts that of
SROIQ, is shown in Table 6. RIAs of the form

R (cid:118) S and R1  R2  . . .  Rn (cid:118) S,

where Ri, S  NR, are also allowed. Expressions
involving concrete domains are permitted, too, but
we do not consider them here. The semantics of
EL++ is the same as that of SROIQ.
The knowledge base {A (cid:118) , A(a)} shows that
EL++ knowledge bases can be inconsistent. Inconsistency is caused specifically by the presence of
, and consistency can be restored by replacing
each occurrence of  with the classically equivalent A (cid:117) A (where A is a new atomic con-
cept). Doing this is unproblematic: since the negation appears in front of an atomic concept, it will
be eliminated when processed by . In general, applying  to an EL++ concept (or a concept containing A) produces an EL++ concept.

Unfortunately, the use of the paraconsistent inclusion operators causes problems. Applying  to
C  D yields (C) (cid:118) (D), where (C) and (D)
are EL++ concepts. As such, (C) (cid:118) (D) is still
an EL++ axiom, and so internal inclusion does

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

EL++ and Horn-SHOIQ. The Horn-SHOIQ normal form used is due to [43]. A, A1, A2, B are atomic concepts or
nominals. EL++ ontologies may also contain RIAs.

Table 6

Language
EL++

GCIs
C (cid:118) D, where
C, D =  |  | {a} | C1 (cid:117) C2 | r.C

Horn-SHOIQ  (cid:118) A, A (cid:118) , A1 (cid:117) A2 (cid:118) B,

R.A (cid:118) B, A (cid:118) R.B, A (cid:118) S.B,
A (cid:118) nR.B, A (cid:118) 1R.B.

Tractability
Preservation
yes (only for )

yes (only for )

not destroy the tractability of EL++. However, applying  to GCIs using  and  yield formulas
not expressible in EL++, and so the guarantee of
tractability is lost.

Example 46.

2) (cid:118) B
(A1 (cid:117) A2  B) = (A
(A1 (cid:117) A2  B) = {A1 (cid:117) A2 (cid:118) B,
1 (cid:116) A

B (cid:118) (A

1 (cid:116) A

2)}

Given the above discussion, the following theo-

rem holds.
Proposition 47. For any EL++ knowledge base
KB and axiom , KB |=4  iff (KB) |=2 ().
If all GCIs use , then (KB) is an EL++ knowledge base.

Proof. The first claim holds in virtue of Proposition 39. Because applying  to any EL++ concept,
RIA, or GCI C  D yields an EL++ expression,
the second claim holds.

Furthermore, since there is no negative role constructor to cause further inconsistencies in EL++,
roles and RIAs can be interpreted classically (
would not alter them, anyway).

7.2. Horn-DLs

We focus on Horn-SHOIQ [43]. The conclusions obtained for it hold for other Horn-DLs as
well, including Horn-SHOIQ [56]. Its assumed
that Horn-SHOIQ ontologies are in the normal
form [43] shown in Table 6.

All of the Horn-SHOIQ concept constructors
result in Horn-SHOIQ expressions under  except  1R.B, because ( 1R.B) = 1R.B.
However, we can remain within Horn-SHOIQ by
post-processing the result of  as shown below.

 Horn(C) = C, if C is

||A|A1 (cid:117) A2|R.A|S.B|  nR.B;

 Horn(1R.B) = 1R.B= (where B= is a
new concept), with B= (cid:117) B (cid:118)  asserted;
 Horn((1R.B)) = 2R.B.

The last item is needed for processing inclusion
axioms involving 1R.B:
 Horn(A  1R.B) =
{A (cid:118) 1R.B=, B= (cid:117) B (cid:118) }
 Horn(A  1R.B) =
{A (cid:118) 1R.B=, B= (cid:117) B (cid:118) }
 Horn(A  1R.B) =
{A (cid:118) 1R.B=, B= (cid:117) B (cid:118) , 2R.B (cid:118) A}
Given the above way of transforming axioms,
Horn(A  1R.B) is permissible, but the transformations for material and strong inclusion axioms are not. The example used for EL++ also
works as a counterexample for the use of  and 
in Horn-SHOIQ. Since A1 (cid:117) A2 (cid:118) B is allowed
in other Horn-DLs, the same conclusion holds for
them. And so, if we wish to preserve the structure
of tractable Horn-DLs, we must use only internal
inclusion.
Proposition 48. If KB is a Horn-SHOIQ knowledge base using only -axioms, then it follows
that Horn((KB)) is a Horn-SHOIQ knowledge base.

Given the revised  function, the conclusion obviously holds. The revised function also works for
DLP [28], which corresponds to OWL 2 RL.

Observe that the additional transformations are

sound, in the following sense.
Proposition 49. Let KB  {A} be a set of HornSHOIQ assertions, with all GCIs being -
axioms. If Horn((KB)) |=2 Horn((A)), then
(KB) |=2 (A).

7.3. DL-Lite

The logics of the DL-Lite family are the maximal DLs supporting efficient query answering over
large numbers of instances. The usual DL reasoning tasks performed in the DL-Lite family are
known to be polynomial in the size of the KB (and
LOGSPACE in the size of the ABox), and query answering is LOGSPACE in the size of the ABox [12].
Moreover, the DL-Lite family allows for separation
between TBox and ABox reasoning during query
evaluation. In particular, ABox reasoning can be
carried out by an SQL engine [12].

We focus on two members of the DL-Lite family:
DL-Litecore, which forms the kernel of the family;
and DL-LiteR, which corresponds to OWL 2 QL.
Concepts and roles of the DL-Lite family are

formed using the grammar [12]

R . Table 7

B ::= A | R
C ::= B | B

R ::= P | P 
E ::= R | R
where A  NC, P  NR, and P   N
shows the syntax definitions of GCIs and RIAs.
A paraconsistent semantics similar to that described for SROIQ can be provided for DLLitecore and DL-LiteR. Roles are 4-valued (Table
8), but R and R are treated differently than
in SROIQ4. Intuitively, p+((R)I) is set of individuals x positively related to some y via R, while
p((R)I ) is the set of individuals x negatively
related to all y via R.
The knowledge base {B (cid:118) A, B(a), A(a)}
is classically unsatisfiable in DL-Litecore. {P1 (cid:118)
P2, P1 (cid:118) P2, P1(a, b)} is classically unsatisfiable
in DL-LiteR. In the 4-valued context, however, every knowledge base is satisfiable.

Proposition 50. Every DL-Litecore and DL-LiteR
knowledge base is 4-satisfiable.

The DL-Lite -transformations are given below.
It is clear that the transformation of internal inclusion axioms stays within DL-Lite.

Definition 51. Where R and E are roles, the DLLite  transformations are defined inductively.

 Lite(R (cid:118) E) = Lite(R) (cid:118) Lite(E);
 Lite(R) = R, where R is a new role name;
 Lite(R) = R;
 Lite(R) = R=, where R= is a new role
name and R= (cid:118) R;

For material inclusion and strong inclusion, because negated concepts are not allowed to occur
on the left of a GCI, they do not preserve the DLLite structure. In contrast, the transformation of
internal inclusion remains within DL-Lite. How-
ever, observe that the transformation

Lite(A  R) = {A (cid:118) R=, R= (cid:118) R}

introduces a role inclusion axiom. In general, a DLLitecore knowledge base might be transformed into
a DL-LiteR knowledge base. Regardless of this, the
transformation preserves consequences.

Proposition 52. If KB is a DL-Lite knowledge
base and A an axiom (in which neither  nor 
are used),

KB |=4 A iff Lite(KB) |=DL-LiteR Lite(A).

8. ELP

ELP [44] is a tractable rule language combining features of EL++ with Horn-like rules. Syntac-
tically, ELP resembles Datalog or logic program-
ming, in the sense that well-formed formulas are
rules of the form BH, where B and H are both
conjunctions. In ELP, however, each conjunct is
either a concept atom C(t) or a role atom R(t1, t2),
where C is an EL++ concept description, R is an
EL++ role, and each t is a term (an individual
from NI or else a variable from a set V of vari-
ables). Each rule is implicitly universally quantified (there are no free variables). To ensure de-
cidability, it is assumed that there is a fixed set
Vs  V of safe variables; these range only over
named elements of the domain of discourse.

Below, we present a paraconsistent semantics for
ELP, defining what we call ELP4. The semantics
is similar to one provided for a first-order logic
defined by Lang [45], the primary differences being that we make use of internal implication 
where Lang uses his own implication operator, and

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

Language

DL-Litecore

DL-LiteR

GCIs
B (cid:118) C
B (cid:118) C

Table 7

DL-Lite Family

Role Inclusions

Tractability preservation

yes (only for )
yes (only for )


R (cid:118) E

Table 8

Four-valued semantics for expressions in DL-Lite

Syntax


Semantics

(cid:104){x | y, (x, y)  p+(RI )}, {x | y, (x, y)  p(RI )}(cid:105)
(cid:104){x | y, (x, y)  p(RI )}, {x | y, (x, y)  p+(RI )}(cid:105)

we include safe variables (these could be omitted,
however, yielding an undecidable logic). The rules
described below confine themselves to what are
essentially unary and binary predicates, but it is
clear that the semantics can be easily modified to
apply to rules using predicates of arbitrary arity.
Furthermore, in order to ensure tractability, ELP
rules conform to certain syntactic restrictions. We
do not discuss the restrictions below. However, the
embedding into classical ELP maintains the syntactic structure of the rules, and so tractability is
preserved. Also, since the restrictions are not part
of the discussion, it is clear that most of the definitions and results below apply equally well to
rule-bases that do not satisfy them.
As originally defined, a rule base for ELP consists of rules of the form BH, where  is just
material implication. In moving to the 4-valued
context, we also allow rules using internal () and
strong () implication. 4-valued interpretations
for ELP rule bases are defined essentially as they
were earlier. However, semantics for rules must be
given. This is done by defining two forms of satis-
faction: t-satisfaction (|=t) and f-satisfaction (|=f ).
The notation |=t and |=f is adopted from Lang
[45].
Definition 53. An element d  I is named in
interpretation I iff there is an a  NI such that
aI = d. Otherwise, d is unnamed in I. A variable
assignment I for I is a function from V  NI to
I such that
1. if t  NI , then I (t) = tI;
2. if t  VS, then I(t) is named in I.
If I is an interpretation and I an assignment for
I, then I [x/d] is a function from V  NI to I
such that for all t  NI  V ,

1. if t = x, then I[x/d](t) = I(t);
2. otherwise, I [x/d](t) = d.
Observe that if x  Vs but d is not named in I,

I [x/d] is not a valid assignment.
Definition 54. Let I be an interpretation and I a
variable assignment for I.
1. If C is a concept description and t a term,

2. If R is a role and t1 and t2 terms,

3. For conjunction (P  Q),

4. For material implication (PQ),

 I, I |=t C(t) iff I (t)  p+(CI ).
 I, I |=f C(t) iff I (t)  p(CI ).
 I, I |=t R(t1, t2) iff (I (t1), I (t2)) 
p+(RI ).
 I, I |=f R(t1, t2) iff (I(t1), I (t2)) 
p(RI).
 I, I |=t (P  Q) iff I, I |=t P and
I,  |=t Q,
 I, I |=f (P  Q) iff I, I |=f P or
I,  |=f Q,
 I, I |=t (PQ) iff I, I |=f P or
I, I |=t Q,
 I, I |=f (PQ) iff I, I |=t P and
I, I |=f Q,
 I, I |=t (P  Q) iff I, I |=t P or
I, I |=t Q,
 I, I |=f (P  Q) iff I, I |=t P and
I, I |=f Q,
 I, I |=t (P  Q) iff (I, I |=t P
or I, I |=t Q) and (I, I |=f P or
I, I |=f Q).
 I, I |=f (P  Q) iff I, I |=t P and
I, I |=f Q.

5. For internal implication (P  Q),

6. For strong implication (P  Q),

7. For (x)P,

(a) if x  Vs,

ELP, provided  is used. As with the tractable description logics, the other inclusion operators yield
structures outside of the language (one could nevertheless use  and  as well, translating them
as indicated in Table 5. Doing so would not yield
meaningless expressions, but the results would not
constitute expressions of ELP). Since the structure of the rule base is left intact by the transfor-
mation, the syntactic constraints on ELP rules are
met.

(C(t)) = (C)(t)
(R(t1, t2)) = (R)(t1, t2)
(Q  R) = (Q)  (R)
(Q  R) = (Q)  (R)
(Q  R) = (Q)(R)
((x)Q) = (x)(Q)

Define (KB) as {(R)|R  KB}. Earlier,
we defined the primed counterpart I for each
4-interpretation I, and we showed that for any
SROIQ concept C, p+(CI ) = (C)I
and
p(CI ) = (C)I
. We show here that for any
rule r : B  H, I 4-satisfies r iff I 2-satisfies
(r).5
Proposition 58. If P is a well-formed formula of
ELP, I is a 4-interpretation of P, and I is the
primed counterpart of I, then for any assignment
I , I, I |=t P iff I, I |= (P).
From this, the preservation of consequences readily follows.

Proposition 59. Let KB be an ELP rule base and
P a well-formed formula of ELP. KB |=ELP 4 P
iff (KB) |=ELP (P).
Example 60. The following set RB of (normal
form) ELP rules is classically inconsistent.

1. motherOf(mary, eve)
2. fatherOf(tom, eve)
3. divorced(tom)
4. loves(x, y)  happy(x)
5. motherOf(x, y)  fatherOf(z, y)  loves(x, z)
6. motherOf(x, y)  fatherOf(z, y)  loves(z, x)
7. divorced(x)  unhappy(x)
8. happy(x)  unhappy(x)  (x)

5Observe that the set of variables is fixed, regardless of
whether one is talking about I or I; furthermore, the interpretation of individuals and variables is the same in both
interpretations. And so safety is not affected.

(b) if x / Vs,

 I, I |=t (x)P iff I, I [x/d] |=t P
for all named d  I ,
 I, I |=f (x)P iff I, I [x/d] |=f P
for some named d  I.
 I, I |=t (x)P iff I, I[x/d] |=t P
for all d  I ,
 I, I |=f (x)P iff I, I [x/d] |=f P
for some d  I .

Definition 55. Let I be an interpretation, P a wellformed formula of ELP , and K a set of such for-
mulas.
1. I 4-satisfies P (I is a 4-model of P) iff
2. K entails P (K |=ELP 4 P) iff every 4-model

I, I |=t P for each assignment I .
of K is a 4-model of P.

According to [44], every classical ELP rule base
can be converted into an equisatisfiable one via
the transformation rules shown in Table 9. Since
there are three different types of rules, the analogous claim is problematic in the 4-valued context.
Nevertheless, if rules are interpreted using , conversion to normal form preserves 4-satsifiability.

Definition 56. Let RB be an ELP rule base utilizing only -rules. RB is in normal form iff for
each rule B  H,
1. Each concept atom in B is of the form C(t),
2. Each atom in H is of the form A(t), R.B(t),

where C  NC  No  {},

or R(t, u), where
(a) A  NC  No  {},
(b) B  NC,
(c) R  NR, and
(d) t, u  V  NI .

3. Every variable in H appears in B.
Proposition 57. Let KB be a -rule base and KB
the result of applying one of H1,. . .,H4, B1,. . .,B3
from Table 9 to KB. KB is 4-satisfiable iff KB
is.

We define the sequence KB0, KB1, . . ., where
KB0 = KB and KBn+1 is the result of applying
one transformation rule to KBn. Let KBN be the
first n such that KBn = KBn+1. KBN is in normal form [44]. Given the above proposition, it is
clear that KBN is satisfiable if and only if KB is.
The transformation  can be extended in a
rather simple fashion to embed ELP4 into classical

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

Converting a classical ELP rule BH to normal form (taken from [44]).

Table 9

H1
H2

H3

H4

B1

B2
B3

If (C (cid:117) D)(t)  H, then replace it with C(t)  D(t).
If (x)  H, then delete it. If H would then be empty, delete r from KB.
If H contains a variable x not occurring in B, add (x) to B.
If R.C(t)  H with C / NC , replace it in r with R.A(t) where A is new to KB, and add
the rule A(x)C(x).
If (C (cid:117) D)(t)  B, then replace it with C(t)  D(t).
If (x)  B, delete r from KB.
If R.C(t)  B, replace it with R(t, x), C(x), where x is new.

Because of the occurrence of , it is also inconsistent under the 4-valued semantics. This can be
remedied by replacing rule 8 with 8 (to form RB).
8. happy(x)  unhappy(x)  A(x)  A(x).
Though the negation is not technically allowed in
EL++, upon transformation by , A(x)A(x)
becomes A(x)  A
(x), which is allowed. Apart
from this and the replacement of  with , the
rule base is otherwise unaltered.6
is 4-satisfiable. Further-
more, (RB) is 2-satisfiable. In both, one may
infer happy(tom) and unhappy(tom) (under the
appropriate semantics). However, in neither case
can one infer an arbitrary expression such as
unhappy(mary).

We note that RB

If one were to attempt to transform the rule base
using strong implication (according to Table 5),
then rules 5, 6, and 8 would introduce disjunctions.
For instance,
1 motherOf(x, y)  fatherOf(z, y)loves(x, z)

2 loves(x, z)motherOf(x, y)  fatherOf(z, y).

This is outside of the rule language.

9. Empirical Evaluations

The last two sections indicate that, for some
description logics and their rule-based extensions,
internal inclusion must be used in order to guarantee tractability. However, even in cases where
the translation does not lead to expressions of a
strictly more expressive languagee.g., as in the
case of SROIQthe choice of operator can have

6Though not explicitly stated in [44], A rule of the form
BC(t)D(t)... can be split into two rules, BC(t)...
and BD(t).... We will assume that such transformations
are also performed when converting to normal form.

a significant effect on performance. While embedding internal inclusion axioms into a classical DL
potentially leads to the creation of new concept
names, it typically does not increase the number
of inclusion axioms,7 and the translation eliminates all occurrences of negation. In contrast, embedding strong inclusion axioms essentially doubles both the number of concept names and the
number of inclusion axioms. Embedding material
inclusion introduces negation into the left-hand-
sides of axioms, and it potentially leads to the introduction of a greater number of new concepts
than does internal inclusion. Though the size of
the translation is linear with regard to the size
of the original regardless of the inclusion operator used, these differences can have a significant
impact and make reasoning with strong and material inclusion more difficult than reasoning with
internal inclusion alone.

We have performed a set of empirical tests
which, though tentative and limited in nature, do
appear to support this claim. Several knowledge
bases (either downloaded or else programmatically
created) were translated according to the  function described in Section 5, and a DL reasoner
(Pellet [67]) was used to process both the original knowledge bases and their translations. Specif-
ically, the reasoner computed class and property
hierarchies, determined class membership for in-
dividuals, and checked for consistency. Some but
not all of the original ontologies were satisfiable.8
The translations were performed using a custom Java library implementing the  function and

7This is not true for the paraconsistent versions of Horn
DLs and DL-Lite, as discussed earlier; for those logics, new
axioms are added.

8The number of unsatisfiable concepts in each ontology
is: amino-acid (0), pizza (2), proton (15), tambis-patched
(144), university-1 (0), university-2 (0), wine (0).

based on methods provided by the OWL API [33].
Three distinct translations of each knowledge base
were created, each interpreting the inclusion axioms of the original according to one of the three
new operators.

Two knowledge bases were created specifically
for the tests using the Lehigh Benchmark (LUBM)
suite [27]. The suite provides a tool for generating ontologies populated with a variable number
of universities, departments, professors, students,
etc. For the evaluations, the default settings of
the tool were used, but the resulting knowledge
bases were manually edited.9 Disjoint class axioms
were also manually added (asserting, e.g., that as-
sistant, associate, and full professors are disjoint
classes). Inconsistent versions of the knowledge
bases were also created by inserting same-as assertions (stating, for instance, that a particular student was identical to a publication).

For the experiments, each ontology was processed 21 times (without restarting between runs),
and the time required to complete all computations was recorded. The first runwhich involved
memory allocation not occurring in subsequent
runswas ignored in each case. A 15 minute timelimit was used; runs requiring more time than that
were terminated. All experiments were performed
on a consumer desktop computer.

Tables 10 and 11 describe the knowledge bases
evaluated. The relative sizes of the translations are
given in Table 12. As shown there, translating according to strong inclusion typically increases the
number of concept names by a factor of 2. The
number of inclusion axioms is not doubledit is
assumed that this is due to the presence of duplicate axioms that are eliminated by the OWL
API. As far as the concepts are concerned, factors
greater than 2 can be attributed to the presence of
nominals in the input. Factors less than 2 are also
possible, as when concepts only appear in positive
concept assertions. Using material inclusion or internal inclusion also increases the number of con-

9The smaller knowledge base consisted of 5 departments,
25 research groups, 1000 (graduate and teaching) courses,
100 professors (lecturer, assistant, associate, full), 1000 students (graduate and undergraduate), 500 publications, and
200 teaching and research assistants. The larger instance
contained roughly 2-8 times these numbers. In both cases,
10 universities were used.

cepts. However, this number is smaller than when
strong inclusion is used.

Table 13 displays the average time required to
process the knowledge bases and their transla-
tions. When internal inclusion was used, the test
system was in each case able to process the translation (the time required was significantly greater
than that needed for the original, however). In
contrast, if either strong or material inclusion was
used, processing the translation was typically not
possible. The reasoner either ran out of memory,
or else execution was manually terminated due to
the time-limit. The inability to process knowledge
bases based on material inclusion can be explained
by the introduction of negation into axioms. This
does not occur when internal inclusion is used.

10. Conclusions and Related Work

In this paper, we have described several paraconsistent description logics, including SROIQ4,
and we have shown that they are classically sound
and that their embeddings into classical logics are
consequence preserving. It should be pointed out
that since the most recent version of OWL [30] is
based in large part on SROIQ, it is not unreasonable to suppose that SROIQ4 has real practical value. Inconsistencies often arise in real world
situations, and the theory surrounding SROIQ4
allows the use of existing classical OWL inference
engines to reason correctly even over inconsistent
OWL knowledge bases.

The issue of handling inconsistency is a common
one in the field of knowledge representation and
reasoning, and also more generally in the context
of data management. Beyond multivalued paraconsistent logics, several other approaches have
been studied. For instance, regardless of whether
they are paraconsistent or not, the various nonmonotonic logics that have been developed over
the years (e.g., Reiters default logic [63], logic
programming under the answer-set [25] or wellfounded [26] semantics, defeasible logic [58]) can
be viewed at least in part as attempts to resolve
conflicts between assertions. E.g., the extended

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

Name

Amino Acid

Pizza

Proton

TAMBIS

Wine

University 1

Table 10

Test knowledge bases

Description

An ALCF(D) ontology pertaining to amino-acids. http://www.co-ode.org/ontologies/
amino-acid/2006/05/18/amino-acid.owl
A SHOIN ontology making frequent use of - and -restrictions, and infrequent use of
nominals. http://www.co-ode.org/ontologies/pizza/2007/02/12/
A SHI(D) ontology using concepts from the PROTON ontologies, with disjointness axioms
added. http://proton.semanticweb.org/
A SHIN ontology for the molecular biology domain. http://owl.cs.manchester.ac.uk/
repository/ (tambis-patched.owl)
A SHOIN (D) ontology making heavy use of nominals. http://www.w3.org/TR/
owl-guide/wine.rdf
A ALEHI+(D) ontology made using the Lehigh Ontology Benchmark Suite [27]. DisjointClasses axioms were manually added. A separate inconsistent version was created by
adding SameAs assertions for individuals in disjoint classes. http://swat.cse.lehigh.edu/
projects/lubm/

University 2

A larger version of University 1. An inconsistent version of the ontology was also generated.

Table 11

Knowledge base sizes

Amino Acid
Pizza
Proton
TAMBIS
Wine

University 1
University 2

Concepts

Ind.

GCIs

Concept Assert.

(Obj) Role Assert. Disjoint Concepts

Equiv Concepts

Table 12

Size increase (relative to original)

Ontology

Internal

Concept
Strong Material

Internal

GCIs
Strong Material

Amino Acid

Pizza
Proton
TAMBIS
Wine
University 1
University 2

Disjoint class axioms and equivalent class axioms
were interpreted as sets of inclusion axioms.

Table 13

Average classification times, in milliseconds.

Knowledge Base

Original

Internal

Strong

Material

Amino Acid
Pizza
Proton
TAMBIS

Wine
University 1
University 1 (Inconsistent)
University 2
University 2 (Inconsistent)

N/A

N/A

time-limit

time-limit

mem-limit

302850

mem-limit

mem-limit

time-limit

time-limit

time-limit

mem-limit

time-limit

mem-limit

time-limit

mem-limit

time-limit

mem-limit

Computer: AMD Athlon II X2, 6GB DDR2 RAM, Java SE 6 (64-bit, 4GB RAM).
time-limit: program was manually terminated after 15 minutes.
mem-limit: program exceeded available memory (and automatically terminated).

logic program

p :  p
p :  p
q : p
q : p

possesses two answer sets ({p, q}, and {p, q}),
and q is considered a consequence of the program.
The first two rules can be seen as asserting presumptive (and conflicting) evidence for both p and
p, and the conflict is resolved by disallowing both
p and p from appearing in a common answer
set. The answer-set semantics, like Reiters default
logic and the other common semantics for logic
programs, espouses the principle of explosion. The
mechanism by which conflict is handled is default
negation, and there are programs that are inherently inconsistent (regardless of whether default
negation appears); drawing reasonable conclusions
from such programs is impossible under the most
common semantics for them. Nevertheless, alternative paraconsistent semantics for logic programs
[19,20,71,72], and for default logic [29,73,74], have
been proposed.

The most obvious distinction between such formalisms and the paraconsistent logics presented
here is that the former are nonmonotonic whereas
the latter (like the underlying description logics
upon which they are based) are monotonic. While
nonmonotonicity is justifiable in many cases (ar-
guably, it is required if one is to model certain
forms of reasoning), it typically comes with a com-

putational penalty. Unrestricted default logic is
not recursively enumerable, for instance. Further-
more, it would be difficult to embed an inherently
nonmonotonic logic into a monotonic one, which
is what we have done here with the paraconsistent
description logics.

Even within the paraconsistent reasoning com-
munity, there are approaches for achieving paraconsistency that differ from the multivalued approach we have described here. Ja skowskis [23,38]
discussive or discursive logics (or logics of dis-
cussion) are considered to the first paraconsistent
logic in modern times. In such logics, a proposition may be viewed as true whenever it has been
proposed by a participant in a discussion. Since it
is possible for participants to disagree, statements
can be both true and false. The semantics for discussive logics are typically specified indirectly by
a modal logic (e.g., S5). A sentence P of the the-
ory, called a discussive assertion, would be treated
as P (possibly P) and interpreted according
to the modal logic. As in the multivalued logics
presented here, many common rules of inference
do not naturally hold under this interpretation. In
particular, Modus Ponens fails, as does the Rule
of Adjunction ({P,Q}/  P  Q). Ja skowski thus
developed both a discussive implication and a
discussive conjunction.

Newton da Costa was the first to develop and
publish first-order paraconsistent logics in the
1950s and 1960s, and for that reason he is often
considered the father of paraconsistency [16,18].
Ja skowskis work was confined to the propositional level and was not widely known at the time

Frederick Maier, Yue Ma, Pascal Hitzler / Paraconsistent OWL and Related Logics

[17]. Da Costa is best known for his C-systems,
which constitute an infinite hierarchy of paraconsistent logics. Their defining characteristic is that
consistency is explicitly represented in the object
language itself. I.e., a new unary operator  is
added, with P stating that P is consistent. The
logics are typically defined axiomatically, avoiding explosion by replacing certain classical axioms with weakened counterparts. Semantically,
the logics break the truth-functional connection
between a sentence and its negation. Much later,
Carnielli, Coniglio, and Marcos would generalize
the C-systems, defining the logics of formal inconsistency [14,15].

Neither discussive logic nor the logics based on
da Costas have in our opinion received much coverage in fields related to computer science. Within
the philosophical and mathematical communities,
discussive logic has received quite a bit of crit-
icism, particularly for the failure of Adjunction.
In our view, however, many critics appear simply to be unaware of Ja skowskis work on discussive conjunction. Both sorts of logic have received criticism for breaking the usual behavior of
negation, conjunction, and disjunction (e.g., in at
least some of C-systems, De Morgans laws do not
hold). One of the few frameworks utilizing a logic
of formal inconsistency in an information system
is described in [21]. There, ideas from the stable
model and well-founded semantics for logic programs are combined to create a paraconsistent version of Datalog.

The formalisms we have noted above allow an
assertion and its negation to be simultaneously
true (in some sense), and the formalisms permit
reasoning under these conditions. In a way, such
systems can be viewed as tolerating inconsistency.
There are indeed a great many other approaches to
handling inconsistency (see, e.g., the papers found
in [11]). In one common view, inconsistencies in a
knowledge base are taken as errors, and algorithms
are developed to identify the errors and repair the
knowledge base. Classic examples of this would be
Reiters work [64] on fault diagnosis and the wide
body of literature devoted to belief revision and
truth maintenance systems [1,22,24]. Other work
focuses on the identification of answers to queries
that are consistent with repaired versions of inconsistent knowledge bases (regardless of whether
or not the knowledge base actually has been re-
paired) [2,13]. We note that the view underlying

such worki.e., that inconsistencies are faults or
errors in the systemis often correct, and in such
cases it is important to identify the sources of the
error. This is something that the multivalued approach described here does not do. In the semantic
web context, work on ontology debugging and determining justifications in ontologies (e.g., [40,75])
may also be considered relevant.

Returning to multivalued logics, the logics presented in this paper are related to earlier 4-valued
description logics developed by Patel-Schneider
[59,60] and also Straccia, Sebastiani, and Meghini
[54,55,68,69]. SROIQ4 is similar to these in the
sense that all are 4-valued and essentially based
on the logics of Belnap, but the earlier logics correspond neither syntactically nor semantically to
SROIQ4. The earlier logics are in fact syntactically closer to ALC and SHIQ, but there are
differences even when restricted to these. PatelSchneiders logic does not allow concept union
or existential role restrictions, and cardinality restrictions are unqualified. Equality in the logic is
nonclassicalspecifically, it is 4-valued, reflexive,
and symmetric, but it is not necessarily transitive.
Among other things, this affects the definition of
cardinality restrictionsconcepts no longer have
a single cardinality in the logic.
Straccia et al. [54,55,68,69] provide 4-valued semantics for ALC-like languages similar to but distinct from Patel-Schneiders, and in some cases
sound and complete sequent calculi are provided
[55,69]. The interpretations for existential and universal role restrictions are the same as those used
in SROIQ4 (from a syntactic and semantic stand-
point, the ALC fragment of SROIQ4 appears to
identical to the logic described in [68]), which is
distinct from those of Patel-Schneider. Subsumption in the logics is what we have called weak
subsumption: C is subsumed by D iff p+(CI) 
p+(DI) in every 4-interpretation. Similarly, equivalence is the weak equivalence defined earlier.
Since cardinality restrictions are not used in the
logics, equality is not addressed.
The work here on SROIQ4 and related logics
constitutes an extended version of materials appearing in both [46] and [53] (neither ELP nor
the empirical tests are discussed in those works,
however), which are in turn based on earlier work
[47,48,49,50,51]. Regarding this earlier work, the
logic ALC4 is discussed in [47,48,49]. Embedding
ALC4 into classical ALC is discussed in [47] and

[48], while resolution-based reasoning algorithms
are presented in [48] and [49]. SHOIN 4 and its
embedding into classical SHOIN [35] are presented in [51]. In SHOIN 4, unqualified cardinality restrictions are allowed, as are nominals (which
are treated classically). SHIQ4 is presented in
[50], as are paraconsistent versions of EL++, Horn-
DLs, and DL-Lite logics. The latter logics are analyzed more fully here and in [46]. With one exception [49], each of these papers describes embedding
a paraconsistent logic into a classical counterpart.
We are unaware of anything similar to this in the
work by Patel-Schneider and Straccia et al.
Lang [45] has defined paraconsistent semantics
for ALC and SHIQ (which, incidentally, he also
calls ALC4 and SHIQ4) by translating them into
a paraconsistent first-order logic based on Arieli
and Avrons propositional logic. As noted before,
the 4-valued ELP semantics presented here is similar to his first-order logic semantics. Lang also
provides separate schemes for translating his logic
into FOL and for translating paraconsistent ALC4
and SHIQ4 directly into their classical counter-
parts. Paraconsistent equality and inequality are
introduced as special binary relations, together
with suitable axioms. An implication operator,
which we refer to using L, is also defined.

Since {(P L Q)} |=4 (PQ), the connective
is classically unsound.
More recently, Kamide [41] describes a 4-valued
paraconsistent variant of ALC making use of both
classical and paraconsistent negation. An embedding theorem similar to the ones described here is
also given, as is a sound and complete tableau algo-
rithm. Without the additional negation, the logic
appears to be the same as ALC4 (though there
are certain notational differences). The use of the
additional negation strengthens the logic consider-
ably, however. Indeed, it appears that all classical
ALC consequences are regained.
Zhang et al. [70] present a paraconsistent variation of SHIQ based on Besnard and Hunters
logic [37]. It is claimed that the
quasi-classical
logic (QC-SHIQ) remedies problems inherent to
the 4-valued approach described here. Specifically,

a weak semantics (virtually identical to SHIQ4)
is defined in which inclusion is based on internal
inclusion. For the weak semantics, Modus Ponens,
Modus Tollens, and Disjunctive Syllogism all fail.
A strong semantics, building upon the weak, is
provided which does not suffer from this problem
(all three hold).
While it is certainly true that Disjunctive Syllogism fails for SROIQ4 regardless of the inclusion
operator used, Modus Ponens is satisfied by both
internal and strong inclusion, and Modus Tollens
is satisfied by strong inclusion. This is the primary
point of introducing the operators in the paraconsistent logics described here (and, we imagine,
in the propositional logics upon which they are
based).

The failure of Disjunctive Syllogism is indeed
a substantial drawback. The paraconsistent logics described here simply do not permit it under any circumstances. Arieli has recently noted
[4] that Belnaps 4-valued logic is strictly weaker
than quasi-classical logic.10 Nevertheless, the main
virtue of the paraconsistent DL framework presented here is that the logics can be embedded
into classical formalisms. This in turn allows classical tools to be used to reason over even inconsistent knowledge bases. To our knowledge, no similar translation scheme has been created for QC-
SHIQ.
