One License to Compose Them All

A Deontic Logic Approach to Data Licensing on the Web of Data

Guido Governatori1,, Antonino Rotolo2, Serena Villata3,, and Fabien Gandon3

1 NICTA Queensland Research Laboratory

2 University of Bologna
3 INRIA Sophia Antipolis

Abstract. In the domain of Linked Open Data a need is emerging for developing automated frameworks able to generate the licensing terms associated to data
coming from heterogeneous distributed sources. This paper proposes and evaluates a deontic logic semantics which allows us to define the deontic components
of the licenses, i.e., permissions, obligations, and prohibitions, and generate a
composite license compliant with the licensing items of the composed different
licenses. Some heuristics are proposed to support the data publisher in choosing
the licenses composition strategy which better suits her needs w.r.t. the data she
is publishing.

1 Introduction

Following the Open Data movement1, several data hubs are being created by public bodies from single cities through to supra national organizations like the European Union
with the final aim to improve the transparency and efficiency of such public bodies and
organizations. In this context, the data is openly published on the Web using different
data models (e.g., RDF, schema.org, CSV). However, even if this movement is receiving more attention in the last years, still much more effort is required to publish open
data on the Web, possibly in a machine-readable format in such a way that data could
be interlinked, supporting the growth of the Web of Data [3,13]. One open problem
in this context is quality assessment with a particular attention to provenance information [12]. More precisely, part of the self-description of the data consists in the licensing
terms which specify the admitted use and re-use of the data by third parties. This issue
is relevant both for i) Linked Data publication as underlined in the 7 Best Practices
for Producing Linked Data2 where it is required to specify an appropriate license for
the data, and ii) Open Data publication since the possibility to express constraints on
the reuse of the data would encourage the publication of more open data. In this pa-
per, we answer the research question: How to express the licensing terms associated to

 NICTA is funded by the Australian Government as represented by the Department of Broad-
band, Communications and the Digital Economy and the Australian Research Council through
the ICT Centre of Excellence program.

 The author acknowledges support of the DataLift Project ANR-10-CORD-09 founded by the

French National Research Agency.

1 http://www.w3.org/TR/gov-data/
2 http://www.w3.org/2011/gld/wiki/Linked_Data_Cookbook

H. Alani et al. (Eds.): ISWC 2013, Part I, LNCS 8218, pp. 151166, 2013.
c Springer-Verlag Berlin Heidelberg 2013

G. Governatori et al.

data coming from heterogeneous distributed sources? This research question could be
answered by linking the datasets to normative documents describing the licenses under
which they are released. However, this solution is far from the Web of Data philosophy
where the meta-information about the datasets should be expressed both in a human and
a machine-readable format to allow further reasoning steps. Thus the research question
breaks down into the following subquestions: i) How to express the deontic component
of the licensing terms in a machine-readable format?, and ii) How to compose in a compliant and automated way the licensing terms associated to a set of heterogeneous data
to produce a single composite license?

First, we introduce a lightweight vocabulary called l4lod3 (Licenses for Linked
Open Data) which is composed by the three main deontic components, i.e., Obliga-
tions, Permissions and Prohibitions, and provides an alignment with the other licenses
vocabularies. It is used to express the machine-readable composite license.

Second, we rely on the deontic logic paradigm [24] to address the problem of reconciling a set of licenses associated to heterogeneous datasets whose information items
are returned together for consumption, e.g., resulting from a single SPARQL query
over distributed datasets released under different licenses. Assuming that these datasets
provide the consumer with their own licensing terms, we propose and evaluate a deontic logic semantics which automatically returns to the consumer a so called composite
license which is compliant with the normative semantics of each single license composing it.

The rationale of this work is to support both consumers and publishers of Linked
Open Data. On the one hand, as a consumer it is fundamental to know the kind of
operations you are permitted to perform on the data to avoid data misuses. On the other
hand, we support the publisher to decide which heuristics better suits her needs about
the composition of the licenses associated to her data, e.g., the composite license with
less obligations and more permissions is preferred to the others.

The reminder of the paper is as follows. Section 2 starts with an analysis of the
Linked Data cloud from the licenses point of view and presents the l4lod vocabulary.
In Section 3, we present our deontic logic to represent and reason over the licensing
terms together with the heuristics to guide licenses composition. In Section 4, we evaluate our approach using the SPINdle logic reasoner. In Section 5 we present the existing
research, and we compare it with the proposed approach.

2 Licenses for Linked Open Data

The first issue to be addressed with respect to the use of licenses in Linked Open Data
(LOD) is to understand how many datasets of the LOD cloud4 are actually licensed,
and, at a later stage, which are the more popular licenses adopted in those datasets. In
order to perform such analysis, we crawled the LOD cloud5 with a total of 235 datasets
considered. The results of this analysis are as follows:

3 http://ns.inria.fr/l4lod/
4 http://lod-cloud.net/
5 The Data Hub: Linking Open Data Cloud. Retrieved May 02, 2013 (UTC).

http://datahub.io/group/lodcloud
?

?

?
Licensed-Not Licensed. 221 datasets out of 235 are licensed in some way (Figure 1(a)).
The licensing terms are often reported in the VOID meta-data6 using the
dcterms:license or the dcterms:rights properties of Dublin Core7. The license is not usually explicited in a machine-readable format, i.e., the URI of the
license is given, but it brings to the human-readable version only (around 95%).

Licenses distribution. The most adopted license is Creative Commons Attributions
(CC-BY)8 (51 out of 221 datasets), and the Creative Commons (CC) licenses [1]
in general represent the 51% of the licenses used on the LOD cloud (Figure 1(b)).
Other popular licenses are Open Data Commons (ODC) ones9 [18] (11%), and
other licenses from specific institutions (18%)10.
?

?

?
(a)

(b)

Fig. 1. Surveying the Linked Data Cloud: licensed data statistics

We introduce the l4lod lightweight vocabulary (Licenses for Linked Open Data)
which is used to collect and align existing vocabularies which specify with different
granularity levels the licensing terms associated to the data. l4lod is adopted in our
framework as reference vocabulary to specify in a machine-readable format the licensing terms associated to the composite license we automatically generate. Moreover,
starting by the observation that not all licensed works are creative works [13], l4lod
may be used to specify the deontic components for those licenses outside CC, like for
instance ODC licenses, and the Open Government License (OGL) 11, as through the
Open Digital Rights Language (ODRL) vocabulary12. The fine grained specification of
licensing terms in a machine-readable format is the goal of the ODRL vocabulary, while
the aim of l4lod is to describe the composite license at the level of its basic deontic
components. We are currently investigating how to use the ODRL vocabulary to address
the l4lod requirements as an ODRL Profile.

6 http://www.w3.org/TR/void/
7 http://purl.org/dc/terms/
8 http://creativecommons.org/licenses/by/3.0/
9 http://opendatacommons.org/licenses/
10 LOD cloud highlighting licenses distribution available at http://ns.inria.fr/l4lod/
11 http://www.nationalarchives.gov.uk/doc/open-government-licence/
12 http://www.w3.org/community/odrl/two/model/

G. Governatori et al.

We define the class License which is equivalent

to cc:License13 and
limo:LicenseModel14, and three basic deontic properties which are respectively permits, prohibits, and obliges. These properties connect each license
with its own elements: Reproduction, Derivative, Distribution, Sharing,
Using, CommercialExpl, Publishing
Attribution,
ShareAlike, Citation (for Obligations), and NoCommercial, NoDerivative
(for Prohibitions). The vocabulary does not provide an exhaustive set of properties for
licenses definition. Implementations are free to extend l4lod to add further elements.
In the vocabulary, we distinguish between facts (i.e., rights as in the class License) and
their representation. That is why we introduce the licensingTerms property to connect the license to its human-readable counterpart (domain dc:LicenseDocument).
Further distinctions, e.g., among facts/information, collections of facts, are out of the
scope of this vocabulary and they are carried out by other vocabularies (e.g., ODRL).

(for

Permissions),

The vocabulary considers, among others, the alignment with the following vocabu-
laries: the CC vocabulary, the ODRL vocabulary15, the LiMo vocabulary, the Dublin
Core vocabulary, the Waiver vocabulary16, the Description of a Project vocabulary
(doap)17, the Ontology Metadata vocabulary (omv)18, the Data Dictionary for Preservation Metadata (premis)19, the Vocabulary Of Attribution and Governance (voag)20.

3 Defeasible Deontic Logic for Licenses Composition

We propose an extension of Defeasible Logic, revising earlier works [8,9], to handle
license composition. Dealing with this issue requires reasoning about two components:
Factual and ontology component: the first component is meant to describe the facts
with respect to which Web of Data licenses are applied as well as the ontology of
concepts involved by licenses (thus modeling, e.g., concept inclusion);

Deontic component: the second component aims at capturing the deontic aspects of
Web of Data licenses, thus offering mechanisms for reasoning about obligations,
prohibitions, and permissions in force in each license, and in their composition.

In this paper, we basically focus on the deontic component, even though, for the sake
of completeness, we illustrate the proposed method by also handling, in standard Defeasible Logic, the factual and ontology component, as done in [4]. However, standard
Defeasible Logic is just an option, and the factual and ontology component can be handled in any other suitable logic and by resorting to a separate reasoner. Also, notice that
we assume that all licenses share a same ontology, or the ontologies are aligned.

The formal language of the logic is rule-based. Literals can be plain, such as p,q,r . . . ,
or modal, such Op (obligatory), Pp (permitted), and Fp (forbidden/prohibited). Ontology

13 http://creativecommons.org/ns
14 http://purl.org/LiMo/0.1
15 http://w3.org/ns/odrl/2/
16 http://vocab.org/waiver/terms/.html
17 http://usefulinc.com/ns/doap
18 http://omv2.sourceforge.net/index.html
19 http://bit.ly/premisOntology
20 http://voag.linkedmodel.org/schema/voag
?

?

?
rules work as regular Defeasible Logic rules for deriving plain literals, while the logic of
deontic rules provide a constructive account of the basic deontic modalities (obligation,
prohibition, and permission). However, while we assume that all licenses share a same
ontology, the purpose of the formalism is mainly to establish the conditions to derive
different deontic conclusions from different licenses, and check whether they are compatible so that they can be attributed to a composite license. Hence, we need to keep track
of how these deontic conclusions are obtained. To this purpose, deontic rules (and, as we
will see, their conclusions) are parametrized by labels referring to licenses.
An ontology rule such as a1, . . . ,an  b supports the conclusion of b, given a1, . . . ,an,
and so it states that, from the viewpoint of any license any instance enjoying a1, . . . ,an
is also an instance of b. On the contrary, rules as a,Ob l2
O p state that, if a is the case
and b is obligatory, then Op holds in the perspective of license l2, i.e., p is obligatory
for l2.

The proof theory we propose aims at offering an efficient method for reasoning about
the deontic component of each license and, given that method, for combining different
licenses, checking their compatibility, and establishing what deontic conclusions can be
drawn from the composite license. In other words, if lc = l1 ## ln is the composite
license obtained from l1, . . . ,ln, the conclusions derived in the logic for l1, . . . ,ln are also
used to establish those that hold in lc.

The reader may argue about the choice of defeasible deontic logics. A simpler approach would be to foster the adoption of standardized licenses and assign them a URI.
Then, a basic URI comparison can trigger the allowed/appropriate usages of the data.
However, even if we support such kind of standardization, we believe that it is far from
the present situation where different licenses are used on the Web, from the basic purpose licenses up to the national ones. Dealing with licenses composition requires reasoning about all deontic provisions, handling and solving normative conflicts arising
from deontically incompatible licenses, and exceptions. A few formalisms can do that.
Defeasible deontic logic is one of the best candidates, as all aspects are managed in an
efficient and computationally tractable way.

3.1 Formal Language and Basic Concepts
The basic language is defined as follows. Let Lic = {l1,l2, . . . ,ln} be a finite set of
licenses. Given a set PROP of propositional atoms, the set of literals Lit is the set
of such atoms and their negation; as a convention, if q is a literal, q denotes the
complementary literal (if q is a positive literal p then q is p; and if q is p, then
q is p). Let us denote with MOD = {O,P,F} the set of basic deontic modalities. The
set ModLit of modal literals is defined as follows: i) if X  MOD and l  Lit, then Xl
and Xl are modal literals, ii) nothing else is a modal literal.
Let Lbl be a set of arbitrary labels. Every rule is of the type r : A(r) x
Y C(r), where
1. r  Lbl is the name of the rule;
2. A(r) = {a1, . . . ,an}, the antecedent (or body) of the rule, is a finite set denoting the
premises of the rule. If r is an ontology rule, then each ai, 1  i  n, belongs to Lit,
otherwise it belongs to Lit ModLit;

3.  {,,} denotes the type of the rule;

G. Governatori et al.

(for ontology rules), Y  /0;
(for ontology rules), x  /0;

4. if r is a deontic rule, Y = O represents the type of conclusion obtained21; otherwise
5. if r is a deontic rule, x  Lic indicates to which license the rule refers to; otherwise
6. C(r) = b  Lit is the consequent (or head) of the rule.
The intuition behind the different arrows is the following. Strict rules have the form
a1, . . . ,an x
Y b. Defeasible rules have the form a1, . . . ,an x
Y b. A rule of the form
a1, . . . ,an x
Y b is a defeater. Analogously, for ontology rules, where arrows do not
have superscripts and subscripts. The three types of rules establish the strength of the
relationship. Strict rules provide the strongest connection between a set of premises and
their conclusion: whenever the premises are deemed as indisputable so is the conclu-
sion. Defeasible rules allow to derive the conclusion unless there is evidence for its
contrary. Finally, defeaters suggest that there is a connection between its premises and
the conclusion not strong enough to warrant the conclusion on its own, but such that it
can be used to defeat rules for the opposite conclusion.

A multi-license theory is the knowledge base which is used to reason about the ap-

plicability of license rules under consideration.
Definition 1. A multi-license theory is a structure D = (F,L,Rc,{ROl}lLic,), where
 F  Lit ModLit is a finite set of facts;
 L  Lic is a finite set of licenses;
 Rc is a finite set of ontology rules;
 {ROl}lLic is finite family of sets of obligation rules;
  is an acyclic relation (called superiority relation) defined over (RcRc)(ROl 

$  {ROl}lLic

22.

$

ROl

), where ROl

,ROl

R[b] and RX [b] with X  {c,Ol|l  Lic} denote the set of all rules whose consequent is
b and of all rules (of type X). Given a set of rules R the sets Rs, Rsd, and Rdft denote,
respectively, the subsets of R of strict rules, defeasible rules, and defeaters.

3.2 Proof Theory

A proof P of length n is a finite sequence P(1), . . . ,P(n) of tagged literals of the type
+ X q,  X q, +X q and X q, where X  {c,Y l|l  Lic,Y  MOD}. The proof conditions below define the logical meaning of such tagged literals. As a conventional nota-
tion, P(1...i) denotes the initial part of the sequence P of length i. Given a multi-license
theory D, + X q means that literal q is provable in D with the mode X using only facts
and strict rules,  X q that it has been proved in D that q is not definitely provable in D
with the mode X, +X q that q is defeasibly provable in D with the mode X, and X q
that it has been proved in D that q is not defeasibly provable in D with the mode X 23.

21 We will see why we do not need rules for prohibitions and permissions.
22 Notice that we may have that l = l
23 As we will see, we shall adopt a reading of permissions according to which they can only be

defeasible. Hence, we will not define the cases  Y l q where Y = P.

$

.

Given #  { ,}, P = P(1), . . . ,P(n) is a proof for p in D for the license l iff P(n) =
+#l p when p  Lit, P(n) = +#Xl q when p = Xq  ModLit, and P(n) = #Y l q when
p = Y q  ModLit.

One License to Compose Them All

The proof conditions aim at determining what conclusions can be obtained within
composite licenses by using the source licenses. Three heuristics have been proposed
for this purpose [6,23]:

 OR-composition: if at least one of the licenses owns a clause then also lc owns it;
 AND-composition: if all the licenses own a clause then also lc owns it;
 Constraining-value: the most constraining clause among those offered by the sin-

gle licenses is included in lc.
In this paper, we concentrate on deontic effects of licenses, thus working on the obli-
gations, prohibitions, permissions entailed by the composition of a given set of licenses
(instead of the composition of the clauses). Also, since the constraining-value heuristics
requires to fully model the idea of concept inclusion (thus working also on the ontology
part; see discussion in [21]), here we focus the first two heuristics, reframed as:

 OR-composition: lc entails a deontic effect if there is at least one license that en-

tails such effect (and no license prevents it).

 AND-composition: lc entails a deontic effect if all licenses entail it.
In the next sections, we will show by means of examples, how the AND- and OR-

heuristics operate in the logic, including the derived conclusions.
Some notational conventions and concepts that we will use throughout the remainder
of this section: i) let lc = l1## ln be any composite license that can be obtained from
the set of licenses Lc = {l1, . . . ,ln}  L; ii) let X,Y  MOD.
As usual with Defeasible Logic, we have proof conditions for the monotonic part
of the theory (proofs for the tagged literals  Y p) and for the non-monotonic part
(proofs for the tagged literals Y p). To check licenses compatibility and compose
them means to apply the proof conditions of the logic to a multi-license where the set
of licenses is L = Lc. Since the proof theory for the ontology component ( c p and
c p) is the one for standard Defeasible Logic we will omit it and refer the reader to
[2]. For #  { ,} and Y  {O,P,F}, notice that conditions governing conclusions for
the composite license lc and for any each license li interplay recursively: indeed, we
may use a conclusion for lc to fire a rule in li.

3.3 Provability in Each License
Definite Provability. The definitions below for  describe just forward (monotonic)
chaining of strict rules.

Obligation Definite Provability
+ Oli : If P(n + 1) = + Oli q then,

(1) Oq  F or
(2) r  ROli

[q] :

s

a, Xb,Y d  A(r):
+ ca, + X lc b,  Y lc d  P(1..n)

 Oli : If P(n + 1) =  Oli q then

(1) Oq  F and
(2) r  ROli
[q]:

s

a  A(r):   ca  P(1..n) or
Xb  A(r):   X lc b  P(1..n) or
Y d  A(r): +  Y lc d  P(1..n)

G. Governatori et al.

Definite Provability for Prohibitions and Permissions. Definite proof conditions for
prohibitions can be simply obtained from the ones for O.

 Flc : If P(n + 1) =  Flc q, then   Olcq  P(1..n).

The concept of permission is much more elusive (for a discussion, see, e.g., [17]).
Here, we minimize complexities by adopting perhaps the simplest option among those
discussed in [11]. Such an option models permissive norms with defeaters for obliga-
tions: a defeater like a1, . . . ,an l
O q states that some q is permitted (Pq) in the license l,
since it is meant to block deontic defeasible rules for q, i.e., rules supporting Oq24.
This reading suggests that permissions are only defeasible, hence we postpone the proof
theory for permission to the section dealing with the non-monotonic part of the theory25.

Defeasible Provability. As usual in standard Defeasible Logic, to show that a literal
q is defeasibly provable we have two choices: (1) we show that q is already definitely
provable; or (2) we need to argue using the defeasible part of a multi-license theory D.
For this second case, some (sub)conditions must be satisfied. First, we need to consider
possible reasoning chains in support of q with the modes lc and X lc, and show that q
is not definitely provable with that mode (2.1 below). Second, we require that there must
be a strict or defeasible rule with mode at hand for q which can apply (2.2 below). Third,
we must consider the set of all rules which are not known to be inapplicable and which
permit to get q with the mode under consideration (2.3 below). Essentially, each rule
s of this kind attacks the conclusion q. To prove q, s must be counterattacked by a rule
t for q with the following properties: i) t must be applicable, and ii) t must prevail over
s. Thus each attack on the conclusion q must be counterattacked by a stronger rule. In
other words, r and the rules t form a team (for q) that defeats the rules s.

Obligation Defeasible Provability

+Oli : If P(n + 1) = +Oli q then
(1)+ Oli q  P(1..n) or
(2) (2.1)  Oliq  P(1..n) and

(2.2) r  ROli
(2.3) l j  Lic, s  ROl j [q], either

sd [q] : a, Xb,Y d  A(r): +ca, +X li b, Y li d  P(1..n) and

(2.3.1) a  A(s) or Xb  A(s) or Y  A(s):
ca  P(1..n), or X lc b  P(1..n), or +Y lc d  P(1..n); or
(2.3.2) lk  Lic, t  ROlk [q]: a, Xb,Y d  A(t),
+ca, +lc b,lc d  P(1..n), and t  s.

24 Hence, we do not make explicit in the language the distinction between the cases where we
have explicit permissive clauses for P (strong permissions of q [25]) from those where some q
is permitted (Pq) because it can be obtained from the fact that q is not provable as mandatory
(weak permission). For an extensive treatment of defeasible permissions, see also [10].
25 For space reasons, we will omit the proof conditions for Oli , and Pli , which can all be
obtained applying the so-called Principle of Strong Negation [11], as illustrated for  Oli .
?

?

?
+Pli : If P(n + 1) = +Pli q then
(1) (1.1)  Oliq  P(1..n) and

(1.2) r  ROli
(1.3) l j  Lic, s  ROl j [q], either

dft [q] : a, Xb,Y d  A(r): +ca, +X li b, Y li d  P(1..n) and

(1.3.1) a  A(s) or Xb  A(s) or Y  A(s):
(1.3.2) lk  Lic, t  ROlk

ca  P(1..n), or X lc b  P(1..n), or +Y lc d  P(1..n); or
dft [q]: a, Xb,Y d  A(t),
+ca, +lc b,lc d  P(1..n), and t  s.

Let us consider two examples that illustrate some aspects of the proof theory, and

how the heuristics are used before to formally introduce them.
Example 1. Assume to work with two licenses l1 and l2 and their composition, and let
us reason only about obligations and permissions:

F = {a,d}

ROl1 = {r1 : a l1
O p,
p,
ROl2 = {r3 :l2
= {r4  r3}

r2 : d l1
r4 : a,d l2

e}
O p,

r5 : Pp l2

e}

Let us consider AND-composition heuristics only. Rule r1 leads in l1 to +Ol1 p (i.e.,
Op in l1). License l2 supports +Pl2 p because the defeater r4 is applicable and is
stronger than r3: hence, AND-composition states that +Plc p is the case (i.e., that p
is permitted in the composite license). This last conclusion triggers r5 thus obtaining in
l2 the conclusion +Ol2e, the same deontic conclusion that is also obtained in l1 by
successfully applying r2: hence, +Olce (i.e., e is prohibited in lc).
Example 2. Consider two software libraries associated to licenses l1 and l2, respec-
tively. License l1 permits Commercial and obliges for Attribution, while license l2 prohibits Commercial, permits Derivative, and obliges for ShareAlike.

r2 :l1
r4 :l2

O Attribution,
Commercial,

O Commercial}
O ShareAlike,

L = {l1,l2}
ROl1 = {r1 :l1
ROl2 = {r3 :l2
We have to decide which heuristics better suits our needs with respect to the single licenses to compose. If we do not include the obligations present in each single
license (Attribution, ShareAlike), we are not compliant with their normative semantics
thus we violate them. To avoid that, the OR heuristics is used to compose obligations.
Concerning permissions (Derivative, Commercial), we must check that every single license includes the specific permission, thus we adopt the AND heuristics. Otherwise, if
there is a prohibition (Commercial), and we include the permission in lc, we violate
it. Hence, +Olc Attribution, +Olc ShareAlike, and +Plc Derivative.

O Derivative}

r5 :l2

The proof conditions for composite licenses we define in the next section assume
appropriate definitions for establishing whenever a deontic effect is entailed in a given
license, as we presented.

G. Governatori et al.

3.4 Provability for Composite Licenses

According to the OR-composition and AND-composition heuristics, we may compose
the deontic effects when each of them is entailed either by at least one license or by all
licenses. This idea is directly captured as follows:
OR-composition For #  { ,} and X  {O,P,F}:
+#Xlc : If P(n + 1) = +#Xlc p, then li  Lic : +#Xli p  P(1..n).
#Xlc : If P(n + 1) = #Xlc p, then li  Lic:  #Xli p  P(1..n).
AND-composition For #  { ,} and X  {O,F}:
+#Xlc : If P(n + 1) = +#Xlc p, then li  Lic : +#Xli p  P(1..n).
#Xlc : If P(n + 1) = #Xlc p, then li  Lic:  #Xli p  P(1..n).
+Plc : If P(n + 1) = +Plc p, then li  Lic: + Pli p  P(1..n) and
Plc : If P(n + 1) = Plc p, then li  Lic either Pli p or +Plip.
The conditions for obligations and prohibitions directly implement what we have informally said in regard to the two heuristics. A brief comment about permissions in
AND-composition: we may establish here that some p is permitted in lc when it is explicitly permitted (via defeaters) in all licenses, or when there is at least one license
explicitly permitting p and, in all the other licenses where no explicit permission for p
succeeds, p is at least not prohibited (so p is weakly permitted [25,10]).

lk  Lic,li = lk either +Plk p  P(1..n) or Olkp  P(1..n).

3.5 Properties and Admissibility

The logic presented here is a variant of the one developed in [8,9]. On account of this
fact, two results can be imported here: its soundness and computational complexity.
Theorem 1. Let D be a multi-license theory where the transitive closure of  is acyclic.
For every #  { ,}, X  {l,Y l|l  Lic,Y  {O,F}}, and Z  {l,W l|l  Lic,W 
MOD}:
 It is not possible that both D   +#Z p and D   #Z p;
 For all l  L{lc}, it is not possible that both D   +Ol p and D   +Plp;
 If D   +X p and D   +Xp, then D   + X p and D   + Xp.
Given a multi-license theory D, the universe of D (U D) is the set of all the atoms
D ,
occurring in D. The extension (or conclusions) ED of D is a structure ( +
D ),
where for X l  MOD and l  L:
 
D = {Xq : D    X l q}{q : D    cq}


D = {Xq : D   X l q}{q : D   cq}.
Theorem 2. Let D = (F,L,Rc,{ROl}lLic,) be a multi-license theory. The extension
of D can be computed in time linear to the size of the theory, i.e., O(|Rc {ROl}lLic|
|U D||L|).

D , 

D ,+
?

?

?
Finally, let us establish when a license composition lc is meaningful or admissible.

This can be checked taking into account the following guidelines:

 When only defeasible rules and defeaters are considered, a composition is admissible iff it leads to a non-empty set of deontic conclusions. Defeasible Logic is
skeptical logic, so in case there is no way to solve deontic conflicts (according to
any given heuristics), it means that the composite license does not produce any
effect.

 In the case of conflicting strict rules there is no way to block contradictory conclu-
sions. Hence, checking if a composition is admissible also requires to exclude that
 +
D contains contradictory conclusions.

 Facts are supposed to describe a given situation where licenses are applied, thus
they can vary from context to context. Hence, we may have two levels for detecting
unsolvable conflicts in the licenses composition: when we consider specific sets of
facts, or when we examine licenses in general.

The following definition formally considers all these aspects:
Definition 2. Let D = (F,L,{Rl}lLic,{ROl}lLic,{RPl}lLic,) be a multi-license theory and AD is the set of all literals and modal literals occurring in the antecedent of all
rules of D. The license lc = l1 ## ln is F-admissible iff
 L = {l1, . . . ,ln},
 X lcq  +
D , and
 for any literal p, if X  {l,Y l|l  Lic,Y  {O,F}}, then we do not have that D  
The composite license lc = l1##ln is admissible iff it is F-admissible for all F  AD.

+ X p and D   + Xp.

4 Mapping into SPINdle and Results

In this section we illustrate how to implement the logic and the heuristics developed
in Section 3 in SPINdle26. SPINdle [15] is a modular and efficient reasoning engine,
written in Java, for defeasible logic and modal defeasible logic implementing and extending the algorithms of [8,9]. It has been experimentally tested against the benchmark
of [16] showing that it is able to handle very large theories, i.e., theories with hundredth
of thousand rules, indeed the largest theory it has been tested with has 1 million rules.
While SPINdle supports multi-modal defeasible logics, currently it does not support
natively the AND and OR heuristics presented in this paper. Therefore, we first have to
provide polynomial time transformations to implement the two heuristics.

Definition 3. Let # be one of the proof tags. Two multi-license theories D1 and D2
are equivalent (written D1  D2) iff p,D1   #p iff D2   #p, i.e., they have the same
consequences. Similarly D1  D2 means that D1 and D2 have the same consequences
in the language .
Definition 4. A transformation is a mapping from multi-license theories to multilicense theories. A transformation T is correct iff for all theories Di, D  T (D) where
 is the language of D.
26 http://spin.nicta.org.au/spindle/index.html

G. Governatori et al.

The OR-heuristic is implemented by the following transformation27:



tor(r) =

r : A(r)  p
r : A(r) Oc p
r : A(r) Oc p
r : A(r) Oc p

r  Rc
r  ROli
r  ROli
r  ROli

s

, li  Lic
d , li  Lic
dft , li  Lic

It is immediate to see that tor is a one-to-one transformation. For obligation operators
tor flattens all of them into Oc. In fact, for the OR-heuristics we need to prove p with
+Oli for a single license, and thus the set of rules to be considered for clause (2.2)
is the set of all strict and defeasible obligation rules for p. For permission we use a
particular feature of SPINdle, namely negative modalities. A negative modality (e.g.
Oc) behaves on one side as any other modality, but it is in a symmetric conflict with the
corresponding positive one (i.e., Oc). Thus it can be used to disprove a conclusion for
the positive counterpart without proving it. Hence, it behaves essentially like a defeater.
Theorem 1 shows that the transformation of tor into the logic of SPINdle is correct.
Theorem 1. Let D = (F,L,R,) be a multi-license theory. Let T (D) = (F,L,{tor(r) :
r  R},). Then D  T (D).

We show now by means of an example how to apply our logic to compose three Web

of Data popular licenses using the SPINdle transformation.

Example 3. Assume the data returned by different datasets are associated to the
Open Government License28, the Open Database License29, and the Attribution-
NonCommercial-NoDerivs 2.0 Generic License30. The three licenses in a machinereadable format are visualized in Figure 2. The multi-license theory D is as follows:

F = {Open}
L = {lOGL,lODbL,lBYNCND}
O Attribution,

ROlOGL = {r1 :lOGL

r3 : Open lOGL
r5 : Open lOGL

O Distribution,
O Commercial}

ROlODbL = {r6 :lODbL
r8 :lODbL

ShareAlike,

Sharing,

ROlBYNCND = {r10 :lBYNCND
r12 :lBYNCND

Attribution,
Derivative,

 = {lODbL  lBYNCND}

r2 : Open lOGL
r4 : Open lOGL

O Publishing,
O Derivative,

Attribution,
Derivative}

r7 :lODbL
r9 :lODbL
r11 :lBYNCND
r13 :lBYNCND

Commercial,
Sharing}

27 In the remainder, Oc and Pc abbreviate Olc and Plc.
28 http://www.nationalarchives.gov.uk/doc/open-government-licence/
29 http://opendatacommons.org/licenses/odbl/
30 http://creativecommons.org/licenses/by-nc-nd/3.0/
?

?

?
We have now to build the composite license such that lc = lOGL#lODbL#lBYNCND.
AND-composition is admissible since there is at least one deontic effect entailed
by all licenses, i.e., from rules r1, r7 and r10, which lead to the deontic conclusion
+Olc Attribution. OR-composition is admissible too: notice that a conflict arises between rule r5 and rule r11 and between rule r12 and rules r4 and r9. The deontic conclusions are: +Olc Attribution, +Olc ShareAlike, +Plc Publishing, +Plc Distribution,
+Plc Sharing, Plc Derivative, Plc Commercial. The tor transformation is

>> Open
r1: =>[Oc]Attribution
r2: Open =>[-Oc] -Publishing
r3: Open =>[-Oc] -Distribution
r4: Open =>[-Oc] -Derivative
r5: Open =>[-Oc] -CommercialExpl

r8: =>[-Oc] -Share
r9: =>[-Oc] -Derivative

r10: =>[Oc] Attribution
r11: =>[Oc] -CommercialExpl
r12: =>[Oc] -Derivative
r13: =>[-Oc] -Share

r6: =>[Oc] ShareAlike
r7: =>[Oc] Attribution

r9 > r12

When the above theory is loaded in SPINdle it takes 14 milliseconds to produce the following conclusions +d [Oc]Attribution, +d [-Oc]-Distribution,
+d [-Oc]-Publishing, +d [-Oc]-Share, +d [Oc]ShareAlike, where +d [Oc]
corresponds to +Oc, and +d [-Oc]- means +Pc. Figure 2.d shows the machinereadable lc.

@prefix l4lod: http://ns.inria.fr/l4lod/.
@prefix : http://example/licenses.

@prefix l4lod: http://ns.inria.fr/l4lod/.
@prefix : http://example/licenses.

:licOGL a l4lod:License;
       l4lod:licensingTerms <http://www.nationalarchives.gov.uk/
                                   doc/open-government-licence/>; 
       l4lod:permits l4lod:Publishing;
       l4lod:permits l4lod:Distribution; 
       l4lod:permits l4lod:Derivative;
       l4lod:permits l4lod:CommercialExpl;
       l4lod:obliges l4lod:Attribution.

:licODbL a l4lod:License;
         l4lod:licensingTerms <http://opendatacommons.org/
                                          licenses/odbl/>; 
         l4lod:permits l4lod:Sharing;
         l4lod:permits l4lod:Derivative; 
         l4lod:obliges l4lod:Attribution;
         l4lod:obliges l4lod:ShareAlike.

@prefix cc: http://creativecommons.org/ns.
@prefix l4lod: http://ns.inria.fr/l4lod/.
@prefix : http://example/licenses.

(a)

:licBY-CC-NC-ND a cc:License;
         cc:legalcode <http://creativecommons.org/licenses
                                              /by-nc-nd/>; 
         cc:permits cc:Sharing;
         cc:requires cc:Attribution;
         cc:prohibits cc:CommercialUse;
         l4lod:prohibits l4lod:NoDerivative.

(c)

(b)

@prefix l4lod: http://ns.inria.fr/
l4lod/.
@prefix : http://example/licenses.

:licComposite a l4lod:License;

l4lod:obliges l4lod:Attribution;
l4lod:obliges l4lod:ShareAlike;
l4lod:permits l4lod:Publishing;
l4lod:permits l4lod:Distribution;
l4lod:permits l4lod:Sharing.}

(d)

Fig. 2. Licenses to be composed (a-b-c) and the resulting composite license (d)

Notice that the overhead introduced by the licenses composition framework is constituted by the query execution time to retrieve the licenses associated to the triples
returned as query result (if the set of licenses is known, it can be pre-computed), plus
the SPINdle overhead in computing the composite license. For these reasons, we can
say that the actual overhead is represented by SPINdle but, as shown above, it does not
have a serious impact on query execution time (few milliseconds).
For the AND-heuristic, for a multi-license theory D = (F,L = {l1, . . . ,ln},R,), the

transformation is based on the following sets of rules:

G. Governatori et al.

tand(r) = {ri j : A(r) O j C(r)|r  ROli}{r|r  ROli

sd

}{r : A(r) Oi C(r)|r  ROli

dft

}



= {oq : O1q, . . . ,Onq Oc q,
pi
q :  Oiq P q,
q :  Oiq Pi q,
pi
li  L,r  ROli ,C(r) = q}

pq : P



q,P1q, . . . ,Pnq Pc q

q : Oiq Pi q |
f i

Defeaters are modeled as in the tor transformation. The intuition behind the rules ri j
is that all rules can be use to attack any other rule, irrespectively of the license. Thus
for every obligation rule in a license we create a defeater with the same content for
each other license. For the AND-composition of obligations we need that a literal q is
provable as obligation in every license; this is achieved by rule oq. We have to do the
same for permissions. However, permission requires that at least one license permits q
and for all other licenses q is either permitted or not forbidden. To achieve this we create
and rules linking this to provability of the negative modality Oi
a special modality P
(encoding permission in SPINdle). Finally, for each license we create its permission
modality Pi and a literal q can be derived with such modality if it is permitted in license
li (Oiq, rules pi

q), or if q is not forbidden by that license (i.e., Oiq, rules f i
q).

Theorem 2 shows that the transformation of tand into the logic of SPINdle is correct.
Theorem 2. Let D = (F,L,R, >) be a multi-license theory. T (D) = (F,L,{r|r  Rc}
{tand(r)|r  ROli}liLic  R
, {(ri j,si j), (ri j,s), (r,si j)|r  s}li,l jLic). Then D 
T (D).





5 Related Work

The logic we presented is an extension of the logic of [8,9]. The debt on previous work
is the general idea of the formalism, and the proof theory for obligations. What is new
is the way for composing licenses (Section 3.4), and for computing permissions and
relative results (Section 3.5). Also, we proved that there is a transformation mapping
the new logic into SPINdle.

Pucella and Weissman [20] propose a logic to check whether the users actions follow
the licenses specifications. They do not deal with composition and do not provide a
deontic account of licenses conclusions. Furthermore, their logic is not able to handle
conflicting licenses.

Nadah et al. [19] propose to assist licensors work by providing them a generic way
to instantiate licenses, independent from specific formats. We go towards the definition
of a composite license while they go towards the definition of a specific ontology (about
100 concepts) used for the translation in the different formats.

Gangadharan et al. [6] address the issue of service license composition and compatibility analysis basing on ODRL-S, an extension of ODRL to implement the clauses of
service licensing. They specify a matchmaking algorithm which verifies whether two
service licenses are compatible. In case of a positive answer, the services can be composed and the framework determines the license of the composite service. Truong et
al. [22] address the issue of analyzing data contracts, based on ODRL-S. Contract analysis leads to the definition of a contract composition where first the comparable contractual terms from the different data contracts are retrieved, and second an evaluation of
?

?

?
the new contractual terms for the data mash-up is addressed. Villata and Gandon [23]
follow a similar approach to evaluate the compatibility of CC licenses and compose
them. There are several differences w.r.t. these approaches: (i) the application scenario
is different (service composition vs. Web of Data); (ii) we allow for a normative reasoning which goes beyond basic compatibility rules by exploiting normative compliance.
However, common points are the idea of merging the clauses of the different licenses/-
contracts, and the use of RDF for licenses/contracts representation.

Krotzsch and Speiser [14] present a semantic framework for evaluating ShareAlike
recursive statements. In particular, they develop a general policy modelling language,
then instantiated with OWL DL and Datalog, for supporting self-referential policies as
expressed by CC. In this paper, we address another kind of problem that is the composition of the deontic components of single licenses into a composite license.

Gordon [7] presents a legal prototype for analyzing open source licenses compatibility using the Carneades argumentation system. Licenses compatibility is addressed at a
different granularity w.r.t. our purpose, and licenses composition is not considered.

The attachment of additional information like rights or licenses to RDF triplets is
linked to an active research field. Carroll et al. [5] introduced Named Graphs in RDF to
allow publishers to communicate assertional intent and to sign their assertions. More-
over, the W3C Provenance WG defines the kind of information to be used to form
assessments about data quality, reliability or trustworthiness [12].

6 Conclusions
In this paper, we propose an automated framework for licenses composition based on
deontic logic. The rationale behind this framework is to build a composite license starting from the single licensing terms associated to heterogeneous data. We adopt deontic logic to ensure the compliance of the composite license with respect to the single
licenses composing it. We evaluate the feasibility of the automatic generation of the
composite license on the SPINdle defeasible reasoner.

There are several lines to pursue as future research. First, we will develop a standalone licensing module generating the machine-readable composite license every time
a query returns multi-licensed data. Second, we still have to consider the case of data
obtained by inference from one or several licensed datasets. In particular, a special case
we have to address is the one of queries going beyond basic SELECT queries, where
aggregations are present, e.g., return the average, sum, etc. of the data possibly over
distributed datasets. Third, the logic should take into account the temporal aspect of
licenses. In particular, two concepts to be considered are validity time (point in time
where a deontic component is true) and reference time (point in time the obligation,
prohibition or permission applies to) of an obligation, prohibition or permission. Fi-
nally, even if our framework allows to reason about certain characteristics of licenses,
e.g., whether attribution is required or commercial usages are permitted, it is still an
open problem the fact that there is no uniform, cross-national definition of essential
legal terms. We will investigate suitable solutions with further legal experts.
