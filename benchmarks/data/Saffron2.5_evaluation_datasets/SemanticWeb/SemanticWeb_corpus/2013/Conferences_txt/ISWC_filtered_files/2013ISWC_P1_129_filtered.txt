The Logic of Extensional RDFS

Enrico Franconi1, Claudio Gutierrez2, Alessandro Mosca1,

Giuseppe Pirr`o1, and Riccardo Rosati3

1 KRDB, Free University of Bozen-Bolzano, Bolzano, Italy

2 Department of Computer Science, University of Chile, Santiago, Chile

3 University of Rome La Sapienza, Rome, Italy

Abstract. The normative version of RDF Schema (RDFS) gives nonstandard (intensional) interpretations to some standard notions such as
classes and properties, thus departing from standard set-based semantics.
In this paper we develop a standard set-based (extensional) semantics
for the RDFS vocabulary while preserving the simplicity and computational complexity of deduction of the intensional version. This result can
positively impact current implementations, as reasoning in RDFS can be
implemented following common set-based intuitions and be compatible
with OWL extensions.

Introduction

The Resource Description Framework (RDF) [9] is the standard data model
for publishing and interlinking data on the Web. Its associated vocabulary
RDF Schema (RDFS) (classes, properties, hierarchies) gives non-standard (in-
tensional) interpretations to some standard set theoretical notions such as classes
and properties. This brings some difficulties to the reasoning systems based on
classical first-order logic (FOL). RDF enables the making of statements about
(Web) resources in the form of triples including a subject, a predicate and an
object expressed in manifold vocabularies. Efforts like the Linked Open Data
project [8] give a glimpse of the magnitude of RDF data today available.

In many application scenarios, there is the need to have on top of RDF data
a language to structure knowledge domains. To cope with this aspect, the Web
Consortium developed standard vocabularies such as RDF Schema (RDFS) and
OWL. RDFS was designed with a minimalist philosophy and it includes essentially the machinery for expressing subclass, subproperty, type and such. On the
other hand, OWL is a more expressive language that includes a much richer set
of features.

From a standardization point of view the current normative RDFS has two
weaknesses. First, the interpretations of basic notions such as subclass and subproperty do not have the usual set-based meaning. For example, in in Fig. 1,
even though :birthCity is a subproperty :birthPlace, one cannot derive the
fact that the range of the property :birthCity must be :Place. Second, the
normative semantics of RDFS and OWL differ for some of their common vocabu-
laries. RDFS, for historical reasons, follows an intensional semantics while OWL

H. Alani et al. (Eds.): ISWC 2013, Part I, LNCS 8218, pp. 101116, 2013.
c Springer-Verlag Berlin Heidelberg 2013

E. Franconi et al.

:Person

rdfs:domain

:birthPlace

rdfs:range

:Place

rdfs:subPropertyOf

:birthCity

rdf:type

e

g

n

r d f s :r a
r d f s

Not derivable with 
intensional RDFS 
inference rules

Of
s
s
Cla
b
u
rdfs:s

:Historical

Place

rdfs:subClassOf

:Populated

Place

rdfs:subClassOf

:City

:Stanley
Kubrick

:birthCity

Manhattan

dbp:<http://dbpedia.org/>
dbpo:<http://dbpedia.org/ontology/>
rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
rdfs:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>

Fig. 1. An RDFS graph taken from dbpedia.org showing compatibility problems between OWL and RDFS. The dotted arrow is valid in OWL while not in RDFS.

adopts a standard extensional set-based semantics. This intensional semantics
of RDFS brings compatibility problems with OWL. In the example considered
shown in Fig. 1, the dotted rdfs:range property is a valid set-based deduction,
thus valid in OWL, while not derivable in RDFS.

The designers of RDFS were aware of this problem, and added in a non-
normative status the standard set-based semantics and some sound inference
rules for it. This so-called extensional version of RDFS corresponds exactly
to the standard set-based interpretation of the vocabulary (and thus is fully
compatible with OWL). The rationale for keeping a weaker (intensional) semantics for RDFS was efficiency: In some ways the extensional versions provide a
simpler semantics, but they require more complex inference rules. The inten-
sional semantics [...] provides for most common uses of subclass and subproperty
assertions, and allows for simpler implementations of a complete set of RDFS
entailment rules. (W3C RDFS Semantics Spec., [7]). According to this specifi-
cation, RDFS inference engines develop following the intensional semantics.

Thus, two relevant problems regarding the natural extensional RDFS semantics have prevented its usage: i) What is the complexity overload associated to
the extensional semantics for RDFS?; ii) Can normative RDFS inference engines
(based on the computation of a completion in a forward-chaining manner) be
easily extended to support extensional RDFS, and at which cost?

Contributions. This paper answer both question in the positive. First, we provide a simple sound and complete proof system for the extensional semantics of
RDFS. Second, we show that a meaningful completion of the graph computed by
using the rules in a forward-chaining manner can still be computed in
?

?

?
polynomial case (as for intensional RDFS) thus spurring on current system that
use completion. These two results can be seen as founding the ground for the developing of the extensional semantics for the RDFS vocabulary while preserving
the simplicity and computational complexity of deduction of the intensional case.
Our results can be considered as an extension of intensional RDFS. Our results
address not only an interesting theoretical open problem, but could impact on
current implementations (for the most part based on the normative intensional
semantics) in a positive sense. Indeed, we show that reasoning in RDFS can
follow common set-based intuitions and be compatible with OWL extensions.
Moreover, we show that the rule system that we present is easily embeddable in
existing libraries such as Jena.

2 Preliminaries

The Resource Description Framework (RDF) [9] and RDF Schema (RDFS) are
the W3Cs standard data model for the publishing and interlinking of data on
the Web. In RDF only simple statements about resources can be expressed via
triples: a resource may be an instance of another resource (representing a class
typing the instance) and/or a property of another resource. RDFS augments
RDF with some minimal vocabulary, allowing to express hierarchies of classes
and properties and to restrict the domain and range of properties. As an example
of an RDFS graph, see Fig. 1. In what follow we will give a simple presentation
abstracted from implementation (e.g., namespace) details.
Let U, L, B three pairwise disjoint sets representing the set of URIs, literals
and blank nodes, respectively. For simplicity, we denote unions of these sets by
simply concatenating their names.

Definition 1 (RDF triple, graph). An RDF triple t is a tuple of the form
(s, p, o)  (UB)U(UBL), where s, p, o are called subject, predicate and object,
respectively. A triple is ground if it does not contain blank nodes. A (ground)
RDF graph G is a set of RDF (ground) triples. The vocabulary of G, denoted
voc(G), is the set of elements in UBL that occurs in its triples.

The df Fragment
In this work we will concentrate on a simple and small fragment of RDFS,
which includes only the special RDFS vocabulary type, property, subClass,
subProperty, domain and range. This fragment is called df and was introduced first in [11]. It has been shown to capture the essential semantics of the
full fragment, while avoiding to deal with minor idiosyncrasies. In the following,

we will denote its vocabulary as Vdf = {sc, sp, dom, range, type}. As it has been

shown in [11], df is self-contained as it does not rely on the RDFS vocabulary
beyond this subset. df is endowed with a set of inference rules that preserves
the original RDFS semantics restricted to this vocabulary [10].

The Intensional (Normative) Semantics
The normative semantics of RDFS [7] is built upon the standard logic notions of
model, interpretation and entailment. In the following we rephrase the normative

E. Franconi et al.

model theory of RDFS using first-order logic (FOL) in the spirit of [4]. The
signature of the language includes a ternary predicate T to represent RDF
triples  and two unary predicates C and P that will represent the membership of
individuals to rdfs:Class and rdf:Property, respectively. It can be proved
that, given a df graph {(s1, p1, o1), , (sn, pn, on)}, its models according the
the models of the FOL formula b T (s1, p1, o1)    T (sn, pn, on), where b is

the normative RDFS model theory in the W3C specification [4] are the same as

the set of blank node symbols appearing in the graph, under the FOL theory
specified by the axioms listed below.

The basic axioms primitively define subClass, subProperty, domain, range

in terms of type in the obvious way as in set theory1:

a, b (a, sc, b)  C(a)  C(b)  x (x, type, a)  (x, type, b)
a, b (a, sp, b)  P (a)  P (b)  x, y (x, a, y)  (x, b, y)
a, c (a, dom, c)  x, y (x, a, y)  (x, type, c)
a, d (a, range, d)  x, y (x, a, y)  (y, type, d)

(1)

(2)

(3)
(4)

To cope with reflexivity and transitivity of the subclass and subproperty relations
we have also the following axioms:

a, b, c (a, sc, b)  (b, sc, c)  (a, sc, c)
a C(a)  (a, sc, a)
a, b, c (a, sp, b)  (b, sp, c)  (a, sp, c)
aP (a)  (a, sp, a)

The following typing axioms are also needed in normative RDFS:

a, b (a, dom, b)  P (a)  C(b)
a, b (a, range, b)  P (a)  C(b)
a, b (a, type, b)  C(b)
a, b, c (a, b, c)  P (b)

P (sc)  P (sp)  P (dom)  P (range)  P (type)

(5)

(6)
(7)

(8)

(9)

(10)
(11)

(12)
(13)

The above axioms define the semantics for the subClass, subProperty, domain
and range predicates.

It is important to observe that rdfs:subClass, rdfs:subProperty, rdfs:
domain, rdfs:range are defined only by means of necessary properties according
to the above axioms: the semantics of normative RDFS is a quite weak one, since
the RDFS vocabulary does not express fully the corresponding relations in set
theory. As a matter of facts, given the RDFS graph from Fig. 1, according the
normative RDFS semantics the statement (:birthCity, rdfs:range, :Place) is
not entailed. Such an entailment is expected since people do read the properties
in the RDFS vocabulary as the corresponding set-based relations  just like in

1 Note that for simplicity we may omit the T symbol in FOL formulas.
?

?

?
OWL. The normative RDFS semantics is called intensional, since it is unable to
define sets in terms of their elements.

The Extensional (Non-normative) Semantics
The W3C specification [7] introduces in a non-normativestatus an extensional
version of RDFS, in which subClass, subProperty, domain, range are defined
precisely as having the usual set theoretical meaning. This is achieved by adding
to the previous definition of the RDFS semantics the missing implication (left-
direction arrows) in axioms (1) to (4), thus getting axioms (14) to (17). Thus,
axioms (1) to (17) define the semantics of the non-normative extensional RDFS
restricted to the df vocabulary. Note that axioms (1) to (8) are redundant, since
they can be derived from axioms (9) to (17). From now on we will refer to the
non-normative version of RDFS restricted to the df vocabulary as df +.

a, b (a, sc, b)  C(a)  C(b)  x (x, type, a)  (x, type, b)
a, b (a, sp, b)  P (a)  P (b)  x, y (x, a, y)  (x, b, y)
a, c (a, dom, c)  x, y (x, a, y)  (x, type, c)
a, d (a, range, d)  x, y (x, a, y)  (y, type, d)

(14)

(15)
(16)

(17)

This (extensional) semantics  which follows exactly the obvious extensional
definitions of the corresponding set-based operators  has been disregarded by
the W3C working group because of some computational problems that were conjectured during the definition of the specification. In the non normative section
of the W3C specification only a set of incomplete inference rules for extensional
RDFS is provided.

As for the relations with other KR formalisms, and with the family of description logics in particular, notice that it is easy to see that df+ without

{core,pos,safe}, namely the well known
typing exactly corresponds to the DL-Lite

{core} description logic [2,1] without negation and unqualified existen-
DL-Lite
tial restrictions on the right-hand side of the inclusion axioms. Obviously, DL-

{core,pos,safe} includes the normative RDFS. It is easy to see that the usual
Lite
unqualified number restrictions of DL-Litecore, once on the left-hand side of the
inclusion axioms, can be used to encode the rdfs:domain and rdfs:range state-
ments, while rdfs:subClass and rdfs:subProperty are nothing but usual DL
concept and role inclusion axioms, respectively.

Although the semantics of RDFS dates back to 2004 and despite the large
amount of research around it, there were still some important open problems
concerning extensional RDFS: i) whether a sound and complete system of inference rules existed; ii) whether a polynomial algorithm for computing the completion according to these extensional rules existed; iii) whether the problem of
entailment checking, crucial for query answering, can still be done in the same
complexity bound as for intensional RDFS. In this paper we tackle these three
problems and provide positive answers to each of them.

E. Franconi et al.

3 Reasoning with df+: A Forward-Chaining System

This section presents a set of sound and complete inference rules for df+ that
captures the extensional semantics of RDFS. Our findings complement the set of
rules in the df fragment with additional rules derived from the analysis of axioms
(14)-(17). The complete set of rules is presented in Table 1. For example, the
missing deduction in Fig. 1 can be done now with rule 4(b) with the instantiations
A =birthCity, B =birthPlace and C =Place.

We will need some definitions for the discussion that follows. We follow the

notations of [11].

Definition 2 (Instantiations and maps)

1. An instantiation of a rule is a uniform replacement of the meta variables
occurring in the triples of the rule with elements in UBL, such that all the
triples obtained after the replacement are well-formed RDF triples.
2. A map is a function  : UBL  UBL preserving URIs and literals i.e., (u) =
u for all u  UL. Given a graph G we define (G) = {((s), (p), (o)) :
(s, p, o)  G}. By abusing notation, we speak of a map  from a graph G1 to a
graph G2 and write  : G1  G2 if  is such that (G1) is a subgraph of G2.

Definition 3 (Proof ). Let G and H be graphs. We say that G  df+ H iff there
exists a sequence of graphs P1, P2, . . . , Pk, with P1 = G and Pk = H, and for
each j (2  j  k) one of the following cases hold:
 there exists a map  : Pj  Pj1 (rule 8),
 there is an instantiation R

R of one of the rules (1)(7) in Table 1 such that

.

R  Pj1 and Pj = Pj1  R
?

?

?
The sequence of rules used at each step (plus its instantiation or map), is called
a proof of H from G.

The df+ system of rules extends the df system [11] by the rules 3(b), 3(c),
4(b), 4(c) and (7). The following theorem states the soundness and completeness

of  df+.
Theorem 1 (Soundness and completeness). Let |=df+ denote the entail-
(17). Then, the proof system  df+ (rules in Table 1) is sound and complete for
this extensional semantics; that is, for G and H graphs in df+, then G  df+
H iff G |=df+ H.

ment relation for the extensional df+ semantics obtained from the axioms (1)-

Proof. The proof is available in the Appendix.

!

Although the natural consequence of Theorem 1 would be that of dropping
the intensional (weaker) semantic conditions in the normative semantics and
replacing them with the extensional (stronger), it is still necessary to investigate whether df+ brings in some source of complexity when applied to the

Table 1. The df+ rule system for df+. Capital letters A, B, C, X, and Y , stand
for meta-variables to be replaced by actual terms in UBL.

The Logic of Extensional RDFS

1. Subclass:

(a) (A,sc,B) (X,type,A)

(X,type,B)

(b) (A,sc,B) (B,sc,C)

(A,sc,C)

2. Subproperty:

(a) (A,sp,B) (X,A,Y )

(X,B,Y )

(b) (A,sp,B) (B,sp,C)

(A,sp,C)

3. Domain:

(a) (A,dom,B) (X,A,Y )

(X,type,B)

(b) (A,sp,B) (B,dom,C)

(A,dom,C)

(c) (A,dom,B) (B,sc,C)

(A,dom,C)

4. Range:

(a) (A,range,B) (X,A,Y )

(Y,type,B)

(b) (A,sp,B) (B,range,C)

(A,range,C)

(c) (A,range,B) (B,sc,C)

(A,range,C)

5. Subclass Reflexivity:

(a)

(A,sc,B)

(A,sc,A) (B,sc,B)

6. Subproperty Reflexivity:

(a) (X,A,Y )
(A,sp,A)
(b)

(A,sp,B)

(A,sp,A) (B,sp,B)

(b)

(X,p,A)
(A,sc,A)

for p  {dom, range, type}

(c) (p,sp,p)
(d) (A,p,X)
(A,sp,A)

for p  df
for p  {dom, range}

7. Extensional:

(type,sp,A) (A,dom,B) (X,sc,X)

(X,sc,B)

8. Simple:

G

for a map  : G  G

following important reasoning tasks: i) computation of the closure; ii) checking
of entailment, crucial for query answering.

Computational Properties of df+
The deductive closure of a graph G is the graph obtained by adding to G all
triples that are derivable from G. It can be computed by applying systematically
and recursively the inference rules in Table 1 to all the triples of G. The deductive
closure of a df+ graph is in principle infinite, due to the rule 8, which possibly
introduces new blank nodes. In order to get a finite but still useful completion of
the graph we can consider the closure of G over the same vocabulary of G, that is,
by adding only triples derivable from G which have elements in voc(G)Vdf. We
will denote this restricted closure by clg(G) be the ground closure (or completion)

E. Franconi et al.

Table 1).

of a graph G as the closure via the  df+ ground rule system (rules (1)-(7) in
By observing that the number of existing triples with vocabulary in voc(G) 
Vdf is of the order O(|G|3), and that all new triples in the closure of G will be

obtained by a successive applications of the rules of the proof system, we obtain
the following result:

Proposition 1 (Closure complexity). The size of the ground closure of a

df graph clg(G) is at most O(|G|3) and it can be computed in polynomial time.

We will now present a result which states how df+ entailment can be constructively reduced to computing (possibly offline) and materialising the finite
polynomial completion of the data graph and then by querying the completion
with a standard RDF simple entailment query engine. Note that this is the very
same procedure which is used in real systems for the standard normative RDFS
entailment  of course with the reduced set of normative RDFS inference rules.
Proposition 2 (Entailment for df +). Consider two RDFS graphs G (data)
and H (pattern). Then G |=df+ H iff clg(G) |=RDFsimple
Proof. By the completeness theorem, G  df+ H, which by definition of the closure is equivalent to clg(G)  df+ H, which means that H is in the completion
clg(G), unless there is an application of rule 8. In this case, H is got by using
the RDF simple entailment in the entailment checking because of the homo-
!
morphism checking.

H.

It can be easily seen that the combined complexity of entailment (in the size
of both graphs) is exactly the same as for normative RDFS and the df system,
which is polynomial if H is a ground graph, and NP-hard otherwise [11]. On the
other hand, the data complexity of entailment (that is, only in the size of the
data graph G) is polynomial [4].

Materializing all data by computing the completion may cause a waste of
space if most of it is never really used. Deciding whether applying materialization
or checking entailment on the fly with a specific algorithm depends on different
factors such as: i) size of the graph: some graphs may not fit in the main memory
and then the completion cannot be avoided; ii) updates: removing a triple from
the graph, causes implicit data to still exist if no special care is taken to remove
it. Hence, materialization vs. on the fly checking is a trade-off between the better
performance of updates, or better performance of look-ups. For this purpose we
have studied a refutation proof system provably sound and complete for df+
based on tableaux calculus, which in addition to df+ deals also with negative
atoms in the data graph. Such a system, which we do not present here, is used
to check entailment on the fly whenever it is not convenient to materialise the
completion (see [5] for further details).

4 Reasoning with Extensional RDFS in Practice

The aim of this section is to illustrate with simple examples the practical impact

of extensional RDFS reasoning. We discuss how the  df+ system of rules can
?

?

?
be embedded into the Apache Jena library and the impact that it has on the
computation of the completion of an RDFS graph.

The Jena Inference Engine
Jena is a comprehensive Semantic Web library providing a set of features for
data management and reasoning in OWL and RDFS. The library features four
predefined reasoning engines: i) transitive reasoner, which just considers transitive and reflexive properties of RDFS sc and sp; ii) a configurable RDFS rule
reasoner ; iii) a configurable OWL reasoner ; iv) a custom reasoner. This latter
reasoner enables to provide a custom set of inference rules; it supports three
reasoning strategies: i) one implementing the RETE algorithm; ii) a forward
reasoner ; iii) a backward reasoner.

The availability of the custom reasoner is at the core of the integration of the
ground df+ rule system; we have not implemented rule 7, since we assume that
data graphs do not redefine rdf:type, that is, they do not have it in subject
nor object position. As an example the rule 3 (c) in Table 1 is specified in Jena
as: [3c: (?a dom ?b), (?b sc ?c)->(?a dom ?c)]. The specification follows the
pattern [label: Ant ->Cons] where label is a name assigned to the rule, Ant
is the antecedent and Cons the consequent. It is also worth mentioning that the
reasoner can be configured to log derivations so that each triple obtained after
the reasoning task has associated an explanation, that is, the reasoning steps
(in terms of rules triggered) that led to the triple. The reader can consult the
Web page https://jena.apache.org/documentation/inference for further
details.

Comparing Inferences at Schema Level
We investigated the impact of df+ on the completion of five existing ontologies.
This experiment only considers triples at schema level; as discussed previously,
we do not need to analyze derived rdf:type triples, since they would be the
same as the rdf:type triples derived by a normative RDFS reasoner. Table 2
provides some information about the ontologies considered.

Table 2. Statistics about the ontologies considered

Ontology #Classes #Properties #dom #range #sc #sp
DBpedia
?

?

?
NEPOMUK 399
MusicOnto
?

?

?
VoxPopuli
?

?

?
-
?

?

?
460 258
?

?

?
-

The considered ontologies have different sizes; they range from small ontologies
such as FOAF (Friend-of-a-Friend) or MusicOnto (Music Ontology) to relatively
large ontologies like NEPOMUK and DBpedia. None of these (real-life) ontologies includes RDF triples redefining the RDFS vocabulary, that is, containing the

E. Franconi et al.

Fig. 2. Size of the completions
?

?

?
   
?

?

?
Fig. 3. Times for computing the completions

df vocabulary in subject or object position. Fig. 2 shows some statistics about
the completion of the ontologies by considering the df (intensional RDFS) and
ground df+ (extensional RDFS) rule systems. The comparison between the
completions in terms of number of triples is also shown . As it can be observed
with df+ we obtain a larger number of triples. This is due to the presence of the
rules 3(b), 3(c), 4(b) and 4(c) in Table 1 that enable to derive new rdfs:domain
and rdfs:range relations. The largest number was obtained when considering
DBpedia (4000 rdfs:domain and  1200 rdfs:range). The extensional completion contains an increase of triples of the order of 30% for DBpedia and
NEPOMUK, 60% for VoxPopuli, 20% for FOAF and 5% for MusicOnto. Fig. 3
reports the times (in ms) taken to compute the completion.

In the extensional case more time is needed because of the presence of additional inference rules. However, it can be observed that the time remains around
60ms with a large schema like DBpedia.

In order to give a hint on the kind of derivations enabled via df+, Fig. 4 shows
two examples from DBpedia. In Fig. 4 (a) it is shown the new rdfs:range for
the property :beltwayCity obtained by applying rule 4 (c). Fig. 4 (b) shows
?

?

?
d: <http://dbpedia.org/ontology> rdfs: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

d:Settlement

    d:Athlete

rdfs:subClassOf

rdfs:range

rdfs:subClassOf

rdfs:domain

      d:City

rdfs:range

(a)

d:beltwayCity

    d:IceHockeyPlayer

rdfs:domain

(b)

d:prospectTeam

Fig. 4. Examples of new derivations with df+

the derivation of a new rdfs:domain for the property :prospectTeam obtained
via rule 3(c).

5 Related Work

There is a solid body of research on RDFS. A formalisation of RDF regarding
databases issues was done by Gutierrez et al. [6]. Marin [10] and ter Horst [12]
came up with counterexamples (see Fig. 1) which, though pointing to the incompleteness of the W3C RDF Semantics specification rules, showed an issue
belonging to the intensional approach to RDFS. The merit of Marin was to
overcome the issue keeping the original rules, and adding two additional ones,
and proved that the new set of rules was sound and complete. ter Horst instead
modified the rule system by allowing non-legal RDFS triples within the rule
system by using blank nodes in the predicate position. The formalization of the
semantics of RDF in FOL has been studied by de Brujin et al. [4]. Mu noz et
al. [11] introduced the df fragment; this paper also discusses the quadratic lower
bound for the size of the completion of a graph G pointing out how such size is
impractical from a database point of view. To cope with this issue, the authors
introduce minimal RDFS, which imposes restrictions on the occurrence of the
RDFS vocabulary (it can only occur in predicate position). The advantage of
minimal RDFS is that there exists an efficient algorithm to check graph entailment in the case of ground graphs. They also showed that if triples contain at
most one blank node the bound remains the same.

The common ground of these approaches is that they stick with the normative specification, that is, intensional RDFS. Other approaches such as RDF-F-
Logic [13] depart from the normative specification. Finally, yet other approaches
focus on the interplay between RDFS and other ontology languages such as
OWL (e.g., RDFS(DL) [3]) and the family of description logics DL-Lite [2,1]. In
contrast to the above approaches, our goal in this paper is to provide a bridge
between the normative (intensional) and non normative (extensional) parts of
the RDFS specification, and study systematically the latter.

E. Franconi et al.

6 Conclusions

In this paper we investigated the extensional semantics for RDFS. Based on the
non-normative specification given in the standard W3C RDF semantics specification [7], we develop proof systems that show that one can get a practical,
efficient and simple system for the extensional version of RDFS.

We answered an open problem since the publishing of the W3C RDF Semantics [7], which asked for the existence of a simple and efficient system of rules to
codify extensional RDFS entailment. The results presented in the paper showed
that providing a set of sound and complete inference rules for extensional RDFS
is possible, and the complexity of computing the completion of an RDFS graph
remains the same as in the normative case.

Our results will impact on current reasoning libraries (e.g., Jena) for RDFS
that now can obtain more inferences at no significantly additional cost, as emphasized by our evaluation. Last, but not least, this extensional version aligns
the semantics of RDFS and OWL, which previously were inconsistent due to the
different meanings given by each of them to set-based notions such as subclass
and subproperty.

Acknowledgments. We thank the anonymous referees that provided helpful
suggestions. C. Gutierrez thanks the EMCL program for his stay at FUB. Fran-
coni, Pirr`o, Mosca and Gutierrez were supported by Marie Curie action IRSES
- Net2 (Grant No. 24761). Gutierrez was supported by FONDECYT (Grant No.
1110287). R. Rosati was partially supported by the EU by FP7 project Optique
 Scalable End-user Access to Big Data (Grant No. FP7-318338).
