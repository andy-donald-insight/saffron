Publishing and Linking University Data Considering the

Dynamism of Datasources

Tayfun Gokmen Halac
Department of Computer

Engineering, Ege University
35100 Bornova, Izmir, Turkey
tayfunhalac@gmail.com

Bahtiyar Erden

Department of Computer

Engineering, Ege University
35100 Bornova, Izmir, Turkey
bahtiyar.erden@gmail.com

Emrah Inan

Department of Computer

Engineering, Ege University
35100 Bornova, Izmir, Turkey
emrah.inan@ege.edu.tr

Damla Oguz

Department of Computer

Engineering, Izmir Institute of

Technology

35430 Urla, Izmir, Turkey
damlaoguz@iyte.edu.tr

Pinar Gocebe

Department of Computer

Engineering, Ege University
35100 Bornova, Izmir, Turkey
gocebepinar@gmail.com

Oguz Dikenelli

Department of Computer

Engineering, Ege University
35100 Bornova, Izmir, Turkey
oguz.dikenelli@ege.edu.tr

ABSTRACT
University organizations require many different software systems such as student information management system, library system, research project management software, course
material management, geographical maps, and so on. These
applications are generally developed by different vendors,
and thus university data is stored in databases of different
applications in a separated manner. University administration requires integrated university data to turn that data
into knowledge for decision-making processes. However, integrating systems with traditional methods such as web services causes development and maintenance costs. For this
reason, in Ege University, we benefit from linked data to integrate data distributed in different software systems. Data
in different databases is published using general vocabular-
ies, and related contents in different databases are linked to
each other. In this paper, we introduce the evolution of the
architecture of our linked university data, and a university
assistant application developed on this integrated data.

1.

INTRODUCTION

Ege University is a large organization with more than 40K
students, and daily processes produce a large volume of data
constantly. This data is produced and managed by several
software systems which handle educational and administrative requirements of Ege University. Course material management system, student information management system,
library system, research project management software, or
geographical map can be given as example for these systems.
Although these systems share information such as organizational structure or academic staff, they duplicate such data

(c) 2013 Association for Computing Machinery. ACM acknowledges that
this contribution was authored or co-authored by an employee, contractor
or affiliate of the national government. As such, the Government retains
a nonexclusive, royalty-free right to publish or reproduce this article, or to
allow others to do so, for Government purposes only.
ISEM 13, September 04 - 06 2013, Graz, Austria.
Copyright 2013 ACM 978-1-4503-1972-0/13/09 $15.00
http://dx.doi.org/10.1145/2506182.2506202.

instead of providing an integration between systems. Since
these software systems are developed by different privately
held companies or by university staff, it is hard to integrate
these different parties. In such a software ecosystem, there
has been problems need to be constantly considered such as
coordination, integration and maintenance.

This study aims to present a linked data infrastructure
called EgeLOD1 which provides integrated and up-to-date
data of Ege University. EgeLOD integrates 4 systems at this
current stage which are Management Information System
(EUMIS), Scientific Research Projects Management (EU-
SRP), University Bulletin Board (EUNEWS) and Geographical Map (EUMAP). EgeLOD creates an open environment
for application developers of Ege University. Besides official
programmers, university students and independent vendors
may also create applications on top of EgeLOD. EgeLOD is
the first linked open data attempt in Turkey which inspires
from Linked Universities2 community.

We started to develop this infrastructure by publishing
live data using mapping tools. Then, the links between
datasets were discovered, and these links were made accessible via SPARQL endpoints. Finally, an application called
as University Assistant has been developed on top of the
linked university data. After using the University Assistant application, some critical performance bottlenecks have
been observed when federated queries are executed on linked
data. It was clear that these bottlenecks are dependent to
real-time conversion of original data during query execution.
Moreover, published links became outdated after a while,
since original data sources are dynamic and link discovery
was applied once. Then, we improved the architecture to
solve the performance problem and to make link discovery
continuous. Our solution is to combine all datasets in a
central repository. This solution solves the federated query
problem by collecting all data in one scalable RDF store.
But, this new architecture forced us to reconsider the data
dynamism problem. Hence, we developed a module in the
architecture which monitors the changes in data stores and
automatically generates new links when necessary.

1Ege University LOD Portal, http://data.ege.edu.tr/
2Linked Universities, http://linkeduniversities.org/

                                               140There are other linked university data studies in the literature such as Tsinghua University [4], University of M unster [3], and Open University [7]. All these efforts publish
course, scientific, geographical, etc. data using linked data
standards and develop an application such as University As-
sistant. In these efforts, data is collected, converted to RDF
and stored in a triple store. This process is repeated in
regular periods. These studies link some data to related
data. Apart from these studies, in this study, we introduce
an approach that discovers all interlinks between different
datasets to create totally integrated data and keeps interlinks between datasets up-to-date and consistent.

This paper is organized as follows. Section 2 presents
the initial problem statement. Section 3 explains the main
methodology of publishing Linked Data sources. Section 4
introduces the first level of EgeLOD architecture. Section
5 proposes a solution architecture to the challenges encountered in the first level architecture. Finally, Section 6 covers
our final remarks.

2.

INITIAL STATE

When we initiated this project, there were 4 different
software systems used in Ege University processes, EUMIS,
EUSRP, EUNEWS and EUMAP. Three of these systems
(EUMIS, EUSRP, EUNEWS) store their data in relational
databases, and the other one uses an XML file. EUMIS
is used for registration of students to courses, and thus it
contains course and academician data. EUSRP is used to
manage the processes related to research project grants, and
thus it contains data about research projects which are made
in the university and the people which participate those
projects. EUNEWS is used by university faculties and divisions to make announcements. Finally, EUMAP shows the
geographical positions of buildings in the university campus.
Besides these systems, new software requirements depending
on integrating those systems was arising.

A possible solution for those requirements was using REST
services. By means of developing REST APIs to applications
which allow to read and modify the data, the applications
can be integrated with each other. An application which
requires to incorporate the data of another application uses
the related REST API method and retrieves the relevant
data. But, these services are dependent to developer, since
no other person knows the real underlying data model. Consumer can understand the data in the way that the developer
decides. The API must be updated if the underlying data
model changes. This causes a maintenance cost for provided
APIs. Also, when a new access method is required by the
consumer, e.g. accessing a person with name instead of ID,
the REST API should be enhanced for the new requirement.
Coordination is required to make such enhancements.
In
university domain, challenges of coordinating different parties and bureaucracy makes it difficult to implement new
applications on multiple data sources. Therefore, new applications has been developed by creating separate databases
and duplicating the data for each software again and again.
As a consequence of this state, inspiring from the linked
data literature, we proposed EgeLOD infrastructure to integrate the data encapsulated in different data sources in
the university domain. The main benefits of EgeLOD are
identified in the beginning of the project as follow.

 As linked data proposes, using general and open vocab-

ularies allows everyone including university students,
software developers, etc. to understand the data model,
to develop applications on it, and to link it with related
data out of the university. University management
cannot cope with producing many innovative software
ideas, and usage of linked open data paves the way
of realizing new ideas without coordinating with the
university and developers of the university software.

 Providing SPARQL endpoints for published data makes
it accessible in a flexible way, since whole data model
is open. There is no need to update an API as is in
REST services based integration when different query
requirements arise. Even complex queries required by
applications can be answered with the published data
without the need for a broker person such as REST
API developer.

Furthermore, we create links between datasets in data level.
One can navigate between datasets by following created links
between related contents. These links provides an integration independent from application. Every application can
benefit from interlinked data.

3. METHODOLOGY

Inspiring from the literature [1, 2, 5], to create linked university data and to develop applications on it, we follow an
iterative method which is composed of following three steps.

1. Meta-data Creation: Meta-data creation step is a modeling process.
In this step, we define a vocabulary
which includes concepts and relations in the data selected to be published. During meta-data creation,
reusing classes and properties in existing vocabularies
is important to increase interoperability.

2. Linked Data Publication: In the second step, existing
data is converted to RDF format according to the created meta-data. This can be done using some tools
such as generic converters, custom converters, named
entity recognizers, etc. To publish converted RDF,
an architecture including strategies such as publishing,
linking, up-to-dateness, consistency, and semantifying
unstructured data are specified in this step.

3. Linked Data Application Development: The last step
is the linked data application development process. In
this step, an application which benefits from the published RDF data is developed. During the application
development, a linked data consumption architecture
is specified. The data can be queried from an endpoint,
can be cached in the application, can be crawled from
RDFa tagged web pages, etc. according to the properties of published data and the requirements of the
developed application. Also, the data can be linked
to external data if the application requires. This step
can be applied independent from the data publisher.
In this case, application developer may give feedback
about data publication.

In this paper, we introduce two main phases of the devel-
opment. The first phase focuses on publishing data in RDF
and discovering links between datasets. This phase is composed of four sub-iterations each of which are dedicated to
opening one dataset. Then, in the second phase, there is one

                                               141Table 1: Prefixes used in University Vocabularies

EUMAP is published using Tripliser6 which generates RDF
from XML files according to mappings defined between XML
schema entities and vocabulary concepts.

As seen in Figure 4.1, EUMIS is used as a common ground
between other datasets. Both faculty members in EUMIS
and project members in EUSRP are described using Person
class of FOAF vocabulary, and project members which are
the same with the faculty members are linked to related resources using owl:sameAs. Organization, department and
division concepts of AIISO are used to describe organizational units. Duplicated resources in EUNEWS and EUSRP
are linked to related resources in EUMIS. Finally, building positions of organizational units are introduced using
Rooms vocabulary. These building resources are linked to
related EUMIS organization and department resources using
rooms:occupant property. The descriptions of the prefixes
used in Figure 4.1 is shown in Table 1.
4.2 Linked Data Publication

After defining vocabularies, the data should be converted
to RDF according to these vocabularies.
In our architec-
ture, we use two different converters, D2RQ and Tripliser.
For EUMIS, EUSRP, and EUNEWS, we defined D2RQ mappings from relational database tables to vocabularies. There-
fore, we settled 3 D2RQ web applications which allow both
accessing to RDF descriptions of resources and querying the
data using SPARQL. On the other hand, EUMAP is converted to RDF using Tripliser, since this data is stored in an
XML file. To publish RDF data of EUMAP, we developed
a web application which accesses to the XML file, converts
the contents of the file using Tripliser, and holds the result
Jena7 model as up-to-date geographic data.

As seen in Figure 4.2, all datasets provide a linked data
endpoint which allows to URI dereferencing and SPARQL
querying. In this step, after publishing datasets, links between datasets are discovered and are published. Silk Link
Discovery Framework [6] is employed for discovering links
between different datasets. By using a flexible, declarative
language for specifying link conditions, Silk Server generates owl:sameAs links in EUSRP-EUMIS and EUNEWS-
EUMIS, and rooms:occupant links between EUMAP-EUMIS
as introduced in the previous section. Silk Server which is
depicted as Link Discovery module in the architecture uses
dumps of datasets and discovers the links between datasets
by comparing all the resources between two datasets. Discovered links are stored in triple stores to be queried. There

has availability and performance issues for live conversion.
Other RDB2RDF tools may be used instead in the future.
6Tripliser, http://daverog.github.io/tripliser/
7Jena RDF Framework, http://jena.apache.org/

Figure 4.1: University Vocabularies

iteration where no new dataset is published but the linked
data publication architecture and the developed linked data
application is revised. The aims of this revision are to establish the link consistency with respect to the dynamism of
data sources and to improve the performance problems that
are observed during the development of University Assistant
application.

4. LINKED DATA ARCHITECTURE

This section introduces publishing, linking, and consuming university data according to the methodology introduced
in the previous section. An application called University Assistant which allows users to access all related data in the
university easily is developed on the first level architecture,
and experiences gained from this application is given.
4.1 Meta-data Definition

We publish data from four different datasets in the current version of EgeLOD. In the first step, we specified metadata for this data considering existing vocabularies. Figure 4.1 depicts the concepts of the specified meta-data and
the relationships between them. Reused vocabularies are
Academic Institution Internal Structure Ontology (aiiso),
Friend of a Friend (foaf), Teaching Core Vocabulary (teach),
Dublin Core (dcterms), DBpedia Ontology (dbpedia-owl),
ResumeRDF Ontology (cv)3 and DERI Buildings and Rooms
Vocabulary (rooms). Only news concept in EUNEWS dataset
could not be reused.

EUMIS, EUSRP, and EUNEWS are published using D2RQ4

that converts the relational databases to RDF. This is done
by means of defining mappings between relational database
tables and vocabulary terms. We preferred D2RQ since it
supports both SPARQL and linked data endpoints, and it
is tested on MySQL and Microsoft SQL Server which are
databases used by university software5. On the other hand,
3Some data-type properties from this vocabulary is reused.
Data-type properties of concepts are not shown in the figure.
4D2RQ is a well-known RDB2RDF tool, http://d2rq.org/
5After publishing data with D2RQ, we noticed that it

                                               142Figure 4.2: Initial Design of EgeLOD Infrastructure

are 2 link datasets in the architecture for person links between EUSRP-EUMIS, department/organization links between EUSRP-EUMIS and between EUNEWS-EUMIS. Links
between EUMAP-EUMIS are directly published within EUMAP
RDF data.

To exemplify the link discovery method, we explain how
person resources in EUMIS and EUSRP are linked. Resources in both datasets have foaf:firstName and foaf:
familyName properties. In the Silk link mapping, alphaReduce transformation function is applied in order to remove
all non-alphabetic characters from the current name. To
convert capital letters to lower case, lowercase transformation function is used. After preparing the strings for match-
ing, comparison operators are employed to evaluate two strings.
According to a distance measure and a threshold value, the
similarity of these strings is calculated. One of the characterbased distance metrics, Jaro-Winkler, which is appropriate
for short strings, is used in this situation. In Silk configura-
tion, threshold value of Jaro-Winkler distance is set to 0.2
for the purpose of considering only very similar strings. Silk
comparison operators outputs 0 for perfect match. Defining
0.2 threshold means small distances for name comparison are
considered. In addition, the weights of both of Jaro-Winkler
comparisons are set to 1. That means the average of JaroWinkler distances of first name comparison and family name
comparison are taken into account. At the end of this pro-
cess, owl:sameAs links are created and kept in an output
file that is stored in an RDF store. For department and
organization resources in EUSRP, EUNEWS, and EUMAP
datasets, names of resources are used for linking in a similar
way to aforementioned process.

4.3 Application Development Experiences

Publishing and interlinking different datasets are essential tasks to provide integrated information. The developed
architecture allows to access integrated data by means of
SPARQL queries. By consuming published linked data, an
application called University Assistant could be developed
easily by an undergraduate student using federated queries.
University Assistant allows students to navigate linked university data from different perspectives such as academician,

Figure 4.3: Screenshot of University Assistant

course, organizational unit and research project. For exam-
ple, if the user looks to an academician, she can also see
research projects related to that academician, courses which
are lectured by that academician, news from and map of the
department which that academician is a member of, and
can navigate to the displayed related information through
the academician perspective. A screenshot of academician
perspective can be seen in Figure 4.3.

University Assistant application is developed as a JSF 2.08
application using Jena RDF framework. It includes session
scoped managed beans for searching academician, organizational unit, course, and research project resources. On the
other hand, a view scoped managed bean for each perspective is responsible for collecting data related to the displayed
resource. These beans query the SPARQL endpoints and
federate the results of multiple datasets to construct views.
The views of the application are developed using Bootstrap
CSS framework9 and PrimeFaces JSF framework10.

University Assistant is useful for students, since searching for related information within lots of hard-to-find web
pages is a trouble. For example, websites of organizational
units generally do not show the geographical location, and
most of the students do not know universitys geographical
map. Therefore, they generally use proprietary maps such
as Google Maps11 or Yandex Maps12 to find locations in
campus. However, correct information for newly opened faculties and moved faculties to new buildings cannot be found
in those maps. Contrarily, developed University Assistant
provides correct geographical data to students when they
are looking for locations of resources such as courses or aca-
demicians. Accessing to accurate academician data could be
given as another example. Information about courses and
research projects that an academician is related is generally
stale in personal web pages of the academicians because of
their work load. But, they record their research projects
to universitys project software when they are applying to
the projects, and courses which are lectured by an academi-

8JavaServer Faces Technology, http://www.oracle.com/
technetwork/java/javaee/javaserverfaces-139869.html
9Twitters
http://twitter.github.io/bootstrap/
10PrimeFaces JSF Component Suite, http://primefaces.org/
11Google Maps, http://maps.google.com
12Yandex Maps, http://maps.yandex.com

Framework,

Bootstrap

                                               143cian is stored in management information system. However,
people have to find web pages of these applications and then
have to search for the desired information. The developed
application takes all that burden from users, and displays
information related to an academician together.

University Assistant became a case study to mature our
linked university data architecture. This application development experience revealed two drawbacks of the linked
data publication architecture introduced above. The first
problem is the performance of federated queries. The reasons behind this problem are live conversion of databases
and cost of navigating between 6 datasets which are published databases and published links between them.

The second problem is outdated links between datasets.
Relational databases change constantly since the software
systems which are the owners the databases are actively
used. But, in this architecture, we have done interlinking using dump files. Therefore, after a while, the users could not
find information related to new data such as new projects,
academicians. To overcome these challenges, we started to
a new iteration and improved our architecture.

5. CENTRALIZED LINKED DATA ARCHI-

TECTURE

After experiencing the limitations of the first design of our
linked data publication architecture, we improved it as seen
in Figure 5.1. The novelties of this architecture are using
a new tool called CHandle and publishing the linked data
from a centralized triple store.

CHandle module is developed to transmit changes in the
original data to the integrated data store.
It periodically
retrieves data from datasets, discovers related content if re-
quired, and updates the integrated triple store. With current configuration, CHandle dumps each dataset to an RDF
file in N-TRIPLE format every day. It saves the last dump
file of a dataset to compare with the new one on the other
day. Relational databases are dumped using D2RQ, and
XML data source is dumped using Tripliser. 4 datasets
which are included by the infrastructure contains 800K triples
approximately. Retrieving dump files of all datasets takes
under 7 minutes on our machine which has an UltraSPARC
T1 processor and 2 GB RAM.

As shown in Figure 5.1, there are three components of
CHandle: Change Detector, Link Discovery, and Data Uni-
fier. These components aim to combine data in a Virtuoso RDF server13 by resolving entity co-references. Entity co-references are modeled using sameAs relations between datasets in Figure 4.1. This architecture removes the
sameAs relations in the data.

Change Detector is the module which compares the new
dump the with the last one using Jena Models difference
method.
It reads the dump files which will be compared
into in-memory models and then compares those two models.
Comparison of the dumps of 4 datasets takes less than 30
seconds. Most of this time is spent with reading files into
memory.

If CHandle encounters with a new resource during change
detection, that resource is given to Link Discovery module.
Link Discovery module uses Silk framework and discovers
links between the new resource and the resources in the other

13Virtuoso RDF Store, http://virtuoso.openlinksw.com/rdf-
quad-store/

Figure 5.1: EgeLOD architecture that is improved
for performance and dynamic link discovery

data according to the defined link mappings. In the current
version of EgeLOD, the resources in EUSRP, EUNEWS, and
EUMAP datasets are linked to resources in EUMIS dataset.
For this reason, EUMIS resources are not given to Link Discovery module, and the differences in the EUMIS data is
directly reflected to the centralized triple store. Then, new
resources in other three datasets are linked to EUMIS data.
For this purpose, new resource and EUMIS dump is given to
Silk. Links are discovered only for new resources and discovered links are stored in a triple store. Discovery performance
is enough for our system currently. For example, if links of 10
new person resource in research project dataset are needed
to be discovered, those resources can be compared to 4K
academician resource in EUMIS dataset under 2 seconds.
Most of the discovered links in the current architecture are
academician links between EUSRP (includes 2K person re-
sources) and EUMIS (includes 4K person resources). Silk
can discover all of academician links in 3 minutes approxi-
mately.

Before the data is saved to the centralized triple store,
Data Unifier module takes charge of combining all the data
about a resource in EUMIS URIs. For this purpose,
it
checks the discovered links and replaces the URIs in the
data according to sameAs links. EUMAP data does not
need to be combined, since the resources of it are linked
using rooms:occupant predicate. On the other hand, organization and person resources in EUSRP and EUNEWS are
converted to discovered EUMIS resources. For removal of
triples, Data Unifier replaces the triple and then checks the
converted form of the triple from the centralized triple store
to remove.

                                               144Semantic Web Conference, ISWC 09, pages 650665,
Berlin, Heidelberg, 2009. Springer-Verlag.

[7] Fouad Zablith, Mathieu dAquin, Stuart Brown, and
Liam Green-Hughes. Consuming linked data within a
large educational organization. In COLD, 2011.

With this architecture, link discovery is automated, and
the performance of University Assistant application comes
to an adequate level since the application queries only one
triple store.

6. CONCLUSION

In this paper, we have proposed a linked open data infrastructure in Ege University, and have introduced an application called University Assistant which was developed
on this infrastructure. Our experience shows that a linked
data publication architecture is not a static product. It is always tuned according to the requirements of applications. It
must evolve to satisfy the application requirements. We observed that if a university aims to benefit from linked data, it
should create a development team which will be dedicated to
the evolution of the linked open data infrastructure. While
other parties are developing software applications, this team
should monitor the performance of the infrastructure and
adapt the architecture if it is required.

In future work, we plan to include some external links
in the EgeLOD infrastructure. Links to other universities
academic staff which lecture in Ege University and incorporating library data into the infrastructure by linking them to
the OCLC linked data14 are opportunities for that plan. We
think that management of the external links may pose new
challenges. Also, our dynamic link discovery method may
not be scalable for very large datasets. We plan to focus
on creating a scalable architecture that constantly provides
integrated data for organizations similar to Ege University.
