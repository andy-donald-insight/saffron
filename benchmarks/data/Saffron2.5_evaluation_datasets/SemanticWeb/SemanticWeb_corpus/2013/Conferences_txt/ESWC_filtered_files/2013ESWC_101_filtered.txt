An Ontology Design Pattern
for Cartographic Map Scaling

David Carral1, Simon Scheider2, Krzysztof Janowicz3, Charles Vardeman4,

Adila A. Krisnadhi1, and Pascal Hitzler1

1 Kno.e.sis Center, Wright State University, USA

{carral.2,pascal.hitzler,krisnadhi.2}@wright.edu

2 Institute for Geoinformatics, University of M unster, M unster, Germany

3 Department of Geography University of California, Santa Barbara, CA, USA

simonscheider@web.de

4 Center for Research Computing, University of Notre Dame, Notre Dame, IN, USA

jano@geog.ucsb.edu

Charles.F.Vardeman.1@nd.edu

Abstract. The concepts of scale is at the core of cartographic abstraction
and mapping. It defines which geographic phenomena should be displayed,
which type of geometry and map symbol to use, which measures can be
taken, as well as the degree to which features need to be exaggerated or
spatially displaced. In this work, we present an ontology design pattern
for map scaling using the Web Ontology Language (OWL) within a particular extension of the OWL RL profile. We explain how it can be used
to describe scaling applications, to reason over scale levels, and geometric
representations. We propose an axiomatization that allows us to impose
meaningful constraints on the pattern, and, thus, to go beyond simple surface semantics. Interestingly, this includes several functional constraints
currently not expressible in any of the OWL profiles. We show that for
this specific scenario, the addition of such constraints does not increase
the reasoning complexity which remains tractable.

Introduction and Motivation

The notion of scale is at the very core of cartography and essential for the
visualization of geo-information in maps [14]. However, scale also plays a key
role for knowledge representation and measurement [8]. In its simplest form,
scale can be expressed as a representative fraction that specifies the relation
between the distance measured on a map to the corresponding distance in the
physical world [16]. For example, a large map scale of 1:25000 indicates that one
unit of measure on this map corresponds to 25000 units of the same measure on
the ground. In turn, a small scale map of 1:100000 covers a larger region.1

 An extended technical report with the appendix can be found at http://knoesis.

wright.edu/pascal/resources/publications/odp-carto-scaling-TR.pdf

1 The reason for this is that the terms small and large refer to the representative
fraction, with 1/25000 being the larger fraction. Note that this usage of small and
large differs from how other domains refer to scale, e.g., as in large scale study.

P. Cimiano et al. (Eds.): ESWC 2013, LNCS 7882, pp. 7693, 2013.
c Springer-Verlag Berlin Heidelberg 2013
?

?

?
Dealing with scale-dependent representations of phenomena in maps in a
seamless manner is called map scaling. It involves a lot of specialized knowl-
edge. For instance, highway symbols may have to be exaggerated and displaced
before they can be rendered on a small scale map. Thus, trying to read the
street widths or pathway from a small scale map will yield meaningless results.
Similarly, geographic features such as creeks, lakes, and ponds will have to be
fused, simplified, or omitted. Buildings may be represented as polygons or pointlike features at some scale, but may be fused to blocks and neighborhoods at a
smaller scale. Generalizing further will collapse these blocks into a representation of a whole city. Finally, on a global map, only major capitals will be left
while all other cities may disappear.

Map scaling requires choosing a certain data representation as well as a mode
of display for every geographic phenomenon type at each scale level inside a map
extent. Cartographic abstraction is, to a large degree, a sophisticated craft. It
involves semantic as well as cartographic knowledge, including knowledge about
the involved type of features, map generalization rules, and appropriate symbolism for layout as well as symbol placings [14].

However, currently, the knowledge about scale dependency of digital representations remains inaccessible. This makes the integration of digital information
across scales and across applications challenging. While there is a rich body of
work on how to address scale in cartography, most of the knowledge involved
is not specified formally or is hidden in application source code. This contradicts with one of the major paradigm shifts underlying Semantic Web research,
namely to enable the creation of smarter data instead of smarter applications.
Rather than engineering increasingly complex software, the so-called business
logic should be transferred to the level of (meta) data. The rationale behind
this is that smarter data will enable more usable and flexible applications, while
smarter applications alone fail to improve data along the same dimensions. So
far, the notion of scale has barely been given any attention in the Semantic Web,
even though most digital resources have an intrinsic scale level. In particular, we
do not know of any published ontology patterns on scale.

In this paper, we propose a scale ontology design pattern (in the sense of
[6]) which can be used to document and publish knowledge about map scaling applications on the web. It describes the scale dependent representation of
geographic phenomena in such applications, and makes the underlying scaling
decisions explicit and accessible on the Web. Hence, our work may be integrated
with provenance ontologies such as Prov-O2. With respect to (semantic) Web
services, our pattern can be used to link and track geo-features across scale lev-
els. For example, one could query for a map service that serves base data in the
scale required to visualize features from another service. Furthermore, the map
scaling pattern allows to reason on scaled geographic information. For example,
one can check whether two phenomena can be displayed together at a single
scale level across scaling applications. One may also gather information about
a certain geographic phenomenon at a high level of geographic detail across

http://www.w3.org/TR/prov-o/

D. Carral et al.

the Web. And one can check scaling applications for consistency of scaling and
representation.

From the viewpoint of semantic technology, we will address two challenges for
such a pattern: First, from a conceptual viewpoint, the pattern has to ensure
that geographic features are traceable across scale levels, and that the basic
logical constraints inherent in (rendering) applications are formally captured in
the pattern. Second, from a computational point of view, reasoning with the
pattern needs to be tractable. For this purpose, the application logic needs to
captured in a tractable subset of first order logic (FOL). However, as we will show
later on, current OWL fragments are not flexible enough to capture the required
functional constraints. We will show that these constraints can be captured by
a certain logical fragment that remains in polynomial order of complexity.

In the following, we will first discuss map scaling in order to motivate and help
understand our axiomatization. Then, we will discuss a formal axiomatization
on the level of a functional pattern as well as on the level of a DL fragment which
allows tractable reasoning. We will evaluate the pattern by showing its use in
an existing application that studies Malaria, before we discuss and conclude the
paper.

2 Map Scaling in a Nutshell

Practical solutions of the map scaling problem draw on a number of core issues in
Geographic Information Science (GIScience) as well as Computer Cartography
[14,13]. In this section, we will give a very brief overview of key concepts and
related work. We will also suggest a conceptual view on them, which helps put
our ontology pattern into context.

2.1 Map Scale

With the notion scale we mean cartographic scale, which refers to the ratio of
the depicted size of a feature on a cartographic map relative to its actual size
[16]. There are other notions of scale. For example, the scale of analysis and the
scale of observation are scales induced by analyzing or observing a phenomenon.
The scale of a phenomenon is the scale at which a phenomenon appears or can
best be studied [20]. The latter kinds of scale are not explicitly addressed in this
paper, however, they may decide about whether certain kinds of entities appear
at certain scales or not [16]. In this context it will be important to keep in mind
that a unique map scale exists only for a map image, i.e., a map displayed as
an image, and not for map data, which may be displayed at several different
scales. Furthermore, (digital) zooming should not be confused with scaling, as
no new information is added or removed while zooming. So far, we do not know of
any published work addressing the issue of scale in the Semantic Web context3.
However, the topic is central for GIScience [5].
3 Preliminary unpublished work is avaible here:

http://vocamp.org/wiki/Scale-vocab.
?

?

?
2.2 Geographic Phenomena

Geographic phenomena can be represented in a cartographic map. They come
in different feature/object types, such as rivers, cities, roads, buildings, people,
landparcels, or the earths surface. They may also consist of conventionally established regions in a spatial reference system, such as the borders of Germany.
Furthermore, they may consist of qualities, such as temperature or windspeed
or building height. Geographic phenomena can be represented by geo-ontologies,
ranging from top-level ontologies such as [2] to domain ontologies such as NASAs
Sweet4. Most importantly, however, geographic phenomena can be measured in
terms of reference systems. This means one can unambiguously observe their extent in at least some spatial reference system that allows to refer to geographic
locations, such as WGS84. This makes them amenable to cartographic map-
ping. Externally, geo-ontologies can be aligned with the phenomenon class of
our pattern to differentiate among these types of phenomena and subclass them
further.

2.3 Map Data

Map data is any set of data which represents geographic phenomena and which
can be cartographically mapped (i.e., displayed in a map). For this purpose, it
needs to contain a spatial geometry, i.e., a type of data which specifies a subset
of points in some spatial reference system. This subset may be a single point,
a line, or some region. A frequent data structure are geodata records used in
Geographic Information Systems (GIS), i.e., records of a spatial geometry and
non-spatial attribute values. The latter can represent measurable qualities, e.g.,
temperature, as well as cartographic symbol types, e.g., a color symbol, which
may be used to display the map data at a certain scale level. Depending on the
kind of geometry, one can distinguish two kinds of map data: one is raster data,
where the geometry forms a regular tessellation (a topological cover with regular
polygons) of a subset of the reference space. An example is a satellite image.
Another one is vector data, where geometries can be irregular and need not form
a tesselation. Map data often comes in collections representing phenomena of
similar type called layers. The different kinds of map data form the context but
are not part of our ontology pattern.

2.4 Resolution

Resolution is a central notion for map scaling, however, its semantic specification
is challenging [4]. In this section, we clarify our use of the term in an informal
way, following ideas in [4]. Resolution can be regarded as a property of map
data which allows to measure its level of detail. Note that map data has a
resolution but not a map scale in our sense, since it is not necessarily displayed,
and not necessarily at a single scale level. There are different proxy-measures
for resolution, depending on the purpose. One proxy measure is based on grain

http://sweet.jpl.nasa.gov/2.2/sweetAll.owl.

D. Carral et al.

size, i.e., the extent of an atomic mapping entity in a spatial reference system.
An example is the instantaneaous field of view of a satellite, i.e., the area on
the ground surface that corresponds to a single remote detector element, or the
minimal mapping unit [8]. Our pattern allows grain size resolution levels of map
images interchangeably with their map scale levels in order to restrict potential
display of map data to a scale level. However, we do not explicitly model scale
and resolution of map data, which may be done in the future.

2.5 Map Image

A map image is the result of displaying map data in a map display, i.e., a medium
(e.g., paper) used to visualize the map, according to a map scale. Therefore, a
map image has a grain size resolution as well as a map scale, the latter because
it is projected into a map display in which each pixel has a measurable size. A
map scale can be computed from the image resolution by multiplying the latter
with the pixel size. In a map scaling application, a new map image is generated
every time one zooms in or out. Note that a map image file is a different beast.
In contrast to the former, the latter is a form of map data in raster format.
While the latter has a grain (pixel) size resolution, it does not have a map scale
(since its pixels do not have fixed display sizes).

2.6 Scaling and Map Generalization

Scaling [20] refers to the seamless transfer of information between different scale
levels. Even though a digital map display in principle allows zooming in and out
regardless of map data or phenomena, a visually graspable image as well as a
semantically adequate and computationally efficient data representation depends
on the resolution as well as the design of the map data. For example, from a
visual standpoint, representations can become congested, coalesced or imperceptible at inappropriate scales [14]. There is web technology available which allows
to specify and serve scale dependent maps in the web5. The problem of map generalization has been addressed by Computer Cartography with operations that
modify map data geometry and symbolization accordingly. These include simpli-
fication, smoothing, aggregation, amalgamation, merging, collapse, refinement,
exaggeration, enhancement and displacement [14]. Since existing algorithms are
not able to automatize generalization to a degree which corresponds in quality
to manual cartographic techniques [15], map generalization in practice is still
done manually or semi-automatically [15].

Furthermore, generalization has an aspect of (semantic) modeling [15], which
relates to observation and intrinsic phenomenon scales mentioned above [20]. As
a consequence of scaling, not only the visual representation of a phenomenon, but
also geometry, semantic classes, properties and relations are affected. Further-
more, even the occurrence of individuals is not invariant across scales. Existing

5 For example, the Feature Portrayal Service (FPS) and Styled Layer Descriptor (SLD)

standards of the Open Geospatial Consortium (OGC)
http://www.opengeospatial.org.
?

?

?
formalisms for scaling and generalization, such as stratified map spaces [19], simplify the problem to lifting or generalizing classes and spatial regions, not objects.
However, as a matter of fact, individual geographic objects, such as cities and coun-
tries, appear at smaller scales, while streets, places and buildings only appear at
larger scales. From an ontological viewpoint, generalization therefore affects the
level of detail of an ontology and thus may change an ontological theory. This can
be treated as a mereological problem on the side of phenomena, such as the problem to individuate road junctions from a road segment network [17]. For our pat-
tern, we will therefore assume a generalization relation between map data sets,
which reflects diverse ways of generalizing data sets on different scale levels.

3 Preliminaries

To define and implement the pattern in a tractable way, we introduce an extension of the existing description logics fragment DLP [9], the logic fragment
underlying the OWL RL profile. We denote the extension as DLP and show
that, under certain appropriate syntactic restrictions, reasoning over this DL
fragment remains tractable. Throughout the paper we will show how this extension allows us to express some useful constraints enhancing the usability of the
map scaling design pattern.

We will make use of the DL notation along the paper, as we think it improves
readability and understanding of the ideas presented. Furthermore, some of the
new features included in the extended fragment DLP are not even part of the
OWL language, such as role conjunction, and therefore cannot be expressed
in any of the existing OWL syntaxes. DL syntax allows us to express these
constructors without having to introduce major changes in the existing notation.
Henceforth, we only implement the part of the pattern that can be done making
use of the current available constructors in OWL. If the reader is not familiar
with the DL notation see [12] for a quick introduction and [1] for a lengthier one.
The set C of allowed concepts in DLP is the set of all concepts that can be
constructed making use of all constructors in Table 1. Like in other DL fragments,
we can divide the axioms in a DLP knowledge base into ABox A, TBox B, and
RBox R statements.6

A DLP TBox [RBox ] is a finite set of general concept inclusions (GCIs)
[role inclusion axioms (RIAs)] as described in Table 1. An ABox is a finite
set of concept and role assertions also as described in Table 1. Furthermore,
DLP restricts the at-most one cardinal restriction constructor ( 1R.C) to
only appear in the right hand side of GCIs. Note that DLP allows for the use
of unrestricted role conjunctions.
We do not impose any kind of role regularity restrictions in DLP as defined
for SROIQ [10], which is the logic fragment underlying the OWL DL profile.
The regularity restrictions are applied to the tractable OWL profiles in order to
define OWL DL as a superset of these. Otherwise some of the tractable fragments
would allow some expressivity not available in OWL DL.

6 Assertional, terminological, and role boxes respectively
?

?

?
Table 1. DLP Constructors. C, D  C are concepts, R and S are roles, and {t} is a
nominal.

Syntax
Name
C(a)
Concept Assertion
R(a, b)
Role Assertion
C  D

Existential Restriction R.C
 1 Card. Restriction  1R.C
Concept Conjunction C  D
Top concept
Bottom concept

Role Inverse
Role Chain (RIA)
Role Conjunction

Semantics
I  C

a
a, b  R
I  D
?

?

?
{| there is 	 with , 	  R

{|{, 	}  R
I}  1
I  D
?

?

?



R  S
I  S

{, 	|	,   V


1  . . .  R
R1  . . .  Rn R

R  S
I  S

I|	  C

I}

n

and 	  C

I}

To preserve tractability of DLP we need to impose restrictions in the use
of the existential constructor on the right hand side of GCIs, otherwise the
fragment becomes undecidable as shown in [11]. The definition of necessary or
at least sufficient conditions under which DLP still retains tractability are out of
the scope of this paper. Nevertheless as we show in the Appendix that reasoning
in DLP is not only decidable but tractable for the defined pattern and leave the
definition of these restrictions as further work. We also elaborate on how simply
we could devise a reasoning algorithm based on some of the existing reasoning
procedures for DLP.

It may give the impression that the set of constructors represented in Table
1 do not cover the complete expressivity of the OWL RL profile. Indeed, we do
not explicitly include some of the constructors that are part of the specifications
of the RL profile. As shown Table 2, all of the original RL constructors can be
constructed from the set of constructors in Table 1. A smaller set of constructors
allows for more succinct definitions and theorems in further sections.

Table 2. DLP Syntactic Sugar. C, D, and E are concepts, and R is a role.

R

RL Axiom Equivalent Axioms
C  R.D
C  D  E
C  D
C  0R.D

.C  D

C  E
D  E
C  D  
C  R.D  

Note that we have also included the  concept in our definition in Table 2, which
does not appear as part of the RL constructors. This special concept is easy to
simulate in RL adding axioms C  D   and C  D where C and D
are fresh concepts. We have that if K contains these axioms then K |= C  .
?

?

?
4 Formal Description of the Pattern

In Section 2, we introduced map scaling as seamless transfer of information in
maps from one level of detail to another. This idea can be understood in terms of
a binary scaling function. In this section, we will describe this idea first as a simple
functional pattern (see Figure 1), illustrate it with examples, and then formalize
it in DL such that it can published as ontology vocabulary (see Figure 2).

Fig. 1. The map scaling pattern in functional notation. Boxes denote functions, ellipses
denote types of entities. Dotted arrows indicate input types and full arrows output types
of functions. Relations are boolean functions.

The functional pattern in Figure 1 allows to quickly grasp the formal constraints in terms of functions (denoted as boxes) that map various input types
to a single output (types denoted as ellipses). Along with the explanation of
this pattern, the challenge addressed here is to translate these general functions
into the previously described DL language DLP, i.e., to translate Figure 1 into
Figure 27.

Simply put, map scaling applications provide more or less generalized geometric
representations of geographic phenomena for different scale levels. That is, we need
to deal with the primitive types of things listed in Table 3. The formal relationship
between these types, which is manifest in map scaling applications, can be captured
by a scaling function and two ordering relations. The former can be understood as a
binary function from geographic phenomena and scale levels into geometric repre-
sentations. The latter account for scale dependent orderings of scale levels and data
representations. The numeric scale/resolution boundaries which correspond to a
single scale level are given by hasUpperBound and hasLowerBound , respectively.
The scaling function is specific for a certain scaling application. Other relations
(such as hasScale, getM ap and sharesApplicationWith ) and types (e.g. MapData)

7 General higher order functions, which are used here as in functional programming,
e.g. http://www.cl.cam.ac.uk/research/hvg/Isabelle/, are not formalizable in DL.

D. Carral et al.

Table 3. Primitive types of entities involved in the functional pattern

Name
Geographic phenomenon GeographicThing

Formal Type

Geometric representation GeometricRep

Scale level
Scaling

ScaleLevel
ScaleLevel 
GeographicThing 
GeometricRep

be

by

categorized

Explanation
Type of mappable phenomenon,
may
geo-
ontologies and may be aggregated
to layers
Type of data representation of a
phenomenon which involves a geometric part (raster or vector repre-
sentation) as well as a (map-) symbolization part
Type of discrete level of detail
Type of scaling function

can be based on this formal apparatus. For example, in this pattern, a map simply
corresponds to a the projection of a scaling function to a fixed scale level.

The corresponding DL ontology pattern is described in Figure 2. Since DL
does not support the specification of arbitrary functions, scaling functions in
our pattern are indirectly represented as subgraphs consisting of reified 3-tuples.
A scaled representation is a reified tuple of geographic thing, scale level and
geometric representation. This work around requires the introduction of a new
class ScaledRep, as well as its outgoing properties representsObject, isScaled
and isPresentedAs, denoting the three slots in each 3-tuple. Maps need to be
introduced as a primitive class, and we need to explicitly assert that they are
constituted of scaled representations and have a single scale level. Furthermore,
maps are assigned a single scale level which can only be shared within the same
application. Our pattern also involves further formal constraints which will be
discussed along the next paragraphs in terms of axioms.

Our pattern does not include concept hierarchies, because they are not primarily relevant for scaling. Scale/generalization orders and concept subsump-
tion, even though related, are two separate things. However, the latter may be
introduced through geo-ontologies of phenomena.

4.1 Maps and Applications

As mentioned above, we define maps as being constituted of scaled representations of phenomena at a fixed scale. This notion of a map captures the idea
that maps are actually semiotic signs, i.e., they supply a unique cartographic
representation of phenomena as referents.8 In the ontology designed to fit the
pattern a map can be seen as a set of scaled representation individuals.

8 However, there are also other ways to capture the notion of cartographic maps. For
example, from a GIS viewpoint, a map may be defined as a particular collection of
map data.Or, from a cartographic point of view, maps may be seen as a kind of
cartographic visualization or image.
?

?

?
Fig. 2. The DL ontology design pattern corresponding to the functional map scale
pattern. Ellipses stand for DL classes. Arrows represent DL properties that relate
classes.

The maps that stem from a certain scaling function (the former being projections of the latter to fixed scale levels) are considered part of the same scaling
application. This leaves open the possibility that there may be different scaling
applications for the same set of geographic phenomena but for different purposes.
We express this relation making use of the property sharesApplicationWith which
relates those maps that are part of the same application based on whether they
derive from the same scaling function. Property sharesApplicationWith is declared to be transitive (1), symmetric (2), and reflexive (3) with respect of the
individuals within the class Map:
sharesApplicationWith  sharesApplicationWith  sharesApplicationWith
  sharesApplicationWith

(2)
Map  sharesApplicationWith.Self
(3)
We define property hasScale as the function which delivers the unique scale
level of a given map. This property is defined to be functional, since every map
is associated with a single scale. We also define getMap as the inverse property
of hasScale which allows us to retrieve the map associated with a given scale.
These constraints are enforced using axioms (4) and (5).

sharesApplicationWith

(1)

(4)

(5)

  1hasScale.
  getMap

hasScale

We impose a less restrictive form of functionality over property getMap. We have
that this property is functional over the set of maps that belong to the same
application, which defined in our pattern as the set of maps that are connected
through the sharesApplicationWith. Note that this property is declared to be
both symmetric and transitive. I.e. a given scale s1 cannot be shared by maps

D. Carral et al.

m1 and m2 if we have that sharesApplicationWith(m1, m2) is entailed by the
ontology. We enforce this constraint with axiom 6 which automatically collapses
into one single individual all maps associated to the same scale that are within
the same application.

  1(getM ap  sharesApplicationW ith).

(6)

Due to these constraints we have that for a given application, there is only
one map at an specific scale level. The rationality behind this constraint is to
eliminate all ambiguity at the time of representing map data at a given scale
over the same application.

We have defined our ontology to allow for an easy retrieval of all the information pertaining to a single map. We can make use of the property connexion
isConstituentOf to retrieve and query about all the existing scaled representations associated with a given map. Property isScaled, which links every scaled
representation with the scale associated to the map this one belongs to, is automatically generated due to axiom (7).

isConstituentOf  hasScale  isScaled

(7)

After imposing these restrictions over applications, maps and scales, we elaborate
about scale levels and geographic representations, which are ordered in a chainlike manner.

4.2 Orders on Scale Levels and Geometric Representations

We enforce a strict partial order over properties isLargerThan and isMoreGeneralThan which respectively connect (and order) individuals over the classes Scale
and GeometricRep.

isLargerT han  isLargerT han  isLargerT han
(isLargerT han  isLargerT han

).  



(9)
isM oreGeneralT han  isM oreGeneralT han  isM oreGeneralT han (10)
(isM oreGeneralT han  isM oreGeneralT han
(11)

).  



(8)

As usual, a strict partial order is a binary relation that is irreflexive and transi-
tive, and therefore antisymmetric. We enforce transitivity of properties isLargerThan and isMoreGeneralThan with axioms 8 and 10 respectively. Axioms 9
and 11 enforce irreflexivity of both properties9 also enforcing antisymmetry.

Furthermore, we add a similarity relation among scale levels (i.e., one that
is symmetric and reflexive), which allows us to connect compatible scales across
different applications. Similarity among scale levels allows us to merge data from
different applications, each having its separate scale level chain. Note that the
computation of this similarity relation may be done in various ways based on
their numerical scale boundaries, and we deliberately leave open in our pattern
how this may be done. The similarity relation is represented in the pattern by the
9 We have that (  R1, Self)    (R1  R

1 ). for any property R1.

?

?

?
isCompatibleWith relation which is defined to be symmetric (12) and reflexive
(13) connecting all individuals in class ScaleLevel with themselves.

isCompatibleWith

  isCompatibleWith

ScaleLevel  isCompatibleWith.Self

(12)

(13)

We assume that each scale level has one upper and lower bound in terms of
numeric map scales or pixel resolutions. The latter are simply rational numbers.
Every scale has at most one upper bound and one lower bound and therefore
both properties hasLowerBound and hasUpperBound are declared functional.
The defined constraint is enforced with axioms:

ScaleLevel  hasLowerBound.xsd:float
ScaleLevel  hasUpperBound.xsd:float

  1hasLowerBound.
  1hasUpperBound.

(14)

(15)
(16)

(17)

We skip the constraint that their order needs to comply with (or even defines)
the scale level order. To improve the understanding of the publication we have
not included datatypes within DLP, necessary to deal with algebraic operations
over the xsd:float class. Once done it would not be difficult to verify than the
existing isLargerThan relationships are valid, and to automatize the creation of
this relationship between the existing scales.

Now we come to the most essential part of the pattern, namely representing
the scaling function, compare Table 3 and Figure 1. The scaling function allows to
switch to a new data representation for all phenomena by changing the scale level.
This is done in a monotonic manner, i.e., such that the ordering of scale levels is
preserved in generalization levels. Put differently, scaling to a larger scale level
excludes the possibility that representations become more general. We include
the possibility that a phenomenon is not represented at all at certain scale levels
by creating an empty GeometricRep individual, as well as the possibility that it
may be represented in a constant manner.

4.3 Monotonicity of Scaling

To enforce this constraint using OWL we make use of the class ScaledRep,and
we add a logical equivalent to the following first order logic rule to the ontology:

sharesApplicationWith(mx, my)  hasScale(sy, my)  hasScale(sx, mx)
 isLargerThan(sx, sy)
isConstituentOf(mx, srx)  isConstituentOf(my, sry)
representsObject(srx, g)  representsObject(sry, g)
isPresentedAs(srx, grrx)  isPresentedAs(sry, grry)
isMoreGeneralThan(grrx, grry)  (mx)

D. Carral et al.

This rule enforces that the ontology becomes inconsistent if

 there exist maps m1 and m2 belonging to the same application with scales

s1 and s2,

 scale s1 is larger than scale s2,
 maps m1 and m2 contain scaled representations sr1 and sr2 that represent

the same geographic thing g, and

 the geographic representation record grr1 for sr1 is more general than the

one for sr2, namely grr2.

Although this rule may look quite complex it is indeed expressible in OWL. An
automatized way of performing this transformation is presented in [3], as well
as a procedure to check if a given rule is indeed expressible in OWL. A possible
set of DL axioms equivalent to the previous rule is:

hasScale

isPresentedAs  isMoreGeneralThan

  sharesApplicationWith  hasScale  R1
R1  isLargerThan  R2
isScaled  R2  isScaled  R3
  R4
  R5
R3  R4  R5  R
R.  

  isPresentedAs
representsObject  representsObject

where all Ri are freshly introduced roles that do not appear previously in the
ontology.

4.4 Functionality of Scalings

Next, we enforce functionality constraints on the subgraph of scaled representations which denotes a scaling function, i.e., a singular scaling application.

First, we make use of simple OWL axioms to enforce functionality for the properties isPresentedAs, isScaled, and representsObject, which respectively connect
a scaled representation with the geometric representation, the scale, and the
geographic thing it is associated with.

  1isPresentedAs.
  1isScaled.
  1representsObject.

(18)
(19)

(20)

Second, a scaled representation is enforced to have a geometric representation,
a scale, and a geographic thing associated to it. This is enforced using OWL
axioms:

ScaledRep  isPresentedAs.GeometricRep
ScaledRep  isScaled.ScaleLevel
ScaledRep  representsObject.GeographicThing

(21)
(22)

(23)
?

?

?
And third, since the relation expressed by scaled representations stands for a
scaling function, it needs to be restricted to be functional with respect to a
scale level and a geographic phenomenon represented. Furthermore, since a scaling function corresponds to a particular scaling application, we need to restrict
functionality to only those scaled representations that are part of a single scaling
application.

Since every scale is only associated to one map within the same application
we only need to verify that there only exists one scaled representation for each
geographic phenomenon. This constraint is enforced with axioms (24) and (25).

isConstituentOf

  Raux
  representsObject  representsObject
  1(Raux  isConstituentOf
).


(24)

(25)

Due to axioms (24) and (25) we have that two different scaled representations are
collapsed into a single one if they are constituents of a given map and represent
the same object. Therefore we are guaranteed that, within the same map there
only exists one scaled representation representing the same geographic thing.
Given that functionality only needs to be enforced across the maps within the
same application, and that by previous restrictions we have that there are no
two maps with the same scale within the same application we have that the
mapping to a geometric representation is functional depending on the specific
geographic thin represented and the scale for any given scale representation.

We show a translation of the axioms presented in this section in Appendix,
which is part of the technical report of the paper. In the translation we also
establish a set of domain and range restrictions based on the relations between
properties and roles in Figure 2. As further constraints, we also declare all classes
defined in the pattern to be disjoint in order to avoid possible mistakes in the
declaration of individuals.

5 Application Scenario

When interpreting and comparing maps such as the global kernel density map
(raster data)10 in Fig. 3, where the color ramp of each pixel represents the
fraction of malaria transmitting mosquitos [7], it is crucial to take into account
the effect of scale. At its original resolution 11, each single pixel covers a width
of approximately 17 kilometers at the equator. Assuming that the malaria data
is displayed at a screen pixel size of 0,25 mm, the map image has an appropriate
maximal scale of 1:68000000. Thus, for instance, using such a map to determine
whether a particular village (many of which could be contained in a single pixel)
is affected to a higher degree than others is difficult, since villages are represented
on much larger scale levels.
10 c2010 Malaria Atlas Project, available under the Creative Commons Attribution

3.0 Unported License.

11 Keeping in mind what we said about zooming and scale in digital images.

D. Carral et al.

Similarly, as mosquitos require water for reproduction, one may be tempted
to combine such a map with a river network layer. As in the case before, this
particular map is too coarse to support a meaningful comparison, since river
width is a fraction of the size of a pixel. Instead, scholars have to go back to
the source data and generate raster data at a scale which is appropriate for
the scale of river networks. While this is a simple operation for Geographic
Information Systems (GIS), and may be automatized in terms of a map scaling
service, the scale increase cannot be chanced ad libitum but has also a lower
bound. While the upper bound is constrained by the process of cartographic
abstraction mentioned before, the lower bound is limited by the measurement
procedure. In this specific case, data was coded at the village level during the
field study, and thus representing the data at a larger scale of, say, 1:2500, would
create a misleading impression of accuracy.

Fig. 3. Global kernel density map of the fraction of malaria infected mosquitos. The
spectrum blue-yellow-orange-red denotes an increase of this fraction.

The question that we address here is whether the decision about appropriateness of scaled representations of phenomena can be automated in the Semantic
Web, independently from and without (manual) interaction with particular scaling applications. In the following, we demonstrate how such a decision may be
computed based on our pattern.

Suppose we have an ABox which describes map data from different scaling

applications of the kind discussed above together with its scale level:

ScaleLevel(s1)

GeographicThing(malaria)

GeometricRep(raster)

ScaledRep(sr1)

representsObject (sr1, malaria)

isScaled (sr1, s1)

isPresentedAs(sr1, raster)

ScaleLevel(s2)

GeometricRep(polygon)

Village  GeographicThing
Village(village1)

representsObject (sr2, village1)

ScaledRep(sr2)

isPresentedAs(sr2, polygon)

isScaled (sr2, s2)

Map(m1)

Map(m2)

isConstituentOf(sr1, m1)

isConstituentOf(sr2, m2)

isCompatibleWith (s2, s1)
?

?

?
The data provided may come from different users that uploaded data from different applications. We assume there is one user that wants to merge existing
information about the malaria and existing villages. We define a new subclass
Village of the general class GeographicThing. The user can now query for all
existing villages that are represented on a compatible scale together with sr2,
which is the scaled representation of malaria.
(x?) : representObject.Village  (isScaled  isCompatible  isScaled


).{sr2}

The query will retrieve all scaled representations that represent a Village type
individual and have a compatible scale with sr2. The user can then select the
most appropriate for his visualization of the data. Making use of the xsd:float
values associated with a scale allows also to retrieve the scaled representations
within a certain range.

6 Discussion and Conclusion

In this paper, we suggested a formal ontology design pattern that describes cartographic map scaling on a semantic level in terms of a functional relationship
among geometric representations, phenomena and scale levels. Map scaling applications are used on the web to represent and display phenomena at different
scale levels. In the Semantic Web, the notions of scale and resolution have, to
the best of our knowledge, not been introduced so far, even though they are
of central importance to deal with information at different levels of granular-
ity. Scale, granularity and resolution are central notions of cartography [14] and
GIScience [13], however, formal approaches to describe map scaling are mostly
focused on mathematical models of generalization and granularity change [19],
not on making publicly available the application logic of actual scaling systems.
In the Web, granularity levels are needed to improve performance of query-
ing, reasoning, as well as in order to display information meaningfully on a map.
The challenge lies in preventing mashups of data at inappropriate resolutions,
or visual clutter across scaling applications, as well as in enabling the tracing of
geographic phenomena across different levels of detail and across different appli-
cations. Opening up existing scaling implementation logic for the Semantic Web
not only allows cross-linking web map services based on geographic phenomena,
it also has the potential to make the Semantic Web itself scale across different
levels of detail. This is because it adds the crucial information about whether
certain information can be used on certain scale levels or not. This information
today seems to be missing from the Semantic Web. For example, the geographic
reference of DBpedia or Linked Geodata [18] is a scale-free coordinate point.

In the paper, we proposed formal constraints to the pattern in a tractable
fragment of DL, which can be used to compute inferences on ABox descriptions of actual scaling applications. For example, we showed that it is possible
to check automatically whether data representations from scaling applications
are compatible with respect to their scale levels, and thus, can be meaningfully
displayed in a single map. The constraints also allow to check consistency of a

D. Carral et al.

single scaling application, e.g., with respect to monotonicity and functionality
of scaling. Future research may enrich the axiomatization based on a full functional specification in HOL, which could only be sketched in Figure 1. It may
also address scalable reasoners for DLP, which would allow testing the pattern
on a set of scaling applications described by the pattern. Even without computational reasoning, the pattern can be directly used to annotate and query existing
scaling applications based on RDF. Furthermore, the pattern may be specialized
by complementary patterns describing geometric data formats as known in GI-
Science, different geographic ontologies, the relation of map displays and scale,
as well as different notions of scale and resolution.

Acknowledgements. This work is a collaborative outcome of the GeoVoCam-
pDayton201212. Some of the authors credit funding from European Commission
(ICT-FP7-249120 ENVISION project), as well as the German Research Foundation (Research fellowship grant DFG SCHE 1796/1-1). Authors from Wright
State University acknowledge funding from by the National Science Foundation
under award 1017225 III: Small: TROn  Tractable Reasoning with Ontologies.
