Web Semantics: Science, Services and Agents on the World Wide Web 9 (2011) 137145

Contents lists available at ScienceDirect

Web Semantics: Science, Services and Agents

on the World Wide Web

j o u r n a l h o m e p a g e : h t t p : / / w w w . e l s e v i e r . c o m / l o c a t e / w e b s e m

The QALL-ME Framework: A specifiable-domain multilingual Question
Answering architecture q
Oscar Ferrandez a,
Matteo Negri c, Ruben Izquierdo a, David Tomas a, Constantin Orasan d, Guenter Neumann b,
Bernardo Magnini c, Jose Luis Vicedo a
a University of Alicante, E-03080 Alicante, Spain
b Deutsches Forschungszentrum fur Kunstliche Intelligenz  DFKI, Saarbrucken, Germany
c Fondazione Bruno Kessler, Via Sommarive, 18  Povo, Trento, Italy
d Research Group in Computational Linguistics, University of Wolverhampton, UK

, Christian Spurk b, Milen Kouylekov c, Iustin Dornescu d, Sergio Ferrandez a,

a r t i c l e

i n f o

a b s t r a c t

Article history:
Received 2 November 2009
Received in revised form 28 January 2011
Accepted 28 January 2011
Available online 12 February 2011

Keywords:
Question Answering
Textual entailment
Natural Language Interfaces
Multilingual environments

This paper presents the QALL-ME Framework, a reusable architecture for building multi- and cross-lin-
gual Question Answering (QA) systems working on structured data modelled by an ontology. It is
released as free open source software with a set of demo components and extensive documentation,
which makes it easy to use and adapt. The main characteristics of the QALL-ME Framework are: (i) its
domain portability, achieved by an ontology modelling the target domain; (ii) the context awareness
regarding space and time of the question; (iii) the use of textual entailment engines as the core of the
question interpretation; and (iv) an architecture based on Service Oriented Architecture (SOA), which
is realized using interchangeable web services for the framework components. Furthermore, we present
a running example to clarify how the framework processes questions as well as a case study that shows a
QA application built as an instantiation of the QALL-ME Framework for cinema/movie events in the tourism domain.

O 2011 Elsevier B.V. All rights reserved.

1. Introduction

The exponential growth of digital information requires processes capable of searching, filtering, retrieving and classifying
such information. In this context, Question Answering (QA) aims
to provide relevant information to end-users as correct answers
to an arbitrary question through a search in both unstructured
and structured collections of data.

This paper presents the QALL-ME Framework, a reusable architecture skeleton for building multilingual QA systems that answer
questions with the help of structured answer data sources from
freely specifiable domains. The framework is a free open source
software released under the terms of the Apache License 2.0.1 It

q This work has been subsidized by the QALL-ME consortium, 6th Framework
Research Programme of the European Union (EU), FP6-IST-033860. For more
information visit the consortium home page at http://qallme.fbk.eu/.

 Corresponding author. Tel.: +34 96 590 3400.

E-mail addresses: ofe@dlsi.ua.es (O. Ferrandez), Christian.Spurk@dfki.de (C.
I.Dornescu@wlv.ac.uk (I. Dornescu),
Spurk), kouylekov@fbk.eu (M. Kouylekov),
sferrandez@dlsi.ua.es (S. Ferrandez), negri@fbk.eu (M. Negri), ruben@dlsi.ua.es (R.
Izquierdo), dtomas@dlsi.ua.es (D. Tomas), C.Orasan@wlv.ac.uk (C. Orasan), neu-
mann@dfki.de (G. Neumann), magnini@fbk.eu (B. Magnini), vicedo@dlsi.ua.es (J.L.
Vicedo).

1 http://www.apache.org/licenses/LICENSE-2.0.html.

1570-8268/$ - see front matter O 2011 Elsevier B.V. All rights reserved.
doi:10.1016/j.websem.2011.01.002

is available at http://qallme.sourceforge.net/ and comes with a set
of demo components, which, together with extensive documenta-
tion, illustrate the potential of the approach in helping new developers to get started. The framework is highly versatile, and its main
characteristics make it suitable for building multilingual QA architectures when a domain ontology and structured data sources are
available. While its components can be easily expanded and replaced
with other implementations, domain portability can be achieved by
means of an ontology specifying the target domain [23]. Moreover,
in order to enhance interoperability and ease of use, the framework
seeks to be as far as possible compliant with current standards. The
released demo utilizes XML2 to encode the data structures that store
the answers, such structures are accessible via RDF3 schemas specified by an ontology, in our case developed using OWL-DL,4 and finally to retrieve the answer(s), SPARQL5 is used as the database query
language.

2 eXtensible Markup Language, http://www.w3.org/XML/.
3 The Resource Description Framework (RDF, http://www.w3.org/RDF) is a set of

specifications designed as a metadata model for describing information.

4 http://www.w3.org/TR/owl-guide/.
5 SPARQL is a standardized query language for RDF data, cf. http://www.w3.org/TR/

rdf-sparql-query.

O. Ferrandez et al. / Web Semantics: Science, Services and Agents on the World Wide Web 9 (2011) 137145

The QALL-ME Framework has been developed within the EU
project QALL-ME,6 which pursued the general objective of establishing a shared infrastructure for multilingual and multimodal QA. By
employing this framework, the project built a system focused on
the tourism domain that has become a concrete business
opportunity.

The remainder of the paper is structured as follows: Sections 2
and 3 present the frameworks main characteristics and the most
advanced feature, the use of textual entailment in multilingual
QA. Section 4 describes the architecture in detail; a case study is
shown in Section 5, followed by related work and conclusions in
Sections 6 and 7, respectively.

2. Framework characteristics

The QALL-ME Framework provides a reusable architecture for
multilingual QA systems over structured data belonging to a specific domain. The target domain is modelled by an ontology, used
as the main resource to enable multilinguality. The framework
takes up-to-date information into consideration by using temporal
and spatial reasoning at the time of processing the inquiry. Finally,
it finds out the mapping between questions and answers using a
novel approach based on textual entailment.

2.1. Multilinguality

The QALL-ME Framework supports questions and answers in
several different languages. Answers can be retrieved crosslingual-
ly, that is, the question and the answers can be in different lan-
guages. This
capability is possible due to the language
identification module, which detects the language of the question
and by the spatial context of the inquiry, which is used to infer
the language of the answers. Currently, the framework comes with
demo components for German, Spanish and English questions,
however, its design permits an easy extension by adding the necessary language-dependent components for a new language. For
example, in the QALL-ME project we have also implemented an
Italian subsystem.

2.2. Data sources

The data sources used to retrieve the answers are usually databases or simply XML documents with a specific structure. With
regard to our framework, the data structures have to be accessible
via predefined RDF interfaces. These interfaces or RDF schemas are
specified by the domain ontology that is used. This implies that the
answer data sources are always bound to a certain domain which,
however, can be freely specified by exchanging or extending the
domain ontology.

2.3. Ontology

In order to use the QALL-ME Framework, an ontology containing descriptions both of concepts for the target domain and of possible relations between these concepts has to be provided. The
ontology is then used in two ways: (i) as a schema for representing
the structure of the answer, in terms of instances of the ontology
concepts; and (ii) to cross the language barrier in multilingual
QA. By describing the answer by means of the ontology vocabulary,
we have a representation that is independent from the original language of the data. Therefore, by creating a mapping from the original question to a query using the ontology vocabulary, we can then

apply that query to the answer data and surpass the language
barrier.

Regarding the formal language used to encode the ontology, we
chose RDF schema (RDFS) which is recognized as a basic ontology
language [2]. However, RDFS is too weak to describe resources in
sufficient detail. After it, OIL, DAML, and DAML + OIL were designed
for more expressive uses [2]. Currently OWL (Ontology Web Lan-
guage) is the most recent development in standardized ontology
languages, endorsed by the World Wide Web Consortium (W3C)
to promote the Semantic Web vision. OWL provides three increasingly expressive sublanguages  OWL-Lite, OWL-DL and OWL-Full
 for different purposes [16]. In the frameworks development, the
case study presented next (see Section 5) and the project behind
this paper (i.e., the QALL-ME project), we have used OWL-DL language because it is much more expressive than OWL-Lite. OWLDL is based on Description Logics (DL) which means that all conclusions can be guaranteed to be computed and all computations will
finish in a finite time so that the classification hierarchy can be
computed and the consistencies can be checked.7

2.4. Spatialtemporal context awareness

The QALL-ME Framework is focused on Spatialtemporal context aware QA, where the spatialtemporal context in which the
question is uttered provides crucial information for the retrieval
of the correct answer. Accordingly, all questions are anchored to
a certain place in space and time, meaning that every question always has a spatialtemporal context. For instance, using deictic
expressions such as here or tomorrow in a question posed at
eight oclock in Berlin may potentially mean something completely
different than the same question posed at five oclock in Amster-
dam. Deictic expressions are solved by algorithms which recognize
temporal and spatial expressions in the question and anchor relative expressions (e.g.,
the nearest) to
absolute expressions (e.g.,
Unter den Linden,
Berlin).

during the weekend,

May, 22nd,

In addition, users may either explicitly indicate the spatial
temporal context in the question (e.g.,
Which movies are on
tomorrow in Trento?) or leave it implicit, in which case it will
be supplied by the system by means of default information (e.g.,
Which movies are on? would be interpreted using today and
the name of the town where the question is uttered). Therefore,
the QALL-ME Framework tries to represent the spatialtemporal
context information simulating how a human being would interpret such information. Specifically, when it is expressed by deictic
expressions, missing or explicitly posed in the query.

2.5. Textual entailment

Behind the scenes, the QALL-ME framework addresses the mapping between a natural language question and a query to the database using Recognizing Textual Entailment (RTE) techniques. RTE
techniques allow us to deal with the language variability expressed
within the questions through semantic inferences at the textual le-
vel. RTE is defined as a generic framework for modelling semantic
implications where a certain meaning is described in different
ways [10]. RTE components can recognize whether some text T entails a hypothesis H, i.e., whether the meaning of H can be fully derived from the meaning of T. In the context of our framework, H is
the minimal form of a question about some topic, and T is the question which has to be answered, cf. Section 3.

6 Question Answering Learning technologies in a multilingual and multimodal

environment, http://qallme.fbk.eu/.

7 Further details can be found in [26].

2.6. Service oriented architecture (SOA)

To realize such a demanding QA framework, a flexible dynamic
information flow is needed. Consequently, a strong componentoriented perspective has been followed for the different QA sub-
tasks. Based on our experience in large scale system development,
the architectural framework is specified from an abstract point of
view using generic QA classes that define major input/output rep-
resentations, and which also covers the specification of the major
flow of interaction between the QA components in a declarative
way.

We are using SOA as our basic means for the implementation of
the QALL-ME core architecture and the concrete QA applications.
The QALL-ME SOA describes a set of patterns and guidelines for
developing loosely-coupled, highly-reusable QA services that, because of separation of concern between description, implementation and binding, provide both increased interoperability and
flexibility in responsiveness to changes and extensions. The functionality of each QA component (see Section 4) is realized as a
web service and defined via WSDL (Web Service Description Lan-
guage). The orchestration of the components (i.e., the major information flow) is declaratively defined using BPEL (Business Process
Execution Language) and basically maintained by a QA component
called QA-Planner (see Section 4). The orchestrations of different
web service implementations create different QA systems and
existing web service implementations can easily be reused in different systems. Currently, we are using BPEL to specify standard QA
pipelines, however, it is also possible to define more sophisticated
information flows, e.g., dynamic selection and orchestration of
additional (even competing) components, cf. [22] for more details.

3. RTE-based mapping

The mapping of natural language (NL) questions to database
(DB) queries is basically controlled via RTE. The core idea is to
pre-define a finite bijective mapping between question patterns
and corresponding DB query patterns. A question pattern is an
NL question string containing variables that correspond to concepts of the ontology, e.g., Where can I see the movie [MOVIE]?.
In an analogous way, a DB pattern is a DB query with corresponding concept variables for the relevant DB slots, e.g., SELECT ?cine-
maName WHERE ?movie qmo:name
?cinema
qmo:showsMovie. ?cinema qmo:name ?cinemaName..8 Note that
this mapping actually defines both, the set of answerable DB queries
and a frozen semantic interpretation of question patterns. Also note
that the ontology is the main interface for semantically aligning
these expressions. Fig. 1 shows some further pairs of the mapping
defined for the QALL-ME cinema domain.

[MOVIE].

As the system response time is directly related to the size of the
question pattern set, it would be desirable to reduce this set as
much as possible to contain only the essential patterns. This set
is referred to as the Minimal Question Patterns (MQP) set. Given
a set QP = Qp1, . . ., Qpn of question patterns for a DB query pattern Q,
a pattern Qpk belonging to QP is minimal if none of the other question patterns in QP can be derived from Qpk (i.e., is logically entailed
by Qpk). Following this statement, a minimal question pattern is defined as a question pattern pertaining to the MQP set.

A new NL question is then processed by the following basic

steps:

Fig. 1. A subset of the NLDB pairs from our cinema domain, an average of 42
question patterns per language were defined.

(ii) Identification of NL pattern: uses RTE to determine the corresponding NLDB pair pattern (PNL, PDB) by testing whether
PNL is entailed in PQ;

(iii) Instantiation of DB pattern: instantiates PDB using corre-

sponding extracted entities from Q.

?movie

For example, the question analysis component computes for the
NL question Which cinemas show the movie Dreamgirls tonight?
the NL pattern Which cinemas show the movie [MOVIE] tonight?
and the entity [MOVIE]=Dreamgirls. Through textual entailment
the pair (Where can I see the movie [MOVIE]?, SELECT ?cinema-
Name WHERE
?cinema
qmo:showsMovie. ?cinema qmo:name ?cinemaName.) is selected
from the mapping and the corresponding DB-pattern is instantiated as Where can I see the movie Dreamgirls?, SELECT ?cine-
maName WHERE ?movie qmo:name Dreamgirls. ?cinema
qmo:showsMovie. ?cinema qmo:name ?cinemaName., using the
extracted entity from the input question. To complete the retrieval
procedure, we simply execute the query to obtain the correct
answer(s).

[MOVIE].

qmo:name

Note that the main interface for the RTE engine is the NL pattern
syntax. Therefore, how exactly, the RTE engine is realized is not
important in principle. Actually, in the QALL-ME project we have
experimented with different approaches, ranging from simple
Bag-of-Words approaches to a sophisticated Machine Learning
algorithm exploiting deep grammatical parsing of the NL patterns,
cf. [30].

(i) Question analysis: transforms the input question Q to an NL

pattern PQ;

4. Framework architecture

8 As the QALL-ME Framework assumes the answer data to be represented in RDF, it

is only natural to use SPARQL as the database query language.

The QALL-ME Framework workflow is managed by the QA Plan-
ner, which is in charge of orchestrating the web service components and thus passing the input question through the whole QA

O. Ferrandez et al. / Web Semantics: Science, Services and Agents on the World Wide Web 9 (2011) 137145

Fig. 2. The QALL-ME Framework: conceptual view of the QA workflow in the QA planner as a UML 2 activity diagram.

system until an answer is found. Fig. 2 depicts a conceptual view
on this workflow in the planner.

As shown in the figure, the QA Planner processes the users question until an answer is achieved. To do this, the QA Planner receives
five input parameters: the asked question, two parameters belonging to the spatialtemporal context (current time and users loca-
tion), a collection of facts stored into a database of answers, and
a collection of pattern mappings stored into a pattern repository
containing the minimal question patterns and their corresponding
database queries. This repository is used by the RTE components to
establish the corresponding inferences with the input question and
can be either created manually or by a suitable learning subsystem.
The single output parameter of the QA planner is the found

answer.

4.1. System components

The workflow represents both the monolingual and the crosslingual systems run; the QA Planner is the responsible service for
selecting appropriate components on the way to the answer.

Regarding the components, they are of three different kinds,

shown and annotated with relevant comments in Fig. 2:

 Language-specific: components that are implemented for each
language that the QA system will be able to handle for input
questions.

 Location-specific: different implementations for each location
at which the QA system will be able to answer questions. This
is in line with the spatial anchoring of questions.
 System-wide: unique implementations for the whole QA sys-
tem, i.e., these implementations have language- and locationindependent functionality and the QA Planner uses them for
all input questions.

The first step implemented by the QA Planner is to create a Question Object (called QObj) which will be used throughout the QA pro-
cess. At the beginning of the process the QObj contains the input
question together with the contextual information related to the
question. The following components will then be used to extend
the QObj:

(i) Language Identification: automatically recognises the source
language of the question and adds it to the QObj. Based on
this information and on the context of the question the QA
Planner selects the appropriate location and the languagedependent components.

(ii) Entity Annotation: annotates entity names in the question depending on available entity names contained in
the database of answers. The entity types used correspond to those of the domain of the QA system and
they
the
ontology.

specified

have

concepts

in

to

be

as

(iii) Term Annotation: annotates language-specific terms that are
relevant for the domain. It differs from the Entity Annotation
component in that the annotation of named entities is usually language-independent, whilst relevant terms are used
to express concepts only in certain languages. Consider, for
example, hotel facilities: terms for concepts like TV, swimming pool, safe, etc. are represented differently in different
languages, e.g., the English hair dryer is equivalent to the
German Fon.

(iv) Temporal Expression Annotation: to complete the annotation
process, temporal expressions have to be annotated, too.
Obviously, such expressions are language-specific and will
depend on the temporal context. The previous three components  apart from annotating  also convert each annotated
entity, term or expression into a canonical (i.e., normalized),
language-independent
instance, a temporal
expression is normalized into a common format
like
TIMEX29 or ISO 8601. By using these canonical forms, it is
much easier for the other components to translate such
expression into a suitable search query.

form. For

(v) Query generation: provides a proper query to the database, in
order to find an answer to the input question. This module
chooses a suitable language-dependent RTE component,
which returns the semantically inferred minimal question
pattern and its corresponding query to the database, to be
applied to the available data. Depending on the its imple-
mentation, the RTE component can also lead to the selection
of more than one minimal question pattern, each one matching different parts of the input question. In this case, the
SPARQL queries can then be composed into a single query
for answer retrieval [20].

(vi) Finally, at the end of the process, two distinct situations may
occur: (1) if no query is generated, then the user has probably posed an out-of-domain question and the system asks
the user to re-formulate the question; or (2) the generated
query is fed into the location specific answer retrieval, component which corresponds to the spatial context of the ques-
tion. This component will then retrieve the answer(s) to be
output by the system.

4.2. A walk-through example

To clarify the procedure carried out by the QA Planner, we present a running example showing how a new question is processed
through the appropriate framework components until an answer
is reached for the corresponding input.

INPUT QUESTION:
Where is the movie Matrix being shown today?
CONTEXT INFORMATION
LOC=Alicante TIME=2010-08-06T11:34:56

(1) The QA Planner receives the input information (i.e., question
and context) and selects the corresponding location-depen-
dent components. In this case the Entity Annotation and the
database of facts/answers will be taken from the Spanish
components.

(2) The Language Identification component detects that the input
question is in English, therefore the language-dependent
components such as Term Annotation, Temporal Expression
Annotation, Query Generation and consequently the RTE

engine and the repository of minimal question patterns will
be taken from English components.

(3) The Spanish Entity Annotation component takes the input
question and creates an annotated QObj regarding the entities found: Where is the movie [MOVIE] being shown
today?.

(4) The English Term Annotation component receives the QObj
and recognises terms expressing relevant aspects for the
answer retrieval (such as cinema facilities). In this example
no terms are found for the input question.

(5) The English Temporal Expression Annotation component
detects and normalizes temporal items: Where is the movie
[MOVIE] being shown [2010-08-06]?.

(6) The English Query Generation component, using the corresponding RTE engine, achieves a mapping to one of the minimal question patterns from the repository, collecting also
the SPARQL query for answer retrieval. Minimal Question
Pattern found ) Where can I see [MOVIE]?.

(7) The Spanish Answer Retrieval component launches the
SPARQL query associated with the minimal question pattern
and retrieves the answer(s) from the Spanish database of
facts. Note that this components also takes into account
information about terms and temporal expressions stored
in the QObj. Answer(s) found )CINEMA: Colci.

5. Case study

Although the framework components can be instantiated and
applied to any domain modelled by an ontology [23], within the
QALL-ME project a case study has been built and tested for the
tourism domain. This case study shows an end-to-end multilingual
QA system working on cinema/movie data for English, German,
Italian and Spanish. The next paragraphs describe the instantiation
and evaluation of the QALL-ME Framework for the above mentioned domain.

The first step was to develop the domain ontology, modelling
the tourism domain. This ontology was presented in [24], and it
is freely available.10 The ontology covers important aspects of the
tourism industry, including tourist destinations, sites, events and
transportation, and it provides a common vocabulary for the domain
as well as a computerized specification of the meaning of terms used
in the vocabulary. OWL-DL was selected as the encoding language to
implement the ontology.

The final version of the ontology contains 261 classes (con-
cepts), 55 datatype properties which indicate the attributes of
the classes, and 55 object properties which indicate the relationships among the classes. Fig. 3 shows a schematic view of a portion
of the ontology including its classes and their most important
relationships.

The classes were categorized into 15 top-level classes falling

into three categories11:

EventContent

(1) Main classes refer to the most important concepts in the
tourism domain, including Country, Destination, Site,
The
Transportation,
instances of the main classes are concrete countries, destina-
tions, sites, transportation vehicles, event contents (e.g.,
movie) and occurrences of event contents (e.g., movie show).
(2) Element classes refer to the elements of the main classes or
the elements of other element classes, including Facility,
Room, Person & Organization, Language and Currency.

and

Event.

9 http://timex2.mitre.org.

10 http://qallme.fbk.eu/index.php?location=ontology.
11 Further details about the ontology classes, attributes and relationships can be
found in [24,26].

O. Ferrandez et al. / Web Semantics: Science, Services and Agents on the World Wide Web 9 (2011) 137145

ber of 42 patterns per language. Such patterns were chosen with
the aim of covering most of the relations and concepts modelled
by the ontology, some examples of these patterns are What is
the address of the cinema [CINEMA]?, At what time is [MOVIE]
shown in the cinema [CINEMA]?, and In which cinemas can I
see [MOVIE]?, to name but a few.

In our prototype-demo [27], an evaluation focused on the QALLME benchmark was carried out. In addition, we decided to evaluate
the system on-field, by using a set of questions posed by real users
in a real situation. This has the advantage of using questions which
are different from the ones that were used to the develop the system and which were collected in a more realistic setting. In the onfield study we gathered independently-generated user questions
from the cinema domain. The users received only a brief description of the system  just to make them aware of its capabilities.
The final set of questions contained 304 cinema questions from
the Trentino region (Italy); each of these questions was then trans-
lated, so that a parallel corpus for German, English, Italian and
Spanish could be built. Since the questions were first formulated
by Italian speakers, the entities appearing in them were Italian,
and a common Entity Annotator had to be used by all languagedependent subsystems.

Table 1 shows the accuracy achieved by each language subsys-
tem, i.e., the percentage number of answers considered correct,
since they provided to the user the information solicited. Further-
more, since the RTE components are the core components of our
framework, we also show their performance in returning correct
associations between the input questions and minimal question
patterns (and consequently the retrieval of the answer(s)). To obtain the RTE component performances, we did not consider the
evaluation questions that were wrongly answered due to errors
in other components or errors not related directly to wrong RTE
associations (see last column in Table 1).

The differences of the accuracy results for each language are
mainly due to the different implementations and performance of
the language-dependent components (such as the RTE engines
and the temporal annotators) and the domain coverage of the minimal question pattern set for each language, which is directly related to the variety of user questions collected in the QALL-ME
benchmark.

An analysis of the errors revealed several situations: (i) yes/no
questions such as Is Gomorra playing in any cinema in Trentino?
cannot be answered by the system in its current state, a total of 19
(6.25%) yes/no questions were found within the question set; (ii)
errors in entity and/or temporal annotations result in a misclassification of questions and a wrong retrieval of results, on average
20.3 (6.67%) questions per language were wrong answered due
to this kind of errors; (iii) missing patterns in the previously defined
set of minimal questions patterns that would be needed to answer
an input question. In numbers, 29.6 (9.73%) questions on average
per language could not be answered due to this circumstance;
and (iv) wrong entailment association where the entailment components failed to find the correct entailed question pattern, which
represents 32.3 (10.62%) questions on average per language from
the question evaluation set.

Table 1
Evaluation results for each language-dependent subsystem over the on-field question
dataset.

Language

Accuracy

English
German
Spanish
Italian
all ()

60.85%
67.76%
77.96%
85.00%
72.89%

RTE component
performance

81.3%
84.4%
92.2%
90.0%
86.97%

Fig. 3. A portion of the QALL-ME tourism ontology.

For example, an instance of the class GuestRoom (subclass of
the Room class) is an element of an Accommodation
instance, and an instance of GuestRoomFacility is an element of a GuestRoom instance.

(3) Attribute classes refer to the packages of a group of attributes for the main classes or element classes, including Con-
tact, Location, Period and Price. For example, a
Contact instance contains all kinds of contact information
(e.g., contact person, telephone, fax, email, and website) for a
Site instance.

Once the ontology was created, the next step was to generate
the set of minimal questions patterns needed for the RTE component (see Section 3). With the aid of the ontology conceptualiza-
tions, we generated possible scenarios for making inquiries (e.g.,
you are in [DESTINATION] and you want to see the movie [MO-
VIE]). These scenarios were presented to potential users and they
were asked to freely formulate natural language requests according to such scenarios. The user requests were collected in the
QALL-ME benchmark [5], which includes questions for each language involved in the QALL-ME project, i.e., German, English, Italian and Spanish.

We generated automatically at least one scenario for each
ontology relation and concept attribute susceptible to be asked.
Such scenarios were linked with their corresponding queries to
the database, and the requests made by the users were used to
build the minimal question pattern set.12

As for the evaluation of the case study, we considered a subset
of the QALL-ME tourism ontology, including concepts, relations
and minimal question patterns specific of the Cinema subdomain.
A total number of 54 scenarios were generated for this subdomain,
and on average 400 user queries were collected for each language.
Consequently, we populated the ontology only with cinema and
movie information by local data providers. The information provided was converted into RDF answer databases, covering movie
events for a specific period of time as well as for specific locations.
Regarding the knowledge base of minimal question patterns,
we extracted from the aforementioned scenarios an average num-

12 Note, however, that depending on specific purposes, the set of minimal question
patterns can be created in any other way, too. Using ontology scenarios, as we did,
generating them by a manual creation procedure, or implementing/designing new
methods for learning/acquiring the minimal question patterns from the ontology and/
or other sources.

In order to calculate the performance of the RTE components
(last column of Table 1) we created another question evaluation
set by removing the questions that were wrongly answered by
yes/no, entity/temporal annotation and missing pattern errors. It resulted in a set of 235.1 questions on average per language, and running the system using this question set we are able to measure the
accuracy of the RTE components in mapping the input questions to
the correct minimal question pattern, which also retrieves the
information solicited. Values between 81% and 92% suggest that
the use of the RTE components in our framework is appropriate,
although obviously it is also dependent of the quality and representativeness of the minimal pattern question set.

The demo components released with the free open source software package of the QALL-ME Framework are partly based on this
case study, providing reduced versions of both our RDF answer databases and the minimal question repositories.

6. Related work

Although the literature on QA systems is extensive, the availability of these systems as open-source is quite limited. Current
open-source distributions can be classified into two broad groups
depending on the type of information source used to find answers.
Textual-based QA systems retrieve answers from the Web and/or
textual sources. Systems like Qanda,13 OpenEphyra,14
other
Aranea,15 QANUS16 and OSQA17 pertain to this category. In contrast,
QA system over structured data, traditionally addressed through
Natural Language Interfaces (NLIs), like Aqualog [15], NLBean18 or
SQ-Hal,19 obtain the answers from structured information sources
organized under a previously defined data model.

The QALL-ME Framework is a reusable architecture to create
multilingual QA systems accessing structured data and conse-
quently, falls into the second category. Table 2 shows the main features of these distributions, including our framework, in terms of
the type of information source used and their multilingual and spatialtemporal context capabilities. Only the QALL-ME Framework
develops a full multilingual setup which allows a direct processing
of questions in different languages. This fact allows users to access
all the information available in the ontology posing questions in
any of the included languages. In contrast, the rest of the distributions are English-based monolingual systems. Although these systems could be adapted to multilingual environments by adding
translation capabilities, it has been proven through experimentation (see CLEF QA track series20) that these kinds of multilingual approaches seriously reduce the system performance in comparison
with its monolingual version. Offering implicit spatialtemporal
context capabilities is another distinctive characteristic of the
QALL-ME Framework. While some of the referred systems are able
to detect and use explicit time and location expressions appearing
in a question such as dates or city names (explicit spatialtemporal
processing), only the proposed framework permits, in addition, to
convert implicit spatialtemporal references such as this evening
or near hear into specific time and place coordinates by taking into
account the time and location information anchored to the questions
when they are posed.

Focusing on NLIs development, the rest of this section gives an
overview of relevant related works on NLIs, emphasizing the

13 http://sourceforge.net/projects/qanda/.
14 http://www.ephyra.info/.
15 http://www.umiacs.umd.edu/jimmylin/downloads/Aranea-r1.00.tar.gz.
16 http://www.comp.nus.edu.sg/junping/docs/qanus.pdf.
17 http://www.osqa.net/.
18 http://www.markwatson.com/opensource/.
19 http://www.csse.monash.edu.au/hons/projects/2000/Supun.Ruwanpura/.
20 http://www.clef-campaign.org/.

Table 2
QA open-source distributions.

System

Information source

Languages

Spatialtemporal context

Qanda
OpenEphyra
Aranea

NLBean
SQ-Hal
AquaLog
QALL-ME

Text/Web
Text/Web
Text/Web
Text/Web
Text QA pairs
Relational DB
Relational DB
Ontology
Ontology

Monolingual
Monolingual
Monolingual
Monolingual
Monolingual
Monolingual
Monolingual
Monolingual
Multilingual

Explicit
Explicit
Explicit
Explicit
Explicit
Explicit
Explicit
Explicit
Explicit and implicit

differences between the QALL-ME Framework and previous
approaches.

In this analysis, we distinguish between three categories of
interfaces: (i) full Natural Language Interfaces; (ii) restricted Natural Language Interfaces; and (iii) instance-based methods.

6.1. Full NLIs

QA over structured data has been traditionally addressed through
a deep analysis of the question in order to reconstruct its logical
form, which is then translated into the query language of the target
data [1,25,6,17]. This approach implies a complex mapping between
linguistic objects (e.g., lexical items, syntactic structures) and data
objects (e.g., concepts and relations in a knowledge base). As shown
by [12], full NLIs are often preferred by users over other solutions to
access structured information (e.g., forms-based, and graphical
query language interfaces). Several studies, however, agree on their
limitations in terms of portability, due to the high costs associated
with their development, configuration, and customization to new
domains [9,1,7,8]. Despite recent efforts in developing authoring
tools to support NLIs configuration [18], the mapping between language and data structures still requires intensive manual work by
domain experts and language engineers. This represents a bottleneck in the realization of large scale and portable NLIs.

Compared to traditional full NLIs, the QALL-ME Framework allows for a considerable reduction in the overall porting costs. As
shown in Section 2, leveraging the notion of textual entailment
the problems of finding logical representations of questions and
then translating them into database queries is bypassed through
semantic inferences at the textual level. Since it does not require
explicit mappings between language expressions and the data objects stored in the target database, the textual entailment-based
approach allows the system to effectively cope with the fact that
linguistic phenomena are usually independent from the database
schema. It is also worth mentioning that, as it is implemented in
the QALL-ME Framework, such a solution presents advantages in
terms of flexibility and adaptability. As regards flexibility, SOA allows new textual entailment components to be plugged in easily
(e.g., for a new language, as done for Italian) with no impact on
other components. As regards adaptability, the textual entail-
ment-based approach allows experimentation with different solutions to the problem of QA over structured data. As an example,
still in the QALL-ME scenario [20], presents an alternative approach
casting the question analysis problem as a Relation Extraction task.
Though quite different with respect to the strategies adopted for
the other languages, the Italian subsystem based on this approach
has been successfully integrated in QALL-ME.

6.2. Controlled NLIs

Controlled NLIs have been proposed as a simple solution to
avoid the issues raised by language variability on the one side, still

O. Ferrandez et al. / Web Semantics: Science, Services and Agents on the World Wide Web 9 (2011) 137145

hiding the complexity of formal languages on the other side. In
such a framework, users requests are composed using a controlled
language with terminological and grammatical restrictions. Among
others, the system presented in [4] uses Attempto Controlled Eng-
lish, an unambiguous subset of English which can be automatically transcribed into a triple-based semantic web language to
query ontologies. A controlled natural language interface is also
proposed by [21] as an effective way to translate users requests
into SQL/temporal, a query language for temporal databases.
Though suitable to tackle the language variability problem, and
effectively fill the gap between users information needs and valid
queries to access the data, controlled NLIs present some limita-
tions. First, the adoption of a controlled language imposes a cost
on the user since the language has to be learned. As pointed out
by [4], though much cheaper than learning logic and the query
language of the target data, the cost of training users on the controlled language is not negligible. Also, controlled languages feature limited portability since manual adaptation of the rewrite
rules is often required to use them with a new ontology or a new
knowledge base.

The QALL-ME Framework overcomes both the aforementioned
limitations of controlled NLIs. On one side, the system is robust enough to allow for a natural and user-friendly interaction, exploiting
the full potential of unrestricted natural language queries. On the
other side, scalability and portability of the approach come at the
limited cost of providing a relatively small set of minimal questions lexicalizing relations in a new target domain ontology, as described in Section 2.

6.3. Instance-based methods

Instance-based methods for QA are based on learning answering strategies (S) directly from clusters of similar training questionanswer pairs (QA). Thus, answering a new question (Qn)
consists on performing a question to question matching (Q-to-Q)
to find the training question pair (QjAj) whose Qj part is most
similar to Qn. Next, the answer to Qn is retrieved by applying the
strategy Sj associated to the cluster Qj pertains to.

Q-to-Q matching performance is crucial for instance based QA
systems since it needs to address all the issues regarding language
variability in the input question in order to match exactly the
questionanswer pair that retrieves the correct answer. Q-to-Q
matching methods have been applied to both QA system catego-
ries: text- and structured-data-based.

In text-based QA, the adoption of such approaches has been
motivated by the need for principled, statistically based, easily
re-trainable, and language independent QA systems that take full
advantage of large amounts of training data. To these aims, the system described in [14] considers a multi-dimensional space, determined by features (e.g., lexical n-grams, parse trees elements)
extracted from training examples. Training questions are represented as data points in this space, allowing the construction of a
set of neighborhood clusters, and a corresponding model for each
of them. At the test stage, in order to perform the Q-to-Q matching,
each model is applied to the input questions to produce its own set
of candidate answers. The FAQFinder system described in [29]
focuses on retrieving information from a Frequently Asked
Questions (FAQ) archive, containing questionanswer pairs where
questions are pre-answered and compiled by domain experts. The
basic Q-to-Q matching method adopted by the system relies on
four complementary metrics to judge the similarity between a user
question and an FAQ question: (i) cosine similarity; (ii) word over-
lap; (iii) WordNet-based semantic similarity; and (iv) question
type similarity. Similarly, in [11,31], Q-to-Q matching mechanisms
are applied over community-collected QA archives containing
peoples answers to other peoples questions posed on the Web.

To solve the problem of word mismatches between users questions and questionanswer pairs in the archive, the matching process relies on a translation-based approach, which implicitly
expands queries using translation probabilities [3]. More recently,
[19] presented a speech-based QA system using Q-to-Q matching
to retrieve answers from two different types of
information
sources: (i) a large repository of questionanswer pairs collected
from the Web for static questions; and (ii) trusted content aggregator websites for dynamic questions. Q-to-Q matching is performed
by combining several metrics including TF-IDF scores and string
comparison metrics such as Levenshtein edit distance and n-gram
overlap.

As regards QA over structured data, Sneiders [28] proposed a
shallow Q-to-Q matching method based on a keyword comparison
technique called Prioritized Keyword Matching. Such a method relies on simple pattern matching of the input question to a number
of question templates (dynamic parameterized questions about
events in a large city). Finally, a similar pattern-based technique
is used in the AquaLog [15] system as a core mechanism to translate natural language questions into combinations of ontologycompliant triples used to query an ontology. Regular expressions
are used to process input requests, and classify them into 14 question types, or intermediate representations. The correct classification of the question into one of the prototypical cases known
by the system is crucial for correct answer retrieval.

All these approaches are directly relevant and in various aspects
similar to our work, which can be classified as an instance-based
method as well. However, also in this case the strategies adopted
in the QALL-ME Framework present novelties and advantages over
previous works. First, textual entailment-based Q-to-Q matching is
an original and more flexible solution compared to the mapping
techniques previously described. Compared to word-overlap,
cosine similarity, question type similarity, and pattern-based
methods, the entailment framework suggests sophisticated inferences in order to deal with language variability, which in theory
is a potential improvement. In addition, it offers lots of room to
integrate advanced algorithms and knowledge derived from a variety of sources (e.g., ontologies, the Web, large corpora), which have
not been fully exploited yet. A second advantage of the matching
strategies implemented in the QALL-ME Framework is represented
by the possibility of composing the output of partial matches.
Previous works try to find a perfect match between users questions
and the questions stored in the archive. Hence, for successful
answer retrieval, the archive should contain at least one question
expressing the same combination of constraints (i.e., ontology
relations) expressed by the input question. In contrast, textual
entailment-based Q-to-Q matching allows the collection of multiple entailed minimal question patterns (each representing an
ontology relation), and combines the associated SPARQL queries
into a single query to the target database. The two different
strategies have different impact on the systems scalability and
portability. Extending, or porting traditional instance-based methods to new domains (or languages) requires the collection of large
quantities of prototypical questions representing all the possible
users information needs in the new domain (or language).

Porting the QALL-ME Framework only requires the availability
of at least one sample minimal question pattern lexicalizing each
relevant domain relation. Note, however, that the performance of
a QA system based on the QALL-ME Framework will be conditioned
by the ontology, since just concepts and semantic relationships
modelled by the ontology will be able to be answered.

7. Conclusions and future work

The main contribution of this research is the release of an open
source software package that implements a reusable, multilingual

and context-aware QA Framework, working on structured data
from specifiable domains.

While from a broad perspective the QALL-ME Framework is focused on solving the QA problem on restricted domains, its main
characteristics cover many other aspects, which might go beyond
the interest of the QA community and attract a wide NLP audience.
For instance, the framework is based on SOA, which provides interoperability and flexibility realized by using web services for the
implementation of the potentially interchangeable components.
The framework Multilinguality is achieved by an ontology modelling the domain, which also represent a framework limitation since
an available ontology has to be previously specified. At the time of
posing questions, the framework also carries out temporal and spatial reasoning, which leads to up-to-date and coherent answers.
And finally, the task of finding the correct mapping between question and answer is carried out with RTE-based components. Specif-
ically, the scientific contribution of exploiting textual entailment
for question interpretation comes from our idea that featuring
the capability of composing queries mapping a question to multiple question patterns goes beyond calculating a similarity score between questions. Therefore, textual entailment provides nicer
semantic interpretations to our framework, although further investigations are needed in this field in order to achieve a solution for
all the different situations the system faced with.

Furthermore, the distribution of the framework as an opensource allows us to share the results of our research work and others
to repeat and investigate future improvements of our experiments.
As for future research directions, automatic acquisition of minimal question patterns is one of the most promising directions
emerged at the end of the project. In this direction, we started preliminary experiments aiming at deriving minimal question patterns using corpora and the domain ontology. With regard to
other aspects, more efforts have to be undertaken in Interactive
QA for the development of modules capable of providing rich and
natural answers and dialogue functionalities for enhancing
usersystem interaction. Furthermore, the framework characteristics allow an easy extension or replacement of its components: for
instance, since research on textual entailment
is constantly
improving, such improvements can be added into our RTE compo-
nents; or they can be replaced by freely available textual entailment recognizers such as the EDITS system[13], which is another
outcome of the QALL-ME project.
