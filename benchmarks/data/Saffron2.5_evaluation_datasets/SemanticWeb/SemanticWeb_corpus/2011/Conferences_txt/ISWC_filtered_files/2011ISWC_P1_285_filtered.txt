Visualizing Ontologies: A Case Study

1. Abstract These are entities that cannot be located in space and time, such

as mathematical concepts.

2. Event These are physical, social, or mental processes, events, or states. Event

is, therefore, disjoint from Abstract.

3. Object These are physical, social or mental objects or substances. Therefore,

Object is disjoint from Abstract and Event.

4. FeatureOfInterest A feature of interest is an abstraction of real world phe-

nomena and is subsumed by the union of Event and Object.

5. Quality This is any aspect of an entity that cannot exist without that entity,
such as a surface of a solid object. Quality is also disjoint from Abstract,
Event, and Object.

An Euler diagram asserting these subsumption and disjointness properties as a
single axiom, alongside the axioms expressed using description logic, can be seen
here:

Entity

Abstract

Quality+

Event+

Object+

FeatureOfInterest

1. Abstract  Entity
2. Quality  Entity
3. Event  Entity
4. Object  Entity
5. Abstract  Quality  
6. Abstract  Event  
7. Abstract  Object  
8. Quality  Event  
9. Quality  Object  
10. Event  Object  
11. FeatureOfInterest  Event Object
12. Entity  Abstract Object Event Quality

The Euler diagram has a certain succinctness over the description logic in that
there are 6 DL axioms asserting disjointness properties, for example.

Notice, in the figure above, the concept Object is annotated with a plus sym-
bol, as are Event and Quality. Whilst not part of the formal syntax, this plus
symbol is used to indicate that there are concepts subsumed by each of these
concepts that are not displayed in this diagram; with tool support, one could
imagine clicking on this plus to expand the diagram, to show the subsumed
concepts. In the SSN ontology, Object is the union of two disjoint concepts,
PhysicalObject and SocialObject:

Object

PhysicalObject+ SocialObject+


SocialObject

1. Object
PhysicalObject
2. PhysicalObject  SocialObject  

J. Howse et al.

A PhysicalObject is an object that has a proper space region whereas a SocialObject exists only within some communication Event, in which at least one
PhysicalObject participates. Again, as indicated by the plus sign, PhysicalObject
subsumes various other concepts: Sensor, System, Device, and SensingDevice. A
Sensor can do sensing: that is, a Sensor is any entity that can follow a sensing
method and thus observe some Property of a FeatureOfInterest. A System is a
unit of abstraction for pieces of infrastructure for sensing, namely Device and
SensingDevice. A Device is a physical piece of technology, of which SensingDevice is an example. Additionally, SensingDevice is an example of Sensor. This
information about the SSN ontology is axiomatized by the single Euler diagram
below, and equivalently by the adjacent description logic axioms:

PhysicalObject

Sensor

System

Device

SensingDevice

1. Sensor  PhysicalObject
2. System  PhysicalObject
3. Device  System
4. SensingDevice  Device
5. SensingDevice  Sensor

It should be clear that the diagram just given makes some informational content explicit, whereas it needs to be derived from the description logic axioms.
For instance, one can easily read off, from the diagram, that SensingDevice is
subsumed by PhysicalObject, since the closed curve representing the former is
contained by the closed curve representing the latter. From the description logic
axioms, one must use the transitive property of  to extract this information:
SensingDevice  Sensor  PhysicalObject. To make this deduction, one has to
identify appropriate description logic axioms from the list given, which requires
a little more effort than reading the diagram. This example, illustrating the inferential properties of the diagram, is a typical example of a free-ride (sometimes
called a cheap ride), the theory of which was developed by Shimojima [16], later
explored by Shimojima and Katagiri [17]. In general, a free-ride is a piece of
information that can be readily seen in a diagram that would typically need to
be inferred from a symbolic representation.

SocialObject also subsumes various other concepts, which we do not describe
in full here. Three will be of use to us later: a Situation is a view on a set of
entities; an Observation is a Situation in which a SensingMethod has been used
to estimate or calculate a value of a Property of a FeatureOfInterest; and Sensing is a process that results in the estimation, or calculation, of the value of a
phenomenon. The following Euler diagram defines an axiom from the SSN ontol-
ogy, and the adjacent description logic statements capture the same information:
?

?

?
Situation

Observation

Description

Method

Process

Sensing

SocialObject

InformationObject

1. Situation  SocialObject
2. Observation  Situation
3. InformationObject  SocialObject
4. SensorOutput  InformationObject
5. Description  SocialObject
6. Method  Description
7. Process  Method
8. Sensing  Process
9. Situation  Description  
10. Situation  SocialObject  
11. InformationObject  Description  
This diagram, presenting information about the concepts subsumed by SocialOb-
ject, also has many free-rides, such as Sensing is subsumed by Description, and
that Process is disjoint from Observation since the two curves do not overlap.
For the latter, to deduce this from the given description logic axioms, one would
need to use axiom numbers 2, 6, 7, and 9.

SensorOutput

We saw earlier that Quality was subsumed by one of the top-level concepts,
Entity. In turn, Quality subsumes Property, which is an observable quality of an
event or object. Property subsumes many concepts, but we only make use of one
of them later: MeasurementCapability. This concept collects together measurement properties (accuracy, range, precision, etc) as well as the environmental
conditions in which those properties hold, representing a specification of a sen-
sors capability in those conditions:

Quality

Property

MeasurementCapability

1. Property  Quality
2. MeasurementCapability  Property

The last part of the concept hierarchy that we demonstrate concerns Event,
which was subsumed by the top-level concept Entity. Two of the concepts subsumed by Entity are Stimulus and SensorInput. A sensor input is an event that
triggers the sensor and the concept SensorInput is equivalent to Stimulus:

Event

Stimulus

SensorInput

1. Stimulus  Event
2. SensorInput  Event
3. SensorInput  Stimulus

Notice here that, in the Euler diagram, we have asserted equivalence between

concepts by drawing two circles on top of one another.

J. Howse et al.

We have represented 24 of the SSN concepts using Euler diagrams to assert
subsumption and disjointness relationships. The discussions around free-rides
indicate that Euler diagrams (the basis of concept diagrams) can be an effective
method of axiomatizing concept hierarchies. We refer the reader to [2] for further
information on the hierarchy.

3.2 Role Rescrictions
Moving on to role restrictions, concept diagrams extend Euler diagrams by incorporating more syntax to increase their expressiveness. In particular, arrows
are used to represent role restrictions. The source of the arrow is taken to restrict the domain of the role, and the target provides some information about the
image of the role under the domain restriction. The nature of the information
given is determined by the arrows type: arrows can be dashed or solid. Given a
solid arrow, a, sourced on C and targeting D, representing the role R, a asserts
that the image of R when its domain is restricted to C is equal to D, that is:

where image(R|

C) = {y : x  C (x, y)  R}.

image(R|

C) = D

By contrast, if a were instead dashed then it would assert that the image of R
when its domain is restricted to C includes at least the elements in D, that is:

image(R|

C)  D.

As we shall see in our examples, the syntax that can be used as sources and
targets of arrows, including closed curves (both labelled, as in Euler diagrams,
or unlabelled), or dots. Unlabelled closed curves represent anonymous concepts
and dots represent individuals. As with closed curves, dots can be labelled to
represent specific individuals, or unlabelled to represent anonymous individuals.
The syntax and semantics will be more fully explained as we work through our
examples.

Our first example of some role restrictions concerns the concept Sensor, since
this is at the heart of the SSN ontology. There are various restrictions placed on
the roles detects, observes, hasMeasurementCapability and implements. The first
of these, detects, is between Sensor and Stimulus: sensors detect only stimuli.
Next, there is a role observes between Sensor and Property: sensors observe only
properties. Thirdly, every sensor hasMeasurementCapability, the set of which is
subsumed by MeasurementCapability. Finally, every sensor implements some sens-
ing. That is, sensors have to perform some sensing. The concept diagram below
captures these role restrictions:

Here, we are quantifying over the concept Sensor, since we have written For all
Sensor s above the bounding box of the diagram (in the formal abstract syntax
of concept diagrams, this would be represented slightly differently, the details
of which are not important here). The dot labelled s in the diagram is then the
source of four arrows, relating to the role restrictions just informally described.
The solid arrow labelled detects is used to place the following restriction on the
detects role:

image(detects|{s})  Stimulus,
?

?

?
For all Sensor s

Stimulus

Property

detects

Sensor

s

observes

Measurement

Capability

Sensing

hasMeasurement

Capability

implements

treating the individual s as a singleton set. The unlabelled curve is acting as an
existentially quantified anonymous set so, strictly, the arrow and the unlabelled
curve assert:

X image(detects|{s}) = X  X  Stimulus.

Earlier, we defined an axiom that asserted MeasurementCapability is subsumed
by Property, along with axioms that give the disjointness information conveyed in
the diagram above. We have made use of that information in the diagram above,
by drawing the curves with appropriate containment and disjointness properties.
A further point of note is that, in this diagram, we have not asserted anything
about whether image(observes|{s}) and image(hasMeasurementCapability|{s}) are
disjoint, or whether one subsumes the other. All we know is that the former is
subsumed by Property and the latter is subsumed by MeasurementCapability.
Finally, the dashed arrow provides partial information:

Xy image(implements|{s})  X  X  Sensing  y  X

where X arises from the unlabelled curve targeted by the arrow and y arises
from the unlabelled dot placed inside this curve; we are using unlabelled dots to
assert the existence of individuals.

The role restrictions just given, together with the disjointness information,

can also be expressed using the following description logic axioms:
1. Sensor   detects.Stimulus
2. Sensor   observes.Property
3. Sensor   implements.Sensing
4. Sensor   hasMeasurementCapability.MeasurementCapability
5. Sensor  Stimulus  
6. Sensor  Property  
7. Sensor  Sensing  
8. Stimulus  Property  
9. Stimulus  Sensing  
10. Property  Sensing  

J. Howse et al.

We can see that the concept diagram has free-rides arising from the use of
the unlabelled curves. For example, it is easy to see that image(detects|{s}) is
disjoint from Property, but this information is not immediately obvious from the
description logic axioms: one must make this deduction from axioms 1 and 8.

Our second collection of role restrictions concerns the concept Observation. Here,
an observation includes an event, captured by the role includesEvent, which is a
Stimulus, illustrated by the dashed arrow in the diagram immediately below. In
addition, observations are observedBy exactly one (unnamed) individual, which is
a Sensor. Similarly, observations have exactly one observedProperty and this is a
Property, exactly one sensingMethodUsed and this is a Sensing object, and a set
of observationResults all of which are SensorOutputs. Finally, observations have
exactly one featureOfInterest (role), which is a FeatureOfInterest (concept). All of
these role restrictions are captured in the diagram below, where again we have
used previous information about disjointness to present a less cluttered diagram:

For all Observation o

Stimulus

Sensor

includesEvent

Property

observedBy

Observation

o

featureOf
Interest

FeatureOf

Interest

observedProperty

sensingMethod

Used

observation

Result

Sensing

SensorOutput

Here, of note is the use of a rectangle around the closed curve labelled Feature-
OfInterest. The rectangle is used to assert that we are not making any claim
about the disjointness of FeatureOfInterest with respect to the other concepts
appearing in the diagram.

To allow the reader to draw contrast with description logic, the role restrictions just given are expressed by 21 description logic axioms, comprising 15 disjointness axioms and the following 6 axioms that correspond to the information
provided by the six arrows:
1. Observation   includesEvent.Stimulus
2. Observation  (= 1 observedBy)  ( observedBy.Sensor)
3. Observation  (= 1 observedProperty)  ( observedProperty.Property)
4. Observation  (= 1 sensingMethodUsed)  ( sensingMethodUsed.Sensing)
5. Observation   ObservationResult.SensorOutput
6. Observation  (= 1 FeatureOfInterest)  ( FeatureOfInterest.FeatureOfInterest)
?

?

?
Consider axiom 2, which corresponds to the arrow labelled observedBy. From
the description logic axiom, a little reasoning is required to see that every observation is related to exactly one individual, which must be a sensor: one must
deduce this from the information that Observation is subsumed by the set of individuals that are related to exactly one thing under observedBy intersected with
the set of individuals that are related to only properties under observedBy. In
our opinion, the diagram more readily conveys the informational content of the
axioms than the description logic syntax and in a more succinct way (although
this, of course, could be debated).

To conclude this section, we summarize main syntax of concept diagrams:

1. Rectangles. These are used to represent the concept Thing.
2. Closed Curves. These are used to represent concepts. If the curve does
not have a label then the concept is anonymous. The spatial relationships
between the curves gives information about subsumption and disjointness
relationships.

3. Dots. These are used to represent individuals. As with closed curves, unlabelled dots represent anonymous individuals. The location of the dot gives
information about the type of the individual. Distinct dots represent distinct
individuals. When many dots are present in a region, we may use , =, and
 as shorthand annotations (this will be demonstrated later).

4. Shading. Shading in a region asserts that the concept represented by the

region contains only individuals represented by dots.

5. Solid Arrows. These are used to represent role restrictions. In particular,
the image of the role whose label appears on the arrow has an image, when
the domain is restricted to (the concept or individual represented by) the
source, is equal to the target.

6. Dashed Arrows. These are used to represent role restrictions. In particular,
the image of the role whose label appears on the arrow has an image, when
the domain is restricted to the source, which is a superset of the target.

In addition, quantifiers and connectives can be used in the standard way.

4 Discussion

We will now extract, from the case study that we have presented, some general constructions of diagrams, from description logic axioms. Moreover, we will
show how to take these simple axioms and merge them into more complex ax-
ioms, by providing inference rules. These inference rules are inspired by the
manner in which we produced our visualization of the SSN ontology, aiming
for diagrams with minimal clutter, without compromising their informational
content.

With regard to subclass and disjointness information, where C and D are

concepts, we have the following translations:

J. Howse et al.
?

?

?
However, using these translations would give one diagram for every disjoint-
ness, subsumption and equivalence axiom in the ontology. As we have seen, it is
possible to produce readable diagrams that correspond to many axioms of the
kind just given (all of our diagrams that conveyed concept hierarchy information
expressed more than one description logic axiom). There is clearly a requirement
on the ontology deverloper to determine a balance between the number of axioms like these conveyed in a single diagram and the clutter in a diagram. Our
diagrams were drawn in a manner that concepts were only in the same diagram
if we wanted to assert something about their relationship. Later, we will give
some general rules for merging these simple diagrams into larger diagrams.

As we saw earlier, we can readily translate information about only or some
role restrictions into diagrammatic form. For example, in the Sensor concept, we
have Sensor detects only Stimulus and Sensor implements some Sensing. Abstracting from this, and including more general constraints, we have role restrictions
of these forms, where C and D are concepts and R is a role:

For all C c

c

For all C c

c

For all C c

c

...

n copies

In the above, instead of drawing n dots, we could use one dot annotated with
 n as shorthand which is sensible if n gets beyond, say, 4. We can also adopt this
shorthand for  n; we recall that shading is used to place upper bounds on set
cardinality, generalizing the use of shading in Euler diagrams, in a shaded region
all elements must be represented by dots. We now give two further translations:

For all C c

c

For all C c

c

...

n copies
?

?

?
Again, in the diagram just given, we could have used the shorthand = n.

The above translations demonstrate how to produce concept diagrams from
role restrictions defined using description logic. These translations are sound
and, in fact, information preserving. As with the hierarchy information, there
are often more succinct, elegant diagrams that can be created by representing
many of these axioms in a single diagram. We will call the diagrams obtained
by applying the transformations just given atomic axioms. We now demonstrate
how to produce non-atomic axioms (like the diagrams given in the SSN ontology)
from atomic axioms.

We begin by giving some inference rules that allow us to replace some axioms
with others; in many cases there are obvious generalizations of the inference
rules. We adopt a traditional presentation style, where axioms written above a
line can be used to infer those written below the line. Each rule has a name,
displayed in shorthand: Dis for Disjunction, Sub for Subsumption, and Mer for
Merge. All of these rules are equivalences (no informational content is lost) and
can be formalized and proved sound, but here we just present them informally
using illustrative diagrams. First we have, concerning hierarchy information:

Dis1

Sub1

Sub2

For instance, Dis1 says three axioms that tell us three concepts are pairwise
disjoint is equivalent to a single diagram telling us that the concepts are pairwise
disjoint. Sub1, tells us, roughly speaking, that if D appears in one axiom, a, and
we know that E is subsumed by D then we can copy E into a, placing it inside
D. Sub2 is another instance of this kind of inference.

Regarding role restrictions, we have seen that it is possible to use information
about disjointness when creating these kinds of axioms. For instance, if we know
that C and D are disjoint then we can simplify an axiom that tells us C is subsumed by R.D: we do not have to place D in a separate box. This intuition is
captured by our first role restriction rule, Dis2. Our second role restriction rule,
Mer1, takes atomic axioms arising from C  R.D and C  S.E and merges
them into a single diagram. Rule Mer2 is similar.

J. Howse et al.

For all C c

c

Dis2

For all C c

c

For all C c

c

For all C c

c

For all C c

c

=n

For all C c

For all C c

c

c

Mer1

For all C c

c

=n

Mer2

To demonstrate the use of these inference rules, we consider the example from
the SSN network concerning Sensor on page 265. Translating the associated description logic axioms numbered 1, 3, 5, 7, and 9, using the techniques of the
previous subsection, we get the following five diagrams:

For all Sensor s
Sensor

detects

s

Stimulus

For all Sensor s
Sensor

implements

s

Sensing

Axiom 1:

Axiom 3:

Sensor

Stimulus

Sensor

Sensing

Sensing

Stimulus

Axiom 5:

Axiom 7:

Axiom 9:

Using the rule Mer2, from axioms 1 and 3 we obtain:

For all Sensor s

detects

Sensor

s

implements

Stimulus

Sensing

Using axiom 5, and a generalization of Dis2, we can delete the rectangle around
Stimulus (since Stimulus and Sensor are disjoint):

For all Sensor s

detects

Sensor

s

implements

Stimulus

Sensing
?

?

?
Visualizing Ontologies: A Case Study

For all Sensor s

detects

Sensor

s

implements

Stimulus

Sensing

We leave it to the reader to use these kinds of manipulations to obtain the
single diagram given for the role restrictions imposed over the Sensor concept.

5 Conclusion

In this paper we have discussed the need for sophisticated ontology visualization
techniques that will allow disparate groups of ontology developers and users to
communicate effectively. Concept diagrams are a visual notation that were developed with this need in mind. We have used concept diagrams to produce a
visualization of (part of) the Semantic Sensor Network ontology, including information about the concept hierarchy and role restrictions. Thus, this paper
demonstrates that concept diagrams can be applied to modelling real-world on-
tologies. Concept diagrams may undergo further refinement as more case studies
are developed and as they are applied in other domains.

An important future development is the implementation of tool support. We
envisage developing tools which allow the automatic conversion of symbolically
specified ontologies to concept diagrams. This will involve solving challenging
problems, such as identifying what constitutes an effective diagram (as shown
in this paper, there are different diagrams that convey the same information)
and how to automatically draw chosen diagrams from abstract descriptions of
them. This functionality could build on recent advances in automated Euler diagram drawing [15,18,19], although the layout problem for concept diagrams is
more challenging. In addition, we want to allow ontology creators to be able to
specify the axioms directly with concept diagrams, which may require a sketch
recognition engine to be devised; this could also build on recent work that recognizes sketches of Euler diagrams [20]. These automatically drawn sketches can
be translated into symbolic form, so that we can make use of sophisticated tool
support that already exists for ontology development.
