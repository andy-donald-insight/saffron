Link Prediction for Annotation Graphs

Using Graph Summarization

Andreas Thor1, Philip Anderson1, Louiqa Raschid1, Saket Navlakha1,

Barna Saha1, Samir Khuller1, and Xiao-Ning Zhang2

1 University of Maryland, USA

2 St. Bonaventure University, USA

thor@umiacs.umd.edu, phand@umd.edu, louiqa@umiacs.umd.edu,

saket@cs.umd.edu, barna@cs.umd.edu, samir@cs.umd.edu, xzhang@sbu.edu

Abstract. Annotation graph datasets are a natural representation of
scientific knowledge. They are common in the life sciences where genes
or proteins are annotated with controlled vocabulary terms (CV terms)
from ontologies. The W3C Linking Open Data (LOD) initiative and
semantic Web technologies are playing a leading role in making such
datasets widely available. Scientists can mine these datasets to discover
patterns of annotation. While ontology alignment and integration across
datasets has been explored in the context of the semantic Web, there is
no current approach to mine such patterns in annotation graph datasets.
In this paper, we propose a novel approach for link prediction; it is a preliminary task when discovering more complex patterns. Our prediction
is based on a complementary methodology of graph summarization (GS)
and dense subgraphs (DSG). GS can exploit and summarize knowledge
captured within the ontologies and in the annotation patterns. DSG uses
the ontology structure, in particular the distance between CV terms, to
filter the graph, and to find promising subgraphs. We develop a scoring
function based on multiple heuristics to rank the predictions. We perform
an extensive evaluation on Arabidopsis thaliana genes.

Keywords: Link prediction, Graph summarization, Dense subgraphs,
Linking Open Data ontology alignment.

1 Introduction

Among the many killer apps that could be enabled by the Linking Open Data
(LOD) initiative [2,20] and semantic Web technologies, the ability for scientists
to mine annotation graph datasets and to determine actionable patterns shows
great promise. A majority of the links in LOD datasets are at the instance level
as exemplified by the owl:sameAs relationship type. However, there has been a
rapid emergence of biological and biomedical datasets that are typically annotated using controlled vacabulary (CV) terms from ontologies. For example, the
US NIH clinical trial data ClinicalTrial.gov has been linked to (1) PubMed
publications and Medical Subject Header (MeSH) terms; (2) drug names and
drug terms from RxNorm; (3) disease names and terms from Diseasome; etc.

L. Aroyo et al. (Eds.): ISWC 2011, Part I, LNCS 7031, pp. 714729, 2011.
c Springer-Verlag Berlin Heidelberg 2011
?

?

?
Fig. 1. GO and PO annotations for gene CRY1

This has lead to a rich annotation graph dataset [8]. Semantic Web research has
laid the groundwork for research in link prediction and pattern discovery in the
context of annotation graph datasets as discussed next.

1.1 Motivating Example

thaliana

is

a

and

model

organism

Arabidopsis

http://www.arabidopsis.org/ is the primary source of annotated data for
Arabidopsis genes. Each gene in TAIR is marked up with CV terms from the
Gene Ontology and from the Plant Ontology. The resulting tripartite annotation
graph (TAG) is illustrated in Figure 1 where we visualize the annotations for
gene CRY1; PO terms are on the left and GO terms are on the right of CRY1. The
TAG has been enhanced to include relevant fragments of the GO and PO on-
tologies. As of October 2010 there were 18 GO and 36 PO annotations for CRY1.
The figure illustrates partial annotations (due to lack of space). The annotations
can be represented using an RDF class gene GO PO TAGtriplet as follows:

t1: (TAGtripletID rdf:type gene GO PO TAGtriplet)
t2: (TAGtripletID gene ID name-of-gene)
t3: (TAGtripletID GO ID uri-of-GO-CV-term)
t4: (TAGtripletID PO ID uri-of-PO-CV-term)

A scientist is typically interested in a set of genes of interest within a biological
context, e.g., flowering time genes or photomorphogenesis genes. Given the resulting large annotation graph dataset, the scientist would like to be presented
with interesting patterns. For photomorphogenesis, a pattern may correspond to
the following 4 TAG triplets for CRY2 and PHOT1; note that we use a comma separated representation (gene, GO CV term, PO CV term), instead of the RDF
triples for ease of presentation and due to space constraints:

T AGtripletT1: (CRY2, GO 5773:vacuole, PO 13:cauline leaf)
T AGtripletT2: (CRY2, GO 5773:vacuole, PO 37:shoot apex)
T AGtripletT3: (PHOT1, GO 5773:vacuole, PO 13:cauline leaf)
T AGtripletT4: (PHOT1, GO 5773:vacuole, PO 37:shoot apex)

A. Thor et al.

Subsequently, she will explore the literature to understand the evidence. PHOT1
and CRY2 belong to two different groups of blue light receptors, namely phototropins (PHOT1) and cryptochromes (CRY2). To date there has been no evidence
reported in the literature that confirm any interactions between these 2 groups.
A literature search identified 2 independent studies of interest [11,24] that provide some background evidence. The set of 4 TAG triplets, in conjunction with
the 2 studies, may lead her to design a set of bench experiments to validate the
potential interaction in the vacuole between CRY2 and PHOT1.

1.2 Challenges and Contributions

While scientists are interested in complex patterns, in this paper, we examine
a simpler task of link prediction. We predict edges between genes and GO CV
terms or edges between genes and PO CV terms. We briefly summarize the
challenges of link prediction for the annotation graph datasets. First, the TAG
is a layered graph. Layered graphs impose restrictions on the link prediction
process, e.g., the neighborhoods of two nodes in neighboring layers are disjoint
and only edges between neighboring layers should be predicted. This restriction
makes many popular prediction approaches ineffective as will be discussed.

The next challenge is the a heterogeneity of biological knowledge. As seen
in the previous example, a set of gene GO PO TAGtriplets forms a complex
and interesting cross-ontology pattern. The GO ontology is focused on universal
biological processes, e.g., DNA binding. It does not capture organism-specific
processes, e.g., leaf development. The PO ontology is designed to capture such
organism specific knowledge. Thus, a gene GO PO TAGtriplet, or a complex pattern of multiple triplets, may be used to determine when a plant specific biological phenomenon has a relationship with a ubiquitous biological process.

A related challenge is identifying an area or subgraph of the dataset to make
predictions or find patterns. Ontologies capture multiple relationship types between CV terms that can be exploited for prediction. GO supports multiple relationship types including is a, part of and regulates. From Figure 1, the GO CV
term blue light photoreceptor activity is part of blue light signaling
pathway which is a cellular response to blue light which is a response
to blue light. CRY1 is annotated with blue light photoreceptor activity
and response to blue light. PO has relationship types is a, part of and develops from. Our challenge is to restrict the patterns of gene GO PO TAGtriplets
so that they favor GO CV terms (or PO CV terms) that are closely related.

Our observation is that the edges of each relationship type are not uniformly
distributed across the ontology structure. For GO, the edges of type is a are
dominant, and thus all the edges of any path in GO are more likely to be of
this type. The edges relevant to regulation are more densely placed in specific
areas of the ontology; thus, an edge of this type also has a greater probability
that an adjacent edge is of the same type. For PO, while neither is a nor part of
dominate, the edge distribution of these types are similarly concentrated so that
an edge of one type is more likely to have an adjacent edge of the same type.
?

?

?
Based on these observations, our first attempt at prediction will use the topological shortest path distance on undirected graphs, between 2 CV terms, as a
proxy for relatedness. We note that this path length metric is affected by both
human annotation patterns and the ontology structure representing biological
knowledge, e.g., the depth of the tree along any branch. We will consider the
impact of the GO (PO) relationship type(s) on the path based distance metric in future research. Our link prediction framework relies on 2 complementary approaches. Graph summarization (GS) is a minimum description length
(MDL) encoding that represents a graph with a signature and corrections. Such
a representation is intuitive for both explanation and visualization. Since annotation graph datasets may be large and sparse, high quality predictions must
rely on finding good candidate regions or subgraphs. Dense subgraphs (DSG)
is a methodology to find such regions that include clique-like structures, i.e.,
cliques with missing edges. Variations of the dense subgraph whose nodes satisfy
some distance restriction is also useful to ensure possible relatedness of the CV
terms. Our research makes the following contributions:

 We develop a prediction framework that can be used for both unsupervised
or supervised learning. We focus on unsupervised learning in this paper. We
perform an extensive evaluation on the annotation graph of TAIR.

 Our evaluation illustrates the benefit of the DSG and the distance restriction
to identify a potential subgraph so as to increase prediction accuracy. We
further show that high values of the scoring function, or predicted edges with
high confidence, are correlated with increasing prediction accuracy.

Due to space limitations, our examples only involve TAGs; however, our prediction framework is not limited to TAGs. We have applied our framework to
a layered graph of 5 layers; beyond 5 layers, we are unclear if the patterns and
predictions will be meaningful. We are also studying the clinical trial dataset;
this is a star graph with a clinical trial having links to PubMed publications,
MeSH terms, (disease) conditions, interventions (drugs or treatments), etc.

1.3 Related Work

Semantic Web research has addressed information integration using ontologies
and ontology alignment [9,25]. There are also multiple projects and tools for
annotation, e.g., Annotea/Amaya [10] and OntoAnnotate [20].

Graph data mining covers a broad range of methods dealing with the identification of (sub)structures and patterns in graphs. Popular techniques are,
amongst others, graph clustering, community detection and finding cliques. Our
work builds upon two complementary graph methods: graph summarization [23]
and dense subgraphs [27]. To the best of our knowledge, we are the first to
consider the synergy of these two approaches.

Link prediction is a subtask of link mining [21]; prediction in bipartite and tripartite graphs is also of interest [15,26]. Prediction methods can be supervised or
unsupervised. Supervised link prediction methods (e.g., [1,7,26]) utilize training

A. Thor et al.

and test data for the generation and evaluation of a prediction model. Unsupervised link prediction in graphs is a well known problem [18]. There are two
types of approaches: methods based on node neighborhoods and methods using
the ensemble of all paths between two nodes. We discuss their disadvantages for
tripartite graphs in Section 3. Many approaches for predicting annotations in
the biological web are available [3,5,17]. The AraNet system [17] predicts GO
functional annotations for Arabidopsis using a variety of biological knowledge;
details are discussed with our evaluation in Section 4.

2 Problem Definition

A tripartite annotation graph (TAG) is an undirected layered tripartite
graph G = ((A, B, C), (X, Y )) with three pairwise disjoint sets of nodes A, B,
and C and two sets of edges X  A  B and Y  C  B. Figure 2 shows an
example of a TAG. For example, in the TAIR annotated graph, the node sets
A, B, and C correspond to POs, genes, and GOs, respectively. The sets of edges
then reflect gene annotations using POs (X) and GOs (Y ).

We study the link prediction problem for TAGs. Given a TAG G at time t1
and a future time t2, we assume that edges will be added during the transition
from the original graph G1 to the new graph G2, i.e., G1 = ((A, B, C), (X, Y ))

Fig. 2. Example of a TAG G = ((A, B, C), (X, Y )) with |A| = 13 PO nodes, |B| = 9
genes, and |C| = 3 GO nodes. The nodes are connected by |X| = 98 edges of type
A  B and |Y | = 10 edges of type C  B.
?

?

?
and G2 = ((A, B, C), (X  Xnew, Y  Ynew)). The goal of link prediction is
to infer the set of new edges based on the original graph G1 only. Ideally the
predicted edges PX(G) and PY (G) are the added edges, i.e., PX(G) = Xnew
and PY (G) = Ynew.
For a given TAG G = ((A, B, C), (X, Y )) we refer to X and Y as the set of
observed edges. We call all other possible edges, i.e., ((AB)X)  ((CB)Y )
potential edges. Predicted edges PX(G) and PY (G) and new edges are subsets
of the corresponding potential edges.

Note that we consider only edge additions and we do not consider node additions for the transition from G1 to G2. In biological terms, we plan to use prior
annotations to existing PO and GO nodes in G1 to predict new edges in G2. We
are not attempting to predict new annotations to new PO or GO nodes that do
not occur in G1.

3 Approach

Unsupervised link prediction in graphs is a well known problem, e.g., see [18] for
a survey on link prediction approaches in social networks. Basically there are two
types of approaches. Neighborhood-based approaches consider the sets of node
neighbors N(a) and N(b) for a potential edge (a, b) and determine a prediction
probability based on the (relative) overlap of these two sets. Methods based on
the ensemble of all paths aggregate all paths from a through b to a combined
prediction score. Shorter paths usually have a higher impact than longer paths
and the more paths exist the higher the score will be.

Unfortunately,

these types of approaches are not

suited to TAGs.
Neighborhood-based approaches will even fail for TAGs because the sets N(a)
and N(b) are disjoint. Given a tripartite graph G = ((A, B, C), (X, Y )) and a
potential edge (a, b) with a  A and b  B, the node neighbors of a are in B
(N(a)  B) and bs neighbors are in A (N(b)  A) and therefore N(a) N(b) =
. On the other hand, path-based approaches are in general applicable for tripartite graphs but will produce similar prediction scores for many potential edges
due to the structure of a tripartite graphs for two reasons. First, the minimal
path length for a potential edge (a, b) equals 3 because there are only two possi-
  b). Second, most potential
ble path types (a  b

  c

  b) or (a  b

  a

Fig. 3. The proposed link prediction framework combines graph summarization with
link prediction functions. The original TAG can be subject to an optional filter step to
identify dense subgraphs.

A. Thor et al.

edges will have multiple paths with length 3 because it is very likely in the anno-
) or
tated biological web that any two genes b and b
) in common. Furthermore path-based approaches are not able to benefit
PO (c
from the rich ontology knowledge because they do not distinguish paths between
the three layers (GO/genes/PO) and paths within the ontologies (PO, GO).

 have (at least) one GO (a

We therefore propose a different approach that employs graph summarization
that transforms a graph into an equivalent compact graph representation using
super nodes (groups of nodes) and super edges (edges between super nodes). The
summary reflects the basic pattern (structure) of the graph and is accompanied
by a list of corrections, i.e., deletions and additions, that express differences
between the graph and its simplified pattern. The idea of our link prediction
approach is that adding predicted edges reinforces the underlying graph pattern,
i.e., predicted edges are the missing building blocks for existing patterns.

Figure 4 illustrates a possible summarization of the graph shown in Figure 2.
The utilization of a graph summary has several advantages. First, the summary
gives a better understanding of the overall structure of the underlying graph
and may itself be used for visualization. Second, the corrections, foremost dele-
tions, are intuitive indicators for edge prediction. Third, the summary captures
semantic knowledge not only about individual nodes and their connections but
also about groups of related nodes.

Figure 3 illustrates the overall scheme of our approach. The input is a TAG G
and the output is a ranked list of predicted edges. Our approach consists of three
consecutive steps. The first step is optional and deals with the identification of
dense subgraphs, i.e., highly connected subgraphs of G like (almost) cliques.
The goal is to identify interesting regions of the graph by extracting a relevant
subgraph. Next, graph summarization transforms the graph into an equivalent
compact graph representation using super nodes (groups of nodes) and super
edges (edges between super nodes). The summarized graph is then input to the
last step. A prediction function computes prediction scores for potential edges
and returns a ranked list. Our approach is not limited to TAGs. A K-partite
layered graph can be first converted to a more general (bi-partite) graph before
creating a DSG and applying graph summarization.

3.1 Dense Subgraphs

Given an initial tripartite graph, a challenge is to find interesting regions of
the graph, i.e., candidate subgraphs, that can lead to accurate predictions. We
commence with the premise that an area of the graph that is rich or dense with
annotation is an interesting region to identify candidate subgraphs. For example,
for a set of genes, if each is annotated with a set of GO terms and/or a set of PO
terms, then the set of genes and GO terms, or the set of genes and PO terms,
form a clique. We thus exploit cliques, or dense subgraphs (DSG) representing
cliques with missing edges.

Density is a measure of the connectedness of a subgraph; it is the ratio of
the number of induced edges to the number of vertices in the subgraph. Even
though there are an exponential number of subgraphs, a subgraph of maximum
?

?

?
density can be found in polynomial time [16,6,4]. In contrast, the maximum
clique problem to find the subgraph of largest size having all possible edges is
N P -hard; it is even N P hard to obtain any non-trivial approximation. Finding
densest subgraphs with additional size constraints is N P hard [13]; yet, they are
more amenable to approximation than the maximum clique problem.
?

?

?
.
?

?

?
(E)

, C

 or c  C

Recall that our annotation graph is a tripartite graph G = ((A, B, C), (X, Y )).
We employ our approach in [27] and thus first transform the tripartite graph G
 = (A, C, E) between the two sets A and
in the form of a bipartite graph G
C of outer nodes in G. The bipartite graph is a weighted graph where each
edge e = (a, c)  E is labeled with the number of nodes b  B that have links
to a and c in the tripartite graph, i.e., (a, b)  X and (c, b)  Y . We then
?

?

?
, E) by choosing subsets
dense = (A
compute a densest bipartite subgraph G
  A and C
  C to maximize the density of the subgraph, which is defined

(E) denotes the weight of the edges in the subgraph induced
as w
|A|+|C|. Here w
by E. Finally, we build the dense tripartite graph Gdense out of the computed
dense by adding all intermediate nodes b  B that are

dense bipartite graph G
connected to at least one a  A
An interesting variation on the DSG includes a distance restriction according to the ontology of nodes. In the annotated biological web (see Figure1) nodes
from PO and GO are hierarchically arranged to reflect their relationships (e.g.,
is-a or part-of). Assume we are given a distance metric dA (dC) that specifies
distances between pairs of nodes in set A (C). We are also given distance thresh-

olds A(C). The goal is to compute a densest subgraph G
S that ensures that
for all node pairs of A (C) are within a given distance. For any pair of vertices
a1, a2  AS we have dA(a1, a2)  A, and the same condition holds for pairs of
vertices in CS, namely that for all c1, c2  CS we have dC(c1, c2)  C. We will
evaluate the influence of a distance restriction in Section 4.
The distance restricted DSG algorithm calls a routine with complexity O(n3 
log(n)), where n is the number of nodes in a valid distance-restricted subgraph;
it is called once for each pair of nodes in A, and for each pair in C. We have
also implemented a linear time greedy 2-approximation to DSG that greatly
outperforms our previous running time results reported in [27]; this solution was
previously reported in [4,14].

3.2 Graph Summarization

We start with the intuition that a summary of a tripartite graph is also a graph.
The summary must however include a compact representation that can be easily
visualized and that can be used for making predictions. While there are many
methods to summarize graphs, we focus on the graph summarization (GS) approach of [22,23]. Their graph summary is an aggregate graph comprised of
a signature and corrections. It is the first application of minimum description
length (MDL) principles to graph summarization and has the added benefit of
providing intuitive course-level summaries that are well suited for visualization
and link prediction.

A. Thor et al.

Fig. 4. Possible summary of the graph in Figure 2. The summary has 9 supernodes, 8
superedges, two deletions (PO 20030, CIB5) and (PHOT1, GO 5643) and 6 additions.

A graph summary of a graph G = ((A, B, C), (X, Y )) consists of a graph
signature (G) and a set of corrections (G). The graph signature is defined
as follows: (G) = ((SAC , SB), SXY ). The sets SAC and SB are disjoint partitionings of A C and B, respectively, that cover all elements of these sets. Each
element of SAC or SB is a super node and consists of one or more nodes of
the original graph. Elements of SXY are called super edges and they represent
edges between super nodes, i.e., SXY  SAC  SB. The second part of a summary is the sets of edge additions and deletions (G) = (Sadd, Sdel). All edge
additions are edges of the original graph G, i.e., Sadd  X  Y . Deletions are
edges between nodes of G that do not have an edge in the original graph, i.e.,
SDel  ((A  C)  B)  (X  Y ). Figure 4 depicts a possible summarization of
the graph shown in Figure 2.
The summarization algorithms makes sure that G  ((G), (G)), i.e., the
original graph G can be reconstructed based on the graph summary and the
edge corrections (G). The nodes A, B, and C are flattened sets of SAC
and SB, respectively. A super edge between two super nodes sAC  SAC and
sB  SB represents the set of all edges between any node of sAC and any
node of sB. The original edges can therefore be reconstructed by computing
the Cartesian product of all super edges with consideration of edge corrections
(G). For example, X is therefore X = {(a, b)|a  A  b  B  a  sAC  b 
sB  (sAC , sB)  (SXY  Sadd  Sdel)}.

Graph summarization is based on a two-part minimum description length
encoding. We use a greedy agglomerative clustering heuristic. At first, each node
belongs to its own supernode. Then, in each step, the pair of supernodes are
merged that result in the greatest reduction in representation cost. When the
cost of merging any pair becomes negative, the algorithm naturally terminates.
There are no parameters or thresholds to set. The complexity of the original
GS problem is currently unknown. However, if nodes are allowed to belong to
more than one super node (i.e., overlapping supernodes), the problem reduces
to finding the maximum clique in a graph, which is NP-hard.
?

?

?
Fig. 5. Detail of Figure 4 for computing prediction scores for potential edges
(PO 20030, CIB5) and (GO 5773, CIB5)

The possible summaries of a graph will depend on the cost model used
for an MDL encoding. In general, the cost model is a triple (, , ) that assigns weights to the number of superedges, deletions, and additions, respec-
tively. Graph summarization looks for a graph summary with a minimal cost of
C(G) =   |SXY | +   |Sadd| +   |Sdel|. A simple cost model that gives equal
weight to supernodes, superedges and corrections was used in [23] and was used
to produce Figure 4.
 (dav + log(n) + log(dav))), where dav is the
average degree of the nodes [23]. The average degree in our datasets is low so
average running time is low.

GS has time complexity O(d3
av

3.3 Prediction Function
A prediction function is a function p : e  s  [0, 1] that maps each potential
edge e of a TAG to a real value between 0 and 1. This value s is called prediction
score. The function p can be used for ranking all possible edges according to
their probability. Consider the graph summary (G); let sAC and sB be the
corresponding super nodes of e. Note that this does not imply the existence
of an super edge between sAC and sB. The prediction score for an edge e 
((A  C)  B) (X  Y ) is defined as p(e) = s(e)  c(e) and combines a so-called
supernode factor s(e) and a correction factor c(e). The supernode factor is
defined as follows:

 1  |sACsBSdel|

|sACsBSadd|

s(e) =

|sAC||sB|

|sAC||sB|

if e  Sdel

otherwise

For e  Sdel the graph summary contains a super edge between sAC and sB.
The supernode factor determines the fraction of missing edges between the two
super nodes. The larger the super nodes and the smaller the number of deletions
are, the higher is the supernode factor. On the other hand, e / Sdel implies that
there is no super edge between sAC and sB. The supernode factor then reflects
the fraction of additions in all possible edges between these two supernodes. The
larger the super nodes and the smaller the number of additions are, the lower is
the supernode factor. The correction factor for an edge e = (a, b) is as follows:

c(e) =

1 + |Scorr(a)| 

1 + |Scorr(b)|

A. Thor et al.

 = a  (a

Here Scorr(a) and Scorr(b) describe the set of corrections involving a and b,
)  Sdel  Sadd} and Scorr(b) =
respectively, i.e., Scorr(a) = {b
{a
|a
, b)  Sdel  Sadd}. The correction factor accounts for the number of corrections that are relevant to a given edge. The higher the number of
corrections, the smaller the correction factor, and thus, the prediction score.

= b  (a, b

|b
?

?

?
Figure 5 shows the relevant part of the example summarization of Figure 4 for
potential edges (PO 20030, CIB5) and (GO 5773, CIB5). The deletion (PO 20030,
CIB5) is the only deletion between the two supernodes and the size of the supernodes are 4 and 6, respectively. For (GO 5773, CIB5) there are two additions between the corresponding supernodes of size 1 and 6, respectively. The supernode
factors are therefore calculated as follows: s(PO 20030, CIB5) = 1 1
24 and
s(GO 5773, CIB5) = 2
3. The correction factors for the two example edges
16 = 1
are: c(PO 20030, CIB5) = 1
1+1 = 1
6.
 1  0.96 and
1+0
Finally, the overall prediction scores are: p(PO 20030, CIB5) = 23
 0.06. In other words, the edge (PO 20030, CIB5)

p(GO 5773, CIB5) = 1

seems to be a good prediction whereas edge (GO 5773, CIB5) does not.

1+0 = 1 and c(GO 5773, CIB5) = 1

46 = 23

 1

1+2





4 Experimental Evaluation

4.1 Dataset Preparation

The Arabidopsis Information Resource (TAIR) consists of Arabidopsis thaliana
genes and their annotations with terms in the Gene Ontology (GO) and Plant
Ontology (PO). The entire TAIR dataset includes 34,515 genes, with 201,185
annotations to 4,005 GO terms and 529,722 annotations to 370 PO terms circa
October 2010. We created three subsets labeled ds1, ds2 and ds3, respectively.
Each dataset was constructed by choosing 10 functionally related genes associated with photomorphogenesis, flowering time and photosynthesis, respectively,
and expanding the graph to include all GO and PO terms. The statistics of these
3 dataset are shown in Table 6. Recall that we use the shortest path distance
between a pair of CV terms as a proxy for relatedness. To test the distance
restriction we create subgraphs ds1-DSG, etc. The impact of the distance restriction will be discussed in a later section.

4.2 Evaluation Methodology

We use a simple leave-K-out strategy to evaluate our link prediction approach.
Given a dataset, we remove 1 (up to K) edges that are selected at random from
the set of all edges. We then predict 1 (up to K) edges.

We report on precision. We consider precision at the Top 1 or P@1 when we
predict 1 edge and mean average precision (MAP) when we predict K edges [19].
To further study the quality of our prediction, we report on the scores produced by our scoring function. For those predictions in which we have the highest
confidence, i.e., those predictions are consistently above a threshold of the scoring function, we report on the true positives (TP) and false positives (FP). A
TP is a correct prediction while a FP is an incorrect prediction.
?

?

?
Fig. 6. Statistics of the 3 datasets
along with their dense subgraphs.

Fig. 7. MAP of predicting k annotations in
ds2 dense subgraphs. Distance restrictions
are (GO Distance, PO Distance).


As a baseline, we compute the Katz metric between any 2 pair of nodes [12].
l=1   paths(x, y), where
The Katz metric is a path based measure equal to
paths(x, y) is the number of paths between nodes x and y of length . For our
experiments, we used  = .005. All potential edges were ranked and sorted by
the value of the Katz metric, creating a ranked list of predictions. This is labeled
dsi-Katz or dsi-DSG-Katz where the prefix dsi identifies the dataset.

Three following variations of our prediction approach were considered:

 dsi-GS: The prefix represents the dataset and the suffix indicates that there

was no DSG created and we only used graph summarization.
 dsi:DSG+GS: We created a DSG with no distance restrictions.
 dsi:DSG+GS(dP,dG): We created a DSG with a distance restriction of dP for

PO and a distance restriction of dG for GO.

We note that the DSG with no distance restriction results in the densest sub-
graph. Imposing a distance restriction may result in a less dense subgraph, but
possibly one with greater biological meaning. The cost model for graph summarization is another experimental parameter, but one that we did not vary
in our experiments. Equal weights were given to supernodes, superedges and
corrections throughout all of our summarizations.

AraNet [17] created an extensive functional gene network for Arabidopsis
exploiting pairwise gene-gene linkages from 24 diverse datasets representing >
50 million observations. They report on prediction accuracy of GO biological
process CV terms for over 27,000 genes. Their prediction method computes a
score for each gene and association using its neighborhood and naive Bayes
estimation; this is similar in spirit to the Katz metric. Their results demonstrate
that for over 55% of gene annotation, their predictions (cumulative likelihood
ratio) were more significant compared to random prediction. A direct comparison
of our approach with AraNet was not possible since AraNet exploits significant
knowledge beyond GO and PO annotations. We note that the mean average

A. Thor et al.

(a) Precision of predicting 1 annotation

(b) MAP of predicting k annotations

Fig. 8. Evaluation using different approaches across all datasets

precision (MAP) for our method and Katz reflect that the prediction accuracies
of all three methods appear to occur in a similar range; this is notable since Katz
and our method exploit only PO and GO annotation data.

4.3 Summary of Results

Baseline Analysis. Given a ranked list of predictions, precision at one (P@1)
provides a useful metric for evaluating the performance of the different ap-
proaches. To establish a baseline, Figure 8(a) reports on P@1 for the 3 datasets
for dsi-GS and dsi-Katz. The P@1 values are low for lower K values and increase
with higher K. This is expected since larger K provides a larger ground truth
and improves prediction accuracy. Both methods perform best on ds3 and show
the worst prediction accuracy on ds2. A visual examination of the datasets and
the graph summary intuitively illustrates the difference in performance across
the 3 datasets. For example, ds3 is the most dense dataset.

To complete the baseline analysis, we consider the Top K predictions as we
leave out K. Figure 8(b) reports on the mean average precision (MAP) of the
different approaches as a function of K. As expected MAP for Top K is higher
than the values for P@1 since we are making K predictions (and not 1 prediction
as before). We note that ds3-GS outperforms ds3-Katz. Both methods show the
least prediction accuracy for ds2.

Impact of Varying the Distance Restriction. The average distance between
a pair of GO CV terms in ds2 is 5.57. Of the 946 pairs, 402 are within distance
5 of each other; this is the distance restriction used in our previous experiments.
160 pairs are not connected at all, i.e., they are in different parts of the ontology.
7 reports on MAP for dsi-DSG+GS and dsi-DSG+Katz for varying PO and GO restrictions on dataset ds2. Method dsi-DSG+GS dominates
dsi-DSG+Katz over all distance restrictions. This is a very strong validation of
the prediction accuracy of our approach. Accuracy initially increases with increasing (PO,GO) distance. The best accuracy was obtained with (5,5) after

Figure
?

?

?
(a) Precision at 1 after removing k edges
from a subgraph

(b) MAP of k annotations after removing
k edges from a subgraph

Fig. 9. Comparison of our graph summarization approach with the Katz metric

which accuracy decreases, e.g., for a (6,6) distance restriction. Figure 9(a) reports on P@1 for dsi-DSG+GS and dsi-DSG+Katz for the 3 datasets with distance
(5,5). Method dsi-DSG+GS dominates dsi-DSG+Katz for ds1 and ds2. Surprisingly ds3-DSG+Katz outperforms ds3-DSG+GS for ds3. An examination of the
predictions indicates that ds3-DSG+GS makes an incorrect prediction which has
a high prediction score and is therefore ranked high. Since Figure 9(a) reports
on P@1, this has a significant penalty on the accuracy of ds3-DSG+GS.

Figure 9(b) reports on the mean average precision (MAP) for ds2 with distance restriction (5,5). Again, ds3-DSG+GS outperforms ds3-DSG+Katz, further
confirming the strength of our approach.

Confidence in Predictions. Our final experiment is to validate that high
confidence predictions result in more accurate predictions. High confidence predictions are those that receive a high prediction score. Table 1 reports on the
percentage of true positive (TP) and false positives (FP) for ds2-Katz, ds2-GS
and ds2-DSG+GS, bucketized by the range of prediction score. Note that for Katz,
we normalize the score from 0.0 to 1.0 prior to bucketization. The values on the
left represent the high confidence (high score) prediction buckets and the confidence (score) decreases as we move to the right. As expected, the % of TP values
is greater than the % of FP values for high confidence buckets. The reverse is
true for low confidence buckets. This holds for all the methods. Further, the %
TP values for ds2-DSG+GS for the 2 left most buckets, 80% and 89%, dominates
the % TP values of ds2-GS (50% and 42%) and ds2-Katz (50% and 51%). The
% TP values for ds2-DSG+GS is overall higher than the other two methods except for one exception (score between 0.7 to 0.8). These results confirm that
ds2-DSG+GS had both higher confidence scores and higher prediction accuracy,
compared to ds2-GS and ds2-Katz. This held across all 3 datasets and further
validates our prediction approach.

A. Thor et al.

Table 1. Percentage of true positives (TP) and false positives (FP) as a function of
the prediction score for predictions made on ds2 with DSG+GS(5,5), GS, and Katz

<1.0 <.90 <.80 <.70 <.60 <.50 <.40 <.30 <.20 <.10
Score

TP ds2-Katz

FP ds2-Katz

TP ds2-GS
FP ds2-GS

TP ds2-DSG+GS 80
FP ds2-DSG+GS 20
?

?

?
5 Conclusions and Future Work

We presented a novel approach for link prediction in the layered annotation graph
datasets that employs graph summarization for link prediction. Furthermore,
the complementary method of identifying dense subgraphs helps find interesting
regions for high quality predictions. To the best of our knowledge, we are the first
to consider the synergy of these two approaches. Future work includes learning
GS cost models using supervised learning.
