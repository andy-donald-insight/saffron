The pragmatics of event-driven business processes

Hans Weigand
Tilburg University
P.O. Box 90153

5000 LE Tilburg, The Netherlands

Tel +31 13 4662806
H.Weigand@uvt.nl

instrument 

ABSTRACT
for 
Event-Driven  Architectures  are  a  critical 
(cid:182)
t-acting  and  agile  enterprises.  To  benefit 
maximally from the technological innovations in service-oriented 
computing,  businesses  need  to  link  an  event  orientation  to  a 
service perspective.  However,  this  cannot  be  done  effectively 
without  considering  the  pragmatics  of  event-driven  business 
processes. This paper first introduces a design method for eventdriven business processes based on an integrative event ontology.
is  confronted  with  communication-oriented 
This  method 
approaches  from  the Language/Action  Perspectiv (LAP).
It  is 
shown  that  a  combination  is  possible  and  in  fact  beneficial. 
However,  a  generalization  of  the  traditional  LAP  approach  is 
needed.
Categories and Subject Descriptors
D.2.10 [Design]: Methodologies, Representation. 
General Terms
Design, Human Factors
Keywords
Event-Driven  Architecture,  Event  Process  Chains,  Language/ 
Action Perspective, Internet of Things.
1. INTRODUCTION
The new  generation  of  application  systems  that  will  underlie 
(cid:182)-acting and agile enterprises will not be the same 
as  traditional  business  process-oriented  applications.  Business 
processes are less and less appropriate both as descriptive and as 
prescriptive representations of organizational behavior.  That does 
not mean that the notion is not relevant anymore, but what should 
be accepted is their principled incompleteness. At the same time, 
the  notion  of  event  becomes  more  prominent.  Real-Time-
Enterprise  (RTE)  takes  the  role  of  timeliness  to  its  logical 
extreme:  zero  latency,  that  is,  all  parts  of  the  enterprise  can 
respond to events as soon as they become known to any one part 
of  the  enterprise  or  extended  enterprise.  The  Event-Driven 
Architecture  (EDA) can  support  increased  agility:  to  respond  to 
exceptions  and  unanticipated  events  at  any  time,  even  when
business  processes  are  already  under  way. Complex  Event 
Processing (CEP), often related to as Business Activity Monito-
____________________________________
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not made or distributed for profit or commercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, 
or republish, to post on servers or to redistribute to lists, requires prior 
specific permission and/or a fee.
I-SEMANTICS 2011, 7th Int. Conf. on Semantic Systems, Sept. 7-9, 2011, 
Graz, Austria Copyright 2011 ACM 978-1-4503-0621-(cid:171)

ring  (BAM),  includes  tools  that  monitor  the  events  in  the 
enterprise and are not only able to aggregate data into higher-level 
complex events but also to detect unusual event patterns that may 
need an alert [11]
At the same time, we are currently witnessing major steps towards 
realization  of  the  pervasive  and  ubiquitous  computing  vision  of 
Weiser  [26]. IT  is  getting  smaller  and  smaller  and  increasingly 
(cid:179)(cid:180), attached to objects and humans, for example, 
in the form of an RFID chip. When such objects or humans meet, 
temporary  connections  are  set  up  and  executed.  For  example, 
containers get a unique RFID and when they pass the gate, this 
automatically  triggers     (cid:179)enter(cid:180) event  in  the 
Information  System.  This  event  may  trigger  a  message  event 
   (cid:182)   to  be  passed  to  the 
driver in which he is informed about the exact location where the 
container is to be put, and may trigger internal tracking & tracing 
messages  to  update  the  information  about  the  container  as  it  is 
available to all parties involved. At the software level, pervasive 
computing requires  that  objects  have  unique  identities.  This  is 
slowly becoming possible now with the use of EPCIS (electronic 
product  codes,  developed  for  industry  and  logistics)  and,  more 
generally, the Internet of Things [1].
The  two  developments  sketched  above  converge  into  what  is
called Smart  Computing where events are  central. These  events 
are picked up by monitoring functions, processed and responded 
to.  Processes  consist  of events  and  couplings  between  events. 
However, there are still many conceptual questions. For instance, 
what  does  it  mean  in  a  business  environment  that  an  event 
triggers another event? Do triggers represent a new coordination 
mechanism?  What  is  the  relationship  between  a  trigger  and  the 
sequence  pattern 
triggers 
specified? 
To  date,  Service-Oriented  Architecture (SOA) is the  de  facto 
standard 
relies  on 
request/response mechanisms using standards such as WSDL and 
SOAP.    Conceptually,  this  contrasts  with  EDA  that  typically 
promotes a publish/subscribe mechanism [9]. Technically, a SOA 
can be built on top of an EDA  by  modeling the service request 
and its reply as two different events and ensuring that the reply is 
triggered by the request. However, there is still the question how 
to relate the two perspectives on the conceptual level. There are a 
few recent proposals in this direction, including [23] and SOEDA 
[27].  SOEDA  (Service-Oriented  Event-Driven  Architecture) 
allows  the  transformation  of  event-centric  business  process 
notations  (EPC)  to  service-centric  execution  models  (BPEL). 
However,  the  question  is  whether  a  service-centric  execution 
model is always the most appropriate one. Event-centric execution 
models should also be taken into consideration. According to [9],
an event-driven approach should supplement the SOA approach in 
ubiquitous enterprises.

in  process  modeling?  How  are 

[15,22].  SOA 

in 

software 

systems


study  of 

signs 

three 

syntax, 

semantics 

components: 

The  focus  in  this  paper  is  on  the  pragmatics  of  event-driven 
(semiotics) 
processes.  Traditionally, 
distinguishes 
and 
pragmatics, where semantics deals with the meaning of symbols 
and  pragmatics  with  their  context  of  usage.  Pragmatics  in  the 
sense  of  dealing  with  meaning  in  context
is  of  increasing 
importance  once  IT  applications  change from  context-free 
programs to highly context-sensitive devices. Among others, this 
creates a need for context data management [21]. Another aspect 
of pragmatics is the focus on usage, on what people do with the 
information.  This  is  also  relevant  in  ubiquitous  computing.  The 
coupling  between  data  (sensors)  and  action  (effectors)  is  much 
tighter than in traditional Information Systems in the office that 
only  interact  with  the  world  via  the  interface  of  office  people. 
Furthermore,  pragmatics  has  to  do  with  the  social aspect  of 
communication. The social aspect of event-driven processes may 
seem to become less prominent. There are certainly human issues, 
e.g.  privacy  concern,
that are  essential.  However,  where 
traditionally  Information  Systems  have  been  useful  tools  in 
coordinating  organizational  behavior  driven  by  humans,  in  the 
ubiquitous computing vision this behavior seems to be driven less 
and less by humans. To wit, it is no longer the human agent who 
does the shopping or the purchase ordering, but the fridge or the 
inventory itself interact with their counter-parts at the supermarket 
or supplier. The question that we address in this paper is what the 
impact is of this shift on the  way pragmatics are dealt with and 
whether there is still a role of communication-driven approaches 
in the new setting.
The structure of this paper is as follows. In section 2, we present 
an integrative event ontology. With the help of this ontology we
introduce  a  design  method for  event-driven  business  processes 
and apply it to a small case (section 3). In section  4, the eventdriven  approach  is  confronted  with  a communication-driven 
approach (Language/Action Perspective). We give suggestions to 
broaden the communicative approach in order to be ready for the 
new  era  in  which  active  objects  are  acting  and  communicating 
with humans on an equal footing.
2. Event ontology
In  this  section,  we introduce a unified  event  ontology  that 
integrates  different  event  perspectives,  notably  ECPIS [14,21],
EPC [18],  SOA [15] and  CEP [11]. The  event  ontology  is 
depicted  in  Fig.  1.  There  are  three  important  aspects  to  be 
considered:  the  event  concept,  the  trigger  concept,  and  the 
relationship between ECA rules and workflow patterns. The event 
ontology  touches  upon  other  possible  ontologies  (e.g.  time 
ontology,  organization  ontology,  domain  ontologies)  that  we 
regard as complementary.
2.1 The concept of event
On an abstract level, an event is anything happening of interest in 
a system, where the system is not confined to computer systems. 
Hence  the  most  important  attributes  are  event  time,  record time 
(as  in  EPCIS)  and  event  type (below). For  synchronization 
purposes, it may be useful to add a Reception Timestamp as well, 
(cid:182) Events signal a transformation of some 
state into another, for example, changing the location of an object.
The state  realized in  the  event corresponds  to  the  Disposition 
status in EPCIS, but we explicitly require this state to consist of 
attribute/value  pairs  for  further  information  processing.  We 
distinguish two relationships between Event and Object: when an 
object is event theme it means that the event influences the state of 
that object. If the event refers to an object but does not change its

state, the object is an argument. The theme association could be 
further specified by a certain role (e.g. patient, location). Events 
are  generated  at  what  EPCIS  calls  a  ReadPoint 
(here: 
EventGenerator). Although we focus in this paper on what EPCIS 
calls  ObjectEvents,  the  definition  also  covers  Quantity  Events, 
Aggregation  Events  and  Transaction  Events  (in  which  case  the 
Theme  link  corresponds  to  the  parent  EPC  object).  Messages, 
such as those sent between services in SOA, are viewed as a kind 
of events: all messages are events and can be processed as such, 
but not all events are messages. In EVO, the other ones are called 
Process Events, further subdivided into Management Events and 
Execution Events [17]
In  EPC  diagrams,  an  event  is  the  result  of  the  execution  of  a 
function, some human, natural or automated activity. We identify 
the function with the Business Step of EPCIS. The state realized 
by  the  event  can  be  identified  with the  postcondition  of  this 
function, where the event may either be generated by the function 
itself,  so  that  the  postcondition  is  simply  declared,  or  the  event 
may be generated by a sensor empirically observing the state after 
the execution of the function.

Figure 1: Integrative event ontology (operational level)

2.2 The concepts of trigger and rule
A  key  notion  of  any event  model should  be the  triggering
relationship between events. At type level (Fig.2), this is captured 
in  what  corresponds  to  Event-Condition-Action  (ECA)  rules  in 
CEP. A trigger is caused by an event and produces another event 
according  to  the  ECA  rule. The condition  part  of  the  rule  is  a
logical combination of atomic conditions. Below we will look into 
more detail in the condition logic, and how various types of EPC 
connectors can be implemented using ECA rules.  Depending on 
the outcome of the evaluation, an event is generated. This may be 
a message request event that initiates an EPC function. It would 
be possible to add an exception clause to the rule that says which 
event  should  be  generated  when  the  rule  evaluation  fails,  but 
logically, this can be represented by a dual rule as well.
The function initialization takes the form of a request event. This 
request  can  be  a  service  request  in  the  sense  of  SOA  when  the 
function  is  performed  by  a  service.  It  can  also  be  an  initiating 
request in the sense of LAP (section 4) directed at some human 
agent. The request is a message event and published as such. In all 
cases, the event must be authorized. Note that the authorization is
logically  separated  here  from  the  trigger.  In  the  traditional case 
where  a  human  actor  submits  a  request  and  is  both  trigger  and 
authorization source they are the same, but this is not necessary. 


separated  from  the  authorization  management.
In  an  open 
environment, anybody should have the possibility to create a rule 
that  triggers  a  function,  but  not  everybody  is  automatically 
authorized. The separation of rule and authorization supports both 
flexibility and security and governance. An authorization applies 
to a Role, as in RBAC, and can be further qualified by validating 
conditions.
It  is  possible  to  use  the  XACML  specification 
language for expressing authorizations [5].
In the semiotic approach, each rule is based on social conventions 
or  procedures that,  in  this  case, state  that  one  event  should be 
followed by the other event [19]. We do not require all rules to be 
explicit; when the rule evaluation is performed by a human, it may 
be based on tacit knowledge. 
The event ontology abstracts from the implementation. Business 
processes may be partially or completely automated. It is possible 
that a rule is automated, but the function triggered by the rule is 
not. For instance, the rule decides whether a container should be 
inspected  (using  a  certain  risk  profile)  and  the  function  is  the 
inspection by some human customs officer.  The implementation 
of automated rules can be centralized, as in a service orchestration 
platform,  or  decentralized,  when  the  rule  is  embedded  in  RFID 
chips on premise.

Figure 2: Integrative event ontology (type level)

2.3 ECA rules and workflow patterns
We  now  show  how  the  basic  workflow  patterns [13]  can  be 
represented using ECA rules. The basic sequence pattern says that 
function  F1  is  followed  by  an  event  E  and  then  followed  by  a 
function F2. This means that function F1 results in event type E, 
and that event type E triggers a rule R. The rule R may contain 
certain  conditions  (preconditions  of  F2),  but  in  the  most  simple 
case the condition part is empty. R has action F2.
The  parallel  split  pattern  uses  an  AND  connector  that  has  one 
incoming and multiple outgoing arcs, where the incoming arc is 
linked to a preceding function F and the outgoing arcs are linked 
       (cid:171)     

results in multiple event types, where each event type triggers a 
certain  rule.  A  typical  example  of  this  pattern  occurs  when  the 
different events affect different objects, e.g. after a truck has been 
unloaded, the container is processed further in one thread and the 
truck  process  is  continued  in  a  second  thread.  The  exclusive 
choice and  multiple  choice patterns  are  represented  in  the  same 
way, the difference is in the rule conditions.
The  synchronization  pattern uses an  AND  connector  with  one 
outgoing arc and multiple incoming arcs, where the outgoing arc 
is linked to a function F and the incoming arcs are linked to one or 
    (cid:171) This  means  that  there  is  a  rule  R  with 
action F and whose condition is the conjunction of the conditions 
(cid:171)
of  these  events.  So  when  the  first  thread  finishes,  the  rule  is 
triggered  but  will  fail  because  the  condition  is  not  yet  fully 
satisfied.  When  the  last  thread  finishes  and  activates  the  rule,  it 
will succeed and action F2 will be initiated. 
The simple merge pattern is like the synchronization pattern but 
with an XOR connector. The join is allowed to continue when one 
of the incoming threads has finished. So the representation can be 
similar to the synchronization pattern, but with a (lazy, non-strict
evaluation) disjunction of conditions instead of a conjunction. In a 
structured context, the simple merge is preceded by an XOR split 
and  the  rule  R  will  only  be  activated  once.  Without  this 
assumption, it is possible that different threads run in parallel and 
activate the rule R multiple times, possibly leading to function F 
being initiated multiple times. Whether the assumption is enforced 
or  not  depends  on  the  specific  EPC  implementation.  EPC  does 
also support the synchronizing merge pattern, indicated by an OR 
connector. Its non-local semantics specify that the function F can 
only  be  initiated  when  all  concurrently  activated  threads  have 
completed. This corresponds to a strict, non-lazy evaluation of the 
disjunction,  but  only  for  the  conditions  occurring  in  activated 
threads. So rule R has to know which threads have been activated. 
Assuming that the pattern is only used in a structured context, this 
knowledge can be derived from the split point where the two or 
more  threads  originated.  At  that  point,  multiple  rules were 
activated, whose success can be read from the generated request 
events.
There are more workflow patterns then the basic ones discussed 
here,  although  these  are  not  supported  by  standard  EPC.  We 
hypothesize that they could all be represented by ECA rules, as 
this  is  a  quite  powerful  mechanism. However,  the  question  is 
whether this is useful. In our view, EPC diagrams are meant to be 
used  at CIM-level  initial  models  of  business  processes,  where 
basic patters suffice. So we do not think it is necessary to extend 
EPC, or replace it by more complete process models. Rather, the 
more  complex  patterns  can  be  crafted  when  the  rules  are  being
designed, that is, at PIM level.
2.4 Governance
From a social point of view, the authorizations represent agreed 
upon  norms  on  operational  behavior.  In  an  agile  enterprise,  the 
evolution  of  these  norms  should  be  supported  by  the  system  as 
well.  That  is,  actors  should  have  the  possibility  to  request  an 
authorization, or change it. It is possible to implement this in the 
form of a authorization service that keeps track of an authorization 
table and grants or rejects authorization requests based on metalevel  authorizations  and  maintaining  compliance 
to  given 
regulations (e.g. Segregation of Duties). 


In  this  section,  we  describe  a  design  method for  event-driven 
business processes. The method follows an MDA software design 
approach, starting at the CIM level. At this level, several models 
can be used, but, as in SOEDA, we assume that EPC diagrams are 
at  least  one  of  them.  The  EPC  models  can  be  transformed  to
executable  process  descriptions.  This  may  be  BPEL,  as  in 
SOEDA,  but  as  we  will  show,  this  is  only  one  of  the 
implementation strategies.
3.1 Design steps
Step 1: Business model definition. The first step is the creation 
of  a  business  service  specification  by business  analysts.  BSRM 
(Arachchige, Weigand, to appear) is a possible modeling language 
for this purpose. BSRM is based on the REA business ontology 
while  taking  a  truly  service-oriented  perspective.  Within  the 
BSRM  service  model,  a  difference  is  made  between  intentional 
resources that are processed by coordination services and physical 
resources that are processed by conversion services. Starting with 
the BSRM model, an initial EPC process model can be created by 
mapping  conversion  services  and  coordination  services 
to 
functions, while their effects on resources are mapped to events.
Step 2: EPC modeling. Although the EPC model is not as formal 
as a BPEL or BPMN specification, it is useful as an intermediate 
step  that  supports  communication  between  users  and  developers 
on a conceptual level. Still, we require it not only to adhere to the 
EPC syntax rules, but also to some more consistency constraints. 
This is to ensure that the EPC model that forms the foundation for 
the next design steps is of high quality. We require that the overall 
EPC model is built up as a choreography of EPC fragment, where 
each EPC fragment is bound to a certain object. The object can be 
an  intentional  resource,  like  a  PurchaseOrder,  or  a physical 
resource, like a Container, or Oven. The EPC fragment contains 
only  events  that  affect its  object.  To  ensure  consistency  of  the 
event processes per object, we require a mapping from each EPC 
fragment to a UML statechart diagrams, as in [10].
Step 3: ECA Rule Extraction. Event/function links correspond 
to  ECA  rules  that  should  be  specified  along  the  EPC model.  A 
rule template can be generated from the EPC model, and should 
be further detailed by the business analyst. 
Step  4:  Implementation  strategy.
In  most  process  design 
methods,  including SOEDA,  the  implementation  assumes  a 
workflow management system or BPEL platform that orchestrates 
a process specification. This is fine as long as we assume that all 
the  functions  are  automated  (e.g.  as  web  services)  or  partially 
automated  (in  which  case  the  orchestration  includes  automated 
calls 
is  a  centralized 
orchestration/process  control.    However,  in  the  case  of  eventdriven processes, this is not the only implementation strategy. It is 
also  possible  to  have  certain  functions  executed  purely  by 
humans,  following  manual  instructions,  and  not  triggered  by  a 
BPEL prompt but by certain physical events happening, such as 
the arrival of a container in the harbor. It is also possible that the 
process  control,  that  is,  the  execution  of  the  ECA  rules,  is  not 
assigned to a centralized orchestration engine, but to the physical 
objects themselves. For instance, a container loaded on the truck 
could signal its destination to the truck RFID, thereby triggering 
its  transport,  without  comm   (cid:182)  In 
other words, the ECA rule logic is embedded in the RFID devices, 
distributed all over the place.
So  the  first  thing  to  determine  in  this  design  step  is,  for  each 
event/function link the most appropriate implementation strategy. 

to  human  actions),  and 

there 

For those parts that are implemented in BPEL, a transformation 
can  be  used  like  the one  specified in  SOEDA.  Essentially,  this 
means that  each  EPC  function  is  mapped  to  an  opaque  activity 
and  each  EPC  event  to  a  message  receive  activity.  Intermediate
events can be catched by a pick activity that specifies the next 
activity to be performed.  Cycles are mapped to repeatUntil
loops.
Step 5: Decision service design This step picks up the output of 
step  3.  Although  some  of  the  ECA  rule  specification  can  be
expressed  in  BPEL  control  structures,  and  even  more  in  BPMN 
event logic, a more modular approach is not to put business logic 
into the process specification but into separate decision services. 
These decision services can make use of rule technology such as 
the Rule Markup Language RuleML [16] and the Semantic Web 
rule  engine  Prova  (www.prova.ws).  The  decision  services  can 
either be called from the BPEL process, or embedded into small 
embedded triggering services. If the decision service is performed 
by  a  human  agent,  the  specification  can  be  left  open,  but  what 
needs  to  be  checked  is  that  the  deciding  agent  has  all  the 
necessary information in time.

Figure 3: EPC for the pizza shop


To demonstrate the design steps, we use the pizza example from 
[25].  The  case  describes  a  pizza  shop  in  which  the  owner  has 
delegated  the  baking  of  pizzas  to  his  daughter  and  the  home 
delivery to a pizza boy. The flow of events starts with the phone 
call  from  the  customer  and  ends  with  the  delivery  of  the  pizza. 
The daughter does the baking by first preparing a pizza and then 
heating it in the oven. When the daughter has finished, the pizza is 
put on a shelf. When the pizza boy comes in, he takes the pizza 
from  shelf  and  drives  away.  The  pizza  shop  process  can  be 
modeled using an EPC diagram as in Fig. 3.
In  accordance  with  our  event  ontology,  an  event  is  modeled 
(cid:182)
case  are  the  pizza  order,  the  pizza,  the  table,  the  oven  and  the 
shelf. At least three object types can be distinguished: intentional 
objects  that  are  created  in  a  coordination  process (pizza  order); 
container objects that can contain another object (like table, shelf, 
oven) and moving objects (like pizza). Note that in this model, the 
container objects are all non-moving, but this is not necessary.
The diagram has arranged the process into process fragments on 
the basis of the object involved. Note the choreography between 
these process fragments. In the case of the pizza being put in/out 
the oven, or on the shelf, the coordination is achieved because of a 
 (cid:179)(cid:180)   
changes the state of a  moving object, and of one or two (usually 
two) container objects. In the case of the pizza order, coordination 
is  based  on  a  social  rule,  but  the  implementation  depends  on  a 
pseudo-object  being  created,  i.e.,  the  order  in  paper  or  digital 
form.  This  pseudo-object  can  be  transferred  from  the  order 
process to the operational process.
4. Events in the Language/Action Perspective
(cid:179)(cid:180)
 (cid:179)(cid:180) 
    
(cid:179)(cid:180)   
that 
Information  Systems  should  be  viewed  as  instruments  for 
organizations  to  perform  their  actions.  Information  Systems 
present an action potential, a repertoire of predefined actions,  as 
(cid:179)(cid:180)
back  the  action  focus  in  LAP  to  the  seminal  book  of  Winograd 
and Flores; then we consider how it is used in the LAP method 
DEMO and the Extended Workflow Model.
4.1 Language as action
Against the popular conduit metaphor of language portraying it as 
a pipeline through which information is passed from one person 
(or  machine)  to  another,  the  major  argument  in  Winograd  & 
Flores [28] is that language is collaborative action:
Language  is  a  form  of  human  social  action,  directed  to  what 
  (cid:179) (cid:180).  This  orientation  is  not 
grounded in a correspondence between language and the world, 
but  exists  as  a  consensual  domain  (cid:177) as  interlinked  patterns  of 
activity.  The  shift  from  language  as  description  to  language  as 
action is the basis of speech act theory, which emphasizes the act
of language rather than its representational role. [28:76]
As  the  LAP  approach  has  become  famous  for  its  emphasis  on 
commitments that are made by communicative actions (as made 
explicit  in  a  system  like  the  Coordinator  [12]),  it  is  easy  to 
overlook  that  in  fact  LAP  is  rooted  in  a  much  broader  action 
philosophy  than  Speech  Act  Theory  alone.  In  the  thinking  of 
Maturana (see citation above), the primary function of language is 

argue 

[6]

in  the  coupling  of  activities  rather  than  in  the  formation  of 
representations  or  the  exchange  of  such  representations  via 
(cid:182)
narrow sense as it also assumes that language acts are the result of 
intentions formed by a cognitive subject, whereas such intentions 
are secondary  and not essent(cid:182) 
approach. We will come back on this wider interpretation of LAP 
in the next section.
An organizational communication modeling approaches that stress 
the  human  action-focus  is DEMO,  and  a  variant  of  it,
the 
Extended Workflow Loop Model paradigm.
4.2 DEMO: The OER-paradigm
DEMO (Dynamic Essential Modelling of Organizations) [2,4] is a 
business  process  modelling  method  based  on  social  theory, 
grounded in the philosophy of Searle and Habermas.  Behind the 
modeling  method,  there  is a  strong  well-defined  enterprise 
ontology.
According 
business 
communication  are  related  to  each  other  according  to  a  specific 
pattern,  called  the  transaction  pattern.  The  pattern  consists  of  a 
communication  part  and  an  action  part  (see  Figure  4).  The 
communication part covers the initiation and an evaluation of the 
action. 

communicative 

to  Dietz 

acts 

in 

actor

agendum

t1

t2

order 
phase: 
actagenic 
conversation 
(inception)

t3

fact

t4

time

execution 
phase: 
essential 
action

result 
phase: 
factagenic 
conversation 
(conclusion)

transaction

Figure 4: DEMO Transaction pattern visualizing the OER-

paradigm (Order, Execute, Result)

The transaction starts with a request of the initiator A (at time t1). 
The participants involved in the transaction, called actors, reach 
(at t2) a commitment for a future action, called agendum (thing-
to-do), added to the agenda for the actor involved. Next, the action 
agreed  upon  is  executed  by  the  executor  (t2-t3).  Finally,  the 
parties  try  to  reach  an  agreement about  the  result  of  the  action. 
When the initiator accepts the result, the transaction succeeds and 
a  fact  is  created  (t4).  The  fact  states  that  the  act  has  been 
performed. According to Dietz, the essence of the behaviour of an 
organization consists of the continuous accomplishments of such 
transactions between actors.
The  DEMO  methodology  supports  Actor  Transaction  Diagrams 
that  model  the  interactions  between  the  organization  and  its 
environment  as  well  as  internal  transactions,  and  a  Process 
Structure  Diagram  (PSD).  The  former  can  be  seen  as  a 
   (cid:179) (cid:180)   
   (cid:179)      
Coordination World and the Production World: the atomic process 
      (cid:180) [3]. The 
notion of causal link means here that step A must or may (a socalled optional causal link) be followed by step B. 


(cid:182)DEMO 
distinguishes  three  universal  communication  layers:  the  success 
layer, the failure layer and the discourse layer. The success layer
corresponds  to  the  normal  and  ideal  process  model.  When  an 
exception occurs, e.g. a cancellation, or when parties feel the need 
for negotiation, the failure layer is activated where parties try to 
find a way out.  Both success layer and failure layer are based on 
agreed-upon norms. If the norms themselves become a subject of 
discussion  and  adaptation,  we  are  at  the  discourse  layer.
Information  Systems 
and  Business  Process 
Management tend to focus on the success layer.
4.3 The Extended Workflow Loop model
The  Extended  Workflow  Loop  model  [24]  extends the  OERtransaction  in  DEMO  with  the  notion  of  delegation. The  agent
(executor) that performs a certain service for a customer (initiator) 
in  an  organizational  setting  typically  does  this  on  behalf  of  the 
organization. It is the organization that offers the service, and part 
of  the  execution  is  delegated  to  the  agent.  In  the  Extended 
Workflow  Loop model, this pizza shop process is interpreted as 
that the daughter initiates the execution of the delivery action on 
behalf of the baker, who does evaluate the action later, but does 
not initiate it himself, and at the same time the pizza boy evaluates 
the  baking  action  also  on  behalf  of  the  baker.  In  the  case  of 
breakdowns,  it  is  the  baker  who  solves  the  problem,  and  this 
follows  naturally  from  the  model  as  we  are  talking  about 
delegated tasks, and so the baker remains responsible. In this way, 
the  Extended  Workflow  Loop  model  can  account  for  workflow 
chains  where  one  agent  passes  his  results  over  to  a  next  one, 
without one being the customer of the other, as is, in principle, the 
case in DEMO. 

Customer 

(cid:182) 

I want pizza! 

Baker 

Boy 

Make pizza! 

Deliver pizza! 

Daughter 

Figure 5: Pizza example as extended workflow loop [25]. The 
Initiating (I) and Evaluative (E) parts of the transaction need not 
be performed by the same actor, as the actor can delegate actions. 

The  Extended  Workflow  Loop  Model  provides  a  meaningful 
interpretation of the interactions, but it does not explain how the 
(cid:179)(cid:180)(cid:179)
(cid:180)(cid:179)(cid:180)
(cid:179) (cid:180) 

and 

the  actual  event  processes

step may be a beep tone from the oven, and the event sign in the 
second  case  may  be  the  visible  presence  of  the  pizza  on  the 
designated  shelf.  Without 
the  beep  or  some  equivalent 
mechanism, the daughter would not come and take out the pizza, 
and without the pizza being on the designated shelf, the pizza boy 
would not take it away. 
The  Extended  Workflow  Loop  draws  on  the  same  concepts  as 
DEMO, but there are differences in how they reconcile the event 
processes  and  the  interpretation  of  these  processes  in  terms  of 
communicative  transactions.  DEMO  aims  at  highlighting  the 
transactional structure of the process and for that reason prefers a 
more abstract process model. The Extended Workflow Loop aims 
at  modeling both 
their 
communicative interpretation, and by introducing delegation it is 
able to reduce the distance between the two. 
5. Confrontation
Now  we  have  described  both  LAP  and  an  event-driven  process 
design method, we can confront the two. We will do that in three 
parts:  the  pragmatics  of  event-driven  processes;  communicative 
norm support in event-driven processes; and linguistic action.
5.1 Pragmatics of event-driven processes
Semantic  Web  technology  can  play  an  important  role  in  the 
further  development  of  the  Internet  of  Things. Given  the 
enormous amounts of data that will be produced in this kind of 
applications,  a  purely  syntactic  approach  is too  limiting in  the 
long  run.  According  to  [8],  two  major  functions  for  semantic 
technologies can be distinguished. First, not surprisingly, they are 
the  basis  for  the  discovery of  heterogeneous  resources  and  data 
integration across multiple domains. Second, they can be used for 
behavioural  control  and  coordination of  the  agents  representing 
those  resources.  In  other  words,  semantic  technologies  are used 
both for descriptive specification of the services delivered by the 
resources  and  for  prescriptive  specification of  the  expected 
behaviour  of  the  resources  as well  as  the  integrated  system  (cf. 
[16]).  In  the  above,  we  already  hinted  at  the  integration  of  rule 
engines and ontologies.

As  was  noted  in  the  Introduction,  not  only  semantic  but  also 
pragmatic  aspects  such  as  dealing  with  context  should  be  taken 
into account.  Economic and legal concerns (e.g. privacy) remain 
as relevant as before [1]. It may seem that taking humans out of 
the loop means that social aspects become less relevant. However, 
as we have seen in the above, the event-driven approach separates
the social aspect  from the physical aspect, but the social aspect, 
e.g.  the  authorization  structure,  still  needs  to  be  addressed.  The 
separation observed here in fact indicates a broader evolution. In 
the area of Electronic Markets, a separation of informational and 
physical  trade  processes  was  observed  by  Kambil  &  Van  Heck 
[7].  This  separation  provides  big  opportunities  for  efficiency 
improvement  and  increased  flexibility. The  question  is  what  the 
implications of this separation are for the conceptual modeling. As 
(cid:182)-
driven process chains at CIM level. However, they do not address 
the  social  aspect.  We  propose  to  complement  EPC  with  a 
communication  model  such  as  the  DEMO  Actor  Transition 
Diagram,  in  particular  for  the  external  interactions  of  the 
organization.  For 
internal  operations,  an  authorization
structure needs to be described (from an auditing perspective, this 
cannot be eliminated). The Extended Workflow Loop can be used 
here as theoretical basis, but does not offer  a  workable diagram 
technique. Whether such a diagram technique is feasible depends 
on  how  flexible  the  authorization  structure  is.  In  the  event 

the 


that they can be given and retracted dynamically. Hence it may be 
a  better  modeling  strategy 
to  focus  on the  authorization 
governance rather than a particular authorization structure.

5.2 Communicative norms 
Important  communicative  norms  embedded  in  the  Workflow 
Loop  approach  are  concerned  with  commitment  and  evaluation
[24]. Actions in the enterprise, automated or not, always have a 
social character, since the enterprise is a social system. There is 
always  someone  responsible.  However,  this  does  not  mean  that 
the  commitment  should  always  be  given  explicitly  for  each 
individual case, as the workflow loop model suggests. For actions 
performed  by  humans  this  is  still  the  preferred  norm.  For 
automated actions and event responses, the commitment  may be 
generic  via  an  authorization.  A  similar  remark  applies  to  the 
evaluation.  Evaluation  has  several  aspects.  Accounting for  what 
has been done is important, as authorization and accounting are a 
duality. In  EDA,  this  can  be  implemented  via  message  events. 
Evaluation  in  the  sense  of  assessing that  the  action  has  been 
performed successfully is also necessary, but can often be realized 
very  well  by  means  of  sensor  events     (cid:182)
postcondition.  Evaluation  in  the  sense  of  fulfilling  customer 
satisfaction  requires  a  form  of  valuing.  When  the  result  of  an 
action is hard to predict in detail, e.g., a haircut, then the customer 
needs to be remain in the loop, but this also means that for actions 
with a predictable outcome this is not necessary.

5.3 Linguistic action
LAP  can  be  viewed  as  an  attempt  to  do  justice  to  the  fact  that 
people  act  through  language.  This  makes  language  more  than  a 
representation.  Speech  act  theory,  such  as  developed  by  Searle, 
treats this linguistic action as individual, whereas Habermas has 
emphasized that it is a kind of joint action. However, both take a 
cognitivistic  approach.  Maturana  takes  a  broader  view;  for  him, 
linguistic includes any mutually generated domain of interactions 
[28:49].  Language,  as  a  consensual  domain,  is  a  patterning  of 
(cid:179)  (cid:180)
It  has  a  semantic/cognitive 
dimension, but this is only one aspect. As a biologist, Maturana 
was  particularly  interested  in  interactions  between  animals.  We 
conjecture  that  in  the  new  Smart  Computing  era  the  interaction 
can be  literally  between  any-thing.  This  includes  human-human 
interaction,  in  its  full  spectrum,  i.e.,  starting  from  the  body 
language  such  as  picked  up  so  easily by  our  mirror  neurons.  It 
also includes human-thing interaction, e.g. the interaction between 
the cook and the oven. It appears that in the future, even natural 
objects, such as a tomato or a mountain, can be augmented with 
interaction capabilities. Things may also interact with each other. 
An interesting line of research explores the possibilities of letting 
these  interactions  evolve  from  certain  generic  co-orientation 
capabilities, rather than design them by specification (cf. [20]).
The new vision raises some interesting ethical questions. Does it 
imply  a technocratic  capturing  of  being,  a  devaluation  of  our 
environment  to  suit  human  needs?  Or  is this breaking  with  the 
age-old subject-object distinction (cid:177) everything becomes a subject, 
some more complex than others (cid:177) a kind of emancipation of the 
world? Is it an abolishment of human responsibility because he is 
taken more and more out of the loop? Or does it call for a even 
higher level of human responsibility, to augment the artifacts and 
natural  objects  in  such  a  way  that  each thing  realizes  its  own 
potential?

the 

level 

two  are  not 

6. Conclusion
 (cid:182)   business  processes  are  central, 
and  this  is  reflected  in  the state-of-the-art  process  modelling 
techniqu (cid:182)       
necessity to the atomic level of events. The  first contribution of 
this  paper  is  an  integrative event  ontology  and  a  design 
methodology that builds on this ontology in order to relate EPC 
diagrams  on the  conceptual 
to various  kinds  of 
implementations,  including  event  architectures.  The  second  half 
of the paper confronts this approach with communication-oriented 
approaches  in  the  Language/Action  Perspective.  It  can  be 
concluded that 
incompatible.  In  fact,  a 
combination has mutual benefits. The communicative norms can 
be  used,  in  a  generalized  form,  to  increase  the  quality  of  event 
process models. At the same time, an event perspective suggests 
an interesting generalization of the traditional LAP approaches.
There are several topics for future research. Our design method is 
model-driven,  but  one  question  is  to  what  extent  conceptual 
models are needed in an adaptive environment; that is, what needs 
to  be  specified  in  models,  and  what  should  be  left  to  run-time 
evolution?  Last  but  not  least,  we  hope  to  evaluate  the  proposed 
method  in  practice,  in  particular  in  the  context  of  international 
