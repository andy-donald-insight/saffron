Online Activity Graph for Document Importance and

Association

Charlie Abela

Digital Enterprise Research

Institute,

National University of Ireland,

Galway, Ireland

charlie.abela@deri.org

Chris Staff

Department of Intelligent

Computer Systems,
University of Malta,

Malta

chris.staff@um.edu.mt

Siegfried Handschuh
Digital Enterprise Research

Institute,

National University of Ireland,

Galway, Ireland

siegfried.handschuh@deri.org

ABSTRACT
The way in which a user interacts with her desktop while
performing some task generates an information trail that
can be used to identify the task context and the users in-
terests. This new information can in turn be fed back into
the system to increase the level of support available to the
user for both current and future tasks.
In this paper we
present research which analyses user-activity log files to explore how a users activities evolve with time. Resources fall
in and out of a task based on the users mental model for
tackling that task. We assign time-varying, importance and
association values to each resource, based on the dwell-time
and the resource-switching patterns exhibited by the user
while browsing. Furthermore, we propose a new dynamic
graph algorithm called OnlineActivityGraph which leverages
on these values to generate document clusters and shortterm user models. We further present a discussion about
the encouraging results obtained from our preliminary ex-
periments.

Categories and Subject Descriptors
H.4 [Information Systems Applications]: Miscellaneous;
I.2.8 [Problem Solving, Control Methods, and Search]:
Graph and tree search strategies

General Terms
Theory

Keywords
Dynamic Graphs, User Model, Time decay

1.

INTRODUCTION

The way in which a user interacts with her desktop while
performing some task generates an information trail that can
be used to identify the task context and the users interests.

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
I-SEMANTICS 2011, 7th Int. Conf. on Semantic Systems, Sept. 7-9, 2011,
Graz, Austria
Copyright 2011 ACM 978-1-4503-0621-8 ...$10.00.

This new information can in turn be fed back into the system
to increase the level of support available to the user for both
current and future tasks.

The identification of the task-context is challenging in a
number of ways, most importantly because it tends to be
elusive, since the user might change her task (or subtask)
depending on the goals she wants to reach and the ways
through which she wants to achieve them. We define the
notion of a task with regards to a Knowledge Worker (KW)
as follows:

A task is considered to be an abstraction over an evolving
collection of resources, which the KW mentally relates, based
on their perceived importance, to successfully address some
goal.

When resources are accessed to address some task-related
need, the temporal dimension plays an important role [16,
2]. The information that the user sifts through provides for
a moving and evolving information context that affects also
the users short-term interests.

The relation between time spent going over a document
and the relative users interests in that document have been
explored by [13, 6] whereby it was found that there was a
strong tendency to spend time reading through an article
because it was found to be interesting. Nevertheless, other
contextual information and the users interests need to be
considered so that it becomes useful [11, 12]. In [8] resources
have been identified as pertaining to a task based on three
criteria, (i) the temporal access of the resources, (ii) the
temporal vicinity of the subsequent activities, as well as (iii)
the similarity between the content embedded within these
resources.

In this paper we propose the inclusion of a fourth crite-
ria, which is the dwell time, that is the amount of time that
the user spends interacting with each resource, during the
various accesses. This criteria is a good indicator of the importance that a resource has for the user at some particular
point in time, thus making it core in the users task.

We analyse user-activity log files to explore how users
activities evolve with time. We assign time-varying, importance and association values to each resource, based on the
dwell-time and the resource-switching patterns exhibited by
the user while browsing. While the importance value is used
to quantify the importance of an accessed document during
its access life-cycle, the association value, is used to quantify
the strength of the relation between one document and all
the other documents accessed during the same session.

To capture the dynamicity of accessed resources we de-

191veloped an online graph algorithm which we call OnlineAc-
tivityGraph, which is inspired by the association graph described in [4] and the work on graphs reported by [1] and [10].
The algorithm takes as input a stream of desktop activities
and computes both the evolving nature of the documents
importance as well as its relation to other switched-to docu-
ments. The latter is used to identify those documents which
are most-likely to pertain to the same task.

In our experiments we apply the algorithm on phrases
extracted from the accessed documents and display them to
the user depending on the level of importance gained, or
lost, by their parent documents, as well as the relatedness
that documents have instilled between each other.

The remainder of the paper is organised as follows.

In
Sections 2. and 3. we discuss the importance and the association heuristic functions. In Section 4. we present the OnlineActivityGraph algorithm and explain how we integrated
it with an keyword-extraction component to generate shortterm user models. We present our initial experiments and
results in Section 5. and conclude this study in Section 6.

2.

IMPORTANCE HEURISTIC

Whenever the KW performs some research task a number of documents are accessed and examined with varying
degrees of attention. This attention by the user tends to
change over time, [7, 9, 14].

We assume that documents gain importance when they
are accessed and time is spent by the KW reading through,
and that, once the KW switches to some other document, a
decay process is triggered which erodes the importance value
acquired up till that point in time. Furthermore, this process of acquiring importance and loosing it, is ongoing and
reflects the KWs document usage behaviour. We further
assume that once a KW decides to access a document for
the first time, it is as if the document has already acquired
some importance.

To be able to represent this process of importance gain and
decay, we draw an analogy with the charging and discharging
operations within a capacitor. For more background, we
direct the reader to [15] or any other similar textbook.

We adapted the capacitors features to those of documents
being accessed, abandoned and possibly re-visited by the
KW. To make our approach more realistic we consider the
dwell time on a document together with the switching be-
haviour, thus factoring in more of the users activity context.

Based on this analogy we define the following mapping:

i. We consider the capacitor to represent the accessed

document.

ii. We map the voltage V to the users attention. When
a KW accesses a document she is devoting attention
to it, similar to how voltage is applied to a capacitor.

iii. We consider the charge Q to represent the importance
I that the document acquires due to the time that the
user spends reading through.

iv. We consider the time constant,  = 1

RC to be an averaged dwell-time constant. Based on findings by [12],
the average dwell time on a page was found to be
around 70 seconds in 80% of the 205,873 pages that
they considered in their experiments.

v. The time t during document charging, is taken to be
the dwell time taccess  tswitch, where taccess is the
timestamp when the document is accessed, while tswitch
is the time when user switches to some other docu-
ment. During discharging, t is taken to be the time
tcurraccess  tswitch, where tcurraccess is the time when
the document is re-visited.

vi. The maximum importance value that a document can
attain is 1, while the minimum is 0. In theory though,
this minimum value will never be completely reached,
unless the user closes this document, which is taken to
mean that the user is not interested in that document,
at that point in time.

vii. The default importance is not set to 0, and arbitrarily
is initially set to 0.1. However we plan to investigate
whether this value is realistic or not, whether it should
be lower or higher.

We then use the following equations to compute the im-

portance gain and decay for a document A:

 (Imin(A)  1)  et/ + 1 dwell > 0

I(A) =

Imax(A)  et/

decay > 0

(1)

where Imin is the residual importance or current decay
value and Imax is the importance acquired by the document
when the user dwelled on it last.

The triggering of the charging and discharging processes
are totally controlled by the user because the decision to
open a new document, close an existing one and/or switch
to another document, lies with him. We envision however
that documents which have been dwelled upon for some time
will maintain importance over time and therefore whenever
the user switches back to these documents, the importance
value will be computed, taking into consideration, the decay
value reached at that time.

Based on this approach for computing the importance values of accessed documents, we are able to analyse how this
importance dynamically evolves with time.

3. ASSOCIATION HEURISTIC

When the KW switches between one document and an-
other, her behaviour is considered to be an indication that
they are somewhat associated. Research discussed in [5, 8]
has shown that this relation between frequently and closely
accessed documents exists.
[3] refers to this relation as a
fuzzy association which somehow bonds documents together
to various degrees of strength.

In this research we built on the aforementioned work on
document association and combine it with the importance
value explained earlier to be able to generate evolving clusters of documents which depend solely on the users be-
haviour. The Association metric is based on that discussed
in [3] and is defined for any two documents A and B, as a
combination of two weighted, switching ratios W tRatio(A, B)
and W tRatio(B, A). We first present the equation for the
weighted ratio:

W tRatio(A, B) =


s(A, B)
X=A s(A, X)



I(A)

I(A) + I(B)

(2)

192where s(A, B) is the number of switches that the user has
performed between A and B and s(A, X) is the number of
switches that the user has switched between A and any other
document. I(A) and I(B) are the importance of documents
A and B at some point in time.

The Association is then computed as:

Assoc(A, B) = W tRatio(A, B) + W tRatio(B, A)

(3)

In this manner, we allow the importance of a document to
be dependent on the dwell time, and the association between
documents, to be dependent on both the number of switches
as well as the importance value, gained or decayed, by the
documents at that point in time.
4. ONLINEACTIVITYGRAPH

Since the KWs document-access cycle provides streams
of real-time data we designed our OnlineActivityGraph algorithm as an online algorithm which maintains and allows
operations on the users activity graph.

We consider this graph to be sparse with some nodes getting into and out of clusters as the graph evolves. The
weight of each node depends on the importance heuristic
mentioned above. The switches between documents, performed by the user, are represented by edges and the computed edge weights depend on the importance and association heuristic functions. The users behaviour can essentially
be represented by a weighted, directed multigraph, however
we transform this into a weighted, undirected simple graph
and find paths along the activity graph that maximize the
association value.

Currently we only considered logging data when the user
interacts with Firefox, and for this reason we have adapted
the Dragontalk 1logger.

Each users action is logged in with a timestamp, a URL to
uniquely identify it, and other information about the type of
action, such as ChangeTab, NavigateToURL or FollowLink.
We define a maximal association path, to be a path with
edge weights that exceed an association threshold value, T .
This is motivated by what [10] refers to as an influence re-
gion, which represents the association strength between two
nodes and is defined as follows:

Definition 1. Given a graph G and a node s, the influence

region region(s) of s is

d  region(s)  inf luence(s, d) > T

(4)

4.1 Node and Edge insertions

Insertion of a node is actually an appending since nodes
arrive in sequence. We create a new node based on the
information being logged for that action and connect it to
the last2 added node via a new edge. The importance of
the last node is computed and that of the new node set to a
default value. This operation causes a perturbation across
the whole graph since the newly computed importance value
of the last node effects the weights of the connected edges.
Whenever a node is revisted, an edge is created. The
importance of the last accessed node is computed together
with an update operation on the association weight between
the last node and the re-visited one.
1http://dragontalk.opendfki.de/
2last node: node that has been appended in the previous
cycle

4.2 Updating weights

When the user accesses the first document, a node is created with a default importance value. For each new node
being added, we use equations (1) to compute the last nodes
importance value, and for all the other nodes, except the
current node (unless it is a revisted node), we compute the
decay value and assign it to the importance value of that
node. We set default values for the time constant  used in
both the importance and decay equations.

Since the association weights depend on the importance
values and the introduction of new edges, these have to be
recomputed for each edge in the graph. If the node is being
revisited, a new edge is created and assigned the computed
assocation value.
4.3 Finding the maximal Association paths

To find the maximal association paths within the undirected weighted graph, we use a breadth-first search. The
algorithm starts from the first node in the graph and for each
one of its neighbours it checks the association value on the
connecting edge. If that value exceeds a pre-defined thresh-
old, which we initially set to 0.5, then the edge is added to
an edge bucket associated with that path. The process for
edge searching then continues along the other neighbours of
the current node.

If an association value is found to be less then the thresh-
old, it is temporarally discarded, however the connecting
node is fed back into the algorithm, so that if the association values connecting it to its neighbours are higher then
the threshold, a new edge bucket is created for this new path.
Once all edges have been checked, the result is a set of
edge buckets with varying maximal association path values.
5. EXPERIMENTS

We experimented with the above algorithms and analysed
the results for varying threshold values. The experiments
were performed on a very small scale, (which included the
authors of this paper) within the same institutions. Various
activities performed over different time windows were logged
and analysed.

Since changes to  effect the slope of the increase or decrease of the importance and decay relations, we performed
various experiments to check the effect of these values on the
whole process, as well as whether a balance between the time
constants used for the importance and the decay functions
could be found, that generated acceptable results.

Preliminary results showed that the default value of 70s
for the importance and decay time constants was not ideal
for situations where the user spent consistently long dwell
time on each of the accessed documents. It performed best
when the dwell time was short. Based on a set of logged
sessions that we analysed, we came up with an averaged
dwell time of 187s which seemed to work better.

We experimented with different combinations of time constant values. We assumed that if we increased the time constant in the importance equation, this will at the end translate into stronger associations. The rationale being that
since the importance value would have increased at a lower
rate, it would need more dwell time for it to approach the
maximum. Furthermore we used a greater time constant
(arbitrarily we chose to use twice the importance time con-
stant) in the decay equation. In this case we assumed that
a document that has gained importance, would loose it at a

193lower rate, thus allowing also residual importance to diminish at a lower rate. We were however aware of the rich-get-
richer scenario pointed out by [9] which in our case would
favour long dwell time and few number of switches, over
short dwell time and larger number of switches, and tried to
find a working balance.

We then performed preliminary analyses on how effective was the clustering process on the documents, based on
the maximal association paths. With the default association
value set at 0.5 we noticed that some documents kept entering and falling out of a cluster fairly quickly. When we
increased the value to 0.7, many documents never managed
to cluster with others. There are possibly various reasons
behind this, such as the browsing mood of the user, which
may result in shorter or longer dwell times.

When we decreased the threshold value below 0.5 we started

to notice the builing up of some stronger clusters, made up
of documents that clustered together and kept to this cluster
over time.

We further used our approach to generate clusters of phrases

pertaining to the clustered documents. The phrases were
extracted from each document with a key phrase extractor
called Xtrak4Me 3.

Based on the maximal association paths, those documents
which pertained to the same cluster were displayed to the
user with the same colour. We also combined the confidence
score assigned to each phrase by the extractor, with the
document importance value generated by the importance or
decay functions on that document. This global score is defined as F I/Fmax. Where F is the score assigned by the
extractor,  is a scaling factor and Fmax is the highest confidence score assigned to a phrase within the whole phrase
set. We used this global score to compute the size of that
phrase when it is displayed to the user in a tag cloud.

Though the results are encouraging, at this preliminary
stage in our research we cannot make any strong claims
about this approach and a more elaborate evaluation based
on a combination of a naturalistic approach and a longitudinal evaluation is planned.

6. CONCLUSIONS

In this paper we presented research which analysed useractivity log files to explore how users activities evolve with
time. We assign time-varying, importance and association
values to each resource, based on the dwell-time and the
resource-switching patterns exhibited by the user while brows-
ing. Furthermore, we elaborated on our dynamic graph algorithm called OnlineActivityGraph which leverages on these
values to create clusters of documents based on what we call
maximal association paths. We also presented some discussion about the encouraging results obtained from our preliminary experiments, in particular how our approach can
be used to generate short-term user models.
