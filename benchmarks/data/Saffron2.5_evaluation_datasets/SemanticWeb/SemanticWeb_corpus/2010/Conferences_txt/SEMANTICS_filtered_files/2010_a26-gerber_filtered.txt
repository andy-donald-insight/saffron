Learning Semantic Web Technologies with the Web-Based

SPARQLTrainer

Daniel Gerber
Universitat Leipzig

daniel.gerber@me.com

Marvin Frommhold

Universitat Leipzig

marvin.frommhold@gmail.com

Michael Martin
Universitat Leipzig

leipzig.de

martin@informatik.uni-

tramp@informatik.uni-

Sebastian Tramp
Universitat Leipzig

leipzig.de

Soren Auer

Universitat Leipzig

auer@informatik.uni-

leipzig.de

ABSTRACT
The success of the Semantic Web in research, technology
and standardization communities has resulted in a large
variety of different approaches, standards and techniques.
This diversity and heterogeneity often involve an increasing difficulty of becoming acquainted with Semantic Web
technologies. In this work, we present the SPARQLTrainer
approach for educating novices in semantic technologies in
a playful way. With SPARQLTrainer educators can devise
a SPARQL course by defining a number of exercises either
generically or for a specific domain. Learners can complete
courses by stepwise answering questions of increasing com-
plexity. These questions usually require the learner to build
a SPARQL query for querying a certain knowledge base and
using certain SPARQL features. The SPARQL queries created by a learner are compared with example solutions given
by the instructor. This comparison takes possible variations
into account and gives specific feedback to the learner.

Categories and Subject Descriptors
K.3.1 [Computers and education]: Computer Uses in
EducationComputer-assisted instruction (CAI)

General Terms
Languages, Semantics

Keywords
SparqlTrainer, SPARQL, RDF, training, e-learning

1.

INTRODUCTION

Recently, the Semantic Web and related technologies have
visibly gained traction. Oracle has, for example, integrated

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
I-SEMANTICS 2010, September 1-3, 2010 Graz, Austria
Copyright 2010 ACM 978-1-4503-0014-8/10/09 ...$10.00.

support for semantic knowledge management into their database product, Google started to evaluate RDFa annotations
and the W3C has lately launched the second revision of the
Web Ontology Language (OWL) standard.

The success of the Semantic Web in research, technology
and standardization communities has, however, also resulted
in a large variety of different approaches, standards and tech-
niques. For example, a variety of knowledge representation
formalisms with different expressivity is available with RDF,
RDF-Schema, and various OWL flavors. Moreover, there exist different serializations such as RDF/XML, N3, NTriple,
RDFa, Trix, while the semantic web technology space is complemented by a wealth of different reasoners, triples stores,
rule processors, semantic web service infrastructures, various APIs, etc. This diversity and heterogeneity involve an
increasing difficulty of becoming acquainted with Semantic
Web technologies.

In this work, we present the SPARQLTrainer approach for
educating novices in semantic technologies in a playful way.
We selected the SPARQL query language as a means for
getting acquainted with semantic web technologies at large
for the following reasons:

 In many ways SPARQL (e.g.

its syntax) is inspired
by, and very similar to, the well-known SQL query language for querying relational databases. This makes it
easy for learners to get started.

 By exploring different features of SPARQL, learners do
not only get acquainted with the query language itself,
but also with the underlying RDF data model, various serializations, vocabularies and ontologies (such as
e.g. RDF-Schema and OWL as well as domain ontolo-
gies) or with semantic technology pillars such as triple
stores.

With SPARQLTrainer educators can devise a SPARQL
course by defining a number of exercises either generically or
for a specific domain. Learners can complete courses by stepwise answering questions of increasing complexity. These
questions usually require the learner to build a SPARQL
query for querying a certain knowledge base and using certain SPARQL features. The SPARQL queries created by a
learner are compared with example solutions given by the
instructor. This comparison takes possible variations (such
as a different triple pattern order and variable naming) into


proving her solution. The SPARQLTrainer is complemented
by functionality for user and course management as well as
email notifications.

Further information about SPARQLTrainer and a link to
a test installation including an example course can be found
at the official project page1.

This demonstration paper is structured as follows: We
give an overview of the features of SPARQLTrainer in Section 2. In Section 3 we give a deeper insight of the evaluation of answers and conclude with related and future work
in Section 4.

Figure 1: Screenshot of SPARQLTrainer during
course execution.

2. FEATURES

We have implemented the SPARQLTrainer as a typical
Java web application that runs as a Servlet within a Servlet
container (e.g. Apache Tomcat2). SPARQLTrainer uses the
Jena framework [2] and the SPARQL processor ARQ3 to
handle SPARQL queries.

The main purpose of SPARQLTrainer, i.e. explaining and
practicing SPARQL with students, is determined by two distinguished work flows.

At first tutors need to elaborate a didactic concept which
embraces finding or generating a suitable dataset and the
composition of various questions on the basis of this dataset
to illustrate the foundations of SPARQL and RDF. The resulting course consists of a set of elements related to a specific topic. Such topics should have different levels of difficulty and deal with various aspects of the SPARQL stan-
1http://aksw.org/Projects/SparqlTrainer
2http://tomcat.apache.org/
3http://jena.sourceforge.net/ARQ/

dard [5]. For example, a tutor can create exercises, which
introduce a particular SPARQL feature, such as the query
forms (SELECT, ASK, DESCRIBE and CONSTRUCT), pattern matching (OPTIONAL, UNION) or testing values (FILTER conditions
and operators). A course and its elements have various
properties and settings. One crucial property of a course
element named solutionQuery contains a SPARQL query
(henceforth referred to as solution query), which is used as
reference to determine the correct solution of the elements
question. All additional settings enable different usage sce-
narios, e.g. passing questions sequentially or in a random or-
der. Surveying all parameters is outside the scope of this pa-
per; however a detailed overview of these parameters can be
found at the project page. To ensure consistency of courses
and syntactic correctness of the course elements SPARQL
queries each course deployment triggers a validation process.
As soon as the course creation is completed and the course
is properly deployed, learners are able to participate in the
course. A typical question view, which will be presented to
the learner, is depicted in Figure 1.
In order to give the
learner the opportunity to acquaint oneself with the knowledge base to be queried, we provide the possibility to review
it in different RDF serialization syntaxes using the Triplr4
web service. If a learner actually submits a query (hence-
forth referred to as learner query), it is executed against the
knowledge base and the subsequent result set is compared
against the one determined by the solution query.
If the
results match, the user may proceed to the next course el-
ement. If the query contains syntactical issues, a warning
message will be displayed. In case the query is syntactically
correct, but does not deliver the desired solution, different
forms of feedback will be displayed.

3. QUERY EVALUATION

In this Section we want to focus on how we determine, that
the learner query delivers a correct result in respect to the
solution query. A first simple approach is to transform both
queries into the SPARQL alegbra [3] and compare them af-
terwards. However, this would imply that the learner query
has to be identical to the solution query in order to be considered as correct. This contradicts to our aspiration, that
different queries can lead to the same result set. Based on
this fact our approach is to evaluate queries by their result
sets.

To determine the correctness of the learner query, both
queries are executed against the knowledge base and the
returned results are compared against each other. The comparison of the results is distinguished by the query forms:
 ASK: As this query form delivers true or false it is not
enough to compare only these values. For this reason
we extract the triple patterns for each query (learner
and solution query), create new SELECT queries containing these triple patterns and compare their result
sets. The learner query is considered to be correct, if
and only if the boolean values and the result sets are
equal.

 CONSTRUCT: This query form returns a single RDF graph.
Therefore, it is sufficient to compare both graphs against
each other. The learner query is considered to be cor-
rect, if and only if both graphs contain the same triples.

4http://triplr.com


user towards the correct solution through appropriate feed-
back.

Future Work.

Experiences with SPARQLTrainer have shown that the
currently available features are sufficient to support learners
in comprehending the SPARQL query language. However,
one area for improvement is the administration view of the
web interface. This includes the uploading of courses, editing course configurations as well as the generation of user
accounts and groups.
Since the current SPARQL specification does not include
data manipulation features, an update language, known as
SPARQL-Update [4], has been introduced. In order to provide a similar learning experience for SPARQL-Update, it
is necessary to extend the SPARQLTrainer to support these
new features. For example, it has to be considered how to
evaluate SPARQL-Update queries accordingly and how to
provide learners conveniently with appropriate feedback.
