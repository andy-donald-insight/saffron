Taking the LIDS off Data Silos

Sebastian Speiser

Karlsruhe Service Research Institute (KSRI)
Karlsruhe Institute of Technology, Germany

Englerstr. 11, D-76131 Karlsruhe

speiser@kit.edu

Andreas Harth

Institute AIFB

Karlsruhe Institute of Technology, Germany

Englerstr. 11, D-76131 Karlsruhe

harth@kit.edu

ABSTRACT
LInked Data Services (LIDS) denote the integration of dataproviding services and Linked Data. LIDS are parameterised
and formally described web resources which return RDF
when dereferenced via HTTP. In this paper we present a
general method for creating Linked Data Services; LIDS
consist of data access interface conventions that are compatible to Linked Data principles and a lightweight formal
description model. Our approach is based on established
Web standards including HTTP, RDF and SPARQL. Ad-
ditionally, we announce several LIDS that we have created
from existing real-life services, unlocking vast amounts of
triples to the Web of Data.

Categories and Subject Descriptors
H.3.5 [Online Information Services]: Web-based services

General Terms
Semantic Web Services

Keywords
Semantic Web, Linked Data, Web Services, Information In-
tegration

1.

INTRODUCTION

The trend towards publishing data on the Web is gaining
momentum, particularly spurred by the Linking Open Data
(LOD) project1 and several government initiatives to publish public sector data. Data publishers often use Linked
Data principles2 which leverage established Web standards
such as Uniform Resource Identifiers (URIs), the Hypertext Transfer Protocol (HTTP) and the Resource Description Framework (RDF3). Data providers can easily link their

1http://linkeddata.org/
2http://www.w3.org/DesignIssues/LinkedData
3http://www.w3.org/TR/rdf-concepts/

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
I-SEMANTICS 2010, September 1-3, 2010 Graz, Austria
Copyright ACM 978-1-4503-0014-8/10/09 ...$10.00.

data to data from third parties via reusing URIs. The LOD
project proves that the Linked Data approach is, in prin-
ciple, capable of integrating data from a large number of
sources.

However, interlinkage between data on the current Linked
Data Web is still low, and a lot of data that could be beneficially interlinked with other data still resides in inaccessible
data silos. Reasons include:
 data is dynamically changing, e.g., stock quotes or
 data is generated dynamically depending on possibly
infinite different input data, e.g., distance between two
geographical points;
 the data provider does not want arbitrary access to the

weather data;

data, e.g., prices of flight tickets.

Data is often provided via Web services, as services provide a restricted view on a possibly implicit or constantly
changing data set. We refer to these services in the following as information or data services. These data-providing
services are generally stateless and free of side effects, i.e.,
do not change the state of the world.

Linked Data interfaces for services have been created, e.g.,
in form of the book mashup [2] which provides RDF about
books based on Amazons API, or twitter2foaf4, which encodes a Twitter follower network of a given user based on
Twitters API. These are useful examples for the integration of information services and Linked Data. However, the
interfaces are not formally described and thus the link between services and data has to be established manually or
by service-specific algorithms. For example, to establish a
link between a person instance (e.g., described using the
FOAF vocabulary5) and her Twitter account, one has to
hard-code which property relates people to their Twitter
username and the fact that the URI of the persons Twitter representation is created by appending the username to
http://twitter2foaf.appspot.com/id/.

Vast amounts of idle data can be brought to the Semantic
Web via a standardised method for creating Linked Data
interfaces to services. The method should incorporate formal service descriptions that enable (semi-)automatic service discovery and integration. We present such an approach
for what we call LInked Data Services (LIDS). Specifically,
we present the following contributions:
 an access mechanism for LIDS interfaces based on URIs
 a lightweight data service description formalism based

and HTTP (Section 3);

4http://twitter2foaf.appspot.com/
5http://xmlns.com/foaf/0.1/


(Section 5);

 algorithms for linking existing RDF data with LIDS
 application of the presented methods to existing services to expand the current Web of Data (Section 6).

2. USE CASE SCENARIO

Our use case is a scenario involving the analysis of technology companies. Consider an investor who wants to assess
the outlook of a potential investment target. The investor
could vet the company by navigating an integrated dataset
containing basic company data, key personnel, competitors,
job openings, IP portfolio and previous VC investments in
the company. In addition, the dataset could contain Social
Media from Twitter and blogs that allows the investor to
gauge the media interest in the company.

three major drawbacks:

All required information is available on the Web, but with
 The data is accessible via several protocols, e.g., some
data is directly accessible via HTTP GET lookups
while other data is hidden behind forms requiring HTTP
POST and possibly HTTP cookies.
 The data is encoded in heterogeneous data formats,
e.g., trademark data from the United States Patent
and Trademark Office is available in HTML; patent
data from the European Patent Office in Comma Separated Value files; CrunchBase company descriptions,
Indeed.com job offers and Twitter messages in JSON;
and data from GeoNames services in XML.
 The data is sparsely interlinked, e.g., there exists no
link between a companys office location and its GeoNames location, and no link between a company and its
trademarks.

Consider data about company offices, which contains lat-

itude and longitude attributes:

#usa-palo-alto-hq geo:lat "37.416" .
#usa-palo-alto-hq geo:long "-122.152" .

A GeoNames service call to find nearby populated places6

returns:

<geonames>

<geoname>

<name>College Terrace</name>
<geonameId>5338647</geonameId>
...

</geoname>

</geonames>

Based on the available data one could establish a foaf:

based_near connection between #usa-palo-alto-hq and http:
//sws.geonames.org/7288147/, however, that step would
require specialised code. Unlocking the data for automated
integration and processing requires:
 Linked Data interfaces to all services and data sources,
 formal service descriptions, so that links between data

so that data can be easily accessed and integrated;

from different sources can be created automatically.

3. LIDS METHOD

Information services provide data that is related in a specific way to the given parameters. For example, the GeoNames findNearbyWikipedia service relates a populated place
6http://ws.geonames.org/findNearbyPlaceName?lat=
37.416&lng=-122.152

to the given latitude/longitude parameters. We extend that
notion for Linked Data Services as follows:

A Linked Data Service (LIDS) provides URIs for entities
representing service inputs that encode parameters as keyvalue pairs in the query string. Dereferencing the URI via
HTTP GET returns an RDF description of the service input
entity, its relation to the service output and the output data
itself.

For example, the LIDS wrapper for the GeoNames findNearbyWikipedia service requires geocoordinates as parameters encoded in the URI of the wrapper: http://geowrap.
openlids.org/findNearbyWikipedia?lat=37.416&lng=-122.
152. We explain how to construct these URIs from service
descriptions in Section 5.

Looking up the service URI returns URIs of nearby places
from Wikipedia (we substitute Wikipedia URIs with those
from DBpedia7) and the relation to a non-information URI
denoting a point:

@prefix dbp: <http://dbpedia.org/resource/> .
<http://geowrap...Wikipedia?lat=37.416&lng=-122.152#point>

foaf:based_near dbp:Palo_Alto%2C_California ;
foaf:based_near dbp:Packard%27s_garage .

To establish equivalence between #usa-palo-alto-hq and

http://geowrap.openlids.org/findNearbyWikipedia?lat=
37.416&lng=-122.152#point we can use owl:sameAs.
URIs are generally constructed in the following way:

[endpoint](pars)#InputName
pars = ?parameter1=value1&parameter2=value2&...

or if only one required parameter with value value1 exists,
additionally the following shortcut URI is supported:
[endpoint]/value#InputName
The local part InputName is replaced by the type of input
given to the service and is used to distinguish between the
document containing the services result and the contained
result individual.

4. SERVICE DESCRIPTIONS

We define a simple vocabulary for LIDS8 that defines a
class for LIDS and a description property relating a LIDS to
a SPARQL query using the CONSTRUCT operator and unsafe variables. A service description is given in the following
way:

CONSTRUCT { [io-relation] } FROM

[endpoint]

WHERE { [input] }

We restrict both [input] and [io-relation] to basic graph
patterns, i.e. conjunctions of triple patterns.
 [input]: The required input values and their relations
to each other. The variables in the input relation are
the service parameters as defined in Section 3.
 [endpoint]: A URI that is used as the base URI when
constructing a service call as described in Section 3.
 [io-relation]: Relates one of the input variables (cor-
responding to the InputName of Section 3) to the output variables, which are unsafe, i.e. did not appear in
the WHERE clause. The expression does not have to
fully specify all descriptions that will be returned, but

7http://dbpedia.org/
8http://openlids.org/vocab


only the minimum information, that is returned. Thus
output is semi-structured data, and can be arbitrarily
extended.

The use of unsafe variables and the meaning of the endpoint
are not completely adhering to the SPARQL standard, but
have their intuitive meaning. An example description of the
geo service presented in Section 3 is given in the following:

CONSTRUCT { ?point foaf:based_near ?feature }
FROM <http://geowrap.openlids.org/findNearbyWikipedia>
WHERE { ?point geo:lat ?lat . ?point geo:long ?lng }

The unsafe variables (here: ?feature) are bound by the
service. The variable appearing both in [input] and [io-
relation] (here: ?point) is the input object and used as
#InputName (here: #point) when building service call URIs.
We generally assume that a service operates on literal val-
ues, so only those variables specified in the [input] basic
graph pattern have to be given.If the actual URI of an individual is needed, a URI can be expressed as Literal using
the log:uri property as proposed by Berners-Lee et al. [1].

5. ENRICHING LINKED DATA WITH LIDS
Existing Linked Data can be automatically enriched with
links to LIDS. This can happen in different settings, consider

LIDS, and storing the new data.

e.g.: Processing of a static RDF data set, inserting links to
 A Linked Data endpoint that serves data, and dynam-
 A Linked Data browser that locally augments retrieved

ically adds links to LIDS to the result.

data with data retrieved from LIDS.

Given an RDF graph, determining matching data for a given
service can be realised by evaluating a SELECT SPARQL
query of the following form: SELECT * WHERE { [input] }
The returned bindings can be used to construct an URI
which is sameAs the binding value of the InputName vari-
able. The sameAs-relation can be either explicitly added to
the data set or e.g. in the case of a Linked Data browser the
equivalent LIDS URI can be resolved and the obtained data
can be added to the description of the input entity. The
query for the geo service example is:
SELECT ?point ?lat ?lng WHERE

{ ?point geo:lat ?lat; geo:long ?lng }.

For a binding ?point = #usa-palo-alto-hq, ?lat = 37.416,
?lng = -122.152, the following triple would be inferred:
#usa-palo-alto-hq owl:sameAs

<http://geowrap.openlids.org/findNearbyWikipedia?

lat=37.416&lng=-122.152#point>.
Figure 1 illustrates this interlinking process, for which we
provide a Java tool.9

9http://code.google.com/p/openlids

6. APPLICATIONS

We created LIDS from the sources required to realise our
use case scenario from Section 2. In the following we list the
LIDS that we made publicly available. The services are also
linked on http://openlids.org together with their formal
LIDS descriptions and further information, such as URIs of
example entities.
- CrunchBase Wrapper10 provides information about tech
companies, their funding, founders, top employees, prod-
ucts, and competitors.

- GeoNames Wrapper11 provides three functions:

 finding the nearest GeoNames feature to a given point,
 finding the nearest GeoNames populated place to a

given point,

 linking a geographic point to resources from DBpedia

that are nearby.

- Twitter Wrapper12 links Twitter account holders to the

messages they post.

- Feedwrapper13 provides SIOC data about RSS and Atom

feeds.
The services are deployed on Googles App Engine cloud

environment.

7. RELATED WORK

Early Web service description formalisms, such as WSDL,
do not model the relation between input and output data,
which leaves space for ambiguities.

General Semantic Web Services approaches include OWLS14 and WSMO [5] but still lack practical applications, which
can be partially explained by their complexity and their
use of formalisms that are not familiar to all Semantic Web
users. In contrast, our solution relies on standard and wellknown technologies, namely SPARQL, HTTP and RDF.
Furthermore LIDS are a match for the semi-structured and
decentralised nature of Linked Data, despite having a logical
foundation.

Most closely related to our service descriptions formalism
are works on semantic descriptions of stateless services (e.g.
[4, 3, 6]). Similar to our approach these solutions define service functionality in terms of input and output conditions.
Most of them, except [4], employ proprietary description
formalisms.
In contrast, our approach relies on standard
SPARQL. Furthermore our work provides the following key
advantages: i) a methodology to provide a Linked Data interface to services, ii) semi-structured input and output def-
initions, compared to the static definition of required inputs
and outputs in previous approaches.

8. CONCLUSIONS

We have presented an approach for the integration of
data services with Linked Data. Using an uniform method
for creating access interfaces that are compatible to Linked
Data principles enables the creation of LInked Data Services (LIDS) from previously inaccessible data silos. LIDS
have formal, yet lightweight and flexible descriptions based
on SPARQL, a language which is familiar to many Semantic Web users and developers. By fulfilling a real-world use
10http://cbasewrap.ontologycentral.com/
11http://geowrap.openlids.org/
12http://twitterwrap.ontologycentral.com/
13http://feedwrap.openlids.org/
14http://www.w3.org/Submission/OWL-S/

RDFRDF Interlinked with LIDSInterlinkerLIDS descriptionscase covering data about about tech companies with LIDS,
we evaluated our approach and contributed vast amounts of
triples to the Web of Data.
