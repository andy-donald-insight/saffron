dbrec  Music Recommendations Using

DBpedia

Alexandre Passant

Digital Enterprise Research Institute,
National University of Ireland, Galway

alexandre.passant@deri.org

Abstract. This paper describes the theoretical background and the implementation of dbrec, a music recommendation system built on top
of DBpedia, offering recommendations for more than 39,000 bands and
solo artists. We discuss the various challenges and lessons learnt while
building it, providing relevant insights for people developing applications
consuming Linked Data. Furthermore, we provide a user-centric evaluation of the system, notably by comparing it to last.fm.

Keywords: Semantic Web Applications, Linked Data, Recommendation Systems, Semantic Distance, DBpedia.

1 Introduction

Since its first steps in 2007, the Linking Open Data (LOD) cloud has grown
considerably, as shown in Fig. 11. However, besides recent initiatives outreaching
how to build applications using it [5] [7], there is still room for more end-user
applications (i.e. not semantic search engines nor APIs) that consume Linked
Data. While we can argue that the data itself is the most valuable component,
building innovative applications would lead to a virtuous circle enriching the
value of this global network, by analogy with Metcalfes law [11].

In this paper, we describe dbrec  http://dbrec.net , a music recommendation system based on Linked Data (in particular on DBpedia) offering
recommendations for more that 39,000 bands and solo artists. In addition, a
core component of dbrec is its explanation feature, provided as a side effect
of using Linked Data for computing the recommendations. We provide a usercentric evaluation of the system in order to identify how it compares to existing
systems, in particular with last.fm2, and how users rate its novel recommen-
dations. Furthermore, besides presenting the theoretical background and the
architecture of the system, we also discuss some lessons learnt when building it,
in terms of data quality, architecture considerations as well as query patterns

 The work presented in this paper has been funded by Science Foundation Ireland

under Grant No. SFI/08/CE/I1380 (L on-2).

1 Based on [2] and http://richard.cyganiak.de/2007/10/lod/

http://last.fm

P.F. Patel-Schneider et al.(Eds.): ISWC 2010, Part II, LNCS 6497, pp. 209224, 2010.
c Springer-Verlag Berlin Heidelberg 2010

A. Passant

s
t

e
s
a
a

t

01.07.07

01.10.07

01.01.08

01.04.08

01.07.08

01.10.08

01.01.09

01.04.09

01.07.09

Time

Fig. 1. The growth of datasets in the Linking Open Data cloud

and scalability. Thus, our aim is to provide a set of insights and best practices
that can be re-used when building end-user applications that consume Linked
Data.

The rest of the paper is organised as follows. In Section 2, we briefly describe the LDSD algorithm  Linked Data Semantic Distance , used as a
basis of our recommendation engine. In addition, we detail its related ontology,
used to represent these distances and their explanations in RDF. In Section 3,
we discuss the dbrec architecture, explaining how the previous algorithm has
been applied to DBpedia to compute recommendations for more than 39,000
resources. Section 4 describes the evaluation of the system, including comparison with last.fm, evaluation of the novel recommendations and of the system
as a whole. Then, in Section 5, we discuss three particular lessons learnt when
building dbrec, which are however relevant in the broader Linked Data context:
(1) data quality; (2) architecture considerations; and (3) SPARQL query patterns and scalability. We then discuss related work in Section 6 before concluding
the paper with an overview of future challenges for dbrec.

2 Linked Data Semantic Distance

2.1 Motivation

Our main motivation was to identify how semantic distance [21] measures could
be applied to resources published on the Web as Linked Data [1]. Specifically,
and while semantic distance have been studied over time in various contexts [21]
[3] [6], our goal was to identify and to apply such measures by considering some
of the main characteristics of Linked Data:

 relying only on links  i.e. not taking into account literal values and their

linguistic proximity;
?

?

?
 relying only on instance data  i.e. not taking into account ontologies used
to describe resources, since LOD is more oriented towards publishing instance
data than using formal ontologies;

 considering dereferencable URIs  so that distances can be computed simply

by accessing URIs and retrieving corresponding RDF data.

Our aim was then to identify the usefulness of the Linked Data principles for
computing semantic distance between particular resources.

2.2 A Conceptual Model for Linked Data

While Linked Data is generally introduced using its four publishing principles
[1]  which make sense from a programmatic point of view  there is a need
to ground it into a theoretical framework to define algorithms using it. We thus
provide the following definition of a Linked Data dataset, whether it is centralised
or distributed on the Web  and we can then consider LOD =
?

?

?
i Gi.

Definition 1. A dataset following the Linked Data principles is a graph G such
as G = (R, L, I) in which R = {r1, r2, ..., rn} is a set of resources  identified by
their URI , L = {l1, l2, ..., ln} is a set of typed links  identified by their URI
 and I = {i1, i2, ..., in} is a set of instances of these links between resources,
such as ii = lj, ra, rb.
This definition voluntary excludes literals, as we focused only on the URI-linking
aspect of Linked Data, as discussed in [1]: The simplest way to make linked data
is to use, in one file, a URI which points into another.

2.3 LDSD  Linked Data Semantic Distance

Based on this definition, we defined a Linked Data Semantic Distance (LDSD)
measure to compute the distance between two resources published as Linked
Data3, normalised in the [0, 1] interval. So far, our measure considers only resources linked either directly or through a third resource, and recursive patterns
such as SimRank [15] may be used in the future. Since LDSD  and some of
its initial variants  has already been discussed in [19], we will not present it in
too many details. At a glance, for two resources ra and rb, LDSD identifies four
dimensions (direct and indirect links, both incoming and outcoming) to compute
their distance, using the following definitions.

Definition 2. Cd is a function that computes the number of direct and distinct links between resources in a graph G. Cd(li, ra, rb) equals 1 if there is an
instance of li from resource ra to resource rb, 0 if not. By extension Cd can be
used to compute (1) the total number of direct and distinct links from ra to rb

3 Note that we use the term distance while the measure may actually not be symmetric.

A. Passant

(Cd(n, ra, rb)) as well as (2) the total number of distinct instances of the link li
from ra to any node (Cd(li, ra, n)).

Definition 3. Cio and Cii are functions that compute the number of
indirect
and distinct links, both outcoming and incoming, between resources in a graph
G. Cio(li, ra, rb) equals 1 if there is a resource n that satisfy both li, ra, n and
li, rb, n, 0 if not. Cii(li, ra, rb) equals 1 if there is a resource n that satisfy
both li, n, ra and li, n, rb, 0 if not. By extension Cio and Cii can be used to
compute (1) the total number of indirect and distinct links between ra and rb
(Cio(n, ra, rb) and Cii(n, ra, rb), respectively outcoming and incoming) as well as
(2) the total number of resources n linked indirectly to ra via li (Cio(li, ra, n)
and Cii(li, ra, n), respectively outcoming and incoming)
?

?

?
i

1 +

Cd

(li ,ra,rb

)

(li ,ra,n)) +

1+log(Cd
?

?

?
i

Cd

(li ,rb,ra)

1+log(Cd

(li ,rb,n)) +
?

?

?
i

Cii

(li ,ra,rb

)

1+log(Cii

(li ,ra,n)) +

LDSD(ra, rb) =

Cio

(li ,ra,rb

)

1+log(Cio

(li ,ra,n))
?

?

?
i

Fig. 2. The LDSD measure

2.4 The LDSD Ontology

In addition to the measure itself, and since we focus on a Linked Data approach,
our aim was to provide the output of such measures also available on the Web
as Linked Data. We thus designed a lightweight LDSD ontology4, accompanying
the previous measure and containing two main classes:

 ldsd:Distance, in order to represent the distance between two resources

(using ldsd:from and ldsd:to) and its value (ldsd:value5)

 ldsd:Explanation (and four subclasses: ldsd:DirectIn, ldsd:DirectOut,
ldsd:IndirectIn and ldsd:IndirectOut), in order to store the links and
the property-value pairs (ldsd:property and ldsd:node) used to measure the distance, and how much similar links appear in the dataset
(ldsd:total).

Here lies one of the first advantages of using Linked Data to compute semantic distance. The links that are traversed by the algorithm are all typed, and
this is consequently easy to know how the distance has been computed, as
we will show when presenting dbrecs user-interface (Section 3.4). As an ex-
ample, the following snippet of code (Listing 1.1) represents that Elvis Presley is at a distance of 0.09 from Johnny Cash, because (among others) both
have the same value for their rdf:type property ( http://dbpedia.org/class
/yago/SunRecordsArtists), shared only by 19 artists in the http://dbpedia.
org dataset.

4 Available at http://dbrec.net/ldsd/ns#

rdf:value was not used due to its lack of formalism 
http://www.w3.org/TR/rdf-schema/#ch_value
