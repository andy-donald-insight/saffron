How to Reuse a Faceted Classification and Put

It on the Semantic Web

Bene Rodriguez-Castro, Hugh Glaser, and Leslie Carr

School of Electronics and Computer Science, University of Southampton,

Southampton SO17 1BJ, UK

{b.rodriguez,hg,lac}@ecs.soton.ac.uk

http://www.ecs.soton.ac.uk

Abstract. There are ontology domain concepts that can be represented
according to multiple alternative classification criteria. Current ontology
modeling guidelines do not explicitly consider this aspect in the representation of such concepts. To assist with this issue, we examined a
domain-specific simplified model for facet analysis used in Library Sci-
ence. This model produces a Faceted Classification Scheme (FCS) which
accounts for the multiple alternative classification criteria of the domain
concept under scrutiny. A comparative analysis between a FCS and the
Normalisation Ontology Design Pattern (ODP) indicates the existence
of key similarities between the elements in the generic structure of both
knowledge representation models. As a result, a mapping is identified
that allows to transform a FCS into an OWL DL ontology applying the
Normalisation ODP. Our contribution is illustrated with an existing FCS
example in the domain of Dishwashing Detergent that benefits from
the outcome of this study.

Keywords: facet analysis, faceted classification, normalisation, ontology design pattern, ontology modeling.

1 Introduction

Ontologies remain as one of the key components needed for the realization of
the Semantic Web vision. They bring with them a broad range of development
activities that can be grouped into what it is referred to as Ontology Engineer-
ing. Ontology Engineering for the Semantic Web is a very active research area
and has experienced remarkable advancements in recent years, although it is
still relatively new compared to other engineering practices within Computer
Science or other fields. A constant ongoing effort in Ontology Engineering deals
with harnessing the field with sound development methodologies analogous to
those successfully employed in Software Engineering for decades. One of the objectives of these methodologies is to address areas of the ontology development
process vulnerable to ad-hoc practices that could potentially lead to unexpected
or undesirable results in ontology artifacts.

This paper describes a specific, very recurrent modeling scenario in ontology de-
velopment, subject to such vulnerability. The scenario consists of domain-specific

P.F. Patel-Schneider et al. (Eds.): ISWC 2010, Part I, LNCS 6496, pp. 663678, 2010.
c Springer-Verlag Berlin Heidelberg 2010

B. Rodriguez-Castro, H. Glaser, and L. Carr

concepts that can be represented according to multiple alternative classification
criteria. To the best of our knowledge, guidelines for the conceptualization and
representation of domain-specific concepts prone to be described based on multiple (potentially alternative) classification criteria, has not been explicitly considered in the context of ontology modeling for the Semantic Web.

General examples of domain-specific concepts that exhibit the characteristics described abound, going from a bibliographic reference, (which could be
classified according to several criteria such as subject, author, publication
venue, etc.); to a toy (which could be classified based on suitable age,
brand, subject type, etc.). The list of examples can go on. We have seen
in our own experience that lack of specific design guidelines leaves ample room
for conceptual errors when trying to develop a simple domain-specific ontology
model for such concepts. For example, common mistakes when trying to represent these concepts and their classification criteria are to use subsumption
relations between classes when in fact a part-of relation would be in order, or to
use subsumption to model relationships that are outside OWL DL expressivity
altogether.

Other examples of domain-specific concepts that can fit into the modeling
scenario described are particularly interesting because they are used in wellknown ontology development literature using OWL. They include: Wine [1],
Person (in the context of family history relations) [2], or Pizza [3]. However,
in none of them, they refer explicitly to the various classification criteria of the
domain concept that are considered implicitly, nor attempt to represent these
criteria explicitly in the respective ontology models developed.

To assist with these issues, we aim to put forward an initial set of basic
design guidelines to mitigate the opportunity for ad-hoc modeling decisions in
the development of ontologies for the problem scenario described. To obtain
the conceptual model of a domain-specific concept and its multiple classification criteria we examined a simplified model for facet analysis in the field of
Library and Information Science [4]. The outcome of this facet analysis is a
Faceted Classification Scheme (FCS) for the domain concept in question where
in most cases a facet would correspond to a classification criterion. To obtain an
ontology representation of the FCS, we examined the Normalisation Ontology
Design Pattern (ODP) [5] [6] [7]. A comparative analysis between a FCS and
the Normalisation ODP revealed the existence of key similarities between both
knowledge representation paradigms. The similarities allowed us to identify a
series of mappings to transform a FCS into an OWL ontology applying the Normalisation pattern. Moreover, the ontology model obtained through this process
contains a valid OWL DL representation of the classification criteria involved in
the characterization of the domain concept.

To illustrate our contribution, we used throughout the document an existing
FCS example in the domain of Dishwashing Detergent [8]. In fact, there are
aspects of the work presented in this paper that could be viewed as a follow-up
to [8] in the context of the Semantic Web and we attempted to acknowledge that
in our title.
?

?

?
There is an additional important use case worth highlighting for motivating
the need of this work as well. That is the modeling of the concept Fault in
the domain of resilient and dependable computer systems. The representation of
Fault is part of an ontology featured in a web portal knowledge base (RKB-
Explorer1) for the project ReSIST2 (Resiliance for Survivability in Information
Society Technologies) [9].

The rest of this paper is structure as follows: Section 2 describes the structure
and elements of a generic FCS; Section 3 does likewise regarding the Normalisation ODP; Section 4 introduces the alignments identified between both knowledge representation paradigms to enable the transformation of a generic FCS
into a normalised ontology; Section 5 provides a comparison to previous work
closely related to our proposal; and finally, Section 6 concludes the paper with
some final remarks.

2 Faceted Classification Scheme

This section remarks the main features of a FCS involved in the comparative
analysis to the Normalisation ODP for a given domain of discourse, while a
thorough overview of facet analysis and FCSs can be found in [4] [10]. The latter
also explores how FCSs compare to other knowledge representation approaches
in classification and provides an account of its strengths and limitations.
Denton [8]( 0) characterized a FCS for a given domain as follows: a set of
mutually exclusive and jointly exhaustive categories, each made by isolating one
perspective on the items (a facet), that combine to completely describe all the
objects in question, and which users can use, by searching and browsing, to find
what they need.
However, in order to develop a FCS it is required to go through the process
of Facet Analysis. Vickery [8]( 2.3) describes Facet Analysis as: The essence
of facet analysis is the sorting of terms in a given field of knowledge into homo-
geneous, mutually exclusive facets, each derived from the parent universe by a
single characteristic of division.

The key to Facet Analysis and FCSs is the notion of facet. Spiteri [4] simplified existing principles used in established Universal FCSs in Library Science. A
fundamental of such principles is introduced as follows: The Principles of Homogeneity and Mutual Exclusivity state respectively that facets must be homogeneous and mutually exclusive, i.e., that the contents of any two facets cannot
overlap, and that each facet must represent only one characteristic of division of
the parent universe.

In this sense, each facet can be designed separately and it models the domain
of discourse from a distinct aspect. Each facet consists of a terminology, a finite
set of terms that exhaust the facet. This set of terms is also referred to as foci.
There are numerous types of FCSs that vary in complexity. For example,
FCSs that include several subject fields containing multiple facets and subfacets

http://www.rkbexplorer.com/
http://www.resist-noe.org/
?

?

?
[11]( 8, Fig. 1). However, the rest of this section characterizes the elements of
a simple generic FCS that this paper will refer to hereafter.

2.1 Structure and Elements

Definition 1. Elements of a simple generic Faceted Classification Scheme:

 Target Domain Concept (TDC).
 Facets: Facet1, Facet2, ..., rest of facets.
 Terms or foci (organized by facets):

 Facet1: F1Term1, F1Term2, ..., rest of terms in Facet1.
 Facet2: F2Term1, F2Term2, ..., rest of terms in Facet2.
 ... rest of terms by facet.

 Set of items (from the TDC) to classify: Item1, Item2, ..., rest of items.

The following notation is introduced to refer to the elements of a generic FCS
in Def. 1:

 T DC denotes the domain or universe of discourse. The domain-specific con-

cept targeted by the FCS.

 F aceti denotes one of the facets of the FCS.
 FiT ermj denotes one of the terms of F aceti.
 Itemx denotes one the items from the domain of discourse to be classified.

Example 1. The structure below recaps the final FCS developed for the Dish-
washing Detergent domain example in [8]( 2.4). The elements of the schema
fit into the generic structure presented in Def. 1.

 The T DC element is populated with the domain Dishwashing Detergent.
 F aceti elements are populated with the facets: Agent, Form, Brand

Name, Scent, Effect On Agent, and Special Property.

 FiT ermj elements are populated with the terms or foci listed below (grouped

by facet):
 Agent: dishwasher, person.
 Form: gel, gelpac, liquid, powder, tablet.
 Brand Name: Cascade, [...], Palmolive, Presidents Choice, Sunlight.
 etc.

 Itemx elements are populated in this case with two example items to classify:
 Presidents Choice Antibacterial Hand Soap and Dishwashing Liquid.
 Palmolive Aroma Therapy, Lavender and Ylang Ylang.
?

?

?
3 Normalisation Ontology Design Pattern

This section highlights the main characteristics of the Normalisation ODP relevant to the comparative analysis to a FCS.

The Normalisation pattern is classified as a Good Practice ODP in the
catalog of ODPs introduced in [6] [7] (available online3). It can be applied to
any OWL DL ontology that consists of a polyhierarchy where some semantic
axes can be pointed. Each of those axes will be a module. One of their most
powerful features, is the ability of logical reasoners to link these independent
ontology modules to allow them to be separately maintained, extended, and
re-used.

The pattern also establishes a series of requirements that a normalised ontol-

ogy should meet, some of which are summarized below:

 The essence for the normalisation proposal is that the primitive skeleton
of the domain ontology should consist of disjoint homogeneous trees (also
referred to as modules) [5].

 Each primitive class that is part of the primitive skeleton should only have
a primitive parent, and primitive sibling classes should be disjoint, creating
the modules [6]( 4.3.2.1).

 This implies that for any two primitive concepts either one subsumes the
other or they are disjoint. Assertion of multiple inheritance relations among
primitive concepts are not allowed [5].

 Normalisation allows exactly one unlabelled flavour of is-kind-of

link corresponding to the links declared in the primitive skeleton. All others are
inferred by the reasoner [5].

3.1 Structure and Elements

There are several examples of the generic structure of the Normalisation ODP
in the literature [6]( 4.3.2.1), [7]( 6.5.1,  A.13) and online3. Figure 1 presents
the specific version of the generic structure that this paper will refer to hereafter,
which preserves the required characteristics of the pattern. Every node of the
owl:Thing tree in Fig. 1, denotes an owl:Class. The symbol () indicates that
the corresponding node is a defined class. Otherwise, the node is a primitive class.
Every node of the owl:topObjectProperty tree denotes an owl:ObjectProperty.
Figure 2 depicts a further generalization of the structure in Fig. 1 and introduces
the following notation:

 :T DC denotes a primitive class representing the domain concept being nor-

malised.

 :M odulei denotes a primitive class that represents one of the modules.
 :MiClassj denotes a primitive class that represents a subset of the module

class :M odulei.
http://odps.sourceforge.net/( Normalisation).

B. Rodriguez-Castro, H. Glaser, and L. Carr

owl:Thing

|-- :Module1

|-- :M1Class1
|-- :M1Class2
|-- (... rest of subclasses of Module1)

|-- Module2

|-- :M2Class1
|-- :M2Class2
|-- (... rest of subclasses of Module2)

|-- (... rest of modules and subclasses)
|-- :TargetDomainConcept (or :TDC)

|-- () :M1Class1TDC
|-- () :M1Class2TDC
|-- () (... rest of defined classes based on Module1)
|-- () :M2Class1TDC
|-- () :M2Class2TDC
|-- () (... rest of defined classes based on Module2)
|-- () (... rest of defined classes based on subclasses of the rest of modules)

|-- :SpecificTDC1
|-- :SpecificTDC2
|-- (... rest of specific items from the TDC to be represented and classified)

owl:topObjectProperty

|-- :hasModule1
|-- :hasModule2
|-- (... rest of properties based on the rest of modules)

Fig. 1. Generic structure of the Normalisation ODP

 :hasM odulei denotes an object property that links every module :M odulei
to the different subclasses of the target domain concept :MiClassjT DC and
:Specif icT DCx.

 :MiClassjT DC denotes a defined class that represents a subset of the target
domain concept class :TDC. Every class :MiClassjT DC is defined based on
a one-to-one relationship to the single corresponding class :MiClassj that
it is derived from.

 :Specif icT DCx denotes a primitive class that represents a subset of the
target domain concept class :T DC and an entity from the domain to be clas-
sified. Every class :Specif icT DCx is described based on a one-to-many relationship to various classes :MiClassj from potentially different modules. As
a consequence of this one-to-many relationship, the classes :Specif icT DCx
could introduce the polyhierarchy scenarios in the ontology model that the
Normalisation ODP aims to manage.

3.2 Implementation
One of the main features of the Normalisation ODP is to enable a reasoner
to mantain the subsumption relations between a class :Specif icT DCx and the
various classes :MiClassjT DC involved in its description. This feature is accomplished encoding the conditions of the subsumption relation as restrictions
in the implementation of the classes :MiClassjT DC and :Specif icT DCx.
Definition 2. The implementation of a generic defined class :MiClassjT DC
is given as follows:
?

?

?
owl:Thing

|-- :M odulei

|-- :T argetDomainConcept (or :T DC)

|-- :MiClassj
|-- () :MiClassjT DC
|-- :Specif icT DCx

owl:topObjectProperty

|-- :hasM odulei

Fig. 2. Generic structure of the Normalisation ODP

:MiClassjT DC

rdf:type owl:Class ;
rdfs:subClassOf :T DC ;
owl:equivalentClass [ rdf:type owl:Restriction ;

owl:onProperty :hasM odulei ;
owl:someValuesFrom :MiClassj ] .

This implementation indicates that:
 A :MiClassjT DC class is equivalent to an anonymous class described by an

existential property restriction.

 The restriction is on the object property :hasM odulei associated to the

module :M odulei that subsumes the class :MiClassj.

 The filler of the restriction is the class :MiClassj linked to the definition of

:MiClassjT DC.

Definition 3. The implementation of a generic class :Specif icT DCx is given
as follows:

:Specif icT DCx

rdf:type owl:Class ;
rdfs:subClassOf :T DC ,

[ rdf:type owl:Restriction ;

owl:onProperty :hasM odulei ;
owl:someValuesFrom :MiClassj ] ,

[ ... rest of existential restrictions on :hasM odulei

for every class :MiClassj that participates
in the description of :Specif icT DCx ] .

This representation indicates the following:
 A class :Specif icT DCx is subsumed by a variable number of anonymous
classes. More specifically, one anonymous class for every class :MiClassj of
every module :M odulei that is linked to the description of :Specif icT DCx.
Every anonymous class is represented by an existential property restriction
such as:

B. Rodriguez-Castro, H. Glaser, and L. Carr
 The restriction is on the object property :hasM odulei, associated to the
module :M odulei that subsumes the class :MiClassj.
 The filler of the restriction is the class :MiClassj, linked to the description of :Specif icT DCx.

This implementation of the classes :MiClassjT DC and :Specif icT DCx respec-
tively, enable a reasoner to infer and maintain the subsumption relations between
a given class :Specif icT DCx and the various classes :MiClassjT DC that it is
related to.
Specific examples of the Normalisation ODP in the literature [6]( 4.3.2.1),
[7]( 6.5.1,  A.13) and online3 demonstrate the features of the pattern in specific
use case scenarios.

4 Alignment of a FCS to the Normalisation ODP

A comparative analysis between the main characteristics of a FCS and the Normalisation ODP presented in previous sections, indicates the existence of key
similarities between the elements in the generic structures of both conceptual
models.

One such key similarity lies in the notion of facet in FCSs and the notion of
module (or semantic axis) in the Normalisation ODP. Both elements represent
one perspective of the domain being modelled, a single characteristic of division,
a single criterion of classification in their respective paradigm.

Another key similarity is linked to the requirement for facets in a FCS to be
homogeneous and mutually exclusive and likewise the requirement of modules
in the Normalisation ODP to be comprised of primitive classes arranged in a
structure of disjoint homogeneous class trees.

These key similarities prompt us to identify a mapping between the elements
of both conceptual models that allows to transform a FCS into a normalised
ontology model. In this first approach, the mapping aims to keep the design
choices of the resultant normalised ontology as simple and straight-forward as
possible, without compromising any of the requirements and features of both
FCSs and the normalisation mechanism. This approach might not be suitable for
converting all possible schemas into a normalised ontology but it is an attempt to
provide an initial set of basic design guidelines. These guidelines can be extended
hereafter to support more complex cases of FCSs.

The main principle is to represent each facet as a independent module or semantic axis. Following this principle makes the application of the Normalisation
ODP almost straight-forward. Moreover, the resultant ontology includes the representation of the multiple alternative classification criteria that were considered
in the original FCS for the target domain concept.

Table 1 summarizes the alignment of the elements in the generic structure of
both conceptual models. This alignment enables the conversion from a FCS to
an OWL DL ontology by applying the Normalisation ODP.

 The first column (leftmost), contains the elements of a generic FCS as in-

troduced in Sect. 2.1, Def. 1.
?

?

?
Table 1. Alignment of a Faceted Classification Scheme to the Normalisation ODP

Library Science

Ontology Modeling

T DC

F aceti

FiT ermj

Itemx

Norm. ODP FCS in Norm. ODP OWL Implementation

:T DC
:F aceti
:hasF aceti
:FiT ermj

:M odulei
:hasM odulei
:MiClassj
:MiClassjT DC :FiT ermjT DC

:Specif icT DCx

owl:Class (primitive)
owl:Class (primitive)
owl:ObjectProperty
owl:Class (primitive)
owl:Class (defined) ()
owl:Class (primitive)

 The second column contains the elements of the Normalisation ODP generic

structure as introduced in Sect. 3.1, Fig. 2.

 The third column represents the selected OWL notation for the elements of
a generic FCS in the context of the Normalisation ODP generic structure.
 The forth column (rightmost), indicates the OWL implementation chosen
for every element. The selection complies with the requirements of the normalisation mechanism.

Based on the principle of representating each facet as a module, the underlying
ideas behind the mappings in Table 1 can be outlined as follows:

 The target domain concept T DC represents the domain of discourse of both
a FCS and the Normalisation ODP. The primitive class :T DC fulfills that
role in the normalised ontology.

 A facet F aceti from a generic FCS corresponds to a module :M odulei in the
Normalisation ODP, therefore it becomes a primitive class :F aceti in the
normalised ontology model.

 A facet F aceti from a FCS also becomes an object property :hasF aceti
in the normalised ontology, given that for every module :M odulei in the
Normalisation ODP, there is an object property :hasM odulei.

 From the relationship between facet and module, it follows that a facet term
FiT ermj from a FCS maps to a module subclass :MiClassj from the Normalisation ODP. Both elements represents the same notion in their respective
conceptual models. A subvidision, a refinement of the facet or module that
they complement respectively. Therefore, a facet term FiT ermj from a FCS
becomes a primitive class :FiT ermj in the normalised ontology.

 A facet term FiT ermj from a FCS also produces a defined class :FiT ermjT DC
in the normalised ontology, given that for every primitive class :MiClassj in the
Normalisation ODP, there is a corresponding defined class :MiClassjT DC.
 Every item Itemx to be classified in the FCS aligns to a class :Specif icxT DC
that is automatically classified by a reasoner in the Normalization ODP. There-
fore, every element Itemx is represented as a primitive class : Specif icT DCx
in the normalised ontology.

The rest of this section details the characteristics of the resultant normalised
ontology model that is obtained by applying the Normalisation ODP to a generic

B. Rodriguez-Castro, H. Glaser, and L. Carr

owl:Thing

|-- :F aceti

|-- :T argetDomainConcept (or :T DC)

|-- :FiT ermj
|-- () :FiT ermjT DC
|-- :Specif icT DCx

owl:topObjectProperty

|-- :hasF aceti

Fig. 3. Elements of a FCS placed into the Normalisation ODP generic structure

FCS. The application of the pattern is driven by the alignments summarized
in Table 1. The process is illustrated using the example of the Dishwashing
Detergent FCS presented in Sect. 2.1, Ex. 1.

4.1 Structure and Elements

Figure 3 depicts the placement of the elements of a generic FCS into the generic
structure of the Normalisation ODP based on the structure of the pattern in
Sect. 3.1, Fig. 2 and the corresponding mappings from Table 1.

Example 2. Now let us populate the generic ontology structure in Fig. 3 with
the specific elements of the Dishwashing Detergent FCS example. Figure 4
presents the overall normalised ontology class diagram obtained.

It is important to note that the structure in Fig. 4 includes axioms to comply
with the requirement already stated of the Normalization ODP. That is, the
skeleton of primitive classes consists of disjoint homogeneous tress where each
primitive class only has a primitive parent, and primitive sibling classes are
disjoint, creating the modules. This normalization requirement complies as well
with the FCS requirement of facets being homogeneous and mutually exclusive
based on the alignments in Table 1.

4.2 Implementation

Defined Classes. The generic implementation of a defined class :FiT ermjT DC
in terms of FCS elements is straight-forward based on the definition of
:MiClassjT DC given in Sect. 3.2, Def. 2 and Table 1.

Example 3. Let us illustrate the implementation of a defined class in the Dish-
washing Detergent FCS example. Consider the facet Agent which contains
the terms Person and Dishwasher. From Table 1, these FCS elements fit
into the normalised ontology as follows:

 :F aceti is populated with :Agent.
?

?

?
owl:Thing

|-- :Agent

|-- :Person
|-- :Dishwasher

|-- :Form

|-- :Gel
|-- :Gelpac
|-- (... rest of terms in the facet "Form")

|-- :BrandName
|-- :Cascade
|-- :Electrasol
|-- (... rest of terms in the facet "Brand Name")

|-- :Scent

|-- :GreenApple
|-- :GreenTea
|-- (... rest of terms in the facet "Scent")

|-- :EffectOnAgent

|-- :AromaTherapy

|-- :Invigorating
|-- :Relaxing

|-- :SpecialProperty
|-- :Antibacterial

|-- :DishwashingDetergent (:TDC)

|-- () :ManualDishDetergent
|-- () :DishwasherDishDetergent
|-- () :GelDishDetergent
|-- () :GelpacDishDetergent
|-- () (... rest of subclasses for each term in the facet "Form")
|-- () :CascaseDishDetergent
|-- () :ElectrasolDishDetergent
|-- () (... rest of subclasses for each term in the facet "Brand Name")
|-- () :GreenAppleDishDetergent
|-- () :GreenTeaDishDetergent
|-- () (... rest of subclasses for each term in the facet "Scent")
|-- () :AromaTherapyDishDetergent
|-- () :InvigoratingDishDetergent
|-- () :RelaxingDishDetergent
|-- () :AntibacterialDishDetergent

|-- :PresidentsPersonLiquidAntibacterial
|-- :PalmoliveAromaTherapyLavenderYlangYlang
|-- :SpecificDishDetergent3
|-- (... rest of specific dish detergent classes :Specif icDishDetergentx to classify)

owl:topObjectProperty

|-- :hasAgent
|-- :hasForm
|-- :hasBrand
|-- :hasScent
|-- :hasEffectOnAgent
|-- :hasSpecialProperty

Fig. 4. Normalised ontology structure of the Dishwashing Detergent FCS

 :hasF aceti is populated with :hasAgent.
 :FiT ermj is populated with :Person and :Dishwasher respectively.
 :FiT ermjT DC is populated with :ManualDishDetergent and :Dishwash-

erDishDetergent respectively.

As an example, let us focus on the class :DishwasherDishDetergent. The implementation in the normalised ontology can be stated as follows:

B. Rodriguez-Castro, H. Glaser, and L. Carr

:DishwasherDishDetergent
rdf:type owl:Class ;
rdfs:subClassOf :DishDetergent .
owl:equivalentClass [ rdf:type owl:Restriction ;
owl:onProperty :hasAgent ;
owl:someValuesFrom :Dishwasher ] .

The implementation of the rest defined classes in the Dishwashing Detergent
FCS shown in Fig. 4 follows the same rationale.

Classification Classes. The generic implementation of a class :Specif icT DCx
in terms of FCS elements is straight-forward following the implementation of
:Specif icT DCx given in Sect. 3.2, Def. 3 and Table 1.
Example 4. To illustrate the representation of a specific dishwashing detergent,
let us reuse one of the classification examples presented in [8]( 2.4). The item
Presidents Choice Antibacterial Hand Soap and Dishwashing Liquid is classified in the cited reference, as follows: (Agent: person), (Form: liquid), (Brand
Name: Presidents Choice), (Scent: none), (Effect on Agent: none) and (Special
Property: antibacterial). From Table 1, the description of the example detergent
reveals the following mappings:

 :T DC is populated by :DishDetergent.
 :Specif icT DCx is populated by :PresidentsPersonLiquidAntibacterial.
 There are four existential restrictions. One per facet term involved in the
description of the specific detergent at hand (person, liquid, Presidents
Choice, and antibacterial). Therefore, for each restriction:
 :hasF aceti is populated with :hasAgent, :hasForm, :hasBrandName and
:hasSpecialProperty respectively.
 :FiT ermj is populated with :Person, :Liquid, :PresidentsChoice and :An-
tibacterial respectively.

The implementation of this particular detergent in the normalised ontology can
be stated as follows:

:PresidentsPersonLiquidAntibacterial

rdf:type owl:Class ;
rdfs:subClassOf :DishDetergent ,

[ rdf:type owl:Restriction ;
owl:onProperty :hasAgent ;
owl:someValuesFrom :Person ] ,

[ rdf:type owl:Restriction ;

owl:onProperty :hasForm ;
owl:someValuesFrom :Liquid ] ,

[ rdf:type owl:Restriction ;

owl:onProperty :hasBrandName ;
owl:someValuesFrom :PresidentsChoice ] ,

[ rdf:type owl:Restriction ;

owl:onProperty :hasSpecialProperty ;
owl:someValuesFrom :Antibacterial ] .
?

?

?
This description makes explicit the relationship between the specific detergent class
and every term of every facet that participate in the facet classification of the item.
Moreover, it enables a reasoner to infer that :PresidentsPersonLiquidAntibacterial
is a subclass of the defined classes :ManualDishDetergent, :LiquidDishDetergent,
:PresidentsChoiceDishDetergent and :AntibacterialDishDetergent.

A version of the complete normalised ontology model for the Dishwashing

Detergent FCS example is available online4 in RDF/XML format.

5 Relation to Other Methods

Previous work that defines mappings between different semantic models include
[12]. The authors performs a rigorous and comprehensive comparative analysis
between the primitive elements of three semantic models: the Semantic Web
Ontology Language (OWL), the Relational Database Model (RDBM), and the
Resource Space Model (RSM). Based on the identified mappings between every
two models, a detailed set of criteria is provided to transform one of them to the
other. The most relevant to us is the mapping between RSM and OWL because
of its similarities with the conversion between a FCS and OWL that we propose
here.

The RSM is defined as a semantic model for specifying, organizing and retrieving diverse multimedia resources by classifying their contents according to
different partition methods and organizing them according to a multidimensional
classification space. A FCS is also a multidimensional classification space and
comparing the primitive elements of a FCS and a RSM the following mapping
is instantly revealed:

 The domain or universe of discourse of the FCS (the target domain concept)

corresponds to the overall resource space, the RS element in the RSM.

 A facet in the FCS corresponds to an axis Xi in the RSM.
 A facet term in the FCS corresponds to a coordinate Ci in the RSM.
 A facet is covered and exhausted by the set of terms associated to it in a FCS.
The same principle holds in a RSM for an axis and the set of coordinates
associated to it, Xi = Ci1, Ci2, ..., Cin.

 An item to be classified by the FCS corresponds to a point p in the RSM.

These mappings show that a generic FCS can be converted into a RSM, which
in turn can be converted into an OWL model using the RSM to OWL mappings
in [12]. Now there are two possible paths to convert a FCS into an OWL model.

 Path 1: FCS to RSM via mappings above and RSM to OWL via mappings

in [12]. Let us refer to this OWL model as O1.

 Path 2: FCS to OWL via mappings presented in our paper using the Nor-

malization ODP. Let us refer to this OWL model as O2.

http://purl.org/net/project/enakting/ontology/detergent_fcs_norm

B. Rodriguez-Castro, H. Glaser, and L. Carr

There are important differences between the ontologies O1 and O2. An important
difference is due to the RSM to OWL conversion in [12]. RSM describes mainly
classification semantics and as the authors explain, this means that there is no
semantic loss when converting from RSM to OWL but there might be semantic
loss when transforming an OWL model that includes richer semantics into a
RSM. This also means that, in terms of W3C standards, the expressivity level
of the resultant OWL model O1, will be within the RDF Schema or OWL Lite
boundary.

On the other hand, the ontology O2 is within OWL DL and presents richer
OWL semantics than O1, provided by the Normalization ODP. These additional
OWL DL semantics in O2 enable one of the main features of the normalization
pattern such as the automatic classification and maintenance of complex subsumption relations by a reasoner. So while O1 is a valid OWL description of
the FCS that it is based on, O2 using our proposed method provides additional
semantics at the OWL DL level that support a richer description and additional
features of the classification criteria considered in the initial FCS.

Additional research that made use of facet analysis in Library and Information Science to build computational ontologies includes [13]. Giunchiglia et
al. introduces the concept of Faceted Lightweight Classification Ontology as a
lightweight (classification) ontology where each term and corresponding concept
occurring in its node labels must correspond to a term and corresponding concept
in the background knowledge, modeled as a faceted classification scheme.

Similarities to our approach include:

 The use of a FCS to model certain background knowledge and to derive and

 Each concept in the ontology model obtained in our method also corresponds

ontology based on it.

to a concept in the FCS.

There are important differences where our approach deviates from that in [13]
probably due to the different type of problems that both are trying to address
respectively. Giunchiglia et al. are trying to counteract the lack of interest and
difficulties on the user side to build and reuse ontologies while our concern focuses
on identifying explicit guidelines to represent the notion of multiple classification
criteria in domain concepts. Additional differences include:

 The expressive level for the resultant ontology model in our method is OWL
DL. In contrast, [13] focuses on lightweight classification ontologies which
expressive level would loosely correspond to no more than RDF Schema in
terms of W3C Standards. Key features provided by the Normalisation ODP
found in our method, can not be implemented using solely RDF Schema
semantics.

 The type of FCS used in [13] is based on a Universal Faceted Classification
System. On the other hand, we have focused on simpler custom domainspecific FCSs to serve as an starting point for our initial proof of concept.
This helped limiting the complexity of the classification criteria to consider
and represent in the corresponding ontology.
?

?

?
6 Conclusions

This paper has presented an initial set of basic design guidelines to develop an
ontology model within OWL DL that supports the representation of multiple
alternative classification criteria of a specific domain concept.

A lack of explicit guidance in the ontology development literature on how to
address this recurrent modeling scenario, leaves ample room for ad-hoc practices that can lead to unexpected or undesired results in ontology artifacts. In
our attempt to mitigate this void, we examined a simplified procedure to develop
a Faceted Classification Scheme (FCS) which contains the conceptualization of
various classification criteria (facets) of a specific target domain concept. A series of mappings between the elements of a generic FCS and the Normalization
Ontology Design Pattern (ODP) have been identified that allow us to convert a
given FCS into an OWL DL ontology model following a consistent and systematic approach. The resultant ontology model includes the representation of the
various classification criteria of the domain concept considered in the original
FCS. An existing FCS example in the domain of Dishwashing Detergent is
used to illustrate the main steps of our conversion procedure.

The guidelines presented in this first effort consider explicitly the conceptualization of existing classification criteria in the context of ontology modeling
for the Semantic Web and provide a partial solution to the problem scenario de-
scribed. They do not cover all existing types of generic structures of FCSs (which
can be the aim of future work) and they do not eliminate all opportunities of
potentially hazardous ad-hoc decisions in the development process. However, we
believe the use of a consistent, systematic and fit-for-purpose approach allows
to significantly reduced them.

Acknowledgments. This work was supported in part by the UK Engineering and Physical Sciences Research Council (EPSRC), in the context of the
EnAKTing project under grant number EP/G008493/1. Additionally, many
people have contributed directly and indirectly to this work and we thank
them all. In particular, everyone that participated in the online discussion The
notion of a classification criterion as a class5,6 via the mailing lists: ontolog-
forum@ontolog.cim3.net and public-owl-dev@w3c.org; and the British Chapter of the International Society for Knowledge Organization (ISKO).
