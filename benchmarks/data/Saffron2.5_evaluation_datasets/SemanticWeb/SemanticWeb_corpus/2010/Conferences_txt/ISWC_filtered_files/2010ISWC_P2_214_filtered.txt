 

Mapping Master: A Flexible Approach for Mapping 

Spreadsheets to OWL 

Martin J. OConnor1, Christian Halaschek-Wiener2, and Mark A. Musen1 

1 Stanford Center for Biomedical Informatics Research 

Stanford, CA 94305, USA 
2 Clados Management, LLC 
San Mateo, CA 94401, USA 

Abstract.  We  describe  a  mapping  language  for  converting  data  contained  in 
spreadsheets  into  the  Web  Ontology  Language  (OWL).  The  developed  lan-
guage,  called  M2,  overcomes  shortcomings  with  existing  mapping  techniques, 
including  their  restriction  to  well-formed  spreadsheets  reminiscent  of  a  single 
relational database table and verbose syntax for expressing mapping rules when 
transforming  spreadsheet  contents  into  OWL.  The  M2  language  provides  ex-
pressive,  yet  concise  mechanisms  to  create  both  individual  and  class  axioms 
when generating OWL ontologies. We additionally present an implementation 
of the mapping approach, Mapping Master, which is available as a plug-in for 
the Protege ontology editor.  

1   Introduction 

One of the hurdles that new and existing users of Semantic Web standards continue to 
face  is  converting  preexisting,  non-Semantic  Web  encoded  information  into  one  of 
the many Semantic Web languages (e.g., RDF, OWL). In some domains, a large deal 
of this information is represented in spreadsheets (e.g., financial services), which has 
motivated  both  academia  [1]  and  industry  [2,  8]  to  develop  a  variety  of  generalpurpose  spreadsheet  mapping  techniques  to  avoid  manually  encoding  spreadsheet 
content in OWL or writing custom extraction programs. 

Existing mapping approaches, however, suffer from a variety of limitations. First, 
many  mapping techniques assume  very simple data  models  within spreadsheets [3]. 
Typically, it is assumed that each table in a spreadsheet adheres to a relational model 
where each row in the table describes a different entity and each column describes an 
attribute for that entity; we refer to this as the entity-per-row assumption.  Unfortu-
nately, there are numerous real-world spreadsheets that do not adhere to this simple 
data  model,  as  many  spreadsheet-authoring  tools  are  extremely  flexible  and  do  not 
restrict  the  manner  in  which  users  author  tabular  structures.  Common  examples  of 
complex layouts can be found in the  financial domain. Here, analysts or companies 
publish sales forecasts or results, which are typically represented by tables that have 
products or market segments listed in a column, quarters or years listed in a row, and 
sales figures specified for each product/market segment and date. An example of this 
type of spreadsheet is illustrated in Figure 1.  

P.F. Patel-Schneider et al.(Eds.): ISWC 2010, Part II, LNCS 6497, pp. 194208, 2010. 
 Springer-Verlag Berlin Heidelberg 2010 
?

?

?
Fig. 1. Drugs, their primary use, and their sales for a number of years1 

 

Recently,  there  have  been  efforts  to  overcome  the  entity-per-row  limitation  and  to 
support mappings for arbitrary spreadsheets [1]. However, to the best of our knowl-
edge, these approaches use an RDF triples-based approach to encode mapping rules. 
They can be effective when mapping spreadsheet content to RDF, but are very cumbersome  when  encoding  content  in  OWL  due  to  its  verbose  RDF  serialization.  To 
illustrate, lets assume a financial analyst wants to model the information in Figure 1 
in OWL. First, assume the analyst models each drug as a class that has OWL property 
restrictions  for  the  drugs  treated  disease  type  and  primary  indication.2  Using  this 
representation,  the  drug  Zyvox  could  be  modeled  as  follows  (presented  using  the 
Manchester Syntax [4]): 

Class: Zyvox SubClassOf: Drug and treatsDisease some 

Infectious and respiratory diseases and 
forIndication some Bacterial infections 

 (Ex. 1) 

Next,  assume  the  analyst  models  each  sales  figure  as  an  OWL  class  that  has  OWL 
property restrictions for the drug, date, and actual amount. Thus, the cell C5 could be 
modeled using a new OWL class, sales1, as follows: 

Class: sales1 SubClassOf: SalesAmount and forDrug some Zyvox and 

forDate has 2008 and amount has 1,115 

 (Ex. 2) 

To encode the OWL class axioms in Ex. 1 & 2 in RDF, dozens of triples are required 
the  RDF  serializations  for  owl:intersectionOf,  owl:hasValue  and 
because 
owl:someValuesFrom  require  multiple  triples.  Therefore,  using  currently  available 
mapping techniques, even simple mapping rules can be extremely verbose. 

To overcome these limitations,  we propose a new declarative OWL-centric  mapping  language  that  supports  arbitrary  spreadsheet-to-OWL  mappings.  The  language 
also supports syntactic transformations of cell contents, as well as inline OWL axioms 
involving classes, properties and individuals extracted from cell contents. In the end, 
the  mapping  language  enables  mapping  information  from  complex  spreadsheets  to 
OWL using a compact, user-friendly syntax. 
                                                           
1 Source: Pfizer 2008 Financial Report: 
http://media.pfizer.com/files/annualreport/2008/financial/ 
financial2008.pdf 

2 A philosophical discussion regarding whether this information should be modeled as classes 
or individuals is out of the scope of this paper.  However, a class-based representation is consistent with modeling conventions used in widely accepted biomedical ontologies. 

M.J. OConnor, C. Halaschek-Wiener, and M.A. Musen 

2   Related Work  

A variety of systems have been developed to map spreadsheet content to RDF. The 
earliest approach include Excel2RDF [6] and Convert2RDF [7]. Both systems provide 
basic  mapping  languages  to  support  mappings  from  entity-per-row  spreadsheets  to 
RDF. The later  RDF123 approach [3] has a  mapping  language that allows complex 
mapping conditions that support less restricted spreadsheet data models but the language still fundamentally assumes entity-per-row storage. The recent XLWrap mapping approach [1] attempts to address this shortcoming. It allows data to be organized 
in essentially arbitrary ways and provides an expressive mapping language for generating RDF content. However, the resulting mapping language is rather verbose. Other 
spreadsheet  mapping  systems 
include  MITs  Simile  project  and  Cambridge  
Semantics Anzo for Excel [8], though these systems are primarily based on metadata. 
Some systems use an XSLT-based approach to map automatically-generated XML 
representations of spreadsheets to RDF. However, these approaches can be very cumbersome  and  are  generally  useful  for  only  a  small  range  of  simple  mappings.  A  
related,  higher  level  approach  is  to  use  importation  tools  to  generate  OWL  or  RDF 
tabular representations of spreadsheet data and to then map these tabular representations to domain ontologies using rule or scripting languages. For example, TopBraid 
Composers SPARQLMotion [2] provides a range of scripting modules for generating 
RDF from tabular data imported from spreadsheets. The authors have used a similar 
approach  with  a  data  importation  tool  called  DataMaster  [9]  that  uses  SWRL  [10] 
rules  to  map  spreadsheet  data  to  domain-level  constructs.  While  these  approaches 
provide great flexibility, a multitude of rules or mapping scripts can quickly accumu-
late, which can be difficult to manage and debug. 

A general  shortcoming of existing  mapping systems is that they are RDF-centric 
and are not designed to directly  work  with OWL. The only exception known to the 
authors  is  ExcelImport  [11].  However,  this  tool  assumes  simple-entity-per  row 
spreadsheets  and  provides  only  a  small  set  of  OWL  constructs  that  are  specified 
graphically. It additionally does not support a mapping language. 

It is lastly noted that techniques have also been developed for mapping information 
stored  in  relational  database  management  systems  to  RDF  and  OWL  [13].  While 
possibly applicable to simple spreadsheets adhering to the entity-per-row assumption, 
such  techniques  are  not  suited  for  mapping  semi-structured  tables  such  as  that  
presented in Figure 1.  

3   Mapping Language 

The primary goal of this work is to address the limitations of existing mapping tools 
by  developing  a  new  declarative  OWL-centric  mapping  language.  Importantly,  this 
domain-specific  language  (DSL)  should  support  complex  spreadsheets  that  do  not 
conform to the entity-per-row assumption. To ensure the mapping approach is compatible  with  the  workflow  familiar  to  users  of  spreadsheet  tools,  the  language  must 
also allow mappings of data spread over multiple sheets. A related requirement is that 

 
?

?

?
it should support mapping of data that may be distributed non-uniformly in individual 
sheets;  for  example,  multiple  disconnected  tables  in  a  sheet  representing  the  same 
underlying information. Additionally, it should allow the selective extraction of data 
from within cells. 

Full  coverage  of  all  OWL  constructs  is  also  a  primary  goal  of  the  mapping  lan-
guage. In addition to supporting the definition of simple OWL entities such as named 
classes, properties, and individuals, class expressions and potentially complex necessary  and  sufficient  declarations  should  be  expressible.  While  an  RDF  triple-based 
mapping  mechanism  can  in  principle  generate  arbitrary  OWL  constructs,  such  an 
approach is not always practical because of OWLs complex RDF serialization. This 
approach would also conflict with the goal of producing a concise language. 

Additionally, the language should not only be concise but also simple to learn for 
users familiar with both OWL and spreadsheet tools. A general usability issue when 
developing a custom language is providing debugging support for that language. The 
typical  levels  of  complexity  when  mapping  from  spreadsheets  to  OWL  makes  this 
support crucial. In particular, the ability to preview the final result of a mapping expression before executing it can greatly assist in debugging.  An  important language 
design goal is thus to support instantaneous preview of  mapping results before they 
are  executed  and  to  allow  those  previews  to  be  updated  dynamically  when  the  
underlying data are changed. 

3.1   Core M2 Language 

Rather than designing a DSL from scratch, the proposed language is built  upon the 
Manchester Syntax [4], a widely used DSL for declaratively describing OWL ontolo-
gies. As illustrated in Ex. 1 & 2, this DSL has concise clauses for defining common 
OWL entities. It also provides full coverage of all OWL constructs and is familiar to 
most users of OWL since it is the standard presentation syntax  used by the Protege 
ontology editing tools [14, 15]. It has a very clean language definition, allowing it to 
be extended in a principled way. The DSL that we have definedcalled M2, or Mapping Masteris a superset of the Manchester Syntax, so any valid Manchester Syntax 
expression is also a valid M2 expression. In the remainder of this section we provide 
an overview of the M2 language. We refer the interested reader to the M2 wiki [5] for 
a full description of the language. Additionally, its BNF is available at [17].  

M2  Reference  Clause.  M2  extends  the  Manchester  Syntax  to  allow  references  to 
spreadsheet  content  in  expressions.  It  introduces  a  new  reference  clause  to  support 
these references (see Figure 2). This clause indicates one or more cells in spreadsheet. 
In  the  DSL,  any  clause  in  a  Manchester  Syntax  expression  that  indicates  an  OWL 
class,  OWL  property,  OWL  individual,  data  type,  or  data  value  can  be  substituted 
with this reference clause. 

References  clauses  are  prefixed  with  the  character  @  and  are  followed  by  an  
Excel-style cell reference. In the standard Excel cell notation, cells extend from A1 in 
the top left corner of a sheet within a spreadsheet to successively higher columns and  
 

 
