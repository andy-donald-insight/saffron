Hey! Ho! Lets Go!

Explanatory Music Recommendations with

dbrec

Alexandre Passant and Stefan Decker

Digital Enterprise Research Institute,
National University of Ireland, Galway

firstname.lastname@deri.org

Abstract. In this demo paper, we present dbrec (http://dbrec.net),
a music recommendation system using Linked Data, where recommendation are computed from DBpedia using an algorithm for Linked Data
Semantic Distance (LDSD). We describe how the system can be used to
get recommendations for approximately 40,000 artists and bands, and in
particular how it provides explanatory recommendations to the end-user.
In addition, we discuss the research background of dbrec, including the
LDSD algorithm and its related ontology.

1 Research Background

1.1 Measuring Semantic Distance on Linked Data
The underlying research question behind dbrec is to understand how to define
semantic distance [4] measures for resources that follow the Linked Data principles [1]. In order to define such measures, we first defined a theoretical model
for Linked Data datasets, as follows.
Definition 1. A dataset following the Linked Data principles is a graph G such
as G = (R, L, I) in which R = {r1, r2, ..., rn} is a set of resources  identified by
their URI , L = {l1, l2, ..., ln} is a set of typed links  identified by their URI
 and I = {i1, i2, ..., in} is a set of instances of these links between resources,
such as ii = lj, ra, rb.
In addition, we defined different functions that identify if and how two resources
(represented by their URI, and following the Linked Data principles) are connected in such graphs.
Definition 2. Cd is a function that computes the number of direct and distinct links between resources in a graph G. Cd(li, ra, rb) equals 1 if there is an
instance of li from resource ra to resource rb, 0 if not. By extension Cd can be
used to compute (1) the total number of direct and distinct links from ra to rb
(Cd(n, ra, rb)) as well as (2) the total number of distinct instances of the link li
from ra to any node (Cd(li, ra, n)).
 The work presented in this paper has been funded in part by Science Foundation

Ireland under Grant No. SFI/08/CE/I1380 (L on-2).

L. Aroyo et al. (Eds.): ESWC 2010, Part II, LNCS 6089, pp. 411415, 2010.
c Springer-Verlag Berlin Heidelberg 2010

A. Passant and S. Decker

Definition 3. Cio and Cii are functions that compute the number of
indirect
and distinct links, both outcoming and incoming, between resources in a graph
G. Cio(li, ra, rb) equals 1 if there is a resource n that satisfy both li, ra, n and
li, rb, n, 0 if not. Cii(li, ra, rb) equals 1 if there is a resource n that satisfy
both li, n, ra and li, n, rb, 0 if not. By extension Cio and Cii can be used to
compute (1) the total number of indirect and distinct links between ra and rb
(Cio(n, ra, rb) and Cii(n, ra, rb), respectively outcoming and incoming) as well as
(2) the total number of resources n linked indirectly to ra via li (Cio(li, ra, n)
and Cii(li, ra, n), respectively outcoming and incoming)
Based on these definitions, we defined different formula for computing Linked
Data Semantic Distance 1 [3], i.e. the distance that exists between two resources
within a Linked Data dataset2. These formula were defined using different crite-
ria, using both direct and indirect relationships (Cd, Cio, Cii), as well as using
weights to give more importance to the links that are used only a few times in
the dataset. Based on these different measures and user interviews, we decided
to concentrate on a particular one, that we will simply name LDSD, and that
uses both direct and indirect links as well as the aforementioned weights. This
measure is defined as follows (Fig. 1).
?

?

?
1 +

Cd(li,ra,rb)

1+log(Cd(li,ra,n))

i

+
?

?

?
Cd(li,rb,ra)

1+log(Cd(li,rb,n))

i

+
?

?

?
Cii(li,ra,rb)

1+log(Cii(li,ra,n))

i

+
?

?

?
LDSD(ra, rb) =

Cio(li,ra,rb)

1+log(Cio(li,ra,n))

i

Fig. 1. The LDSD measure

1.2 The LDSD Ontology
Moreover, in order to represent the distances computed using the aforementioned
LDSD measure in a machine-readable way (so that they can be queried and
reused by third-party applications), we designed a related ontology, available
at http://dbrec.net/ldsd/ns. This ontology has two main goals. On the one
hand, it aims at modelling the distance between resources, so that they can
be queried using SPARQL (and in some cases with its FILTER clause to limit
resources to the ones at a particular distance from the seed one). On the other
hand, its goal is to store some information about the way the distance has
been computed, so that these distances can be explained, as we shall see in the
upcoming section.

Using this ontology, the fact that Elvis Presley is at a distance of 0.09 from
Johnny Cash, and that such distance can be explained because (among other)
both share the value http://dbpedia.org/class/yago/SunRecordsArtists
for their rdf:type property, which is shared by only 19 artists in the original
dataset, can be represented as follows (Table 1).
1 Note that we use the term distance while some of these measures are not symmetric.
2 We shall note that theoretically, nothing prevents this dataset to be distributed as

e.g. the Linking Open Data cloud.
?

?

?
Table 1. Excerpt of the distance explanation between Johnny Cash and Elvis Presley,
using the LDSD ontology

@prefix ldsd : < http :// dbrec . net / ldsd / ns # > .
< http :// dbrec . net / distance /774 a32aa - dede -11 de -84 a3

-0011251 e3563 > a ldsd : Distance ;
ldsd : from < http :// dbpedia . org / resource / Johnny_Cash > ;
ldsd : to < http :// dbpedia . org / resource / Elvis_Presley > ;
ldsd : value "0.09778745 34 5 44 " .

< http :// dbrec . net / distance /774 a32aa - dede -11 de -84 a3

-0011251 e3563 > ldsd : explain [

a ldsd : IndirectOut ;
ldsd : property < http :// www . w3 . org /1999/02/22 - rdf - syntax -

ns # type > ;

ldsd : node < http :// dbpedia . org / class / yago /

SunRecordsArtists > ;

ldsd : total "19"

] .

In addition, the LDSD ontology features mappings with the MuSim ontology3
[2]. Additional mappings with SCOVO4  the Statistical COre VOcabulary 
might be provided in the future (since the number of instance sharing a particular
link can be considered as statistical data).

2 dbrec: Music Recommendations Using LDSD

Based on the previous findings, we implemented dbrec  http://dbrec.net
, a system that demonstrates how LDSD can be used in the realm of recommender systems. In particular, dbrec has been build by computing LDSD for all
artists and bands referenced in DBpedia. While it does not involve cross-datasets

(2) Dataset reducing

(1) Dataset 
identification

(3) LDSD 
computation

(4) User 
interface

RDF Data

RDF Data

Fig. 2. Architecture of the dbrec framework

http://grasstunes.net/ontology/musim/musim.html
http://sw.joanneum.at/scovo/schema.html

A. Passant and S. Decker

Fig. 3. Recommendations and explanations in dbrec

recommendations, it offers two major advantages: (i) there are more than 39,000
artists available in DBpedia for which recommendations can be build, and (ii) DBpedia also provides pictures and descriptions for most of them, that can be used
when building the related user interface, as we will see in the next section.
The system was implemented using the following steps (Fig. 2): (1) identify
the relevant dataset from DBpedia; (2) reduce the dataset for query optimi-
sation; (3) compute the distances using the LDSD algorithm and represent
the results using the LDSD ontology; (4) build a user interface for browsing
recommendations.

3 Purpose of the Demonstration

The purpose of the demonstration is to give a comprehensive overview of the
dbrec system in use.

First, attendees will be able to check recommendations for the artists and
bands of their choice. The search interface of dbrec provides auto-completion
capabilities so that users simply start typing the name of a band, and the system
suggests names for which recommendations are available in the system. Once
validated, users have access to a live view of the recommendations, built using
SPARQL queries applied to the RDF data resulting from the LDSD algorithm
(this data being modelled with the aforementioned LDSD ontology). As we
previously mentioned, dbrec relies on DBpedia to provide picture and description
?

?

?
of each artist and band, hence enhancing the user experience when browsing
recommendations. It also displays related YouTube videos about the main artist
and provide links to share the recommendation on various Web 2.0 services such
as Twitter and Facebook.

In addition, attendees will experience the explanation feature provided by
dbrec, so that they can learn why the recommendations have been made. Indeed,
when browsing recommendations, a pop-up providing such explanations can be
displayed for each recommended artist or band. The explanations are provided
using the information recorded about each measure, using the LDSD ontology
as we previously detailed. By using this feature, attendees will discover why
dbrec recommends X if they are looking for information about Y .

The following figure (Fig. 3) displays the recommendation page for the Ra-
mones, as well as a pop-up explaining why the Voidoids are recommended in
that case5.

In addition, we will show how these recommendations, by being available as
Linked Data (via RDFa markup within the pages) can be browsed independently,
and how they could be combined with other data for navigation and querying
purposes.
