PossDL  A Possibilistic DL Reasoner for Uncertainty

Reasoning and Inconsistency Handling

Guilin Qi1, Qiu Ji1, Jeff Z. Pan2, and Jianfeng Du3

1 School of Computer Science and Engineering, Southeast University, Nanjing 210096

2 Institute AIFB, University of Karlsruhe, Karlsruhe, Germany

3 Department of Computing Science, University of Aberdeen, Aberdeen, UK

4 Guangdong University of Foreign Studies, Guangzhou 510006, China

Abstract. Uncertainty reasoning and inconsistency handling are two important
problems that often occur in the applications of the Semantic Web. Possibilistic
description logics provide a flexible framework for representing and reasoning
with ontologies where uncertain and/or inconsistent information exists. Based
on our previous work, we develop a possibilistic description logic reasoner. Our
demo will illustrate functionalities of our reasoner for various reasoning tasks that
possibilistic description logics can provide.

1 Introduction

Uncertainty reasoning and inconsistency handling are two important problems that often occur in the applications of the Semantic Web, such as the areas like medicine and
biology [4]. Recently, there is an increasing interest to extend Web Ontology Language
OWL to represent uncertain knowledge. Most of the work is based on Description Logics (DL) that provide important formalisms for representing and reasoning with ontolo-
gies. A DL knowledge base is then extended by attaching each axiom in it with a degree
of belief. The degree of belief can have several meanings depending on the semantics
of the logic. For example, in probabilistic description logics, the degree of belief can
be explained as degree of overlap between two concepts and in possibilistic description logics [4], the degree of belief is explained as the necessity degree or certainty
degree (see [7]). Inconsistency handling in DL is another problem that has attracted a
lot of attention. Inconsistency can occur due to several reasons, such as modeling errors,
migration or merging ontologies, and ontology evolution. When an ontology is incon-
sistent, an ontology language which has first-order features, such as a description logic,
cannot be applied to infer non-trivial conclusions.
Example 1. Given an ontology B consisting of the following terminological axioms
attached with confidence degrees:

Let us consider a medical ontology modified from an example given in [4].

ax1 : (Heartpatient  HighBloodP ressure, 1)
ax2 : (P acemakerP atient  HighBloodP ressure, 1)
ax3 : (HeartP atient  M aleP acemakerP atient, 0.4)
ax4 : (HeartP atient  HasHealthInsurance.P rivateHealth, 0.9)
ax5 : (P acemakerP atient(T om), 0.8).

L. Aroyo et al. (Eds.): ESWC 2010, Part II, LNCS 6089, pp. 416420, 2010.
c Springer-Verlag Berlin Heidelberg 2010
?

?

?
Suppose we use possibilistic logic, then ax1 means that it is absolute certain that heart
patients suffers from high blood pressure, ax2 can be explained similarly, ax3 says
that it is a little certain that heart patient are male pacemaker patient, ax4 says it is
highly certain that heart patients have a private insurance, and finally ax5 states that it
is quite certain that Tom is a pacemaker patient. Suppose we learn that Tom is a heart
patient with degree 0.5 (ax6: (HeartP atient(T om),0.5)), i.e., it is somewhat certain
that Tom is a heart patient, and we add this axiom to the ontology, then the ontology will
become inconsistent. From this updated ontology, we may want to query if Tom suffers
from high blood pressure and to ask to what degree we can infer this conclusion?

Possibilistic description logics, first proposed by Hollunder in [2] and further developed
by Qi and Pan in [7], are extensions of description logics with possibilistic semantics. It
is well-known that possibilistic logic is a powerful logical framework for dealing with
uncertainty and handling inconsistency. Possibilistic description logics inherit these two
nice properties and have very promising applications in the Semantic Web. A possibilistic DL knowledge base consists of a set of weighted axioms of the form (, ), where
 is a DL axiom such as an assertional axiom of the form C(a) and  is an element
of the semi-open real interval (0,1] or of a finite total ordered scale. A weighted axiom
(, ) encodes the constraint N()  , where N is a necessity measure [1], with the
intended meaning that the necessity degree of  is at least .

In our previous work [7], we have provided syntax and semantics of possibilistic description logics and defined several inference services. We have also provided
algorithms for implementing these inference services. Based on these algorithms, in
this work, we develop a possibilistic description logic reasoner by using OWL API
3.0.0.v1310 and Pellet v2.0.01. Our demo will illustrate functionalities of our reasoner for various reasoning tasks that possibilistic description logics can provide.

2 The PossDL Reasoner

2.1 Possibilistic Description Logics

We introduce the syntax of possibilistic DLs and some reasoning tasks, and refer to [7]
for the semantics of possibilistic DLs. A possibilistic axiom is a pair (, ) consisting of an axiom  and a weight (0, 1] denoting the confidence degree of , which
will be interpreted as the necessity degree of . A possibilistic TBox (resp., ABox) is
a finite set of possibilistic axioms (, ), where  is an TBox (resp., ABox) axoim. A
possibilistic DL knowledge base B = (T ,A) consists of a possibilistic TBox T and a
possibilistic ABox A. Let B = {i|(i, i)  B, i  }. An important reasoning
task in possibilistic DLs is to compute the inconsistency degree of a possibilistic DL
knowledge base B, denoted by Inc(B), which is defined as Inc(B) = max{i| B is
inconsistent}. Consider Example 1, suppose B = {ax1, ..., ax6}, then Inc(B) = 0.5.

There are three inference services in possibilistic DLs.
 A DL axiom  is a plausible consequence of a possibilistic DL knowledge base B,
written B |=P  if B>Inc(B) |= .

1 http://clarkparsia.com/pellet/
?

?

?
 A DL axiom  is a possibilistic consequence of B to degree , written B |= , if
the following conditions hold: (1) B is consistent, (2) B |= , (3) for all >,
B|=.
 A possibilistic DL axiom (, ) is a consequence from B, written B |= (C(a), ),
if  > Inc(B) and B |= .

Note that the possibilistic consequence relation |= is different from the consequence
relation |= because the former is to check to what degree an assertion holds whilst the
latter is to check if a possibilistic assertion holds. Consider Example 1 again, we have
B |=P HighBloodP ressure(T om), B |= (HighBloodP ressure(T om), 0.8),
and B |= (Heartpatient  HighBloodP ressure, 1). However, HeartP atient 
M aleP acemakerP atient cannot be inferred from B by possibilistic inference due
to the notorious drowning effect, i.e., all axioms whose degrees are less than or equal
to Inc(B) are blocked to be used in the inference. Therefore, we also implement a
drowning-free variant of possibilistic inference, called linear order inference. Let B =
{(i, i) : i = 1, ..., n} be a possibilistic DL knowledge base. Suppose j (j = 1, ..., k)
are all distinct necessity degrees appearing in B such that 1 > 2 > ... > k. Let
B = (S1, ..., Sk), where Si = {l : (l, l)B, l = i}, and LO,B =

k
i,
i=1 S
j is consistent,  otherwise. A DL axiom 
where S
is said to be a linear consequence of B, denoted by B |=LO , if and only if LO,B |= .
In Example 1, we have B |=LO HeartP atient  M aleP acemakerP atient.

i = Si if Si

i1
j=1 S
?

?

?
i is defined by S
?

?

?
2.2 The PossDL Reasoner

We have developed a tool, called PossDL, as a plug-in in NeOn Toolkit v2.32 which
is a multi-platform ontology engineering environment. The PossDL reasoner provides
the functionalities of computing inconsistency degree and doing instance / subsumption
checking with necessity degree for a possibilistic DL knowledge base. It takes an OWL
ontology and a separate file storing the necessity degrees for the axioms in the ontology
as inputs. PossDL mainly consists of four parts, described as follows.

Fig. 1. The user interface to compute inconsistency degree

2 http://neon-toolkit.org/wiki/Main Page
?

?

?
Fig. 2. The user interfaces for instance / subsumption checking using possibilistic inference

In the first part (see Ontology Details in Figure 1), we show the information about
the chosen ontology O (see Ontology tab), the necessity degrees for the axioms in
O (see Degree tab), the namespaces appearing in O (see Namespaces tab) and the
configuration (see Configuration tab). In the Configuration tab, we provide three
options about the reasoning tasks: compute inconsistency degree, possibilistic inference
and linear order inference. If one of them is chosen, the corresponding part or section
will be shown automatically. By default, the first option (i.e. compute inconsistency
degree) is chosen. It is noted that, the necessity degrees are stored in a separate file.
This file is still in OWL format. Specifically, we take a string of an axiom as a concept
ID and associate a necessity degree to this concept by an annotation property.

In the part of Compute Inconsistency Degree (see Compute Inconsistency De-
gree in Figure 1), we can compute the inconsistency degree by clicking the button. If
this possiblisitic DL knowledge base is inconsistent, yes will be shown in the text area
below the sentence of Inconsistency? and the inconsistency degree can be seen in the
text area right below the word of Degree. Otherwise, no and  will be shown in
two text areas respectively.

In the part of Possibilistic Inference (see the left part in Figure 2), we can choose
an individual and a concept to do instance checking with necessity degree based on
the possibilistic inference by clicking the button of Instance Checking. The result
about whether the corresponding assertional axiom can be inferred will be shown in the
first text area. If this axiom can be inferred, the necessity degree for this axiom will be
computed and it can be seen in the second text area. Otherwise,  will be shown. It is
similar to do subsumption checking in this part (see the right part in Figure 2). The part
of Linear Order Inference is similar to the part of Possibilistic Inference but using
different inference strategies.

3 Related Work

The relationship between possibilistic DLs and other uncertainty formalisms for DLs has
been discussed in a survey paper [5]. One of the most important approaches that extend
DLs with uncertainty reasoning are probabilistic DLs, such as the work presented in [4]
which has a tool support [3]. Some major differences between possibilistic DLs and probabilistic DLs are given as follows. First, unlike probabilistic DLs, the confidence degree
attached to an axiom in possibilistic DLs is not absolute and can be replaced by another

G. Qi et al.

number as long as the ordering between two confidence degrees is not changed. Second,
in possibilistic DLs, a necessity degree is attached to a DL axiom. Whist in probabilistic
DLs in [4], an interval [l, u] (l, u  [0, 1]) is attached to a conditional constraint (D|C),
where C and D are DL concepts, which cannot be expressed by means of DL axioms.
Fuzzy DLs can be used to deal with uncertainty or vagueness in DLs (e.g., [9,8])
with scalable tool support [6]. The main difference between possibilistic DLs and fuzzy
DLs is that, the truth value of a concept (or a role) in possibilistic DLs is still two-
valued, whilst in fuzzy DLs, the truth value of a concept (or a role) is multi-valued. So
the semantics of possibilistic DLs is different from that of fuzzy DLs.

4 What Will Be Demonstrated?

In our demonstration, we present our PossDL reasoner, which is an extension of Pellet
for uncertainty reasoning and inconsistency handling. In particular, PossDL supports
three different possibibilistic inference services and the linear order inference which is
used to deal with the drowning effect. In the demonstration, we will illustrate our reasoner with practical examples obtained from ontology learning and ontology matching.
Besides, for various needs of the users different algorithms to deal with inconsistency
and/or uncertainty will be demonstrated.

Acknowledgments

Guilin Qi is partially supported by Excellent Youth Scholars Program of Southeast University under grant 4009001011.
