LESS - Template-Based Syndication and

Presentation of Linked Data

S oren Auer1, Raphael Doehring2, and Sebastian Dietzold1

1 Universit at Leipzig, Institut f ur Informatik,
Postfach 100920, D-04009 Leipzig, Germany
{auer,dietzold}@informatik.uni-leipzig.de

http://aksw.org

2 Netresearch GmbH & Co. KG,

Nonnenstrasse 11d, D-04229 Leipzig
raphael.doehring@netresearch.de

http://netresearch.de

Abstract. Recently, the publishing of structured, semantic information
as linked data has gained quite some momentum. For ordinary users on
the Internet, however, this information is not yet very visible and (re-)
usable. With LESS we present an end-to-end approach for the syndication and use of linked data based on the definition of templates for
linked data resources and SPARQL query results. Such syndication templates are edited, published and shared by using a collaborative Web
platform. Templates for common types of entities can then be combined
with specific, linked data resources or SPARQL query results and integrated into a wide range of applications, such as personal homepages,
blogs/wikis, mobile widgets etc. In order to improve reliability and performance of linked data, LESS caches versions either for a certain time
span or for the case of inaccessibility of the original source. LESS supports the integration of information from various sources as well as any
text-based output formats. This allows not only to generate HTML, but
also diagrams, RSS feeds or even complete data mashups without any
programming involved.

1 Introduction

Recently, the publishing of structured, semantic information as linked data has
gained much momentum. A large number of linked data providers meanwhile
publishes more than 200 interlinked datasets amounting to 13 billion facts1.
Despite this initial success, there are a number of significant obstacles, which
hinder the large-scale deployment and use of the linked data web. These obstacles
are primarily related to the quality and coherence of linked data as well as to
providing direct benefits to end users. In particular for ordinary users of the
Internet, linked data is not yet sufficiently visible and (re-) usable.

http://esw.w3.org/topic/TaskForces/CommunityProjects/LinkingOpenData/
DataSets/Statistics

L. Aroyo et al. (Eds.): ESWC 2010, Part II, LNCS 6089, pp. 211224, 2010.
c Springer-Verlag Berlin Heidelberg 2010

S. Auer, R. Doehring, and S. Dietzold

With the template-based syndication and presentation approach LESS presented in this article, we target primarily the usability aspect of linked data for
end users. Another important problem of the linked data web tackled by LESS
are quality issues, in particular with regard to performance and reliability of
linked data endpoints, the importance of which has, for example, been noted
earlier in [4].

LESS represents an end-to-end approach for the syndication and use of linked
data based on the definition of templates for the visual presentation of linked
data resources and SPARQL query results. LESS allows to edit and publish
syndication templates and to share them by using a collaborative Web platform.
Templates for common types of entities can then be combined with specific,
linked data resources or SPARQL query results and integrated into a wide range
of applications, such as personal homepages, blogs/wikis, mobile widgets etc.

As a result, a blogger writing about a recent trip to Berlin can easily integrate
a nicely formatted fact box with important information about Berlin obtained
from Wikipedia into her blog post. A community of science fiction fans can
integrate lists on a recent BBC programming matching their preferences into
their community portal. Wikipedia authors can use LESS to generate pages
with lists from DBpedia [6] content. Citizen scientists interested in earthquakes
can display recent earth crust activity in their region on a map without having
to do any programming.

LESS supports the integration of information from various sources as well as
any text-based output formats. This allows not only to generate HTML, but also
diagrams, RSS feeds or even complete data mashups without any programming
involved. In order to improve reliability and performance of linked data, LESS
caches versions of the retrieved linked data resource descriptions or SPARQL
query results either for a certain time span (thus improving the performance) or
for the case of inaccessibility of the original source (thus improving reliability).
LESS represents an end-to-end solution by not only focusing on a single as-
pect, but tackling the whole life-cycle from template definition, processing, inte-
gration, authoring to sharing in a coherent way. Concrete usage scenarios tackled
by LESS include for example:

 the flexible visualization of linked data resources,
 the creation of views on the linked data web,
 the integration of linked data into existing applications such as Content

Management Systems, Wikis, Weblogs etc.

 the integration and compilation of information from various sources,
 the end-user-driven generation of linked data mashups.

The paper is structured as follows: We present the high-level LESS concept
and architecture in Section 2. We report about our LESS implementation in Section 3. We present a number of complementary use cases for LESS in Section 4.
We review related work in Section 5 and conclude with an outlook on future
work in Section 6.
?

?

?
2 Concept and Architecture

From the usage scenarios mentioned in the introduction (and described in more
detail in Section 4) we derived the following requirements:

 support for various data access paradigms, in particular direct linked data

URI requests and SPARQL queries,

 simple template language, which is, on the one hand, easy to learn and,
on the other hand, flexible enough to accommodate a wide range of usage
scenarios (in particular the ones described in the introduction),

 mitigation of the current reliability and performance problems of linked data

endpoints,

e.g. via a REST API,

 facile integration of the processed templates into various Web applications,

 enable the collaborative authoring, sharing and re-use of templates.

Fig. 1. LESS system architecture

In order to fulfill these requirements, we developed the LESS architecture as

presented in Figure 1. The main LESS components are:

 template language: defines a declarative language for creating textual output

form RDF resources and SPARQL results,

 template builder: allows users to define and edit LESS templates in a collab-

orative manner,

 repository: stores template revisions and metadata, allows to retrieve tem-

plates based on various annotations,

S. Auer, R. Doehring, and S. Dietzold

 processor: combines a template with concrete data retrieved from the data

 linked data cache: stores retrieved linked data resources and SPARQL queries

web,

for reuse.

In the following subsections we describe these components in more depth.

2.1 Template Language

A core part of LESS is the LESS Template Language (LeTL), which allows to
define arbitrary text-based output representations. In general, the use of various template languages (such as Fresnel [8] or Tal4RDF [2]) is possible with
LESS. However, in order to lower the entrance barrier for end users, we decided
to specify a template language tailored for simplicity, convenience and versatil-
ity. LeTL is based on the popular Smarty2 template language, but uses some
custom extensions. From Smarty LeTL inherits custom functions, variable mod-
ifiers, loops, conditional parts based on the evaluation of complex expressions,
cache handling, a plugin architecture and many other features. However, LeTL
additionally comprises functionality for direct interaction with RDF data and
SPARQL query results.

A LeTL template is applied to each individual resource described in an RDF
document or every row in a SPARQL result set (unless the template application
is restricted to resources of a certain class). The properties (or columns) of the
resource (or SPARQL result row) are made available for reference within the
LeTL template by using the syntax showcased in Table 1. The LeTL syntax
allows to iterate through multiple property values and to reference recursively
(sub-)templates, which are applied to dereferenced object property values. An example of such a recursive template, which iterates through a list of foaf:Person
resources, dereferences these resources and calls another template for each one
of them, is shown in Figure 2.

2.2 Template Builder

The template builder (depicted in Figure 3) enables end users to create LESS
templates. The template builder comprises the template editor, a property recommender and a template rendering preview. The template editor supports
syntax highlighting for HTML. The property recommender suggests properties
based on a given, example linked data resource or SPARQL query. Once a certain property has been selected, the corresponding Smarty code to display the
value of the property is added to the current cursor position in the template
editor. Once a stable version of a certain template has been created by using
the template builder, additional metadata (such as a template name and tags)
can be attached to the template and a revision can be stored in the template
repository.

http://www.smarty.net/
?

?

?
Table 1. LeTL syntax extensions to the Smarty template language

Syntax

{{property}}

{{p@lang}}

{{p^^dtype}}

{{p1->p2}}

{template id="id"

uri="uri"
instances=""
sortBy=""}

{template id="id"

sparql="query"
endpoint="srv"}

Description
Refers to the value of the property
property
Refers to the value with language tag
lang of the property p
Refers to the value with datatype
dtype of the property p
Refers to the value of the property
p2 of the resources referred to by the
property p1
Processes the template with id id
and resource uri (using the optional
attributes instances iteration can be
restricted and sorted with sortBy)
Processes the template with id id
and SPARQL query query from endpoint srv

Example

{{foaf:name}}

{{rdfs:comment@en}}

{{dbp:birth^^xsd:date}}

{{foaf:currentProject

->rdfs:label}}

{template id="5" uri="{$var}"}

{template id="3"

sparql="SELECT * WHERE {}"
endpoint="http://dbpedia.org"}

2.3 Template Repository

The template repository allows to publish templates, to browse existing templates based on their supported RDF classes and user-defined tags as well as to
rate, comment and reuse existing templates. The template repository is implemented on top of a relational database, but made available as RDF by using
Triplify [1] at http://less.aksw.org/triplify. For each template, a unique
template id is assigned. As soon as a template is changed, its revision id is in-
cremented. Each registered LESS user can only change her own templates in
order to prevent conflicts. However, a user can create her own copy of any of the
templates stored in the template repository. The public availability of templates
in the repository has a number of advantages: templates serve as examples for
new users, they can be used by other third-party applications and the reuse of
templates facilitates a natural modularization.

2.4 Template Processor

The template processor is the actual LESS execution environment. It takes a
LESS template and a linked data resource or SPARQL query and renders the
respective output. By default the LESS template processor iterates through all
the resource descriptions or SPARQL query result items and applies the defined
template to each of them. This allows to apply LESS also to RDF documents,
which contain more than one resource description. However, in certain cases, the
template application should be restricted to resources of a certain type. For these
cases, the LESS template can be associated with a certain RDF class. This can
be, for example, the class foaf:Person for a FOAF profile, thus preventing the
application of the template for a persons projects described in the same FOAF

S. Auer, R. Doehring, and S. Dietzold

<h2 > {{ foaf : name }} </ h2 >
{{ dc : d e s c r i p t i o n }} < br / >
<a href =" {{ foaf : h o m e p a g e }} " > web </ a >
< div id =" m e m b e r s " >

{ f o r e a c h {{ foaf : member }} as $var }

{ t e m p l a t e id ="5" uri ="{ $var }"

p a r a m e t e r _ l a n g u a g e =" en "}

{/ f o r e a c h }

</ div >

< div id =" foaf - card - block " >

{ if {{ foaf : d e p i c t i o n }} !==  }

< img class =  photo 

src =" {{ foaf : d e p i c t i o n }} " / >

{/ if }
< div id =" name " > {{ foaf : name }} </ div >
...
{ if {{ foaf : phone }} !==  }

< div id =" tel " > {{ foaf : phone }} </ div >

{/ if }
< div id =" email " >

<a href =" {{ foaf : mbox }} " >
< img src =" email . png " / >
{ if $ l a n g u a g e === en }

email { else } E - Mail

{/ if }

</a >

</ div >

</ div >

Fig. 2. Left: LESS templates for displaying a group profile including information about
group members, obtained from separate FOAF profiles; Right: rendered output

file. When there is more than one resource of the type selected, the sortBy
parameter can be used to order the resources based on the values of a certain
property. The template processing can be additionally influenced by user-defined
parameters, which can be accessed from within the template definition. Based
on a system, template or request configuration, the template processor can be
instructed to use a locally cached version of the linked data resource or SPARQL
query. This particularly facilitates situations, where linked data endpoints are
temporarily not available or respond slowly.

2.5 Integration Interface

In order to integrate the output of the template processor into external applica-
tions, LESS provides an REST API via the URL http://less.aksw.org/build.
Required URL parameters are the id of the template, the revision of the template (can be omitted for accessing the last revision) and either uri or sparql
for defining the linked data resource or the SPARQL query to be used. By default this REST function call returns the rendered output as text (in most cases
HTML snippets). By using the optional URL parameter output, Javascript or
JSON can be alternatively selected as output format. A further optional URL
parameter is ttl, which specifies the time-to-live of a previously cached version
?

?

?
Fig. 3. Template Builder comprising editor, property recommender and rendering
preview

of the linked data resource or SPARQL query. In case this parameter is missing,
template- or system-based defaults are used. An example of a REST request
(whose result is depicted in Figure 5) would look as follows:

http://less.aksw.org/build?id=2&

uri=http%3A%2F%2Fdbpedia.org%2Fresource%2FBerlin

3 Implementation

The LESS implementation was performed in PHP by using the Zend Framework3 and the Erfurt framework for the development of semantic web applications [3]. The implementation follows the generic MVC architecture model and
the convention-over-configuration paradigm, which assumes reasonable defaults
for all possible configuration parameters. A demonstration platform with the
LESS implementation is available at: http://less.aksw.org

A UML sequence diagram illustrating the template processing is displayed in
Figure 4. After a template instance is requested by a user via the integration

http://framework.zend.com

S. Auer, R. Doehring, and S. Dietzold

Fig. 4. Template processing UML sequence diagram

interface, the template processor checks the local cache or retrieves the data. Based
on the template id, the template data and metadata are obtained from the relational database. The LeTL template is then compiled by the SmartyPreFilter
into a valid Smarty template and compiled by the Smarty processor into PHP code.
The Smarty processor also takes care of caching-compiled templates in order to increase the performance.

4 Usage Scenarios

In this section we present examples for employing LESS for the various usage
scenarios identified in the introduction. The examples presented are available in
the LESS template repository with tag ESWC4.

4.1 Flexible Resource Visualization

Although there are some approaches for rendering RDF (e.g. [8,2]), it is currently
quite cumbersome to visualize RDF and linked data in user-defined ways. LESS
provides a very flexible and easy-to-learn mechanism for visualizing linked data
resources and SPARQL query results, since end users can directly create output
fragments with placeholders for RDF data. Figure 5 demonstrates how a LESS
template can be used to visualize a linked data resource and to integrate the
resulting output into a Wordpress blog. By annotating the generated visual
representations with RDFa, the resource descriptions can be easily obtained and
reused not only from the original data source, but also from the syndicated
content representations.

http://less.aksw.org/browse?tags=%2Beswc
?

?

?
Fig. 5. Integration of a LESS template visualizing data obtained from DBpedia into a
Wordpress blog post by using a Javascript snippet

4.2 Linked Data View Creation and Visualization

In many cases not only a single linked data resource, but information from
various interlinked linked data resources or SPARQL queries should be displayed.
Figure 6 showcases a rendered template, which obtains information about recent
BBC programmings related to the series Mountain. The information is obtained
by querying a SPARQL endpoint containing the BBC program information and
rendering the query result by employing a LESS template.

4.3 Integration of Information from Various Sources

LESS is not limited to create visual representations of single RDF or SPARQL
sources. The possibility to dereference linked data resources or call (sub-)
templates from within a LESS template (as described in Table 1) allows to
integrate information from various sources into a coherent visual representation.
In Figure 2 we illustrate this usage scenario with a template, which iterates
through members of a group obtained from a group FOAF file and processes
an individual FOAF template for each member with data from their personal
FOAF profiles.

S. Auer, R. Doehring, and S. Dietzold

Fig. 6. Rendered LESS template representing a view on recent BBC programmings

Fig. 7. LESS integration into Typo3: After specifying the LESS instance to use, the
user is provided with a list of possible templates. The user is then able to specify
the necessary template parameters through a user interface rather than by manually
creating the REST URI. This simplifies integrating a LESS template into Typo3 even
further.

4.4 Template Integration into Existing Applications

With LESS REST style integration interface it is very easy to integrate rendered
templates into existing Web applications, be it Weblogs, CMS, Wikis, traditional
Web pages or any other Web application. LESS offers the template integration
into existing application via employing HTML snippets, Javascripts, JSON or
?

?

?
Fig. 8. Mashup template combining the Google Charts API with Eurostats data. The
code in the lower part shows the image link template used to access the API.

IFRAMEs. The integration of linked data content can be even further simplified,
if Web applications offer to integrate LESS templates directly, i.e. without the
detour to the LESS homepage. In order to showcase how such a LESS integration
can be performed, we developed a Typo3 extension, which allows to define Typo3
page content objects based on LESS templates directly from within the Typo3
user interface (cf. Figure 7).

4.5 Mashups

LESS is not limited to employing RDF and solely creating HTML output. Due
to the flexible template language, arbitrary text-based output can also be gen-
erated, including Javascript, various XML formats (such as RSS), CSV etc. In
particular, LESS enables the combination of RDF data with WebAPIs in order
to create data mashups. Figure 8 shows a LESS template processing data from
Eurostats and combining it with the Google Charts API in order to create a
chart with births per year over time. The Google Charts API is accessed by
creating a special URL, which returns the generated chart as an image. In the
example the URL is constructed by means of a LESS template. Using LESS,
users do not have to perform any programing in order to construct the URL for
accessing the API. Likewise, the LESS output (i.e. the diagram in this example)
dynamically changes as the underlying data changes.

5 Related Work

Related work dealing with the visual presentation and (re-)use of RDF data
can be divided into two main groups. On the one hand, there are interactive,

S. Auer, R. Doehring, and S. Dietzold

user-interface-centric approaches, which enable the user to select and combine
data interactively. The entrance barrier of these approaches is relatively low,
since user interfaces are intuitive and easy to understand. On the other hand,
there are programmatic-oriented approaches that specify a transformation or
template language for RDF data. Although more effort is necessary to get acquainted with them, the latter provide more versatility and flexibility.

Sig.ma5 is part of the first group and offers a fixed, table-oriented presentation
of linked data. The user is enabled to select a certain data source, to edit the
ordering of data and to integrate the result into an existing web page. Apart from
the order the user does not have any influence on the layout of the information.
Marbles6 is also part of the user-interface-centric group of approaches. Marbles
is a web application that allows to aggregate and present RDF data from different
sources by using Fresnel lenses and formats (see also below). Its focus lies on
the aggregation and selection of new sources for an RDF resource as well as
the selection of data. Marbles is limited to the presentation of data for XHTML
clients through Fresnel-based views. There are only three views currently in use.
The produced format is limited to the views.

With regard to the first group of related user-interface-centric approaches
there is also a large body of work into mashups. This includes Yahoo! Pipes7 or
the (now discontinued) Google Mashup editor. Semantic Pipes [7] is a mashup
technology which can make use of Linked Data. However, its focus lies more
on the choreography of processing information from different sources, than on
provisioning of output for direct integration into Web pages.

With regard to the second group of programmatic-oriented approaches, Fresnel [8] offers a very generic way to solve the problem of presentation and transformation of RDF data. Fresnel is a vocabulary for describing the basic concepts
of RDF data presentation. It offers two main components: lenses and formats.
While lenses are a filter to select the data to use, formats describe the way
a set of data is presented. The result of a Fresnel transformation is not a final
presentation of the data but a tree structure of data annotated with presentationrelated information. The actual interpretation of this structure is delegated to
the browser software using Fresnel. In addition to Marbles, other RDF browsers
implementing Fresnel are IsaViz8 (W3C/INRIA) and Longwell9 / Piggy Bank
[5]. Although very related, Fresnel is quite different from LESS, since it defines its
own mechanisms for data selection (LESS uses simple projections and SPARQL),
its formatting approach is more difficult to learn (due to the RDF representation
of formatters) and it is less aligned with the linked data paradigm.

Tal4RDF [2] is a programming library written in Python based on Zopes
Template Attribute Language. The goal of this approach is to create a lightweight template language for RDF data. The library allows to transform RDF

http://sig.ma/
http://marbles.sourceforge.net/
http://pipes.yahoo.com
http://www.w3.org/2001/11/IsaViz/
http://simile.mit.edu/longwell/
?

?

?
data into any text-based format. Similar to LESS, a web service to render the
templates is provided. However, Tal4RDF does not offer any means to publish
and share templates, there is no support for SPARQL and dynamic linked data
dereferencing.

The Visualization Providers for Ontology ElemenTs (VPOET) is a tool developed for the presentation of ontology elements [10]. It is based on the Fortunata
library [9]. The user is enabled to create a template presenting RDF data, and a
web service for rendering the templates is provided. Different to LESS, VPOET is
limited to the presentation of resources belonging to a single ontology. VPOETs
template language appears to be slightly cumbersome (e.g. with regard to the
data referencing), as it does not support loops for iterating through resources,
and the conditional evaluation of template parts cannot be based on complex
conditions such as the comparisons.

6 Conclusions and Future Work

With LESS we aimed at contributing to mitigate the largest obstacles for a largescale deployment of the linked data web: the demonstration of direct benefits to
end users and improving the reliability and performance of linked data endpoints.
LESS represents an end-to-end solution by not only focusing on a single aspect,
but tackling template definition, processing, authoring and sharing in a coherent
and pragmatic way. As a result, end users are empowered to make use of linked
data without the need to program or gain deep understanding of the technologies
involved. Despite its simplicity, LESS is very flexible and versatile. It supports
a wide-range of application scenarios ranging from simple resource visualization
to complex data mashup generation.

We see LESS as a first step towards bringing the data web closer to potential
end users. As a continuing effort, we aim, in particular, to tackle the following
enhancements and improvements in future work:

 usability improvements, such as a visual template designer supporting drag-
and-drop of template elements and the integration of OntoWikis SPARQL
query builder for a more user-friendly construction of complex queries,

 development of plugins for standard Web applications, which enable users

to define and integrate LESS templates from a single environment,

 better integration with data web services and search indexes such as Sindice,
 template language extensions, such as a template-in-template mechanism,
support for property groups representing common information and support
for different template languages such as Fresnel and Tal4RDF.

Acknowledgments

We would like to thank our colleague Christian Weiske for the helpful comments
and inspiring discussions during the development of LESS. This work was supported by a grant from the German Federal Ministry of Education and Research
(BMBF), provided for the project LE4SW.

S. Auer, R. Doehring, and S. Dietzold
