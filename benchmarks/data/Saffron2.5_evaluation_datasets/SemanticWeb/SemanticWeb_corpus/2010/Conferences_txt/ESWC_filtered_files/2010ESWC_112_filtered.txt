The Impact of Multifaceted Tagging on Learning

Tag Relations and Search

Fabian Abel, Nicola Henze, Ricardo Kawase, and Daniel Krause

IVS  Semantic Web Group & L3S Research Center,

Leibniz University Hannover, Germany
{abel,henze,kawase,krause}@L3S.de

Abstract. In this paper we present a model for multifaceted tagging,
i.e. tagging enriched with contextual information. We present TagMe!,
a social tagging front-end for Flickr images, that provides multifaceted
tagging functionality: It enables users to attach tag assignments to a
specific area within an image and to categorize tag assignments. More-
over, TagMe! maps tags and categories to DBpedia URIs to clearly define
the meaning of freely-chosen words. Our experiments reveal the benefits
of these additional tagging facets. For example, the exploitation of the
facets significantly improves the performance of FolkRank-based search.
Further, we demonstrate the benefits of TagMe! tagging facets for learning semantics within folksonomies.

1 Introduction

Tagging systems like Flickr or Delicious organize and search large item collections by utilizing the Web 2.0 phenomena: users attach tags to resources and
thereby create so-called tag assignments which are valuable metadata. However,
imprecise or ambiguous tag assignments can decrease the performance of tagging
systems regarding search and retrieval of relevant items.

For example a tag assigned to an image may describe the image with respect
to different dimensions referring to the owner, an opinion or the usage context
(task) and thus is only valid for a user-specific point of view [1]. Not all tags can
be used for search, but most often tags describing the content of a document are
applicable for search [2]. However, even those descriptive tags might characterize
just a small part of an image and hence cannot be used to derive the overall
topic of the image correctly. Finally, tag assignments suffer from ambiguity in
natural languages. For disambiguation, approaches like MOAT [3] exist, which
support users to attach URIs describing the meaning of a tag to a particular tag
assignment analogously to semantic tagging in Faviki1.

In this paper, we extend the common folksonomy model by flexible, contextual tagging facets. We present the TagMe! system2 that introduces novel tagging
facets: tag assignments are enriched with a DBpedia URI [4] to disambiguate the

1 http://faviki.com
2 http://tagme.groupme.org

L. Aroyo et al. (Eds.): ESWC 2010, Part II, LNCS 6089, pp. 90105, 2010.
c Springer-Verlag Berlin Heidelberg 2010
?

?

?
meaning of a tag. So-called area tags enable users to tag a specific part of an image (spatial tagging). Furthermore, a category dimension is offered to categorize
tag assignments. We propose different ranking strategies that exploit the additional context by extending the FolkRank [10] algorithm. In our evaluation we
show how the different strategies improve search significantly (see Section 4.2)
and analyze the impact of the additional context on learning semantic relations
among tags (see Section 4.3).

2 Context in Folksonomies

Folksonomies evolve over time when users annotate resources with freely chosen
keywords. Research in the area of folksonomy systems most often focusses on
lightweight models where folksonomies are basically considered as collections of
tag assignments. In this section we introduce approaches for modeling context
in folksonomy systems.

2.1 Folksonomy Models

Traditional folksonomy models describe the relations between users, tags and
resources. According to [5], a folksonomy can be defined as follows.

Definition 1. A folksonomy is a quadruple F := (U, T, R, Y ), where U, T , R
are finite sets of instances of users, tags, and resources. Y defines a relation, the
tag assignment, between these sets, that is, Y  U  T  R.
Some systems imply a folksonomy model that incorporates additional information indicating in which context a tag was assigned to a resource. In particular,
such context might be formed by groups, which are finite sets of resources [6].
In Definition 2 we introduce a more generic folksonomy model that considers
arbitrary type of context.

Definition 2. A context folksonomy is a tuple F := (U, T, R, Y, C, Z), where:

information respectively,

 U, T , R, C are finite sets of instances of users, tags, resources, and context
 Y defines a relation, the tag assignment that is, Y  U  T  R and
 Z defines a relation, the context assignment that is Z  Y  C
Given the context folksonomy model, it is possible to attach any kind of context
to tag assignments. For example, the context folksonomy allows for tagging tag
assignments. TagMe! [7], a tagging and exploration front-end for Flickr pictures,
introduces three types of context: (i) spatial information describing to which
part of a resource a tag assignment belongs to, (ii) categories for organizing tag
assignments, and (iii) DBpedia URIs that describe the semantic meaning of a tag
assignment. Such contextual information is simply assigned to a tag assignment
by the relation Z.

F. Abel et al.

Fig. 1. User tags an area within an image and categorizes the tag assignment with
support of the TagMe! system

The spatial information as well as the categories are explicitly provided by
the end-users via the tagging interface of TagMe! (see Figure 1). For each tag
assignment a user can enter one or more categories that classify the annotation.
While typing in a category, the users get auto-completion suggestions from the
pre-existing categories of the user community (see bottom in Figure 1). When
a user categorizes a tag assignment y = (u, t, r)  Y into category c then this
is modeled as relation (y, c)  Z where c  C can actually be an arbitrary tag,
i.e. c  T . Additionally, users are enabled to perform spatial tag assignments,
i.e. to attach a tag assignment to a specific area, which they can draw within
the picture (see rectangle within the photo in Figure 1) similarly to notes in
Flickr or annotations in LabelMe [8]. In the context folksonomy a spatial tag
assignment is simply modeled via a relation (ca, y)  Z where ca refers to the
context information that describes the area that is tagged. TagMe! automatically
assigns DBpedia URIs to tag assignments by exploiting the DBpedia lookup
service3 (cf. Section 4.1). Hence, tag assignments have well-defined semantics
so that applications, which operate on TagMe! data using the Linked Data[9]
infrastructure, can clearly understand the meaning of the tag assignments. In
particular, RDF data can be obtained by accessing resources via an alternative
URI, e.g. http://tagme.groupme.org/TagMe/resource/220/rdf, where each RDF
representation links to other RDF representations of users, tags, resources, and
DBpedia concepts.

3 http://lookup.dbpedia.org
?

?

?
3 Ranking Algorithms

In this section we present the ranking algorithms that we apply in our experiments (Section 4) to reveal the benefits of exploiting context information. We
first outline the FolkRank [10] algorithm, which we use as baseline strategy
for ranking resources in our search experiments. Later we present different algorithms (based on FolkRank) that leverage context folksonomies to improve
ranking quality.

3.1 FolkRank

The FolkRank algorithm [10] operates on the folksonomy model specified in
Definition 1. FolkRank transforms the hypergraph that is spanned by the tag
assignments into a weighted tripartite graph GF = (VF, EF), where an edge connects two entities (user, tag, or resource, i.e. VF = UT R) if both entities occur
together at a tag assignment within the folksonomy: EF = {{u, t},{t, r},{u, r}|(u,
t, r)  Y }}. The weight of an edge corresponds to the amount of the entities co-
occurrences. For example, the weight of an edge connecting a tag t and a resource
r is defined as w(t, r) = |{u  U : (u, t, r)  Y }| (cf. Definition 1) and thus corresponds to the number of users, who have annotated r with t. The constructed
graph GF serves as input for an adaption of the Personalized PageRank [11]:
w  dAGF w + (1 d)p, where the adjacency matrix AGF models the folksonomy
graph GF, p allows to specify preferences (e.g. for a tag) and d enables to adjust
the influence of the preference vector. FolkRank applies the adapted PageRank
twice, first with d = 1 and second with d < 1 (in our evaluation we set d = 0.7
as done in [10]). The final vector, w = wd<1  wd=1, contains the FolkRank of
each folksonomy entity.

3.2 Category-Based FolkRank

The category-based FolkRank algorithm operates on a context folksonomy (see
Definition 2) where the context is given by categories that are attached to tag
assignments. The algorithm relates folksonomy entities via the category assignments and the main hypothesis is that entities sharing the same category are
related to each other. Similarly to GFolkRank, the category-based FolkRank introduces an alternative approach for creating the weighted folksonomy graph GF
(cf. Section 3.1). Categories are treated as tags (c  TC where TC  T ) so that
the set of nodes is extended with TC: VFnew = VF  TC. For each category assignment (y, c)  Z, new edges are created to connect the given category c with
the resource and tag of the tag assignment y: EFnew = EF  {{c, r},{c, t}|c 
TC, t  T, r  R, ((u, t, r), c)  Z}. The weight of an edge (c, r) corresponds to
the frequency the category c is assigned to a tag assignment that refers to r:
w(c, r) = |{(u, t, r)  Y : (u, t, r)  Y, ((u, t, r), c)  Z}|. Weights of (c, t)-edges
are accordingly computed by counting the tag assignments that refer to t and
are categorized using c.

F. Abel et al.

3.3 Area-Based FolkRank

While the categories are used to enrich the folksonomy graph with further edges
and possibly also with further vertices, the area-based FolkRank merely modifies
the weights of edges in GF (cf. Section 3.1). In particular, it emphasizes the weight
of an edge between a tag t and a resource r, i.e. (t, r)-edges, whenever t and r
occur within a tag assignment (u, t, r)  Y to which spatial context information
is attached to. The amplification is based on the size of the corresponding area
as well as on the distance of the midpoint of the area to the center of the resource
(in our experiments we examine pictures).

 size Our hypothesis is that the larger the size of an area the more important
is also the corresponding tag for the given resource, i.e. the larger the area
that is attached to (u, t, r)  Y is the more relevant t is for r. The size of
an area is measured relatively to the size of the resource. For example, if an
area is associated to a tag assignment (u, t, r) and the relative size of the
1
area is s = 0.4, i.e. the area covers 40% of the resource, then we use s
to emphasize the weight w(t, r). As different users might attach differently
sized areas to (u, t, r), we use the average size  s of those areas to finally
compute the new weight of (t, r)-edges: w(t, r)s =  s

1  w(t, r).

 distance The second hypothesis is that tag assignments which are according to the spatial information relevant to the center of a resource are more
important for the resource than tag assignments which are associated to
the margin of a resource. The distance d is also measured relatively and
the weight w(t, r) is emphasized with the average distance  d of the areas
attached to (u, t, r)  Y : w(t, r)d =  d

1  w(t, r).

Finally, the weight of the edges (t, r) is simply the average of w(t, r)s and w(t, r)d:
w(t, r)area = 0.5  w(t, r)s + 0.5  w(t, r)d.

3.4 URI-Based FolkRank

The URI-based FolkRank operates on meaningful URIs instead of tags. Hence,
the construction of the folksonomy graph GF = (VF, EF) is modified as follows.
The set of vertices is VF = UU RIR, where U RI  C (cf. Definition 2) denotes
the set of URIs that describe the meaning of the tag assignments. The set of edges
is EF = {u, uri},{uri, r},{u, r}|u  U, uri  U RI, r  R, ((u, t, r), uri)  Z}
whereas there should only exists exactly one URI assignment (y, uri)  Z for
each tag assignment y. The weights of the edges are computed in the same way
as done by the traditional FolkRank algorithm.

The URI-based FolkRank algorithm is therewith resistant against ambiguous
tags as well as synonymic tags. For example, given two tag assignments y1 =
(u1, t1, r1) and y2 = (u2, t2, r2) as well as two context assignments (y1, uri1)
and (y2, uri1), the URI-based FolkRank algorithm would replace the synonymic
tags t1 and t2 by the unique URI uri1 that clearly defines the meaning of the
tags. It therewith, e.g., relates r1 and r2 as it constructs the edges (uri1, r1) and
(uri1, r2). As the TagMe! system utilizes DBpedia URIs to define the meaning
?

?

?
of tags, we denote the URI-based FolkRank as DBpedia FolkRank in our search
experiments in Section 4.

4 Evaluation

In this Section we analyze the benefits of multi-faceted tagging resulting in context folksonomies (see Definition 2), i.e. contextual information that is embedded
in the folksonomy model. In particular, we analyze the three context types introduced by the TagMe! system.
1. Categories for organizing tag assignments.
2. Spatial information (areas) describing to which part of a resource a tag

assignment belongs to

3. DBpedia URIs that describe the semantic meaning of a tag assignment.
From the TagMe! data it seems that users appreciate those tagging facets, e.g.
899 of the 1264 tag assignments, which were performed within the three weeks
after the launch of the system, were categorized and 657 times the users assigned
a tag to a specific area within a picture. In the evaluation period the system was
used by 30 students with background in computer science where half of the
participants also had a Flickr account and thus were able to tag own pictures
while the other half did not had a Flickr account.

In our evaluation we examine the impact of the additional context generated
by the multi-faceted tagging on search and mining tag relations. In particulr,
the key questions we would like to answer are the following.
1. Does the exploitation of the additional context improve the search and rank-

2. Do the different context types offer potential to learn advanced types of

ing performance?

relations among tags?

To better understand the context types available in TagMe!, we first present the
results of analyses in which we investigated potential benefits of the categories
and areas and examined strategies for mapping tags to DBpedia URIs (see Section 4.1. In Section 4.2 we afterwards summarize the results of our experiments
that reveal the positive impact of the TagMe! context folksonomy on search.
Finally, we examine the possibilities of learning semantic relations between tags
in the TagMe! folksonomy.

4.1 Preliminary Analysis
In our preliminary analysis we try to gain first insights into the characteristics
of the three TagMe! context types. We target the following questions.
1. How are categories used in comparison to tags?
2. What are the benefits of assigning tags to specific areas within an image

(spatial information)?

3. How accurate can tags (and categories) be mapped to DBpedia URIs de-

scribing the meaning of the annotations?

F. Abel et al.

Analysis of Category Usage and Benefits. Figure 2(a) shows the evolution
of the number of distinct tags and categories: Although categories can be entered
freely like tags, they grow much less than tags. Further, only 31 of the 87 distinct
categories (e.g., car or sea) have also been used as tags, which means that
users seem to use different kinds of concepts for categories and tags respectively.

s
e
i
r
o
g
e
t
a

d
n
a
 
s
g
a

t
c
n
i
t
s
i
d
 
f
o
 
r
e
b
m
u
n

distinct tags

distinct categories

people

friends

(i) categories

sky

clouds

number of Tag Assignments in %

(a) Growth of number of distinct tags in comparison
to distinct categories.

sun

moon

(ii) tags

(b) Annotated areas.

Fig. 2. Annotation behavior in TagMe!

The TagMe! system supports users in assigning categories by means of autocompletion (see Figure 1). During our evaluation we divided the users into two
groups: 50% of the users (group A) got only those categories as suggestion, which
they themselves used before, while the other 50% of the users (group B) got
categories as suggestions, which were created by themselves or by another user
within their group. This small difference in the functionality had a big impact
on the alignment of the categories. The number of distinct categories in group
A was growing 61.94% stronger than in group B. Hence, the vocabulary of the
categories can be aligned much better if categories, which have been applied by
other users, are provided as suggestions as well.

Analysis of Spatial Tagging Information. Categories can be differentiated
according to their usage. For example, some categories have never or very seldomly been used when a specific area of an image was tagged (e.g., time,
location, or art) while others have been applied almost only for tagging a
specific area (e.g., people, animals, or things).

The areas, can moreover be used to learn relations among categories and tags.
Figure 2(b) shows (i) the areas that have been annotated whenever the categories
people and friends have been used (the darker an area the more tags have
been assigned to that area). As the areas that have been tagged in both categories
?

?

?
strongly correlate and as category people was used more often than category
friends one can deduce that friends is possibly a sub-category of people
even if both categories would never co-occur at the same resource. Relations
between tags can also deduced by analyzing the tagged areas. Figure 2(b) shows
(ii) the areas that were tagged with sky, clouds, sun, and moon4 and
via the size and position of the area it is possible to learn that an entity is part
of or contained in another entity (e.g., sun, moon, and clouds are contained
in sky). The learned relations among tags and categories can moreover be used
to learn and refine relations between URIs (ontology concepts) as TagMe! maps
tags and categories to DBpedia URIs.

Mapping to DBpedia URIs. For realizing the feature of mapping tags and
categories to DBpedia [4] URIs we compared the following two strategies.

 DBpedia Lookup The naive lookup strategy invokes the DBpedia lookup
service with the tag/category that should be mapped to a URI as search
query. DBpedia ranks the returned URIs similarly to PageRank [12] and our
naive mapping strategy simply assigns the top-ranked URI to the tag/cate-
gory in order to define its meaning.

 DBpedia Lookup + Feedback The advanced mapping strategy is able to
consider feedback while selecting an appropriate DBpedia URI. Whenever
a tag/category is assigned, for which already a correctly validated DBpedia
URI exists in the TagMe! database then that URI is selected. Otherwise the
strategy falls back the naive DBpedia Lookup.

The mappings of the naive approach result in a precision of 79.92% for mapping tags to DBpedia URIs and 84.94% for mapping categories considering only
those tag assignments where a DBpedia URI that describes the meaning properly exists. The consideration of feedback, which is currently managed by the
administrators of TagMe!, improves the precisions of the naive DBpedia Lookup
clearly to 86.85% and 93.77% respectively, which corresponds to an improvement
of 8.7% and 10.4%. As the mapping accuracy for categories is higher than the
one for tags, it seems that the identification of meaningful URIs for categories
is easier than for tags. Moreover, the precision of the category mappings, which
are determined by the strategy that incorporates feedback, will further improve,
becausefostered by TagMe!s category suggestion featurethe number of distinct categories seems to converge (cf. Figure 2(a)). A more detailed evaluation
of th DBpedia URI mapping is described in [13] and the implementation of
advanced mapping strategies is part of our future work.

Overall, the DBpedia mapping reduces the number of distinct tags and categories within TagMe! by 14.1% and 20.9% respectively, which promises a positive
impact on the recall when executing tag-based search. For example, while some
users assigned the tag car to pictures showing cars other users chose auto
to annotate other pictures that show cars. As both kinds of tag assignments

4 The visualizations are based on 25 (sky), 10 (clouds), 6 (sun), and 2 (moon)

tag assignments respectively.

F. Abel et al.

are mapped to http://dbpedia.org/resource/Automobile, TagMe! can simply
search via the DBpedia URI whenever users search via car or auto to increase recall of the tag-based search operations. With the URI-based FolkRank
we present an advanced ranking algorithm that exploits the DBpedia URIs to
improve the ranking performance (see evaluations in Section 4.2).

Synopsis. In summary, the context types available in the TagMe! folksonomy
have a positive impact on identifying correlations between the folksonomy entities (e.g., identifying similar tags). Further, categories and areas enable the
extraction of additional semantic relations between tags. As tags are mapped
to DBpedia URIs that describe the meaning of a tag assignment, it is possible
to deduce rich semantics from the context folksonomy available in TagMe!. The
results of our preliminary analysis can be summarized as follows.

 The usage of categories differs from the usage of tags: Even for those users,
who did not benefit from the category suggestions, the number of distinct
categories is growing slower than the number of distinct tags.

 The spatial tag assignments can be used to learn typed relations among
tags and categories such as sub-category, sub-tag, part-of, or contained-in
relations. As tags and category assignments are mapped to meaningful URIs
(ontological concepts), it is possible to propagate the learned relations to
ontologies.

 A naive DBpedia lookup allows us to map tags and categories to ontological
concepts (DBpedia URIs) with a high precision of 79.92% (tags) and 84.94%
(categories). The consideration of feedback improves the accuracy of the
mapping of tags and categories to 86.85% and 93.77% respectively.

This preliminary analysis already delivers insights into the potential of the context information available in the TagMe! folksonomy. In the next section we will
evaluate whether categories, the size and position of areas, and the DBpedia
URI assignments can be applied to improve the quality of search and ranking.
Hence, we evaluate the ranking algorithms proposed in Section 3.

4.2 Search Evaluation

In our search evaluation we examine the impact of the advanced semantics provided by the TagMe! context folksonomy on search. In particular, we apply the
FolkRank algorithm (see Section 3.1) as well as the Category-, Area-, and URIbased FolkRank adaptions to search and rank Flickr images and investigate how
the different context types can help to improve the search performance. We
evaluate the algorithms with respect to the following task.

Resource Ranking Task. Given a keyword query (tag), the task of the
ranking strategy is to compute a ranking of resources so that resources
that are most relevant to the keyword query appear at the top of the
ranking.
?

?

?
Our primary goal is to determine whether the additional context information
has a positive impact on the ranking task. We further examine the characteristic
strengths and weaknesses of the different context types by comparing the ranking
performance of the corresponding FolkRank-based strategies.

Data Set and Test Set. We conducted our experiments on the TagMe! data
set that evolved during the first month after the launch of the system. In this
period the users created 1264 tag assignments where 899 tag assignments where
also enriched with a category and 657 tag assignments were attached to a specific
area of a Flickr resource. As outlined in Section 4.1, the number of distinct tags
was growing faster than the number of distinct categories. Finally, the TagMe!
data set contained distinct 610 tags and 118 distinct categories. The distribution
of the usage frequency of tags shows a typical distribution: While some tags are
used very often, the majority of tags is used just once.

The DBpedia URI assignments that were automatically attached by TagMe!
were validated by hand so that the data set on which we performed the experiments did not contain wrong URI assignments. The cleaned data set finally
contained 360 distinct DBpedia URIs referenced by tags and 92 DBpedia URIs
referenced by categories. For 17% of the tag assignments there did not exist a
correct DBpedia URI mappings.

Regarding relevance assessment, we selected 24 representative tags (according
to the usage frequency) as keyword queries and asked TagMe! users to rate the
relevance of a picture to a given query on a five-point scale: yes, rather yes,
rather no, no, and dont know. Thereby, we obtained for each of the query all
relevant resources in the TagMe! data set. On average, for each query there were
nearly 30 resources in the data set that were rated as relevant (yes). However,
four of the queries had below 10 relevant (yes) resources. For all the 24 tag-based
queries there was a proper DBpedia URI available in the data set.

Method and Metrics. The ranking task defined at the beginning of the section requires the ranking strategies to rank those resources at the top of the
ranking that are most relevant to the given query. We analyzed the ranking algorithms presented in Section 3 that are applicable to the TagMe! context folk-
sonomy: FolkRank, Category-based FolkRank (CategoryFolkRank), Area-based
FolkRank (AreaFolkRank), and URI-based FolkRank (DBpediaFolkRank). Each
ranking strategy then had to compute a resource ranking for each of the 24 representative keyword queries. We measured the quality of the rankings using the
precision at rank k (P@K ), which represents the average proportion of relevant
items within the top k. For our experiment we considered an item as relevant iff
the average user judgement is at least yes.

In addition to the FolkRank-based approaches we also consider a ranking
algorithm (denoted as F+C+A+D) that combines all four ranking strategies:
Given the list of weighted resources as computed by the different algorithms it
utilizes the average ranking weight to rank the resources.

F. Abel et al.

We tested the statistical significance of our results with a two-tailed t-Test
and a significance level of  = 0.05. The null hypothesis H0 is that some strategy
s1 is as good as another strategy s2, while H1 states that s1 is better than s2.

Results. Figure 3 shows the precisions (P@10 and P@20) of the different ranking strategies. Those algorithms that make use of contextual information embedded in the folksonomy perform better than the traditional FolkRank algorithm
that considers only the tag assignments without any additional context. Between
DBpediaFolkRank and FolkRank there seems to be no remarkable performance
difference. However, as noted in Section 4.2, the DBpediaFolkRank is operating
on 215 fewer tag assignments than the other algorithms. It is thus remarkable
that DBpediaFolkRank still performs slightly better than FolkRank. The CategoryFolkRank performs good results especially for the precision within the top
20 (P@20). Hence, the hypothesis raised in Section 3.2 seems to hold: Category
assignments can be used to relate resources. By exploiting the category context,
the algorithm detects relevant resources that are not directly related via tag assignments to the given query. The AreaFolkRank algorithm, which exploits the
size and position of spatial information attached to the tag assignments, iswith
respect to P@10the best algorithm among the core ranking strategies (P@10
= 52.9%). However, there is no significant difference between the FolkRank and
the Area-, Category-, and DBpedia-based FolkRank.

k
@
n
o
i
s
i
c
e
r

0,7

0,6

0,5

0,4

0,3

0,2

0,1

P@10
P@20

+ A +

F +

A re a F olk R a n k ( A )

C ate g ory F olk R a n k ( C )

D B p e dia F olk R a n k ( D )

F olk R a n k (F)

Fig. 3. Precisions of FolkRank-based search algorithms

The strategy F+C+A+D, which combines all four core ranking strategies
(i.e., FolkRank, CategoryFolkRank, AreaFolkRank, and DBpediaFolkRank), is
the most successful strategy. It performs significantly better than the FolkRank
algorithm regarding the P@10 and P@20 metrics. The combined strategy improves the precision of FolkRank by 20.0% and 21.4% with respect to the precision within the top 10 and top 20 respectively.
?

?

?
i

i

n
o
s
c
e
r
p

 0.8

 0.7

 0.6

 0.5

 0.4

 0.3

 0.2

 0.1

FolkRank (F)
DBpediaFolkRank (D)
AreaFolkRank (A)
CategoryFolkRank (C)
F+C+A+D

 0.2

 0.4

 0.6

 0.8

recall

Fig. 4. Precision-recall diagram of FolkRank-based search algorithms

Figure 4 depicts the precision-recall diagram of the different FolkRank-based
ranking algorithms. It underlines that the context-based approach, which combines FolkRank with the strategies that exploit the category, area, and DBpedia context, is the best performing ranking strategy as it results in the best
precision-recall ratio. In the low recall interval, i.e. within the very top of the
resource rankings, FolkRank can compete with the other algorithms. For exam-
ple, the probability that a relevant resource appears at the first rank is 75.0%
for FolkRank and 79.2% for the combined strategy. However, with higher recall
values, the precision of FolkRank drops significantly stronger than the one of
the Category-based FolkRank or the combined strategy F+C+A+D: At a recall level of 0.5 the precision of F+C+A+D and CategoryFolkRank is 0.29 and
therewith significantly higher (approx. 45%) as the precision of FolkRank.

In summary, the exploitation of context embedded in the folksonomy is beneficial for ranking resources. While the size and position of the area helps to
improve the precision particularly at the top of the resource rankings, the DBpedia and category context successfully contribute to improve the recall. And
by combining the different context types we are able to improve the ranking
performance of FolkRank significantly.

4.3 Learning Tag Relations

In addition to the exposed benefits in terms of search we hypothesize that the
additional context is also helpful for learning fine-grained relations among tags.
Different studies showed already that it is possible to learn hierarchical relations
among tags by exploiting traditional folksonomy structures. For example, Halpin
et al. extract sub-class relations by exploiting correlations between tags induced

F. Abel et al.

by co-occurrence of tags [14] and Mika mines narrower and broader concepts by
detecting communities and sub-communities within the tripartite graph spanned
by traditional folksonomies [15] (cf. weighted tripartite graph in Section 3.1).
Others apply association rule mining to detect super-sub-concept relations [16].
Given tags from Flickr, Schmitz detects tag pairs where one tag subsumes the
other [17].

In this section we analyze the impact of the additional context types on learning tag relations. Therefore, we again apply the ranking strategies introduced in
Section 3. However, instead of ranking resources we analyze their performance
regarding ranking tags:

Tag Ranking Task. Given a tag t, the task of the ranking strategy is to
compute a ranking of tags so that tags that are most related to t appear
at the top of the ranking.

We run our experiments on the TagMe! data se as described in Section 4.2.
For each of the 610 tags the ranking algorithms had to perform the ranking
task defined above. For each ranking algorithm, we then accumulated the 610
rankings of tags to obtain a global ranking of tag pairs (ta, tb), where the ranking
score was computed as the sum of the FolkRank of tb, when searching with ta,
plus the FolkRank of ta, when searching for tb (cf. Section 3). We measure the
success of the ranking strategies by means of the precision within the top k
ranked tag pairs, i.e. the percentage of tag pairs within the top k that are
from our perspective and without considering the tag usage but just the words
themselvestruly related to each other.

n
o
i
s
i
c
e
r

0,8

0,6

0,4

0,2

other

equals

has

is-a

FolkRank (F)

DBpediaFolkRank (D)

AreaFolkRank (A)

CategoryFolkRank (C)

F+C+A+D

Fig. 5. Precision of tag pairs successfully classified as related as well as the distribution
of relation types for the different strategies within the top 20
?

?

?
Results. Figure 5 shows the average performance of the different ranking strategies for identifying tag relations. When applying the ranking strategies as described above, the CategoryFolkRank is the most successful strategy as all tag
pairs within the top 20 of the ranking are truly related to each other. FolkRank
and the URI-based FolkRank (DBpediaFolkRank) perform worse as 20% and
respectively 50% of the returned tags are really related. The bad performance
of the URI-based FolkRank might be explained by the URI mapping: the actual
FolkRank is computed on basis of the URIs to which the tags were mapped
and the ranking of tag pairs is constructed by mapping the URIs back to tags.
The latter step causes that errors are propagated, for example, the non-related
tag pairs (pink rose, bird), (red rose, bird), (white rose, bird), and (rose, bird),
which are each mapped to (dbpedia:Rose, dbpedia:Bird), are each wrongly ranked
at the same high level whereas FolkRank just ranks (rose, bird) at a high rank.
AreaFolkRank as well as the combined approach (F+C+A+D) perform very well
with a precision of 90% and 85% respectively. The combined strategy is negatively influenced by DBpediaFolkRank: omitting DBpediaFolkRank (F+C+A)
leads to a precision of 95%.

Further, we examined the kind of tag pairs that were identified by the algo-

rithms. Therefore, we considered the following types of relations.

 is-a: This relation refers to a sub/super-class or instance-of relation. For

example: church is a building, horse is an animal, etc.

 has: Denotes that an entity consists of (is part of) or contains (is contained

in) another entity. For example: car has wheel, sky contains cloud, etc.

 equal: Relation stating that two tags refer to the same thing (cf., sameAs relation in OWL). For example: spinne equals spider, marienk afer equals
ladybug (German/English).

 other: Other types of relations such as instances that belong to the same
class or instances that care part of the same concept. For example: batman
and superman, rooftop and fa cade, etc.

Figure 5 summarizes the types of relations that exist among the tag pairs returned within the top 20 ranking of the different ranking strategies. For example,
regarding CategoryFolkRank 60% of the tag pairs can be typed as is-a relation,
30% as has relations and 10% denote other types of relations while tags that
refer to equal concepts do not appear at the top of the ranking. The high frequency of is-a relations can possibly explained by the usage style of categories
(cf. Section 4.1), i.e. categories are more broader and were often used to classify
tags. The AreaFolkRank identifies all types of relations and is the strategy that
identifies the most tag pairs that refer to equal concepts (25% of the tag pairs
are typed as equals): different tags assigned to the same area of an image are
thus likely to refer to the same concept.

In summary, the strategies that exploit the area and category context of tag
assignments perform better (12.5% and 25% respectively) than the strategy that
just considers the traditional tag assignments to identify related tags. Further,
the exploitation of categories most often induces super/sub-class relations between tags while the area context has potential to infer sameAs relations.

F. Abel et al.

5 Conclusion

In this paper we proposed an approach for multifaceted tagging and a corresponding model for embedding context into folksonomies. We implemented the
model into the TagMe! system, a tagging and exploration interface for Flickr
pictures that introduces three types of context: spatial information, categories
and semantic meanings (URIs). We further developed and evaluated different
search and ranking algorithms that exploit the contextual facets of the folkson-
omy. The algorithm that considered the different contextual facets significantly
improved the precision of the baseline FolkRank algorithm by 20.0% and 21.4%
with respect to the precision of the search result rankings. Relying on these
results we demonstrated that contextual information can significantly improve
search. Moreover, we were able to apply the ranking strategies for identifying
semantic relations among tags. We showed that the exploitation of spatial information and categories attached to tag assignments improves the precision of
inferring related tags by 12.5% and 25% respectively.

Acknowledgments. This work is partially sponsored by the EU FP7 project
GRAPPLE (http://www.grapple-project.org/).
