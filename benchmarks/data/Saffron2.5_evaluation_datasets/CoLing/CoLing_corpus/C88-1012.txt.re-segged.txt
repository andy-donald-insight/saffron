Software Support for Practical Grammar Development
Bran BO GURAEV , John CARROLL Ted BRISCOE , Claire GROVER ~
Computer Laboratory , University of Cambridge
Pembroke Street , Cambridge CB23 QG , England
Department of Linguistics , University of Lancaster
Bailrigg , Lancaster LA1 4YT , England

Even though progress in theoretical linguistics does not necessarily rely on the construction of working programs  , a large proportion of current research in syntactic theory is facilitated by suitable computational tools  . However , when natural language processing application seek to draw on the results from new developments in theories of grammar  , not only the nature of the tools has to change , but they face the challenge of reconciling the seemingly contradictory requirements of notational perspicuity and efficiency of performance  . 
In this paper , we present a comparison and an evaluation of a number of software systems for grammar development  , and argue that they are inadequate as practical tools for building wide-coverage grammars  . We discuss a number of factors characteristic of this task  , demonstrate how they influence the design of a suitable software environment  , and describe the implementation fasy stem which has supported efficient development of a large computational grammar of 
English ?1 . Tools for Grammar Development A number of researzh projects within the broad area of natural language processing  ( NLP ) and theoretical linguistics make use of special purpose programs  , which are beginning to be known under the general term of " gm  . nmar development environments " ( GDEs ) . 
Particularly wellknown examples are reported in Kaplan  ( 1983 )   ( see also Kiparsky ,  1985) , Shieber (1984) , Evans (1985) , Phillips and Thompson (1985) , Jensen et al (1986) and Karttunen (1986) . In all instances the software packages cited above fall in the class of computational tools used in theoretical  ( rather than applied ) Projects . 
Thus Kaplan's Grammar-writer's Workbench is an implementation faparticular linguistic theory  ( Lexical Functional Grammar ;  , Kaplan and Bresnan , 1982); similarly , Evans ' ProGram incorporated an early version of Generalized Phrase Structure Grammar  ( GPSG , Gazdar and Pullum ,  1982) , whilst PATR-II is a " virtual linguistic machine  "  , developed by Shieber as a tool for experimenting with a variety of syntactic theories  . 
These systems differ in their goals . Particular implementations of a theory may be used for observing how theory-internal devices interact with each other  , or to maintain internal consistency as the grammar is being developed  . On the other hand , formalisms for encoding linguistic information in a uniform way underpineffm~s to compare and evaluate alternative linguistic theories  ( Shieber ,  1987) . Neither typeOf system is adequate to the task of grammar development on a largescale or for incorporating such a grammar into a practical NLP system  , due to factors such as efficiency of encoding ( largely neglected in such systems ) or verbosity and redundancy of the formal notation  . Within the frameworks of their aecomodating projects  , these are innoway inadequacies of the computational tools  ; still , the applicability of the tools remains limited outside the strictly theoretical concem  . 
developed at Yorktown Heights ( Jensen et al ,  1986) . Both are capable of impressive coverage and this is  , to some extent , due to the more flexible formalisms employed . A common feattne of these formalisms is that they all fall prey to what Kaplan  0987  ) refers to as " the procedural seduction " of computational linguistics : whatever the basis for the notation is  , it incorporates a handle for explicit intervention into the interpretation f the grammar at hand  . 
Sometimes the nature of the task for which the g ~ammar is being developed justifies a form ~ J notation in colporating ' hooks ' for explicit procedures  . Thus a number of matchine translation ( MT ) projects ~ especially ones employing a ~ ransfer strategy  , make use of format systems for grammar specification  , which , in addition to mapping surface strings into con ~esponding language structures  , identify operations to be associated with nodes and/or subtrees  ( Vauquois &
Boitet , 1985; Nagao et al , 1985).
In general , the effects of the temptation to allow , for example , the EVAL uation of arbitrary LISP expressions on the ares of the ATN or the addition of " procedural programming facilities " to the rule -based skeleton of  1BM's PLNLP have been discussed at length in the recent literature addressing the issues of declarative formalisms from a theoretical perspective  ( see Shieber , 1986 a , and references therein ) . 
However , from the point of view of developing a realistic grammar with substantial coverage  , the opening of the procedural ' backdoor ' , while perhaps useful fo : ' patching ' the inadequacies in the linguistic theory during the exercise  , can turn the whole process of grammar development and maintenance into a norgea ~ isational ightmare  , asside effects accumulate and ripple effects propagate  . 
A ~ parate problem with allowing procedural attachment into the grammar formalism stems from the inevitable commitment to a particular version of a particular theory  . Even w be nade liberate f for t is made to develop a flexible and general framework capable of accomodating a range of ' underlying ' linguistic operations  , such a framework is bound eventually to become inadequate  , especially as modem theories of grammar ( strive to ) become more declarative and tend to make reference to larger bodies of knowledge  . A case hapoint is the ARIANE system ( Vauquois & Boitet ,  1985 ) : even though it was designed as a completely integrated programmaing environment  , with the aim of enabling implementation of , and experimentation with , different linguistic theories , in reality the system has been unable to cope with radically new grammatical frameworks and computational strategies for text analysis  . 
The question then arises of the optimal way of developing a practical grammar  . This paper will report on our experience in building such a grammar  , with a particular emphasis on how a number of constraining factors have influenced the design and implementation of the software tools for supporting the linguist's work  . 
2. Design Considerations
On the other hand , a number of syntactic formalisms have been used to develop wide-coverage grammars for use in practical NLP systems  . The best known of these is the Augmented Transition Network formalism due to Woods  ( 1970 )  . More recent examples are the DIAGRAM grammar ( Robinson ,  1982 ) of SRI's TEAM natural language interface ( Grosz et al ,  1987 ) and the PEG grammar Currently with the IBM ( UK ) Science Centre . 
The work described here was supported by research grant  GR/D/87321 from the UK Science and Engineering Research

For the last two yearn we have been engaged in a project aimed at substantial grammar development  , as part of a larger effort to produce an integrated system for wide-coverage morphological and syntactic analysis of English  . The overall objectives of tile combined effort arc described in a number of papers  ( see Russelle tat . , 1986; Phillips arid Thompson ,  1987 , and Briscoe et al ,  1987) . We aimed to achieve comprehensive coverage of English in two years  , using only one linguist and one programmer full -time  ; the complete natural anguage toolkit was to be made available to the research community outside the immediaten viromnent whet x ~ the grammar was being developed  . 
Consequently , the software support for the linguist had to exhibit a number of characteristics to encourage high productivity  , Particularly rewesentatlon , ease of use and robt , stness of p of o~mance . 
Current theories of syntax have much to otter to practical systems  ; such theories , however , are under coustant development . For veu?pragmatic reasons , a project like outsought to exploit a developed theory  , For equally pragmatic reasons , it ought to be able to take advantage both of developments within the particular theory and of the evolving treatment of wuious linguislie phenomena  . The question of tim relationship between the thcore tic~dRn'malism and the formalism adopted m implement a practical grammar based on that theory then becomes of ceutraliml  ; ~) rtance . Fori ~ stance , it would bc inappropriate to adopt a direct imp ! ementation of  , say GPSG , since tire rate of change of the theory itself is likely to make such an implementation obsolete  ( or at least incapable of irmorporating subsequent linguistic analyses  ) quiterapidly- . file bd cflifc span of Ewms ' ProGram is a case in point  .   ( ) nly when theou and grammar are beiug developed in very close collaboration  , or even w if l t in the same group --- as in , for example , the ) ewlctt . -Packard NLP project , whose corners to tm is the linguistic frame wolk of Head-Drivent'hrase Structm'e Grannnar  ( Proudian and Pollard , 1985; Polla Naud Sag , 1987) -- could such ~ ulap proach work . 
lowever , itrm Jeffint like om " a , it is of critical impmt auce to strike the right balance between i  ) eit~g failhfu\[to the spiritnfatbeo~ymid being uncommii:ted with respecto a particular vcr sien of it  , as well as remaiuing tlexiNe within tile overall ii anl cwoN of ' close ' or related theories  . Attempts to be too flexible , however , arc iikely to lead t it situations of w qich the PATII  . .II system is an example : the ability to model a wide t ' rage of theoretical devices and mr  ( lyrical ti ' amcworksipenalised by its unsuitability " for any major attempt at building natural language rannnars "  ( Shicber ,  1984:364) . 
3o Our App ~' ot 4ch
For a varict ~/ of rea: ; on s0 iuiollectual ~ aid pragmatic , we chose to carry out the ~: rammar dev clopnmni withiniheli ' a mew of l ~ of GPSG  ( see Bogm ' aev ,  1988 , iir mine detail ~;) . Ihiscoe et al ( 1987 ) discuss further stone o : ~' the major issues concerning tile dynamic int cractiou between the v l t l ' i o n s r t f l e  ty0es lind constrait ~ lsi ~ (  ; PSGa ~ d their impact on themple memability of the fl~co~y presentediu Gazdar et al  .  (1985) . Frnmflm practical pempcetiw o1' computational grammar development , lbercare we impmtant COHCll . ISiOIIS . In order to achieve implementability , tire interpretation of the GPSG lonnaiism ~ equires a number of msdcfions  . In order to provide flexibility and expressive power  , the lbn ~ alism itself needs an mnber of extensions  . In this light , the design of software support forgr ~: urunar development becmnes similar to the task of designing a special t in  , pose , high level computer hnlgt lage , lollowed by an h~qfl~mentatkm of an interactive programming o Miomnent for it  . 
3, 17 he Formalism
The gmmma , " specification formalism , presented in detail in Can'o\]l et al (1988) , i  ~ ; inflintametaogrummatic N formalism which avoids ti redirect implement a timrof one particular synlactiel heory  . While remaining close to then f : ~ talion of GPSG , this formalism is nonethc ! es:~capable of specifying a range of syntactic thcoxie  . , ', and grammars . The specific choices during he design of such language have been heavily influenced by tile desire to be moderately committed to a theoretical framework without being unrteeessafily constrained wit  ( f in that framework . Fielding the fight balance places out'system halfway between the extreme positions exemplified by ProGram and the Grammar  . .wliter~s Workbench , on the one hal (! , and PATR-II , ontire other . 
The recta-grammatic all brmalism is designed to sttpl ? ut a pariict dar model of grammar development  , suggested by , for example , Kay (1985) . We maintain clear separation between a recta -grammar  , which is " the seat of linguistic universals " ( Kay ,  1985:276) , and an equivalent ( in the sense that it describes exactly the same language  ) object grammar , coupled directly to the l ) alscr . The process of compiling the fonner into the latter constitutes the core of otlr GI  ) E . 
An nmber of iV(l'projects , also seeking substantial coverage , make a seemingly similar distinction between a source and object grammar-see  , for instance , ARIANE's static and dynamic ( or procednraI ) grammars ( Vanquois & Boitet ,  1985) . However , there are differences , tirsly in interpretation -- the dynamic grammar largely incorporates whatever execution strategy is employed l br transfer --  . and secondly illemphasis--a dynamic grammar is ( necessarily ) derived manually Ii'mnastatk:one . Such efforts , then , do not have the notion of recta-grammar compilation  , and consequently require less functionality from their suPtx  , rten vironments . We amplify this point below . 
Tim scparatiou between source and object grammars i the key to two of the eousiderations discussed in the previous section  . By stopping short of embodying a particular theory  , the fonnalism of the recta-grammar provides the linguist with an expressively flexible and powerful device Ibr grammar writing  . By assuming a parser , whose underlying operation is based on a restrictive version of unification  , the ohject gram , nat allows an efficient implementation . Morn specifically , the object grammar is made up of phrase structure rules with feature complexes as categories  ; parsing with it is based on flxed-arity , term unification . 
The recta-grammatical formalism is flexible and powerful  . For example , it in colporates rule types for explicitly specifying feature propagation patterns  , rather than ' hardwiring ' feature propagation i to tile interpretion of I he rules  ( as in GPSG )  , arid provides a variety of alternative rule formats  , for example , PSerID/LP rules , ( non)-linear , ( non)-lexieed metarules , and so forth . The metagrammar can be designed to be perspicuous  , flexible aud expressively powerful with little regardlor issues of computational cmnplexity because this complexity ' disappears ' during compilation into the object grammar  , 1 caving a well-defined , invariant and computationally tractable object grammar to be deployed at parse time  . The process of compilation is based on ordered application of the various types of metagrammaticalntle to a set of ' base'PS or ID rules  . 
3.2 The Environment
The questions of optimal software envirmm~ent fro ' supporting grammar development  , particularly in a rule-based fol an alism like ours  , are very similar to the questions of interactive support for program developmant  . A ~ an nber of special-pulpose tools have to be brought together in a lightly in zegrated's beli ' and organiscd around the core linguistic ' engine '  , which performs the reduction ( compilation ) of lneta-into object grammar . These tools must suport (1) rapid , incremental grammar development , (2) interactive granmar debugging , and (3) version maintenance and control . 
The grammar development environment incorporates a number of moduh's  , oLganised round the compilation process . In particular , tire core functionality is provided by a morphological analyser  , a parser lorihe object grammar , and a generator . Ti reuser interface consists of a comntalld line inteqgreter  , a number of special puqms eviewing modules for recta-grammatical constructs  , and a component for displaying parse trees on non -graphics terminals  . The system is designed to be completely portable and machine-independent  , which influenced tire deliberate choice not to use any advanced graphics facilities  .   ( These can incmporated if desired---indeed the system has been ported to both the Apple Macintosh and Xerox  1186 workstation )  . 
3.2.1 Detecting Overgeneration
The need lorapa ~ er fro ' grammar development is uncontroversial  ; it assists thclinguist in finding gaps in grammatical coverage  , checking the correctness of the syntactic description and weeding out spurious analyses  . Our parser provides facilities for viewing syntactic descriptions in a variety of ways and batch parsing a growing corpus of examples to check the consistency of the develop in grammar  . Less obvious is the utility cfa generator . Karttunen & Kay ( 1 985:2950 discuss the use of such a componento generally explore the predictions made by a grammar concerning particular constructions  . 

However , their approach would not highlight the roles involved in overgcneration  , particularly as the granlmar grows in size . Our generator allows the linguist to guide generation either implicitly  , by specifying rule sets of interest , or explicitly , by directly manipulating ( partial ) syntax trees . For example , if the focus of interest is relative clauses , then she can reques the GDE to ignore inappropriate rules  ( for example , those relating to coordination ) and ask for automatic generation of examples with a specified maximum length whose root node is that appropriate to dominate a relative clause  . Alternatively , she can build a syntax tree interacfively by selecting the rule to apply from a menu of rule names generated automatically on specification of the next node to expand  . Combining the two approaches allows automatic generation  , fcr example , of specific types of relative clause ; generation after building the partial syntax tree : r  , ei
NP\[+wh\]S\[SLASHNP\]would produce oNect relative clanses such as : who every cat l iked whokim likes e " Automatic generation is a more natural technique for aiding discovery of ovcrgen cration than parsing  , because with the latter it is necessary for the linguist to guess where overgeneration may occur  . 
3.2.2 Efficient Grammar Compilation
The major potential bottleneck in grammar development is compilation  , since changes to the grammar can only be fully evaluated by parsing or generating relevant examples  . Complete grammar compilation is increasingly time consuming as the grammar grews  ; however , it does not have to he performed that often , given the ability to perl brm incremental grammar compilation  . Tileterm " incremental " here is taken to mean both as little as possible and as rarely as possible  . By analogy with high-leve languages for rapid prototyping  , where disruptions of the program development cycle a leavoided at all costs  ( consider , for instance , a synchronous garbage collection in Lisp ) , the intrusion of the grammar compiler into the linguist's work is kept to a minimum  . Firstly , gran~mar compilation takes place ' on demand ' , so that the user need never worry about having to explicitly invoke it  . 
Secondly , even though rules in large grammars tend to interact quite closely  , it is rarely necessary to recompile the whole source every time an individual rule is changed  . The GDE software caches compiled data to minimise the effort required during recompilation  , and , by maintaining a model of the dynamic dependencies between a cluster of interconnected rules  , it ' . sable to ensure that the minimum amount of cached data is discarded when the grammar is changed  . A consequence of this design is that individual components and rules at source level can be declared  , and redefined , in any order . For example , the role
S-->NP , VP.
nmy be defined before it is even decided which features make upSs  , NPs and Vps . The user may postpone this decision until she actually ~ vant so use the ride for parsing a sentence  . This experimental style of d cv clopm cnt parallels even turther that promoted by highly interactive systems  , since it allows easy experimentation with small fragments of the grammar  , without requiring , for instance , compilation of the complete source or loading of all declarations  . 
Incremental compilation is made possible by designing the grammar compiler as a modular unit  , comprising separate components for the interpretation of each of the statementypes  ( for example alias declarations , feature propagation rules , or feature default statements ) in the source ( metagrammatical ) lnguage . This has made it possible to combine these components into an integral package for efficient grammar compilation  , as well as mincorporate them into individual commands  , directly available to the linguist . 
3.2.3 Effective Grammar Debugging
There are two further important consequences of our grammar compilation design  . The first is the ability to monitor the effects of grammar expansion  , by selectively filtering subsets of source grammar rules through specific compilation procedures  . So , for example , the effects of a particular metarule can be assessed by applying it to a specified subset of ' base'rules  . The second is the crucial capacity of source level debugging  . In a development model which distinguishes between meta-and object grammars  , efficient work is only possible if l % ulty grammar rules can be traced back to their original source in the recta-grammar  . In our system , the output of a single command is usually sufficiant to pinpoint an error in the source  . Nodes in parse trees are labelled with the name of the gramnm rule licensing the local tree rooted at that node  . Unlike some other systems , such as ProGram , the name of an object grammar talcal ways uniquely encodes the complete derivation path of the rule  . Thus , for example , the rule name VP/TAKES NP ( PASSIVE /+ ) uniquely identifies the rule derived from the application of the PASSIVE metarule to the rule introducing vps taking a single NP complement which requires a PP'agent'phrase  ( distinguished from the version without the PP by /+  )  . "I husfaults in object grmnmar rules can easily be traced back to their metagrammatical source  . 
The use of unique rule names enhances the ability to view all or parts of the recta-grammar  , as well as the results of partial compilation , along a number of dimensions , by means of patterns , with wildcards ranging over rule types and the names of rules  . To facilitate this type of grammar browsing , arbitrary view requests can be constructed by using patterns e ompositionally  ; thus in a particular grammar of ours , the patteru
VP/PHRASAL * ( * ) &= NULL refers to the collection of VP rules introducing phrasal verbs which have had metarales applied to them resulting in the imroduction of the feature NULL  . View requests may be further modified by indicating the level of detail required  , i . e . whether the rules should be shown in their original source form  , or partially or fully compiled . 
Viewing parse trees particularly facilitate source level debugging  . 
Displaying a tree from the perspective of role names associated with the nodes  , for example that resulting from parsing the phrase'men and women': 

CONJ/NAC ONJ/NB men and women can reveal whether ight or wrong rules get activated  . Fully displaying the category structures on tree nodes  ( Figure 1 ) gives an indication whether feature propagation regimes have been specified correctly  . 
Viewing the gross structure of the tree , in this case ( ( men )   ( and women ) ) suggests whether the parse is correct or not ; furthermore , in the case of multiple parses , nodes with common analyses can be factored out , thus helping localise the source of the error . 
Errors are only dealt with at source level ; editing facilities incorporate knowledge about file syntax of all constructs in the metao grammatical formalism The process of editing is integrated with extensive bookkeeping  , which frees the grammar writer from the task of explicitly maintaining version backups and checks for consistency of the object grammar with respecto a particular meta-grmnmar  . 
The command interpreter is sensitive to work context and is capable  , at any stage , to prompt for input appropriate to the current state in tile grammar development process  . For example , if the linguist has parsed a sentence which resulted in three analyses  , she can display the category associated with any node of any of the analyses by typing 
N\[-POSS , + PLU ,- PRO,
SUBCATNULL , PN-\]

N\[-POS ~ , + PLU , -PART , -PRO , + COUNT , CONJ NULL ,  . 
SUBCATNULL , NFORMNORM , PER3,PN-\]
N\[-POSS , + PLU , -PART , -PRO , + COUNT , CONJAND , SUBCATNULL , NFORMNORM , PER 3 , PN-\]menN\[ . .-POSS , + PLU , - PART , - PRO , + COUNT , SUBCAT
NULL , NFORMNORM , PER 3 , PN-\]~d\[SUBCATAND , 
CONJN+\] women
N\[-POSS , + PLU , - . PART,-PRO,+COUNT , SUBCAT
NULL ~ NFORMNORM , PER3,PN-\]
Figure 1 . Fully Detailed Parse Tree for ' men and women ' . 
a single command lequiring two arguments . Alternatively , by just typing carria \ [ ~ erturn after the command name  , she can reques the GDE command interpieter to prompt for values t br these parameters by displaying menus of values only applicable to the current work context  , for e>mmple > viewRules/Full/CA tegory .   . .? Catego~
Paxsetree number ( I to 3) ? I
Appropriate tree nodes are : i . N/COORD'I2 . CONJ/NA 3 . men4 . CONJ/NB 5 . and 6 . women
Which ( in e(give its number ) ?1
IN + , w- . , BAR 0 , SUBCATNULL , PRD@544 , NF Ot ~ M@545 , PER@546 , PLU + , COUNT@547 , CASt ' ,  @548 , PN- , PRO- , PART@5 49 , POSS-\]In this fashion , potentially highly-ambiguous commands , uch as view are localised to the current context . One of the unexpected consequences of this design is that it makes the system relatively accessible to inexperienced users and has made t casible the use of the system t breducational purposes  . 
4. Collcusiol ~
The desig , of a software system for grammar development clearly depeuds on  01e linguistic choices for , aud pragmatic requirements of , the NLP task . It is not surprising timt a number of MT efforts , motivated by the need tbrst ~ bstantial coverage , have implemented their own GOEs . Pethaps file most comprehensive of these is the METAL-SHOP research environment of the METALMT system  ( White ,  1987) , wl tich includes facilities for selective viewing of parse trees  , tracing of the grammar rules as they are invoked by the parser  , and editing the grammar at source . The system makes , and conforms to , a clear-cat distinction between descriptive grammar rules and separate mechanisms for their interpretation  , t lowever , since the formal model use distitat of augmented phrase structure grammar which does not undergo auy compilation into object grammar  , the fimetionality of the METAL-SHOPGDE , while adequate in the practical context it is used in  , remahts below that of the system we describe . 
Even though we have worked within a particular theoretical fi'~wue work  , thole are genoralisations to be made concerning practical grammar development within the framework of any of the current syntactic the e  , ties . In particular , it is important to realise that software support br : in chatask does not imply  , arm should not be reduced to , tile provision of ' a set of computational tools for e  . g . gtanlmar editing , in spocting th 4; output from a parser , or comfortably interacting with the system . .Ln effozt of this scale crucially requi~es critical evaluation of the u  , deriylngling ntstle theory , so that the right combination o\[pragmatically motivated and linguistically correct modifications and revisions is ~ bund and implementexl  , We are not alone in our findings ; our approach to making computational sense of GPSG is similar to the  ( unimplemenled ) plv posals of Shieber ( 1986b ) and Ristad ( 1987 )  . 
The system described above is fully implemented and running on a number of hardware configurations  . A wide-coverage grarm nar involving two woman/yeal ~ of effort has been developed  . A set of programs in Common Lisp , together with a user manual ( Carroll et al ,  1988 ) and description of our grammar ( Grover et al ,  1988 ) are available through the Artificial Intelligence Applications Institute in 


Boguraev , B .   ( 1988 ) ' A natural language toolkit : reconciling theory with practice ' in Rohrer C  . & U . Reyle ( ed . ) , Natural Language Parsing and Linguistic Theories , Reidel , Dordl~echt , pp .  95-130 . 
Briscoe , E . , C . Grover , B . Boguraev & J . Can'oll ( 1987 ) ~ A formalism and environment for the development of a lalge grammar of English '  , Proceedings of lOth International Cot ~ ference on Artilicial Intelligence  , Milan , Italy , pp .  '103-'/08 . 
Carroll , J . , B . Boguraev , C . Grover & E . Briscoe ( 1988 ) The Grammar Development Envb ' onment : User Manual  , Technical Report no .  127 , Computer Imboratory , University of Cambridge . 
Evans , R .   ( 1985 ) ' ProGram---a development tool for GPSG grammars '  , Linguistics , vol . 23(2), pp .  213-243 . 
Gazdar , G . , E . Klein , G . Pullum & I . Sag (1985) Generalized Phrase Structure Gratmnar , Oxlbrd : Blackwell and Cambridge : Harvard
University Press.
Grover , C . , E . Briscoe , B . Boguraev & J . Carn 311 ( 1988 ) The Alvey Natural Language Too & Project Grammar : A Wide-Coverage Computational Gratrmlar of English  , Lancaster Working Papers in
Linguistics , no . 47.
Grosz , B . , D . Appelt , M . Douglas & F . Pelcira (1987) " II ~ , AM : An experiment in the design of transportable natural language interfaces '  , Artificial Intelligence , vol . 32(2), pp .  173-244 . 
Jensen , K . , G . Heidom , S . Richardson & N . Haas (1986) PLNLP , PEGa~ulCRITIQUE : ?7tree contributions to computing in the ht#nanities , Research Report RC1 1841 , Computer Science Department , IBM TJ Watson Research Center , Yorktown Heights , 

Kaplan , R . & J . Bresnan ( 1982 ) ' Lexical-functional grammar : a formal system for graramatical representation ' in J  . Bresnan ( ed . ) , The Mental Representation of Grammatical Relations  , MIT Press , 
Cambridge , MA , pp . 173-281.
Kaplan , R .   ( 1987 ) ' Three seductions of computational psycholinguistics ' in P  . Whiteloek et al(ed . ) , Linguistic Theory and Computer Applications , Academic Press , New York , pp .  149-188 . 
Karttunen , L .   ( 1986 ) ' D-PATR : A development envil ~ nment for unification-based grammars '  , Proceedings of llth International Congress on Computational Linguistics  , Bonn , Germany , pp .  74-80 . 

Karttunen , L . & M . Kay ( 1985 ) ' Parsing in a free word order language ' in Dowty  , D . , L . Karttunen & A . Zwicky ( ed . ) , Natural Language Parsing , Cambridge University Press , Cambridge , pp .  279-306 . 
Kay , M .   ( 1985 ) ' Parsing in functional unification grammar' in Dowty  , D . , L . Karttunen & A . Zwicky ( ed . ) , Natural Language Parsing , Cambridge University Press , Cambridge , pp .  251-278 . 
Kiparsky , C . (1985) LFG manual , Manuscript , XEROXPalo Alto
Research Center , Palo Alto , CA.
Nagao , M . , Tsujii , J . & Nakamura , J .   ( 1985 ) ' The Japanese Government Project for Machine Translation '  , Computational
Linguistics , vol . 11(2), pp . 91-110,
Phillips , J . & H . Thompson ( 1985 ) ' GPSGP--A parser for generalised phrase structure grammars '  , Linguistics , vol . 23(2), pp .  245-261 . 
Phillips , J . & H . Thompson ( 1987 ) ' A parser and an appropriate computational representation for GPSG ' in Klein  , E . & N . 
Haddock ( ed . ) , Cognitive Science Working Papers , Centre for Cognitive Science , University of Edinburgh . 
Pollard , C . & I . Sag (1987) Head-driven Phrase Structure Grammar , CSLI Lecture Notes Number 12 , CSLI , Stanford , CA . 
Proudian , D . & C . Pollard ( 1985 ) ' Parsing head-driven phrase structure grammar ' , Proceedings of 23rd Annual Meeting of the Association for Computational Linguistics  , Chicago , IL , pp .  167-171 . 
Ristad , E .   ( 1987 ) ' Revised generalized phrase structure grammar ' , Proceedings of 25th Annual Meeting of the Association for Computational Linguistics  , Stanford , CA , pp .  243-250 . 
Robinson , J . (1982) ' DIAGRAM : A grammar for dialogues ' , Communications of the ACM , vol . 25(1), pp .  2747 . 
Russell , G . , S . Pulman , G . Ritchie & A . Black ( 1986 ) ' A dictionary and morphological analyser for English '  , Proceedings of 11th International Congress on Computational Linguistics  , Bonn , 
Germany , pp . 277-279.
Shieber , S .   ( 1984 ) ' Th ~ design of a computer language for linguistic information '  , Proceedings of lOth International Congress on Computational Lingu:stics  , Stanford , California , pp .  362-366 . 
Shieber , S .   ( 1986 a ) An Introduction to Unification-based Approaches to Grammar  , CSLI Lecture Notes Number 4 , CSLI , Stanford , CA , and University of Chicago Press . 
Shieber , S . (1986b )' A simple reconstruction fGP3G' , Proceedings of llth International Conference on Computational Linguistics  , 
Bonn , Germany , pp . 211-215.
Shieber , S .   ( 1987 ) ' Separating linguistic analyses from linguistic theories ' in P  . Whitelock et al(ed . ) , Linguistic Theory and Computer Applications , Academic Press , New York , pp .  136 . 
Vauquois , B . & Boitet , C .   ( 1985 ) ' Automated Translation at Grenoble University ' , Computational Linguistics , vol . 11(1), pp .  2836 . 
White , J .   ( 1987 ) ' The research environment ill the METAL project ' in Nirenburg  , S . ( ed . ) , Machine translation : Theoretical and methodological issues  , Cambridge University Press , Cambridge , 
UK , pp . 225-246.
Woods , W .   ( 1970 ) ' Transition et work grammars for natural anguage analysis '  , Communications of the ACM , vol . 13(8), pp .  591-606 . 

