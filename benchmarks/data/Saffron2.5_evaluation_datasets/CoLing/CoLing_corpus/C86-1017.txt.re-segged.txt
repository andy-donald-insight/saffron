S$I : Mctura 1 Corre Aponf Jet \] GeS ~ ec\[f Ic_atj O0_#DvLEonmer~ 
Yongfeng YAN
Grouped ' Etudes pour la Tradl Jctlon Automatlque 

B . P .68
Unl verslty of Grenoble
3840 2 Saint Martlnd'H ~ res


This article present stile Structura l Correspondence Specl fl cat lonEnvi ronment  ( S ( ' SE ) being Implemented at
GETA-
The SCSE is designed to help linguists to develop  , consult and verify the SCSGr'alt ~ nars ( SCSG ) which specify Ilngulstic models . It Integrates the teclln 1 clues of ' databases , structured edltors and language in ter preters  . We argue that formalisms and tools of speci fication areas Important as the specifi cation itself  . 
zNTROD_UCT tqN
For quite some time , It has been recognized that tile specifi cation Is very important intile deve lopment of large computer systems as well as the linguistic computer systenls  . But it ls very difficult to make good use of specification without a well de fined formalism and convenient tool  . 
The Structural Correspondence Specific at i on Gran ~ ar  ( SCSG ) is a powerful linguistic specific at ion Formalism  . the SCSGs were ftrst studied in S . Chappuy's thesis (1 , under the supervision of Professor B . VaLIqUOts . In their paper presented at Colgate Univers ity in  1985   6 SCSG was called Static Greener , as opposed to dynamic grammars which are executable programs  , because the 8CSG aims at specifying WI4AT the linguistic models are rather than IIOW they are calculated  , A SCSG describes all n qulst lc medel by specifying the correspondence between the va lid surface strings of words and the mult i = level structures or a language  . 
Thus , from a SCSG , one can obtain at the same tlme valid str lngs  , valid structures and the relatt on between them  . ASCSG can be used for the synthesis of ' dynamic gralr ~ lars  ( analyser and generator ) and as a reference for large linguistic systems  . An SOS Language ( SCSL ) has been designed at GETA , tn whl cll the SCSG can be \] l nearly writ ten  . 
The SCS Environment ( SCSE ) present edherets a compLIteraided SCSG deslgn system  . It wl11 allow lhlgulsts to create , modify , consult and verify their granlnars in a convenient way and therefore to augment their productivity  . 
Sect 1on I gives a outline of the system : Its a rchitecture  , prInciple , data structure and comdn and syntax . Section II describes them alrl function so f the system  . We conclude by gt vtn ga perspective for lu ther development sel'the system  . 
I = . ANOVER VIE WOF TI4E SYSTE_M1 . ARCHI\]ECTURE The SCSE can be logicall y divided tn five parts :  1 SCSG base 2   . monitor 3 . input 4 . output 5 . procedures The SCSG base consists of a set o f files Contalnlng tile grarrlnars  , lhebase has a hler archt ca \] structure . A treeform directory describes tile re lationship between the data of the base  . 
The monitor Is the interface between thesy s tem and the user  . It reads and analyses colT in and s from the input and then calls the procedures to execute the corml and s  . 
1he input i s the suppor t conta in ing the COlr rn and s to be executed and the data to update the base  . rhere is a standard input ( usually the keyboard ) from which the data and corml and ssllould be read unless an Input ls explicitly spec ified by a conln and  . 
The output is a suppert receiving the system 's dialogue messages and execution results  . There is a standard output ( usually the screen ) to which tile message and results should besent unless all output Is explicitly specified by a con~and  . 
The procedures are the mostirn portant parto f t l ~ e s y s t e n l  . It ls the execution of procedures that carr ies out a CO n~l and  . The procedures can communicate directly wtth the user and with other procedures  . 
2. THE_E . RJNCULE
An SCSE session begins by loading the origina l SCSG base or the one saved from the last Sess ion  , Then the monitor reads lines from tile com ~n and input and calls the corresponding procedures to execute the COmd~lands found  . When an SCSE session Isended by the colm ~ and " QUIT "  , the current state of tl qe base Is saved . The SCSG base can only be updated by the execut ion of comrll and s  , The original SCSG base contains two SCSGs : one describes the syntax of the SCSI_ and theo ther gives the correspondence between the di rector y's nodes and the syntactic unit so f the SCSL  . The first gralm larls read-only but the second one can be modified by a user  . 
This allows a user to have his prefered log ical view over the base's physical data  . These two grammars serve also as all Oil-l ine reference of the system  . 
Several Interactive levels can be chosen by the user or by the system according to the number of errors in the con~aapdlines  . The system sends a prc~npt message only when a " RETURN " lsmet in the CO~n and lines  . Sogee carlavoid prompt messages by entering several cen~n and s at a time  . 
; 3. DATAS:\[f ~ UCTURE
There are two data structure levels.
The lower one Is linear , supported by the host system . Tilebase Is a set of files containing a llst of strings of characters  . Tilebase carl be seen as a single string of characters thai : Is the concatenation of all linestn the ft\]es of the L lase so that tile structure is said to be l l near  . TIlls structure is the physical structure  . 
The higher one Is hierarchical , defined by the directory of the base . Tilebase is composed of a number of SCSGs ; each gral ~ ar contains a declaration sect Ion  , a rule ( chart ) sect I on .   .   . etc . and the components of a gran~nar ( declar at 1Ol1 , rules .   .   . etc ,) have their own structure . The hierarchical structure ts the logica l structure of the base  . 
The directory has a tree form . A node In the tree represents a logical data unit that ts its content  ( for instance a gran~nar )   . Every node has a type and a list of attr ibutes characterls lng the node's content  , rhelnter node's content is the composition of those of its descendents  , \] he lear's content Is directly associa ted The following figure shows the relat ion between the two structures  . 
LOGICAL STRUCTURE(i ) 7, 2Y
LOGICALS '\[ RUCTURE ( 2 ) language date\[Grammar English-----inode type attributes The directory is slmllar to a UNIX directory  . But In our directory , tile leaves do not correspond to Flies but to logl cal data units and Furthermoreana ttribute list is attached to each node  . The correspondence between two structures is maintained by SCSE  . We shall see later that this organls at lon allows a more efficient Information re trieval  . 
It ls possible For " users to have access to the data by means of both structures  . The logical one Is more convenient but the physical one may be more efficient in some cases  . 
4: ~_COMMAN p__SyNTAX
The general command format is : < operator > < oper and > < options > - The " operator " is a word or an abbreviation recalling the operation of tile colml and  . 
The " operand " is a pattern giving the range OF the operation  . 
The " options " is a list of opt lonal parameters of the COw  , land . 
For example , the Con~n and : VGRAMMAR ( LANGUAGE =
ENGLISH ) visualizes , at the standard output , all the English grammars In the base . Here V is the operator , GRAMMAR ( LANGUAGE = ENGLISti ) lstile oper and pattern and no option Isg iven  . 
The operand being mostly a node in the direc tory tree  , the pattern is USU ally a tree pattern . When the pattern matches a subtree of the di rector y  , the part that matches a specially marked node Is the effective operand  . 
The pattern is expressed by a geometrics t ructure and a constraint condition  . The structure ts atree written in parenthesized form perhaps containing variab leseacll representing a tree or a forest  . The coeditlon Is a first order logic p redicate In terms of the attributes of the nodes occurring in the geometric struc ture  . More sophisticated conditions may be expressed by a predicate combined with geometr ic structure to efficiently select in formation from the base  . 
Pattern writing should be reduced to a min imum  . In the abeve example , the geometric structure is shnply a grammar type node and the constraint is the node's language attribote having the va lue = Erl gllsl\]  . 
The use of a current node tn the directory a llows not only the simplification of pattern writing but also the reduction of the pattern matching range  . The effective operand becomes the new cur rent node after the execution of a command  . 
II . THEMAINFUNCTIONS
We shall Just descrl be the functions tti at seem essential  , lhefunctions may be divided Intofourg roups =  1  . general 2 . SCSG base updating 3 . SCSG base inquiry 4 . SCSG verification . 
_1 ~_GI~t >\[ E__RAL_FU_N__C__T . _I . D_NS These functions Include : SCSE session options setting  , the system's miscellaneous lnformatlon in qu iry and access to host system's commands  . 
The following options can'be set by user co , hands : 1 . tnteractivtty 2 . dlalogue language 3 . 
auto--verl filcatlon 4 . session trace 5 . standard
Input/output.
One of the 4 Following Interactive modes may be chosen : 1  . non-interactive 2 . brief 3 . detalled 4 . 
system controled.
In non-interactive mode , no question is asked by tile system . An error con ~ and Is ignored and a message wil lbesent but the process continues  . In brief mode , the current access lble command names are di splayed when a corm  , and Is completed and a RETURN in the command l in es is Found  . In detailed mode , the functton and parameters of the accessible commands are displayed and  1F an error ts Found in the user's Input data , the system will diagnose it and help him to complete the command  . 
A prompt message lssent every time RETURN is Found in the COn~n and lines  . In the system controlled mode , the lnteract l v lty Is dynamically chosen by tile system according to the system = user d i alogue  . 
For the tlme being , only French is used as the dialogue language  . But them u . ltl-langueage dialogue is taken tn to account tn design  . It is simpler In PROLOG to add a new dia logue language  . 
The auto-verification option Indicates whether the static coherence  ( see 4 . SCSG verification ) of a gra~nar will be verified each time it ls modified  . 
The trace option is a switch that turns on or off the trace of the session  . 
The standard Input/output option changes thes t and ard input/output  . 
Some Inquiries about the system's general In formation  , such as the current options and directory content  , are also~ncluded in this group of Funct ions  . 
The access to host system's co~Yl ands without leaving SCSE can augment the efficiency  . But any object modlfted out of SCSE is consided no more coherent  . 
2. SCSGBASEUPDATING
This group of fiuect lons are : CREATE , COPY , CHANGE , LOCATE , DESTROY and MODIFY . \] hey may be found In all the classice di tors or file management systems  . The advantage of our system is that the operand of commands can be specified accord ing to the logical structure of the base  . 
For example , the col~n and : DESTROY CI4 ARTS ( TYPE = NP ) Destroys all the charts which describe a Noun Phrase  . 

The SCSE has a syntaci Ic editor that knows the logical structure of the texts being edited  . I hlseditor Is used by tile con ' Jn and s MODIF and CREATE  . 
The command CREA1 < oper and > < options > calls the edltor , creating a logical data unit specified by tile operaod  . If the interactive option ts demanded , the editor will guide the user to write correctly according to the nature of the data  . 
Following the same tdea of different in teractly e levels  , we try to improve on tile classical st ructural editor  , Per instance that of Cornell University \ ] \   [5   , so that one car lenter a piece of text longer than that prompted by the system  . If the interactive option Is not demanded , one Just enters into the editor wl than empty workspace  . 
The CO~T~n and " MODIF < logical unit > " call s the system's edltor with the logical data unt t as the work space  . The data ill the workspace may be displayed In a legible form which reflects Its log ical structure  . 
The multl-w\]n dows facllity of the od it or makes it possible to see simultaneous ly ontile screen the source text and tile text In structured form  . 
The SCSE editor inherits the usual edit ing con~ll and s from the host editor  . Thus one can change all the occurrences Of a rule's name fnagrar rnlar without cilang lng the strlngs containing the same characters  , using a logl cal structure change : CNAME ( type=rule ) old name new_nan/e , while tile physlcal structure command :
C/o1d . . name/new . name /** changes all the strings " old_name " In the workspace by new name  . 
When a nobJect's defl nltlooIs modif ied  , all Its occurrences may need to be revised and vice versa even if the modification does not cause a syntactic error  . A structure location command flndlng the de finition and all the occurrences of a nob ject can be used In this case  . 
Only tile logical units defined in the directory and the SCSL syntax can be manipu lated by the structural 
CO rr ~ l and s.

These functions allow users to express what they are interested ill and to get the Inqu iry results In a legible form  . A part of the on-llne manual of usage in the form of SCSG may also be consulted by them  . 
The operand patterns discussed above are used to select the relevant data  . The operator and options of co~n and schoose the output device and corresponding parameters  . A parametered output form for each logical data unit has been defined  . The data matching the operand pattern are shaped according to their output form  . The data may of course be obtained in their source form  . 
One may wish to examine an object at diffe rent levels  ( e . g . Just tile abstractor some comments ) . The options of the con ~ and can specify thi s  . If one Just wants to change the current node in the directory for factll tatlng the following retrieval  , the same locating co~n and as before may be used  . 
4. SCSG VERIEICAT#ONS.
Two k lnds of verifications may be dist inguished : static and dynamic  . Tile static verification checks whether a grammar or a part of a gra~nar respects the syntax and semantics of the fo rmalism  . The dynamic verification tests whether ag iven gran'mnar specifies what we want It to  . 
Statl c_ve , r Ifica ~ ton
All internal representation of the analyzed text ts produced and used by the system for st ructural manipulation  , the analyser may produce a list of crossre ferences of = nameable objects and alisto fsyntaxo-semantlc errors found In the text  . The exemples of nameable objects are the charts  , tile macros , the attributes . The list of cross-references reveals the objects which are used but never defined or those defined but never used  . 
A chart may refer to other charts . This reference relation can be represented by an oriented graph where the nodes stand for a set of charts  . Ahler arcilt cal reference graph is of ten given before writing the charts  . A program can calculate the effective graph of a grammar according to the resulto ? analysis and compare It with the given one  . 
The cornll and options may cancel the output of tlleset wollsts and the graph calculat Ion  . The graph calculation may also be executed alone  . One of optlons Indicates whether the analysi s wtll be Interactive  . 
D.y . n ~! #J c.v . ~ gr:1fican on
Tile dynamic verification I stile calcu latlon of a subset of the string-treere lation defined by a graltrnar  . A member of the relation is a pair < str ing  , tree > . Ti ) ecommand gives the gran Ynar and the subset to be calculated  . The subset may be one of the four following forms : I  . a pair with a given string and a given t ree  ( to see whether It belongs to the relation )  2  . pairs with a given string and a narbit rary tree  3  . pairs with an arbitrary string and ag iven tree  4  . all possible pairs rhe calculation is carried out by all interpreter  . 
The user may give interpretation parameters Ind icating interactive and trace modes  , slzeo ? the subset to be calculated and o ther constraints such as a list of pass ive  ( or active ) charts during this interpretation , the depth and width of trees and length of the string etc  .   . 
As SCSGs are statl cgral ~ nars , no heuristic strategy wllt be used In the lnterprete's algorithm  . So the interpretation will not beeffi cient  . Since the goalts rather to test gramnars than to apply them on a real scale  , the efficiency of the interpreter Is of no importance  . 
CONCLUSI0N
The system presented Is being implemented at GETA  . 
In thls article , we Put emphasis on the system's design princ iples and specification rather tilan on the detalis of lmplement at lon  . 
We have to1 lowed three widely recommended design princ iples : a early focus on users and tasks  , b ) empirical measurement and c ) Interactive design \]\[2\]\[ . 
The specification of the functions are checked by the system's future users before implementation  . The user's advice Is taken into account . This dtalogue continues during lheimp lementation  . The topdown and modular programming approaches are followed sottlat  , even 1f the Implementation ls not completly a cili eved  , the implemented part can still be used . 
The system Is designed for being rapidly imp lemented and eastly modtfled thanks to Its modularlty and especially to a htgh leve l logic programming language : PROLOG  ( 3 \ ]  . We have tried our best to make the system as user-frlendly as possible  . The system's most remarkable character is that the users manage their data according to the logl cal structure adapted to tile human be Irig  . 
Whatts interesting In our systemls not that it shows sonle very original ideas or the most recent techniques In state-of-the- art buttt shows that tile combination of well-known techniques used orignally Ind ifferent fields may f lnd its applicat ion in other fields  . 

Longterm perspectives of the system are numerous  . 
Wlth the evaluation o ? the SCSG , some strategic and heuristic meta . -rules may be added to a grammar . 
Equipped by an expert system of SCSG , SCSE could lnterprete effclently a stati c grammar and synthetlse from Itefficac ious dynamic grammars  . 
It Is also interesting to integrate into SCSE an expert system which could compare two SCSGs of two languages and produce a transfer grammar or ' at least glve some advice for constructing it  . 
Using its logical structure manipulat i on mechanism  , SCSE can be extended to deal with other types of structured texts  . Thanks to Its efficient Interpreter or in Cooperation with a powerful machine trans lation system such as ARIANE  , SCSE could be capable of offering multi -llngual editing facilities  ( 4~ . 
BIBLIOGRAPHIE 2.


S . Chappuy , " Formalls at londel a Description des N iveaux d ' Intepretation des Langues Nature \] les  . Etude Men~een Vuedel ' Analyse et de la G6n@rat lonau
Moyeo de Transducteur.",
Th ~ sedetrots l ~ me cycle & I ' USMG-INPG , Juillet 1983 . 
JOHNG . COULD & CLAY TONLE WIS , "Designing for Use abllity : Key Princip les and 
What Designers Think ",
Co~nunI cat lon of the ACM , March 1985 Volume 28N?3 . 
Ph . Donz , " PROLOG CRISS , une extention du langage PROLOG " , CRISS , Unl verslte II de Grenoble , Verston 4 . 0 ,
Juillet 1985.
HEIDORNG . E . , JENSENK . , MILLERL . A . , BYRDR . J . 0
CHODOROWM . S . , " The EPISTLE text-crltlauing system . ", IBM Syst . Journal , 21/3, 1982 . 


TEITELBAUM 1 . et al , " The Cornell Program Synthesizer : a syntax d irected pr'ogra~ntngenvironments  . ", Co~nunicatlon of ACM , 24(9), Sept .  1981 . 
8 . VA UO OIS & S . CHAPPUY , " Static Gran ~ ars : a formalism for the descrlbtion of linguistic models "  , Proceedings of the conference on theoretica l and methodological issues in machtnetrans lation of natural language  , Colgate University , Hamilton
N . -Y . , USA , August 1416, 1985-O--O--O-O-O-O-O-
