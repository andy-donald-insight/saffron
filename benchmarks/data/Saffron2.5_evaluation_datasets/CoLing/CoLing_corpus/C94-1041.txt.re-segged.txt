KASSYS : A DEFINITION ACQUISITION SYSTEMIN NATURAL 

Patricc Hernert
L . I . F . O . , R . L . de Vinci , B . P . 6759,45067 Orldans Ccdex2, France
E-mail : hernert@chambord . univ-or leans . fr Abstract : This paper is an introdnction to KASSYS  , a system that has been designed to extract information from detining statements in natural language  . Only hy-peronymous detinitions are dealt with here  , for which systematic processing has been devised and it nl  ) lenmnted in tlte initial version of the system . The paper describes how KASSYS buiMs a taxinomie hierarchy by extracting the hyperonyms from these definitions  . It also explains the way in which the system can answer closed questions  ( yes/no )  , thus enabling the user to check very quickly that a definition has been assimilated correctly  . The underlying for rnalism is that of conceptual graphs  , with which the reader is assumed to be familiar . 
Keywords : Conceptual graphs , hyperm ~ ymous definition , knowledge acquisition , question ( yes/no ) . 
I-INTRODUCTION
Themm of KASSYS , the system described here , is to acquire lexicographical definitions expressed in French  , to extract from these definitions a carefully chosen conceptual structure  , to save this structure in a tile , and to then be able to use it , where appropriate , for the semantic analysis of a text or during the search for an arts werto a question put by the user  . + The formalist n which has been adopted for the representation f the detinitions is that  o1' conceptual graphs , 2 that the reader is assumed to understand . 
All the examples will be given in the feral of statements in natural anguage  , and the operations actually pcrf of med by the system on the conceptual stnmtut'es xtracted from these statements will not be described  . This paper is limited to hyperonymous delinitions  . It ; list ) shows , very brietly , how KASSYS can answer cet+tain types of question . 
2 . KNOWLIgl ) GEEXTRACTION 2 . 1 - Some points concerning hyperonynmus detinl -lionsIly peronymy/hyponymy can be delined its follows : term A is said to be a hyperonym of term B  , or alternatively that term B is a hyponym of term A  , if the set of instances of term B is included in the set of instances of term A  . This gives the following corollary : the set of se-mantic features that make ttp the elements of A is included in the set of sem  , ' mtic featnres that make up the elements of B ; the elelnents of B ares aM to inherit the sem , ' mtic features that are common to the elements of A  . llere wcbF or a complete descriplion of the init M version of KASSYS  , please refer to ( llernert 93) . 
2Cf . ( Sowa 84).
have tile notion of inheritance of semantic features that is fund an mntal to tile theory of semantic net wm'ks  . 
Ilyperonymy is thus defined by the gencral relation :  ( 1 )   ( A is a hyperonym of B )  ~  ( Vx , B ( x ) DA ( x ) ) The equiwflcnt in natural hmguage of ( 1 ) is: ( 2 )   ( A is a hyperonyna of B )  ~  ( All P , is A ) For example , lhe definition of the concept bee: ( 3 ) bee : a social insect which produces wax and honey  . 
I ; rom this delinition it is possible to extr't c the I'ol-lowing statement  , in which insect is : the hyperonym of bee : ( 4 ) Allbees are insects . 
Informal terms ahyl ) eronynu ) us definition can be written its in ( 5 )  , in which the delining statement is split into two fundamental components : the hyperonym  , followed by a conjunction of semantic features which distinguish tile defined fl ' om this hyperonym  ; this conjunction of semantic featnrcs is called spect Jic diffi'rence  . 
( s)v : , . .,R (~,) ~ ( A (:,) A PI (:,:) A P2(:,:) A . . . A : , , , (:, . ) ) The implication contained in ( 5 ) is that KASSYS perceives definitions its statements of conditions that are necessary but not sufticient  . It is assnmed that concept F ; as delined in ( 5 ) may possessenmntic features that have not been specified but the knowledge of which may turn out to be indispensable if it were necessary to differentiate it from an individual beh  ) nging to a very simihn class . 
2.2-llow to extract he hyperonym
It is usually fairly easy to extract I hc hypcronyn afr  ( mlahy pcronymous definition . In nearly all cases the hyperonym of the ( letined is the lirst word of the definition , in KASSYS the lk ) llowing heuristics have been implemented : For the delinition of a verb the hyperonyn ~ is the litst word  o1' the deliniti ,  . m ; if this word is not a verb the search fails , l ' or nouns , start by checking whether or not the definition begins with a defining prefix  , i . e . art expression such as action oJ ~ Jhc to J~etc . ; in sonte cases the delinition may not be hyperonymous  ; otherwise , if tim first word of the deliniti ( m is a noun it is the hyperonym ; if the lit'stN words are adjectives , possibly separated by the conjunction and or by a comma  , and if the ( N + l ) th word These two heuristics are commonly used by systems to search for hyperonyms in detinitions  , sometimes with improvements otake into account he special cases t brw bich these heuristics are not suitable  .  3 2 . 3 - How to build the taxinomie hierarchy The hyperonym is obviously a fundamental etmnent of a hyperonymous definition  . Takenal one , a concept and its hyperonym 4 are sufficient obuild an elementary semantic ne two  ; rk in which all the nodes are connected by the same link ISA  . T be semantic network is limited to a simple taxonomic hierarchy which can be built and nmin -rained far more easily than a complete set nantic network  . 
KASSYS carries out a certain number of checks on the proposed hyperonym  . If , for example , it is too general , tim user is " tsked to choose another ; if it has already been used as a hyperonym , the system suggests that may be one of its hyponyms could be a better candidate  . Let us now look in more detail at what KASSYS does when the user define stile same concept more than once  . Let us take the following definition patterns : ( 6 ) Vx , A(x ) D(B(x)AC(x )) (7) Vx , A(x ):)0 r(x)^C'(x )) In (6) and (7) , concept A has been de Iined by the hypcr-onyms B and B'r espectively and the specific differ et ~cesC and C'  . There are four different cases : 1 . If B = B ' and C = C' , the definitions are klentieal and the second one is therefore redundant  . 
2 . If B = B ' and C <> C' , the second definition can be considered as additional information which should be merged with the definition that has already been memorised  . 
3 . If B <> B ' and C = C' , the definitions are identical but for one hyperonym  ; the system will therefore ask the user to choose between  ( 6 ) and ( 7 )  ; note that , if B has been defined with B'as its hyperonynl ( respectively B ' with B )  , the system will suggest keeping ( 6 )   ( respectively ( 7 ) ) . 
4 . If B <> B ' and C <> C' , the user will have to choose one of these two definitions  . 
Note tlmt , if the second efinition ( 7 ) does not mention the hyperonym of A , the system will find this hyperonym thanks to the first hyperonymons definition that has been entered  , which necessarily contain stile structure (6) . 
2 . 4-T be circularity of definitions 3For example .   ( Byrd 87 ) identifies several hypemnym ~ in tile ~ ; alne definition , separated by a conjunction ; i(V & on is 89) there is a heuristic which , in certain cases , allows the hyperonym of a noun delined by the pretix action t ~' to he extracted  . 
4Right from the beginning it has been assumed that no concept possesses more than one immediate hyperonyrn  ; fi ' om this point of view this immediate hyperonym coincides with the genus in the Arislolelian sense of the term  . 

Whether definitions come flom a French dictionary or have been produced by a user who is not a lexicographer  , they usually contain characteristics that are considered to make them totally useless  . Definitions are too often found to be repetitive or inconsistent  ; however , once these problems have been klentified they can almost always be corrected  . But this is not true of circular definitions which  , today , are accepted as being inevitable , s As far as KASSYS is concerned , the presence of cycles in definitions would have then n for tun'lter sult of leading the program into infinite loops  . In order to awfid this , an algorithm has been implemented which searches each new hyperonymous definition for words th : t t will lead to a circular definition  . Let use x auainetile folk ) wing example : ( 8 ) swarm : group of bees that leaves an overcrow-ded hive to settle elsewhere  . 
(9) bee:social in sect of tile Hymenopter a group , called honey Jty that lives in swarms and produces wax and hone y  . 
( Ill ) hive : shelter designed for a swarm of bees . 
If tile definitions arc submitted to tile system in this order  , tile circularity due to the presence of swarm in the definition ot'tim concept bee is detected- ts so on as this delinition is entered  . The user is therefore asked to modify at least one of the two definitions  ( 8 ) and ( 9 )  . One possible solution would be to replace ( 9 ) by ( 1I ) :  ( 11 ) bee:social in sect of tilelly men opter a group , called honeyfiy that lives in colonies and produces wax antihone y  , Now ( 8 ) and ( \[ 1 ) are accepted without any difficulty . 
But there is still a problem with ( 10 ) since the definition of hive contains the noun swarm  . This circul ; trity can be got rid of by removing hive from tile definition of swarm or swarm from the delinition of hive  . The first solution leads to seriously truncating the definition of the nouns worm:  ( 12 ) swarm : group of bees . 
The second leads to a som cwlmt unnatural deliuition :  ( 13 ) hive : shelter designed for a group c , fbees . 
This example shows that it is sometimes a hnost inevitable to have reconrse to a circular detinition and it is for this reason that KASSYS can be conligured to accept such delinitions  , l lowever , the danger is that , when the knowledge base is consulted , certain algorithms which are used in this consultation and which  , at the present time , are tmable to check their own evolution , may lead to in I in iteloops with a consequent loss of inlbmmtion that has not previously been menmrised  . 
3 . QUERYING TIlEK NO WlJg DGEBASE 3 . 1 - ~ qhnple questions KASSYS is able to answer yes/no type questions  , i . e . 
it can compnte the truth of certain statements . This paper does not deal with elementary queries of tile type Is an A  5Cf   , for example , ( We in reich 70) . page 81 . 
a B ? , which tile system b'mdles without any prot ~ let n . 
Let us suppose that tile following detinitions have been st  , bmitted to the system , which then analyses and memo-rises them : ( 14 ) revolver : small-arm with a rew/lving cylinder that can contain six cartridges  . 
(15 ) pistol : small-arm with a removable cartridge clip in which the cartridges are loaded  . 
(16) small-arm : short , portable tirearm.
(17 ) tire arm : arm that tires shots throughtile de to -nation of an explosive mixture  . 
I , et us begin with the simplest questions , i . e . those it is possible to answer by consulting just one delinition  . For example: ( 18 ) Does are wll verh aveacy linder ? Using definition  ( 14 )  , this question can he answered in the aflirmative . This is exactly what KASSYS does , by simply projecting tile conceptual graph as sf ~ciated totile question on totile conceptual graph of the defining statement are volver is a small-arm with etc  . . Note that KASSYS knows that i rA is sltid to be with P  , , then A has

It may happen that a query is projected onto the body of a definition but not on totile detining statement that has been obtained from tile delined and tile definition  . For example: ( 19 ) Does a cylinder containe : tr tridges ? The graph of this query is not projected oii to that of a revolver i  . vasmall-arm with etc . btlt onto that of tile detinition properly speaking oftevolver  , which contains the patternacy linder contains cartridges  . The system cleverly deduces that there exist cylinders which contain cartridges and so  , in answer to question (19) , replies So+metimes . 
3 . 2 - An algor i thm using type expansion This section deals with the case of questions that cannot be answered by consulting just one hyperonymous deli-nition  . It is assumed that these questions contain neither modal verbs nor negations  . 
The following algorithm has been implemented so as to be able to answer these questions : a Search in the assertion to be veritied for the concepts to which a type definition has been associated  ; for each concept C that is found : 1 . Search fortile definition of C . 
2 . For this detinition , perform all possible type expansions ( the strategy that has been implemented is a breadthlit'st search  )  ; for each definition that is obtained , try to project the graph of the query onto the ' This algorithm requires an operalion which has not been delinell : type  #xpansion  ; this consists ill replacing a give . word in I hegrapholn statement by its type detinition  . 
graph of this delinition ; if a projection succeeds , the answer is Yes ; go to 5 ; if no projection succeeds , 

g . For each of the hyponyn~s of C , return to \[; i\['a projection succeeds , the answer is Some titne , v ; go to 5; if no projection succeeds , continue . 
4 . Nopro . iection has succeeded ; the system ix unable to answer . 
5 . If an answer has been found , display it ; otherwise display I don't know ; stop . 
t + et us take tile query : ( 21 ) Does a pistolfire shots ? Starling frothtire cm /cept pistol  , then perform hlg type expansion on its hyperonym small-arm  , followed by a second type expansion on tile concept firear  , t , KASSYS buihls the graph of the following detinition :  ( 21 ) A pistol is a short portable arm which Ih'es shots  , etc . 
We are back to the case of the previous paragraph , where just one hypermly mous delh fition is enough to be able to answer tile question  . It is easy to see that the graph of tile query ( 20 ) is projected onto that of tile detinition ( 21 )  . This is what KASSYS does , and so it replies in the affirmative to question ( 20 )  . 
It should be noted that this algorithm can be very time consuming  , it " tile assertion to be verified contains more than one concept that has been delined in the knc ~ wledge base  . One possible so httion would be to look lk~r the ans-wet starting from a prio  , ity concep that we shall call tire Joc , softile que , y and that is de/ined as being tire concept to which tile questioning applies  . It is a somewhat wtgue notion and is rather difficult to explain clearly  . "1 ~ begin with , it was necessary to detine a naive , focus extractim/heuristic . Although far floll r perfect , this heuristic is never danger ou since tile previous algorithm guarantees that all tile concepts will be tried  . 1\[owever , where tile heuristic CO tllptlte Sa focus leading to a successful conclusion  , tile time save disinolmrtional to tire , mmber of concepts cmll:lined in tile assertion and on which type expansion can be performed  . Intire example uf question(2t )) , the focus determined by the heuristic is p is lol , which leads to a successful conclusion . The ltnlot lrltOftime is saved here is nilbut wouht be considerable if tile definition of tile concept shot  , for exatnple , were to be inserted in the knowledge base . 
3 . 3 - Queries that contain a negation ( \] enerally speaking , the handling of negation is a tri-cky affair for the essential reason that negation in natural language cannot be confused with logical negation  , l : ~ r instance , it is easy to lind a statement with a truth value that is identical to that of its negation  . 7 l lowever , in a huge number of elementary cases , especially where the : Let us lake the eXall lI ) leofIhes laelllenl / ~ , 1 y d r r l , goll likes bakhtva , nable to accep that the trnth value of the chtuse is the opposite of that of the assertion which is obtained by removing the negation from the clause  . This is a heuristic wllich has proved to be extremely efficient in KASSYS but which woukl have to be re-exantined if certains in > plifying hypotheses were to be abandoned  . 
Let p be a statement containing just one verb , and leg(p ) the negation of this statement , obtained by adding a negation to the verb contained in p  . The answer given for leg ( p ) is a function of that which has been l ' ound for p : s 
TRUEFALSEISOME\]UNI ) EF1P neg ( p ) FALSET aUI ~ 1~---~-- - - - - - ~ FALSE\[--O-lqDE\[+I
Negation in queries
This table must be read from top to bottom only . Don't forge that it gives the truth value of the state tnent leg  ( p )  , which contains one and only one negation , in function of that of p , which contains no negation . Note that the aim of this table is not to define the truthwtlue of neg  ( neg ( p ) ) . In the case where leg(p ) isn't valid , ignoring this restriction leads to attributing two truth values to leg  ( leg ( p ) ) . 
Let us take as an examl ) letile following queried statement , which is the negative answer to ( 19 ) :  ( 22 ) A cylinder does not contain cartrklges . 
KASSYS answers that statement ( 22 ) isn't valid since cylinders exist which contain cartrklges  , as is consistent with the hypothesis that queried statements are prefixed by a universal quantifier  . Statement ( 22 ) is interpreted as Not all cylinders contain cartridges  , and not as There exist cylinders which do not contain cartridges  , hitile hitter case it is obviously impossible to answer  , for the sintple reason that no where is it said that there exist cylinders other than those which are parts of revolvers  . However , in the hypothesis of t closed world ,   9 objects whose existence has not been asserted are assumed not to exist in this world  . Given this one proviso , tile answer to (22) is negative , whatever its interpretation . Ontile contrary , a queried statenrent such as It is not truetlz at ao'lin-der does not contain cartridges  , which is the negation of (22) , is rejected by the system fortile simple reason that it contains two negations  . The previous heuristic is not suitable for use in this statement  , for which the w dues
TRUE and SOME are possible.
4. ASESSION WITHKASSYS
The following session , given in French , is a faithful illustration of the messages given by tile system  . 
1 . KASSYS : Bonjonr , j ' attends lOS instructions . . . 
2. USER : Unadrone fest unappare ild ' aviation.
3.K : OK , j ' ai assimil 6 le concept < adronef >.
taken from (1\[irst91) ; this statement is false because we have no drag ( m ; it ~ negation is equally false , for the stone reason . 
8 UNI ) EF for zm defined ; SOME tbr Sometimes : some occurrences exist for which the queried statenlis true  . 
9This hypothesis has not been adopted here.
4 . U : Qn'est-cequ ' unadronef ? 5 . K : Unadron cfest unapp . ' n'eild ' aviation . 
6 . U : Unefus deest unappare ilquisor taen voyer une charged ansl'e space  . 
7 . K : Le concept < appareil > a pour hyponyme < a drone f >  ; celui-ciest-il unhyperonyme phls prochede < fusde > ?  8  . U : Oui . 
9 . K : Jedddu is done qu ' une ftxs6e est unadronef quiser t ~ lenvoyer une charge dartsl'espace  . Etes-vousd ' accordave ccelteddfinition ? 10 . U : Oui . 
11.K : J ' aim dnlor is dl add linition de < fusde > .
12 . U : Unefus deest propuls depart in n to teur a rdaction  . 
13 . K:S'agibild'une questionoud'une affirmation ?   14  . U : C'est une affirmatit m . 
15 . K : Jesais d6j'l qn'une\['LISEest unadronef quiser the avuy cr une charged ans I'espace  . l ) ois-jeint dgrer lanouvelle ? lonn6e ~lcetted dfinition ? 16  . U : Oui . 
17 . K : Bien , j ' ai compr is votred dfinition de < rustic > . 
18 . U:Qu'est-cequ'nnefus de ? 19 .   I<2: Une I't lsdeest unadronef propuls dpartill moten r  , tr6 action , quiselt ~ lenvoyer nne charged ansl'es pacc . 
20 . U : Unadrone fest tlnap par cilquipe titvoler . 
2l . K : Ok , j ' ai assimil 6 ladd finition de < a6 ronef > . 
22 . U : Unphmeurest unappare ilsemblable al'avion maisdd munide motenr  . 
23 . K : Le concept < appareil > a pour hyponyme < a dro-nef >  ; celui-ci est41 unhyperonymephns prochede < pla-neur >? 24  . U : Oui . 
25 . K : Jedd du is donc qu ' unphn leurest tilta dronef sem-blable hl'avionnlaisddmunide moteur  . Etes-vous d'ac-cord aveccetted dfinition ? 26 . U : Oni . 
J ' aint dnlor is dl add finition de < planeur > .
Unadronef peut cnvoye rune charged ansl'espace 27  . K : 28 . U : ?29 . K : Oui . 
3(1 . U : l ~ our quoi?3I . K : Parce qu ' unefns deest till adronel'prol ~ ulsd partill n lot cur  ~1 rdaction , quisor t ~ lenvoyer nnc charged ans 1'espace . 
32 . U : Pourquoi ? 33 . K : C'esttonsquime I ' avezdit . 
34 . U : Est-ccqueles appare il svolent ? 35 . K : Quel que fois . 
36. U : Unplaneurpeutvoler ? 37.K : Oui.
38 . U : Est-cequ ' unplanenr poss b . dctill moten r ? 39 . K : Ncm . 
40. U : On at ' r ~ telb.
41 . K : Mamdnloircn'est p as vide . Dois-jefair ennesau-vegarde ? 42 . U : Non . 
7I . K : Comtnevous voudrez . Merciet : ~ lbient6t . 
5 . CONCLUSION ticular , only the handling of by peronylnous definitions has been discussed  . You have seen how the taxinomic hierarchy and the knowledge base are built  . You have also been told how , broadly speaking , the query/answer module currently running in the system works  . 
The interest of this work is to show that conceptual graph theory offers an elegant framework in which hy-peronymous definitions fit naturally  . Careful and judicious use of this framework and the operations defined within it  ( type expansion , projection ) enable information search algorithms to be implemented asily  . 
6. REFERENCES ( Byrd 87)
R . J . Byrd , N . Galzolari , M . S . Chodorow , J . L . Klawms , M . S . Neff , O . A . Pdzky , Tools and methods for CO mlm-tational texicology , Computational Linguistics , Vol .  13,
Nb . 34, 1987, pp . 219-240.
( II ernert 93)
P . tlernert , Unsystb . med'acquisition dedd finitions basd sur le module desgraphes conceptuels  , Thbse de Doctor at , Universitd Paris XIII , Villetaneuse , juin 1993 . 
( Hirst 91)
G . Hirst , Existence assumptions in knowledge representation  , Artificial Intelligence , Vol . 49, No . 13, l ! lsevier,
Amsterdam , 1991, pp . 199-242.
( Sowa 84)
J . Sowa , Conceptual structures - Information processing in mind and machine  , Addison Wesley Publishing Company , Reading , Mass . , 1984 . 
( Vfiron is 89)
J . Vdronis , N . M . Ide , N . Wurbel , Extraction d ' informa-tions sdmantiques darts les dictionnaires courants  , Actesdu 7?zme Congrt~s Reconnaissances des Formesct Intelligence Artificielle  , A . EC . E . T . , Paris , ddcembre 1989, pp . 

( We inreieh 70)
U . Weinreich , I , addiinition lexicographique clanslasd-mantique descriptive  , Langages , Didier-l . arousse , Paris , 1970, pp .  69-86 . 

