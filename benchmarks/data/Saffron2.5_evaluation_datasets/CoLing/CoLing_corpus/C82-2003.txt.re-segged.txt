AIklNGUISTICAPPROACH TO THE DESIGN OF AI~LNQUA @EFOR 
COMI~UTATION ALLINGUISTICS

V . Andrewehtshenko
Faculty of N ~ erical Mathematics and Cybernet ics  , 
lfosoowState University , U3SR
Computational Linguistics is a sphere of sc ience and its applications lying between ltn ~ zlst to s and computer science  . 
The main taBk of computation a Zlin ~ istics is developing methods and design ~ uK tools form an -machine oonnnunication ? To this task its two main directions are subordinated = natura ~ language data processing  , including machine translation , and automation of linguistic research , Including automaticle ~ Loo-g ~ aphT . The formation of computation ~ l linguistics requires designing a unified language  , z ~ chenou Kh to satisfy diverse computational conditions arising in the abovementioned applications eAs such a language we propose LZCOLCZ ~ nKuaCOmputatio-num ~ Lngu?stics zsnn  )  , an inevitably short review of which is g iven in the present report  . The l~Lstic approach to the desiKn of this language consists in view ~ n ~ it as a  8en~iotic system and forming its unite in accordance with R  . Jekobson's linguo-se ~ iotic functions . 
LZCOT . is ~ . utendsd for conmnln?cstion between man ( native speaker , user ) end computer ( interpreter of this language ) in communicative situations of automatic and automatised  ( user directed ) natu ~ s?18z ~ uaKed at a process ~ . The concepts and constructions of LICOL presuppose a rather broad range of users-from nonprofessional ones  ( translators , lsy~co~p ~ aph-ere , editors , etc .   ) to computational linguists and tradition -al  prosrsI~ez'8? LIOOL can be used as a command la ~ , u ~ ein-17-information retrieval , as a data description and data manipul-at i on language in database design and as a programming  lan6ua-ge in the usual sense . It is intended as means for defining and control both in dialogical  ( ' on-line ) and in batch ( off--line ) processing . 
As a semiotic system LICOL consists of signs -bilateral entities-composed by sig~l fiants  ( sequences of letters ) and sign if i6s -those entities of real or conceptual wor ld which are objects and/or means for automat ic processing  . The role of sign lf i6s in this language can be played by the sig ~ . ifiants and by the signs of the same language  . This " world of lan~a6e " we name the system of its concepts the rela tions of which are expressible in terms of re lations between the signs of the language  . To use LICOL , specifical Xy to program in this lan6 ua-ge , is to express one's thou~ht , knowledge , notions in the framework of the " world of LICOL " in accordance with the rules of its grammar  ( syntax )   . In this language the function-ar~nnn-ant form is chosen as means for ~ statin ~ relat ions between the concepts : suffixal compound stems and prefixal and/or suffi xalin corporated  synta6m8   , the part of the suffixes be in 6 played by names of operations . The notation of LICOL therefore has there tersed Polish form  . 
Since LICOL is a language for computation , the main concept of its " world " ( i . e . the main sign of its semiotic system ) is the notion of Computational Construction ( CC )  . 
The CCs are constructional material both for the prO~TS me and the data  , the underlying form for which are IC trees . Since the trees are easily representable in a linear form by means of the Polish form of notation  , it is natural to interpret proteins as data and vice versa  , the data being fractured into relational ly-hierarchical data network  . This allows to consider the database also as a database for procedurally represented knowledge and therefore not to draw distinct ions between the two main forms of data representation-anaming and a proce-dural one  . 

Aocoz . 11 ng to the type of sign lf la , ~ ts the CO saxed l v ld-ed into rep:esentln8 and processing co-structions , each of which are further subdivided : the representing class into names and pictures and the processing class into controllers and operations  . If the si ~ Lfiantis , semiott cally , a symbol , we have to do with a namin ~ construction , if it is an icon , we have a picture construction ! the index-s ign represents either a controller or an operational construction  . The sign-if i6e for ' the CCs are the so-called descript ions consisting of ' a descriptor  ( which corresponds to the concept of the sign ) and of its referent ( value )   . 
According to the type of signifi #s the CC e are divided into real  , virtual and notational constructions . The real CCeCoz Tespond to external data of the usual programming langua ~  . 
e e . They are structured into elements , chains , fields , re-cords , fragments , sets and bases . The virtual OCs correspond to the user's notions of processing and are structured in to atoms  , sequences , trees , ~un6hes ( arbitrary graphs ) , blocks , files and ( file ) systems . The notional CCe correspond to con-et it ut iveparts of entitles of si~mt fiante  . These are : lett-ers , strings , groups ( of strings ) , segments , modules , corpus and packets ( of texts ) . 
Acco~ding to the form of value the CCs can be subdivid-ed into scalars  , vectors and lists . The scalar CCs have the following types s numbers  , codes , logicals , figures , symbols , keys , references , descriptors and masks . The notion of the vector corresponds to one of a rray  , its components may be not only scalars but a l so vectors or lists  , provided their components are of the same type . The lists may consist of seal-ers , vectors or subliste which may be of route , tree , struct-ure or executive type . 
Such multibase classification of the CCs has the follow-ing sense  . The operations of LICOL are defined on the viz ' tual CCs having ve  . z"J . Ous origins - either netational ( textual ) -19-constituents or denotational , virtual and real CCs . They may be intended either for display ing in textual form  , or they may be used in further processing as virtual ones  , or they may be transmitted in external environment in the form of real 

The CCs can be defined either by descript ion of their type and the mode of evaluating or by a picture  , the simplest type of which is a literal . Two or more CCs can be associated together one of them being an object and the rest of its features  . There are the following possibilities : implicit transformation of data from one type into another  ; indirect definitions of operands ! part icipation in operations by objects and the ir features both separately and Jointly ! eval-uation of the operands via pictu~s  , the operands may be the-reby procedures . Diverse operations on sequences , sets , graphs with labelled and unlabelled nodes and arcs are defined  . This allows operating both on the consti tuents and dependences  , to form both the paradi ~ ns and synta~ms , to examine alternatives and to control thAs processing by putting diverse conditions and restrictions on evaluating objects by pictures without explicit descript ion of the processing sequence  . Specifically , some operations on files and systems can be immediately inter-preted as operations on dictionaries  . 
The system of unite in LICOL is defined by a system of linguose miotioal functions  , i . e . it is necessarily close to the structure of functions of natural langunge  , specific features of programming are taken in to consideration  . This allows to proceed from expressions in a natural language to expressions in LICOL  , i . e . the highest function is fulfilled , them stalan ~ e ~ e function , the existence of which is ensured by the ful filment of lower functions : the cognitive one  , theoo--nunicative one etc . 

