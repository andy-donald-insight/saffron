An Annotation System for Enhancing Quality of Natural Language 

Hideo Watanabe *, Katashi Nagao **, Michael C . McCord *** and Arendse Bernth ***
*IBM Research,
Tokyo Research Laboratory
1623-14 Shimotsuruma , Yamato,
Kanagawa 2428502, Japan

** Dept . of Information Engineering
Nagoya University
Furo-cho , Chikusa-ku,
Nagoya 464-8603, Japan

*** IBM T.J . Watson
Research Center
Route 134, Yorktown Heights,
NY 10598, USA



Natural language processing ( NLP ) programs are confronted with various di  culties in processing HTML and XML documents  , and have the potential to produce better results if linguistic information is annotated in the source texts  . We have therefore developed the Linguistic Annotation Language  ( or LAL )  , which is an XML-compliant tagset for assisting natural language processing programs  , and NLP tools such as parsers and machine translation programs which can accept LAL -annotated input  . In addition , we have developed a LAL-annotation editor which allows users to annotate documents graphically without seeing tags  . Further , we have conducted an experiment to check the translation quality improvement by using LAL annotation  . 
1 Introduction
Recently there has been increasing interest in applying natural language processing  ( NLP ) systems , such as keyword extraction , automatic text summarization , and machine translation , to Internet documents . However , there are various obstacles that make it di  cult for them to produce good results  . It is true that NLP technologies are not perfect , but some of the di  culties result from problems in HTML  . Further , in general , if linguistic information is added to source texts  , it greatly helps NLP programs to produce better results  . In what follows , we would like to show some examples related to machine translation  . 
In general , it is very helpful for machine translation programs to know boundaries on many levels  ( such as sentence , phrases , and words ) and to know word-to-word dependency relations . For instance , in the following example , since\St . " has two possible meanings , \ street " and \ saint , " it is di  cult to determine whether the following example consists of one or two sentences  . 
I went to Newark St . Paul lived the retwo years ago . 
As another example , the following sentence has two interpretations ; one interpretation is that what he likes is people and the other interpretation is that what he likes is accommodating  . 
He likes accommodating people.
If there are tags indicating the direct object mod - ier of the word\like  , " then the correct interpretation is possible . NLP may be able to resolve these ambiguities eventually by using advanced context processing techniques  , but current NLP technology generally needs a hint from the author for these sorts of ambiguities  . 
Further , there are issues in HTML/XML . When MT systems are applied to Web pages , most of the errors are generated by the linguistic incompleteness of MT technology  , but some are generated by problems in HTML and XML tag usage  . For instance , writers often use < br > tag to sentence termination  . Sometimes writers intend that a < br > tag should terminate the sentence  ( even without terminating punctuation such as a period  )  , and in other cases writers intend < br > only as a formatting device  . In the HTML < table > shown in Figure 1 , the writer intends each line of a cell to express one linguistic unit  . The MT program cannot tell whether each line is a unit for translation  , or , instead , the two lines form one unit . In this example , some MT programs would try to produce a translation of a unit \ Net Vista Models Think Pad News  . " As shown in the above examples , NLP applications do not achieve their full potential  , on account of problems unrelated to the essential NLP processes  . If tags expressing linguistic information < table > < tr > < td > < a href="  . . . "> Net Vista Models </ a > < b r > < a href=" . . . "> ThinkPadNews</a><br></td></tr></table> Figure  1: An example of using h britags in a table are inserted into source documents  , they help NLP programs recognize document and linguistic structures properly  , allowing the programs to produce much better results  . At the same time , it is true that NLP technologies are incomplete , but their de-ciencies can sometimes be circumvented through the use of such tags  . Therefore , this paper proposes a set of tags for helping NLP programs  , called Linguistic Annotation Language ( or LAL ) . 
2 Linguistic Annotation Language
LAL is an XML-compliant tagset and its XML name space prexislal  . 
The LAL tagset is designed to be as simple as possible for the following reasons :  ( 1 ) A simple tagset is easier for developers to check manually  .   ( 2 ) An easy-to-use annotation toolism and atory for this annotation scheme  . Simplicity is important for making an easy-to-use annotation tool  , since if we use a feature-rich tagset , the user must check many annotation items . 
2.1 Basic Tags
The sentence tags is used to delimit a sentence.
<lal:s > This is the first sentence . </lal:s><lal:s > This is the second sentence . </lal:s > The attribute type="hdr " means that the sentence is a title or header  . 
The word tag w is used to delimit a word . It can have attributes for additional information such as baseform  ( lex )  , part-of-speech ( pos ) , features ( ftrs ) , and sense ( sense ) of a word . The values of these attributes are language -dependent  , and are not described in this paper because of space limitations  . The following example illustrates some of these tags and attributes  . 
<lal:s><lal:wlex="this"pos="det">This</lal:w > < lal:wlex="be"pos="verb"ftr="sg  , 3rd "> is</lal:w > < lal:w lex="a " pos="det">a< /lal:w > < lal:w lex="pen " pos="noun " ftr="sg  , count "> pen</lal:w > </ lal:s > The dependency ( or word-to-word modication ) relationship can be expressed by using the id and mod attributes of a word tag  ; that is , a word can have the ID value of its modie e in a mod attribute  . 
The ID value of a mod attribute must be an ID value of a word tag or a segment tag  . For instance , the following example contains attributes showing that the word\with " modies the word \ saw  , " meaning that \ she " has a telescope . 
She < lal : w id="w1" lex="see"pos="v " sense="see1">saw</lal:w > aman < lal : w mod="w1">with</lal:w > a telescope . 
The phrase ( or segment ) tagseg is used to specify a phrase scope on any level  . In addition , you can specify the syntactic category for a phrase by using an optional attribute cat  . The following example species the scope of a noun phrase \ aman  . . . a telescope , " and it is a noun phrase . This also implies that the prepositional phrase \ with a telescope " modies the noun phrase \ a man  . "
Shesaw<lal:segcat="np">aman with a telescope < /lal:seg>  . 
The attribute para="yes " means that the segment is a coordinated segment  . The following example shows that the word \ software " and the word\hardware " are coordinated  . 
This company deals with < lal:seg cat="np " para = " yes"> software and hardware</lal:seg>for networking  . 
The refattribute has the ID value of the referent of the current word  . This can be used to specify a pronoun referent , for instance : < lal:s > He bought < lal:seg id="w1">a newcar</lal:seg > yesterday . </lal:s><lal:s > She was very surprised to learn that < lal : w  ref="w1">it</lal:w > was very expensive . </ lal:s > 2 . 2 Expressing Multiple Parses As mentioned earlier , since natural language contains ambiguities , it is useful for LAL annotation to have a mechanism for expressing syntactic ambiguities  . 
We have introduced a parse identier ( or PID ) in attribute values for distinguishing parses . An attribute value which may be changed according to parses can be allowed to be expressed as space -separated multiple values  , each of which consists of a PID prex followed by a colon and an attribute value  . 
<lal:s><lal:w id="1"   mod="2">He</lal:w > < lal:w id="2"   mod="0">likes</lal:w > < lal:w id="3"   mod="p1:2   p2:4"> accommodating </ lal:w > < lal:w id="4"   mod="p1:3   p2:2">people </ lal : w > . </lal:s > This example shows that there are two interpretations whose PIDs are  p1 and p2  , and that the p1 interpretation is \ He likes people " and p2 is\Helikes accommodating . "  3 LAL-Aware NLP Programs We have modied certain NLP systems to be LAL-aware  . ESG [5 ,   6] is an English parsing system developed by the IBM Watson Research Center  , and updated to accept and generate LAL-annotated English  . We have also developed a Japanese parsing system with LAL output functionality  . These LAL-aware versions of parsers are used as a backend process to show users the system's default interpretation for a given sentence in the LAL-annotation editor described below  . 
Further , the English to German , French , Spanish , Italian and Portuguese translation engines [6 ,   7] and English to Japanese translation engine [9] are modied to accept LAL-annotated English HTML input  . 
14 The LAL-Annotation Editor
Since inserting tags into documents manually is not generally an easy task for end users  , it is important to provide an easy-to-use GUI -based editing environment  . In developing such an environment , we took into consideration the following points :   ( 1 ) Users should not have to see any tags .   ( 2 ) Users should not have to see internal representations expressing linguistic information  .   ( 3 ) Users should be able to view and modify linguistic information such as feature values  , but only if they want to . 
Considering these points , we have found that most of the errors made by NLP programs result from their failure to recognize the phrasal structures of sentences  . Therefore , we have decided to for accelerating CFG-parsing by using LAL tag information  , and it is implemented in the above English-to -Japanese translation engine  . 
show only a structural view of a sentence in the initial screen  ; other information is shown only if the user requests it  . 
The important issue here is how to represent the syntactic structure of a sentence to the user  . NLP programs normally deal with a linguistic structure by means of a syntactic tree  , but such a structure is not necessarily easy for end users to understand  . 
For instance , Figure 2 shows the dependency structure of the English sentence \ IBM announced a new computer system for children with voice function  . " This dependency structure is di  cult for end users  , partly because a dependency tree does not keep the surface word order  , so that it is di  cult to map it to the original sentence quickly  . 

Therefore , an important property for the linguistic structural view is that users can easily reconstruct the original surface sentence string  . 
The next important issue is how easily a user can understand the overall linguistic structure  . If a user is , a trst , presented with detailed linguistic structure at the word level  , then it is di  cult to grasp the important linguistic skeleton of a sentence  . Therefore , another necessary property is to give users a view in which the overall sentence structure is easily recognized  . 
Figure 2: An example of tree structure of an English sentence With these requirements in mind  , we have developed a GUI tool called the LAL Editor  . To satisfy the last requirement , this editor has two presentation modes : the reduced presentation view and the expanded presentation view  . In the reduced presentation view , a main verb and its modiers are basic units for presenting dependencies  , and they are located on dierent lines , keeping the surface order . Figure 3 shows an example of this reduced presentation view  . In this view , since dependencies that are obvious for native speakers  ( e . g . \ a " and\computer " ) are not displayed explicitly , the user can concentrate on dependencies between key surface sentence string  . 
Figure 3: Screen Images of LALE ditor-Reduced
View units ( or phrases ) . If the usernds any dependency errors in the reduced view  , he or she can enter the expanded view mode in which all words are basic units for presenting dependencies  . Figure 4(a , b ) shows examples of this expanded view . 
In these views , to satisfy the former requirement , dependencies between basic units are expressed by using indentation  . Therefore you can easily reconstruct the surface sentence string by just looking at words from top to bottom and from left to right  , and easily know dependencies of words by looking at words located in the same column  . For details of the algorithm , see [12] . 
In Figure 3 , you can easily grasp the overall structure . In this case , since the dependencies between \ for " and\ announced  , " and\with " and \ announced " are wrong , the user can change the mode to the expanded view  ( as shown in Figure 4 ( a ) ) . 
In this view , the user can change dependencies by dragging a modier to the correct modie e using a mouse  . The corrected dependency structure is shown in Figure  4   ( b )  . 
In addition , the LALE ditor has the capability of testing translation by using LAL annotation  . Figure 5 shows a window in which the top pane shows the input sentence  , the second pane shows the LAL-annotation of the input  , the third pane shows the translation result using the LAL annotation  , and the fourth pane shows the default translation without using the LAL annotation  . The user can easily check whether the current annotation can improve translations  . 
5 Experiment
We have conducted a small experiment for evaluating LAL annotation to our English-to -Japanese machine translation  system[9]  . We gathered about 60 sentences from Web pages in the computer domain , and added LAL annotation to these sen- ( a ) Expanded View ( before correction )   ( b ) Expanded View ( after correction ) Figure 4: Screen Images of LALE ditor-Expanded
Viewtences with the LAL annotation editor . In this experiment , only word-to-word modications were corrected . Due to severe parsing errors and glitches of the annotation editor  ,   53 of the 60 sentences were used in this experiment . The average sentence length for this test set was  21 words . Two evaluators assigned a quality evaluation ranging from  1   ( worst ) to 5 ( best ) for each translation , with and without use of annotation . 
Translation results for 18 sentences ( about 34% ) were better for the annotated case than the non -annotated case  . These better sentences were 1 . 1 6 Figure 5: Translation test window of LALE ditor points better  ( 27% better in quality score )  . On the other hand , 26 sentences ( about 49%) were not changed , and 9 sentences ( about 17%) were worse . 
The main reason why these 9 sentences were worse was the structural mismatch between the output of the LALE ditor and the expected structure of E to J translation system  , since the LALE ditor and the E to JMT system use dierent parsing systems  . 
We have developed a structure conversion routine from LAL editor output to E to E to J input  , but it does not yet cover all situations . This is the reason why these 9 sentences become worse . 
Note that this experiment only uses word-to-word modication corrections  , so there is room for producing better translations if we use other types of annotation such as part-of-speech  , and word sense . 
6 Discussion
There have been severale orts to dene tags for describing language resources  , such as TEI[10] , OpenTag[8] , CES [1] , EAGLES [2] , GDA [3] . The main focus of these e orts other than GDA has been to share linguistic resources by expressing them in a standard tagset  , and therefore they dene very detailed levels of tags for expressing linguistic details  . GDA has almost the same purposes but it has also dened a very complex tagset  . This complexity discourages people from using these tagsets when writing documents  , and it also becomes dif-cult to make an annotation tool for these tags  . 
LAL is not opposed to these previouse or ts , but attempts to strike a useful balance between expressiveness and simplicity  , so that annotation can be used widely . 
As mentioned in the discussion of the experiment , there is an issue when the parsing system of LAL editor and the parsing system of a NLP tool which accepts the output of LAL editor are dierent  . As mentioned before , we used the ESG parser for producing LAL -annotated English  , and Japanese-to-English MT system for accepting LAL-annotated English  . Since these systems have been independently developed based on dierent approaches by di erent developers  , we found there are some structural dierences . For instance , given a prepositional phrase PrepN , ESG's head word of the prepositional phrase is Prep  , but E to JMT engine's head is N . In most cases , we can make systematic conversion routines for di erent structures  . In fact , for most of sentences whose translation is worse when annotation is used  , we can provide structural conversion routines for linguistic structures included in them  . The basic idea of LAL-awareness for NLP tools is that an NLP tool uses LAL information as much as possible  , but if LAL information produces a severe conict with the internal processing  , then such information should not be used . Our E to JMT program was basically implemented this way based on the algorithm described in  [11]  , but we seem to need more research on this issue . 
7 Conclusion
In this paper , we have proposed an XML-compliant tagset called Linguistic Annotation Language  ( or LAL )  , which helps NLP programs perform their tasks more correctly  . LAL is designed to be as simple as possible so that humans can use it with minimal help from assisting tools  . We have also developed a GUI-based LAL annotation editor  , and have shown in an experiment that use of LAL annotation enhances translation quality  . We hope that wide acceptance of LAL will make it possible to use more intelligent Internet tools and services  . 
References [1] CES , \ Corpus Encoding Standard ( CES) , "( http://www . cs . vassar . edu/CES /) [2] EAGLES , \ Expert Advisory Group on Language Engineering Standards  , "( http://www . ilc . pi . cnr . it/EAGLES/home . html ) [3] GDA , \ Global Document Annotation , "( http://www . etl . go . jp/etl/nl/gda /) [4] Koichi Hashida , Katashi Nagao , et . al , \ Progress and Prospect of Global Document Annotation  , "( in Japanese ) Proc . of 4th Annual Meeting of the Association of Natural Language Processing  , pp . 618621, guistics , Vol . 6, pp .  3143, 1980 . 
[6] McCord , M . C . , \ Slot Grammar : A System for Simpler Construction of Practical Natural Language Grammars  , " in ( ed ) R . Studer , Natural Language and Logic : International Scientic Symposium  , Lecture Notes in Computer Science , pp . 118145, Springer Verlag , 1990 . 
[7] McCord , M . C . , and Bernth , A . ,\ The LMT Transformational System , " Proc . of Proceedings of AMTA-98, pp .  344355, 1998 . 
[8] Open Tag , \A Standard Extraction/Abstraction Text
Format for Translation and NLP Tools , "( http://www . opentag . org /) [9] Takeda , K . ,\ Pattern-Based Machine Translation , " Proc . of 16th COLING , Vol . 2, pp . 11551158, August 1996 . 
[10] TEI , \ Text Encoding Initiative ( TEI) , "( http://www . uic . edu:80/orgs/tei /) [11] Watanabe , H . , \ A Method for Accelerating CFG-Parsing by Using Dependency Information  , " Proc . of 18th COLING , 2000 . 
[12] Watanabe , H . , Nagao , K . , McCord , M . C . , and Bernth , A . , \ Improving Natural Language Processing by Linguistic Document Annotation  , " Proc . of COLING 2000 Workshop for Semantic Annotation and Intelligent Content  , pp .  2027, 2000 . 
