PET : PROCESSINGENGLISH TEXT
P . Oppacher
Dept . of Computer Science , Concordia University , Montreal , 

This paper describes a new parser that combines topdown and bottom up strategies and the natural language process  in6 system PET which uses the parser . PET is deslgned to facilitate the in teractive construction of natural language frontends and to support experiments in computational ling-uistics ? The system  , which has been implemented in UT-LISP , provides facilities for performing the following tasks : natur-el language pars ing according to context-free and trans for a at-ional grammars  ; dtsembt ~ ation of word senses by pattern -- di rected inference ! construction of a semant ic network database from English sentences  ; deductive information retrieval to answer simple English questions ? Most extant natural language processing systems have very complicated control structures and are  , therefore , difficult to extend modularly . It appears that the lack of modularity of these systems is due to the fact that their syntactic expertise is not-oon ven?ehtly located in oner out-ine but  , in effect , distributed throughouthe entire pro~am . 
In the system described here , modularization is achiev-ed by makl D ~ the control structure largely t rans parent  , ice . 
by allowing it to reside in the parser ? The method  , in a nutshell , is this : the pa~ssr outputs a phrase struc ture tree  , or , if the analyzed sentence is structurally ambiguous  , a list of several phrase structure - 214 -trees . A tree for a sentence is generated in bottom up fashion under the control of context-f ree rules and restricted context--sensi tive rules  . The latter consist of tests and tree- modi-fying functions  . The context-sensitive tests inspect the immediate environment of a node about to be entered into the tree  . Depending on the outcome of such tests , the tree , modify-ing functions can change partial l y constructed parse trees  . 
The interior nodes of the tree are occupied by functions cor-responding to transform at ional and/or semantic rules  , and the leaf nodes are occupied by the dict ionary entries of the words in the surfaces tring  . Since LISP , unlike other high level languages , makes no distinction between programs and data structures  , the tree generated by the parser can be ia ~ ned iate-lyexecuted as a program  . The tree , interpreted as program , constitutes the control structure refer red to above  , and go-yarns the semantic interpretation of the sentence whose struct-ure it reflec ts  . 
As can be seen from this very rough descript ion  , control issues involved in processing natura l language text are in-deed largely taken care of by the syntactic component  . However , to eliminate semantically uninterpretable parses and to help resolve subtle syntactic ambiguities  , the parser must occasion-ally co~uicate wi th the semantic component  . 
The parser attempts to eliminate the overhead incurred by pure topdown  ( TD ) or bottom up ( UP ) algorithms . TD algo-rithms may have to do a lot of backtracking because of wrong-ly predicted goals  . BU algorithms build many temporary struct -ures which will not figure in the final parse  . Both backtrack-ingan ~ the generation of a ll possible BU interpretations can be avo ided by suitably combining TD and BUstra tegies " TD expectations based on the grammar i tself and on what has been parsed so fargu ide and constrain the BU search  , while BU results are used at once to refu teor confirm TD expectations  .  / -  215 -The parser is described and contrasted wi th several other TD and BU parsers  . 
The most notable features of the operation of the parser are the follov ~ ng  , As the sentence is traversed from left to right , TD expectations are associated with each position in the sentence  . Each word in the sentence is thought of a sly lnE between a beginnlng and an ending position  , so that the ith word lies between positions i-I and i  , Nodes are built only when they agree with prior expectations and when they meet additional context-sensitive tests  . 
At each moment , the parser attempts to keep the forest of partial trees as shallow as possible  . After the input words have been processed from left to right  , the roots of the trees constructed so far are visited in alternating right to left and left to right order  . With each pass the height of some trees in the parse forest increases until the root for the entire sentence is built  . 

