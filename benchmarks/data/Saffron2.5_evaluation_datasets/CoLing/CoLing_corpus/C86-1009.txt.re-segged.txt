INTERFACILE : Linguistic Coverage and Query Reformulation 
Yvette Mathieu Paul Sabatier
CNRS-LADL,
Universit 4Par is 7
Tour Centrale 9E
2 Place Jussleu
75005 Paris
I . INTRODUCTION
The experience we have gained in designing\[3 , 6 , 7\] and us ing natura l lanauage in ter faces has led us to deve lop a genera l natura l language system  , INTERFAC\[LE , involving the following principles : the linguistic coverage must be elementary but must include phenomena that allow a rapid  , concise and spontaneous interaction , such as anapho ~ a ( ellipsis , pronouns , etc . ) the l ingu is t i c competence and l imi ts of the interface must be easily and rapidly perceived by the user  . 
the interface must be equipped with stra tegies and procedures for leading the user to adj us this linguistic competence to the capacities of the system  . 
We have illustrated these principles in an application : a natural language  ( French ) interface for acquiring the formal commands of some operating system languages  .   ( The examples given here concern DCL of Digita l 
Equipment Corporation).
2. INTERFACILE's ARCHITECTURE
The system is composed of : - aportable syntactic grammar of French written in the formalism of 
Metamorphosis Grammars\[2\].
-a domain dependent lexicon-grammar\[4\].
-a domain dependent knowledge base written in a subset of predicate logic  ( Horn Clauses )   . 
Operating on these linguistic data and domain knowledge : - a syntactic parser coup led with the grammar and the lexicon-grammar  ( i ) produces intermediate analyses of questions , and (2) generates some messages in case of errors . 
-a semantlc parser transforms the syntactic analysis into a semantic representation by consulting the knowledge base  . 
-an evaluator consults the knowledge base and produces answers to questions given their semantic representation  . 
-a general system guides the user and helps h imto formulate and reformulate his queries  . 
The system is entlrely programmed in PROLOGII and runs on various computers  ( VAX , SPS and micro-computers ) . Responses are given instantaneously . 
Eere is an example of a dialogue with
INTERFACILE :> comment cr de run flchler ?- utill sezla commande : 
CREATE nomflchler > comment l'imprimer?-u tilise zla commande : 
PRINT nom?ichier > comment modifiers on contenu?-utilise zl ' ddl teurave cla commande : 
EDIT nomfichler > comment copier unfichie rd a neun rd per to lre ? ut ll lse zla commande:COPY nomflchier\[nomrd pertoi re\]>commentrenommercedernier?-util isezla commands : RENAME/DIRECTORY\[anc ienr dpertoire\]\[nouveaurdpertoire\] < Dialogue I >  ( The prompt ">" precedes the user's queries , the prompt . . . . . precedes INTERFACILE's answers . English translations of the dialogues are given in the appendix  )   . 
46 3. LINGUISTICCOVERAGE
INTERFACILE handles only elementary s~nt act lc structures ? In order to ensure a concise and spontaneous dialogue  , profors Ls have been introduced such as : '? pronouns  ( le , la , les , en , y , lui , 
Ieur .   .   .   . )-possessives ( son , sa , ses .   .   .   . ) demonstratlves ( celui-ci , ceux-ci , cedernier ~ .   .   .   ) If an ambiguity is detected during the resolu i : i on of a profovm  , INTERFACILF , asks a question ~ as in the fo\] . \] owing dialogue :> comment copier unfl chier dans unr Spe ~ tol ~' e ? "- utlli sezla commands:COPY nomfichier\[nomrQ per ' toire\]>commentl'effacer ? ?"' ~   1 ' ~' renvoie ~: fichier ? ( i
P g p e r t o i r e ? ( 2 tapez lenum 4 rode vo't rechoix . 
< Dialogue 2>
Proform r ~ solt ttlon is based solely on lex icala ~ d syntactic information  . This strategy Isvital in the framework of a didact  . ic system oriented towards beginners as the fo llowing dialogue shows : > commenten voyer un message Aunutilisateur ? utilise zla commands : 
HAIL > commentlesup primer ? " le " renvoie & : message ? utilisateur ?% apezle  num4ro devotrechoix . 

INTERFACILE n'en saitrien , maissalt comment : envoyer unmessage 6cr ireun message sup prime runfic hier suppr imerun  r6per toivesup prime run message < Dialogue 3> If the proform resolution had been based on the domain semantics  , the system would have produced % he answer for " suppressing a message  . 
4. QUERY REFORHULATION
Given the plethora of syntactic structures and the complexity of mental processes invo lved in natural language understanding  , the linguistic competence of in % effaces yet remains limited  . If we resort to such systems to request ~ serv ice or obtain information that we lack  , we generally know much more than the inter face itself on the various ways for fo ~mulatlng our query  . 
Ue argue that the quality of a natural language interface must be estimated not on ly in terms of its linguistic coverage but also in terms of the procedures for dealing with incorrect  , extragrammatical ( i . e . correct but not expected b ~ the interface ) or semantically deviant sentences . 
Knowing that error recovery is a complex task in the " restricted " framework of p rogramming languages  ( limited syntax and rJ . gorously defined semantics ) , one can appreciate-the difficulty of endowing natural language interfaces with such capabilities  . 
One approach to " the problem of error recover Jngisto " accept " user queries that deviate from the system's expectations and  ( unbe known to the user ) manipulate them into a form that can be an a lysed  . FoP an overview of this approach , see\[1\] . This method is costly to implement , and moreover % as't wo theoretical faults :   ( I ) There is no guarantee that the system's in ter pretation of a " deviant " query will cor respond to the user's intention in posing the question  . 
(2 ) There will always be a limit to the degree of deviation the system can tolerate be foreit gives up trying to analyse a user query  . But if the transformation of deviant queries into recognizable structures is performed automatically  , the user will * lever know where this limi tlles  , and may believe that the system can make sense of anything heenters  . The distinction between the sentences the system interprets correctly i ~ nd those wh ich it entirely rejects will seem arbit rary to him  . 
The strategy developped and implemented in INTERFACILE is quite different  . Our philosophy is not to mislead the user concerning the system's real capabiliti es  , but rather to lead his linguistic competence to that of the interface  . 
Here is an example illustrating such as t rategy :> comment a jouter Aunfichier is contenud ' unflchier?-pour " ajouter "   , utilise zla construction : &\[ quel que chose \]  compl4tez   ( outapez/pour annulet ) > comment ajouter . . . 
< Dialogue 4>
Here is another example :> commentenvoyer un message dans unterminal ?- pour " envoyer "  , utilisezles constructions : envoyer\[ quelque chose\]&\[quelqu'un\]envoyer \[ quelque chose \] sur\[quelque chose\]  compl4tez   ( outapez/pour annulet ) > commentenvoyer . . . 
< Dialogue 5>
INTERFACILE explains exactly which part of the question it doesn't understand : an unknown word  , a verb with an incorrect preposition or unexpected order of complements  , etc . In case o?spelling errors , solutions for correction are given to the user  \[8\]  . 
To guide the user in reformulating his query , the grammar and the lexicon-grammar are consul te~as knowledge bases  . The user may reformulate his query with the in formation given by INTERFACILE  . 
( At any moment , the user can also obtain the lists of verbs , nouns , prepositions , pronouns , etc . )  . 
When the user has an erroneous or incomplete v iew of the application domain  , INTERFACILE points outhis misunderstanding , as in the following dialogue :> comment imprimerle fichler d ' uneversion ? flch ler dequoi ? INTERFACILE parleplutft de : fichier  ( to uts implement ) fichier d ' unr ~ pertol reversion d ' unf ichier < Dialogue  6> 
Another example : > comment initialiser unf ichier ? INTERFACILE n'en saltrien  , maissalt comment : ~ dlterun fich lere fface run fichler in it lalls srund is que initialise runed lsquette < Dia logue  7> The guidance given here goes beyond linguist ic reformulation  . It concerns the semantics of the applicat ion domain  . Note that the information given to the user is not preprogrammed  , but is ( I ) deduced from the knowledge base and ( 2 ) generated by the linguistic component ( grammar , lexicon-grammar and parsers ) . 
5. CONCLUSION
As far as the domain of application is concerned  , INTERFACILE has much in common with systems l ikeUC  \[9\] or INTERIX \[5\]  . 
The originality of our system lies in the e ffort we have devoted to :- linguistic phenomena such as anaphora that ensure a natural dialogue  . 
strategies and procedures for reformulation in order to live with the unavoidable lingu istic limitations of any interface  . 
Our research and experience in developing appl ications in these two domains have led us to believe that it is not practical to add procedures to an albeady existing system to make it user-?rlendly  . On the contrary , these problems must be taken into account in the design phase  , as we have done in designing INTERFACILE . 
6. ACKNOWLED GEMENTS
We are gra'te?ulto Hannah Blau for her fruit fulcomments on a preliminary version of th is paper  . 
We thank the Centre Nondiald ' Informat ique  ( CNI , Paris ) for giving us the opportunity to develop a version of INTERFACILE on a 
VAX785.
7 . REFERENCES\[i \] Carbonell J . , Hayes P . , " Recovery S t ra teg ies for Pars ing Ext ragrammatical Language "  , American Journal of Computational
Linguistics , 9, 34, 1983.
\[2\] Colmerauer A . , Les Grammai res de N4tamorphoses , GIA , Luminy , Universit 4 Alx-Narseille If ,  1975 , and " Metamorphosis Grammars " in Natural Language Communication With Computers  , Bolc L . ed . , SpDlnger Verlag 1978 . 
\[3\] Duchier D . , Sabatier P . , INTERFRANCE : Un proto type d ' in ter face en langue fran Galse  , Rapport de recherche , CGE , Harcoussis ,  1982 . 
\[4\] Gross H .   , " Lexlcon-Grammars and the syntactic analysi s of French "  , Proc . of
COLING , Karlsruhe , 1984.
\[5\]GuezS . , Sabbagh S .   , " INTERIX : Unsystbmed'aide&l'utlll sation d ' Unix "  , 
Confdrence AFCET , Paris , 1984.
\[6\] Ollvelra E . , Perelra L . , Sabatier P . , " ORBI : An exper t sys tem fo r env i ronmenta l resources eva luat ion through natura l language  , Proc . of First International Logic Programming Conference  , Marsellle ,  1982 . 
\[7\] Pique J . F . , Sabatier P . , " An in fo rmat ive , adaptable and efficient natural language consultable database system "  , Proc . of ECAI
Conference , 1982.
\[8\] Sabatler P . , A P ro log program for spe l l ing cor rec t ion  , Note technique , LADL ,  1985 . 
\[9\] Uilensky R . , " Ta lk ing to UNIX in Eng l i sh : An overv iew of UC " Proc  . of AAAI Conference , 1982 . 
APPENDIX : Translation of sample dialogues
Dialogue i :> how can I create a file ?- use the command : 
CREATE file name > how can I print it ? - use the command : 
PRINT flle name > how can I modify its contents ?- use the editor  , by the command :
EDIT file name > how can I copy a file into a directory ?- use the command : COPY fil ename\[dlrectoryname\]>how canIre name the latter ?- use the command : RENAME /DIRECTORY\[old directory\]\[new direc tory\] 
Dialogue 2 :> how can ICopy a file into a directory ?- use the command : COPY file name\[di rectory name \]> how can I delete it ? -" i t " refers to : file ?  ( i ) directory ? ( 2 ) enter the number of your choice . 
Dialogue 3 :> how can Isenda message to a user?-use the command : 
HAIL > how can I suppress it ? -" it " refers to : message ?  ( I ) user ? ( 2 ) enter the number of your choice . 
> 2-INTERFACILE doesn't know , but he know show to : send a message write a message suppress a file suppress a direc to ry suppress a message 
Dialogue 4 :> how can I append to a file the content of a file ? for " append " use the structure : append\[something\]to\[something\] complete  ( or type/to cancel ) > how can I append .   .   . 
Dialogue 5 :> how can Isenda message in a terminal ? for " send "  , use the structures : send\[something \] to\[somebody\]send\[something\]on\ [ something \] complete  ( or type/to cancel ) > how can Isend . . . 
Dialogue 6 :> how can I prin't a file of a version ? f ile of what ? INTERFACILE " talks about : a fi leafile of a directory a version of af ile 
Dialogue 7 :> how can I initialize a file ?- INTERFACILE doesn't know  , but he knows how to : create a file edit a file delete a file initialize af loppy disk initialize a disk 
