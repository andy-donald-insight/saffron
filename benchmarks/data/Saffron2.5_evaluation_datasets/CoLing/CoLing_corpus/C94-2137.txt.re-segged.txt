Long-Distance Dependencies and Applicative Universal Grammar 
Sel)astian Shaumyan
Yale University , U . S . A . , e-maihs haumyan@miner va . cis . yale . edu
Fr6d ~ rique Segond
Rank Xerox Research Centre , France , e-maih fi~ederique . ~egond@xerox . fr

To deal with long-distance dependencies , Applicative Universal Grammar ( AUG ) proposes a new type of categorial rides , called superposition rules . We compare the AUG rules with the alternative rules of Steedman's Combinatery Categorial Grammar  ( CCG )   ( Steedman ,  1987 ,  1988 , 1990; Szabolcsi , 1987; Ades and Steedman ,  1982) . In contrast to Steedtmm's rules , the AUG rules are free from inconsistencies in their semantic interpretation  , fi ' ee from spurious ambiguity . " lhesuper position rules arc based on the Theory of Type Supet position  , established independently of the problem of long -distance dependencies and having a broad unifying power  . 
I . Characterization of Applicative
Universal Grammar
Applicative Universal Grmnmar ( AUG ) is a linguistic theory that uses the lormalism of cat cgorial g~unmar  , as a means for representing the structure of language  . AUG has two levElS : 1 ) lhestudy of the grammatical sructur c in its clt ( genotype grammar )  , ~ md2 ) the study of the linear representation f the grammatical structure  ( phenoty pe grammar )  . AUG includes a system of combinators ( Curry and Feys ,  1958)  , ' rodfi ) nnulates semiotic on cepts , principles , and laws that dctcnninctile fimctioning of nat -ur~d languages  , assign systems ( for a complete description of AUG , see Shaumyan ,  1974 ,  1977 , 1987; Dcsci6s , 1990; Scgond , 1990a ; some applications of AI\]G arc discussed in Shaumyan  1989  ,  1991) . 
AUG is based on the relation operator-oper and , which corresponds to the relation fi~nction -argument i categorial grmnmar  . We prefer the terms operator-oper and for reasons imilar to those given byll indley and Seld in  ( 1986 , pp .  44-45) . In AIIG categories are generated rccur-sively by the type-forming operator O  , and are called O-types . AUG recognizes two primitive types -- terms ( nouns and noun phrases ) and sentences , denoted by t mids , respectively . The rule for generating O-types is : 1 ) The primitive type stands are O-types . 
2) If x and ym'eO-types , then Oxy is an O-lype . (1) For the sake of brevity , we use the term type in the sense of the O-type . Taking t and s as primitives , wc generate the inductive class of types : t , s , Ott , Oss , Ots , Ost , OtOts , 
OOts Ots , and so on.
In representing the types weu~the parentheses -free Polish notation  , which is more convenient than Curry's nola-tion with internal parentheses  . 
The basic rule of combination of phrases is the Rule of Phrase Application  , which is defined as follows : Phrase A of type Oxy  , called an operator , combines with phrase B of type x , called its operand , to form phrase AB of type y , called its resultant :
OxyAxBy(AB ) (2)
The applicative tree of (2) has the form : y(AB )
Oxy AxB ( 3 ) " llm concept of immediate constituents i defined as : If phrase A is ml operator and phm ~ B is its operand  , then they , are in unediate constituenls of file resultant ( A B )  .   ( 4 ) The concept of closeness i defined as: ( liven phrases A and B that are immediate constituents of phrase  ( A B )  , if A is a complex phrase comprising immcdiate constituents C and D  , then the syntactic and semantic on n Ection between C and D is closer than the syntactic m ~ d scmanlic on nection between A and B  .   ( 5 ) Under definition ( 5 ) various degrees of relative closeness of syntactic and semantic on nection between immediate constituents me distinguished depending on the complexity of a phrase  . 
in phenoty pegrmn mm " the application operation is constrained by two principles : the Principle of Adjacency of Operators and Their Operands and the Principle of 
Uniqueness of hmnediate Constituents.
l ' rinciple of Adjacency of Operators and Their Oper and s : An operator and its operand must be adjacent elements of a sequence  , so that tile operator either directly precedes or directly follows its oper  , -md .   ( 6 ) Under file Adjacency l ' rinciplc we have two new rules -- the notational wuiants of operator application : one for torward combination mid one for backward combination : 
OxyAxBy(AB ) (7) y(AB ) (8)
These rules are called the Linear Precedence Rules  '  . An alternative notation for these rules splits the type-forming operator Oiu to indexed type-fot ~ning operators Or and  0 l which generate types of the form Orxy and Otxy . The operator of type O~xy has its operand on its right  , and file operator of typeOtxY has its operand on its left  . So the Linear Precedence Rules may be presented as follows: 
Orxy AxBy ( A B )   ( 9 ) xAOlxyBy ( A B )   ( 10 ) llere is an exmnple of applying this notation :
Ort Ottsboughtt newspaperst John Ods bought newspapers sJohn bought newspapers  ( 11 ) Given file Rule of Phrase Application and Linear Prcce-dence Rules  , we can combine tile two rule formats into one system  , as is done with the corresponding rule formats in Generalized Phrase Structure Greanmar  ( Gazdar et al ,  1985: 44-50) . 
Principle of Uniqueness of immediate Constituents ': If phrase A aud phrase B are immediate constituents of phrase C  , then neither Au or B can be an immediate constituent of another phrase D  . (12) q billustrate , consider the sentence : John loves vodk a . 
Here loves and vodk a are the immediate constituents of  ( loves vodk a )  , enid John . aud ( loves vodk a ) are tile hn me-diate constituents of ( John ( loves vodk a ) ) , t in der the alx we constraint , this analysis precludes analyzing this sentence as:  ( ( John loves ) vodk a )  . 
In terms of " algebra , the Principle of Uniqueness of hnme-diate Constituents con'esponds to non-associativity : 
AUG is a non-associative system.
To make the AUG notation compact , we introduce recursively defined adjoined symbols  ( Shaumyan 1987:199 ) : A type symbol is called adjoined if it is introduced in totile type system by a definition of file form: 
Z = Oxywherez denotes , ' madjoined type and Oxy denotes a type where x and y are either other  , adjoined type symbols , of t , or s .   ( 13 ) This type of definition is called definitional reduction  . 
By this process all adjoined type symbols are defined ill terms of the uithnate definientiat  , ' rods . We can introduce as many adjoined type symbols as we need  . llere are examples of the definitional reduction for adjoined type symbols that will be used below : 
PI = Ots
P2 = Oqh = OtOts
P 3 = Otpz = OtOtOtsdI = OplPl = OOtsOts d2  =  OP2   P2 = O OtplOtPl = O OtOtsOtOts ( 14 ) AUG clahns that a typology of word order must be based on a comparison of specific word orders in individual languages with a canonical word order as defined in genoty pegr  , -anmar . The canonical word order requires that an operator precedes its adjacent operand  . For ex , ' unple , the canonical form of file sentence Myolder brother bought an interesting book yesterday is :   ( yesterday ( ( bought ( an ( interesting book ) ) )   ( my ( oMer brother ) ) ) ) . 
2. Long-Distance Dependencies in CCG
Consider , for example , the phrase Apples which Harry eats . This phrase contains three sets of binary dependences :  1  ) apples-eats , 2) which-eats , and 3) Harry-eats . 
The first two sets consist of discontinuous constituents  . 
This is mlia stauce of file phenomenon called intersecting dependencies  . Intersecting dependencies arise when one set of discontinuous constituents is intercalated by another set of discontinuous constituents in the surface expression  . To find au adequate formed characterization f discontinuous constituents and intersecting dependencies is one of the cenla~d problems for categorial gr  , ' umnar , aslbrauy linguistic theorytimt is concerned with linear representation of expressions  . This problem induced some linguists to introduce new rules extending the tbnnalism of categori ~ d gramm ~ u '  . Sleedman's Combiuatory Categorial Grammar ( CCG ) proposes file following , -malysis of the phrase Apples which Harty eats ( 1987:415 ; presented hcrc in the AUG notation ) :  ( apples ) whichllarty
O Ots Ott O Otss
Ot teats
Ot Ots ? OIIIX ) Se backward
Ots apply forward (15)
In (15) , subjecty per aising ( assigning O Otss to Harry ) in coujuuction with composition is used to resolve tile difficulty caused by gapping involved ill the extraction of the direct object of the finite verb eats  . 
Forward and backward composition , ared clined as follows ( ill terms of AUG ) : Under the rule of " compose forward " , A of type Oxy and B of type Oyz combine to yield the result  ( A B ) of type Oxz . Under the rule of " compose backward " , A of type Oyzaud B of type Oxycomh in c to yield the result  ( A B ) of type Oxz . (16) Typerai ~ ing is defiue ( las , ' moperation whereby an oper- , ' rod acquires a new type that turus it into , ' moperator over its operator . The general rule of typeraising in tile AUG notation is : x-~OOxyy  ( 17 ) 
AUG as follows:
Subjecty peraising is a proccss by which a subject of type t acquires the type O Otss  , which turns it into an opcm to r over the predicate  ( 51 type Ots . ( l8) As , ' moth crexampl c of the ~ m ; dysisIhat uses typeraising , let use on sidcr the scntcnce John loves Mary wiMly and Suemadly  ( Bouma ,  1989: 25) . Using typcraising and compositiou , the analysis of this sentence can be pre-senlcd as follows in he AI  . IG notation:
John loves Marywi Mly and Suenu Mlyt P2 t Op2P2 OxOxxt Op2P2 raise object
Op2PlOP2Pl
COlI\[)OSP , .....
backward OP2P1O1) 215 I apply for w,'ml .   .   .   .   .   . 
(X)P2Pl()p2 plapplyI~mkward
OP2 Pl . . . . . . . . . . . . . apply backward
Ptapply I ) ackwards (19) in (19) , to resolve the difficulty caused by gapping involved in the coordination operation  , objecty per aisiug is used ( assigning OP2 Plto Mary and Sue ) a hmg with composition . 
l ) oes lhe CCG machinery produce adequate syntactic and semaulic represenlations of the stn ~ cturc of a sentence ? What is the semantic interpretation  ( 5 1 typeraising ? It is ck fimed lhatIlm nominative case moq  ) hology in lali-guages like 1 , at in delermines a noun phrase argument like Balbus to be something that must combine with a predicate  ( Steedman , 1990:22l ) . But case endings ~ e not reli-ablc criteria for detc  , ' mining facts of syntax and selnalllics , litRussiml and lnally oilier languages thc lIOlll-inativ ch ~ Lsnocndings  . Scmantic ~ dly , predicate+subject is an attributiv conncclion just as adjectival modiJier+subject  , l ? c dieate and a ( (jcctival modificr arc determining members , and sul)jcct is th cirdetermined member . 
Accordingly , w c gettile prolx ) rtion:predicate:subject=adjectival modifier : subject  ( 20 ) This means that if the synlactic categorial system is to confi  ) rm to the semanticate go , ' i al system , predicates must be operators over subjects just as adje eives  . Typeraising transformings ut ) jeets in lo operators over predicates conllicts with the scmml lie categorial system  . 
Furthermore , if in ( 19 ) we have a correct analysis of e ( ~ ) r-dination , we should b cable to deduce the two interpretations of the scntence John loves Mary wildly and Suemadly : " John loves Mary wildly  , aud John loves Suemadly " mid " John loves Mmy wildly  , and Sueloves M , - u'y madly . " This is a classic case of mn biguity with co ( n'dina ~ tion ( we do not know if the second conjunct is subject or object  )  . Unfortunately CCG fails to distinguish I ) ctweenth c two interpretations . 
The other wellknown prot ) lem with typeraising is spurious ambiguity . Spurious mn biguity is multiplemmlyses of one sentence  , Idl o1' them related to files ~ uncseinautic interpretation  . For instance , just by using subject and ol ~ icctyperaising one obtains four different analyses ti  ) rasimple sentence :
John loves Mary t Otp It-~s ( ) pl s OtPl t --> s
OplsOtPlOpl ~> st ( ) lPl Op2Pl - ~ s ( 2 0 These loura\[mlyses arc associated with just one motoring :  ( ( loves Mary ) John )  . 
Therem ' e other difficulties with typeraising . We see that in ( 19 )   ( Mary wildly ) and ( Suemadly ) m'e assigned type OP2Pl , which is associated with the accusative luucli ( nLIt is very dillicult to accep that ( Mary wildly ) or ( Suemadly ) a redirect objects of low ' , or that they arc at all coln pat its le . The correct analysis is : the adverbs wildly and mad@me modifiers of the verb love  ,   , ' rod the nouns Mary and Sue are direct objects of the verb love  .   ( Mary wildly ) and ( Suemadly ) arc phantom coustituenlsIhat ( 1 oIIO1 correspoll ( lI ( 1 ~ uly synlaetic or Seluaul Jcreality . 
Typeraising corresponds to I hecoml)inator C . and com-posithm correspond to combinator B . Both m'c powerful tools when properly used . One of tim conditions of Ilmirl ) roper use is respect for constituency . A ( 1G uses these combinators widely when their usc is justified  . 
The main sinoi ' CC ( ; is that it fails to recognize Ilmt syn-laclical d semantic on nections are non-associative  . CC ( ; bml sliom linguistics Ilm norm~d non-~ts socialive constituency m mlys is based on the explicit or implicit rccognilion of the hierarchy of relative syntactic m~dsemm diclo ~- IleSS of cOnlleC liOllS betwe cll in unediate conslituents of a sentence  . 
3. The AUG Theory of Type Superposition
An altcrnativ c method of parsing gapping consmlct hmsi based on Ihc Thcory of Typc Superpositi  ( m . "1 o explain our new method , wc need to outline this theory briclly . 
( ; ir on a synlactic unit , a secondary syntaclic type may bcsupelposed on its in herc nl  , primaxy syntactic tylx : so as to form a new bislralal  , syncretic type . For exmnple , when the suflix-ing is used to change Ihe linite form of Ilm verb to it lslruct into a verbal noun--the socalled gerund-instructing  , w c have a ease of the supcr position of type to n typeOtOts  . Thc verNdnoun retains th c synlaetie rime-lion of I heverb to inslruct : it can lake a not'dcct in the accusative  ( on instructing him ) and an adverb ( He suggested our immediately instructing them )  . The s~unc is line of IheI~nglish or French in linilives : they behave both like verbs and nouns  . For exmnplc , illtile Frellchsenl ~ llec Life de sliv resest divertissant or in the English scntence " lbread books is fim the infinitiv cslake directobj ccts likc finite verbs and simultaneously are subjects like nouns  . 
The suflix-ing ( or any olher similar device ) we call a 8: ; 5 superposer , and the finite form of the verb to instruct with respect to the suffix-ing we call the superponend of-ing  . 
The suffix-ing superposes the syntactic type t on the syntactic type Ot Ots of the verb to instruct so as to combine them into a new syncretic syntactic type  . 
We can formalize the notion of superposition , as follows : Let E be an expression of type x , and let E take on type y on type x . Then E shall be said to belong to type z such that z is stratified into y superposed on to x  . 
Type z is represented by the formula : < y : x )   ( 22 ) where the colon C ) indicates the stratification of type z into y superposed on x enclosed into angle brackets  . The right part of the formula indicates the primary type of E  , and its left part indicates the secondary type of E  . 
Definition of superposer :
An operator R of type Ox < y : x > shall be called a superposer  .  (23)
Rule of Superposition :
Ox < y : x > AxB < y : x > ( AB ) (24)
Type superposition has important consequenccs both for linguistic theory mid computational linguistics  , the discussion of which is beyond the scope of the present paper  . 
We will only focus on the topic of our paper--long -dis-tance dependences  . For the lack of space we must confine ourselves to some examples of our approach that conceru topicalization  , relative clauses , and gapping ( a detailed presentation of the theory of type superposition is given in Shaumyan and Segond  ,  1993) . 
4. Long-Distance Dependencies in AUG
We propose a new approach to parsing gapping sentences that allows us to dispense with the concept of typeraising  . AUG claims that gapping superpose secondary types on primary types of the adjacent syutactic units of a sentence  , thereby establishing new relations betwecn them on top of the old ones preserved in superposition  . 
Here is the AUG alternative analysis of the phrase in  ( 15 ) :  ( apples ) which Harry eats
OxOtttOtOts
SUl)etl)osedis ~ Ots : OtOts > apply backward
Sapply forward
Ott (25)
Under the characterization fsuper position i the foregoing section  , the obligatory absence of the adjacent direct object in apples which Harry eats is a contextual operator superposing type Ots on type Ot Ots of eats  . Thcsuperpo-sition yields the same result as the hypothetical pplica-tion of eats to its absent direct object  . That is , the secondary type of eats is equivalent to the type of the hypothetical combination eats '+ direct object  . Then , the application of eats to Harry results in Harry eats of types  . Following Benveniste's analysis of relative pronouns  ( 1966: 208-224 )  , we consider them operators having variable oper and s  ; hence , type OxOtt is assigned to which . 
Type superposition is a strictly fonn , -d concept reflecting observable formal processes of language  . There are observable strictly formal criteria for defining superposition  . A derived syntactic unit with a syncretic type is always more complex than the initial one  ; it consists of two parts : initial syntactic unit +superposer  . So reading , where - in g is a superpos cr , is more complex than read . 
But where a reformal markers of superposition i ( 25 ) ? The answer is that superposers , as all other language items , are signs , and a sign is not necessarily a sequence of sounds  . It may be a change of stress , an alternation , a change of word order , a change of grammatical context , etc . ( ShaumymL 1987:35) . In ( 25 ) the syntactic on figu-ration of the phrase apples which Harry eats contains observable contextual signs of superposition  . To do justice to this fact we have to use an adequate formalism  . 
AUG includes two principles to describe superposition : the Principle of Elimination of Empty Constituents and the Principle of Syntactic Assimilation  . 
Principle of Elimination of Empty Constituents ': Given a syntactic group of an operator A of type Oxy and its oper and B of type x  , either A or B may be empty : 1) if B is empty , empty B serves as a contextual sign superposiug typey on type Oxy of A  , so that A is assigned the syncretic type < y : Oxy  ~  ; and 2) if A is empty , empty A serves as a contextual signsuper-posing typey on type x of B  , so that B is assigned the syncretic type < y : x ~ .   ( 26 ) The Principle of the Elimination of Empty Constituents eharact crizes natural syntactic onnectivity  . When in the group operator : oper and file empty operand is eliminated  , the operator represents the whole group and is assigned the type of the whole group  . Conversely , when in the group operator : oper and the empty operator is eliminated  , the oper and represents the whole group and is assign c d th c type of the whole group  . 
Lctus turn to the senteuce John loves Mary wildly and Suemadly in  ( 19 )  . As was said above , this sentence is , ' unbiguous : Sue may bca subject or , an object . A correct syntactic analysis of this sentence must reflect this semantic ambiguity  . Dcpending on two possible iutcrpre-tations of this sentence  , we discover two different gap-pings here : " John loves Mary wildly  , and\[loves\]Suemadly " and " John loves Mary wildly  , and Sue\[lovesMary\]madly " . In the light of the lhiuciple of Elimination of Empty Constituents  , AUG proposes the following twommlyses of the sentence to reflect wo different gappings : t  P2 tapply -- f6rward Plapplybael ~ ward wiMly and
OP l P l O x O x x
Pl
Pll loves l Suemadly tOPl Plsuper pose Pl--<Pl : t > apply backward Pl ? apply 
OP lP1 forward apply backward (27)
John loves Mary wildly and Suel toves Mary \] madly t  P2 tOPl PlOxOxxtO plPl--apply superpose Pl f6rw~d Pl~PI : OPlPl > apply apply bacl~ward bacl~ward PlS ~ apply apply backward OSS  f6rward apply backward ( 28 ) 
Principle of Syntactic Assimilation :
Given two phrases A and B belonging to types incompatible under the Rule of Phrase Application  , one of these phrases can change its type by superposition so that the types of the two phrases become compatible  , if tile relation A : B is analogous to some relation X : Y between phrases of compatible types  . (29) Consider the sentence Apples Harry eats . q tf is sentence is an exmnple of long-distance dependency because the subject intervenes between the direct object and the predicate  . ! Iereistile AUG analysis:
Apples Harry eats ttOtOts
SUl ~ rposeOl,s < Ots : OtOts > apply backward
S---superpose Ols < Ots : S ~ apply backwards ( 30 ) We observe that in ( 30 ) Apples is the topic and Harry eatsistile comment  . Since the proportion topic:comment=subject : predicate holds  , type Ots is supcrposed on types of ttarry eats . 
The Principle of Syntactic Assimilation is completely general : it concerns both long -distance and immediate dependencies  . Consider the phrase gold watch . Both words have type t . Therefore , they belong to incompatible types . But since the proportion gold : watch = goMen : watch holds  , type Ott is superposed on type to fgoM . 
The phenomenon of superposition must not be coufused with polymorphism  . Polymorphism is a situation when a word is assigned several types  , having equal syntactic weight . For example , an English adverb can be assigned at least three types having equal syntactic weight : OPlPl  , Op2 P2 or OP . ~3 , depending whether it modifies an intransitive , transitive or ditransitive verb . I iere we have an equality between the types . But in the above example the noun gold remains a noun even though it modifies another noun  . To describe polymorphism in a compact way ,   Fr6d6rique Segond has introduced the concept of type variable  . " Ilms , the above and other types that can be assigned to an adverb are coded by the formula Oxx  ( Seg-ond , 1990 a:131-132) . Other cases of polymorphism are exhibited by the conjunction and  , which can combine two sentences , two nouns or any units belonging to identical types  ; ~ md by the relative pronoun which of type OxOtt , mentioned in (25) . Depending on different cases of polymorphism , we introduce various type variables . 
5. Conclusion
We have compared two " alternative methods of compula-lion of long-distance dependencies : the CCG and AUG methods  . Both methods , are consistent with respect otheir mathematical machinery  . 
The essential difference between the two methods is that while AUG with its theory of superposition expands its formalism to reflect file linguistic reality  , CCG , by abandoning the normal constituency analysis , gets caught up in its formalism to lapse into linguistic unreality  . 
CCG analysis produces phantoms , as : ( He must ) leave . 
(( He must ) love ) her . (31)
This startling analysis does not permit us to correctly describe agreement  , government and clitization . These artificial constituent structures are completely divorced from the syntactic and semantic reality  . 
The CCG's use of typeraising iu conjunction with type composition changes the initial natural types assigned to words into artificial types and produces artificial constituents for the convenience of computation  . By contrast , supeq ) osition , in conjunction with the Principle of Elhni -nation of Empty Constituents and the Principle of Syntactic Assimilation  , changes natund types into natural types and produces yutactically and semantically appropriate constituents without any sacrifice in the consistency of the mathematical formalism or in the convenience of computation  . 
In support of their departure from the accepted e alalyses of syntactic on stituent she proponents of the CCG refer to psychological studies ou speech recognition claiming that hm nan " recognizer " works " from left to right "  . ( Ades and Stcedman , 1982:517-518) . 
~\[kvo problems arise here . First , althoughuman speech is linear and the words of a sentence are produced from left to right  , so to say , that does not mean that the listener analyzes spcch word by word  . It is reasonable to assume that the listener performs the analysis of a sentence first by syntactic blocks and then globally  . There is no conchl-sive psychological evidence that tile hearer's recognition of tile sentence sUucture corresponds to the CCG method that disposes with the normal constituency analysis  . 
Second , psychological phenomena are irrelevant to confirmation or refutation of linguistic theories  , because fin-linguistic processes involve the psychological processes in the human mind  . But logical and mathematical reasoning also involve psychological processes  , l lowever , no body tries to b~selogic or mathematics on psychology  . 
Linguistics is part of semiotics -- the theory of sign systems  . Sign systems , as well as mathematical systems , are in the human mind . But the laws of semiotics and mathematics are different from the laws of psychology  . 
One may argue that computational linguistics is different from ordinary linguistics  , and therefore any parser will do for computational linguistics as long as it " works  "  . We believe that good computatiol ml linguistics must be good linguistics  , ' tq well . Both ordinary and computational linguistics must share common theoretical principles characterizing the nature of human language  . Computatioual linguistics is not second-rate linguistics where anything goes  . The real difference between the two types of linguistics is that compu Ultional linguistics exp  , ' mdsordinary linguistics by rules characteriz ing its interaction with computers rather than distorts it  . Computational linguistics is at the cutting edge of the study of hum  , ' mlauguage : it must enrich our understauding of all its aspects  , rather them fudge the linguistic oncepts for the sake of the ease of the implementation  . 
Their reparable defect of the CCG method is that it produces phantom constituents m ~ dphautom slructures that precht deacorrect analysis of linguistic processes  . 
The CCG method is interesting at tdim portant as an experiment in rite application of combiuators in linguistics  . The negative results of this experiment ~ u'e important in that they reveal the hazards involved in the use of combinators  ( for use of combiuators in AUG , see Shaumyan , 1987; Descl 6s , 1990; Descl 6 set al 1985 ,  1986) . 
As an instrument of cognition mathematics has a specific function -- to be a tool of deduction  . But deduction is neutral to file value of ideas . It is like a mill : if you put grain into it , you will getflour ; ~ utdify ouput in chaff , you will get processed chaff . Mathematical consistency does uot guarantee a correct description of reality  . " Side by side with mathematization f knowledge , mathematization f nonsense also goes on ( N~dimov ,  1981: 149) . " The use of mathematics as a tool of deduction makes sense only when the initial ideas from which we deduce their consequences have value  ( on use and abuse of mathematical formalism , see Shaumy , ' m1987:2829 ,  318-321) . 
In conclusion , we would like to say a few words about I he computer implementation fAUG  ,   Fr6d6rique Segond has implemented AUG and its theory of superposition to deal with infinitive clauses and gerunds in French  ( for a complete description of the parser , see Segond , 1990a ) . 
This parser has been implemented in PLNLP ( Program ~ ruing Language for Natural Language Processing  , described in lleidom , 1972) at the IBM Research Centerinl ' aris . The parser uses a machine dictionary of 50 , 0 00 ena ' ies ~ md was tested on more thm ~ one hundred ifferent types of sentences  , including constructions such as relative clauses , simple cases of coordinatiou , infinitive clauses , and gerunds , among others . Currently Sebasli~m Shaumyan is working on implementing AUG in functional programming languages  ( Miranda , II askell ) . 

Ades , Anthony and Steedman , Mark .  1982 . " Ontile Order of Words " . Linguistics and Philosophy , 4, pp .  515-578 . 
Benveniste , l~mile .  1966 . Probldmes de linguistique gdnd rale . 
Editions Gallimard.
Bouma , Gosse .  1989 . " Efficient Processing of Flexible Categorial Grammar "  . In Proceedings of ACL ( European Chapter),
Manchester , pp . 12-26.
Curry , Haskell B . and Feys , Robert .  1958 . Combinatoty Logic . 
Vol .  1 . Amsterdam : North-Holland Publishing Company . 
Descl 6s , Jean-Pierre ; Guentch 6va , Zlatka ; Shaumyan , Sebastian .  1985 . Theoretical Aspects of Passivization it he Framework of Applicative Grammar  . Aansterdam & Philadelphia : John
Benjamins Publishing Company.
Descl 6s , Jean-Pierre ; Guentchfva , Zlatka ; Shaumyan , Sebastian .  1986 . " Reflexive Constructions : ' lbwards a Universal Deft-nitiou in the Framework of Applicative Granuuar  . " Linguistic aelnvestigationes , 2 . 
Descl 6s , Jean-Pierre .  1990 . Languages applicatifs , langues naturelle set cognition . Paris : Hermes . 
Gazdar , Gerald ; Klein , Ewan ; Pullum , Geoffrey ; Sag , Ivan . 
1985 . Generalized Phrase Structure Grammar . Cambridge , Massachusetts : lhtrvard University Press . 
It eid or nG . E .  1972 . Natural Language Inputs to a Simulation Programming System  . Technical report from the Naval Post-graduate School  . 
llindley , J . R . and Seldin , J . P .  1986 . lnt poduction to Combina-tors and Z-Calculus . Cambridge : Cambridge University Press . 
Nalimov , V . V .  1981 . hithe Labyrinth of lz Jnguage : A Mathe-matician 's Journey  . Philadelphia : ISI Press . 
Segond , Fr6d6rique , 1989 . "Grammaire cat6gorielle earichie : uue implementation " , hvceedings of the 7th Congress AFCE
RFIA , P;u'is , pp . 599-613.
Segond , Fr 6d ~ rique . 1990a . Grammaire eatdgorielle du francais , t / tudeth(orique t implantation . Lesystkme GraCF ( Grammaire Catggorielle Et and u )  . Paris : IBM FRANCE . 
Segond , Fr~d 6 rique , 1990b . " Ap proches des grammaires cat 6gorielles " . Mathdmatique , lnformatique t Sciences
Humuines , 110, pp . 47-60.
Shaumyan , Sebastian .  1974 . Applikativn ajagrammatikakak semantices kaja teorija jazyka  . Moskva : Nauka . 
Shaumyan , Sebastian .  1977 . Applicative Grammar as a Semantic Theory of Natural Language  ( translation of Shaumy an ,  1974) . Chicago:t Juiversity of Chicago Press . 
Shauinyan , Sebastian .  1987 . A Semiotic Theory of Language . 
Bloomington & Indianapolis : Indiana University Press  . 
Shaumyan , Sebastijul .  1989 . " A Semioticllleory of Knowle Age Representation and Symbolic Computing  . " Proceedings of the Fourth International Confetence on Symbolic and Logical Corn ? puting  . Madison , SD . 
Shaumyan , Sebastian .  1991 . " Applicative Ilniversal Grammar and Translation  "  . t ' to ceedings of the Fifth International Conference on Symbolicaml Logical Computing  . Madison , SD . 
Shaumyan , Sebastian and Segond , Fr6d 6rique ,  1993 . " The Theory of Superposition of Applicative Ut fiversal Grammar "  . Colloque ~ lnformatique & Langues Naturelles ~ ( LL . N . ) '93 . 
Nantes : I.R.I.N.
Steedmau , Mark .  1987 . " Combinatory Gr ~ unmars and Parasitic Gaps " . Natural xtnguage and Linguistic Theory , 5, pp .  403-439 . 
Steedman , Mark .  1988 . " Combinators and Grammars " . In Oehrle R . T . , Bach E . , Wheeler D . ( eds . ) ,  1988 , Categorial Grammars and Natural Language Structures  , Dordrecht:I ) . 
Reidel ' ul ~ lishiagCompany , pp . 207-263.
Steedman , Mm'k .  1990 . " Gapping as Constituent Coordination " . 
Linguistics and Philosophy , 13, pp . 207-263.
Szabolcsi , Anna .  1987 . " On Combinatory Categorial Grammar " . In Proceedings of the Symposium on Logic and language  , Debrecen , Budapest : Akademiai Kiado , pp .  151- 162 . 

