Transformational Dec~npos?t ~ on z
A Simple Description of an
Algorithm for Transformational '
Analysis of English Sentences ~
Danuta Hi ~
Aravlnd K . Joshl
?University of Pennsylvanla

In this paper , we will presentara ~ her simplified description o ? an algorithm for transformational analysls  ( decomposition ) of English sentences , our purpose here is not to discuss the transformational theory j the full details of the theoretical formulations of the algo-rlthmjor of the gran ~ ar  . Rather j we will present a set of examples of the decomposition and some discussion of them with the hope that it will give enough insight into the capability of the algorlthm and indicate to some extent the power of transformational analysis  . 
? This work was carried out in the Transformations and Discourse Analysis Project j University of Pennsylvania  , sponsored by the National Science

1 . 0 Here , we will present a rather simplified description of an algorithm for transformational analysis  ( decomposition ) of English sentences . 
Our purpose here is not to discuss the transformational theory  3 the full details of the theoretical formulations of the algorlthm  3 or of the grammar W . Rather , we will present a set of examples of the decomposition and some discussion of them with the hope that it will give enough insight into the capability of the algorithm and indicate to some extent the power of transformational analysis ? I  . iTransformations are certain relations among sets of sentences and in particular  , it is possible to relate a given sentence to a set of elementary sentences  ( kernel sentences ) by means of transformations . 
The kernel sentence forms ( for English ) are defined as the string of class marks N~~ followed by one of the kernel Object strings : ~  , N ,  ~  , ~ P__~ ,  __~ , e  ~ , D , A(m Noun ; ~: ~ ense/aux ; ~: verb ; ~: preposition ; D : adverb ; ~: adjective ; ~: zero ) . Thus John bou~h't'a book ; Nar ~ will come etc . are kernel sentences . Each transformation is characterized by certain permutations  , deletions or additions of specific class marks or constants  . In the resultant of a transformation one may look for subsequences which remain ~ xg ~ n ~ even when the resultant is subjected to further transformations  . The 5asic features of the algorithm area ) stating the various invarlant sequences and b ) formulating I ) a grammar of such Invarlant sequences , 2) a corre~spond lng recognition procedure , and 3 ) a systematic procedure for computing the kernel sentences as well as other kernel-like sentences and the corresponding transformational history  . 
It should be emphasized that it is not assumed and also not im-pl~ed in the algorithm that any kind of prior analysis  ( either strlng analysis or constituent analysis ) is requlred as a prere ~ uisltel for the present algorithm  . 
~Such a detailed description will appear later elsewhere  . 
++,+ , . .+ ++ . . . , / i /+\ ~1 . 2 Trans format ions are in i t ia l l y de f ined on kernel sentence forms  . 
However j they work on certain other sentence forms which are not kernel sentence forms  . Thus a transformation is completely defined by first defl nlngit on a suitable kernel sentence form  ( s ) and then extend lng ? the ~ omaln of the transformation to other " sentence forms  . This exte ~ . -slon which contains in finitely many sentence forms can be represented by + first listing a finite number of sentence forms in the extension and all the remaining sentence forms in the extension are obtained by certain recurslve rules  ( see the i-llsts in 1 . 3) . 
1 . 3 Aunan ~ . z , transformation transforms one sentence form into another sentence form and a bi~nary transformation transforms a pair of sentence forms into another sentence form  . Each unary transformation defined on a sentence form may be represented by a sequence of class marks constituting another sentence form  . Most binary transformations can be defined as interruptions of certain unary transformation sequences at stated positions by certain other sequences of class marks  . These In-terruptlng sequences are not sentence forms but are deform at lons_-o~sen-"----- --"--' se~o ~<+ tenceforms correspond ing to the ~ sentence form of the binsry trans -formation  . For example , John was detained by the old woman decom~ses in to woman detained John and womant be old wi thap assive transforma-tion on the first kernel and a binary transformation on the sentence John was detained by the woman and the kernel sentence woman t be old  . ~ The sentence form corresponding to the pass ive transformation  , Nt been V by N is then interrupted by the sequence AN before the last AN is a deform at ion of the kernel sentence form Nt be Asymbo l  . -- which is the second sentence form of the b in ary transformation  . The resulting sentence form is thusNt been V by AB  ,  . In the resulting sentence form the shared symbol N appears only once  . Such a symbol which two transformation sequences ? h are  ( or on which t_hey overlap ) be ignore here the article th . ._~e for s imp l i c i ty . 
a . 2--wlll be called a residue of one . sequence with respect to another .   2 In addition to the transformation sequences which are sentence forms  , and the interrupting sequences ( deformed sentence forms ) which correspond to most binary transformations , there is yet another type of interrupting sequences  ( again deformed sentence forms ) which correspond to nominal-izatlons . For example consider : the book was written by Brown and John's travel to Italy was descrlbed by Mar ~  . In the second sentence j the kernel sentence John travelled to Italy is mapped onto the object of Mary described before the resultant under goes the same passive which acted on Brown wrote the book giving the first sentence  . N's nVPN ( John's travel to Italy ) is a nominalizati0n which appears in many dlf-ferent transformations and carries in them the associated kernel into one of the positions which could be occupied by a noun  . For each transformation sequence in each intersymbol position well stall in-terrupting sequences  ( including both the second and the third kind of sequences as dlscussed above  )  . Of course , the interrupting sequences have their own interrupting sequences  , etc . These Intersymbol interrupting lists will be called i-lists  . 
2 . A sketch of the algorithm 2 . 0 As stated in i , in order to define the set of all transforms we need a set Of sequences of class marks  ( or class mark-llke symbols ) which has 3 subsets . 
1 . Sequences each of which corresponds to a sentence form  ( e . g . the passive sequence Nt been V by N ); 2 . Sequences each of which represents a deformed kernel-form and Is not a sentence form  , but when inserted between specified neighboring symbols of a sequence of the first set ~ preserves the character of the sentence form  ( e . g . _~jenVN ); 3 . Sequences each of which represents a deformed kernel-form and is ~ he concept of the residue can be extended to shared sequences as well as sequences which replace a given symbol in another sequence  . The term carrier is used in this context . This device has been extensively used in this algorithm  . 
-3-not a sentence form , but , when substituted for a symbol in a sequence ( of ~ et I or 2 or 3 )  , preserves the character of that sequence ( e . g . er Vor/L , nA of N ) . 
There are also rules for inserting sequences from the second set into other sequences or into sequences of the third set  , without changing the character of either . 
All insertion or replacement rules are stated in the interruption lists appearing between every pair of adjacent symbols of each sequence  . 
Most of the sequences in the first set represent unary transformations of kernel forms  . Many are extended ( often by permitting the replacement of certain symbols with selected sequences from the third set  ) to include analogous unary transforms of kernel -llke forms  . 
The second set of sequences j together with the rules of their insertion in the sequences for unary transformations  , account for most of the binary transformations . Other binary transformations are represented by replacement in pairs of class marks in unary transformation sequences by members of the third sets most of which consist of nomln-alizat ions  . 
An arbitrarily long English sentence form can be seen as composed of a finite number of such sequences recurst vely embedded in one another  . 
2  . 1 Cor respond ing to the above three subsets o f sequences and their mutual embedding rules  , we recognize three sets of strings . Each string is a program for comparing one o f the sequences with a portion of the ana lyzed sentence form of the data  . The program is equipped to permit interrupt i on by other such programs according to the i- lists of the sequence  . Each string , when entirely matched by a segment Of data , replaces that segment with the carrier of the string  . The car-rier is sometimes null . In strings from the second set it is usually the residue of the binary insert  ( e . g . the center symbol of a noun phrase : N of AN , of ~ , etc .  )  . In strings from the third set the carrier is a class-mark-llke symbol which  , by replaclng a class-mark in a form derl ved from a kernel form I extends it to one simi--  -4 --larly derived from a kernel-llke form . Let the carrier be ~\[ nV~\] for a noun phrase built around an nV  . The extended passive form : N\[or ~\[ nV\] \] t been V by N represents the form of the sentence John's travel to Italy was descr ibed by Hary as soon as the carrier of the str ~ ng replaces in the data the nomlr ~! segment John's travel to Italy  . 
The carrier from all strings in the first set is s  , a symbol of a wellformed sentence . 
The program ' of each l string , whose sequence is a deformed ( Or trans-form e ~ ) kernel or kernel-like form , reconstructs that form for decomposition and attaches ? oit a labe___~ldescrlptive of the deformation  ( or transformation )  . The result of a decomposition is a set of kernel or kernel-llke sentences with labels  . Some of the kernel sentences are/incomplete and have blanks in them because a transformation may det ~  .   .   .   .   .   .   . 
elements . Some kernel-llke sentences may contain , instead of a wo/rd ) a class-mark-llke symbol ( e . g , ~) with a reference . to a prevlous com- ) ponent of the decomposition . If that previous component is a kernel sentence ( with or without blanks )   , then the label ( describlr ~ the de-formation ) with the kernel-llke form ( containing the reference ) with its label , together constitute a description of the transformation undergone by the component kernel sentence  . If the previous component itself is a kernel-llke sentence with a reference in turn to another component  , both ' kernel-llke sentences and all three labe is constitute the description of the transform at lon undergone by the c ~  , nponent kernel sentence ultimately referred to se tc  . 
If the symbol x appears , instead of a word , in a kernel or ker'nel-llke sentence , it replaces a regular noun there . It is introduced in the sentence as a carrier from a nominallzation such as a teacher of Latln  ,   . the driving in structor , etc . The same x must appear in two or more sentences of the decomposition ?  ( one where the nominal stands for a noun , and one in the sentence of whlch the nom -in all zatlon is a deformation  , e . g . x-teach Latin ) . Which x's require identical substitutions is discoverable  , because each x has in a sharp bracket ( < > ) the names of every prevlousllne in which the same x appeared  , often no actual substltution ls posslble and the x serves only to ident lfy ~ with each other  , two or more blanks in different components . The substitution of the noun replacing N for x in lines a jbj  .   .   . disimplied when one kernel-llke component has the form 
It bex ~/ a ~ b . . . d > .
2 . 2 The three sets of strings ( programs ) constitute the major portion of granmmtl cal material in the algorithm  . Another bodyo ? such material is the dlct lonar ~  . ? The dictionary associates to each English word a symbol representing the word ts grannnatlcal class ~ together with markers of certain addition-al characteristics the word may reveal by restricting its environment in the sentence  . Some words may occur in more than one role and have the re-fore several equlvalents in the d ictlonary  . ( e . g . the word labor should be given four diffe rent class marks : present tense VsV  ( untensed verb ) j ( nomlnall zatlon deslgnatl ng the activity of laboring  ) ~ er ' V ( nominal-Izatlon designating the actor ( s )  , possibly laborers in aggregate)) . 

The dictionary for Transformation ^ Crannnar must carry far more de-tails than is needed for the String Analysis alone  . Thus for example the transformational analys is must be able to discover in Johnts sleep not only an ouh phrase ~ but also the incomplete kernel sentence John-sleep ~ which underlies each transformation containing such a noun phrase  . Hence ? the class marks : nV ( sleep ) j  ~ ( sharing ) vA ( brav-ey )  , ( teacher ) , ee V(eloyee ) ,   ( brother ho LaV ( helpful ) and several others . 
~: AV-entrY in the String Analysis dictionary contains information/about : the L~n do fob jects required by the verb V  . An nV may require objects differ/~t from its V and this must be indicated  ( e . g . th ~ attacked the enemy vs . they made an attack " on the enemy ) . 
Noun phrases liken V , Ing V , etc . can occur in place o ? a sentence object or a subject of a sentence but only when it is organized '  ,  \  . 
around a verb requiring such subjects or ob Jectsj and such  , verbs are marked accordingly in the dict ionary  . 
The subject and object restrictions for a verb or a verb-related  -6 -word are recorded in pairs ~ because they are not mutually independent  . 
(0-" is the label for a subject ( Z ) requirement ;  _ . ~_ ~ for an object ( ~ ) requirement of a tense do runtensed verb and some in_~occurrences  ; t ~ nV labels an object requirement of nV -nominallz at lonj ~ ing V those of an i ~ V -nomlnalizatlonl etc  . When needed j ~ I is distinguished from ~2 ( which usually is the same as the corresponding ~ -~  ) to mark the form assumed by the object when it precedes the verb or verb related word  ( compare for instance house construction with construction of house where c~nV l  ( the same as o ~ ) is N , while ~ nV2 ( the same as nV ) IsP\[of\]N ) . ) The analysis is preceded by a replacement of the Words in the sentence by corresponding entries in the dictionary  . 
2 . 3 The process of analyzing a sentence begins in postulatlng  ( in turn ) all those strings in the grammar which may occur at the beglnnlng P--q~o // ~ of a sentence  ( and whose initial symbol is the s~meas the first symbol in the data  )  . ( Seei I of #30) . Each verified postulate forces other ? postulates as its consequences I until the term lnal period of the sentence is found which is consistent with a hypothesis  . It is qulte likely that an analysis will produce more than one correct reading of a sentence j because structural ambiguity is even more frequent in transformational grammar than it is in the meres ~ ring analysis  . 
-7-3. Examples of decomposition
Four examples of decomposition obtained by the algorithm follow  . 
These examples are intended to exhibit the power of the algorithm  . 
It is posslble I without changing the algorithm I to increase the power and depth of the analysis by incorporating more details about transformations as they become available by adding either new transformation sequences or adding new classes and new co-occurence restrl c -tlons in the dictionary or both  . 
Among the various issues which are now recelvlng further atten-tlon  , some are as follows : a ) a better characterization of nF-nouns and the underlylng kernel sentences in terms of which the modifiers can he explained  ( e . g . school prlnclpa ~ ( example 3) , French teacher ; ~ ueen ~ etc) ; b ) the relation of classifier nouns to each other and their kernel positions with respect to ' the lr modifiers  ( e . g . organ ~ ~ e ~ ? er Icche mistry j helpful trip , friendly ~ e ~ j etc . ); ?) precise relatlon of constants ( e . g . hi__ss ~ both in example h ) or classifier nouns with a definite artlcle to other nouns or phrases for which they are are- placement  . 
Examples : The first column lists the kernel sentences or kernel-llke sentences  ( or intermediate resultants )  . The second column glves the rest of the transformational history  . Here the names as stated are partial in the sense that the corresponding strings do not always correspond to complete transform at lal sequences as discussed previously  . 

Text : ? The fact that John is a
TN that N pres . be\[3\]T whis1lie here unbearable . 
R ' BnVDaV ? stranger makes
Npresent V\[3\]I.~I indicates here 3rd person.
lo2.


Kernel or Kernel-transformation llke sentences ~ ( part lal . @mes ) carrier John pres . be stranger ( a ) container 2 noun : Nw that SNw . ~/ l > He-live here ; N ~'- nomlnaliztion ; g ' sn ~"1"N <'2>-cannot bear ~ ( 2 > adJect lvlzatlon : a V ~ ~3>N < l > pres , make'N < 2> AC3> container : NVNASww-2 . 
Text : Our algebra teacher
RlsNer V was requested by the school past be \[3\] enV by TN prlnclpal to interviewn FCoV

Kernel or Kernel-llke sentences a woman candidate from Swarthmore  . 
TNNPN transformations ( partial . names ) carrier first reading : 1 . x-teach algebra2 . We-have x~l > 3 . x-heads3 school ~ . woman-'VP candidate(a ) appapp-a(Vpp = be ; Papp = ~) 5 . c and l date-be from Swarthmore noun , right modified : ? candidate " iPN a 6 . x < 1, 27-interview .   . -'~ passive of container : Sc and l date < ~ , 5 ) ~ Nt Vw N infinitive 7-x ( 3 ~ pas ~ request x\[<1 , 2  ( 6> -  ) x-nomlnallzation : GerVx~i > ? left modified noun:N's Nx  <1  . , 2> x-nominallzation : NnFx 43>, . , compound noun : NIN 2 candldate<~2 k % oughly , container forms are sentence forms In which 1 ) there is a verb ( Vw ) requiring a sentent lal subject or a sentent la lobject or both or  2  ) there is a noun ( Nw ) or fid Jectlve ( Aw ) requiring sen-tentlal complements . 
~ eads is a V for nF principal as found in dic tionary  . -- appropriate -9 -: ! Kernel or Kernel-llke sentences second reading : 



transformations .   ( partial names ) x-teach us algebrax-head school woman-VP candidate  ( a ) compound ? noun : appapp 4 . candidate-be from Swarthmore noun I rightmod ' if led:NIPN  2  ~ . x ~ J >- interview candidate ~ passlve of con- talner :  ) Jlnfinitlve 6 . x < 2> past request x < 1% 2 < , ? ?
Text : x-nomlnallzation : fler vx -nominalization : NnF  5N2 
Accident insurance of an employee by
NnVP Tee VP protects both.
present , V:\[3\] Q

Kernel or Kernel-~llke sentences first reading :
I . -- employ x2 . x-employ him 3 . x < 2>-insure x < l > ( an )
P accident . app ~ . N~3~present protect both his employer
R ' serV second reading : 1 . -- employ x2 . x - . employ-3 . he-~vex/~2>h . x < 2>-insure x < OC in )
P accidentapp ~. N~h > present protect both
Note : he
Text : carrier x < l > x ~2> candidate <3> candidate z3  ,  >
Stransformation ( partlal names ) carrier x-nomlnallzation : ee Vx~I > x-nomlnalizati0n : erV .   . x <2> ~- nomlnallzatlon:nVN\[nV+~??z\] <3  ) container:Nt VNWS Wx-nomlnall zatlon:ee V x-nomlnalizatlon : erV left modified noun : ? N ' sN  2 ~- nominallzatlon:nV container:Nt VN
W . < l > x < 2 >
X < 2, 3>
N\[nV+~?z\]<3>s
The analysis would reach even deeper if the words ~hls and ~ b?th were treated as reference words leading to a substl tutlon j e  . g . 
of x < I . __ . ~> for he , x~I > and x < 2> for both . 
Cropsharing between the tenant and the landowner
NIng VPTN and TNerr
Q may replace N .

Is present be\[3\]T organized labor.
en Ver V

Kernel or Kernel-like sentences an economic arrangement unsatisfactory to a NnV a VP 
I . X-ownland2 . tenant ( the ) and x~l > ( the ) -share crop3 --- arrange - ; Peconomy apph . x-labor-x-nominallzatlon : erV ~ . - - organize x~h > left modified noun : en VN 6 . ~<3>-nots at lsfyx < ~ , 5> qrightmodlfled:~aV7-N <2> present be ' N-~3 , 6~  ( an ) container : N'~t be ' N transformations ~ ( partlal names ) carrier x-nomlnall zatlon : erV . . x ~ I > "~- nomlnallzatlon : Ingv N\[ingVd -? ~~2> 
N"~--nomlnallzation:nVN\[nv\]~3>x < ~, 5>
ISk . An illustrati Qn of the procedure
Example 5 John is a good story teller
This example illustrates the process of analysis in some detail  . 
Because of space limitations for this paper a rather simple structure had to be chosen for this purpose  . A short dictionary of the words in the sentence has been prepared and also a small set of grammar strings in provided for this illustration  . Both were greatly simplified so that rich grammatical material will not obscure the  demonstratl6n of the choice of hypotheses , their verification or rejection , the use of the carrler ~ changes of levels in analysis and the exploration of alternative readings  . 
The analysis always begins with the strlng ~30 postulated . A decomposition ends I when the program associated with thl s~trlng is finished  . All possible sentence beginnings are included in iI of  ~30  . 
- - After-t-hee-nd of--~30-aiternatfve-decompositlons are sought . 
When a new string is postulated on the basis of an i-llst of  . another strlngj the verification of the new string takes place in the next level of a pushdown memory ~ so that the state of computation of the suspended string is not affected  . 
Whenever two or more alternative paths open up for the analy~s~i~s j each must be pursued to a successful completion or until failure occurs  . 
(The analysis must produce every possible decomposition of a structur-ally ambiguous sentence  )  . In our analysls j different paths are pursued ~- 11 -serially . Every time an inspection of i-lists allows more than one hypothesls ~  . one is chosen ~ while a list of the remaining ones together with all relevant positions of the  . memory goes on top of another pushdown storage . The contents of that ? storage is examined . 
after the end of the chosen path . The analysis ends ' after all pos-slble paths have been explored and thls storage is empty  . ~ n the example of analysis given here j we mark by passed open branches by asterisks on the left margin and their resumption by slmilar aster ~ 
Isksen circled.~
Dictionary used in Example ~.
John-N\[proper , ou ~ anj singular\].
Ispresent be\[3~;~r-:N\[orx\];?~=NA/PN/D.
o-:S\[nV/inO\]; to . ~, ~, ~\ [ nV/ingv\]etc . \] a-T\[a \] good-A\[A-ly=well\]story- Nteller-er V\[&:human  , count ; ~ J = ~ erVl:N/N\[nV\]/~;~JerV2;
PN\[orx or N : nV . ~
Grammar Strings used in example 5-
Nominal strings ( each gives a noun-like carrier ) : I?T\[the/a/an \] lliN\[or x ; or ~: nV/ingV/nA/nl~\]2-
Dame=kernel:carrier:N\[the article\  ]   ( as matched )  2 . ~ xi . \[ orx\]iI2, ~, 5, " i2-name: . left modified noun : AN kernel : N-beA carrier : N < address of kernel > ~ eslgnates th lrd person  , -ZZ ~ . 


I0-
Ii-
N\[object\]i I- . ~- ? it .  #x\]i2AN\[nV/ingV ; ori1 . 3 ,   , i 2 - name : left modified nominal : AN\[orx\] addition to kernel of ' N :  ; A-ly ( Alas matched ) carrier : ~ ~ as matched from data ) i I erriI-name : x-nomlnall zatlon kernel : x -V-?carrier:x\[subclasses required from subject of V\]~address of kernel > iIi  2 erVname:x-nominalization kernel:x-VN ' ( N , V as matched from data ) , carrier : x\[subclasses required from subject . of V\]~address of . kernel > i1 , i 2 nV ? nvi 1 - ? t 2 - name:N-nomlnallzatlon:nV\[+~\]kerneI : f/n " carrier : ~ n  ; \] v < a ~ dress of kernel ~)
ObjectStrings : .\[ or x\]i:
II-?name-object contribution to kernel in carrier carrier : ~\[ N\]il N\[orx\]PiI - i  2   1  , 2 , ~ , 9 is - ( as matched from data )   ( Nasmatched in data ) i2i3
N\[orx\]w 13 -name-object contribution to kernel in carrier carrier : ? ~\[ NPN\]=  . 
( NPN as matched in data )
Sentence Strings 20-Nt Vgi I-i2-i3-10 , 11 , 1 , ~ , 3 , ~ , ~ , 6 % -21-
DaJme:kernel:carrier:S < address of kernel >   11   12   13 ~- i ~
Nt be Nt1-i2--1 , 3 , 6 name : ~ containing " be " : N is N kernel : N t be N carrier : S  4 address of kernel > identity of kernel form : Nt V 
N t V ~ ( as found in data )   ( as matched from data ) 
Monitor Stringi Ii2iB30-"S"iI1 , 2 , 3 , ~ , ~ , 6 , 20 , 2 1 i 2 - i 3 -Zllustratlon of the process of analysis : Data  :  . N\[John\]pres . V\[3 , be\]T\[a\]A\[good\]N\[story\]erV\[teller\] . 
~30:=. ? S . ( levell)
S#NiI of 30 allows the following strilgs beginning with N to interupt  30 here : ~ , 20 . Try 20 , mark ~ for the branch opening with 9 on level 2 . 
WData:N\[John\]presV\[3 , be\]A\[good\]N\[story\]er V\[teller\ ]   ~20 : NtV ~ ( level 2 ) 
N = N\[John \] t = present
V = Vb_eaccepts Joh____nn as subject . For a human subject , the ob-Ject cannot be ~6 ( in this simplified grammar )  . The verb b~e-14-rejects object form of ~ I i . 
R~TAmong the remaining strings of i 3 only 1 starts by T . 
Data:T\[a\]A\[good\]N\[story\]~i:TN

N~AfI of i has 2,3 beginning wlthA.
bypassed 3.
of 2 o(1, 2, 3, a , %10) er V\[teller\] . ( level 3)
Try2, mark ~.__~ for
Data : A\[goodJN\[story\]er V\[teller\] . ( level ~) . 
A---A ~/ N=N note : iI of 2 has string 5 beginning with N . 
Mark ~- ~ for the bypassed branch , end 2 . kernel I : story-be good . Resume I . 
Data : ~\ [ story\]~l > er V\[tener\] .   ( level 3 ) continue ~ I$/~N=N note : iI of I has string ~ beginning with N  . Mark open branch ~- ~ . end1 . Resume 20 . 
Data : N\[story\]<1>(a)ery\[teller\] .   ( level 2 )   contfnue~20 of the strings from i 3 allowed by object requirement of the verb be j ~ and  I0 begin wfthN . Try 10 jmark ___ ~ ~ for by passed ~ . 
Dta:\[story\](a ) err\[teller\] . ( level3)  #IO:N
N = Nendi 0. Resume 20.
Data : ~\[ N\[Story\]<I>(a ) JerV\[teUer\] . ( level2) contlnue ~20 . 
~= ~\[ N\[storyL < l>(a)\]
End 20 . Ke~del2: John pres . be story < I > ( a ) . Resume 30 . 
D.ta = scrY\[teller > ( evell ) continue ~ 3o
S = S-~er
There is no string in f 2 of 30 which begins with er . Resume the nearest open branch : #~ at level 3- Erasemark ~ ( kernel 2 is also erased ) ~Data : N\[story\]~I > ( a ) er V\[teller \] . ( level 3) ~5: Ner V
N = Ner?er
V = V storyls a proper object f ~ r teller - 15 -End ~ . Ker~e ~2: x-tell story < I > ( a) . Resume 20 . 

Data : x < 2 > . ( level 2) contlnue ~20
The only string beglnning with x among those of i 3 allowed as object of be is I0 
Data : x < 27 . ( level3) ~ I0:N\[orx\]?N~xend of I0 . Resume ~20 . 
Data : ~\[ x<2 >\] contlnue ~0.
= ~\[ x\[human jct . , slngular \] < 2>\] . However j the verb be with a count-noun subject requires from a noun object an article or an artlcle-replacer  . This lacking j the current branch fails , the branch marked ~ is reopened with #9 on level ~ . ( Kernel 2 of the fai-~ng branch is erased . )
Erase ~+ ~- ~ .
Data : N\[story\]er V\[teller\] . (levelh ) ~: Ner V
N = Ner=er
V = V story is appropriate object for teller.
End ~. Kernel 2: x-tell story < I ~'. Resume I.
Data : x < 2 > . ( levei3) continue ~ i
N = x end 1. Resume 20.
Data : continue ~30

End 30
Print output:
Data : x continue ~ x only one
Data : ~ I0:<2 > ( a ). ( level 2)
CLevel3) ~\[ or x\]
N~X end IO . Resume 20
Data : fi\[x < 2>(a)\] . ( level2) contlnue ~20 fl = fi end 20 . Kernel 3: John pres . bex~2 > ( a ) . 
S.--=--( level I)
Resume 30.
1 . story-be good ( left modified noun ) 2 . x-tell story <1>\ ( x-nomfnalfzatfon:fler V )  3 . John present be x < 2 > ( a )   ( identity of extended Nt VN )  "- 16 -
Are there any branches open ?
Erase ~ ek.
Yes , ~- ~ at level ~. #~ will be tried.
-Data : N\[story\]er V\[teller\] . ( level 5) ? ~5: Ner V
N = Ner=er
V = V ~ is appropriate object of teller end  ~  .   . Kernella : x-tell story . Resume 2 . 
Data : xXl >. ( level ~) continue - ~

End 2. Kernel 2 a : x ~ I ~- be good . Resume I.
Data : continue ~ i #
N----xend I . Resume 20.
( level 3)
Data : x(1,2 >( a ).( l.~el2)continue
The on ! y string allowed to interrup there i s  10  . 
Data : x~1,2 ~( a ).( level3) ~ I o:N\[or x\]

End 10. Resume 20.
End 20. Kernel 3a : John pres . be X ~ It 2 ~
Data : s ~3>. ( levell ) continue 30
S~Se--?end3 0.
(a ). Resume 30.
print output : I . x-tell story ( x-nomfnallzation : ~ erV ) 2 . x ~ i > - be good ( left modifier noun ) 3 . John pres . be x~1 , 2>  ( a )   ( identity of extended Are there any branches open ? Yes  , ~l  ~ at level ~ . 
( To abbreviate , we will , just say t~-t--this branch will be very much llke the last one  , except that , due to the difference between strings 2 and 3~ it will give the output : - 17   -1  . x-tell story ; well ( x-nominalication : ~ erV ; left modified nominal ) 2 . John pres . be x < I > ( a ) ( identity of extended

The last open branch , marked~fails immediately . )  . 

! References 3oshij A . K . , Hi~1D . j " String representation of transformations and a decomposition procedure " ~ Part I and Part IIj Transformations and Discourse Analysis Project Paper I Unlverslty of 
Pennsylvania ; Dec . 1965.
3 osh is A . K . ~" Transformational analysis by computer with some : i appll cation ~' j Presented at the National Institute of Health Seminar on Computational Linguistics  , Bethesda , Oct . 1966 ~: ( To be published ) . 
