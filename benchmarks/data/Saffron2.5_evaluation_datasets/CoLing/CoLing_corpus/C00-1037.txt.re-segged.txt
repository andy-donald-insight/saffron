Formal Syntax and Semantics of Case Stacking Languages 
Christian Ebert
Lehrstuhl fiir Computer linguistik
Universit St Heidelberg
Karlstr.2
D-69117 Heidelberg
Marcus Kracht
II . Matheinatisches Institut
Freie Universitgt Berlin
Arnimalle e3
D-14195 Berlin
Abstract
In this l ) a per the t ) he nome nom of case stacking is investigated from a form Mt  ) oint of view . 
We will define a formal language with ide~dized case marking behaviour and prove that stacked cases have the ability to encode structural in -tbrmation on the word thereby allowing tbr unrestricted word order  . Furthermore , the case stacks help to comimte this structure with a low complexity bound  . As a second part we propose a compositional semantics for languages with stacked cases and show how this proposal may work for our tbrmal language as well as t bran example from Warlpiri  . 
1 Introduction
Case stacking is a phenomenom that occurs in many Australian languages  ( such as Warlt ) iri and Kayardild ) and e . g . Old Georgian . Case stacking is known toposet ) roblems for the treatment of case in many fi ) rmalti'ameworks today 1 . In ( Nordlinger ,  1997 ) the problem was attacked by extending the fl ' a mework of LFG  . 
Nordlinger claims that case morphology can construct grammatical reb ~ tions and larger syntactic contexts  . 
In Section 2 we will introduce an ideal lan-guge , which exhibits perfect marking . This language captures Nord linger's idea of case as constructors of grammatical relations  , but is independent of any syntactic framework . We will prove of this language that the case stacks provide all the intbrmationeeded tbr reconstructing the flsnctor-argument relations and tim syntactic context a word appears in  . Additionally , since structure lies encoded in these case stacks there is no need to assume any phrase structure lsee  ( Nordlinger , 1997) and ( Malouf ,  1999 ) for a discussion on LFG and HPSG respectively . 
or restriction on word order . At the end of this section we consider tile computational complexity of our language and draw some conclusions about grammar formalisms that are able to generate it  . 
In Section 3 we propose a compositional semantics tbrour case stacking languages  . Unlike Montague semantics , where the management of variables is not made explicit  , we will use rethrent systems to keet ) track of variables and to make semantic composition eflicently computable  2  . Tile proposal will be applied to our tbrmal language and to an example t'rom 

2 Syntax
In this section a perfectly case marked tbrmal language will be defined and investigated  . The definition of this language is based on terms consisting of functors and argmnents and tiros cases will be taken to mark arguments  . 
In the tbllowing we let N denote the set ; of nonnegative integers and ~ the concatenation of strings  , which is often on fitted . We shall use type writer font to denote true characters in print tbratbrmal language  . 
2.1 Basic Definitions
An abstract definition of terms runs as t bllows.
Let F be a set of symbols and ~: F ~ N a flmction . The pair F , ~2 is called a signature . 
We shall of l ; enwrite ~ in place of F , f ~ . An element . fEF is called a functor and It ( f ) the arity of f . We let w := max a ( . f ) If EF denote the maximal arity . ' l~rms are denoted here by strings in Polish Notation  , tbr simplicity . 
Definition 1 . Let ~ be a signature . A term over ~ is inductively dc~fined as . follows . 
2 see ( Venneulen , 1995) and ( Kracht , 1999) on these issues . 
250 /  .  1' ~( . 1) = o , tl , . c , . Si . , . at (' . ,",, . .
2 . tl ' ~( . 1") > 0a , . ~t ~, i ~', : ~~( . 1"), a , ' ~; terms , so'i . ' ~ fl .  \]  .   .   .  /  . ~( j . )  . 
.l . h ( . set C of case mart , ; ers will be these l ; l, .   .   . , co , which we assume t()1) edisjoint fron lF . (- liven a term , each t ' uncl ; or will 1) ecase mm'kexta (: (: or ( ling to l ; h(: ; ~ rgum(ml , t ) osil Jonitoccul ) ie , s . This is achieved throug\]~tim notion of : ~ unit  , which consists of nfun(:tor ; rod~sequence of casem : u'kers(: ; dled case stack . 
Definition 2 . Let t be , a term over as if lnat ' arcfL . 77 to corresponding bag , A(t . ), is ind'ac-tively dc/inc,das . / b/lows . 
1.t lt =. f , ~. l , ., , , . a(-~.):=t.
2 . s . f t -- . lt , .   .   . t , , . , hl , . < . .,t A(t ) ::: . I ' U
U '/-, s ", ; I ~ ~ A(td.
A ' no h : my . hi . f7~A(t ) is calh ' . daunit and q'
C * its case stack.
For exmnl ) h :, if . l ', g ~ im(lxa . reflint : tots of arity 2 , 1 mtd 0 , rcs \]) e(:l ; ively , l ; he hagA(f:l:g:c ) is : f , xl , g2 , xl2 . The lllGtllillg()t::1 . unit Xi2 ( : ould t ) e ( les ( :rib ( : ( lt ) y ': c is the flll Ct ; Or of ( ; he tirsl : ~ rgmnelll ; t , J ' these (: on(l;u:gmn(mI ; of tim ; et . lil ~ . 
Definition 3 . Let t beat cr ' mov . rasif lnat'ur , ~ . . A ( t ) t /, . , ~: o , ", ', . .Wo',,,li',, . . , Z , a:ta , t(t ~ X(t ) : : ~1i <' n(tnavbitraT'yc . nv , memlio . n of its ' a ',, its . 
77 t cn the st ' r in fl dl ~' d2" ~ . . .  ~-'5 . _ . 1 "-'5 . is s . .id to be a A(t)-string . 
Some of the A(.fxgx )- strings are (:. g.
fxig2 xl2 and g2xl:fxi2 . We , m : enowl ) rel ) ared to d ( : finent brm Mbmgm ~ geover the alt ) habet FUCt ) y collecting all A ( t ) -si ; rings for n given signature : Definition 4 . Let ~ be a signat'm'e . The idealease marking language ZUAd?~overth is signature consists of all A  ( t ) -strings s'achk/taRt is a termo've'r ~ . 
2.2 Trees and Unique Readability
There is a strong corresl ) ondence between bags and lat ) elled treess in ( : e ( : a sestnck scant ) eiden-tiffed with tree add rc . sscs : Definition 5 . A nonempty . linite set I ) CN ~_' is a tree domain ~ f the . l bllowing h , oh h1 . cc-D . 
2. if dld 2c-D then dlc-D .
2. lJ'di~D , ic-N then djcD for all j < i.
Th , e . eh : me . ntsqfat're(:domain arc called tree addresses . A ~- labelled tree is a pai'r (1) , 7) s'uch , that 1 ) is a tree domain and r:D-+l " a labelling . /? re . orions ' ach , th . atth . cn ' ambc . r of ' l "', : t /', t ", " . ~'4 dCJ)i . ~,',: t:acth/~(~(d ) . 
To formalize the corresl ) ondence we define a function 77' that assigns every b~gA ( t ) a ~- hd ) (:lh:d tre ( : : " l ' ( f , 7  ,   ,   .   .   . , f , , , 7, ) :=(' TffI1 <, :< n,~-:7/~~ . h(1 < , ,: <  , t )) The function 7' reverses l ; hec ; l . sesl ; a( ; ks of ~ tll units to get a set of tree addresses . Then the flmctor of them ill ; is assigned to the ( ; reca . d-dress . E . g . if the b : tgcont ~ dnsi ~ refitg 32 J_ the . 
resull ; ing treedoln a . in will contain : Ltree address 2123 and the bflmlling flmction will ~ msign 9 to iL Similarly one can define an inverse flmction assig\]dnga  1  ) ag : o each ~ Mal ) el lexltree . Thus l ; h(:reisal)ije(:l ; iont ) etween ~- lat ) (: lled trees and bngs . ' l '\] mrel bred if thrent1 ) : ~ gs ( : or r ( : spond to ( titfer ( : ntord ( : redla , 1) ell (: d trees . This shows ( ; lint weh : w ( : mfi ( lUer ( widal ) ility f i ) rl ) ags and s in ( : ( : every ZC . A4? ~ string ( : ira1 ) (: mfiquely de ( : ( )m-posed into its milts we may sl ; ;~ ; ( ~ the following l ) rol ) osition . 
Proposition 6 . Let ~ b casignature . Then every ZC2vf ? ~ strinflis'an iq'a cly readable . 
2 . 3 Pmnpabi l i ty and Semi l inear i ty We will first consider the prol  ) erty of being finitely pumpabh , , its detined in ( Oroenink ,  1997) . 
Definition 7 . Ahm , g ' aage L is finitely pumpable ' ill there is a constant c such th  , at for any wCL with , \[' w\[>c , the rear cafinite number k and string suo ,   .   .   . ~' ttk and vt, .   .   .   , ' oks ? t clt that w--uov\]u \]? J2?t2""Ok'lt k and for each i , l < Iv/\[<(: and for any p > 0 the string
PPP'aoV1'lld't ) 2' a2???'Dh'u , t ; belongs to L . 
Proposition 8 . Let ~ b casignature . Then ZC . Ad ? ~ is not finitely \]) ' alttpabld . 

Pry@It is easy to observe that the puml ) able parts cannot contain a functor since that would lead to I  ) mnt ) ed strings containing the same units more than once  . Hence the number of units cannot be increased by pumping and all pumpable parts must consist of case markers solely ? But since the length of an ZC  . A d/2 f~string consisting of a fixed munber of units isl  ) ounded each pumpable string could be pumped up such that it exceeds this bound  . Thus ZC . M ? a is not finitely 1) umpable at all . \[\] Now we are concerned with semilinearity . 
Definition 9 . Let MCNn . Then M is a 1 . linear set , f for some kCN there are u0, .   .   .   , u ~ ~ N ' ~ , such , that M = u0+kN , ~i = iniui\[niC2 . semiline avset , if for " some t ~: CN there are linear sets M\] ,  ? . ?, MkC_N'z , suchth , at
M = Ui = 1
Alan . quage Lover " an alphabet E = wiI 0 _<i<n is called a semilinear language if its image under the Parikh mapping is a semil in earset  , where the PariMt mapping ~ IJ :
E*~N n is defined as follows : < o , .   .   . , o)wi~e(i ) . fi)rO<i < nor/3~vI , ((~)-F'I'(fl ) for all ~ , flCE * wh , eree(i ) is the i+1-ttL'unit vector ' , wh , ich , consists of zeros except for the ith component , wh , ich , is 1 . 
Note that-given a term t-the Parikh image of all A  ( t ) -strings is the same since these are just concatenations of difthrent permutations of the units in A  ( t )  . 
In the tbllowing we make use of a proof technique used in  ( Michaelis and Kracht ,  1997 ) to show that Old Georgian is not a semilinear language  . We cite , a special instance of a proposition given therein : 
Proposition 10.
M be a subset of the properties 1 . For " any I ~ : El ~) 1(k)
Let P ( k ) =, ~ k2 + 2~-----~-k and
Nn , where n > 2, which has
N + there are some numbers
EN for wh , ich then-tuple(k , P ( k) , l~k)I(k)\belon(lstoM . 
~' ' " ~ '~- -11 2 . For " any kCN+th , evalue P ( k ) provides an upper bound . forth , e second component l \] of any n-tuple k , ll ,   .   .   . , l~z-1) EM ( that mean sll_<P ( k) . /' or " any such n-tuple ) . 
Then M is not semiline ar.
In order to investigate these milinearity of ZC , A'I/?a we choose distinct symbols f , xCF , such that f/(f ) = w and ~2(x ) = 0 . We shall construct terms si by the following inductive definition :  1  . s0:=x2 . Sn := f(sn-l,x, .   .   .   , : c ) fbrn > 0 It is easy to observe that by virtue of constructions n consists of n leading functors f and that in each iteration the number of x increases t  ) y-1 )  . 
Lemma 11 . Let FUC = f,\],: c,2, .   .   . , w , fl , - .   .  , .   flFI-2 be an enumeration of the alphabet underlying ZCA , 4? ~ , where f\] ,   .   .   . , f1I , '1-2 are the remain in . qfl , nctor's in F- . f , z Then the Parikh image of some A ( sn ) -str in 95 n is 2 - - 60 = (  . ,,2n2+-5--"(w--1)n+l,n, .   .   . , n , O, .   .   .   , ()) ~-1IFI-2Furthermore , ~2'-n+~n imposes a , nupper bound on the second component o of vIl(Sn ) . 
Proof . The first part of the leunna can be proved in a straightforward way by induction on n  . The claim on the upper boundibllows ii ' om the observation that then mnber of occurrences of case marker  1 can be maximized t ) y repeated embedding of terms in the first argu -inent position  . \[\] Proposition 12 . Let ft be a signature . Th,en27 CA d?f ~ is not semilinear . 
Proof . Let n = w + IFI and consider the linear , and hence semilinear , set R := -1 )  + 1 ) e ( 2 ) + w+2 hie ( 0 I m c Parikh niap consists of all strings which contain nu  ( (w -1 )  + 1 ) occurrences of the symbol x ( where ' n , 2 is any number ) and any number of occurrences of the symbols f , l ,   .   .   . , w , and no other symbols . We define the language Lj7 as the set of all strings belonging to L stand the ideal case marking languages  . Then LM contains all A(s ,) - strings . 
Considtring the Parikhiniage M of LAf we gel;
M = , I , \[ CAd=m , I , \[ ZC a a C = c q , I , \[IC54Z ; because of the ( lefinition of Llz as the flfll pre-image of 1 . But then the set A//fultills the conditions of Prot  ) osition l0 ( tucto\]xeillilla1\] . 
Hence M is not sere linear . Since 17 , issere linear 1 ) y definition and semilinearity is closed under intersection ZCA d?t ? is not sere linear  .  \[\] 2 . 4 Computational Complexity In this sul ) section the COml ) utai ; ional ( : onll ) lex-ity of ZCJ % 4? ~ is ( : onsider e ( t . r \] J h (' , results are achieved by defining a 3-tat ) e-rl ) uring machine accet ) to r ( det ) ending on a given signature ) that recognizes Z g3 d ? f t . 
Proposition 13 . Let tt bea , sig'natv , rc . 7 Turn
IcM ? c #) TSME ( , ., v&7 log %
ZCM ? ~ CDSI'ACE('n ,).
l ' roo\]:In the following welc , t ' n denote the hmgth of the inlmt string . The 9~u : ing machilm algoril ; hln can be subdivided into three main parts : 1 . The intmt string is segmentext into its units : The algorithm steps through the input and adds set  ) a ration markers in 1 ) etween two units . This can be done in O(n ) time . 
2 . The lll lits are sorted according to their case stacks : More tbrmally a  2way straight rnc ,  #csort is per tbrn md . This sorting algorithm is known for its worst case optimal complexity : it peril  ) tins the sort of ti : keys in O ( k log k ) steps . In our case the keys are milts and thus their mnnl  ) er is clearly tmml ( led by ~ t . . Tim additional square root factor comes f rom the comparison stel  )  . 
One can show tha ; the maximal length of a ( : a sesta ( 'k occuring in an ZOJ ~? ~ I string of Mlgth ' n isl  ) ounded above by O ( v/77 , ) . 
Hence a comparison of two units takes at most O ( v/77 , ) steps . Thus the overall com-t ) lexity of the sorting part is O ( nv / 77 log'n )  . 
3 . The sort e < lstquen <: e of units is ( : hecked : The algorithm successively generates case stacks according to the fimctors it has read  . 
Each case stack is compared to the refit of the in lmt  . If they coincide the algorithm advances to the next unit on the input and generates the next case stack  . After all case stacks have been gel/erated the whole in t  ) ut string must have been worked through , in this case the algorithma (: cet)ts . This (: anl ) edone in O('n ,) time . 
Summing ut ) the COml ) lexities of the set ln ' eel ) arts shows that the time CO ml ) lexity is as claimed in the proposition . 1; ' urthel'nmre , the algorithm uses only the cells needed by the in-lint plus at most t  ; :- l ( : ellst bradditional set ) -aration markers ( due to the first part )  , where t , : is then unlber of units the inlmt string consists of  . This shows thai ;   ; he space (: omph~xityix linenr .  \[\] 2 . 5 Discussion A first ( ' on ( 'lusion welllay drawix that cases bt ve the ability to  ( : on structhe context they apl ) em : in . ZCML ~ strings encode the same structural intbrmation as ordered labelled trees do thereby allowing unconstrained order of milts  . Additionally each such string can be read unambigously  . This was shown by means of a bijtction l ) etween bags and ordered labelled trees . 
The fact that ideal case marking hm guages are neither finitely pun q  ) at ) lenorse relinear means that they fall out of a lot of hierarchies of formal languages  . As ( Weir , 1988) shows , multicomponent trccadjoining9 ramm , a Twa generate only sere linear languages . Consequently , ideal case marking languages are not MCTALs . However , ( Groenink , 1 . 997) defines a class of grammars , called simple literal movement grammars , a and henc . cline . at conca ; t-freer write systems , which are shown to l ) e weakly equivalent to MCTAGs in ( Weir , 1988) nizable languages . Ideal case marking languages should therefore be generated by some simple literal movement grammar  . 
We note fl tr ther more that the ( theoretical ) time complexity is significantly better than the best known for recognizing contextfree grammars  . In fact , we implemented a practically applicable algorithm which constructs the corresponding tree out of a given IC  . Ad?n string in linear time ( in average ) . 
3 Semantics
We are now going to propose asemmltics tbr languages with stacked cases  . The basic principle is rather easy : we are going to identify variables by case stacks thereby making use of referent systems  . 
3.1 Referent Systems
The semantics uses two levels : a DRS-level , which contains DRSs , and a referent level , which talks about the names of the refbrents used l  ) y the DRS . Referent systems were introduced in ( Vermeulen ,  1995) . We keep the idea of a referent system as a device which adn finis-trates the variables  ( or referents ) under merge . 
Tile technical apparatus i however quited if li ; r-ent . In particular , the referent systems we use define exl ) licit global string sul ) stitutions over the referent names . 
There is one additional symbol o . It ; is a variable over names of referents . If we & SS Ulne that a flmctorg has meaning a simple lexical entry for glooks like this :/ g  / 
Io : oIo-g(1, a(g)o)
Here , the upper part is the ret ~ rent system , and the lower part an ordinary DRS , with a head section , containing a set of referents , and a body section , containing a set of clauses . This means that the semantics of a functor g is given by the application of g to its arguments  . However , instead of variables z , !/, etc . we find 1~o , 2~' o , etc . The semantics of a 0-ary functor z and a case marker , say 2 , are: /2  / \[  o2-o When two such structures come together they will bemcr  . q c d . The merge operation ( 9 takes two structures and results in a new one thereby using the retbrent systems to substitute then mnes of referents if necessary and then taking the union of the sets of clauses  . E . g . the result of the merge/g/(9/2/is/g2/
I0:0-g(12 o,
Tile meaning of o:2r'o is as follows . If some structure A is merged with one bearing that referent system  , then all occurrences of the variable o in A are replaced by  2~o   . As the resulting rcti ; rent system wege to : o . This is exactly what is done in the merge shown above  . 
We shall call a structure with referent system o : oplain  . Merge is only defined if at least on structure is t  ) lain . 
3.2 Semantics for . ZC . Ad?
To see how the semantics works we shall reproduce an earlier example ~ md take the  ZC3dZ   ; f ~ string g2x lfxl2 . Motivated by the definition of the ideal case marking language we shall agree to the conventions that  1  . Case markers may only be suffixes 2 . Case markers may only be attached to flmctors or case marked flmctors By these conventions the string under consideration must be parsed as  ( g2 ) (xl ) (f ) ( ( xl ) 2 )  . 
They force us to combine tile fimctors with their case stacks first and afterwards combine the units  . We shall understand that this is a syntactic restriction and not due to any semantics  . 
The composition of g and 2 was already shown above and is repeated on the lefthand side  , using that f t(g ) = 1 . The result of composing x and 1 is shown to the right . 
254/g2//xl/o:o\]Io:o"-'O2~o--g ( 12  ) 1 ~ o -- x
Merging these two structures we get / g2~1/ o:o ~3   2~o -- g ( 12 ~ o ) 1 ~ o - - - - " x
Together with f this gives / g2xl ~/ o:o 2~o - - - - g ( 12 ~ o ) l~o--xo = f ( l~o , 2 ~ o ) By coml ) osing the strucl ; ures for x an (11 we get ; the struct m : e/xl/shown above . We merge this one with that for 2 and get /~12/ o : ot ? 12~o -- x The merge of l ; h ( ; two sl ; rucl ; ures abov ( ; tinally gives/g2 ~ , fx12/0:012~o--x2~o--g ( 12 ~ o ) 1 ~ o - - - - " x o - - - - " f ( 1~o , 2 ~ o ) We shall verify that the w flue of o is a ( :tually the same as the value of f ( x , g(x )) . Notice first that in the body of the DRS we find that  12~o and 1~o have the same value as x . We may the retbre reduce the body of this structure to  2~o - g ( x ) o--f ( x , 2 ~ o ) Finally wem ~\ y replace 2 ~ obyg ( x ) in the second line . We gel ; the no-f(x , g(x )) whi (: h is the intended result . 
After ; lit semantics of them dts has been com-lmted the order of merge is mdml  ) ortant . If we ( : hoose to merge these semantics in an order d if ti  ; r( ; nt from the one above , we get the same result . 
a . a An example from Warlpiri
To show how this proposal may work for natur M languages we give an example fi'om Warlt  ) iri4 in which ( : as (  ; stacking oc (: urs . We have to deal wit , hl ; hetbur case markers ergative ( ERe ) , past tense ( PST ) , absolutive ( ABS ) , and locative ( Loc ) . 
, lapanangl ; : a-rlu Iuwa-rnumarlu
Japanangka-ERg shoot-PST kangaroo-ABS pirli-v, . qka-rlurock-LOC-ERG , lat ) anangka shot the kangaroo ( while ) on the rock\?e extend the t ) roposal by taking into account that cases may not only flmction as argu-mind  ; markers but have a semantics , too . This actually does not make much of a difl hrence for l  ; his calculus . We propose the tbllowing semantics for the locative and the past tense casell larker 
ILocl/psi/o:LOC ~ o
I ? located(o , LOCo)o:opast'(o)
St ) , when the locative is attached , it ; says that the thing to which it ; attaches is located somewhere . Here , o represents the thing that is locaLe(l , while I , OC~o is the location . The past tense semantics simply says that the thing which it attaches to happened in the past  . 
We construe the meaning of the ergative as being the actor and the meaning of the absolutive as being the themes  . 
d This examl ) h ; is taken front ( Nordlinger ,  1997) , p . 171' ~ In fact , ergative and absolutive should mark for grammatical flmctions  , but since linking of grammatical functions and actants is quite a complicated matter  ( see ( Kracht , 1999)) we make this simplification . 
255/ERe/oEI \], G ~ oactor ' ( o)--"ERC~o
Again , we shall agree/ABS/o:ABS'-'o2~theme' ( o )  -  AB8~o nlusing the conventions stated in subsection 3  . 2 . First we have to attach the case markers to compose the resulting structures afterwards  . The semantics of the proper noun Japanangka is taken to be a plain structure with bodyo "-- japanangka '  . The composition of this structure and the ergative semantics yields /  , Japanangka-ERG/o:o
ER . G~o ~ japanangka ' actor ' ( o)--En . G~o We assmne that the nominals/pirli/and / marlu / have the following lexical entries :/ pirli//marlu/oo or ock '  ( o ) o : oIokangaroo ' ( o ) Thus the semantic composition of pirli , LOG and ERG gives :/ pirli-LOC-ERG/o : or ock ' ( LOC ~ ERC~o ) actor ' ( o ) -- ER RO de
Iocated'(ERC~o , LOC ~ En O~o)
Similarly we can compose marlu with the abso -lutive case :/ marl'a-aBS/o:o AB so kangaroo '  ( ABS ~ o ) theme ' ( o ) -- ABS ~ o The semantics of the verb is shown on the lefthand side and its composition with/PST /on the right hand side  . 
/l ' aal
Io : oI?1 sheet'(o )
Iluwa-PST/o : oshoot'(o ) past'(o)
Finally by inerging tile structures/Japanangka-
ERe~,/ma , + a-*BS/,/pi'li-
LOC-ER , G/illrely order , we get tilt following result . 
o : oA BS~o , LOC ~ ER . G~o
ERG~'o--japanangka'shoot ' ( o ) past ' ( o ) actor ' ( o ) ----" ERG ~' otheme ' ( o ) -- ABS ~ okangaroo ' ( ABS ~ o ) rock ' ( LOC~ERO~-'o ) 
Iocated'(EIC ~ o,LOC'-'Elm'-"o)
It says that there was an event of shooting in the past  , whose actor is 3apanangka nd whose theme ix something that ix a kangaroo , and that there is a rock , such that Japanangka is located on it . Note that the only syntactic restriction were the convention stated in subsection  3  . 2 and thai ; we ( lid not make any fllrther assumptions on syntactic structure or word order  . 

Annius Groenink .  1997 . Surface without structure . Ph . D . thesis , Centrum veer Wiskundeen Intbrmatica , Amsterdam . 
Marcus Kracht .  1999 . Agreement in orphology , argmnent structure and syntax . Course material ESSLLI'99 . 
R , obert Mahmf .  1999 . A head-driven account of long-distance case assignment  . Paper presented on HPSG'99 . 
aens Miehaelis and Marcus Kraeht .  1997 . Semi-linearity as a syntactic invariant . In Christian Retord , editor , Proceedings o . \[ the 1st International Conference on Logical Aspects of Computational Linguistics  ( LACL-96 )  , vol-ulne 1328 of LNCS , pages 329-345 , Berlin , 
September 2325. Springer.
Rachel Nordlinger . 1997. Constructive Case.
Dependent-Markinfl Nonconfigurah ; tyin Australia . Ph . D . thesis , Department of Linguistics , Stanford University , Stanford . 
Kees F . M . Vermeulen .  1995 . Merging without mystery or : Variables in dynamic smnantics  . 
Journal of Philosoph , ical Logic , 24:405-450.
David J . Weir . 1988. Characterizing Mildly
Context-Sensitive Grammar Formalisms.
Ph.D . thesis , University of Pennsylvania , PA.

