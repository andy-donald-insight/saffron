THENONDIRECTION ALREPRESENTATION OF SYSTEMIC
FUNCTION ALGRAMMARS ANDSEMANTICS ASTYPED FEATURE

John A . Bateman * Martin Emele and Stefan Momma **
Project KOMET , GMD/IPSI Project POLY GLOSS , IMS-CL
Darmstadt , Germany University of Stuttgart , Germany
bateman ~ darmstad . gmd . deemele , momma@informatik . uni-stuttgart . de

A small fragment of the Systemic Functional Grammar of the PENMAN system is reformulated in the Typed Feature Structure language  . Through this reformulation w cgain full reversibility for the SFG description and access for unification-based grammar descriptions to the rich semantic levels of description that SFG supports  . We illustrate this reformulation with respect o both generation mid semantica alalysis and set out the future goals for research this result establishes  . 
1 Introduction
The current state of the art in natural language processing calls for components Callable of sophisticated deep semantic analysis  , modular representation of resources , and reusability of those resources across different NLP applications  . Furthermore , it has been demonstrated that the sheer diversity of interactions between distinct kinds of linguistic information is guaranteed to defeat any staged approach to genera-tion/understandiug that successively maps between levels of representation  \[1\]  . One strategy for addressing these problems is to stratify resource so that inter-stratal mappings are simplified  . This is aimed at allowiug high-level information to apply as early in analysis ms possible at a minimal cost  . A number of current processing architectures call for such a design  . The stratification technique is also one way of ensuring modularity and improved reusability  . However , one important problem with almost all existing linguistic resources i that the inter-stratal mappings between  , for example , strings and semantics , are anything but simple . This , is because the standard syntax-semantics -pragmatics modularization under-stratifies by imposing fewer distinc-tious than are necessary  . 
Computational systemic-functional grammars \[4\] offer significant solutions to this deficiency by imposing a higher degree of stratification  ( cf . Section 3) , thus keeping inter-stratal relations simple . SFGs have supported the constrnction of natural anguage generation components that are able to take highly abstract  , purely semantic specifications a input and produce corresponding surface strings as output  . 
Furthermore , the generation task ha . s required extensive work on the more abstract strata : without a rich breadth of communicative goals  , grammatical resonrces for expression cannot be satisfactorily constrained  . 
Problematic with current computational instantiations of SFG  , however , is that implementations have been directionally committed : the higher strata of information have not been available for constraining lower level analyses  . This problem has been compounded by a further lack of detail at the lower  , syn-tagmatic/constituency stratum in SFG . In contrast " Also on indefinite leave from the Penman Project  , USC/Information Sciences Institute , Marina del Rey , Los

?* Supported by BMFT Grant No . 08B 31163 totile generation perspective , work oriented towards analysis -- particularly within current information-based grammars such as LFG and HPSG--has paid cx tensive attention to the less abstract strata of the linguistic system and have produced highly detailed accounts of syntagmatic organization  . A combination of the two paradigms hmddenable us to fill gaps in the respective coverage of strata  . 
Information-based grammars have already been presented using declarative representations such as feature structures  . In this paper , we present a for-realization of all tile information to be found in the strata of computational SFG and their inter-stratal mappiugs in terms of feature structures also in order to initiate a combined description of the two paradigms  . In partical ar , we will formalize SFG in terms of the Typed -Feature System  ( TFS ) developed within the POLY GLOSS project at Stuttgart  . 
TFS has previously been applied to the strata of the linguistic system addressed by HPSG and LFG  . 
Here , we argne further that it is appropriate o adopt this representation for SFGs and the higher strata of the linguistic system that SFG proposes  . The result of this inquiry is then to provide the basis for populating a highly-stratified processing architecture with maximally appropriate linguistic representations  . Moreover , the higher levels of abstraction are rarely dealt with within a theory that talks about syntax  . Rather , their treatment is left to a separate process using a separate representation language and a completely separate processing strategy  . Our approach offers a solution to this problem as well by providiug a unique framework to talk about  ( almost ) all levels of linguistic information in a single formal language using a single processing scheme  . 
2 A convergence of concerns
We now briefly introduce both SFG and TFS ; substantial introductious are provided elsewhere and so here we shall only offer sufficient details to understand the examl  ) les offered in the paper . 
2.1 The SFG framework
Analogously to HPSG and LFG , SFG belongs to the family of grammatical frameworks based on statements of the cooccurrence possibilities of grammatical features  . In contrast , however , SFG places central focus on grammar as a complex resource for achieving commmficative and social goals  . Within SFG the entire grammatical description of a language is organized around a factorization of the task of finding grammatical structures appropriate for the expression of specified meanings and it is this orientation that has made it so appealing for the task of generation  . 
The organization of the PEN MaN-style architecture within which the SFG of English we are working with is embedde decomposes the mapping from abstract semantics to surface string as follows  . Nearest the surface there are realization statement a of syntagmatic organization  , or syntactic form . These are ACTESDE COLING-92 , NANTES , 2328 AOt ) r1992916 PROC . OFCOLING-92 . NANTES , AUG .  2328 ,   1992 classified it * terms of a grantmatical system network that denotes the paradigmatic  , functional ' alternatives offered by syntactic forms  . 
The decisions in the grammatical systems network are motivated by serum * tic distinctions that classify semantic ircumstances ax:cording to the grammatical features which are appropriate to express those situations : this classification is the cmn bined responsibility of choosers at td inquiries  . Finally , the possibilities for classification that the inquiries have are defined in terms of an abstract ontology called the upper model  . Knowledge about particular domains is subordinated to the upper model so that the concepts of those donlains can inherit their possibilities for linguistic realization from those already specified for the upper model concepts  . Also , lexical information is typically a . qsocia tcd with the domain concepts . 
All of these components are currently implemented and used within the PENMAN and KOMET projects  . The upper model and domain nmdcl are implemented in the knowledger c presentation language LOOM  ( developed at USC/ISI )  ; the remaining theoretical constructs involved in the generation process are realized ms macros defined in Common-Lisp  . These latter are , therefore , in implenmntation strictly procedural attd do not support analysis  . For further details of the underlying theory at nl its application in the area of text generation see  \[4\]  . 
2.2 The TFS framework
The TFS formalism is a rewriting system for typed feature terms fo now ing ideas from  \[5\]  . The major goal when designing TFS ` as a grannnar description language was to develop a formalism that inherently supports botix modular  , hierarchically organize de-scriptions and a declarative formulation of relationships between  ( partial ) elements front different linguistic modules . 
The objects used to represent linguistic information are typed feature terms  , i . e . , feature terms that have a type symbol associated with each node in the directed graph representing an ordinary feature term  . A linguistic description consists of a set of feature type definitions which contain information about the placement of the feature term in the type hierarchy and about the set of wellformedness constraints that hold for this particular type  . The feature type definitions define the wellformedness constraints for all representatiun levels  , sinmltaneously specifying what constitutes a ' wellformed linguistic sign '  , i . e . , an object containing all the information that can be collected about an utterance - be it analyzed  ( where the phonological lot to of the utter-once is the inpnt  )  , or generated ( where parts of the ' content ' of the complete description serves m stile input  )  ; an example of such an object appears below in Figure  3  . 
Given a partial description ( a feature term with ( possibly partial ) type information ) as input , the interpreter computes the set of most specific feature terms derivable from that term by first classifying the term according to the features it contains and their values  , and subsequently reeursively applying feature type definitions to all type symbols contained in the term  . Only one operation is used : Rewriting based on unifying substitutions of feature terms  . For full details of the formalism and its ilnplementation see  \[6  ,  7\] . Since the TFS language is fundamentally a constraint-based language  , and none of the operations involved is dependent on a particular order of  , e . g . , the availability of certain pieces of information  , no directionality is involved in the constraint -solving process  . Thus , as nccessful encoding of the information contained in a systemic grammar description in TFS will of necessity be strictly bidirectional  . In fact , the specification of wellformed linguistic signs simultaneously for all stratare presented means that the term non-directionality is a better characterization of the distinctive property of this kind of system than  , for example , " reversibility " . 
3 Modelling of SFG in TFS
We now describe in some detail how each of the strata  , at nl the relations between them that are de -tilted with incmn putational SFG  , may be defined uniformly within TFS . This supports the general clv:immade within SFG that statements of linguistic resources should be nondirectional  . We will begin with the least abstract stratmn- the system network-attd work up to the most abstract level-the upper model  . We then describe the inter-stratal mapt fings that exist between these  . 
3.1 The System Network
A system network can Ixere presented , as a directed acyclic graph with labelled arcs whose nodes are choice points called systems and whose outward directed labelled arcs denote the terms of the system  . 
Each system has two or more terms , or output features , which at the stratum of granlmare present minimal gralnmatic M alternations  . Reflecting the extensive stratification of the arcl fitecture  , nothing is said in the system network proper abont how to choose between these alternations  . The inward directed arcs for each systent denote an entry condition which detern fines the paradigmatic context in which the alternation represented by the system is relevant  . 
As shown already in \[3\] , the network is formally equivalent to the specification of a subsumption hierarchy and so the translation of the connectivity of that network Mone into TFS is quite straightforward  . 
The resnlt is a lattice with most general type RANK  . 
The system nct wurk does not itself generate gram -mat * cat structures  ; this information is also stratified out . In SFG grammatical structure is built up in terms of ' syntagmatic specifications ' which are derived by means of realization statements associated with paradigmatic selections  . Kasper \[2\] shows how these realization statements can be represented in terms of feature structure descriptions  . We largely adopt this representation here . The possible realization statements arc listed in the table shown below  , together with their translations into TFS feature tern xs  . 
+ F~F ~.' R/i NK\]
Expand : F1(F2)\[F1:\[F2:#lmRANK\] , F 2 : tiltlnflectify/Fl : :11 \[ F 1  :  \[11  :+\]\]

Cooflate : F1/F2IF1:#1, F2:#1\]
Preselect : F1:It\[F1:fl\]
Lexify : F !1 IF : lex-name\]
An Insert statement ( + F in traditional systemic notation ) corresponds to the introduction of the feature F into the feature term  , at the same time classified as requiring a value of type RANK  . 
The Presolect , Classify/Inflectify and Lexify statements have similar translations  , tile only difference being that they do not only determinetile type of the value of the feature they introduce  , but also specifically determine the value itself ; lexify is then the limiting case where a type drawn front the sublattice of lexical items may be specifie directly  . 
A second class of statement si used to express coo labelling of structures  . Conflate ( Fx/F2) expresses AC1 ES DE COLING-92 , NAI ~ rEs , 2328 AOb ~ L "19929 l7 PROC . OFCOLING-92, NA ~ rrEs , AUG .  2328 ,   1992 the identity between two features in a complex structure  . In the feature structure description we denote this by introducing a reentrancy  . The way TFS denotes reentrancies i by use of a tag  ( e . g .  #1 ) that appears at the two endpoints of the paths that are being made reentrant  . 
3  . 2 Upper Mode l and Domain Mode l The representation f the Upper Model in LOOM is also straightforward to translate into the TFS no ~ tation  . Every concept in the hierarchy corresponds to a type in TFS  , where the content of the : is slot corresponds to the specification of the appropriate supertype for the given concept  . 
There are two possible ways to build uptile hierarchy of concepts for the Upper Model : we can follow a pure topdown strategy  , specifying via stepwise refinement what subconcepts make up a given concept  . 
This is appropriate whenever the LOOM definition contains a statement about : disjoint- covering  . 
The second possibility is to build up the hierarchy bottom up  , i . e . , for a type we specify what its supertype is . This is mostly used when the type-definltion has additional constraints  , which are then conjunctively conjoined to the supertype specification  , thus refining the definition of the currentype . An exam-pie for such a translation is shown in Figure  1  . Tile result of the translation is a type lattice with umsti~eneraity peUM-THING  . 
(de / concept P rocess : is ( : and UM-Thing : primitive ) : constraints ( : at least 1Participant ) : disjoint-coverlng ( Material-process Mental-Process
Relational-Process Verbal-Process))
PROCESS < UM-THIIG.
PROCESS-MATERIAL-PRQCESSIMENT AL-PROCESS
REL?TIONAL-PROCESSIVERBAL-PROCESS.
pEflCESS\[participant : UM-THIHG\].
Figure i : LOOM definition and TFS definition for the concept Process Subsequently  , semantic specifications -- isomorphic to the Sentence Plan Language  ( SPL ) standardly used as input to PEN MAN-style text generation systems or to a set of LOOMA Box assertions -- are then defined by a type LOCAL -PLAN which specifies the semantic process  , semantic participants , and certain details of textual presentation and interpersonal effect  . The semantic specification ( simplified for illustration purposes ) for the sentence Kim devours every cookie , for example , can be seen under the nor a attribute in the feature structure shown in Figure  3  . In this expression , DEVOUR , C00KIE , and KIM are concepts ill the domain model that are subordinated to types defined in the upper nm del in the standard way defined for interfacing with PENMAN-style systems  , favor , set-totality-individuality are semantic or re-lates of textual inquiries concerning the comnmnica-tire functions of referring expressions  , speech act is the semantic or relate of an interpersonal inquiry concerned with il locutionary force  . A full specification would contain . . . . . . y . . . . . . . details ( cf .  \[4\]) . 
3  . 3 Choosers and Inqu i r ies : in ter - s t ra ta l relationships As noted in Section  3  . 1 , the systemic network alone does not specify the senlantic motivations for selecotions of particular grammatical features from the network  . This task is handled in PEN MAN-Style implementations of SFGs by tile stratum of the ehooser ~ inquiry semantics  . Choosers are typically described , and used in generation , as decision trees , and one such tree is associated with each grammatical system in the system network  . This rather simple organization can also , however , be straightforwardly interpreted in terms of the semantic on ditions of applicability that choosers define for each grammatical feat are  . This provides for a declarative modelling in
TFS as follows.
Tile decisional components of the decision tree are branching inquiries  . In them-iginai procedural implementation of the PENMAN system  , a branching inquiry takes as argument a semantic entity  ( identified via the grammatical label fro ' the constituent realizing that entity  ) and returns a value from a closed set of possible responses that are defined for each inquiry  . The chooser then provides a series of actions that are to be followed for each possible response  , analogously to a case-statement iL is p . 
Our encoding of this level of organization iTFS moves away from the implementation in PENMAN by making use of the fact that choosers are themselves hierarchically organized  . While in PENMAN this organization is maintained only indirectly by the association with grammatical systems  , in TFS we define tile sublattic explicitly using types defined for choosers  . There is t it an no need for the branching inquirie since chooser decision trees may be directly folded into tim hierarchy and their possible outcomes are represented as distinct ypes  . 
In PENMAN the arguments required for the branching inquiries are picked out in a way that depends on another type of inquiry : an identifying inquiry  . The function of these is precisely to locate particular semantic entities with respect o semantic entities that are already kimwn  . It is clear that for these inquiries to be implemented  , a specific semantic representation must have been selected  . We have , for the time being , folded this information i to the TFS translation : that is  , we use the concrete implementations of identifying inquiries  ( which are rather simple ) to fix the particular path that we specify as a value for these reattribute  . Identifying inquiries are used in choose ractions of the following form:  ( ides ' airy F1 ( in q-IDF2 ) ) . This specifies that the semantic entity returned by applying the inquiry in q-ID to the semantic entity associated with tile grammatical constituent labelled as F  2 is associated with the grammatical constituent labelled as F  1  . In the TFS translation , wherever mention is made to a semantic entity by means of these grammatical constituents  , we instead pick out the semantic entity directly by incorporating sufficient path information in the partial feature structure description in the sere slot  . The translation of the above identify action is : l\[syn:\[FI  :#$2\  ]  , sem:\[F1:\[ .   .   . \[ list\] .   .   . \]\]\]:-inq-ID\[syn:#Si , sem:#Sl\]where , as explained above , the precise path under the first set a slot is defined by the implementation of the inquiry in q -ID with respect otheup per and domain models  . For the identification : ( identify Gr-actor ( actor-idGr-process ) ) , for example , the corresponding TFS term is :\[ nyn:\[Gr ~actor:#Si \]  , ~ em:\[process:\[actor:#Sl\]\]\]:-actor -ID\[sem:#Sl  , syn:#S2\] . 
Inquiries of this type are necessary since they provide an additional interface structure between actual upper model concel  ) ts and objects in the system IUsing Prolog's " neck " symbol to introduce the condition  . 
AcrEsDECOLING-92 , NAN'rES , 2328 AOUr 1992 918 PEso . or COI . 1NGO2, NAI ~ rES , AUG . Z3-28 . 1992 network . Subsequently , the relationships theyd cline between the grammatic aln dontolugical sublattices are folded in totile types of the chooser sublattic c directly as described above  . 
Finally , the concrete statement hat a particular grammatical feature is entailed by the semantic circumstances that pertain i  . ~made by tile choose choose raction which takes as parameter the grammatical feature front the grammatical system to which the chooser is a  . ssign cd that is to be selected . This action is trivially represented 1 ) y adding in the granunatical feature as a type constraint on the eynside of the relation at the al  ) pro1 ) riate chooser subtype ; i . e . ,  ( choose 61 tAld-FZs TtrltE ) \[ nyn:GRAM-FEATURE\] . 
Choosers as a whole then form as n blattice whose most genera\[type is  RANK-CII00SER   . Figure 2 shows ; tice xample translation of two chooser nodes front this sn blattice  , where we seetile above translation principles at work  .  2  ( ( hSK ( SThTIC-CONDITION-QGR-PROCESS )   ( STATIC ( ASK ( MENTAL-PROCES S~QGR-PROCESS )   ( MENTALIIDENTIFYGR-ACTOR ( SENSER-IDGR ~ PROCESS ) ) Cn0OS ~ ~ ZNTAL ) )  ( NON ME~TAL . . . )))))
PTC-STATIC-MENTAL-CHOOSER\[sen:\[process : NENTAL-PROCESS\[senaer:#al\]\]  , myn:MEgThL\[gr-actor:#a2\]\]:-
CH00 SER\[sem:#ai , syn:#a2\].
PTC-STATIC-NON MENT?L-CHDOSFAt\[sem:\[proce~n  :   ( MATERI hL-PROCESS\[VERBAL-PROCES SIRELATIONM , -PROCESS)JJ . 
Figure 2: Translation of chooser nodes
An important point to note here is the strict separation of ' syntactic ' and sclnantic information that is enforced  . Complete modularity of the sya and sere descriptions is maint~dned and the choosers & inquiries are detined as a lattice of relations between these informational domains : there is no intermixing of categories within informational  ( lo-mains . Associations t ) etween semantics and syntax are preserved only in the conditions that specify the mappings across trata  . Tile lattice of relations that the CH00SER-sublattice d fines permits the implicit definition of the complete crossproduct of the RiNK and UM-THING sublattices  . This avoids the combinatorial explosion of type symbols that would otherwise ensue  . The existence of a particular subtype of sub CH\[10SER on a certain level of hierarchical emllcdding excludes all other son that level tii at wouhl exist had we taken the complete crossproduct  . 
4 Demonst ra t ion o f generat ion and ana lys i s  4   . 1 Generation When we want to generate , we provide as l ) ecification of the semantic omln unicativ c functions that are to be achieved by the linguistic : realization  . Generation is then initiated by providing thc locall  ) lanas the 2The second type definition gives a statement of the negative condition  , which is presently represented hyad is junction of thc categories defined in the upper model a ~ s sisters of HENTAL~PRDCESS  ; fllture vessions will rely on negation . 
value oi the Beta attribute of tile topmost chooser  . 
After classifying the input structure according to tile features it contains  ( alread yielding a paxticular subtype of CHOOSER )  , the type of the topmost node of the input structure is then recursively expanded  . 
Expansion is performed by rewriting all embedded types through unifying substitution of their defini-tio ~ lsuntil no filrther rewriting is possible  ( i . e . , until all types are ground types ) . Expansion terminates with a conq ) lcte description coralm tible with the input partial description and with the definitions ill the feature type system representing " all the linguistic strata defined  . In the general case , we will end up with not justs ac description , lint rather with a set which is then to be interpreted as a disjunction of possil ~ le solutions to the initial problem  . The complete structure which is the result of the inter-prctation of the semantic specification  ( given under the nero felt ture ) is given in Figure 3 . 
4.2 Analysis
As stated in Section 1 , SFG suffers front a lack of specificity in its syntagmatic representations  ; the kind of specifications that we find in unediately underlying strings in the PENMAN and KOMET systems  , for example , gives representations ( expressed according to our TFS definitions of Section  3  . 1 above ) such as the following:
R . ANK\[gr-procean : LEI-DEV'OOR , subject : \[ thihg:LEI ~ KIM\] , dixect complsment :\[ thing:LEI-COOKIE , doietie:LEX-EVERY \]\]\] However , information-based syntax , such : as HPSG , does provide cx tensive detail at this level . 
Now , due to the strict modularity enforced in our translation  , it is possible to explore combinations of approaches and  , moreover , to combine descriptions from a theory like HPSG with the kind of descriptions employed in Systemic Linguistics or its Computational instautlations  . This has been shown to be possible il ~ a simple experiment carried out by Martin Emelc where an existing HPSG grammar was taken and the semantics of that grammar  ( a simple situation semantics-informed framelike representation  ) was rewritten to give tim syntagmatic categories and structures of the SFG  . This makes it possible to describe the information ot  ) tained front the two approaches within a single executable declarative specification  . Her (' . , however , our utain concern has been with making available the higher-levels of specification  , and sowc will abstract away front the string to syutagmatic structure component of the mapl  ) iug and take as the ' input'specification the lowest level of inforroation obtained from the SFG  , as shown at ) ove . Therefore , we proceed by putting this specification in tile synslot of the Ith NK-CHOOSER relation  . Tcrnl rewriting applies to construct these re side of tim relation and also to complete tile synsl  ) ecification . The result is againtile COml ) let especification of the set of constraints titat describe the structure  , which is again the structure shown in Figure 3 . This is precisely the same linguistic-sign that was produced as a result of " generation "  , starting froln the imrc semautic part of the descril  ) tion-thus illustrating thera ( licld nond fiectionality of the representation . 
5 Conclusions and l , Mture Work
Tile ( : losefit between the linguistic description required in a TFS-based architecture and those I  ) eing pursued within SFG have motivated a detailed investigation of the nmtual compatibility of the representation alnd formal mechanisms and linguistic ACTESDE  COLlNG-92  , NANi \] . : S , 2328 ho (; r1992919PRoc . ov COLl NG-92 . NAI~TES , AUG .  2328 .   1992 PTC-NONSTATIC-NON VERBAL-NON MENTAL-CHOOSER\[ actor : KIM~f  .   .   .   .   . +1\]\] minimal-attention :-\] .   .   .   .   . LOCAL-PLANCOOKIEf .   .   .   .   .   . p .   .   .   .   .   .   . : EVOUn\[act ~: L speech act : set-totality -individuality : eolleetion JJJ spelling: idevour '\] 
Lsmgutar : ~ INDIVIDUAL-NAME thing : LEX-KI Meommon :\[\]\[ case:NOM lnoun:syn  ; MATERIAL~MOOD_UNIT ~ Un~ect:\[:\[~\]\]lgr -process:gr-actor:subject:finite:mood:\[ deictic:LEX " EVERY\[:pe~ilngr:"+every " \]\] direct contplement :\[\] EVERY\[  . \[ spelling : " cookie"\]\[theme:\[\]thing : LEX-COOKIE\[sing~dar:+\[\[medium:\[\]\ [_case:OBLIQUE\[common:+JJoak\[\] Figure  3: Feature structure for " Kim devours every cookie . " descriptions beiug developed within the PENMAN , KOMET and POLYGLOSS projects . We have shown that systemic-functional grammars and semantics can easily be converted to the TFS formalism  . This has produced a fragment that can both generate and analyse  . Furthermore , the analysis achieved with our experimental fragment supports the mapping from surface representation to deep semantic levels of representation that are far removed from the contingen-cies of surface syntax  . These represeutatimts also preserve breadth , in that the semantic distinctions necessary for generation concerning'pragmatic'information such as textual organization and interpersonal communicative goals are also recovered  . It is especially imt ) or tauth at all of these diverse levels have now been made accessible for analysis within a system where there is only one representational formalism and only one interpretational device operating on the representations  . 
This paper has described and motivated the basis for a host of important further research questions  , some of which we are now following up . For example , the fragment we have illustrated here is very small : the problem of handling large lattices needs to be addressed both on implementational aud theoretical evels  . Afldl specification of the grammar component of PENMAN alone as we describe it here would involve tens  , possibly hundreds , of thousands of types : this ueeds to be supported by sufficiently powerful and robust implementations  . But on the theorcticai level , there are also furthernm dulari-ties within the SFG accoun that we have not yet utilized to constrain term explosions due to forming cross -products acros sublattices : two areas here clearly present hemselves --- stronger modulariza -tion according to the paradigmatic/syntagmatic di -mensiou and according to functional regions in the grammar  \[4\]  , which already provide a metalevel of organization acros sublattices that remains unused  . 
Af nr the rare a is a closer study of the similarities and differeuces between  , e . g . , the information of the SFG and the HPSG modules - - it is to be expected that there is currently duplication which could be more effectively distributed  , perhaps providing a more effective TFS translation  . Finally , the availability of a representation fsome systenfic-functional grammars in a standard formalism should further facilitate comparison and evaluation of the grammati-c'  , d description with respect o other current cmn -putational accounts of grammar : it should be more straightforward to identify the distinctive features and claims of the approach  , thus opening the door to an easier exchange of information and analyses  . 
Further , performing the TFS translation for the entire PENMAN grammar would provide an effective test of the TFS formalism  ( and its implementation ) overall since there are no comparable grammars ( i . e . , paradigmatic feature based without a phrase structure skeleton  ) of this size available lsewhere . 
References\[1\] Martin Emele , Ulrich Held , Stefan Momma , and R ~ miZajac . Interactions between linguistic constraints : Procedural vs  . declarative approaches . 
Machine T ~ nnslation , To appear in special issue on generation . 
\[2\] Robert T . Kasper . An Experimental Parser for Systemic Grammars . In Proceedings of the l?th Inter . 
national Conference on Computational Linguistics,
August 1988, Budapest , Hungary , 1988.
\[31 Robert T . Kasper . Unification and classification : an experiment in information-based parsing  . In Proceedings of the International Workshop on Parsing Technologies  , pages 17 ,  1989 . 28-31 August ,  1989 , Carnegie Mellon University , Pittsburgh , PA . 
\[4\] Christian M . I . M . Matthiessen and John A . Bateman . Test generation and systemic . functional linguistics : experiences from English and Japanese  . 
Frm~ces Pinter , London , 1991.
\[5\] Hassan Ai't-Kaci . An Algebraic Semantics Approach to the Effective Resolution of Type Equations  . Theoretical Computer Science 45, 293351 . 
6\] Martin C . Emele and R~mi Zajac . A Fixed Point Semantics for Feature Type Systems . In : St ~ phane Kaplan and Mitsuhiro Okada ( eels . ): Proceedings of the ~ nd International CTRS Workshop  , Montreal , Canada , June 1990 . Heidelberg : Springer 1992, LNCS 516, pp .  383-388 . 
\[7\] Martin Emele and R~tni Zajac . Typed Unification Grammars . In : Proceedings of the 13th Inter . 
national Conference on Computational Linguistics ( CoLing 90 )  , Helsinki , 20-24 August ,  1990 . 
AcI~DECOLING-92, NANTr~S . 2328 AO~'1992920 PROC . Ol : COLING-92, NANI~S . AUC .  2328 .  1992
