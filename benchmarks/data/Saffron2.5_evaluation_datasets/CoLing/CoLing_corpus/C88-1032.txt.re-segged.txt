Word Manager . A System for the Definition , Access and
Maintenance of Lexical Databases
Marc DOMENIG
Institutffir Informatik
Universitt ~ t Z firich-Irchel
CH-8057 Zfirich
Swi~erland

This paper describes Word Manager , a system which is currently the object of a research project at the University of Z firich Computer Science Department  . 
Word Manager supports the definition , access and maintenance of lexical databases . It comprises a formal language for the imp lemenation of morphological knowledge  . This formal language is integrated in a graphics -oriented  , high-level user Interface and is language independent  . The project is now in the prototyping phase where parts of the software are pretty far advanced  ( the user interface ) and . others are still rudimentary ( the rule compilcr/runtime system )  . The design of the system was strongly influenced by Koskenniemi's two-level model/Koskenniemi  1983/  , its successors/Bear 1986/ , / Black 1986/ , /Borin 1986/ , /Darymple 1987/ , the ANSI-SPARC 3-Schema Concept / ANSI-X3-SPARC   1975/ and visual programming techniques/Bocker 1986/  , /Myers 1986/: We will focus the discussion on one aspect : the user interfacing for the construction of the lexlcal database  . 
I . Introduction
As i have argued elsewhere/Domenig 1986 , 1987a , 1987 b/ , a dedicated system yields many advantages for the implementation  , use and maintenance of lexical databases . The functionality of general purpose database management systems - e  . g . 
relation alones-ls too limited for lexlcal databases because they are not tuned to the task at hand  ; In particular , they do not provide for a formalism which is suited to describe linguistic knowledge  . The reason wily we would like to have such a formalism is that it allows us to take advantage of a computer's processing abilities  , i . e . we may construct a lexieal database which is not only a collection of purely ' static ' information-a set of entries-but has ' dynamic ~ capabilities  . For instance , the latter might be that it can analyse and generate inflected or composed word forms  . "What would be the advantage of that ?" one might ask  . "It is no problem to add on these capabilities to a purely ' static'set of entries stored within a commercially available database management system by writing programs in the host language to this system I " The answer is : there are a lot of advantages and I hope to clarify some of them in this paper  . A dedicated system supports the construction , use and maintenance of lexical databases much more directly than a general purpose database management system in conjunction with a convent ional programming such a system  , whereas Word Manager does not necessarily manage all the information stored in a lexical database  . At this stage of the project , it manages only morphological knowledge , i . e . it would be quite feasible to use it as a frontend to a database managed by a general purpose system  . 
2. Overview of the user interfacing
Word Manager distinguishes two quite different Interfaces for the construction and maintenance of lexical databases : one for the specification of what I term conceptual knowledge  ( linguist interface ) and one for the specification of what I call non-conceptual knowledge  ( lexicographer interface )  . The former is the place where the kind of morphological knowledge is defined which can be typically found In grammars  , the latter is a dialogue-oriented interface for the entering of the bulk of the data  . 
The relationship between the two Interfaces is one of a strong dependency  , i . e . the lexicographer interface depends very much on the specifications In the linguist interface  . Much of the machine-lexicographer dialogue can be inferred automatically from these specifications  . The formalism employed in the linguist interface was designed to be powerful enough to implement morphological knowledge of several natural languages on the one hand  , yet dedicated enough to be easy to handle for l inguists  . 
Moreover , it provides the opportunity to experiment with different conceptual approaches within a certain framework  . The following section will oufline it . 
3 . The specification of morphological knowledge in the linguist interface The linguist interface is conceived as a highly controlled environment which takes advantage of the latest hard-and software technology  . This means that the user does not communicate with the computer on the level of its operating system except for when the application is started  . On the level of the operating system , each morphological knowledge specification is represented by a socalled document/con  ( the two rightmosticons in Fig . 1 are document icons ) . By mousing such an icon , the user may start the application and load the specification stored in the document  . Alternatively , he could start it by mousing the application Icon  ( the leftmostic on In Fig . I is the application icon ) . Within the application environment , each document ( morphological knowledge specification ) is represented by a so-@Fie Compile Fig . I : The level of the operating system Fig .   2: The top level of the lin~ist interface application called tool-window which contains eight labelled check-bones  ( see Fig .  2) . Each of these checkboxes represents a window , the name and purpose of which is indicated by the labeh The window surface character set provides for the definition of the character set out of which so called surface strings are built  . Surfhce strings are used for the surface representation of word forms  . 
The window is graphics-oriented , i . e . most of the definitions are done with mouse- and menu commands  ( see Fig .  3) . 
The window lexlcal character set provides for the definition of the character set out of which so ~ called lexical stzlngs are built  . Lexical strings are used to define linguistically motivated abstractions of surface strings  . The set is usually defined to include characters denoting morpheme boundaries and/or morphophonemes  . The window is ve ~ T similar to the surface character set window  . 
The window feature domains provides for the domain specifications of the attrl bute-value pairs which are used in the rule - and constituent specifications  ( see below )  . The window is a text-oriented editor . An examp ~ . especification is shown in v~g .  4 . 
Cat ; ( NVA\]?Q)
Case ( NCHG % INDATACC)
Genciar ( MFN ) hbn(S ~ PL ) ~ lg .   4: Example definition in window j kature domains The window feature dependencies provides for the definition of dependencies between features  . 
/~m example specification is stiown in Fig . 5.
( CatN ) demands G~nder
Fig .   5: F ~ ample deflui ? ion in window feature dependencies  0 i 2   8   4   5   8   7   8 
Ppti "" A Oaq
BR br
CScs
DT d t
EUeu
FD fv
GW gw
HX hx
I Yiy
JIZjzi ~
K k
LI
Mm
Nn0o
CDEF9ABi
IIII\]rI . ~ ii Ii?iol , r , ooo: .  ?  .   . jk , ? l ", Ixcvb . m . 
III~II . . . . . . . . I l i l l specie/characters character sort order  , ___I~A . Aa ~ Bb CcOd IE o\[~>~\[\]
I ?\[, ligatures or torder
AEA a e ~ - - - - -
OE0 oess B
UE 0 ue 0
OlI0~comment@
The German surface , , , --
Fig .   3: The window surface character set The window two -level rules provides for the definition of morphophonemic rules which realize the mapping function between the surface - and lexical strings  . The rules specified here are similar to those in DKIMMO/TWOL/Darymple  1987/  . The window is a text--oriented editor . An example specification is shown in Fig .  6  ( the two rules handle noun genitive \[ e\]s : the first one replaces "+" by " e " as in Strausses  , Reflexes , Reizes , the second one duplicates " s " as in Verht Htnisses  , Verht~ngnisses , 

The window functions provides for the det in it ion of rules for the kind of string -manipulations which should not be realized with two-level rules  ( because their power would be excessive or they would imply the introduction of linguistically unmotivated morphophonemes  )  . The window is a text-oriented editor . An example specification is shown in Fig . 7 ( ReCapre capitalizes prefixed nouns ) . 
ReCap "( . *) A( . *)/\ la\2"value "( . *) B ( . *)/\ Ib\2" value .   . o "( . *) Z ( . *) /\ iz\2"value "^ a( . *)/A\I"value"^b ( . *)/ B\I " value "^ z ( . *)/ Z\I " value Fig .   7: Example definition in window funct/on s"o *\[ SXZ\]"  ( IC at N-ROC~f )  '"'  ( IC at N-ENDING )  " . *" IC at N-ROOT ) " nis/niss " ( IC at N-~qgING ) "+ s/es " ( Case GEN ) "+ s/es " ( Case ( ~ lq ) 
German : inflection II q
I(c.tN)i(Catu)\]l(cotA)l
I !\]\] ( IRuie UMLAUT ) I ( '""__' e\]i ( IC at N-SUFFIX )  ~ ( IRule ?\[ EIS/+E ) 
L ~......,
Fig . 8: The windowi ~ Ij I eetion
The : window inflection provides for the definition of word classes with their inflectional rules and paradigms  . This window is a graphical tree editor which allows the interactive construction of an nary tree  . This tree is used to structure the rules and constituents which define the word classes  . The structuring criteria are features ( attribute value pairs ) and the structure has the following semantics : the rule:  ; specified in a subtree operate on the constitue ats specified within the same subtree  . Fig .   8 shows a subtree which contains rules and constituents for German noun Inflection  ( only the top branch ( IRule UMLAUT ) ls expanded down to the terminal nodes )  . The terminal nodes of the tree contain either rules or constituents  . By mousing them , the user may open text-oriented editor windows . An example of a rule is shown in Fig . 9: it consists of matching constraints ( realized by feature sets ) on the constituents and specifies a set of lemma forms and a set of word forms  . In the example , the set of lemma forms-specified below the kcy word ' lemma '- is a single word form  ( nominative singular ; i \ [ ,   . . . . . . . . . . . . . . German : inf lecUon:(Cat N)(IRule UMLAUT . +\[ E\]S/+E ) '": : P\]-i@lllllk ( IC~UklLAUT . II-HOO1\[NumSG ) plrl digml(:llUkf . AUT . N-I~OOTj NumSG ) ( IC~t Uhi LAUT . N-ROOT ) ( NumPL ) i xulple ~1:
AslI , Sch~iluch ( ICel UMLAUT . N-ENDING l(flumSG ) ( IC~:UMLAUT . N-lENDINGI(NumSG ) ( ICItUMLAUT . N-ENDING ) (Hum PL )   ( iCaJtH-SUFFIX ) \[ Num $ G ) ( ICalt SG+\[ElS ) (C:sse NOM   ICat N-~SUFFIX ) (Num SG ) ( ICat SG-~E\]S )   ( IC at N - , SUFFIX )( NumPL ) ( ICMPL~E)
IP lg .  ~ . Ezmnple ~ Uon ~ rule wiudow which is put together by the concatenation of three constituents  )   . The set of wordforms-specified below the keyword ' paradigm'-consists of eight elements  ( the case paradigm ; the two patterns of feature sets identify exactly eight forms  , each of which is put together by the concatenation of three constituents  )   . The constituent windows specify either so-cal led hard coded constituents or constituent ypes  . The former are feature sets which are associated with ' hard coded ' lexical strings  ( see Fig .  10) ; they are typically used to specify inflectional eO ~ German : inflection:  ( Cat N ) (ICot N-SUFFIX . SG+\[EIS ) (Num SG ) ~il Jl ~% ? ( Case NOM ) = +\[ e\]s = ( Case GEN ) '?~?\[ e\]" ( Case DAT )  = .  "  ( Case ACCI constituents arc structured by features which qualify them  . The rules in the terminal nodes ( see Fig .  12 ) define new potential word entries by specifying how constituents of existing entries are combined with IO ~  German:compo$1tion:  ( CRuieT0-N . N-I'0-N , PREFIII ) Lim ~
Source ~ I
I ( CCa\[PREFIX )   ( IRulo?x ) I ! 2 ( IC at H-ROOD ( NumSG ) II3 ( IC at N-ENDING )   ( HumSG ) \[ I4 ( lest N-ROOT )   ( NumPL )  \] \]
S(ICatN-ENDING ) ( HumPL)I1
II ~ rgetit(m . le?x ) II ( ReCap ( ~ I2 ) )  ( IC at N = ROOT )   ( ~ umSG ) II3 ( IC at N-ENDING )   ( HumSG )   :  ( ReCap ( + 1 4 ) )  ( IC at N-ROOT )   ( HumPL )   5  ( I eatN-ENDING )   ( N . mPL)\]examples\[Liliputl-o~raat , Minisen de LRiese wischlauch\[__Fig .   I0: Example window with hard coded constituents affixes  . The latter are feature sets where the associated strings are represented by placeholders  , i . e . the strings are not specified yet but will be entered later  , either via the lexicographer interface or by the firing of compositional rules  ( see Fig .  1 1) . 
~0-German : inflectlon : ( Cat N ) ( IC at N-STEM . UMLAUT ) -~  ( IC at N-ROOT )   ( NumSG )   ( IC at N-ENDING )   ( NumSG )   ( IC at N-ROOT )   ( NumPL )   ( IC at N-ENDING )   ( NumPL ) 1 entered 2 entered 3 ( Umlaut 1 )  4  ( Copy 2 ) examples
Ast , Schiauch
Fig . II : Ex~ple window wlth congtituenty ~ e ~ They are typically used to specify word roots  . From what has been said so far , we may infer how an entry into the database is made and what it will generate : the specifi cation of an entry requires the ident if ication of an inflectional rule and the speci fication of the lexical strings which are represented as placeholders in the consti tuents matched by the rule  . Usually , this means that one or two strings have to be entered  . From this , the system may generate the entire inflectional paradigm of the word  . Notice that the user of the linguist interface defines with his specification what a word is  ( viz , a set of lemma forms and a set of wordforms ) . 
Moreover , Word Manager imposes the convention that only entire words - and no isolated wordforms-may be entered into the database  . 
The window composition provides for the definit ion of compositional rules and constituents  ( affixes )  . This window is a graphical tree editor similar to the window inflection where the rules and each other and with constituents defined in the window composition  ( der tvatlonal affixes )  . These rules are usually not applied gener at ively but analytically  , because a generative application is likely to overgenerate  ( theoretically , the user may specify an arbitrary number of features which restrict excessive generation  , but I believe that this is unpractical in most cases  , because it implles that the lexicographer has to specify a host of features for each entry  ) ~ The purpose of the rules is that all derived and compound words may be entered Into the database via the triggering of such l ~ les  . This has the advantage thai : the system ( automatically ) keeps track of the derivational history and therefore the morphologicals ~_x ucturing of each entry  . 
40 The lexicographer interface
Given a compiled specification of the conceptual morphological knowledge defined within thel in guist interface  , Word Manager may generate a dialogue which guides the lexicographer towards the Identification of the inflectional/compositional rules that must be triggered in order to add an entry to the database  . In the case of non-composed words , for example , Word Mm\]ager may simply navigate in the tree which structures the Inflectional rules  ( specified in the window inflection )  , posing questions according to the structuring criteria  . 
In the case of composed words , Word Manager may apply the compositional rules in analytical mode  , provided that the ' initial ' infbrmation consists of a word string  , Such an analytical application of the rules is usually not very over generatlng-In contrast to a generative application -  , i . e . the system will be able to present a reasonably l imited number of selection choices  . 
50 Concl~ion
The advantages of a dedicated system like Word Manager for them mlagement of lexical databases are manifold  . In this paper , we have restricted the discussion to the advantages yielded during the construction of the database  . These are by no means the only ones : the dedication also Implies that the overhead of non -dedicated systems  ( e . g . general purpose DBMS in conjunction with convent ional programming languages LLe  . the featt~res which are \] . 58 superfluons for lexical databases , is avoided . On the othex'hanc ; i , Wordl ~ A anager provides features which a general plt rpose system will never have  , viz . the special t'ormal is ~ to implement morphological knowledge  , " ~ his is not only beneficial from the point of view of the interfacing to the database but also from the point of view of the software design : in the dedicated : ~ ystem  , the morphological knowledge is a part of ttL ~ conceptual database  . ~ chem ~ ( in the terminolo Ky of database theory ) and thus belongs to the kernel of the sysi~cm , as : it were . When a general purpose database management system in conjunction with a conventional programming language is used to implement the same kind of knowledge  , it has to behn plemented within the external schemata to the database and thus repeatedly fox ' each of them  . The soocalted code factoring isi : hcretbre much better in a dedical cd system : the knowledge is more centralize cz  , and Implemented with a minimum of x'ed uncancy . 
/ANSI-X3 . ~ Pt  ~ RC t975/   ANSI/X3/SPARC Study G~'oup on Data Base Management Systems : " lnt cr h~J  . ltep oit 75-02-08 , " I , ' DT ( Bull , of the ACIvl 31GMOD ) 7 .  1975 . 
/B~ . a ~?198~3/Bear J . : " A Morphological Reeogi . dzer with Syntaciic and Phonological
Rules . " in : Proceedings of the 1 it tt btternational Conj ~: rence on Computational Linguistic  . ~, Bonn , August 2529~1986 . 
/Black 19116/Black A . W  ~ , et al :" A Diction my and Morpl-mlogical Analyser for English  . " in : Proceeding soj the ilth Intet ~ national Conference on Co ~ wutationul Li ~ tyui  . ~:ttc~J,
I ~ onn , August 2529, 19t ~ tl.
/B0ckeri\[986/Bocker H .  \] ) . , et al : " The Enhancement of Understand ing Through Visual Representations  . " in : Human Factors ( n Computing Systems , CI-II'86 Conference Pcoceeding a ( Special issue of tbcSIGCHIBulletin )  , Bosi : on , April 1317 ,  1986 . 
/Borin 19116/Borin L , : " What is a Lexicall ~ e presentation ?" in: Papers for the Fifth Scandinavian Con\]e~nceqf Computational Linguistics  , Helsinki , December 1112 ,  1985 . University of Helsinki , Department of General IAnguistics , Publications No . 15, i\[986 . 
/Darymp I (, .1987/ Dah'ymple M ., et al:
DKIMMO/TWOL : A Development
Environment . \[' or Morphological . Analysis , in Kaplan R . , Karttunen L . : " Computational IV torphol 0 gy . " CourseScript LI2 83 , 1987 Llngulstlc Institute , Stanford University , 
J ~ Lme29 o Auguat 7. I , ?~7.
/Domenlg 1986/Domenig M . , Shann P . :'" t'owards a Dedicated Database Management System for Dictionaries  . " in : Proceedings of the llth International Conference on Computational Linguistics  , Bonn , August 2529 ,  1986 . 
/Domenig 1987a/Domenig M . : Entwurfeines de dizierten Datenbank systems f~r Lexika  . 
Problem analyse und Software-Entwmfanh and eine ~ . ; Projektes Jhrmaschinelle
Sprach ~ bersetzung . Niemeyer Verlag,
Ttibingen , Retbe " Spraehetu ~ dInlbrmatlon " lid .  17, 1987 . 
/Domenlg19871)/DomenlgM.:"On the
Formalls at lon of Dictionaries . " in : Sprache und Datenverarbeitung , 1/1987 . 
/ Koskenniemi 1983/Koskenniemi K .: Two-Level
Morphology : A General Computational
Model , for Word Form Recognition and
Production . Dissertation at the University of Helsinki , Department of General Linguistics , Publications No .  11, 1983 . 
/Myers1986/MyersB.A.:"Visual Programming,
Programming by Example , and Program
Visualization , a Taxonomy . " in : Human
Factors In Computing Systems , CHI '86
Conference Proceedings ( Special Issue of the SIGCHI Bulletin )  , Boston , April 1317 . 


