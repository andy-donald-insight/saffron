cagLl ~82, J . Horecl ~( e ~.)
North . Holl and Publishln ~ Cor , ~ my
? Academia , 1982
KNOWLED GEREPRESENTATION METHOD
BASEDON pREDICATECAL CULUS
INANINTELLIGENT CAISY STEM
Barbara Belier
Regional Computer Center
Technical University of Pozna ~

The knowledge representation method is introduced to be applied in the ICAI system to teach prog ~ -min ~ language ? Knowledge about syntax and seman -ties of that language is represented by a set of axioms w~itten in the predicate calculus language  , The directed graph of concepts is mentioned as a method to represent an instr~ct lonal structure of the domain knowledge  . The pros\[procedure to ans-wer student's questions is described  . 

The early 70S have brouF ~ at the Intelligent CAI/ICAI/ systems  \[3~4~o In these systems all course material is represented independently of teach in ~ procedures  . The goal of ICAI research is to obtain an indi-v idualization of  inst1~aotion by provid in ~ an ability of answer ln ~ student ts questions as well as genel ~ at in ~ remedialoomments ~ problems and advioes ~  aeco1~Lin~ly to current student Psrespormos and his abi-lit ies and preferences in general  . 
ICAI researchers have firstly focused their investigations on representation of the subject matter  . Mostly semantic nets have been used as representation of static\[~J and procedural\[ ~ p ~\] domain knowled-Ge  . Database of an instz ~ ctlo ~ Ll system includes also a represent a-tion of currl culum to or ~ n lzean instz ~ uotlon of new knowledge\[~pY~It is helpful in seleot ln ~ material to be presented to the student  . 
Th?s paper presents the knowledge representation method based on pre-dicate calculus in an intelligent CAT system ~ which is applied to teach the programmi ~ language\[J\]o The prototype of the presented approach w~s an appl ication of predloate calculus to describe pro ~ -rams pwritten in ALGOL ~ tol ~ ovetheir ooz Te ? tness ~ introduced by ~ stall  \[2\]  . The ~ aowledge about syntuand semantlos of " the prog-rmm ni ~  lan6~a~e has been represented in the form of a set off irstoz~er logicaxloms ~ Them are given some notes how to construct the predicate calculus lan~age and axioms des or ~ bin ~ the subject matter  . The directed graph of concepts as a method to represent an instx ~ ction a ~ struc-ture of tile domain knowledge has been introduced a Xong with the run-ner of ~ enemt in ~ inst ructional te~ts to the student ? Then the pro -cedure answeri ~ studGnt~squeat ~ ons has been desoribed o PREDICATECAL CULUS APPLIED TO REPRESENT  EN01~EDGE ABOUTTHEPRO-
GRAMMING LANG UAGE
The follow in ~ criteria may be referred to knowledge representation methods for ICAI systems\[  . 1  , 7 \ ] : - ab i l i ty to express a large set of concepts of the domain be in ~? taughtp-faci lity of codln ~ these concepts and relat ions amon ~ them ~- easy way to t ~ ansform the formal notation into the natur ~ l language for mp-effiolenoy of information retr ievalduri ~ the process of ans-wer in ~ user ' s query and proving the correctness of his answer ~- ability of automated deduction application in the question-answer ln ~ process  . 
Let us conside ~ a subset of an ALGOL-llke progx ~ ammin ~ lan~uage ~ con-tain in ~ simplear ithmetic and logical expressions ~ instruc tion of substitution and conditional and o ~ instructions  . We assume that each instruction has been wri tten in a separate line of program  . 
The predicate calculus language developed to represent knowledge a-b out the progI ~ ammlng  lan6~age contains : - names of sets ~ called sorts of objects ~ representing elements of syntax and semantics of a pro ~ Tammln ~ lan ~ uage p-fu not ions ~ transform ln ~ obJeots p-predioates ~ represent in ~ relations between objects  . 
Some sort sj functions and predicates are int roduced to represent syntax of the prog ~ ammlng lan~uage  . 0 thers represent its semantics . 
Notation . The ordinary predicate calculus notation has been used  . Some modifications improve the readabili ty of statements : - unquantified vat-fables are gener ~ llyqua ~ t ~  . ~ le ~ . ~- two-places predicates are written in an infix manner ~- binary arithmetic funct ions are written in an infix ma~n~rp- parenthesis are used in the ordinary mean in ~ -clauses are separated by dots  . 
Program syntax . The program syntax has been described by a set of clauses w~itten in the predicate calcu lus language  . 
Sorts of objects/examples / ~ identifier ~ number ~ express lon ~ arlth-metio express ion ~ logical expression ~ label ~ instruct ion ~ program line  . 
Functions transform some expressions_intote ~ ms ~ by example : dod_~wa x wa-w-wa where : ~ a- arithmetic expression ~ it : wa ~ wa---wl wl-logical expression ~ pod_~idxwy ~ in id-identifier ~ sko  ; et ~ in wy-expression ~ et-label ~ if l : wl ? wi----inin-instruction ~ ~ ri-p rogram line  . 
First of these functions constructs an expression ~ which represents an operation of addition ~ the second one gives as a result an ex-pression representing the " less than " relation and the others cons-tr~et appropr iately the substitution instr~ction ~ the ~ instruc-tion and the conditional instruction  . 
Some p~edl cates have been introduced to represent the syntax rela-tions between syntax obJeots ~ like follow in ~: wins ~ wix inpet ~ et ~ wi~s ~ wlxwiFirst of these predicates indicates the location of an inst ruction KNOWLED GEREPRESENTATION METHODINAN ICAISY STEM  15 in a given pro~z~mllner the second one assi ~s a label at the  be-6~i~ning of a progmam line and the third one determines the direct succession of two progx ~ umlines in a sequence  . 
Example, . The syntax of a pro~am containing threefol low in ~ substi-~utione : 
J = L
L = L+2
E-K = J + L is described like tb ~ t z w l w in s pod  ( J  ~ LJ . w2 bn as wl . w2 winspod(Lpdod(L , 2 ~ . 
Epet W3 ow~bn as W2 ow3 wln____ sspodK~do d(J , L )) . 
Program semantics ? Semantics of an al~orithmic language is represented by a set of axioms ~ rit % en in the predicate calcu lusl ~ age  . News orts of obJects ~ functions and predicates are to be intrOduced  . 
Sorts of ob~eets zvalue ~ state
Value set contains values of ax-lthmeti0 and logical express lons ~ ar-~ys ~ subrout ines or procedure set Co The particular k ind of value is a location in a pro~nam ~ represented by a progr ~ umll ne  . A state ? is assiEned to a progx ~ unline and it is determined also by the ca  . 
luation of variables.
Functions evaluate expressions ? ow ar : wyXs t --' ~ T where : wy-expression ~ and sequence of states : st~state ~ haS:st~stw ~- ~ lue o Predicates assign states to io o at ior ~ in a program : stwec-st ~ wist zm~st ? wiPirs $  , c ~" them associates a state to a program line before an execu-tion of an instruction f rom this lineo The second one indicate o  9 that the control p~s see ~ oan instruction ~ ri % tenina ~ iven prog-ramline in a ~ iven state  . 
Sortso~ob~eets ~ functions and predicates are the b~iso ~ a ~ r ~ m-mar of ~ he predicate cal ~uluslang ~ a~e ~ which expreu ~ ions are ~ sed % o repmesent knowl ~ d~eabout % he pros x ' a nuru in ~ lanGu ~ eoAxioms written ~ n this language descx ~ i be a ~ hme % lo  1~les ~ prope P ~ ties of ex ~ ressions ~ seman % ics of instructions / princlple ~ of exe = out ion of instr ~ ctions / ~ meaning of programs e ~nen % corblock set Oo Ez ~ unple ~ A ~ axiom de ~ or ibin ~ semantics of a ~ ins ~ muo $ ion of subst i-tution : wl ~ in ~ pod  ( J  ~ X\]s st wewl
A w2 bn a ____~ s w l
The premises of this axiom ! nelude ~% holocat ionel " the ~ ubstl tutlon J = X in the pro ~ Tami~ne ~ ~ ~ % he ~ ssi ~ m ~ of the s % ~% e before an execution o  .  ~ .  %~ . ~ is instrue ~ ion ~ and a faot ~ that the program l in e  w2 directly follo~s " wlo Theooncl~s lo~says  ~ %  . h  ~ as ~ ; a tenext of s as % he state before an exertion of an instruction written in  ~2 and 8 value of the variable J in the state next of s is a value of an exp ~- ession X in the ~ tates ~ nd ~ ~ lue of any variable Y ~ J doesn't ehan ~ eduring % he % rar ~ fer from the states to the next of ~ oAl ~ r ~ esubse ~ o ? FORTRAN has been de $ ~ rlbed in this manner\[~\]? it  tul~n8 out ~ hat form%11as of p ~ edicate calculus a ~ e easy to t r~ns-16 ' B . BEGIER form into na % ~ ralla ~ e  ~ os ? ~ . Axles are divided into simple sentences . Translati ~ rales are applied to simple sentences  . 
Each object has and mein natur ~ ll ~ ge . Also an appropriate ~-% ural language expression is selected for eaoh funotion  . Eaah predicate cOr Tesponds with a verb phrase in natural language  . The proper translation rules for functions and objects sure applied with refe-rencete arguments of a predloate  . ~lation ~ les for Polish language have been reported in \[ I \] as well as their a ~ plicat i onto all axioms descrlb in ~ FORTRAN  . 
DIRECTEDGRAPHASAD ~ rHODOFINSTRUCTIONAL STRUCTUREREPRESENTATION An assumption is done that all knowledge to be  tau6ht can be divided to instructional units . Thus the first step too on str ~ ot an instruc-t ional structure representation is to select such units/concepts /  . 
Each of them has a name and at least one sentence can be told about it/unreal concepts are not a llowed /  . Some introductory concepts are assumed to be known to the student  . 
The next step is to specify all relations between concepts  . These relations could be : / a/Concept X is a part of Y  , / b/Concept X has a property ~ represented by Z ~ ~ once ptX is a reason OraJustification of T  , Concept X belongs to the object class represented by K  , / e/Concept X is an alternative of A ~/ f / Concept X is equivalent to W at least in some circumstances  . 
Each relation corresponds with a graph , which nodes represent concepts from an introduced set of concepts  . The composition of all obtained 6~aphs rerults in a final graph ~ whlch represents an instruc-tional structure of the subject matter  . Because of the different in-terp retation of the particular arches of this ~ Taph/which are de-scribed by various relationships/the " superior-inferior " relation is introduced as the univers alone which represents every re lation between concepts  . Thus the dlrested ~ ph has been obtained , ~ it harrows directed to the superior concepts . 
A set of axioms is associated with each node of the concept graph  . 
Also some other information may be associated with it  . 
ANSWERINGSTUDENT'S QUESTIONS
The follow in ~ problems have to be solved- choice and specify in ~ of classes of user's queries  , which can be answered by the ICAI system ~- reco@ ~nition of a main subject of the query  , translation of the query from natural language to the predicate calculus language formula  , -application of the automated theorem-prov in ~ techniques to re-trieve an answer  , -generatin ~ of an answer in natura ~ language form  . 
Three classes of queries have been qonsidered :/ I/Decision queries of gener ~ l\form in natural language < interrogative particle > < sentence >  7 where : < interrogative partiole>/existin ~ in Polish/determines that a question belongs to this class  9 ~ entenoe >- indicative sentence , KNOWLED GEREPRESENTATION lVlETHODINANICAI SYSTEM  17 which require an answer in the form . Y ~ s , or " No " . 
/ 2/ Objective quez-lee of ~ enez ~ alfoz ~ in natuz ~ l lansuage 
Wh loh~senex~l name > < predloate ~? whloh require to retrieve an object poses si ~ E some glven features as an answer  . 
The quez 7 of this class may betz~ns formed into the form l Which X satisfies aoo ~ Litlon : W  ( X ) ~ A  ~ ) ? whe PezY-an object to be found pW~-dis tinctive predicate of a set ~ which is spe -cified by ~  genez~L1 name > in the query , A(X ) - . formula obtaine dir on the tz~nslated query p which describes some prope ~ ties of X  . 
/ 3 /Problem quex-ies of general form in natural language/a/~<clause > ? whloh can bet~s fo  . treed into the form:
Which Zeatlsfies : Z~~clause > ?/ b/What is implied by ~ elause > ? which can betz~ns fo ~med into the form z 
Which Z satisfies = ~ olause ~ Z ?
In the above problem queries : Z-the clause to be found t~olause ~- clause obta/ned from the tx~nslate ~ query  . 
P~oblem queries ~ equl rean answer in the foz ~ of a senten- 

An analysis Of a user tsquex-y should flx the main subject of it in the terms of a subset of conoepts ~ represented on the concept g~ph  . 
A dofiD/tlon of acceptable language of user ' s queries involves the form of translation rules from n ~ tux ~ tllan ~ u  . age into the predloate calculus formula . It is worth not loln ~ that :- querles in the naturallar ~ ua ~ e ? or m have the threefold nature ~ it means they can be counted into the threement ioned above ol asses ~- queries fragments in the form of indicative clauses are built from expressed in natural language p~ed loates ~ introduee ~ in the presented for ~ alization ~- in respect of quantity of expressions the language of user's queries is comparable with the  laa1&~e obtained in the process of translation of p~ed /oate calculus axioms into naturallan ~ ua ~ e ~- lan@uaGeo~user's queries and the predloate calculus l~a ~ e have a common base of basle concepts because the sorts of ob~eots ~ functions and pFedicates introduced in the predloate calculus language correspond with some specified natural language expressions  . 
It has been submitted that quest lon-answering problem m ~ y be solved with an application o ~ auto~te ~ theorem-pyo ~  , in ~ teo hnlques ~ namely on the base o\[the resolution principle  \[8\]   , This method ~ based only on the s~rnteac of olauses ~ doesn't require to control the proo ~ procedure by the user  , The resolution prlnelple requires to convert all formulas into the Skolem conjunctive form  . Thus each formula beco-mesase to folauses ~ each of them bei ~ Eadlsjunotion of l iterals  , The question-ans~ering procedure for deols lon queries tries to pro-~e that a negation of formula ~ ob % alned after translation of the qu-e r  ~ is false  , I ? it's so ~ an answer is " Yes " . If a proo~procedure applied to the formula in its a ~ firmati ~/ e ~ or ~ provides a sucoess ~ an answer is " NO "  . Some questions may be unsolvable in the lack of kno~le ~ e  . 
The proof procedure ? or objective queries examines a ? or mula ~ ~ x  ( w ( x  ~ A ( x ) ) 18 B . BEGIER which is supposed to be false . The proof prroedure tries to retrieve a counterexample  , if i % exists , which will be substituted in the place of Xo I % has been assumed that problem queries are in the implication form after the translation proeess  . Question-answer in ~ procedure for this class of queries has been reduced to such one t which tries to retrie-ve an answer from one axiom  . For the first subclass of problem queries a search is made for an axiom in the implication form  , ~hich conclusion embodies the conclusion of the formula obtained from the tx~ansformed query  . The premises of this axiom arean answer ? The proof procedure applied to answer a question of the second subclass tries to find an axiom ~ which premises are implied by premises of the formula obtained f~om the transformed query  . The conclusion of this axiom is an answer . 
The proper way to reduce a number of clauses taking a part in the resolution process is to constr  , ~ct an initial active set of clauses as a set containing only clauses of axioms concerning concepts reco-~LIzed in the query and clauses of formula obtained from the query  . 
The translation rules , applied to transform axioms from the predica-te calculus language into the natural language expressions t can be used also to translate the retrieved answer to the natural language ? 

Described above ~1o~le~e representatiom method based on predicate calculus has been applied to the large subset of FORTRAN  1900 \[ I\] . 
I% has been sho~n that this method satisfies cr iteria required in the ICAI system  . An application of the predicate calculus language to describe knowledge about the programming language provides the automated answering of student's questions  , whlch is the main advantage of this method . 
T~L is method is applicable to those domains of ~ owledge  , which can be represented by the set of first or ~er logic axioms  , with regard to their formalized nature . 
REFERENCES\[J\]BegierB . ~ Method of representation of subject matter in the computer system to teach pro ~ ammlnglan ~ ua ~ e ~ Ph  . D . Thesis/in Polish /, Reg . Comp . Center , Tech . Univ . of Pozna ~/1980/ . 
\[2\] Burst all R . M . ~ Formal description of program str ~ cture and semantics in first order logic  , Math . Intell . 5/1969/79-98/3\] Carbenell J . R . ~ AI in CAI : an artificial intelli~ence approach to computer-assisted instruction  , IEEE Trans . on Man-Machine
Systems 11/1970/190-202\[4\] Clancey W . J , , Be ~ et J . S . , Cohen J . R . ~ Appll cations-oriented AI research = education  , Rep . STAN-CS-79-749~Dep . of Comp . So . ,
Stanford Univ . /July 1979/   \[5\] Computer-aided instruction system to t~ch the pro~ammlng language FORTRA ~ Rep  . of Re ~ . Compo Center p Teoh . Unl v . Poznad/1980/\[6\] Goldstein I . P . ~ The genetic graph : a representation for the eve  . 
lution of procedural Enowledge , Int . J . Man-Machine Studies 11   /1979/   51-77 \[~\] Laubsch J . H . , Some tho~h % about represen?ing knowledge in instructional systems ~ Fourth Int  . Joint Conf . on Art . Intel ~ . , ~ ilisi/1975/122-125\[8\]Lovel and D . W . ~ Automated theorem proving = a losical basis / North Holland ~ Amsterdam  ,  19~8 /
