A Portable & Quick Japanese Parser : QJP
Masayuki KAMEDA
Information and Communication R&:D Center , RICOHCOMPANY , LTD . 
23 , Shin-Yokohama 3-chome , Kohoku-ku , Yokohama ,  222 , Japan

Abstract
QJP is a portable and quick softwaxe module for Japanese processing  . QJP analyzes a Japanese sentence into segmented morphemes/words with tags and a syntactic bunsetsu kakari-uke structure based on the two strategies  , a ) Morphological analysis based on character-types and functional-words and b  ) Syntactic analysis by simple treatment of structural ambiguities and ignoring semantic information  . 
QJP is small , fast and robust , because 1 ) dictionary size ( less than 1100KB ) and required memory size ( 260 KB ) are very small ,  2 ) analysis peed is fast ( more than 100 words/see on 80486-PC )  , and 3 ) even a 100-word long sentence containing unknown words is easily processed  . 
Using QJP and its an a \] ys is results as a base and adding other functions for processing Japanese documents  , a valqety of applications can be developed on
UNIX workstations or even on PCs.
1 Introduction
Natural language parser/analyser is essential for allowing advanced functions in document processing systems  , such as keyword extraction to characterize a text  , key-sentence extraction to abstract a document , grammatiea \] style checker , information or knowledge retrieval , natura \] lmlguage understanding , naturailanguage interface and so on . But a general purpose parser requires 1 ) a laxge dictionary database with more than several tens of thousands words  ,  2 ) advanced techniques for disambiguation ad processing semantics  , a ald 3) substantial machine resources , such as a lot of memory and high speed CPU . 
In addition , users must mMntain additional terms in dictionaxies for specialized fields  . As a result , most parsers cannot be easily used in applications and it is difficult to develop a practical parser which can be easily integrated into many applications  . 
We changed our viewpoint in order to design and develop a alapplicable and usable Japanese parser  . 
First , we focused on the unique sets of character-types in written Japanese and constructed a very small dictionary using mainly functional words in hiragana-chm ' acter  . Similar approaches\[i\]\[2\] were used for segmentation or preliminary morphological analysis about  20 years ago , using the transition-point between types of eh axaeter sets to cue word segmentation  . Second , we noticed that dealing with syntactic ambiguities creates a large processing burden and even using semantic information does little to assist syntactic analysis at the current level  . So we either simplified dealing of structural ambiguities or ignored semantics to lighten the syntactic processing  . 
We first created a prototype of our parser\[3\] using AWK language , and then rewrote it \[4\] in C so it could be included in applications . The resulting parser , named QJP , is portable , fast and robust . It is an effective parser for many general purpose applications  , despite of a dictional T size of only 5 thousand words . It can analyze a 100-word sentence on a PC in less than one second , while using less than half of a megabyte of memory  . In addition , it requires no further diction axT maintenance for new terms  . 
In this paper we describe the QJP's analysis methods and report on its current performances  . 
2 Analysis Method
QJP performs two types of analysis : 1 ) morphological analysis to segment a sentence into part-of-speech tagged morphemes and words  ,  2 ) syntactic analysis to place words into bunsetsuL dependency structure  . 
Analysis strategies are the followings : ? The morphological analysis is achieved by expanding an earlier  methods\[ill2\] for bunsetsu or word segmentation using character -types thus Mlowing the use of a very small dictionary  . 
? The syntactic an a \] ys is uses no semantic information  , only part-of-speech and other syntactic information  . In addition , rather than creating all possible , or some preferable , parses , we construct the best syntactic structure preserving local ambiguities  . 
1Bunsetsu ( 3 ~ i ) is a kind of phrasal unit in Japanese , con-sistiug of one content word (~/ ~ , ~ . ~ , /~)\[ such as nonn ( ~~) , verb-noun (@ ~) , verb ( ~315~) , adjective ( ~ l : ~ . ~) , verb-adjective ( ~ J  ~ J ) and ad~rerb ( ~ q~\] ) \] and successive adjunctive words ( l ' ;   . ~ ) \[ such as auxiliary verbs ( II ) J  ~ J  ~ ) and postpositional particles ( tlJJ  ~ ) \] , and carrlng one concept . 
616 2.1 Morphological Analysis
Characteristics of written

A Japanese sentence has no spaces between words \ [ Figure  1\]  . So it is difficult to segment a sentence into words  . However , the fact that at least four distinct sets of characters \[ for example  , kanfi (" ~'' , ,~ c . . . . ~= x , ,  , ~ o ~ ragana ("?" , " J ~" " , " ~ " , etc ) , katakana (" . \]" , " ~:' , " ~" , etc ) and other characters ( alphabets , nmnbers , symbols etc . )\] are used to write Japa~mse can be used for segmenting words  . Most words written in kanji or katakan are content words  , such as nouns , verb-noun and stems ( -~ @ ) of verbs or adjectives . Most words in hiragan are functional words (~4~) , such as postpositional particles , auxiliary verbs and inflective suffix (7: ~ , ~-) of verbs and others\[Table1\] . And the vocabulary of content words i sumch larger than that of functional words  . 
Table 1 . Classifications of Japanese Part-of-Speech and their word examples  , A *1 gt Sharing of Morphemes by Dictionary and Ru les Our strategy is that all functional words  , wMch are few in nm nber , are stored in the dictionary and most content words or their stems in kanji or katakanare to be extracted and given their I  ) ar~-of ospeech candidates based on character-types . 
Standard morphological analyser uses a dictionary to obtain morpheme or word candidates  . But in our approach , morpheme candidates 2 are extracted either from the morpheme dictionary or using allocation rules based on character - type  . For exam-pie , if the dictionary lookup fails , the allocation rules extract each sequence of character in which all of the characters belong to the same character set  . 
Then , using the allocation rules , part-of-speech candidates are assigned based on the sequence's character set and length  . The candidates au'e disambiguated by checking connection with the the following morphemes based on the connection table between mor-phenmparts -of-speech  . The following morphemes , in most cases , are functional words or inflective suffixes . 
The dietio mu'y contains funetionM words\[such as postpositional particles  , auxilim'y verbs , formal nouns ( N~<~) , adverb M nouns ( ~ q~SN ) , conjunctions (~-~ N ) , adverbs and so on \] , inflective suffixes and exceptional content words which cannot be or axe not covered by the allocation rules  . 
Here are some examples of the allocation rules for  1  ) 1-kanji character sequence ,  2 ) 2-kanfi character sequence and 3 ) katakana character sequence . 
2 in this analysis , a inllected word is treated a+s two or more morphemes-a stem part and one or more inflection part  . 
.% N Part-of-Speech ~ noun + Y~N # verb-noun ( sahon ) 
I ~ #verb ~ #adjective ~7  #verb adjective
F ~ formal noun
NN ~ N adverbial noun = HN adverb ~ I ! ~ non-o on j , adj . 
~N conjunctive ~ particle ~ J ~$  #auxiliary verb ~ li ~ #aux  . functional v . 
~ J ~ inflective suffix
T~-~J ~ derivative suffix ~ prefix ~ J ~ i ~ suffix
E~1 Examples ~- J - ~ , ~ m~h-J-6 , -~--~- j-6~-< ,   , ~-~ , ~- J '6 , I $\] + , -~(~-~) ~- b . ~Lt , ~, J :- I , <-?1~6 LL~~-f ~, ~- V . ~-~?, U , ~-~- f "
N:U:(~J:U : ),$/':15 . ~5~I , ~12~-?,~5-~,~-~, 15<-~~Y .   , 5 ,  ~' ,  ~ , 5 ? ~ * l:indeloendent word * Z:adjunctive word *3:affix  ?  4:content word ( conceptual word )   *5:functional word #: inflective-:select point between stem and infleution part  1  ) noun/stem of 5-danver b ( ~i ! ~ g ~ NJ  ~ ) /stem of shimo-1-dan verb ( ~--~-~ . ~JJ~ , 7 )  2 ) noun / ( stem of 5-danver b )  /  ( stem of shimo-1-dan ) /verb-noun ( sahen-meishi ;  ~ ) ' ~ N ) /verb-adjective ( ~"-~! ~0J ~ )  3 ) noun/verb-noun/verb adjective The 1-kanji character nouns and verb-stems are largely of old -JN  ) an ese-origin words , wago(~H ~) , and 2-kanji character nouns , verb-nouns and verb-adjectives are mainly Chinese -origin words  , kango (~~) . In addition , there are several 1-kanji chaxac-terstems of kami-l-dan verbs ( \]a--~\[~tJ ~ )  , sahen verbs ( + ) - ~ gOJ - ~ ) and adjcctives ( )f~-~l ) which axe stored in the dictionals r because they ~ rcsofewinn mnber  . The word number of words which can be treated using rules like those given above is so great that the dictionary size is substantially reduced  . 
Treating of Wage compound words
Another characteristic of old-Japanese-origin verbs  ( wage verb ) is that they often continue with other words or morphemes to become verbs or nouns  . 
For examples , two verbs "=-j\]~<" ( ' to write ' ) and " ~ ~ e " ( ' to become crowded ' ) combine into the compound verl ) " ~@ i_ , _~"(' to write into ') , the verb " ~2" ( ' to read ' ) become the verb " ~ i "' ( ' cause to read ' ) with the causative suffix "@-" , and the verb " ~ JSu-~2" ( ' to step ' ) be coines the the noun " , ~fi~Y-\]-" ( ' a step ' ) with the derivative suffix "7 f ' . There axe a great m mly compound words such , as these . 
A word-compounding part determines a word fl-om morphemes using word-constituent rules based not only on inflections but also on compounds or derivation such as those shown above  . Such rules also greatly reduce the diction , ' u ' y size . 
61 . 7 : \ [ 1\] (  8 ) El *= fi ~\] ( 523 ) ~J ~' 2\] ( 14 )  0 )   ( 37 ) )=~1~  .  \ [ 3\] ( 16 ) J ~9\[ZH\] ( 293 ) El ' ~ g = gl ~ I\[4\] ( 20 ) 12\[zH\] ( 250 ) ~\] lRb
G\](26) I~1(355) ~ ~ I~1?\[7\](28) I . =\[ zH\] ( 36 ) -= t ~*\[8\] ( 30 ) ~\[ Zd\] ( 349\]~O ~\[\[9\] ( 32\] ; h . \[ zH \] ( 351 ) " F~?\[11\] ( 36 )  ~  ( 41 ) = ~= I~P ~*\[12\] ( 36 )   , ~\[ zJ\](369):~21113\](40) h , \[ zH \] (372) ~ . ~ a?\[14\] ( 42 ) t ~\[ zH\] ( 266 ) '24=9~ 1115\]  ( 44 ) ~\[ zH\] ( 2O5 )  9~ *\[18\]  ( 46 )   . ~ ,   , i  ~ ( 523 ) ~ JR?\[17\] ( 54 )  ? )   ( 37 ) J = ~*\[18\] ( 563 ~\[ zJ\] ( 523 ) ~ P\]?\[19\] ( 583 o ) \[ zH \] ( 37 )  \ ]=~ *\[20\]  ( GO )  ~1~ ~1  ( 523 )   ,   ,  ? \[211  ( 04 ) t : ( 36 )  -=~-~ ? \[22\]  ( 66 ) ~\[ zH\] ( 1843 ~=~@
I\[231(08) I , ~\[ zH\] ( 375 ) : ~ Jl ~ lb ?\[ 24\] ( 70 ) - ~\[ zH\] ( 72 )  ~=~ ? \[25\]  ( 72 )  , \[ zT\] ( 512 ) ~ ? \[27\]  ( 04 )  15  ( 47 )  # '~=~ *\[28\] ( 86 ) ~fzX\] ( 502 ) ~=! 1129\]  ( 88 ) -  ( 5013 ~ l~l ?\[30\] ( 90 ) a ) \[ zH \] ( 37 ) \ ] = ~ t t ~*\[31\] ( 92 ) ~1\[za\] ( 523 )  ~ ? \[32\]  ( 06 ) " e\[zH\] ( 243 ) ~= ~ c11341 ( 100 ) z  ~ ( 434 )  ~ ; O ~?\[35\] ( 102 ) o\[zP\] ( 353 ) ~J~\[in English \] In processing a sentence of an agglutinative language like Japanese  , in which division o are not placed between words , morphological analysis is the first harrier . 
Fig .   1 Example Japanese Sentence 1 \[ word in English \]--*\[ 1\]   ( 8 ) fl  ~ ( O2g ~\] ( 41 ) 4 ~ Japanese language\[2\] ( 14 ) ~9  ( O )   ( 51 ) 2= ~ off3\] ( 16\]J : 9-\[-<J : 9~J > ( 60 .  22 ) ~ O0*=~blike\[prep\]*\[4\] ( 22 ) $~  ( $ I \] f )   ( 41 ) ~i ~ ~ erd_\[5\] ( 2 )  ~  ( M )   ( 43 ) ~J between ?\[5\] ( 28 ) I ~ ( l : )   ( 51 ) - := ~ R1/in*\[7\] ( 30 ) t~1-~+~1 ( ~ h % ! ei )   ( 41 ) ~1 division space-\[8\] ( 36 )  '~  ( '$ )   ( 51 ) ~=~< object marker >*\[9\] ( 38 ) ~- h ~<~< > ( 15 , 11) ll ~: ~ Reaplace ?\[ 10\](42) t~-i , ~ <~1 , ~> (60 .  4 ) -24 = 0$ not*\[11\] ( 46 ) J  ~ J  ~ (  \ ]~ '~ )   ( 41 ) ~I ~ lagglutinative language ?\[12\] ( 54 ) d  ~ ( ~ O )   ( 61 )   . /= ~ J~of*\[13\] ( 56 )  :~  ( ~ )   ( 41 ) ~i ~ J sentence ?\[14\] ( 58 ) ~  ( ~ )   ( 51 ) \]=~ of*\[15\] ( 60 )  ~  ( ~ , t  ~ )   ( 41 ) ~1 processing ?\[16\] ( 64 ) l : ( 1: )   ( 51 ) := ~ in ?\[17\] ( 66 ) t ~ - t , ~ <~<> (75 . 22) ~9=:~  ; ~ b?\[18\] ( 70 ) - c ( ' c )   ( 55 )  -~=~ ? \[19\]  ( 72 )  .  (  ,   )   ( 923~1 soma *\[20\] ( 74 ) ~' ~ i ~$ f ( ~l ~ Mf $ ~ )   ( 41 ) ~lalmorphulogisal analysis ?\[21\] ( 84 )  1~:  ( l ~ : )   ( 52 )  #x = f ~ < topic marker >*\[221 ( 86 )  ~- - -  ( ~I -- )   ( 46\]~\[~~ the first ?\[23\] ( 90 )  ~  ( o )   )   ( 51 ) J = ~ of*\[24\] ( 92 ) IIII ~ ( ~l ~? )   ( 41 ) ~l ~ barrier ?\[25\] ( 96 ) ~< t '? > ( 60 . 23) a\]=R\]cis?\[26\](98) ~-~<~~> (75 . 3) 71b = ~?\[27\](102) .  (  . ) (91) ' ~ period Figure 2 . Segmented Morphemes with Tugs Figure 3 . Segmented Words with Tugs
Morphological Output from QJP
An example of segmented morphemes with morpheme -tags are shown in Figure  2  , where 8 nouns ("1~2~" , "~-~" , etc . ) and 2 stems of word ( , , t :)\]' ,   ,  ~" )  , maxked by '\[ zJ\]' , in kanji character are recognized using allocation rules and connection table  . 
The words with part-of-speed , tags and morpheme-divisions ('-' , '+') axe shown in Figure 3 , where a compound noun " ~ avbH " ( the 7th word ) is a compound of the morphemes 810\["~" ( stem of shimo-l-dan verb " ~ ) J ~" )  ,  " ~%"  ( renyou-kei inflective suffix of shimo-l-dan verb ; T ~ ~\ [ ~ ) ~: ~- z ~ ~ ) and " g " ( noun ) \] using a word-constituent rule . 
In Figure 3 , the root forms of inflected words have been derived and are shown in the <>- parentheses  , such us " ~\] ~ < " which is the root form ( shuushi-kei ; ~) of " ~" . These morphemes and words ~ u'e not in the dictionaxy  . 
2.2 Syntactic Analysis
Kakari-uke Analysis
Many J ~ l ) aamse syntactic analyses are ba~edon orthodox bunsets  , > depcndency analysis , called kakari-uI ~ eaanMysis(~ . ~0 ~ ~ J ~ :) between bunsetsu phrases , where a bucket s'a-dependency structure corresponds to a set of kakari-uke bunsetsu pairs  . We also take this approach because it is intuitive  , understandable and easily implemented . 
a The relation of kakari and uke equals to modifier and roodifiee  . 
Simple Treatment of Structural Ambi-guities Structur M ambiguities are usually dealt with either by generating all possible structures or by selecting the more preferable ones ba  , sed on some scoring scheme . Such method usually leads to combinatorial explosions which causes a lot of memory and processing time  . 
For this problem we have already proposed a substitutional light  method\[5  ) in kakari-uke analysis . 
This method extracts all possible kakari-uke pairs  , and then rather than generate not M1 or some possible sets of pairs ~ only one best set of pairs is generated while still retaining all other possible \] Tairs  . 
Thus , instead of generating multiple number of sets , it most likely set is selected ~ ld the applie ~tion/user is presented with alternative kakari -ukep Mrs at the same time that the selected pairs are presented  . If the application/user corrects any alternative kakari-uke pairs  , the most likely set is recalculated using retaining possible kakari-uke pairs  . This means of dealing with structural ambiguities avoids combinatorial explosions and requires flu 'less machine resources  . 
Not Using of Semantic Inibrmations
Most methods for analyzing Japanese use c~e patterns with semantic features for preference selections  . However , such analysis techniques using semantic informations are not yet adequate and seine-times i ~ ctm dly lead to adverse  results\[6  )  . 
In addition , semantic information mst be stored small dictiom try achie  . w . ' din morphological analysis section . We limit the information to morphologi-c~fl/word ~ md syntactic levels\[such as the presence of coi\[Ima  ( -~ , %~) , adverbial noun , surface or syntactic similarity\[7\]\] without using semantic information for structur M analysis  . 
Flow of QJP's Syntactic Analysis
Under these approaches , QJP's syntactic aatai-yser processes words sequence in three steps \[ Figure  4\] each following its own set of rules . First it determines bunsetsu fcatures\[A\]for each bunsct su according to its word constituents  . Second it extracts " all possible kakari-uke bunsetsu pairs\[marked by'O'inB\]based on specific combinations of bunsctsu features for each bunsetsu pair  . 
Last , it selects the best uke-bunscts u ( modifice ) \[ marked by ' ~' in C\] from possible ones for each bunsetsu which is a kakari-bunsctsu  ( modifier )  , except timlast one , because every bunsetsu modifies one of the following bunscts us  , othel astone has no uke-bunsetsu . Thc defaultuke selection is the nearest possible uke bunscts u and  , if nccessazs r , Q . P substitutes the selcetion 1 ) ascd on rules comparing the two pairs - the currcnt selected ukc-bunsetsu and a more distant possible uke-bunsetsu for thc subject kakari -bunsctsu  . In Figure 7 , solnc pairs are not the new , rest ones . Tileat ) pli ( : ation/uscr'skakari-ukc pairs corrections rest , % rts the selection ; QJP first selects the corrected kakari . uk  cp , fir ( s ) \[ maxked by ' I ' in Figure 7\] and then re-selects remaining kakari-ukc pairs . 
Figure 4-C and Figure 7 ; ~rekakari-uke matrices showing the possible pairs and selected pairs  . Figure 5 is the output of kakari-ukc pairs tagged with parts-of-speech and bunsctsu features  . 
\[ Se~entation of Words by Hor~ological klalyser\]
I\[1 . Setting of Bunsetsu Features \] 1 \[Bunsetsu Features\[ 1\] : Elllo ~ 91:  \[  2\] : ~ ltllltlllz\[ 3\] : ~& B ? ~\[ 4\] : ~ : ~ t ~ u ~\ [ 5\] : llttlilio ) \[6\]: ~\[7\]: ~ l!~lzlm , ~ m , \[8\]:~I$\[9\]:~-o ) \[10\]:11=1'~$0\[I~~II~~l~~~o ) ~
A . Bunsetsu Features List\[ 2\]   0 $ iil tlllZ\[ 3\] O ~ : L' , , B , ~ \[  4\]  :  O00000f ltD'~U ~\[ 5\]   :0000011t   t~-1~  \[  6\]  :  0000~o   ) \[7\]:0~l:~U ~ , \[8\]:o~ffAI~l~\[9\]:0~-o )   ( 0: Possible Pair ) \[10\]:BIIP'I~oB . Possible Kakari-Uke Bunsetsu gatrix\[2 . Extraction of -1
Possible Kakari-Uke Bunsetsu Pairs \]\[* . Presentation of Structure \]\[& Selection of Best Set of 
Kakari-Uke Bunsetsu Pairs \]\[ 1\]:  \[  2\]:  \[  3\]:  \[  4\]  \[  5\]  \[  6\]  \[  7\]  \[  8\]  \[  9\]   \[10\] \[ in English \]
B~o ) J ~51 cv like Japanese lang.
~lillll < t-between words ~ I , PI~I-<obj > div . spacer ~ h~t~b ~ mot to place rlt ~ it ~ O ) r of agglutinative lang . 
r ~ O ) r sentence
F ~ lCt~b ~ , Fin processing till lt lt lt#liI - < topic > morph  , analysis--o ) P the first lll P~/187 Oo is a barrier . 
D . Kakari-Uke Dependency Structure 10987   654321  \[  2\] : ?~- ~ rdtlz\[ 3\ ]: e ~% ~ l ~\[ 4\] : OxxOO e~l ~\[ 5\]   :0 xxOiltlltt~o ) \[6\]: Oxxe~o ) \[7\]:0YS\]~lzt~i , vC , \[8\]:II tf~llt ~ ltAil#l ; t\[9\]:lllll-- ( b ( tll : Selected Pair ) \[10\]: Ml'1-eil ~7 ~ o ( x : Structurally
Prohibited P.)
O . Kakari-Uko Bunsetsulatrix
Figure 4 . Flow of Syntactic Kakari-Uke Analysis\[Sel~n ~tedWords with Tags \]\[  3\] \[ w~kq\[~Pll ~1~=~1\]  \[  61 \[~\[~~l ~= ~ l\]\[ 7\] \[~\[~ ii ~ ) ra ( ==~10 ) ~ u , \[~ s<I~r9=iK ~ llb\]~\[~=1~\] , I ~ l\]\[9)\[S~-i ~ , ~l~llm\[ . , '= ~ l\]B ~ m setsuFeatures ) ~-< i lod . Type ( K ~ kari : Uko ) > ~\[ lied . No . \]\ [= ~= gmt % t ~ ~ t ~ ~ l ~ f ~ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -<  ; ~: 1~1~>~\[4\]I ~ l~~I~t ~ , ~I ~ il ---<~ t ~ , ~: ~>-----~'\[51l (% tt ~ lo ) ~ l!~l ~< ~ g ; l ~ : ~ i ~ J > --~ , \[6l~lV~o ) il~l~-<o)~I ~ : t~ts\]>----~\[71
Figure 5 . Kakari-Uke Pail ~ with 2 . hgs3 . 1 Imp lemented So f tware QJP currently is implemented in the Clanguage both a QJP library and an interactive/batch on sole application  , QJP workbench . They have been implemented on DOS/PC and UNIX/Sun workstation  . 
QJP's dictionary consists of 4 files whose total size is less than 50KB and which contain about 5 thousands nmr phemes . QJP requires a ~ m ther control table file for the compressed  533>  ( 533 morpheme-POS connection table , the table for the allocation rules , the dictionary file indices and others , which is at most 35KB .   6 sets of morphological rules a ~ d 4 sets of syntactical rules \[ Table 2\] are embedded in the form of if-then rule in C functions  . The size of the work benchexecution file on DOS is about  185KB   . The tota ~ size ( executables and dictionaries ) is much less than 300KB\[DOS \] which is quite small and portable as a natural anguage analyser  . 
3.2 Analysis Experiment
QJP performa J~ces were measured for the QJP work bench using two sentence test sets :  1   \[24t sentences , average length 24 . 1 words/sentence \] and 2\[210 sentences , average length 29 . 5 words/sentence\] . 
Execution Performance
About 260KB of memory are required on DOS and 500KB on UNIX . With this amount of memory QJP can process a very long sentence  , such a z100-word sentence\[Figure 6\] . 
The analysis speed is 80 to 150 words/see on an 80486/25~IHz PC and 700 to 800 words/see on a Sun-SS20  . A 100-word sentence c~n be analyzed in less than 1 second on PC . Figure 8 shows the relationship of processing time to sentence length  . Syntactic processing time is on the order of the square of the sentence length  . But its coefficient is so small that the total processing time increases linearly in the range of actual ong sentences  . 
Table 2. Linguistic data and Rules
Morpholo Kiosl ~ naly ser\[D\]diotionary: -3500 entries .   ~5000 morphe ~ ea\[P\]morpheme/wordPart-of- Speech :  533/49 POSs\[T\]connection table: 533x533   ( ~\[R\]connection source-rules : ~300 rules ) char . sequence extraotion rules : ~ 20 rules \[ R\]R momheme-POS alloo at on rules : 14 rulesf~\]mor~heme-POS disa~bi ~ uation rules : ~   50 rules word-constituent rules ~ 60 rules f ~\] bunae L suhe adexceptional rules ~ 20 rules auxiliary functional verb rules ~ 15 rules
Syntaotical ~ naly ser\[F\]bunsetsu features\[R\]bunaetsu features saltineru les\[R\]kakari-uke par extracting ru les\[R\]kakari-ukepair exoeptional ru les\[R\]kakari-uke failure reoover yru les  68 features 80 rules 20 rules 40 rules - ~ 4 rules ? ~\[ O\]:diotionsry\[T\]:table\[R\] : rule\[P\]:POS\[F\]:foature  \[50\]   ( I 1 ) : tll~lll~l~-~\[49\] ( 1O )  : ?~  , ~?: Sol?uteri Pair\[48\] ( 9  ) : xO4~ltt&O:PossiblePair\[47\] ( 9 ) : ? r_& , ,~ ? : Struoturally Prohibited Pair \[46\] (  8 ) 7: 0x ? ~7 ~ x : Poaaiblel~t\[45\] ( 7 ) : ? x ? ? ? ~ C ~ Struotur sllYProhibitedPair \[44\]   (  6 ) >: xxx?00~I~\[43\] (  7 ) ?: xXX ? O00al ' ~ tll ~ i~6   0 : Selected and later \[42\]   ( 5 ) : x ? ? , xx?-~o ) Corr~tedPair\[41\](7): . x -"0'' ~ , II : ~ olicatior VUs ar\[40\](6)>: ? x??x .   .   .   . O  ~ ; ~ t ~ J ~ Correatod Pair\[39\] ( E ) > : xXX ? X X X X ' II ~ : ~\[ ~\] ( 4  ) > : X . X .   . xxx , O?~Ta\[37\] ( 3\]>: xxx?x xxx?O00I~~6\[36\] ( 2  ) > : x . x .   . xxx . O0tllffil ~ l'~\[35\](6) 7:'x" , x .   .   .   . ?00 ~" J ~' ' . 
\[34\](5)>:-x ? ? x .   .   .   . O'?x?x ? ~ l=\[33\] (  4 ) & : xxX ? x x x x ? x x x ? l ~ : ~&\[32\] ( 4  ) ? : x . x .   . xxx . xx . x .  00~=~?: \[31\](3)>: . x ? . x .   .   .   . O ", x . xO'O~l:\[30\](6) ?: . x , "0 .   .   .   . O . -x . xO'0~H',\[29\](S ) > :' X .   . 0  .   .   .   . O " " x ' x x " . x . O ~\[28\](4): x . x . X x x . X x . x .   . X X .   . ?' ~ l't . A,~n,~\[27\](3)>:'x" . 0  .   .   .   . O , " x ' x x " . x , O ? ~ l~ll~\[26\](2) & : X , x ? ? x x ? ? x X ? x ? ? x x ? ? ? x ? O ~ E ~\ [251  ( 2\]?: x . x . xxx . xx . ?-  . xx .   . 0eO~:~\[24\](1)>:"x ? '0 .   .   .   . O : ? x?x x ? . x'00"?~R\]~?\[23\](7)-:O,? .   .   .   . O , " x . xx",x,O0 . 01 ~ ll ~"> 7,-7-~, l : i ~ l , vC . 
\[22, 1(6) > :0 ? x x x . ? x x-x ? ? x x ? ? ? x ? x x ? x O l ~ lff itr ~\ [ Ex ~ oe S ~ to noe  2  \ ] ' : _ ~  4~t fAt ~- l~l~h ~ , ~l : \] l ~ , ; ; h , t = ~ . ~ . t::9 ~ lz~\]~d ~, ~
Llmlp , ' ?" . ~ ~.

Figure 6 . Analyzed Syntactic Structure for a 50-bunsetsu senence \ [20  \ ]  ( 5  ) ? :  . x .   . x .   .   .   . x .   . x . xx .   . x . x . x .   . x . ,llOfl~I-"/\[19\](4): x . x . , xxx . , xx . x .   . xx .   .   . x . xx . xxxOImlR ~ Y-<~6" .   .   .   .   .   .   .   . XX"~Jl , ~ ~ L synt ~ ji ~ " ~ lysL ~ U Ira (4) > :'?""? . .  .   . x .   . ?  . ??"  . x , ? . ? .   . x . " O " . xH ~ m=,~'~\[-~~,W/,,, .   .   .   .   .   .   . 
\[16\](3)>: x-x . -xxx . -xx , x . -xx .   .   . x . xx . x x x -?-0\]\[~ I " ~ . ""\[15\](537: O .  0  .   .   .   . x .   . x . xx . , x . x-x . , x . O .   . xO~E~b,~I "/ . . . .
\[14\](4)>:'x" . x .   .   .   .   . x .   . x . xx .   . x-x . x .   . x .   . x .   . xx .   . O/JIt ~ II ~ ~ I ",/ . ,"" \ [13 \ ]  ( 4  ) ?: x x x ' x x x x x x X X x x ' x x x x x x x x x x ' O Om ~l~l~G ~ I ""  .  ~  . . . .
\[1O\] (   1 \]> : X X X-X X X X ? Ills \] epical lnaly si ~ time\[  9\]  (  3  ) & : x x x . x x x x x . \[\[\[8\](2) > : x ? ? ? ? ? x x ,  ~  , r ~\[7\]( I ) > : .  ? .   . x .   .   .   .   . """" 72"~\[5\](4) ? : O .  0  .   .   .   . x .   . x . xx .   . xx . x--x . O .   . xx .   . e-x .   . 0 ~ i  ~ . 
\ [5 \ ] (3 )>:  . x .   . x .   .   .   . x .   . x-xx .   . xx . x .   . x . -x .   . xx . -x . -x .  -  . x , ? lWl~l:I-~m ~ : Sun ~ X .   . ,,\[4\](3) ?: O .  0  .   .   .   . x . x . xx .   . xx . x . - ? u .   . x ' . u .   .   .   .   .   . u . x . ~: t'~"i- .   . ,, t\[3\](2)>:0 x x x x .   . xx . x .   . xx .   . x . xx . xOxx .   . x , xx . xxx . xxO ~ , . ,, ~= IIII ~\[2\](1) > :00 xOx xx . x x x x x x x x x x x x x x O O x x x x x-O x X X X X X X X X X V O X b ~? ~ o  \   [1  \ ]  ( 0 ) > : 0 x X X X .   . X X . X .   . X X .   . X . X X . XOX X .   . X , X X . X X X . XXO0 ~" ~ . ~ ~ umbcr of words in a sentence 5098   765432   14098765432   13098765432   12098765432   110987654321 Figure 8  . Processing Time Figure 7 . Kakari-Uke Matrix for a 50-bun~et suenence vs . Sentence Len~h We used test sets I and 2 for tuning and blind test , respectively . For test sets 1 and 2 , the accuracy of analyzed nmrphenms/words is 99 . 3/99 . 3% and 95 . 7/96 . 1% , the accuracy of almly zed uke bun-sets , ~s for each buusetsu excel ) t the last one is 95 . 1% and 90 . 5?)/0 , and the accuracy of set of kakari-uke pairs in a sentence is  71  . 0% and 43 . 8%, respectively . 
For sentence swl fich have lengths of 3 to 15-bunsetsus and are nmrp hoh ) gically analyzed correctly , the accuracy of analyze duke bunsets~s for each bunsetsu is  97  . 3% and 93 . 6% , and the accuracy for sets of kakari-uke pairs in a sentence is  82  . 9% and 70 . 5%, resl)ectively,
Comparison
There are no public data for the performance of other Japanese analysers  , so comparison is difficult . 
But no toldy the size of files lint also the 1 ) erfornlall ce figures for memory and speed of QJP are though to be mot '  (  , , than ten times better than those of existing Japanese  analysers\[4\]  . As for analysis accuracy , the morphologic Maccn racy is a little lower than that of the existing Jai  ) anesemorphologicalualysersusil , g larges ( Medictionaries , but the syntactic analysis accuracy is thought to be no worse than that of the existing Jalmnese syntactic analysers  . 
4 Conclusions
We have designed and implemented QJP h ~ r the purpose of readily and e  , ~sily applicable morlflm logical and syntactic amdyser for Japanese  . The design strategies are based on 1 ) the morphological analysis bLsed on character -types and fimctional words to reduce the size of diet & mary  , and 2 ) the syntacticam'dysis by simple treatment of structural ambiguities and ignoring semantic information to lighten processing  . 
QJP , ~simplelnented , is portable , quick and robust . All tiles needed for execution im:luding dictionary total less than  300KB on DOS . Even on a slow PC a 100-word sentence ( : an be analyzed in less than 1 second using a small amount of memory . This performances i though to be quite excellent . The alml-ys is accuracy is comparable to that of other existing analysers  . No dictionary maintenance is necessary for new ternls  . 
The fnnctions of QJP are in q ) lemented ~ Lsa QJP lil ) rary an ( laQJP work bench . Welmve alremly utilized QJP flw keyword extraction  , nat n rM language query and text readings upt ) or tfltnctio as \[9\] and are t ) lamfing fllrther applications , uchms in fi ) rl nati(m retrieval system . Others use QJP fimctions for other purposes , such as linguistic data extraction . 
QJP currently doesn't segment compound kanji words of Chinese-origin and leaves this segmentation to the application  . In the fltture , we plan to realize such at segmenting fimction using on statistical  data\[10\] a , ,d aIlixes\[2\] . 
References \[1\] Yoshiyuki SAKAMOTO : An Automatic Segmentation for Japanese Text  , M~t thematical Linguistics , 
Vol .ll , No . 6, 1978 ( ill Japmlcse).
\[2\] Makoto NAG AO , Junichi TSUJII , Akira YAM-AGAMI , Shuji TATEBE : Data-Structure of a Large Japanese Dictionary and Morphological Analysis by Using It  , Journal of hfformation Processing Society of JaI ) au , Vol . 19 No . 0, pp . 514-52 1,1978 ( ill . Japanese) . 
\[3\] Masayuki KAMEDA : A Quickaat ) an escParser , Information Pro~iessing Society of Japan SIG Note  ~  , 94-NL-4 , 1993 ( in a apmmse) . 
\ [4\] Masayuki KAMEDA : A Portable & Quick Japanese Processing Tool:QJP  , I'roc . of the 1st Annual Meeting of the Association for Natural Language 
Processing , 1995 ( in Jai ) anese).
\[5\] Masayuki KAME DA , Shin ISIIII , tIideoITO : Interactive Disaml ) iguation illa JaI ) anese Analysis System , Information Processing Society of Japan SIG
Notes , 84-NL-2, 1991 ( in Japanese).
aeSO7~JL~:'~~?~)J~mt\]l'l > ~ , EDR7tJ:f-iga%~*lJ)l\]~/7\] , ~9 ? d&i , ~ . 9 . :: JJ ~, 1995 ( in Jai ) ancsc) . 
\[7\] Sadao KUROHASHI , Makoto NAGAO : A Method for Analyzing Conjmmtive Structures in Japanese  , q ? ansactions of Infornuttion Processing Society of Japan  , Vol . 33 No . 8, I ) p . 1022-1031, 1992 ( in
Jal ) anese).
\[8\] Sadao KUROHASIII , To shih is a NAKA MURA , Yuji MATSUMOTO and MakotoNAGAO : hn provement of Japanese Morl  ) hologic ~ dAnalyser JUMAN , Proc , of the International Workshop on Sharablc Natural
Language Resources , pp . 22-28, 1994.
\[9\] Masayuki KAMEDA : Supl ) ort fimctions for Reading Japanese text , hfformation Processing Society of Japan SIG Notes  , ll0-NL-9 , 1995 ( in Japanese) . 
\[10\]KoichiTAKEDA , Tetsunosuke FUJISAKI : Auto-marie Decomposition of Kanji Compound Words Using Stochastic Estimation  , Transactions of Infofmarion Processing Society of Japan  , Vol . 28 No . 9, pp . 952-961, 1987 ( ill Japanese) . 
Example Sentences 1 To hru HISA MITSU : Proc . of the 42th Meeting of Information Processing Society of Japan  ,  1991 . 
2 Japanese Laid Open Patent No . 60-20) 368, 1985.

