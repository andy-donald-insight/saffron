CONJUNCTIONS AND MODULARITY INLANG UAGE ANALYSIS PROCEDURES 
Ralph Grishman
Department of Computer Science
Courant Institute of Mathematical Sciences
New York University
New York , New York , U.S.A.

The further enrichment of natural
language systems depends in part on
finding ways of " factoring " the effects of various linguistic phenomena  , so that these systems can be partitioned into modules of comprehensible size and structure  . Coordinate conjunction has a substantial impact on all aspects of syntactic analysis -- constituent structure  , grammatical constraints , and transformations . If the rules of syntactic analysis were directly expanded to accomodate conjunction  , their size would increase several fold . We describe below the mechanisms we have used to lo-calize the effect of conjunction in our natural language analyzer  , so that most of the rules of our grammar need not ex-plicitly take conjunction into account  . 

Progress in computational ~ inguis-tics depends in part on identifying ways of decomposing complex components of the analysis procedure into more elementary constituents corresponding to separable or nearly separable aspects of linguis -tic structure  . If this " factoring " is successful , the constituents will in sumbe substantially simpler than the component they replace  , thus clarifying the linguistic theory represented by the analysis procedure and paving the way for further enrichment of the language system  . 
A familiar example of such factoring began with early contextfree natur-allanguage parsers  . Such parsers tried to use a contextfree grammar to des-cribe both the constituent structure of sentences and the most basic grammatical constraints  ( e . g . , number agreement between subject and verb and within noun phrases  , subcategorization constraints ) . 
Because these grammatical constraints have a mult iplicative rather than additive effect on the size of the grammar  , this approach rapidly becomes unwieldy . 
In its place arose two component systems with a separate procedural restriction component for expressing such constra-ints  . 
We have devoted considerable effort to factoring out the effects of coordinate conjunction on language analysis  . 
Conjunction greatly increases the number of different possible structures which the components of syntactic and semantic analysis must be able to process  . If each component were simply expanded to accomodate all these additional structures  , the resulting system would be huge and the essential function of the components greatly obscured  . We have sought instead to isolate , as much as possible , the effects of conjunction within separate modules which modify the operation of the parser and restructure the result of the parse  . 
Our System in Brief
Over the past 15 years , members of the Linguistic String Project and Computer Science Department at New York Un -iversity have developed a powerful set of tools for natural language analysis  \[1  , 2\] . Our primary objective has been the automated retrieval of information from natural language texts  ; for the past several years we have been applying these tools to the construction of systems for gathering statistics and answering questions about hospital records  ( initially , radiology reports ; currently , discharge summaries ) . 
We have divided the task of answering questions about such texts into two subtasks  \[3\]  . The first of these is the automatic mapping of these texts into a tabular database structure called an information format  . We term this mapping procedure formatting\[4\] . The second subtask is the retrieval of information from this database in response to natural language queries  . Both subtasks -- the analysis of the texts and the analysis of the queries -- involve several stages of syntactic processing followed by several of semantic processing  . The syntactic processing is similar in the two cases  , although the semantic processing is quite disparate : in the formatting  , it involves the mapping of sentence constituents into the format  ; in the question answering , it involves a translation into logical form ( an exten---500~sion of predicate calculus ) and then ce into a database retrieval request . We shall focus in this paper on the effects of conjunction on the syntactic processing  , although we shall also comment at the end on the interaction of the syn-tactic and semantic processing  . 
Syntactic processing is done into two stages : parsing and transformation-alde composit ion  . Parsing is done by a topdown context-free parser augmented by grammatical constraints expressed in an special-purpose procedural language  , Restriction Language\[2 , 5\] . The result-ing organization is similar to that of an augmented transition network  ( ATN )  , although sharper separation is mainta-ined between the context-free grammar which def in es the constituent structure and the restr ictions which implement the grammatical constraints  . In contrast to most ATNs , transformational decomposi-tionisper formed as a separate stage following the parse  \[6\]  . * The decomposi-tion regularizes the sentence structure by such operations as converting pass ive sentences to active  , expanding relative clauses and other noun modi fiers to full sentential structures  , etc . 
Incorporating Coordinate Conjunction
In this section we shall briefly consider the effect of coordinate conjunction on each aspect of syntactic processing  , and describe how we have added modules to our processing components to account for these effects  . 
Constituent Structure
Let us consider first the problem of the news t ructures introduced by conjunction  . The allowed patterns of con-joinings in a sentence are quite regular  . Loosely speaking , a sequence of elements in the sentence tree may be followed by a conjunction and by some or all of the elements immediately preceding the conjunction  . For example , if the top-level sentence structure is subject -verb-object and an " and " appears after the object  , the allowed patterns of conjoinings include subject-verb-object-and-subject-verb- object  ( "Idrankmilk and Maryatecake . ") , subject-verb-object-and -* The separation of constituent struc " ture  , restrictions , and transformations is another example of the modularity we try to achieve in our system  . See Pratt \[7\] for a discussion of the modularity of augmented context-free analyzers  . 
verb-object (" Idrank milk and atecake . ")  , and subject-verb-object-and-object ( "Id rank milk and seltzer . ")  . There are certain exceptions , known as gapping phenomena , in which one of the elements following the con junction may be omitted  ; for example , subject-verb-object-and-subject-object ( "Idrankmilk and Mary seltzer . ")  . 
We could extend the context-free component of our surface grammar to account for these patterns  . For example , in place of the production
S->SUBJ VERBOBJ we would have the set of productions 
S->SUBJ CA1 VERB CA20 BJC A3
CA 1->SUBJCA1 in ull
CA2-> SUBJCA1 VERBCA2 i
VERBCA 2 in ull
CA3->SUBJ CA1 VERB CA20 BJC A3I
VERBCA 20 BJC A3 i
OBJCA 31 null this does not include gapping ) . The trouble with coordinate conjunctions is that they can occur almost anywhere in the structure of a sentence  . Thus the same changes which we made above to the definition of S would have to be made to all  ( or at least many ) of the produc-tions in the grammar . Clearly , such an extension to the grammar could increase its size by perhaps an order of magni-tude  . 
One alternative is to automatically generate the additional elements and productions needed to account for conjunction as required during the parsing process  . When a conjunction is encountered in the sentence  , the normal parsing procedure is interrupted , a special conjunction node is inserted in the parse tree  ( such as the CAn nodes above )  , and the appropriate definition is generated for this conjunction node  . 
This definition allows for all the al-ternat ive conjoined element sequences  , like the definitions of the CAn shown above . Conjoinings not fitting the basic pattern , such as gappings , are still included explicitly in the grammar  . An interrupt mechanism of this sort is part of the Linguistic String Project parser \[ i \]  . A similar mechanism is included in Woods ' augmented transi-tion network parser  \[8\] and a number of other systems . 


The restrictions enforce grammatical constraints by locating and testing constituents of the parse tree  . One of the simpler restrictions in the Linguistic String Project grammar is WSE LI  , verb-object selection for noun objects . 
Verbs may be marked ( in the dictionary ) as excluding certain classes of noun objects ; WSELI verifies that the object is not a member of one of these classes  . 
For instance , the verb " eat " is coded as excluding objects of the class NSENTI  , which includes such words as " fact " , " knowledge " , and " thought . "* The sentence " Johnate his thought . " would therefore fail WSELI and be marked as ungrammatical by the parser  . 
Explicitly modifying each restriction to account for possible conjoined structures would expand that component several fold  . Most restricions , however , apply distributively to conjo-ined structures -- a constraint is satisfied if it is satisfied separately by each conjunct  . For example , when the object is conjoined ( verb noun l and noun 2 ) verb-object selection must be satisfied both between verb and noun l and between verb and  noun2  . Thus in " Johnatemeat and potatoes . " , WSELI must separately check selection between " ate " and " meat " and between " ate " and " pota - toes "  . This constraint can exclude incorrect analyses for some conjoined sentences  . For instance , in " Johnate his sandwich and thought about Mary  . " , it excludes the analysis where Johnate his thought about Mary  . 
Our implementation takes advantage of the fact that most restrictions apply distributively  . The restrictions are stated in terms of a set of grammatical routines which locate constituents of the parse tree  ; for example , the CORE routine locates the head noun of a noun phrase  . In a conjoined context , these routines are in effect multivalued ; in " Johnatemeat and potatoes . " , the COREOF THEOBJECT has two values , " meat " and " potatoes " We achieve this effect through a non-deterministic programming mechanism which is invoked by the routines when a conjoined structure is encountered  \[2  , 9\] . This mechanism automatically reexecutes the remainder of the restriction for each value of the routine  ( each conjunct )  . In this way , * NSENTI is one of several noun classes defined in the Linguistic String Project grammar in terms of the types of sentential right modifiers they can take  ( such as " the fact that John is here " )  . 
the effect of conjunction is largely isolated within these grammatical routines  . Restrictions which do not distribute ( such as number agreement ) must still be explicitly modified for conjunction  , but these represent a relatively small fraction of the grammar  . 
Transformational decomposition
The transformations regularize the parse by incrementally restructuring the parse tree  , and are therefore almost all affected by the possible presence of conjunctions in the portion of the tree they manipulate  . Most of the transformations , however , only rearrange elements within a single sentential structure or noun phrase  . We therefore chose the expand each conjoined structure into conjoined complete sential structures or noun phrases at the beginning of transformational decomposition  ( for example , " John baked cookies and made tea . " would be expanded to " John baked cookes and John made tea  . ) ; in this way most of the transformations are unaffected by the presence of conjunctions  . 
The rules for determining quantifi-cational structure  , however , must take account of the copying which occurs when expanding conjoined structures  ( for example , "Some people speak English and understand Japanese  . " is not synonymous with " Some people speak English and some people understand Japanese  . ") . In simplest terms , quantifiers derived from noun phrases which are copied during conjunction expansion  ( such as " some pe-ople " in the last example ) must be assigned widerscope than the logical connective derived from the conjunction  . 
We do this by assigning a unique index to each noun phrase in the parse tree  , copying the index along with the noun phrase in the transformations  , and checking these indices during the scope analysis which is a part of the translation to logical form  . Similar account must be taken of copied determiners and quantifiers in conjoined noun phrases  ( because , for example , " tencolleges and universities " is not necessarily synonymous with " ten colleges and ten universities "  )  . 
Sentence Generation
As part of our question-answering system , we generate answers by translating from logical form  ( extended predicate calculus ) into full English sentences\[10\] . There is a close parallel between the components for sentence analysis and sentence generation  ; in par---502--ticular , the last major step in generation is the application of a set of generative transformations  . In accordance with the basic symmetry between analysis and generation  , the generative transformations operate on trees containing conjunctions only of full sential structures and noun phrases  . Conjunction reduction ( changing , for example , " Johnatecake and Johndrank milk . " to " Johnatecake and drank milk . " ) is performed at the end of the transformational cycle  . Most of the generative transformations operate within a single sentential structure or noun phrase  . As a result , the generative transformations , like the analytic transformations , are for the most part not affected by the presence of conjoined structures  . 

In the preceding sections we have described the effect of coordinate conjunction on all the components of a syntactic analyzer  . We have shown how we have been able to encapsulate the changes required to these components -- as an interrupt mechanism for our con-text-free parser  ; as a nondeterministic programming mechanism invoked by the routines used by theres -trictions  ; as a set of expansion routines preceding transformational decomposition  . We have thus avoided the need for pervasive changes which would have substantially enlarged  , complicated , and obscured the original components . In addition , our approach has isolated and characterized the effect of conjunction in such a way that it may be carried forward to future systems and other gro-ups  . 
Although modularity is generally regarded as a desirable objective  , it is sometimes claimed that it imposes constraints on the communication between modules which will ultimately lead to unacceptable losses of efficiency  . We would respond that some constraints are necessary if a complex system is to be manageable and comprehensible  . If the mode of interaction is appropriately chosen and sufficiently powerful  ( such as the interrupt mechanism and the nondeterministic programming mechanism  ) the resulting system will be both clearly structured and reasonably efficient  . 

The author wishes to acknowledge the primary roles played by Naomi Sager and Carol Raze Friedman in the design of the conjunction mechanisms  . Carol Friedman developed the routines and res -trictions for conjunction and the conjunction expansion procedure  . NgoThanh N han implemented the conjunction transformations for question analysis and the conjunction reduction routine for sentence generation  . 
This research has been supported in part by Grant No  .   N00014-75-C-0571 from the Office of Naval Research ; in part by the National Science Foundation under Grants  MCS78-03118 from the Division of Mathematical and Computer Sciences and  IST-7920788 from the Division of Information Science and Technology  ; and in part by National Library of Medicine
Grant No . LM02616 , awarded by the National Institutes of Health , DHEW . 
References i . N . Sager , Syntactic Analysis of Na-tural Language . Advances in Computers 8, 153-188 . Academic Press , New York (1967) . 
2 . R . Grishman , N . Sager , C . Raze , and B . Bookchin , The Linguistic String
Parser . AFIPS Conference Proceedings 42,427-434 . AFIPS Press , Montvale , New
Jersey (1973).
3. R . Grishman and L . Hirschman,
Question Answering from Natural Language
Medical Data Bases . Artificial
Intelligence Ii , 25-43(1978).
4 . N . Sager , Natural Language Information Formatting : The Automatic Conversion of Texts to a Structured Data Base  . 
Advancesi_nn Computers __17, 89-162.
Academic Press , New York (1978).
5 . N . Sager and R . Grishman , The Res-triction Language for Computer Grammars of Natural Language  . Communications of the ACM 18, 390-400 (1975) . 
6 . J . Hobbs and R . Grishman , The Automatic Transformational Analysis of En-gl ish Sentences : An Implementation  . 
Int'lJ . of Computer Mathematics,
Section A , 5, 267-283 (1976).
7 . V . Pratt , Lingol--A Progress Report . Advance Papers Fourth Int'l Joint Conf . Artificial Intelli@ence , 422-428 (1975) . 
8 . W . A . Woods , An Experimental Parsing System for Transition Network Grammars  . Natural Language Processing,
Courant Computer Science Symposium 8 ,  111-154 (1973) . 
9 . C . Raze , A Computational Treatment of Coordinate Conjunctions  . Am . J . 
Computational Linguistics , microfiche 52 (1976).
10 . R . Grishman , Response Generation in Question-Answering Systems  . Proc . 
17th Annl . Meeting Assn . Computational
Lin@uistics , 99-101(1979).

