Lexieal-Functional Transfer : A Transfer Framework 
in a Machine Translation System Based on LFG
Ikuo KUDO
CSK Research Institute
3-22-17 Higashi-Ikebukuro , Toshima-ku,
Tokyo , 170, Japan

This paper presents a transfer framework called LFT  ( Lexical-functional Transfer ) for a machine translation system based on LFG ( Lexical-functional Grammar )  . The translation process consists of subprocesses of analysis  , transfer and generation . We adopt the socalled fstructures of LFG as the intermediater presentations or interfaces between those subprocesses  , thus the transfer process converts a source f -structure into a target f-structure  . Since LFG is a grammatical framework for sentence structure analysis of one language  , for the purpose , we propose a new framework for specifying transfer rules with LFG schemata  , which incorporates corresponding lexical functions of two different languages into an equational representation  . The transfer process , therefore , is to solve equations called target f -descriptions derived from the transfer rules applied to the source f-structure and then to produce a target f-structure  . 
1. Introduction
A grammatical theory called LFG ( Lexical-functional Grammar ) Ill is a framework for sentence structure analysis and has a simple framework for representing lexical and grammatical information  . It analyzes a sentence in two steps , a phrase structure analysis and a functional structure analysis  . The former is a syntactic analysis and produces constituent structures  ( c-structures )  . The latter consists of several procedures , attaching lexical functions to components in the c-structure  , deriving flmctional equations called functional descriptions  ( f-descriptions ) from them with preserving configurational relationships  , and solving these equations to produce a functional structure  ( f-structure )  . Those lexical functions are represented by a representative framework called LFG schema  . 
We adopt such LFG schema to a representative framework for a dictionary and rules which define functional correspondences between components of two languages  . With them the transfer process can be designed as a simple procedure such that its task is only to solve functional equations of the target language and then produce an f-structure of the target language  . We propose such a framework called LFT ( Lexical-functional Transfer )  . It consists of both a representative framework for a two-way dictionary and transfer rules and a processing mechanism of transferring an f -structure of source language into an f-structure of target language  . 
The representative framework is declarative and then easy to manipulate  . The procedure is a mathematical processing and thus enough simple and clear in its nature and executable easily  . 

Hirosato NOMURA
NTT Basic Research Laboratories
Musashino-shi , Tokyo , 180, Japan2 . Overall construction of translation system Figure I shows the global construction of the translation system  . The whole process is divided into three subprocesses  , analysis , transfer and generation as usual translation systems  . The analysis process is nothing but LFG analysis . 
LFG anays is ~" ~" two-way dictionary - - ~/ Generation F  .   .   .   .   .   .   .   .   .   .   . 77---F .   .   .   .   .   .   .   .   .   .   .   . 7 Source ,  ~ ~  , Target ( Lexical-functional Transfer )  1 ) Dictionary looking-up , 2) Conditioning , 3) lnstantiation , 4) Solving target equations Fig .   1 Translation model based on Lexical-functional Transfer The transfer process  , LFT converts an f-structure of a source language into a corresponding f-structure of a target language  . At first , a transfer dictionary is looked-up and transfer ules are selected  . Next , the conditions in the rule are checked . If they are satisfied , the schemata of target language in the transfer ule are instantiated  . And then the functional descriptions of target language are obtained  . They are called the target functional descriptions  ( target f-descriptions )  . After setting up the target f-descriptions , the task of the transfer process is reduced to solve them and then produce an f-structure of the target language  . The processes of instantiation and solving target f-descriptions are the same mechanism within LFG  . 
Implementation adexecution of these processes are very clear and thus there is no need for further explanation  . 
The generation process is tentatively defined as a linearization process of the structured relationships in the target f-structure and a insertion process of inflected words  . However its explanation is beyond the scope of this paper  . 
3 . LFT representative framework 3 . 1 Transfer rules A transfer ule makes two schemata of two languages correspond each other and its general representative framework is as follows : J \ [  ( LFG ) schemata \] <===> E\[ ( LFG ) schemata \] . 
In the expression , to show what language the schemata belong to , a initial letter of each language is put in front of each square bracket  . In this paper , Japanese is signified with ' J ' , English with ' E ' . Examples of the transferules are as follows : J \[  ( 1'SUBJ ) = I \] <===> E\[ ( I"SUBJ ) = I\] , 
L ............... J
J\[(L~'PRED)::'t'z"I <===> E\[(~PRED ) = ' Tom'\].
A metavariabl c ~' in the righthand sidenms t correspond to that in the lefthand side  , and also a metavariable ~ in the righthand side must correspond to that in the lefthand side  . A symbol <===> designates that both sides are strictly corresponding  . When a rule is referred in the transfier process , if it is , for example , transferring from Japanese into English , the side having'J'plays like a condition part in a ' IF  . . . THEN . . . ' rule , and vice versa . 
Therefore the description of the transfer rules are bidirectional since both sides can be a condition part depending on the direction of transferring  . 
The number of schemata in both sides are not always equal and such an example appears in the rules  3 in the table 3  . It can be divided into next three rules . The isolated type is used in a dictionary since it is compact  . 
-  ( tSVCASE-NAME ) = SUBJJl ' ~\[ ( tOBJ ) = ~\] <===> J Fit on , l ) = J . q
L(~OBJCASE-NAME ) = OBJ-~\[:(~'PRED ) = ' PI , AY-\[<===>Jr- ( TPREl ) )='suru "7 E < ( tSUBJX ~ OBJ ) > ' I l < ( ~" SUBJ ) ( 1' OBJ ) > ' lLi ( ~SUBJ CASE-MARKE Itl='ba'JJm ( I'OBJ CASE-MARKER ) =' we'JInaf-structure , its structure is represented with hierarchy and function names  . Even if the structures between two corresponding fstructures are different  , a transfer process must prove wellformed syntactic relationships in the target f -structure  . Even these relationships can be represented with the LFG schema  . 
For example , the rule (2 . c ) makes different structures correspond ; hierarchy and function ames in the rule are different  . English side is ' A COMPSCOMP ' but Japanese side is < XCOMP'  . Therefore LFT rule can make two different structures correspond  . 
Furthermore , there is often nothing corresponding between two languages  . For example , a infinitive ' to ' exists in English , but there is nothing in Japanese . Two schemata in the rule (2 . b),
E\[(1"ACOMPSCOMP to ) = +\],
El(1'ACOMPSCOMPINF ) = +\] , represent infinitive ' to ' . As another example , there is no gender in Japanese and English noun , but there are genders in French and German . But it is easy to treat he problem because you have only to add the gender's schema to the rule  . For example , ' a book ' in English corresponds to'e in Buch ' in German  . 
E\]'NUM ) = SG <===> GNU MI=SG
SPEC ) = ASPEC ) = E1N
GENDER ) = NEUTER 3.2 Two-way dictionary
The LFT utilizes a two-way dictionary which has entries for both languages  . Each entry consists of pairs of ( 1 ) a designator and ( 2 ) some pointers . The designator is a medium to instantiate the schemata in the condition side  . The pointer refers a transferule . The rule is referred by both languages through each pointer  . 
A rule is registered to the ~ value ' entry of the head schemata  , '( ~ PRED ) = value ' . When a rule has many head schemata , it is assigned to all the ' value ' entries redundantly  . For example , the idiom ' beeager to ' has two head schemata ; ( tPRED)-<BE < . . . > ',( ~" ACOMPPRED ) = < F,AGER < . . . > ' in the rule (2b ) . So it is assigned to the ' be ' English-Japanese dictionary JapaneseEnglish dictionary 
E : entry l / ~ J : entry l - 7 designator .   .   .   .   .   .   . , 7-L__ . . . . . . ,  .   .   .   .   .   .   .   . designator \] poin~ersl rans mrrum spointers\[ E:entry2 E\[Schemata \] < .   .   .   . > J\[Schemata\] J'entry2 designator ElSehemata \] <= .   .   .   . > J\[Sehemata \]" designator\[pointersE\ [Schemata \] <=  .   .   .   . > J\[Scbmnata\]pointers J
Fig . 2 example of a two-way dictionary
Table I The English-Japanese dictionary ( Ex . from sentence ( 1 ) to sentence 2 ) ) " Eilglieh entry be eager
Tom play baseball desinator(~ACOMP ) = J , t = $ t = l pointers rule 2a , b , c , drule2a , b , c , d rule1   rule3   rule4 Table 2 The Japanese-El~glish dictionary ( Ex . from sentence (2) to sentence (1)
Japanes entry pointerstngaru to lnil 8uru yakyuu desinator t--~t = J , rule 2a , b , c , drulel rule 3 rule 4 .   .   .   .   .   .   .   . T . _ ~ l_~a__'_P , : . ,~, . _ , . 21 t ~( ~ . j > 2tw_t ~, 2th 3 ~ e . , tea_?~(J ) a . _aJ22) .   .   .   .   .   .   . 
(Rulel )  ~ ( ~ PRED ) = " ram'7F ( ~" PltED ) =' Tomu ' E\[ ( TNUM ) = SGJ < .   .   .   . > J\[ ( \]' NUM ) = SGL ( 1' PERSON ) = 3L ( 1' PERSON )  = 3  ( R  ~ . a ) L1V(lSUBa>=*-E\[(i'8UBJ ) = I < .   .   .   . > Jl(~SUBJ CASE-MARKER ) = ' ba '
L(1'SUBJ CASE-NAME ) = 8UBJ(Ruh~2 . b )   ( ~ACOMPSUBJ ) = ( tSUBJ )  \[- ( tACOMP8COMP8UUJ ) VtXCOMPSUBJ )  = ( tACOMPSUSJ )  \[ = ( ~SUBJ ) E ( ~ ACOMPSCOMP to ) = + <  .   .   .   .   . > JJ ( tPRED ) = ' tagaru ( TACOMPSCOMPINF ) = + J < ( tSUBJ ( ~ XCOMP ) >' TACOMPPRED ) =' EAGER < ( tsunJ ) ( tSCOMP ) >'  ( ~" PRED ) ='BE
L < (? SUnJ)(tACOMP ) >_(Rte2 . e)iR"(tACOMPSC()MP ) = t\]< .   .   .   . > Z\[(~XCOMP ) = ~\] t~2 . d ) "-( iTENSE--)-PRESENT~< .   .   .   .   . > J\[l'TENSE ) = PRENT'ASPEC'r ) = ' iru ' ( R tf3D ( tSUB d ) = ~- sun , ))= ~ 7
SUB,\]CASE-MARKER ) = ' he'I
SUBJ CASE-NAME ) = SUBJI
E(tOBJ ) = ~,\[' OSJ ) = ~,\[
I < . . . . . > J < OS , lCASE-MARKER ) =' wo'I ( I"PRED ) =' I'L AYJOBJ CASE-NAME ) = OBJJ .  < ( tSUBJ ) ( i ' OBJ ) > ~\]' PRED ) = ' et li't lJ < ( ~' SUBJ ) ( ~" OBJ ) >' A ( Rule 4 ) \]<===> J'PRED ) =' yakyuu ' Er ( tPRED ) = ' bsseball'L ( tCAT ) = SPORT\[I\] .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . : CA_'?)--:~y()Ry .   .   .   .   .   .   .   .   .   .   .   .   . 
entry and the ' eager ' entry in the table 1 . But the designators are different . The ' be ' designator is ' ~= 1 ' and the ' eager ' designator is ' ( ? ACOMP ) = I ' , as shown in table 1 . 
4. LFT processing mechanism
LFT processing is divided into four phases as shown in Figure  3  . Each phase is described briefly as follows: ( phase 1 ) Loohing : uup the dictionary_Collect all the head f descriptions whose type is '  ( fnPRED ) -value ' , from a source f-structure . Lookup ' value ' in the dictionary one by one and go to the phase  ( 2 )  . 
(phase2 ) Conditi ~ Check whether the conditions in the rule are satisfied with the source f-structure  . If so , go to the phase (3) . If not , check the othe rules . When a rule is applied ( from English to Japanese )  , English side in the rule works the conditions , Japanese side works the result . 
E\[conditions\]<===>J\[results \]   ( phase 3 ) Instantia . fion : Instantiate the schemata in the result side with the table of correspondence  , which yields target f-descriptions . When actual variables ( fl , f2 . . . . . etc . ) are assigned to the metavariables ~ , ~ in the results , the table is looked up . The table shows that actual result side . For example , table 5 in the Figure 3 . 
(fl_ILase4 ) Solving LL ar ~ tions : _ After the phase ( 1 )  , (2) and (3) , collect all the target f-descriptions and solve them by the LFG algorithm  , ' from f-descriptions to an f -- structure  '   . So a target f-structure is obtained . 
F-structure of the source text dictionary entry disignator pointer transferules \[ Rules E\ [ conditions\]<===>J\[results l\[RulesE\ [ schemata \]  , ( ===> J\[schematal
F-descriptions l of ~ m target extI ( phase 1 ) r ~_-~ i ;  , ,c-t5 , :;-I
I ~ ooking-up '?, '', m1't g . 4 a dictionary .   .   .   .   . -f  ~ . ~  .   .   .   . 
Table 4I , entry/Ientr'de signator ~ , eager\[(tACOMP ) = , ~\]( flACOMP ) = f3\]
Ton;/I = $ If 2 = f2; , play/\]=$f4=f4) ( obaso >
Conditioning ') ~', lf~Ig2l ', f4Ig3',
If 5Ig 411 nstantiation l .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . l \] Target f-descriptions 1 , (1)__(18) in the table 6 t .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . J(phase 4) ~ Solving targe ~ r- .   .   .   .   .   .   .   .   .   . -1* F-structure ' f-descriptions, .  ~ . , , ml'tg . 5k .   .   .   .   .   .   .   .   .   .   . u Fig . 3 Mechanism of I , FT ( l , exical-functional Transfer ) 1 luring phases of 1 , 2 and 3 , metavariables are assigned to actual variables as follows:  ( phasel ) The metavariables to r ~ , in the designator : The ' ~- variable in the designator in the dictionary ' is unified with the actual variable ! fn ' in the schema '  ( fnPItEI ) )= value ' which is h ) oked up . If designator is '~'-- , \[ ' , assign the same variable ' fn ' to '1"-variable in the designate r' . If not , , assign the actual variable unified with the source f-structure  . If it is no L found , the conditions are not satisfied . 
iphase2 ) The metavariables ~ or ~ in the condition side : Assign ' actual variable whicb is assigned ~- variable in the designator during  ( phase 1 ) ' to'1'-variable in the conditions ' . Find the actual variables unified with the source f-structure  . As signit unified with the source f-structure to the ~- variable  . If it is not fotm d , the conditions are not satisfied . 
(phase3 ) The metavariables ~ or ~ in the result side : Find the actual variables in the condition side by corresponding relations  ( i ' to T , ~ to ~) which the rule define . Lookup the variable in the table of correspondence  . Assign the variable to the metavariable . If there is no variable , assign a new actual variable to the metavariable . 
5. Example
An English example sentence and its Japanese equivalent sentence are as follows :  ( 1 )  . To miseager to play baseball . 
(2) . t , At ~ ~ ~- I . f : . \]/ oT ~ , ~otomuhayakyuuwesi(suru ) tagatteiru(tagaru . ) . 
The f-structure of the English sentence i s shown in Figure  4  , and the f-structure of the Japanese sentence is shown in 
Figure 5.
(1 ) Collect all the f-descriptions ' f in PREI ) )= value's fi'om a source i : structure ( Figure 4 )  . 
"114-SUBJ-PRED " rein'-\]-~'
NUM SG\]
PEP , ~ SON 3. lf2 ~_
ACOMPSUBJ P2 SUBJ 12 /OBJ\[-PRED ' baseball'i I\[_CATSPORT
P5 PRED'PLAY < ( ~SUBJ ) ( ~ OBJ ) >' EAGER < ( 1'SUBJ ) ( ~ SCOMP )  >'


PREDf3'BE<(~SUBJ ) (~" ACOMP ) >'
PRESENT fA
Fig . 4 F-structure of the English sentence (1)-suBJ



ASPECT)RED'Tomu'lUMSG~RSON
ASE-MARKER'ha '
ASE-NAME SUBJ g2
SoUBJ2BJ-~)RED'yakyuu'
CAT SPORT
ICASE-MARKER'we'g4~CASE-NAME OBJ\]_PREI ) ' sara < ( tSUBJ ) ( ~ OBJ ) > ' g3'tagaru < ( ~SUBJ ) ( ~ XCOMP ) >'
PRESENT ' i r u '
Fig . 5 F-structure of the Japanese sentence ( 2 )   ( a ) (fl PREI ) ) = ' BE < . . . >'( d)(f4PRED ) = ' PLAY < . . .  >'  ( b ) (f2 PREI ) ) = ' Tom ' ( el ( f5 PRED ) = ' baseball ' ( el ( f3 PRED ) =' EAGEI < . . . >'' be':Lookup'be '; ( fPRED)--'BE < . . .  >' . The designator in the dictionary ( table 1 ) is '~=$' . So 1 '=$ =' fl ' . Select the rule (2a , b , c , d ) in table 1 . 
(2) Check the conditions . Assigo actual variable fl to the metavariable ~' . Unify the schemata of conditions with the f -structure  ( Figure 4 )  . Then actual variables ~ f2 ' and ~ f4' are assigned to the motavariables ~ and the following f-descriptions are obtained  . 
E \ [ ( fl SUBJ ) = f2\]E\[ ( hACOMPSCOMP ) = f4\]All the conditions of the ( rule 2 ) are satisfied . Write ' f2 ' and ' f4 ' in the table 5 in Figure 4  . 
(3) Instantiate the schemata in the result side . For rule (2 . a ), lookup in the table 5 . There is no actual variable corresponding to ' fl  '   . So assign a new actual vm'iable'gl ' to the metavariable ~  . Write actual variable ' gl ' corresponding to ' fl ' in the table  5  . 
E\[(fISUBJ ) = f2\]< .   .   .   . > J\[(glPREI )) = g2\] . . . (1) lAkewise , we get the other f-descriptions ( 2 )   ( 3 ) from rule ( 2 . a ), the f-descriptions (4), (5) from rule (2 . b ), the f-descriptions (6) from rule (2 . el and the f-descriptions (7), (8) from rule (2 . d) . 
' Tom':thef-descriptions (9) ,  (10) , (11) are obtained . 
' eager': the same f-descriptions (1) . . . (8) are obtained . 
' play ': the f-descriptions (12) . .(18) are obtained . 
' baseball':the\['-descriptions (19) , (20) are obtained . 
(4) Solve the f-descriptions (1) . . . (20) below . So the target f-structure ( Figure 5) is obtained . 
Table 6(1J(glSUB , \] ) = g21 ( 11 ) J \ [ ( g2 PERSON )  = 31  ( 2 ) I \ [ ( g\]SUBJ CASE-MARKER ) =' ha ' ( 12 ) J ( g3SUBJ ) = g2\]3 ) J ( gl SUBJ CASE-NAME ) = SUBJ\] ( 13 ) J \ [ ( g3 SUBJ CASE-MARKI ~ R ) =' ha'\] ( 4 ) J \ [ ( glPRED ) = ' tagaru < . . . > q ( 14 ) J \ [ ( g3 SUBJ CASE-NAME ) = SUBJ\] ( 5 ) J \ [ ( glXCOMPSUBJ )  =  ( gl SUBJ )   ( 15 ) 1  ( g30 BJ ) = g4\] ( 6 ) 1  ( glXCOMP ) = g3\] ( 16 hi\[ ( g30 SJCASE-MARKER ) = :' we'\] ( 7 ) J ( glTENSE ) = PRESENT ( 17 ) J \ [ ( g30 BJCASE-NAME )  ~  ( ) BJJ ( 8 ) 1 \[  ( giASPECT ) :=' ira ' ( 18 ) J \ [ ( g3PRED ) =' sara < . . .  >' \] \]  ( 9 ) J \ [ ( g2PRED ) = :' to mu '\] ( 19 ) 1 \[  ( g4 PREI ) ) = ' yakyuu ' \] ( 1 ~ l ( _3~ . t!M != S(~ . . .   .   .   .   .   .   .   .   .   .   .   .   .   . 2o ! Jt(g4 ca'j'j . 2: s3,,,~'~L .   .   .   .   .   .   .   .   .   .   .   .   . 

The author would like to thank Prof . Narita of Waseda University , Mr . Ookawa , chairman of CRI ( CSK Research Institute ) and Mr . Yada , president of CRI for their constant encouragement . 
Reference ~\[1\] . R . M . Kaplan and J . Bresnan , ' The Mental of Grammatical
Relations ', MIT Press , 1982.
