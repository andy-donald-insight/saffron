COL1NG82 , , I . Horeclcj , ( ed./
North-Holl and Pab~hing Company
Composition of Translation Schemes with D-Trees
Nartin Pl~tek
Charles University , ~aculty of Mathematics and Physics
Mal ~ rans k6 m~m .25
118 UO Prague

Generative systems ( GS ) are defined in this paper as a composition of simple translation schemes with depen-dency trees  . The following issues are discussed : ( a ) explicative power of GS ,   ( b ) the time complexity for the analysis and synthesis for GS  . 

A generative system for Czech was presented in Sgall\[~  . 
The concept of a generative system was studied by Pl~tek  \[4\] and Pl~tek and Sgall\[~ . In this paper we use a similar approach as that presented by Haji ~ ov ~  , Pl~tek and Sgall in ~3~ ? We define generative systems as a fundamental device for construction of grammars of natural languages  . We give here some mathema-tical results to illustrate the usefulness of the new concept  . 
We try first to formulate the necessary requirements on a grammar G of a natural language L  . The grammar G must determine : a ) The set of all correct sentences of the language L  . 
The set will be denoted by LC.
b . ~ he set of the correct structural descriptions ( SD ) of the anguage L . SD represents all meanings of all sentences of LC . 
c ) The relation SH between LC and SD . The relation SH describes the ambiguity and the s~11ony ~ of L . 
By a structural description we understand a dependency tree  ( D-tree )  . 
The concept of a simple translation scheme from \[ I \] is a generalisa-tion of context-tree grammar  . We introduce here a similar concept of a translation scheme  , in this case as a generalisation of dependency grammar  ( see\[2\] ,  \[5~ . 
A generative system ( GS ) is defined as a sequence of translation schemes with a special as ~ etric property  . 
We show that the explicative power of GS increases with the length of GS  . We present results concerning on algorithm for the analysis and synthesis of GS and show that its time complexity is independent on the length of GS  . 
Moreover for a given GS we can construct a similar GS  , for which a fast algorithm for synthesis exists . 

Notation . The vocabulary , sets of nodes , edges and rules are here nonemDty and finite sets . 
313314 M . PLATEK
Let R be a relation . We denote
Oom(R ) = a , = a , bJ ~ Ran ~
Range(R ) = ~ b!\[a,b\]aR
Byf:U-*V we denote a total mapping from U into V  . 
Def . A ~ over a vocabulary V is a triple S = ( U , LR , o ) , where Ui ~- ~ set of nodes , LR a linear ordering of U , o:U--*V . Let o(u ) = A . We say that A is the value of node u . Let S = ( U , LR , o ) , Sl = ( U1 , LRl , ol ) , S2= ( U2 , LR2 , o2) be the str ' . ~ andu ~ U . We say that $2 is ~ from S by replac in ~ u by S1 , when the string SI is place ~ n the predeces or and the succesoro ~ nods u and otherwise  $2 does not differ from S . We denote as V the set of all nonempty strings over V  . 
Def . Let S1 = ( U1 , LRl , ol ) , 62 = ( U2 , LR2 , o2) be strings . 
Let U1 = ~ Ull, . . . , Uln ~ and U2 = u21, ? . . , U2n ~ and ul l , . . . . , ul n be in the ordering LR1, and u21, . . .   , u2n in the ordering LR2 and ol ( uli ) = o2 ( u2i ) for all i between 1 and n . Then we say that S1 and $2 are equivalent . 
We shall not distinguish between equivalent strings  . 
Def . A quintuple SR = ( U , LR , B , r , o ) is called a D-tree over V , when S(SK~(U , LR , o ) is a string and o:U--eV , B(SR ) = ( U , B . r ) is a tree with the root r and when the following condition holds : The nodes of every path in B  ( SR )  , which begins with a leaf , are nodes of a substrlng of S(SR ) . We say that S(SR ) is a projection of SR . 
Def . LetSRl = ( UI , LR1 , Bl , rl , ol ) and SR2 = ( U2 , LR2 , B2 , r2 , o2) beD-t~'~s . Let strings S(SR1) and S(SR2) be equivalent . Let f be a one-to-one mapping from UI on U2 , which preserves the ordering LRI to the ordering LR2  . Let f(rl ) -- r2 and let it hold that o\[u , v\]aB1 iff\[f(u ) , f(v)3@B2 . Then we say that SR1 and SR2 are equivalent . We shall not distinquish between equivalent D -trees  . 
Def . Let D = ( U , LR . B , r , o ) , Dl = ( U1 , LR1 , Bl , rl , ol ) and D2 = ~ O ~ , LR2 , B2 , r2 , o2) beD-trees and u ~ U . We say , that D2 is produced from D by replac in ~ u by D1 , when S ( D2 ) is produced from S ( D ) by replacing u by S ( D1 ) and the neighbours of r l in B ( D2 ) are the same as neighbours of u in B ( D )  . Otherwise D2 does not differ from D . 
Def . A translation scheme of type string-D-trees ( TSIS , D3) is ~- ~ u a drup leT = ( VN , VT , S , P ) , where VN is a the vocabulary of nontermlnals , VT the vocabulary of terminals , VN ~ VT = ~ , SeVN and P is a set of rules of the following type:LS-~-A--~RS  , where A~V N ( the middle of the rule ) LS ( the left hand side ) is a string over VN uVT , RS ( the right hand side ) is a D-tree over VN~VT and the following condition holds : When all nodes with terminals are erased from S  ( RS ) and LS , then we get two equal strings . 
Let p = LS~--A---~RS . We write \[ LSI , RSI~p--~LLS 2 , RS2 ~ , when ( i ) : the leftmost nonterm/nal node of LS1 is someu with the value A ,   ( ii ) : the leftmost nonterminal node of RS1 is some v with the value A and ( iii ) : LS2 is produced from LS1 by replacing u by LS and RS2 is produced from RS1 by replacing v by RS . 
~ 2 p--~ is denoted as ~ and ~ is the transitive closure of _ ~  . 

We denote as TR(T ) = i\[\[LS , RS\];/S , S\]~\[LS , RS\] , LS , S(RS ) ? VT + . 
COMPOSITIONOFTRANS LATIONS CHEMES WITHD-TREES 315 Remark . Analogically as a translation scheme of the type string-~-~ree was defined  , also definitions of the type string-string ( TS\[S , SI ) or of the type D-tree-D-tree(TS\[D , D3) can be given . 
ByTS\[S , S j the lefthand side and righthand side of a rule is always a string  . ByTS\[D , D \] both sides of a rule are always D-trees . 
As TS we denote the set of all translation schemes of all the three types  . 
Def . Let TI, . . . , Tn be a sequence of TS . We denote as TR(T  ~ , . . . ,Tn)=TR(TI) . TR(T2) . . . TR(Tn ) . The main definition of this paper is the following : Def  . A generative system ( GS ) is a sequence TI, . . . , Tn of TS , whe ~' ~- TR(Tl, . . .   , Tn ) is a relation between strings and D-trees and for every \[ dl  , d2~~TR(Tn ) there exists a . sl , so , such tha_%sl,d2\]~TR(TI, . . . Tn ) . The set AN(T l , . . . , Tn;v ) = ~ v,dJ ~ TR(TI . .
, . .: . .oITn )~ is called the anslysis of v . The set ST ( TI, . .o,Tn;d )-= \[ Es,dJ ~ TR(TI, . . . , Tn ) 3 is called the full synthesis of D-tree a . 
Remark . Let GSI = TI, . . . , Tn be a GS . Then Range(TR(Tl )) DD or a(TR(T2)) ~ . .  . Range(TR(Wn_I )) DDom(TR(Tn)) . 
We call this property of GSI anasynetric property of GS  . 
Def . Let GSI be a GS . We say that the function MS is a function of ~ minimal synthesis of GSI  , if the following conditions are fulfiled : a ) ~- lCTR ( GSI ) b ) Dom ( MS ) =Range ( TR ( GSI )   )  . 
Def . D-grammar ( DG ) is a T&TS\[S , D  ~ , where T = ( VN , VT , S , P ) and for gery p ? p , p = LS~--A-~RS there holds , that LS = S(RS ) . 
De__ff . We denote DRo = ~ TR(T ); T6DG\] and DRj = ~ TR(TI ,  . . . sT ~) ITI, . . . , Tj6GSS for j6N . Por ~~ N ~/ ~0 we write
IDRj = IF6DRj ; F is a function.
Note . We need also one more concept . It is % he concept of an B'~phic generative system for another one  . 
Def . Let ~ I , V2 be two alphabets and h:Vl--,V2 . Let SI = ~ qTI , LRI , ol ) , S2= ( U2 , LR2 , o2) be two strings , where o I : UI - - - ~ VI , o2: U2-@V2 . We say that a tuple ( f , h ) is an h-morphia , , from SI to $2 , when f:UI-->U2 is a one-to-one mapping which preserves the ordering on nodes and for every u ~ UI there holds that h  ( ol ( u ) )=c2 ( f ( u ) ) . 
We say that SIish-morphic for $2 , if there exist sanh-morphism from SI to $2 . 
Def . Let DI = ( UI , LRI , BI , rl , ol ) and D2 = ( U2 , LR2 , B2 , r2 , o2) beD-trees . 
Let-T ~, h ) be an h-morphism S(DI ) to S(D2) . Let there hold that \[ u , vl ? BI iff It(u ) , t(v)3~B2 and t(rl ) = r2 . 
We say that ( t , h ) is a h-morphi ~ from DI % oD 2 . 
We say that DI ish-morphic to D2 , when there exists an h-morphism from DI for D2 . 
Def . Let TI = ( VNI , VTI , SI , PI ) and T2 = ( VN2 , VT2 , S2 , P2) be TS . 
Let ~ .   . V~A2 VTI---~VN2 t/VT 2 , where h(VNI ) = VN2 , h(VTI ) = VT 2 . 
Let there exist a one-to-one mapping MP from PI on  P2 such , that if p = LSI ~--- AI--->RSI and M~P ( p ) = LS24---A2---~RS2 , then LSI ish-morphic to LS2 , RSIish-morphie to RS2 and h(AI ) = A2 . 
We then say , that TIish-m~rphic for T2.
316 M . PI~TEK
Def . Let GSI = TII, . . . , T ~ and GS2 = T21, . . . , T2n both be GS . 
Let T11 behl-morphic to T2 l , T12 h2-morphic to T22 ,  . . . and so onton ! we say then , that GS1 ish-morphic for GS2 , where h = ( hl ,  . . .  ,~) . 

Examplei.
Let us have a nex~ple of a translation scheme.
Let T3=(S,Sl,S2,S3~,~a,b,c~S,P3) and
P 3: a SI~--S~-~aSI~SI~~~c $2 * - ~ SI - - ~ a
S3a(-~S ~
S3a~--$3---~$2c(---$3~c < --$2--~
It holds that : - c-c-o.
We can sea that Dom(TR(T3)) = . an , n , j ~ ~ , anc"j , n ~ N ~ and that TR(T3) is a function . 
Example 2.
We present in this example some interesting set of translation schemes ? 
G4--(~S , A ~ , a , c ~, S , P4) where
P4: caAac ~ S ~ caAacaAa ? ----- A - -. ~ aA a
C*--A---*C
Then TR(G4) = ~ ca~canc , can can cJ , n ~ N
TS = (~ S , A , a , cl , S , PS)
P 5: cA 4---- S -- T c A c c A ~-- A - - - ~ c A c a A ~ ---- ~ aA ac ~ A---~cCOMPOSITION OF TRANS LATIONS CHEMES WITH D-TREES  317 and cA+---SaA ~ e4- -- a and let
R4(k ) = ' I ~ ( G4 , T ~51 , k-t~mes then R4(k)--~\[o~nc~no , ( c~n ) 2 k ~; n ~ ~ and if TR ( G4 , TS , o .   .   , T 5 , T 6) = IT ( k ) ( k-l ) times then ~4(k ) =\[\ [ a , b \]; ~ a , c\]e~(k ) and b = S(c )

Assertion 1 . For j ~ 0 it holds that DRj ~ DRj+I and 1DRj  ~  1DR j + 1   . 
Notation . IsJ denotes the length of the strings , which is the where U is the set of nodes of s . 
Assertion 2 . Let " GS1 be a generative system , a--~Then there exist an algorithm that computes for every string v the set AN  ( GSI , v )  ~ ( analysis ) with the time complexity bound by a function K1 . Ivl~omax ~ card(AN(T ~ , . . . , T i ; v ) j ~- I , where
El depends only on GSI . - ~ ~ -- b ) Then there exists an algorithm that computes for every D ~ treed the set ST  ( GSI , d )   ( full synthesis ) with the time complexity bound by function K2 . IS(d)l ~ . card(ST(GSI )), where I~2 depends only on GSI . 
Assertion ~ . Let GS1 be a GS . Then there exists an h-morphic gene-rative system  GS2 for GS1 and an algorithm that for every D-treed com~utes ST  ( GS2 , d ) with m time complexity bound by function K . JS(d ) Jocard(ST(GSI , d )) where K depends only on GS2 and
Dom(TR(GSI )) = Dom(Tr(GS2))
Assertion 4 . Let GSI be a GS . Then there exists an h-morphic gene-r~tives ys % ' em  GS2 for GSI and an algorithm such that for every D -treed computes MS  ( d ) with a time complexity bound by function K . ~ S(d)I , where MS is the function of minimal syntesis of GS2  , Dom ( TR ( GS1 ) )=Dom ( TR ( GS2 ) ) and K depends only on GS2 . 

Remark to Assertion I.
We sketch here a proo ' ~ of Ass . i . We see that DRo~DRI an ~ IDR od IDRI . DL kov skijan ~ Medina have shown in\[2 ~ , that TR ( T3 ) from Example I cannot be in DRo ~ We see that T3 is a TS . Thus DRO~DRI . Since ~ R(T3) is a function , we see that IDRo~IDRI . 
318 M . PLATEK
In the Example 2 we have shown that IT ( k)~IDR ~ . Prom the results on composition of pushdown transducers  ( PST ) in ~ "4~ and from the equivalence theorem between TS's and PST's from_i it follows  , that IT ( k + l)~DRk . Thus DRj ~ DRj+1 and IDRj-1 DRj+1 . 
Remark to Assertion 2.
The algorithm for analysis and synthesis for a GS is based on the idea of Cocke-You ~ ger-Kasami algorithm  . Pora seguence of simple translation schemes of the type string-string the algorithm is presented in Suchomel  E7J   . The difference between the upper boundary of the time complexity of the full synthesis and analysis is given by the asymmetric property of a GS  . 
Remarkt 9Assertion 3.
The basic idea of the proof is a construction of a new GS to GSI  . 
The new GS , denoted GS2 , has full information in the alphabets for a straightforward algorithm for a full synthesis  . 
Remark to Assertion 4.
The idea of the proof is a ~ alogous to that of Assertion  3  . When we have a partition of Dom ( TR ( GSI ) ) in the clases of synonymous sentences , the function of minimal synthesis chooses always only one representant of his class  . Therefore the algorithm can be so fast . 
Conclusion remarks.
When formulating a grammar for natural language , we can use with advantage the modularity of GS . We have shown that the time complexity of the analysis and synthesis for DRj  , j >_2 is independent on ~ . Otherwise the explicative power of DR . . is increasing with j . We have also shown , that to any generative ~ system there can be con -structed an h-morphic generative system with the full information for a fast algorithm of the minimal synthesis  . 

!I ~ A hoA . V . -UIIms ~ IJ . D . : The Theory of Pars in ~ Translation and Compillng  , Vol . I : Parsing ( Prentice-Hall , Englewood Cliffs , 1972) ~2 ? Dikov skij A . J . - Modina L . S .  :  0 trechty ~ achod nozna ~ nostikon -" t ~ kstnosvo bodnych ~ azy kov  , in Hatematic eskaj all ngvistikaite oria algoritmov  . Kalin in 1978 . 
\[3 ~ Ha~i ~ ov ~ E . - Pl~tek M . -Sgall P . : Komunikace_spo~Ita ~ emY ~ e?t in ~\[ Nm ~ -machine communication in Czech J in SOPS ~  ( WS
Bratislava 1980)\[4 JPl~tek M . : On serial and parallel compositions of , PST'S Thesis Faculty of mathematics and physics , Charles University , Prague ( December 1979)\[5~Pl~tekM . -Sgall P . : A scale of context sensitive languages : Aplication to natural language  , Information and Control , vo138
N . i . (1978)\[6 ~ Sgall P . : Generativn/popis jazy kaa ~ esk ~ deklinace ( Academia
Prague 1967) 17 ~ Suchomel K . : Generativn/syst ~ myaroz pozn ~ v~m/jazy k ~ ~ Generative systems and language recognitions Diploma work  , Paculty afmathematics and physics , Charles University , Prague ( April 1981)
