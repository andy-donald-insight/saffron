A SEARCHAL GORITH MANDDATAST RUCTURE FOR AN EFFICIENTINF OR MATION SYSTEM 

Shou-ehuan Yang
Data and Computation Center
University of Wisconsin
Madison , Wisconsin

This paper describes a system for information storage  , retrieval , and updating , with special attention to the search algorithm and data structure demanded for maximum program efficiency  . The program efficiency is especially warranted when a natural language or a symbolic language is involved in the searching process  . 
The system is a basic framework for an efficient information system  . 
It can be implemented for text processing and document retrieval  ; numerical data retrieval ; and for handling of large files such as dictionaries  , catalogs , and personnel records , as well as graphic ~ informations . Currently , eight cor~n and s are implemented and operational in batch mode on a CDC  3600: STORE , RETRIEVE , ADD , DELETE , REPLACE , PRINT , C(R4 PP , ESS and LIST . Further development will be on the use of telety peconsole  , CRT terminal , and plotter under a time-sharing environment for producing innnediate responses  . 
The maximum program efficiency is obtained through a unique search algorithm and data structure  , instead of examining the recall ratio and the precision ratio at a higher level  , this efficiency is measured in the most basic term of " average number of searches " required for looking ~ pan item  . In order to identify an item , at least one search is necessary even if it is found the first time  . 
Hc~ever , through the use of the hash-address of a key or keyword  , in conjunction with an indirect-chaining list -structured table  , and a large available space list , the average number of searches required for retrieving a certain item is  1  . 25 regardless of the size of the file in question . This is to be compared with 15 . 6 searches for the binary search technique in a 50 , O00-item file , and 5 . 8 searches for the letter-table method with no regard to file size  . 
* This study was supported in part by the National Science Foundation and the University of Wisconsin  . 
Best of all , since the program can use the same technique for storing and updating informations  , the maximum efficiency is also applicable to them wlth the same ease  . Thus , it eliminates all the problems of inefficiency caused in establishing a file  , and in updating a file . 
I . MOTIVATION
In our daily life , there are too many instances of looking for some type of information such as checking a new vocabulary in a dictionary  , finding a telephone number and/or an address in a directory  , searching a book of a certain author , title , or subject in a library catalog cardfil e  , etc , Before the desired information is found , one has to go through a number of items or ent ries for close examination  . The quantitative measurement is usually te rmed as the " number of searches "  , " number of lookups " , or " number of file accesses " in mechan ized information systems  . 
HoWever , as King pointed out in his article in the Annual Review of Information Science and Technology  , volmne3 , ( pp . 74-75 ) that the most cOmmon measures of accuracy of an information system are the recall ratio and precision ratio  . These two measures have come under considerable criticism for their in difference in retrieval character-istics  , being misleading and producing varying resu lts  . They probably should be used primarily to h ighlight a system's unsatisfactory perf ~ nce  . From the failure analysis of Hooper , King , Lancaster and others , the reasons are : incorrect query formulation , indexing errors , mechanical errors , incorrect screening , etc . 
In the same volume ( p .  139) , Shoffner cc~nented on the evaluation of system , s that " it is important to be able to determine the extent to which file structures and search techniques influence the recall  , precision , and other measures of syste ~ performance " . Not until very recently , file structure and search techniques were apparently iun popular topics among information scientists except Salton and a few others  . Nevertheless , these topics have been attacked constantly by system scientists for a much smaller size of file but the maximt ~ efficiency is a vital factor for the total system  . They are frequently discussed under the title of " symbol table techniques "  , or " scatter storage techniques " as used by Morrisas the title of his article  . In addition to the " number of searches " and the " number of lookups " other terminologies used by the syste~scientist for referencing the most basic measure are the " number of probes " ~ the " number of attempts "  , and the " search length " . 
Ever since 1964 the author stepping into the cemputer profession noticed that the efficiency of a file handling system is always crippled by its file searching technique no matter how sophisticated the system  . This was especially the case during 1965 and 1966 when the author was employed at the Itek Corporation on an Air Force project of a Chinese to English machine translation experiment  . The best search technique used for dictionary lookups was the binary search which is still considered one of the best techniques available today  . 
For a large file with a huge number of records , entries or items , the binary search technique will still yield a substantial number of searches which is a function of the file size  . The typical files are : dictionaries of any sort , telephone directories , library catalog cards , personnel records , merchandise catalogs , doct~ment collections , etc . For example , in a 50 , 0 00-entry file system the average number of searches for finding an entry is  15  . 6 calculated as log2N . This figure will not be very satisfactory if frequent search inquiries to a file are the case  . As a result to finding better search techniques , at least three kinds of search techniques or algorithms are found to be more satisfactory than the binary search  . 
Namely they are : lamb and Ja cobson's " Letter Table Method "  , Peterson's " Open-Addressing Technique " , and Johnson's " Indirect Chaining Method " . 
They have a rather interesting c ~ on feature that the file size is no longer a factor in the search efficiency  . 

II oE FFICIENCY OF VARIOUS SEARCH AIE ORITHMS In order to have a gross understanding of various search algorithms  , six of them are examined and compared in respect to their search effieieneies  . 
i . Linear Search
This is also called sequential search or sequentials can  . 
The linear search of an unordered list or file is the simplest one  , but is inefficient because the average number of searches for a given entry in a N-entry file will be  N/2  . For example , if N = 50 , 000 , the average number of searches for a given entry is an enormous  25  , 000 . It is assumed that the probability of finding a given entry in the file is one  . The average number of searches in a linear search is calculated as: 
SN + 1 or S = _~N 2   2 if N is a large number ? The linear search has to be performed in a consecutive storage area and this sOmetimes causes certain in convenience if the required storage area is very large  . The inconvenience can be avoided by using the last cOmputer word  ( or some bits of it ) to index the location of the next section of s to ~age area used and thus form a single chain for searching  . This variation of the linear search method is called the single chain method  . It differs from the linear search in storage flexibility but is otherwise the same in the efficiency  . 
2. Directory Search
This is also called block search . With the aid of a directory which contains the addresses of every B th entry of the ordered file  , a better result can be achieved because the average number of searches is greatly reduced  . For the best result , choosing the blocking factor B = 220 in the example above , the answer is 223 . 6 searches whihh is calculated as : -4-
N+B2
NBs = 2"--' F-or S=-3~--+--?-3 . Binary Search Using the binary search method will yield a more satisfactory result  . The search starts with the midpoint of the file , and goes to the midpoint of the associated remaining half if a match fails  . The comparison of their values Will decide which half of the file should be tried next time  . This process will be repeated until an~t ch is found  . The average number of searches in the example is calculated through the following formula as  15  . 6 searches : N+IS = ~ log2 ( N + l ) -ior ~= log2N if N is a large number . 
The Hibbard's Double Chain Method and Sussenguth's Distributed Key Method are compatible to the binary search in search efficiency but have a much better update efficiency because of the list -structured address-chaining mechanism  . 
The respective calculations of the example are :
Hibbard : S = 1.4 log2N = 21.9 and
Sussenguth : S = 1 . 24 Iog2N = 19 . 4 4 . Letter Table Method This attractive method as suggested by Lamb and Ja cobsen in  1961 for the dictionary lookup in a machine translation system did not receive good attention for its possible applications in general information systems  . The reasons could be the immediate response to the numerous letter tables after the second level which indicated its inefficiency in storage  , and that no clear search efficiency and update efficiency were expressed  . 
Suppose only the twenty-six English letters are involved  , in theory there are twenty-six tables at the firs ? level  , 262-5-tables at the second level , 263 tables at ~ he third level ~ etc . The number of letter tables will in practice be reduced drastically after the second level because of the actual limitation in letter combination in for ~ Kngavo cabulary  . However , no studies of this sort are available for the calculation of storage requirement to disprove its storage in efficiency  . 
The average number of searches or the expected search length of this method cannot be calculated as a function of the file or dictionary size  . It is simply the average number of letters or characters of a certain language plus one space character or any other delimiter  . For the English language , it is a favorable 5 . 8 searches ( S = 4 . 8 + I ), with no concern of the file size . Its update efficiency is compatible with its search efficiency and may be estimated at less than twice the averagenm n ber of searches  . 
In order to achieve the above efficiency , the letter tables at each level should be structured in alphabetic order  , and every letter should be converted into a numeric value such as A = I  , B = 2 , C = 3 ,   . . .   , Z = 26 and the space delimiter = 0 or 27 through a simple table-lookup procedure . Those converted values would then be used as the direct-access address within each subset of alphabetic letters at each letter-table level  . 
This discards the need for binary search within each subset of " brothers " as in the cases of Hibbardls and Sussenguth's searches  . 
5. Open Addressing Method
As early as 1957 , Peters on introduced this method for random access storage addressing  . This method is also called linear probing . It assumes the existence of a certain hash function to transform the key or keyword of an entry into a numerical value within the range of thq table size which is predetermined as  2 M for any integer value of M . The table size should be large enough to accomodate all the entries  -6-of the file . As in other methods , this method also assumes the probability of finding an entry in the file is equal to one  . 
Under these two assumptions , and if a good hash function is selected for a balanced distribution of hash values  , the open addressing method will resolve the situation if more than one key is mapped into a particular slot in the table  , and yields a very attractive average number of searches in most of the cases  . The algorithm is best described in Morris ' phrases : ' The first method of generating successive calculated addresses to be suggested in the literature was simply to place colliding entries as near as possible to their nominally allocated position  , in the following sense . 
Upon collision , search forward from the nominal position ( the initial calculated address )  , until either the desired entry is found or an empty space is encountered--searching circularly past the end of the table to the beginning  , if necessary . If an empty space is encountered , that space becomes the home for the new entry . " Peterson did some simulations of open addressing by generating random numbers and storing them into a  500-entry table , and the result of the average number of searches from nine different runs is compared with the calculation obtained through Morris ' formula or Salton's formula  ( L is the loading factor or the percentage of table fullness at the time of search  ) :
Llb L
L Salton : S = ~+1-7-
Table I . Average number of searches in open addressing
Loading factor Peters on Morris/Salt on
O .  1 1 . 053 1 . 056 0 . 2 1 . 137 1 .  125 0 . 3 1 . 23 1 . 214 0  . 4 1 . 366 1 . 333 0 . 5 1 . 541 1 . 5 0 . 6 1 .  823 1 . 75 0  . 7 2 . 26 2 . 167 0 . 8 3 . 223 3  . 0 0  . 9 5 . 526 5 . 5 1 . 0 16 . 9 14 It is thus clear that unless the table is nearly full  , the average number of searches will be surprisingly small  . For example , if the loading factor is equal or less than 0 . 9 the average number of searches will be an amazing  1  . 965 . This can be achieved by allowing an extraten percent of the table size  . In this case , its storage efficiency will become less attractive  . However , its search efficiency and update efficiency are excellent due to its extremely low average number of searches  . 
6. Indirect Chaining Method
Since this method makes the same two assumptions as open addressing method and is heavily dependent upon the hash addressing  , a more descriptive name for this method is suggested as Hash-Addressed Indirect-Chaining Search  ( HAICS )  . Other names found in the literature are scatter index tables ~ direct chaining  ( a variation in chaining structure )  , closed addressing ( direct and indirect chaining )  , and virtual scatter tables ( matching additional hashed bits )  . 
The HAICS method uses a structured four-field table  , an additional non-addressable over flow area of the table or a separate  -8-overflow table , and a free storage are a called the available space list  . It is aimed to fully utilize all spaces reserved for the table before using the overflow area and the free storage area  . This method treats the addressable area as end-rounded  , i . e . , the first address of the table is considered following the last address  . When overflow occurs , the nonaddressable over flow area is made available as an extended table area  . This is so arranged to achieve better storage efficiency since in most cases there is no need for the additional overflow area and thus it can be ~ nitted at the beginning or added on when the need arises  . 
The HAICS chaining table has fou=fields : keyword  ( key or data )  , index , link and pointer . The ke > ~ ord field is usually one computer word in size for accomodating symbols which identifies the entry  . The index field should have enough bits in size to specify the largest relative address in the available space list  , so that the variable length entry stored in the available space list could be indexed from this table  . The link field is used to indicate the linkage to the next table address where information of entries of the same hashed value can be found  . The pointer field is designated to contain the address of the first entry of entries with the same hashed value  . Both the link field and the pointer field should have a field length in bits large enough to store the largest relative address of the addressable table area  , i . e . , the size of the addressable table . 
Entries are entered at their hashed addresses first  , and then upon collision allotted to the next ( or surrounded ) empty addresses . 
Their pointers and links are setup for the proper chaining  . When an entry is being looked up , the first step is to check the pointer of the entry at hashed address  , then go to the pointed address and start searching from this beginning entry  . If it is not found , the entry pointed by the link of current entry is searched until  -9-it is found or there is no further link . The latter case indicates that there is no match for this search  . When the entry is found through keyword identification  , the address stored in the i ~ dex field will direct the actual entry storage in the available space list  . The index field and the available space list are needed only if the entries are of variable length so that storage space can be conserved  . In the case of fixed length entries , the available spacellst is no longer needed and the index field in the table should be changed into an entry field with the desired fixed length  . 
A great advantage of the hash addressing is that to update entries in a file requires no sorting or resorting of any kind  . In the HAICS method , to delete an entry is to follow the algorithm until the entry is retrieved  , and then to hoo~up the next entry in the chain to the previous entry  . All the storage previously occupied by this entry is freed for later use  . To add an entry will use the same algorithm to retrieve the last entry in a particular chain and then to set up the linkage to the next empty space in the table and have the information of the added entry stored there  . 
The added entry itself is stored in some free storage a ~ ea in the available space list being indexed in the chaining table  . 
This method was first introduced in 1961 by Johnson and its average number of searches is calculated simply as: 
S = I + -- L factor L is greater than one which means the number of entries exceeds the allotted table size and the information of over flOW entries are kept in the overflow area while entries themselves are again placed in the available space list  . The cost of ower-flo ~ is increased linearly at merely  0  . 9 searches per I00%-I0- increase of overflow . This provision virtually eliminates the fear of over fl cw which frequently causes almost unmanageable difficulties and at very high expense  . 
Before the table is full as in the usual case , the average number of searches of the indirect chaining method is a hard-to-believe  1  . 25 with a meximum of 1 . 5 when the table is about full . 
It is at these two figures and the abovementioned update efficiency and overflow advantage that the author believes some storage in efficiency and programming complexity should be tolerated painlessly  . 
Table 2 . Average number of searches in indirect chaining
Loading factor Johnson
O .  1 ! . 05 0 . 2 1 . 1 0 . 3 1 . 15 0 . 4 1 . 2 0 . 5 1 . 25 0 . 6 1 . 3 0 . 7 1 . 35 0 . 8 1 . 4 0 . 9 1 . 45 1 . 0 1 . 5 1 . 5 1 . 75 2 . 0 2 . 0 3 . 0 2 . 5 4 . 0 3 . 0 - ii-An overview of various search algorithms discussed above is given in the foll ~ ing table : Table  3  . Comparison of various search algorithms ? Average Search method number of SampleSSearch Update Storage searches  ( N=50 , 000) efficiency efficiency efficiency l . Linear search ~25 , 000 PoorGood Excellent search 2B2 ( B=220) 3 . Binary search
Double chain ( H?bbard)
Distributed key ( Sussenguth ) 4 . Letter table method ( Lamb and 3 a cobson ) 5 . 0 penaddressing ( Peterson ) 6 . 1 n direct addressing ( Johnson ) log2N 15 . 6 Good Poor Good 1 . 4 logaN 21 . 9 Good Good Average ( opti ~ a ~) 1 . 24 log^N 19 . 4 Good Good Average
Average 5 . 8 Excellent Good poor number of ( English ) letters per word plus one space
L 1 . 965 Excellent Excellent Good 2 ( 1-L'-"~"+1 ( LS 0 . 9) L+I 1 . 25 Excellent Excellent Average 2 ( L < 1 . 0 )   -12-For most search algorithms not included in the above table  , they are variations and combinations of the linear search  , " single chain , directory search , binary search , double chain and distributed . key aimed at the improvement of a certain efficiency  . For example , the double chain method itself is a combination of binary search  , a variation of single chain , and the linear search , and it is aimed to improve the update efficiency of the binary search  . 
IILKEY WGRDCONSTRUCTION AND HASE FUNCTION It is understood from the previous comparison of various search algorithms that the turning point for the excellent performance in search and update efficiencies is at the hash addressing which is essentially a simple ~ rocedure applying a certain hash function upon a search key or keywrod  . Since the same keyword will always be hashed into the same hash value for table addressing  , the criteria for a keyword selection or construction to identify an entry is the characteristic of uniqueness  . And , in order to minimize the undesired collision upon hashed addresses  , a good hash function should be selected such that it would yield a balanced distribution of hashed values within the range of the table size  . 
I . Keyword Construction
Under the consideration of the programming and computing efficiency and of the storage efficiency  , usually a keyword of one computer word size is more desirable  , e . g . , eight-character keyword in a 48-bit word machine . 
In machine files such as dictionaries , thesauruses , keyword indices , and merchandise catalogs , the keyword is almost readily available for hashing  . If the keyword is longer than the allowable number of characters  , a simple word truncation at the right endor some word compression schemes can be used to reduce the word size to a desired amount of number of characters  . 

For example , the standard word abbreviatiOn , and a simple procedure to eliminate all the vowels and One of the two same consecutive cOnsonants in a word will all be acceptable for this purpose  . 
In cases of author indices and catalogs , membership rosters , alphabetical telephone directories , taxatiOn records , census , personnel records , student files , and any file using a person's name as the primary source of indexing will have the convenience in using the last name plus one space character and the initials as the keyword  . The word compression scheme is certainly appl icable if it is necessary  . 
When title indices and catalogs , subject indices and catalogs , business telephone directories , scientific and technical dictionaries , lexicons and idiom-and-phrase dictionaries , and other descriptive multiword information are desired  , the first character of each non-trivil word may be selected in the original word sequence to form a key ~ cord  . For example ~ the rather lengthy title of this paper may have a keyword as SADSIRS  . Several known information systems are named exactly in this manner such as SIR  ( Raphael's Semantic Info~ation Retrieval )  , SADSAM ( Lind say's Sentence Appraiser and Diagrammer and Semantic Analyzing Machine  )  , BIRS ( Vinson haler's Basic Indexing and Retrieval System  )  , and CGC ( Klein and Simmons ' Computational Grammar Coder )  . 
An alternative to meet the need of the multiword situation but with a possible improvement in the uniqueness of the resulting hashed value is to perform some arithmetic or logical manipulation on the binary representation of the multi-werd  . 
When the multiword is stored in consecutive computer words  , each binary representation of a computer word is treated as an individual constant  . Then either an arithmetic operatiOn ( e . g . , ADD , SUB ~ RA~E~MULTIPLY , and DIrgE ) or a logical operatiOn ( e . g . , AND , OR ) is to be performed on these computer words to collapse them into one single computer word as the  -14-keyword   . The resulting keyword from this kind of manipulation is not human readable but will serve its purpose for has had dressing  . 
In some cases where a unique number is assigned to an entry ~ there is no need to hash this number provided that number is inside the range of the allotted table size  . 
This is mostly seen when a record or document is arranged in its accession number or location index  . Otherwise the number can be treated as letters and be constructed in one of the methods described above  . 
2. Hash Function
The different functions used for random number generations can also serve as the hash function if a likely one-to-one relation can be established between the keyword and the resulting random number  . This is also subject to the restriction that only nmnbers inside the range of table size ace a ceep table  . Frequently this method will not give a balanced distribution of table addresses and thus affect the search and update efficiencies  . 
The arithmetic or logical manipulation described above for handling multiword items can also be used as a hash function  . 
One method called division hash code is suggested by Maurer that the binary representation of a keyword is treated as an integer and divided by the table size  . The remainder of this division is thus inside the range of the table size and is used as the hash value  . As Maurer noticed this method has the disadvantage that sometimes it does not produce indices which are equally distributed  . 
Three methods of computing has had dresses with proven satisfactory results were described very neatly by Morris:  -15-"If the keys are names or other objects that fit into a single machine word  , a popular method of generating a has had dress from the key is to choose some bits from the middle of the square of the key--enough bits to be used as an index to address any item in the table  . Since the value of the middle bits of the square depends on all of bits of the key  , we can expect that different keys will give rise to different has had dresses with high probability  , more or less independently of whether the keys share some coe ~ on feature  , say all beginning with the same bit pattern . 
" If the keys are multiword items , then some bits from the product of the words making up the key may be satisfactory as long as care is taken that the calculated address does not turn out to be zero most of the time  . The most dangerous situation in this respect is when blanks are coded internally as zeros or when partial word items are padded to full word length with zeros  . 
' ~ third method of computing a has had dress is to cut the key up into N-bit sections  , where N is the number of bits needed for the hash address  , and then to form the sum of all of these sections  . The low order N bits of the sum is used as the hash address  . This method can be used for single-word keys as well as for multiword keys  .   .   .   . " All these three method assume one slight restriction that the size of the table has to be a power of two because of the binary bit selection  . Personally the author prefers the first method of these three due to the extremely simple programming involved  . Depending on different machines , the main operation requires about five machine language instructions : load A register with the keyword  , integer multiply with the keyword , left shift A and Q registers X bits so that the desired bits is at the left end of the Qregister ~ clear A register  , left shift A&Q registers again Y bits so that the desired bits are resided at the right end of the Aregister  ( CDC 3600 COMPASS )  . 

If the second method described by Morris is used , the keyword construction for multiword itom can be eliminated if there is no risk of the kind described  . The thlrd method is more interesting because it has the generality of accepting both single-word and multiword itoms but at a slight cost of some more programming which is to be offset by the cost of multiword construction  . 
IV . HAICSDATASTRUCTURE
In response to the needs of search and update efficiencies  , the data structure for the HAICS technique has to be organized in a much more sophisticated way with some additional storage requirement over the entries themselves  . As previously described under the Indirect Chaining Method  , it requires a fixed-size four-field addressable chaining table for bock keeping the keyword and all the infornmtion for the chaining mechanism  , are served free storage are a called the available space list for storing the variable-length entries themselves  , and an added-on non-addressable over flow table area for overflow chainings  . 
The overall HAICS data structure is quite list oriented but it is packed into the form of arrays for a more efficient indexing and searching procedure  . A test program has been written in CDC 3600 Fortran ( a variation of Fortran IV ) for the convenience of adapting to other computers  . The discussions following will frequently refer to the Fortran language and the list structure for a better clarification  . 
I . The Chaining Table
The four-field table can be easily setup as four single-dimensional arrays or as a four -dimensional array at the cost of several wasted bits in the computer word for storing the index to the available space list  , the link to the next table address , or the pointer to indicate the beginning of a chained  -17-sub-list   . The savings are less computer word-packing and unpacking operations  . 
The positions of each four-field table item in relation to the first item  , i . e . , the hash addresses , can be viewed as the main list of the table . The linked entries of the same hashed address are treated as a sublist  . Since the relative position of each table item is identified with its hashed address  , there is no need to set up an address index for each item  . Besides , since each entry can be hash-addressed with an average number of searches at  1  . 2 5 and that most chains are not much longer than one or two entries  , it is not necessary to have a backward link within a chain  . 
The layout of the chaining table is shown in Table  4wi th some sample linkages indicated in hand-drawn circles and arrows  . 

Table 4. The chaining table
THECHAINING TAHLE - -
V ~ LiWKFD ~ nlN-~v ~'1 EARPHONE ~96
ABSOCOO 233 L~ERSR 377
LMERSH ~3~9_~-~ . ._~____'i + _ . u ~ s  ~ .   .   .   .   .   .   .   .   . ~ITMKDNI~TCB_ .   .   .   .   .   .   .  +  .   . 


LAM-DATACIRC : l1~~AeKNOIS , ..
, ~------~ i3CAel NET 14 EME eSMS ~ . 1 5 EMERYOF 16 ~ ACI 11 MAOISAM "1~ EMS lq MASE ~ ~ n ~ MERS l 21 ~ MERSHE__ . ~3J . )TADPI~
AUSORflTN ~6BAFFL ~
F 7   2~ EMEHSAT 30 BABBLE 3\ ] ~ MERSG 32 EMERSHC ~ )  0 0 0  . . . . . . . . . . . . .  0  . . . .
2.910B27 ~0......9 ............
0U0; s350-o40101 . 6  .   .   .   .   .   .   .   .   .   .   .   .   . 
415u04;) 40,,'I0 ~ oIH43: ~00............
36421 ~ r.
3T ~, ~ , , , i ~ ~ . . . . . . . . . . .
3ro . 32.........
11902 ~ nu.3L ........

J , PIII3b ~ q03670o-19-
The four-field table items can also be viewed as four-field notes or cells in a list structured presentation : 
I keyword
An example of the list structured presentation of the HAICS system can be illustrated as follows : Figurei  . List presentation of the HAICS data structure 241  ~- - ~  857 MASS . AVE . 
251261~22Z2S UNSETBULD.~LOS ANGELSICALIF.


2 . The Available Space List 1~is can be a single one-dlmensional array for the best storage efficiency in accomodating variable length entries  . 
The beginning of an entry is indexed in the index field of the chaining table the rela tive position of the beginning computer word in the available space llst  . This is also shown in the examples of F igure I  . The ending of an entry can either be in d icated by a special symbol such as two consecut iveblanks or EOE as the abbreviation of end -of-entry  , or calculated as the entry length and placed at the beginning of an entry  . 
Multi-dimensional arrays are usually wasteful for storing variable lengthent ries  . If the entries are of fixed length then , as described before , there is no need to have a separate available space list  . These fixed length entries can be put directly in the enlarged index field of the chaining table for a more efficient processing  . 
3. The Overflow Table
The overflow table is structured the same way as the Chaining table except that it is not accessable through the hash function  . It serves as an emergency device only after the chaining table is fully utilized and additional storage area is available at that time  . When the overflow table is established to meet the emergency  , its array names and the size are made available to the ~ CS procedure as an extended area for the chaining table  . 
V . HAICSAIEORITIR~SFURSTORING ~ RETRIEVING , UP DATING ~ ANDUTILITY

The logical procedure of the HAICS technique is described in algorithms for easy adaption to procedure-oriented languages such as Fortran and Algol  . Currently , eight comn and s have been implemented and operational on the CDC  3600 test program : STORE , RETRIEVE ~ ADD , DELETR ~ REPLACE , PEINT ~ CCHPRESS , and L~ST . They can beftmctionally classified into three groups : the main algorithms for STORE and RETRIEVE  ; the updating algorithms for ADD , DELETE , and REPLACE ; and the utility algorithms for ~ 3 CGMITRESS ~ and LIST . 

The two main algorithms are frequently utilized by other algorithms except PRINT  . 
These algorithms are presented in detail in the following : 
I . Algorithm STORE(S )
This algorithm is to be used for establishing a HAICS file at the very beginning  . It is assumed that the arrays for the chaining table and the available space list have been set upproperly  , and that keywords and the hash function have been constructed or selected appropriately throughout the subsequent uses of this file  . 
SIC lear the arrays for the Chaining Table and the Available Space list  , and setup proper indices for these tables $2 Compute the hash value of the given keyword , 
I = HASH ( KEY ) $3 If POINTER ( I ) = 0 and KEY WORD ( I )  = 0 , then
KEY WORD ( I ) ~KEY $4 The first available address in the Available Space List  , J , for storing the entry is placed as INDEX ( I ) = J $5 The entry is stored in the Available Space List ( ASL ) sequentially starting at ASL ( J ) and with a special symbol EOE placed at the end of the entry in ASL  , and exit on success . 
$6 If POINTER(I ) = 0 and KEYWORD(I ) 40 , then $7 Search the keyword array downward and end-round until a KEY WORD  ( I ) = 0 is found $8 Set I = POINTER ( I )  , KEY WORD(I ) = KEY , and go to Step $4 S 9If a KEY WORD ( I ) = 0 cannot be gound in the keyword array , a message is given to indicate the overflow of the Chaining Table and then exit on failure  . 
SI0If POINTER(I ) ~0 , then I = POINTER(I)SIIIfLINK(1) = 0 , then go to Step $7 for a KEY WORD(I ) ~ O , upon failure , go to Step S9; upon success , go to Step SI2-22-S12 Set LINK(I ) = I , KEYWORD(I ) mKEY , and go to
Step S 4
S 13 If LINK(I)~O , then set I = LINK(I ) , goto
Step Sll
S 14 Repeat for additional entries starting at Step $2  . 
Examples in Tables 5 and 6 show the result of several stored entries under this algorithm  . 

Table 5. The chaining table after a STORE conmmnd
THECHaI , ~II , qGTABLE--v / ~ Lil (:- ilq !? ?1
KEYwORO!qqEX_LzNKk . ARP , . 4(~ r ~ IC . C .  _~ ,  . ~
A ~ F ; OCO O~3
I"f ~ ERSR 377
Li'4E &! ~ HL 34 o
IATA@.4 Z ~
LA'I29 (!) ATACIRCP 74 u ~ oc ~
Q .,.
6 ~._uleo7u ~ u q
F~E~YOJ3'-)~., ....
C~HINEI
Ef4ER~HS . , r . MERYI)F ~ . hI0, n0n . I ( . J  ~ . . . . . . . .
iNS3~ , ~ VI~:0n~-MI'IRSI 31b , ~ ~1?_n ~ MERSNI-37"UQ
P2~U
Z3UTAL)PD2 b ; 4A~f ) AODIR ;-: , ~ HSOt-~RT q__ . . ~ AFI ~ LF = "~ P ,4 EMER $ AT ~ gJ ~ . /29 Table 6 , The available space list after a STORE command
TEAVAILA , - . ILE $ 1 . .'~CF LIST - -__ _ _ a ~ . . ~_9 . EF_S5 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . li'~F__oR_MAI/_O ~ .  -~  . bATAANtDATAPROCESSINGDICTIONARY , BY JAMESF . WOTRANSN ~"'() ~ . JwLN , ES ~ OF ~: :'( w ~", ~/--'~' ll ' ( AHSOLt . ;TE ADDRESS ) THEIDENTIFICATIO~OFASPECIF 17 ICREGISTERORLOCATIPNI , ~ STORAGE . FOE(ABSOLUTECODIN(~2-~) ~ OUINGIN . , ~ HICHALLA r~i ) RESSES REFER TO SPECIFIC MACHI' . IEREGISTEQ'INTHEIRANS MISSI uI~iOFw~VESOVE ~ RADIOOR wIREPAT ~ SOUE TO COK  . 
? ", . qVI:'RSI() . ,~ INTO HEAT OR OTHER FORe'AS OF ENERGY , INWIRF'TRANS MISSIo57 ~ J , I ~ . .IE i"I~RM I ~ USUALLY APPLIEO ONLY TO LO . ~SOFENERGYINEXTRANEOh50S ; AEUI , " . . EUE ( I ) ? AC~GRE~ATEcROSs TALK FROMAL AR@ENU 7~4M : . .IEw UF JISTURHIi",Ib CHANNELS .  (2)  . UNwA,qTED'r ~ ISTURMINGSOUND .   .   .   .   .   .   .   .   . ~!_~_I !, LACARRIER_O ~ OTHER MUL-TIPJ_ . E- . C~LAJ ~ I~IEL-SY ~ SIEM . -'Eu~4; . J~I-J:'E-~S-UL-T--F-P . Q .   .   .   .   .   . 
~, . . . ) v l THEA ~; , ~wE~/~ , ~ECROSSTALK_L ) RMUTUALINTERFENENCE FRnMD THERCHA' ,  . r  ~ lr . ~ EL ~;, iUE . (~:~j~I--II~(HAC,~( . ~RUUN~NOISE ) THETOTALSYSTEM ~' iOl . ~EINDEPE~1,~hL ) EHT0("THE"P~"~ESt . r ~ CFORAHSENCE OF ASIGNAL . THFSITGN ~ LISNOT 13TO~EI'~CLL~I ) I'UAS PAR TuFIHE NOISE . Eu~ASHIEL OIN~STRuI"\]CTUREORPARTITION ELSE  ( ) TO INCREASE THE EFFECTIVE LFNI3THOF THE . FI~qXTE . R . ', IALITRANS MISS . .( . ) NPATH ~ ETWEEI ~ . TwO___p ~_N ~ . S_ . _A$ . ~EO~_ . TR . ~S~I~ . ~S . IOJ~ . ___137 PAIHHETWEE " . ~ I , wOPOINTS ASFOREX AMPLE , HET vJ , I~NTHEFRONTANDT ~' Iw ~ FHACkoFA ~ , ~ELE CrROACn USTICTRANS DUGER , EOEC . L . ? . j--3~'E, . ; ) UTPMENT--CASE 5 . ~F ~ FSI :; ~, ~ E , Tu HOUSE RELAYSA , ', i\[)OT " . IERAPP'ARATU . ' . ~ . KFy--CASEIN ~ T , ~! AILEO('~ACUSIO~ER-~':; PREMISES , , , TO PER MIT DIFFERENT LI . ~ESTO . THF'I ~) cr ; NTRAL OF~-IL : EI ( ' ) HEC ( ~ NN ~ CTE OTO VARIOUS TELE PHONF STATIONS . 
11"--I-~5TF . ST--~OXCO r ~ IAI,~IIN ~ . .~ F'PARATUS FOR TROUBLE LOCATIO , JANDROUTII~E1w3*~AT , 'JTE . JMNCE . EuEANAS SEMBLY oF ONEOR MOR EcONL ) UCTORStU20\]SIJALLY' . ' ITPIIN hNEI ' . IVt-L(")PIN(~,PROTECTIVESHEATHEI ~' . lSttcHSTRUcIuI = A2l9LARRA(h~E, . AE" . ~ TOFTHFI ~) Iv II . )uAL CONI ) uCTORSASwILLPERMITOFTHE2\]7IP~IS ~ . SLPARATEI_YOF ; ' INGROUPS . EUET HRF~EUNITLENG THSO F_e . , U2~5ST , ', I . .,IF \[) SIG . ", IAL , , , q'IE;, . lTRANSMITTFO,ADASHWILLAU\[qMATI . .C__ALLY_ . BEF .   .   .   .   .   .   . 
.  .   .   .   .   .   . ~33 Ol-ti O . , ,, E ,) 8Y ONEU, . ,iJ . TL . E ~', L~TPIOFSILENCE . TER ~- . IUSE , ') Ir . lRADIOTELEC ~2~, . lApHY . LOE(i ) . PLURALTERMCOLLECTIVELYUSEDTODESIGNAT = ~ , w , 9 MAI'f RIAI_SERVING ASA ~ . ,~ ASIS FOR UISCUSSION , , , MATERIAL ~ IAY DR MAY , ~ b7e . IuT ~ FTECdNICALIN ~' . IAIURE . THESINL ~ ULARoFDATAI'SOATUM . (; ~2t , 5 )  , I ' , JFI ) RMATIOt ~ , PARTICULARLY THAI " USED AS ABASISF nR , ~ EC-ANICAI . 
; I ! nREt_I-_cTRO, . ~ ICC , , ' . ' tPUTERS . FOE . ( IPAIAC . _~UI . T . COJ~cDJJ~II . LAI . 
;'~\] ION FaCILIIY PFR~IIT TING TRAN ? . ; HISSIONOF"INF ( . RMATIf ) N ~ . ~ pI@ITAL~"2M'-)Oq~'4 . EUkELECTRICAL ACCOLNI'ING M~CrlI; . , IE . EoF-,i =, . , af-'I ~ A,'JELECT2") 7ROACO,JSIJ . CTRA~JSUUCFRINTENDE()i : 0, . ~ECLOSELY COUPLEP ~"' ACOUSTICALL3(' . r - . , Y To TFI : a ~ .  ,  . EUE(EMERGENCY MEUICAL ~ ERVICE ) wN rAIN ~ , EBB 31 "~- ,  . ~Sh ~' oE ) ~ . I, . . , I~ , ,a"'I~(L~'IFTRSON A T)IO08 RUTLEOGE , 258-~'SBI . EOE .   .   .   .   .   .   .   .   .  3 . ~'1(E'AER'~L ~' . , CHE'S d ) b314 MAIHE '~5 R~_M__It ) DLETO hIt2 ~ B~_SZ~v6 .   .   .   .   .   .   .   .   . FOE3~'9 ( EMERSO , IGAi'L), . .?2;'~ I . AKElA~PL , I , 25?-6916 . EOE(EMERSON MARLAN r'~337S ) 534-, ~ ILI . TtHJl ) R , 233-Ob32 . EOE ( EMFRSONI . .,ApRY H JR~626 ": I ~ . % FSCHLA , 249-3~ . Q . ,~ . EOE , , , , % . ,~ ( E , ~IERSONHARRY LMRS ) 231 ~ , CHALET ": Ib3r ~ ARI)E~ISRU * 2 . ' ~- bO6T . EO ~ . ._~I"rJ---,III"(EMFRSON HUGH CInO4 . TC)~PM~INSD q3r~I , ;~2, ? . -I~H . EOE(E,'FE"RSONIDAMRS)~,\] . 9 JEAN * 2 . ~6"~I@~ . 
I (", 9 Erie ~ . t : . ~ IL'RSUNRICHAPUE ) 161f ) CAMERONDR~2 . 3B-_I~ . ~6~, . . EO ~ .   .   .   .   .   .   . 
3 . -,5 ( EMERY AiRFREIGHTCORR ) 5300 SHO ~' . ~ ELLAVMIL w--MI~SNNO . ,255-831P . 
393  . r ~ OE " ( EMFRYOAN . ~ ELJ)5P'2 . STATE , 2sb-33GS , EOEQ . U\](F  ~ ERYr , . .~i'~A F)2 . S UbMCDIVITTRL ), 25b-12(') 4 . EOE4, ? . 5 ~ 33-25-IIT , ~, ~ sbr ~ Al . .~ I . JI:-J)ICATEORI@INA ! . ING CALL SANIJ_J ~ US~_J-I~tE . S . -  .   .   .   .   .   .   .   .   .   .   .   . 
2. Algorithm RETRIEVE(R )
With a given keyword , this algorithm will retrieve the entry which is associated with keyword under the same assumptions made in Algorithm STORE  . 







Compute I = HASH(KEY )
If POINTER(1) = 0, exit on failure.
If POINTER(1) ~0, then I = POINTER(l)
If KEY WORD(1) = KEY , then J = I ~ EX(1) , move the entry in ASL starting from ASL ( J ) to a working area untllan EOE is encountered  , and exit on success . 
If KEY WORD(1) ~ KEY , and if LINK(X ) = 0 , then exit on failure . 
If KEY WORD(1) ~ KEy , and if LINK(1) ~0, then
I = LINK(X ), go to step R4.
Repeat for additional entries starting at
Step RI.
Examples in Tables 5 and 6 will also illustrate this algorlthm in actual applications  , The execution of the RETRIEVE command will not change the contents of the Chaining Table and the Available Space List in any event  . 
3. Algorlthm ADD(A)
This algorithm is used when an add it lonal or new entry is put into the already estab lished HAICS file  . It is an operation of " adding " an entry to the end of a chain of its hashed address  , rather than breaking up the chain and " inser ting " the entry according to some order or h ierarchy  . This is so because each chain in the HAICS fi le is mostly very short with only one or two entries and the " inserting " will gain very little in search and update efficiencies  . 

This algorithm is different from Algoritl~nSTORE in that no clear-up operations are performed on the arrays of the Chaining Table and the Available Space List  . In addition , a relative address in the Available Space List is accepted as the first available address to stere the added entries themselves  . 
A 1 Set J = the given first available address A2 If J ~ size of ASL , go to Step S2 in Algorithm STORE and return to Step A4 upon exit from
Algorithm STORE
A3 If J > size of ASL , exit on failure.
A4 Repeat for additional entries starting at
Step A2
Tables 7 and 8 exhibit the results of the ADD command of some new entries upon Tables  5 and 6  . 
-27-_ , _ -  . _-" Tabie 7 . The ~' i . i ~ g table after an ADD co~md
THE CHAINING TABLE'--.....
~ ALU~-KEY WORDT NUEv LTNK POT MTFQ
A ~ SOC~OZ3~-~\["3EMER$R377 O0 .   .   .   .   .   .   . 
EMERSHL 349 O&
UASH ~2Pb
OA-TA2430\]n l EHERSHH 34 ~ OT .   .   .   .   .   .   .   .   . 
EAH 291 u8
UAT ACRC27R09_11E . ERY oJ ~9 ~ .   .   .   . on .   .   .   .   .   .  ~ ~ - ~ 9~ 13 ~2 \ ]3  .   . CABINET 151   0   14   1~ EHERS H5   335   15 ~ OF ~ 0 n " ~ ~ ~ ~ o ,  '~ '~ ~ . , l ~ ~ ~ . __-~-----'" TT-'r''~--'-'~'l EMERSI 36A ~ I .   . , ~/ Sf_ . Z3 . . . . . . n 25---- ~3
P ~ ABSO AODR 11   28   P4   ?5 AHSO~BTN 37 U 32   26 BAFFLE 11q   0  ~  27 CABLE 190   31   27   ~8 ~ MERSAT 315   ~9   1 
P 9 ~ MERSGB 3~\ ] n 3   39 BAB BLEb ~ 0   30   31 EMERSG 329 o 15   . 
3 ~ EMERSHC 357 0 0
I-28- .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . T----Cable 8 . Chesva?1 abZespace 11 starter-an ADD colm ~ and .   .   .   .   .   .   . 
-THEAVAIL ABLEs PACELIST--
ADDRESSINFORMATION 1 DAT ATR ANS MISSION AND DAT ApRB . CESSINGI . DICTIONARY ~ BYJA . MESF ~ HO .   .   .   .   . 9 LMES--FOE ( ABSOLUTE ADDRESS ) THEIDENTIFICATIOHOFASPECIF 17 ICREGISTERORLOCATIPNINS TO RAGE oE OE ( ABSOLUTE CODING .   .   .   .  2 . ~ F ~ ODI~GIN wHICH ALL ADDRESSES -- REFERTO-SPEcIFIC MACH~NE--REGISTE  33 RSAND MEMORY LOCATIONS ? EOE ( ABSORPTION ) THELOSSOFENERGY 1   41N THETRANS MISSION OF wAVES OVERRADIOOR wIRE PATHSDUETOCON A oVERSION INTOHEATOROTHER FORMSOFENERG y~_!N~RLTRANSM ~ O-  -57 N , THETER MISUSU At . LYAPPLIED ONLY TOLOSS OFENERGYINEX TRANEO 6~ U ~ HEDIA , EOE (1) , AGGREGATE cROSsTALK FROMA_LA ~ G\[~___ 73 MRER OF DIST URBING CHANNELS , ( Z ) , UNWANTEDDISTURBINGSOUND 81S INACARRIER OROTHER MULTIPLE CHANN FLSY STEM WHICHRFSULTFPn  ~9 MTHEAGOREGATECROSS TALKOR MUTUALIN TERENCE FR o MOT HER CHAN  97 NFLS . FOE(BACKGROUNUNOISE ) THETOTAL_SYSTEM . NQIS ~\[ . ~ PEN 105 DENTOF THE PRESENCE ORABS ENCE OF ASIGNAL , THE SIGNALIS NOT 113 TOBEIN CLUOEDAS PART OF THE NOISE . FOE . _ASHIELDI ~_S % RU IZ1CTUnE O ~ PARTITIONUSEDTOINCREASE THEEFFECTIVE LENG THOFTHEE  129 XTERNAL TRANS MISSIONPj ~ HBETWEEN TwOPOINTS AS FORTRANS MISST n ~  1  . 3 7 PATHBETWEENTWOPOINTS ASFOREX AMPLED BETWEEN THEFRONTANDTH  1~5 EBACK ( ) k A ~ ELECTROACDUSTIC TRANSDUCER . EOE .   .   .   . EQUIP . M~NT . -CASE__ 153 DFSIGNED TO HOUSE RELAYS ANDoTHER APPARATUS . KEy--CASEINS Tlbt ALLEU ONA CUS TO MER , SPREMISES , TO PER MIT DIFFERENT LINF . S ~ THF__I ~ qcENTRAl . OFFICE TOBEcONNECTED TO VARIOUS TELE PMONF STATIONS  ,   177 ITHASSIGNALSTOINDICATEORIGINATING CALLSAND BUsyLINES  . 
IRSTEST--~UXCONTAINING A PPARATUSF ORTROUBLE LOCATION AND ROUTINE  193 ~ AINTE~ANCE . EOEANASSEMBLYOFONEOR MORE_CONDUCTQ~SpU 2D1 SUALLY WITHIN ANEN VELOPING PROTECTIVE SHLATH , IN SUCHSTRUcTURA 209 LARRANGEMENTOFTHEINOIVIDu ALCONDUCTORS ~ S WILLP\[RHI~_~_~---  -717 IR . US ~ SEPARATELYORING RUUPS , EOETHREEUNITLENGTHSOFSU ~25 STAIr WEll SIGNAL ~* HENTRA_N~TTED oA DASH WILL AUTOMATICAL LYRFF  ~33 OLLO~EU~Y ~ NEU~ITLENG THOFSILENCE . TER MUSE ~ INRADIOTELEGD ~41 ApHy , EUE (1) . PLURAL TERMCOLLECTIVELYUSED TO DESIGNATE ~49 MATERIALSERVING A NGASABASISFOROZS CUSSIONt* MATERIAL MAY ORM Ay  ~57 ~tOTBETECHNLCALINNATURE , THESINGULAR oF DATAISDATU ~ . , . ._X~_ Z65 ) , INFO~MATION o PARTICULARLY THATUSE DAS ABASISF ~RME CHANICAL  ~73 ~ RELECTRONIC COMPUTERS , EOE . ~ ACI~T ) COMMUNICAT 2R \] ImqFACILITY PERMITTING TRANS MISSION OF INFOR MATION IN DIGITALF  ~90RM   . EOEELECTRICAL ACCO~!NTING MACHINE , EOEAN . ELECI__ ~97 HOACOUSTICTRANS DUCERINTENDED TO BECLOSELY COUPLE ~ ACOUSTICALL  33~ Y TO THEEAR . tOE(EMERGENCY MEDICALs ERVICE ) ?5 WMAIN . o ~ 313-q5 67 , EOE ( EMERSONAT ) IOOBRUTLEDGE o2BO-25~7 , EOE 3~\] fFMERSO~\]CMAS B~531~ MATHF~~D M/nOLFTnN~3A-~7?~  . EOE329 ( EMERSON@AIL ) ~2' CAKEL AWNPL , 257"691@ . EUE ( EMERSON HARLAND 337 . S ) 53AHILLTOPDR~233-0632 ? FOE(EMERSON . H ARRYHJRiiG~6~#5ESCHLA~2~9-3~#8~FOE ( EMERSON HARRyLMRS ) ~31 ACHALET_ . 3b  ~ . GARDENSRD~3H-b067, FOE . ( EMERSON HUC~d_C . )3~OA . ~Ot4P~KZ~Dg . -361  , 222-IA3 ~ , FOE ( EMERSONIDAMRS ) 419 JEAN , 256-~I ~ , 3 fi9E~E(EMERSONRICHARDE ) 16\]0 CAMFRONDR . ~3H . I~6FOF3 77 ( EMERSON ROONEY ) O2b6ELMWOODAVMIODLETON~3B-B7b9 , EOE3 ~5 ( EMERY AIRFREIGHT CORp ) _5300 SHO WELLAV . MILW--MDSN_N 0 . ~5~-~12 393  . EUE(EMERyDANIELJ ) 52 ZSTATE o25~>z . , ~3305, EOE4, . I(EMERY bONAF ) ~ B , ) 6 MCDIVITTRD , ~Sb-128#~EOE~MA oISo ~ ADJUSTM~0~ENT-SYSTEM ) 303 PRICERL , 23 B-26 16 , EOFI ~-- ) ~ ( MAI~JL~O~ACCEPTA?17 NCE CORPINC ) I201 WBEL TLINEHY .  257 . .~1n91 . ~ ~ F~/CJ"~'t MADI~a4~5LMAMRS ) 3256 MILW ,  2~4-7831 . EOE~IMADISO NAI~~SE~RVICE ) 330 ~33~= NRRT MSTOUGH TONRD ~ ~9-~78 , EUE--29-4 . Algorithm DELETE ( D ) This is used to delete an entry from the HAICS file  . 
This algorlthm is heavily dependent upOn the Algorithm RETRIEVE but instead of just retrieving the entry it traces hack and de letes the entry Itself from the Availab le Space List and all the pertinate info rmation in the Chaining Table  . 
DIGo to Step RI in Algorithm RETRIEVE , return to Step D2 upon exit on failure from Algorithm RETRIEVE  , or return to Step D3 upon exit on success from Algorithm RETRIEVE 
D2 Exiton failure.
D 3 Clear up the occupied section of the entry in ASL including the special symbol EOE at the end of the entry 
D4INDEX(1) = 0 and KEYWORD(1) = 0
D5 If POINTER(1) = I and LINK(1)-0, then
POINTER(I ) = O , exit on success.
D6 If POINTER(1)-I and LINK(1) ~ O , then POINTER(1) = LINK(1) , LINK(1) = 0 , exit on success . 
D7 If POINTER(1) ~ I and LINK(I ) = O , then trace back the previous link which contains I and set it to zero when it is found  , other-wise trace back the origlnal poin ter and set it to zero  , exit on success . 
D8 If POINTER(1) ~ I and LINK(1) ~ O , then trace back the previous link which contains I and replace it with LINK  ( 1 )  , exlton success . 
D 9 Repeat for additional entries starting at 
Step DI.
Sample results of the DELETE command executed upon Tables  7 and 8 are shown in Tables 9 and 10  . 

Table 9 . The chaining table a ? tera DELETE conmmnd @
THECHAIN IN O
VALIJ ~
TAHLE - -
KEYWORDtNDE ~
EARP+4ONE ~9 ~
AHSOCOU ~3
EMERSR , . JT 7
L,N~~n ! ~ TFo .   .   .   .   .   .   . (; EMERSHL 349 q\]I+CAHINET 151 , ' l16 EMERSHS 335' . _1 115 EMERYDF ~ oI u1l ~'4 ACl~15,, .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . t .   .   .   .   .   .   .   . ~ z .   .   .   .   . _+mmi-~_am .   .   .   .   .   .   .   .   .   .   .  ~  .   .   .   .   .   .   .   .   .   .   .  ~ . 
+  , + FMS9 MASER43 ~0 ~ , CMERSI 364 ~ l21 LMERSRE 37 , E ; a ~ HAS 41 . n 70 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .  2_3_  .   .   .   .   . __~___TADP_~L ~ .   .   .   .   .   .   . _ t .   .   .   .   .   .   .   .  ~5  .   .   .   .   .   .   .   .   .   .   . 
~4AHS ~ ADO ~~' ~ . ~ ABSOR~TN--dAFFLE ~-'~7 ~ Z~Z ~?- . II ~ 28 ~ ME~SAT ~9 EMERSCH 31 EMERSG 3~ EMERSHC "+-++ Pc . 
+,,+,,,:,,.++;,.+,+....++9..+'I~+o?1

I+,.............
h16 . . . . . . . . .


JO ~ 0I + 3r + ~3 it , +3~90 . 15++3570-31-Table I 0 . The available space list after a DEI ~ command 
THEAVAILABLES PACELIST--
AOORESSINFOR MATION lDAI'ATRANS MISSION ANDO~TA PROCESSING OICTIONAR ytByJAMESF  , HOqLMESEOE ( ABSOLUTEAOORES StTHEIDENTIFICATION OF ASPECIF .   .   .   .   . 
17 IcREGISTERORLOCATIPNINS TO RAGE , EOE(ABSOLUTE COOINGZ5) cO01 , ~GIN wHICH ALLADD RESSES REFER TO SPECI~CMACHINE REGISTE  33 R . ,: ; ANDPEMORYLOCATION SoEOE(ABSORPTION ) THELOS ? ; OFENERGyI~lNTH r_rRANS HISSIUN OF WAVES OVER RADIOORwIREPATHS DUETOCON  ~9 VER : ~ IONINTOME Al " OROTHER FOR MSOFENERG y . IN ~ IRETRANSHIS $ 10__57 h , THE rER~ISUSUALLY APPLIED ONLY TO LOSSOF ENERGYINEX TRANEO  65  . USHE a ) I4, EOE(It . A GRREGATE CROSs TALK FROMAL ARGENIt 7 ~ qEPOFOISTtIRHING CHANNELS ,  (2)  . UNWANTED OISTURBING SOUND 8 SINACARRIER OROTHER MULTIPLECH ANNELSY c ; TEMWHICHRFSULTFRI3~9~THEA~RE ( ~AIECROSST ALKOR MUTUALINTERFERENCEFRnMOTHER CHAN  97 ~ JFI . .~ . P_DE ( UACKBROUNUNOIS Et THETOTALSYS TEMNOISE IN DEPEN lu50FT_NI OF THE PRESENCE ORABS ENCE OF ASIGNAL . THESIGNALISNOTI~TqHE"IVCLLr ) EOASPAR To FTHENOISE . EUEAsHIEt . DINGSTRUIE\]CT = JR  ~ . ~OWPARTITIONUSFr ) TO IN CREASE THEE FFECTIVE LFNG THOFTHEE?1 , 37 PATHHEIWEEN TiePOINTF ; ASFOREX AMPLEIHET ~ EENTHEFRONTANDTNI~E HaCk  , OFA~IELECTROACOUSTIcTRANS DUCER , EOEE(~UIP MENT--CAS Et S"~D~'SI ,  . 3 NEOTOMOUSEREL AYS ANDOTHER APPARATUs , KFy--CASE INST 16) ALLE . ) ( . iACUSIOHER#SPREMISES , TOPER MITDIFFEREM TLI~vES TO THE Ib'~CE~I'R~I OFFICE roHECONNECTEOTOVARIOUS TELE PqqNr STATIONS  , l@5TE~T--~OXCOIqFAJ , NING ~ PPARATUSF ORTROUBLEL OCATIO , ; AND ROUTINF p l7 ITHREEUNT rLENGTHSO FSU ?33 OLI_ , ); ~ F_Or~Y(\]MEU , ~ITI . EN(~THOFSILENCE . TER ~; USERINR ~ D ~ OTELEG ~( . - ~ r:Z)ATA~73 It L)A~AC~CUI . TLCILM 4 , J  ~ T - , ~ M~IIn , ~F ~ CILI rYPER MITTING TRAN . ~ MI$SIONOFINFOR MATION IN OIGITAL ~,, OHM . EOELLECTRICAL ACCOUNTING M~CHI , ,IL , EOEAf WELE CT2 w7NnAC . OflSIICIRANS DUCERINTEN uELTO~FCLOSELYCOUP lE ~ACOUSTICALL  3~  , 5Y " fOTHEEAR , t'?)E(EMERGENCY MEUICAL ~ ; ERVIC Etp5iMAIN o?S5-~\]3-~5h7 . EOF"(EMERSONATIIO08 RIJTLEOGE , 2~6-~S~7 , EDE)2Q(FMERSUNGAIL ) ~ LAKEL AWNPL~E . ~?-6916, EUK ( EMFRSONHARLANp 337~)53# . HILlT ( JP1) w , 233-0632, . EOEI (') ~ dE = Cff'/~lr//'? , * , 5 ~( EMERSONHARRyLMRS ): a3\]4 CHALET 353" r . aRDE~Rt\]~23~-b:=67 , E0E(EMERSONHUGHCtt00ATOMPKINS 13R30\] , P22-1 , ~3 ~ w . EUE(EMERSONIUAMRS ) ~ I9JEAN , P56-H~, . _~_~ . FnE .   .   .   .   .   . ( EM~~RDE 1610 CAMFRONOR . p3H . I~p ~ FOE ~77 , ( , F ' EQSO ~ , pOL ) NEYIh ~( ~ ElMwOOnAyMIDD'LETON , ?3H-57691 ~ EOE ~ . t1(EME-RYhO ~, ~ AF)ESOb ~ CDTVITTRD , 25b-EB ~ . EOE(k ~ ADISON_ADJUSq , ; ~ OE~'ITSYSTEM ) 303 PRICE PL~23B-261b , EOE ( MAoISONACCEPT/~~1~7 ~ ) R_~'_NI~C ) 1201 W~F/TLNFHY , ~7-1 ngl . En Et M~-;JISA ? ~5L- , IAMRS ) 325 hMILw ~24~-7831 , EOE(MADISON AIRSERVICE ) 330 ~ , J . ~? NORTH"~TII~GHTONRD ~ ~9-(~78 . EOE-32-"\5 . Algorithm REPLACE ( RP ) This is for the replacement of an entry itself in the Available Space List with the same keyword and linkages in the Chaining Table unchanged  . Replacement entries longer than the original entries can be treated in a few different ways  . 
The current algorithm will truncate the excessive end and give a message to indicate the situation  . A remedy if desired then can be made through the deletion of the incomplete entry and the addition of the complete entry as a new entry  . This algorithm will make use of the Algorithms RETRIEVE and STORE to find the desired entry and then replace the old contents with the new contents in the Available Space List  . 
RPI Compute I = HASH(EEY)
RP2 If POINTER(I ) = O , exit on failure.
RP3 If POINTER(I ) ~0 , then I = POINTER(l ) RP4IfKEY WORD(1) = KEY , then J = INDEX(I ) , clear the old entry in ASL starting from ASL ( J ) and including an EOE RP5 The new entry is stored in ASL starting from

R P6 If the new entry plus an EOE can be accomodated in the old space  , exit on success . 
R P7 If the new entry plus an EOE cannot be accommodated in the old space  , then store the new entry up to the same length of the old entry and put an EOE at the end  , exit on partial success . 
RP8 If KEY WORD(1) ~ KEY and LINK(1) = 0 , then exit on failure . 
RP9If KEY WORD(1) ~ KEY and LINK(1) ~0, then
I = LINK(1), go to Step RP4.
RPI0 Repeat for additional entries starting at
Step RPI
Table i i will display the changes rode through the use of this algorithm upon Table  i0  . 

Table II . The available space list after a REPLACE command  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . 
TWE AvAILAHLE SPACELIST--
Ar)o_Rt " SSXNFORMATtON
ID ~ TATRANS MISSION A NUD AT APROCESSING DICTIONAR_y ~ BYJAMESF oNO_  . 
gL , ~ESEOE ( ABSOLUTEAOD RESS ) THEIDENTIFICATION OF ASPECIF 17 ICREGISTERO~LOCATIPNINS TO RAGE~EOE ( ABSOLUTE ?001 NG 25 ) (~ OOING IN wHICH ALL ADDRESSES REFER TO SPEcIF-I ~C MACHINE REGISTE  33 P ~ AND '4EHORY LOCATO ~ N , EQ ~_~( ABSORPTIUN ) THELOS ~ ; OFENER@Y!HImNTHETRANS HISSION OF wAVES OVER RADIOORwIREPATHSDIIETOCON w~VERSIO~i\] NT  ( JHE ArOROT HER FOR MSOFENERG y , INWIRETRANS MISSIo5 7N , THETER MISUSUALLY APPLIE OONLY TO LOSSOF ENERGYINEX TRANEO  h5 tJS ~ IL ~ , I-OE(I ) , AGGREGATE cROSs TALK FROMAL ARGENU7 . 3 MR~ROFI ) ISTURBING CHANNELS ,  (;~) , UNWANTED r ) ISTURBINGSOUN r ~ ~ I~INACARRIE ~ OROTHER MULTIPLECHANNEL SYSTEMw HIcHRE SULTFR flHQMTHE AGGREOAIECROSS TALKOR MUTUALINTERFERENCE FRnM OTHERCHAN  g7 NCLS , EUE ( dACKGROUNUNOISE ) THETOTAL SYST FMNOISE IN nEPENI ; :' . , DF'NT UF : THE PRESENCE OR ABSENCE OF A SIGNAL , TH~SIGNALIS NOT 1J3 in BEIr-~CLL ( )ED AS PART OF 1HE NOISE , EOEaS ~ IELOINOSTRIJIPICTUREO ~ PARTIUN USEI  ) TOINCREASE THEEFFECTIVEL FNG THOFTHEE = I~9 XTE~:~aLTRANS MISSION PATH__~ETWEENTwO ~ . AELE~RaNSHISS XOM ~37 P~THHET wEE'JTWOPOINTS ASFOR~XAMPLEoBETWEEN THEFRONTAND TwI~EHE~CK  ( ) F AN ELECTROACOUSTIC TR~NSOUCERoEOE EQUIPMENT- -CaSEIS  . ) I . ) ESI~E e ~"\[(\] HOUSE RELAYS AND OTHER APRARAFUS , KEy- . CASEIN . ~ Ttb ! ALL Lu , _h , ~ACUSTOHER = SPREMISES~TOPERMITDIFFERENT LINESTOTHElb  . ; . C , ENFH , ~LOF FICE TO BECONNECTED TO VARIOUS TELE PHONF STATIONS  ,   .   .   .   .   .   .   . L/7IT_~A . ~__ . SIbI'~LS_LUINOIC_ATE . ( LR . LGLNAUL_NGGA~L3_ANDHUCyLIbeL,_\]~ . ~ TESI-- , ~OXCONT AINING APPARATUSF ORTROUBLEL UCATIO . ' ~ ANDROUTINF \] ~ . ~ uAIN rE'lANCE , EOE~1~17 THRFEUNITLF . NGTHSUFS~i2~% STAINE h SIGNAL , WHENTRANSM_I\]"\[E~AH_W\]J_~jEU . \]'( JMJLT ~ C_ALL_Y__~______ . )3301 LO .  #E ho YONE LINITLF . NGTHOFSILENCE , TER ~ U SeDINR'O IO TELEGR 241 APMY , EOE ~57 ; 65 ~ HI lf ) NFACILITY PERMITTING TRANS MISSION OF INFOR MATION INOIGIT ~  , L ; ~ qOPH , ~ OEELECTRICAL ACCOUNTING MACHINE , EOEANELECT~97~nACO=ISTICTRANSI ) UCERINTENDED TO HECLOSELY COUPLEn ACOUSTICALL "4~2~ Y T i ) T  ~ . : EA~c , WEUE ( EMERGENCY ~ EIIICAL 5 ERVIF . E ) ~ W . . . M~IN ~> . ~ ( '~ 3\] . : . ; I-~5h7 . ~ OE ( , B/'-= . ~ I',ITEMERSO~AT ) 1~34R~/TLE oGE,\] . . . .2~3-~'5#,7~ , EOE  ~ \ ] . tFHI-RSU~CHASI~tS~l&MATHEWSI ~ ; 1MII lf)IF'T ( N . ;~'aR . r ~77/ ,, EOE~P ~' ~ EHERSO . ' . ,  , GA ~ L ) 22 ~ LAKEL AWN RL~2a-Z ~22 , EOE~MERSONHARLAN ~337 S ) 333 r ~ ILLTOPDR , 333-3333 , EOE ~ .   .  - - - - '" ~,~ . ~--( EMERSONHARRyLHRS ) ' ~3\]4 CHALET 35: , 1 AAROENC ; Rt ) , ~'3 , 1")-bqb7 , EOE ( EMERSONHUGHC ) 100* , TOMPKINS Og3 ~ I , 722-I # . ~, CUE(EMERSONIOAMRS ) #19 JEANt~56-wI2~;, .   .   .   .   .   . 3h , 4 F ' nEIFMF-R ~ LQNHI ( ~ HARI ) F ' ) lkll CAM~ROI uDN=PIH . II ~ K . , EOE ~' (7 . ( FMERSO ~; ROI ) NEY ) b~b ~ ELMWOO\[)-AvMIoDLETON , 23~'5769 , "EOE~l:1(EMERY , _ ~ ONAF)~50bMCDIVITTRD~56-I2 64 , EOE_(MAJ)_ISON . AOJUST_~ .   .  ~ ~'~9 @~ . ~TSYSTEM ) 303 PRICE PL~23B-E61b , EOE(MAr ) ISON ACCEPTA_~ . ' fN rEcO w~I~cJl ~ OlwRFITLTNEHY , ~ S7-1091 . r ~/ Manic & ~ SLMAHRS ) 3? . SbMILW , 2 ~4-783 I , EOE(MADISON-AIRSERVICE ) 33OS TOUGH TON .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . ~33~NORTHROt2~9-b~78, EOE-34-6 . Algorithm PRINT ( P ) This is a simple algorithm for a utility function of arranging information in table form and printing out of the chaining Table and the Available Space List as those of 
Table 4 to Table 14 in this paper.


P2 Print
P3I = Itable
P4 Set J

P5 Print

SetI = I and print titles for the Chaining I , KEY WORD(1) , INDEX (1) , and POINTER(1)+i , repeat Step P2 until the end of the is reached = I and print the titles for the Available 

J , and ASL(J )
J = J + i , repeat Step P5 until the end of the Available Space List is reached  , exit on success . 
7. Algorithm COMPRESS(C )
This is an algorithm designed to serve as a " Garbage Collector " in the list processing languages for better storage efficiency  . In practical applications , the Available Space List is a huge free storage are a which can be on a secondary bulk storage device Such as a drum or disk for random access  . After several updating functions performed on the HAICS file  , there will inevitably be some space groups residing in the middle of the used portion of the Available Space List  . And eventually it will reach a situation that the end of the Available Space List is reached but with many space groups scattered in the middle  . 
To remedy this situation , a periodical operation of the C ( R 4PRESS command is desirable to repack the Available Space List for a better storage utilization  . Many strategies or hierarchies can be used to achieve this purpose with some variations in computing efficiency  . The current algorithm starts with the last entry in the Available Space List and moves it to the first accomodatable space group found from  -35-the beginning of the List . The process is repeated until all the aceomodatable space groups found are filled and thus a large space group is accumulated at the end of the Available Space List for subsequent additions of n ~ entries  . 
CISearch for the largest INDEX(1) in the Chaining
Table , then set J = INDEX(1)
C 2 Count the length of this last entry in ASL starting at ASL  ( J ) until an E0~ is found C3 Check an internal table of space groups in ASL to find an accomodatable space group such that the number of spaces in a space group is greater than the length of the last entry  , go to Step C6 if it is not found , go to Step C4 if it is found C4 Move the last entry to the space group found , go to Step C5 if some spaces are left unused , otherwise exit on success . 
C 5 S to reinformation of the space group to the internal table  , exit on success . 
C 6 Search ASL from its beginning for a space group , go to Step CI0 if it is not found , go to Step C7 if it is found C7 If the space group found is accomodatable , then go to Step C4 , otherwise go to Step C8   C8 Store information of the space group found to the internal table  C9 Search ASL continuously for a space group , go to Step CI0 if it is not found before the search reached the original location of the last entry  , go to Step C7 if it is found
CIOEx it on table not compressable.
CII Repeat for additional compression upc~exit on success by entering at Step CI  . 
A sample result of the COMPRESS algoritlrm upon Tables  9 and ii is shown in the following Tables 12 and 13: i -36-Tab le 12  . The clm?ningtabie after a C01~R~P~E~c--o~nand 
THECHAINING TABLE - -
VA_L.UE......~F.~Y_~0HO
IB2 e ?............... J ?.3
P41 EARPHONE
ABSOCOU3 LMERSR
EMERSHL
INDExIvNK ze ~ . o ~77 . .(Z ~:~ 17 o # 3~9 0 5 .   .   .   .   . )_I2ASL_2?2--0b00
FAM ~919 UAT ACIHCdT ~..
I0 n 0
U ~ Qi~dACKNnIS 99 lJ 13 CABINET 151   15 LMERYDF 16 MACI 17   .   .   .   . _MAD~t5AM~t"~nA--~'~, . ~,,' A~_n_
EHS : 30~~
L~ERSI 21
EI~ . ERSHE ~78~~'2~__ . OTADPF ! . I .   .   .   .   .   . ~___2 . _b_
ABSOAUOH\]I2G
AHSORHTN 37
P6BAFFLE 119O
P 7028 . EMERSAT 315   30   I:JAHt3LE   6R   31 EMERSG 329   32 EMERSHC 3#2 

P0 P0 .   .   .   .   .   .   .   .   .   .   .  ~  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . 
0 o . . . . . . . 16 ~ J - - 19 b_ . . . P 3
P#u_3 ~. ...
P60-.-~i.....
0 nn 30..... ~ S.......

Table 13 . The available space llst after a COHPRES Scccmu and 
THEA ~ AILASLE SPACELIST--___A_0\] ) ~ESSINFORMATION\]DATATRA~wSHISSION AND DATA PROCESSING  01CT!oNARy   , By JAMESF ~ HO . . . . . .
LME$LOE ( ABSOLUTE ADDRESS ) THE IDENTIFICATI0~ OFASPECIFITICREGISTEROHLOCATIPNIN STORAGE  , E ~ E____~ABs OLUTE_C ~ J ~ . I~_ . 
~5  ) CODINbIN wHICH ALLADD RESSES REFER TO SPEcIFiC MACHINEREGISTE  3~ P ~ AND MEMORY LOCATION $ ~ EOE ( ABSORPTION tTHEIDS ? OF?NERRY ~ INTHE IRANS MISSIONO FwAVE SoVER RADIOOR WIRE PATHS DUETOCON  4@ VFRSION IN TO HEATOR OTHER FOR MSOFENERGY , INWIRETRANSNi$~IO_b7N , THETER MISUSUALLY APPLIED ONLY TO LOSSOF ENERGYINEX TRANE o  6~ U ~ ME t ) IAoEOE ( 1  )   . AGGREGATE cROSs TALKFR o MAL ARGENU 73 M ~ ERO FuSTURHING CHANNELS .  (~)  , UNWANTEDDISTURBINGSOUND~?SI , ~ ACARRIER OROTHER MULTIPLE CHANNEL SYSTEMWHICH RESULTFPOuq ~ T 
It )\] dl
I $3
NFLS , Ef ) E ( UACKGROUNUNOISE ) THETOTAL SYSTEmr ~ OISE INOEPEflDF'qlOFIHE-PRE ' SENCEORABSENCE OF ASI  ( JNAL , THESIGNALiSNOTT ( ) HEI , ,;CLuI)ED AS PART OF THE NOISE , EOE~SHIELDINGSTRuCTUREOR PARTJ TIONUSED TO INCREASE THEEFFECTIVE LENG THOF THEEX TERNAL ZRANSM_!~I~LPJLT_H_I ~ ETWEENTWOPOINT~AS~-oR TRaNsM Itting ! PAlflHElwEEI'J TwOPOINTS ASFOR EAAM PLE ~ BETWEEN THE FRONT AND TH HaCK  . nE,~:ELECTPOACOUSTICTRANS_DUCER,EOEEQUIPM~NT . -_- . CZ~SE . 
IJFSIG . " . !EI ) TO HOUSE RELAYS AND OTHER APPARATUs , KFY--CASEIN ~ TALLEO ?) ~ , AcUSTUHER#SPREMISES~TOPER MITDIFFERENTJ . It ~ ES . _T . OTHE . 
cE,~TRi~I . OFFICE TOBEcONNECTED TO VARIOUS TELE PwON r STATIONS  , lt7lTH . . . ___~~ f~L ~ . T ( ~IJ~ID_ILCATEORIGINATING CALL ~ AJ~DMU cyI IRES  IF5 TEST--Hu . XCUNTAINI ~ ApPARaTUSFORTR(~UHLELD ~ ATIO ~ . ~ANI)ROUTINF,'~3~ANTE~NCE . EOE ( / ~ J--j ~ IF MADISO NAIRSER VICE ) 330 ~ NORTHSTOUGHTO (   ; ~ u ) ~' NRI ~ ~9 . 6 ~7B , EUE/\]~), ~( MADI $ ALMAMRs ) 3ZSBNIL , , . , ~  . ~- T 83!, I~qolEf ) ~,- . IJ  ~ ( MADISONAC ~" PTANCE COREiNC ) IZL'JWUELTLIN ~_HyL2S7-\]C . ~ J ; lT ~ l . "" ~ OE .   ,  _  ,   , ,  THREE UNIT LENGTHS OF SII _ ~ STAINED 5~w~H~A_N~I_T~ED   ; ADASHWILL ALLT_DM~TIC a LLY RFF .   .   .   . 
?33 OlLU~FU~Y(~UNITLENG THOFSILENCE , TER=4USE r)INN . nlOTELEGQ__-~?t ~ PHY . EoEt . ~I(MAD~SnNADJUST MENTSYsTEH ) 3 o3P ~ ICEPLtZZB- ; ~ II ~ . '-EOE '/~-- . ~( EMFRYI ) ONAF) , ~ S06 NCUIVITTRU , ~5~-I284 , EOE ~( F*AERSO ,   , R (+) P~I~IKY)b ~ . 66 ELMWUUDAV MIDDLETON~3B-ST~9=~-~EOE , / , ~ p-(EMER-qU'~RICHARDE ) 16I ,   , CAMERONUH , 23 B ' IIZ 6 , EOEIC r ~*" JI'(EMERSnN__~?_73 ~ IDAMR~4QJEAN , 256-(~I2H , EOE~T~L~T ~ L~cUIT ) COMMUNI~L .   . . . . . . . 
~ 1 in nFACILITY PERMITTING TRANS MISSION OF INFOR MATION IN DIGITALF  . "(~ 7
I ) 3'12!3 . s 72) 53 .   .   .   .   .   . " J ~, ~ r ) nM . LOEELECTRICAL ACCOUNTING MACHINE ,   E0E a NELECTR ~ ACUIISTIC 1RANSUUCER INTENDED TO HECLOSELY COUPLER A COUSTICALLY TO TH~EAR  , RUE ( EMERGENCY MEDICALs ~ RVICE ) ~ S ~ HAINe ~5~-~'5 ~70 ROE ( EMERSONAT ) IZ34 RUTLEOGE gIZ3-4567 . EOE ( FHFRS Ur ~ CHAS H1~31~ MaTHFW ~ nn M!g0LFTnN:2~@-?TTG   . EOE(FMFRSO'~GAIL)~L~KELAWNPLo22~-P_~ . ~ . 2 . ~0E(EHERSONHARLAN ~~) 33~(; TIITQPnH , 333-333 ~ . _EOE ~ ( EMFRSONHU ~ : ~ ) I00ATOMhFINS 0 R72 ~-143 ~ mROE_ ( EMERSON'~I~APR~L~Rs ) 2314 CHALET--GARgEHSR ~238-~6T .   . EOE3 r7)~':,3' wJ6L~4J--Z--8 . Algorithm LIST ( L ) In contrast to the Algorithm PRINT , LIST will initiate an alphabetical sort on the keywords stored in the Chaining Table  , and output an alphabetical list of all entries in the IIAICS file  . The final output of this algorithm performed on Tables  12 and 13 is illustrated in Table 14  . 


Sortarray KEY WORD ( 1 ) alphabetically and carry along the original sequence in the array  , I , during the sort process Take the first original sequence number in the sorted keyword order  , ISet J = INDEX(l) , print the hash value , the keyword , the entry starting address in ASL , and the entry itself , exit on success . 
Repeat for the next keyword and its original sequence number in the sorted array until this array is exhausted  . 

LI~T
Table 14 . The alphabetical list after a LIST cow , h and t ~ i l -- . ~LPHA~ETJ CALLIS t---HAs HVALUE = ~' ENTRY ADDRESSINASL = IIA  , iS( . , A , ) I'JP ( AdSOLUTI: . AOORESS THEIDENTIFICATION OF ASPEC . .I~:IC REGIS
TERORLOCATIPNINS TORAGE.E0E
A '! ~( ~ C~L ) ( A'4' T' , ULUTECO ( ; ING ) CODINGIN ~' HICHAL LADD RESSES REFER TO SPECIFIC MACHINEREGISTERSAN\[  . ) MEMORYLOCATIr ) NS . EOEHA '=; HVALUE ; ~5E'~ITRY ADDRESSINASL ; 37 , ~-~ . Sl ) ~: 4Tr , ( A~'~oRPTION ) tHELOSSOFE_NE~GY . _I_NT~E_"T~_ANS MI~_SI_0, J . .DF ~ .   .   .   .   .   . 
YES OVERR , 11 ) IUr ) RWIRE PATHSDUETO~o ~ VERSIONINT0HET ( \]~ . OTHERFORMSOFENERGY , INWIRI~TR~NS MISS In Nt THE TFP , " tIStt SUALLY APPLIF . . . OONLY TOLOSSOFENERGYIP'EXTR,~,',JEO
IJS " q'l~I , ', ECE
H ~; Fiv ALuE = . ~ nENTRY . AD_L)p ~ S ~ . LN_A ~ L='\]e . ~_Hz ~!?% I\["(I) , AL ; GRE(~ATECROC : ; STALKFROMAL ARGENUMBER nFDISTURRI ~ , IGCHAN ; ~ ELS ,  (? )  . UNW . ~',, ITEDDISTURBINGSOUNI)SIN~C~R~IERr ) Ro . r ~ - iER ~ ULTIPLECH ~ . NNEL SYSTEM wHIC ~' WR~'SULTFROMIi'~E~ ( ~RE01~TECROSST ALKOP MUTUALINTERFERE hCEFROM0T
HFR cHANNFLSo ~ . OF .   .   .   . HA- , HvALt it -=-'2 ENTRYAUI~ES ~ INASL=-99i ~ , ~CK'I , ) T ' ~( ~ , C ~(' , R()Uf ,  . ' II ~', IUISE ) THET ( ) T . ~ LSYSTEMNOISFINDEPE " tDE~'~TOFTHFPRESENCEUR hHS ~ INC r-OF zt SIGNAL  . THESIG ~ . AIISNOT rn-r . . Ir,~CLUl . ) r - ~ . ) ASPARTOF'HENOISE , EWEHAS " IvAL , IE = ~' ~ ENTRYADL)RF . S ~ INASL : __Jig ; tS , 'ILELUI ; wL ' ; t ' ; TRUCTIIHEU ~ PARTITIONUSEDTOI' . CR~-A~ET'~iEEFF~-CTIVFLEI'~OTF Ih FTHEEX TERNAL TRANS MISSION PATH qET'"EENT  ,  . - , UP)II'~ISASFORTR~NSMISSIOI , ; PATH ~ EFWEENT wnPr ) INTS , * SfURF . .X~MPLI : . ~FJET#EENTHEFRONTA , ' . IDTHI " PJACKnFANl : . LL
CTR . ~(;,') . I . iSIICIP ~ , NSruCER , EOE ~ A3h ~ , ~ L~IE"=J3ENTRyADD RESSIN ASL1SIC , ' , ~-; I'~EIE , ,~uIPMI=' . zT--CA~ , EUESIGNLI ) TO HOUSE RELAYS ANDOT ~ ENAPPARATU ~ , , KEY--CASE INSTALLED ON A CUSIoMER "* PREmISESt T  , ) ~- r . .R~IT I ) II'FERENILINEST OrHECENTRAL OFFICE TO FIECO' , ~ , , , F('TEI~TOVARIOUSTELr . .PHONE STATIONS . ITHASc;I(J , ', ~ ALSr)w ( . uHTAINING APPAP , ITUS . FORTROUBLEL OC4 tIONANn ROUTINE r . ' , ; ~ INTENA , ,~CE ? EaE r l ~ vALJk = 5 ENTRY ADDRESS IN ASL = , ~; . ? ZI ) ~, S~<TH . ~ EEtl , lllLI " . ,~I( . ; TMSOFSUSTAINED SIGNAL tWHENTR'~NSMITTED .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . t  ~ A . UA ~,_~_/ JJ . _AUI DtglI~-ALLY~-~-E-EDJ . LDJ#_~LLJ ~ X ~ LLJ . EJ  ~ .   .   .   .   . 
THi ~ FSI\[ . F . .~'ICF . . TERM USED IN RADIOTELI: . GRAPHY , , FOE r~a~;H vALuE = 9 ENTRY ADDRESS IN ASL = ~78 . t , T ~ r l r : C ( ~ Z = rACIRCUI\[ ) COMMUNICATION F'AGILITY PERMIT TING TR . ~NS MISSIDe ', OF INFOR MATION IN DIGITAL FORM . FOE .   .   .   .   .  ~ , ~;t1vALUE=23ENTRY ADDRESSINASL = lt;T ' ~ ,  . ) P . ) , . ~ Ar ~ , IRANS MISSION AND DATA PROCESSING DICTIONARY ~ BY JAN 
FS ~' , , HOLMES EVE ~ ASH VALUE = ~ ENTRY ADDRESS IN ASL =   ; " w ) l-4-0-EA ~ ELECTRIGAL ACCOUNTIN 6 MACHINE . EOE--HA~Hv ~ LUE = 1 ENTRYADD RESSINASL = ~6 EA ~ PH~NFANEL ECTR gACg_USTI?_\[RANS~g ? R_E_R__IT bITE_ELDED TO BECLnSELY COU 
PLEI ) A COUSTICAL LyTO THEEAR . EUE
HASH VALUE
E ~ EH % AT ( EMER bON
E~ERSCR(E~ERSON

HASH VAL Ue
EMFRSG(E~IHS Oiq
HA % HvALuE = 2RENTRY ADDRESSINASL = 3\]5AT ) IZ3 ~ RUTLEDOE tl~3-ASb 7+ .   .   .   . ? ~ E .   . _CHASH ) ~31+MATHEWSRDMIDDLEToN,Z38-577b . 
= 31ENTRyADDRESSINASL = , 3 ~9(+AILI ?~? LAKE LAw NPL , 222-2222 , EUE=37--ENTRyADD RESSINAs L=3~2 HJ ~ ) IC ) ~ P~TOMPKINS DRt~-1 63 . 8 + EOF\]%H ~ SHVAL . IJE
E (.; ~" tiA ~ Hvatll ~
EHI&"~~ht~(I- . ~4 ERSI' ) N=~ENTRYADD RESSINASL = 3~9 HARRYI MRS2+~~ CHA_~ , _T_G ~ RONF ~ . ~,~__~IP~R-f,,O/~7 .   . _ =  .   .   .   .   .   .   .   .   .   .   .   .   .   . _--1~ENTRYADI ) RFSSINASL-- , 335 HARLANDS ) 33 HILLTOP ) R+333-3333 , EOE .   .   .   .   . 
rl~b,~vALUE
E.+, rHSI(Ei-~ERSL)~~A %'+'! V~LUP
E'-~EI-"%I~(F ~ ~; I-RS0,,i .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . F_!_Jr . +
H(3%,.++v+',LIJI~
E"+FR ~; PF(E"+F . HSOPJ --, ~0ENTRYADD RES~IN ASL .  =
IIAMR $), ', I" . ) JEAN*~6-BI2H . l ; . OE~7~'= . ~ENTRyADURE'SSINASI .  = ~'  , 7ROl ' ~ h h ~ y ) 6; ) 6 , ~ELHwO01) AVMIDOLETON , ~-3m-S?69 . 
:;" IENTRY ADD RFSSINASL="65
RICHARDE II 61 ~ JCAMERONDR + L~3~-1126 . EVEHASHV wLIJE=15ENT+RYADQRE5_SINASI .   .  -+__~2  .   .   .   .   .   . 
r " ~' Fi"vI ) F ( E ~' + ~ RY ' ~ ONAF ) ~5 ( +6 ~ CDIVITTRL )  . PSb-\]+~B4 . F . .OE HA~H VALtJF = 113 ENTRy ADDRESS IN ASI . . = 3 8 IEF'kR(JENCY HLUICAL SERVIcE)~5 W MAIN , ~55"BS bT . EOE . 
HASHvAt , JE=16 ENTRY ADDRESS rNASI=210 ~ bCI ( ~lJiSOJqACCEPTANCE CORPINCI2 hIW~ELTLINEHf . ~57-IC9
I ..t OE
HAbHvALUE = 17ENTRYADDRESSINASL = ~ . AH~SHVALUE=~ENTRYADORESSINASL=~43 ~ ( ~ AI ) ISON ADJUST MENT SYSTEM ) 303 PRICEPLt 238-26 16 . 
HASHV_AUJ . ~L_-- .   .   .   .  19  .   .   .   .   .   .   .   .   .   .   .   .   . ~ IEY _ ~5 . _/N __A SL_--__19_~__ .   .   .   . 
( MA ; JISONAIR5ERVl'CE ) 33 , 92 NORTHSTOUG idTt ) ~ RD ~ , ;='49-6478+ ? EuE:NoOFI~RURU+~-41-
VI . DISCUSSION i . Sample Statistics of the Main and Update HAICS Algorithms For the purpose of demonstrating the actual performance of the HAICS main and update algorithms  , the statistics gathered from the test run ( which also produced Tables 511 ) are listed below in Tables 15 and 16 and are the basis for a prelim?mary discussion . 
Table 15 . Sample statistics of the main HAICS algorithms
STORERETRIEVE
Sample Number of Accumulative entry searches average sequence of current number of __ entry searches 
I00200300410 . 25 5 0 0 . 2 6 0 0 .  167 7 0 0 . 1438 i 0 . 25 9 0 0 . 222 10 0 0 . 2 ii I 0 . 273 12 0 0 . 25 13 0 0 . 231 14 0 0 . 214 15 0 0 . 216 i 0 . 25 17 2 0 . 35918 1 O .  389 19 0 0 . 368 2 O0O .  35 21 0 0 . 333 22 0 0 . 318 23 0 0 . 30424 I 0 . 333 25 0 0 . 32 26 0 0 .  308 27 0 0 . 296 28 0 0 . 286
Nt unber of Accumulative searches average of current number of entry searches 
I 1.01 1.01 1.0 i 1.0
I 1.0
I 1 . 0 1 1 . 02 I . 1251 I . iiii . I 11 . 091 i1 . 083
I 1 . 0772 i . 1431 i .  133 1 1 . 125 iI .  118 3 1 . 222 2 1 . 263
I-42-
Table 16 . Sample statistics of the update P~ICS algorithms
ADD DELE TEREPIACE
Nember Accumu-Number Acc ~ u-Number Accumu-
Sample of lative of lative of lative entry searches average searches average searches average sequence of number of number of number current of current of current of entry searches entry searches entry searches i  2   2  . 0I 1 . 0 i1 . 0 2 0 1 . 0 1 1 . 0 2 1 . 53 i 1 . 0I 1 . 0 i1 . 3~33 4 0 0 . 75 i1 . 0 5 2 1 . 2 The STORE efficiency , i . e . , the acc~mlat ive average number of searches for the STORE algorithm  , as shown in Table 15 reveals that starting with an empty chaining table  , it is a low 0 . 286 at 87 . 5% fullness of the table . Most entries are entered into this table with no search at all which implies a good balanced distribution of keyword hash values  . 
The ADD efficiency is a function of the STORE efficiency  . And in this sample's statistics the ADD efficiency obtained through the addition of four entries to make a full chaining table  , is in fact the same as if these four entries are placed at the end of the STORE command  . Thus the ADD efficiency of 0 . 7 5 for four entries can be combined with the STORE efficiency for tWenty-eight entries and the result is a  0  . 3 44 of STORE efficiency for a full 32-entry chaining table . It is noted that the ADD efficiency is always greater than  ( or equal to ) the STORE efficiency due to the non-emptiness of the chaining table  . 
The RETRIEVE efficiency is always identical with the search efficiency as indicated in Table  3 which is an average of 1  . 25 for the indirect chaining method . The accumulative average number of searches does fall into the range between the minimum of  1  . 0 and the maximum of 1 . 5 which is a 1 . 263 at 59 . 4% table fullness . 

Both the DELETE and REPLACE efficiencies are functions of the RETRIEVE efficiency or the search efficiency  . The sample statistics of accumulative average number of searches of  1  . 2 for deleting five entries and of 1 . 3 33 for replacing three entries gives some indication that the DE leTE and REPLACE efficiencies are cOmpatible with the RETRIEVE efficiency  . 
As mentioned before , the above discussion is preliminary and even premature  . The statistics in Tables 15 and 16 do not cover some unusual circumstances although it is a typical example of several regular test runs  . To support , or oppose , the above discussion will demand several further extensive tests of each of these five efficiencies under a controlled and isolated environment  . 
2. A Framework for Information Systems
The HAICS method is a basic framework aimed to improve the total efficiency of an information system  . It can be progran ~ ned in a number of languages from the fundamental machine language or assembly language of a particular family of computers  , to the high-level procedure-oriented languages such as Fortran and Algol which are acceptable to most of the computers  . 
With an amazing 1 . 25 average number of searches per entry , this method will certainly make natural language processing not much worse than then  , -nerical computation . It is ready to be implemented for text processing and document retrieval  ; numerical data retrieval ; and for handling of large files such as dictionaries  , catalogs , and personnel records , as well as graphic informations . In the test program coded in Fortran and a machine language COMPASS  , eight commands as described before are currently implemented and operational in batch mode on a CDC  3600  . Further development wilt be on the use of tele -type console  , CRT terminal , and plotter under a time-sharing -44-environment for producing ~ ediate responses . This is under the ideal of placing the most complete encyclopedia or a tailored index -reference work under one's fingertip  . 
Specifically , the dictionary lookup operation as the principal operation of an information system  , is no longer a lengthy and painful procedure and thus a barrier in natural language processing  . Linguistic analysis may be provided with a complete freedom in referring back and for than y entry in the dictionary and the grammar  , and the information gained at any stage of analysis can be stored and retrieved in the same way  . Document retrieval may go deeper in content analysis and providing a synonym dictionary for some better query descriptor transforw ~ tions and matching functions  . As Shoffner noted , " it is important to be able to determine the extent to which file structure and search techniques influence recall  , precision , and other measures of system performance . " This paper tends to support Shoffner's statement by presenting an analysis of current search techniques and a detailed description of the HAICS method which is a possible framework for most information systems  . 


Becket , Joseph , and Hayes , Robert M . Information , Storage and Retrieval : tool % elements ~ theories  . Wiley , New York , 1963 . 
Bobrow , D . G . " Syntactic Theory in Computer Implementations , " Automated Language Processing , edited by Harold Borko . 
Wiley , New York , 1967, pp . 217-251.
Borko , Harold . " Indexing and Classification , " Automated Language Processing , edited by Harold Borko . Wiley , New York , 1967, pp . 99-125 . 
Bourne , Charles P . Methods of Information Handling . Wiley , New
York , 1963.
Hayes , David G . Introduction to Computational Linguistics . 
American Elsevier , New York , 1967.
Johnson , L . R . " Indirect Chaining Method for Addressing on Secondary Keys  , " Conmmnications of the ACI d , 4 ( May , 1961) , pp . 218-222 . 
King ~ Donald W . "Design and Evaluation of Information Systems , " Annual Review of Information Science and Technolo ~ y ~ Volume  3  , edited by Carlos A . Cnadra . Encyclopedia Britannica,
Chicago , 1968, pp . 61-i03.
Knuth , Donald E . The Art of Computer Programming , Volomei/Fundamental Aisorltbm SoAddison -Wesley  , Reading , Massachusetts ,  1968 . 
Lamb , Sydney M . and Jacobsen , William H . , Jr . " A High-Speed Large-Capacity Dictionary Systes % " Readings in Automatic Language Proeess in ~  , edited by David G . Hays . American Elsevier , New York , 1966, pp . 51-72 . Also in Mechanical Translation , 6 ( November ,  1961) , pp .  76-107 . 
Lee , T . C . ; Wang , H . T . ; and Yang , S , C . " An Experimental Model for Chinese to English Machine Translation  . "Paper presented at the Annual Meeting of the Association for Machine Translation and Computational Linguistics  , San Franqisco ,  1966 . 

Lee , T . C . ; Wang , H . T . ; Yang , S . C . ; and Farmer , E . Linguistic Studies for Chinese to English Machine Translation  . Itek Corporation , Lexington , Massachusetts ,  1965 . Also available from ERIC Document Reproduction Service as ED  010   872  . 
Maurer , W . D . Pro~rmmning : an introduction to computer languages and techniques  . Holden-Day , San Francisco , 1968 . 
Meadow , Charles T . The Analysis of Information Systems : A Programmer's ! n  . troduction to Information Retrieval . Wiley , New York , 1967 . 
Morris , Robert . " Scatter Storage Techniques , " Communications of the ? ACH , ll ( January ,  1968) , pp . 38-44 . 
Pendergraft , E . D . ' ~ rans latlng Languages , " Auto , hated Language Processing , edited by Harold Borko . Wiley , New York , 1967, pp . 291-323 . 
Peters@n , W . W . ' ~ ddressing for Random-Access Storage , " IBMJ . 
Res . De %. l ( April , 1957), pp . 130-146.
Salton , Gerard . Automatic Information Organization and Retrieval . 
McGrew-llill , New York , 1968.
Sedeloe , Salley Yeates , and Sedelow , Walter A . , Jr . " Stylistic Analysis , " Automatic Language Processing , edited by Harold Borko . Wiley , New York , 1967, pp . 181-213 . 
See , Richard . ' ~ chine-Aided Translation and Information Retrieval  , " Electronic Handlin ~ of Information : Test in ~& Evaluation  , edited by Allen Kent ; Orrin E . Taulbee ; Jack Belzer ; and Gordon D . Goldstein . Thompson , Washington , D . C ?, and Academic Press , London , 1967, pp . 89-I08 . 
Shoffner , Ralph M . " Organization , Maintenance and Search of Machine Files , " Annual Review of Information Science and Technology  , Vob- , e31 edited by Carlos A . Cuadra . Encyclopedia Britannica,
Chicago , 1968, pp . 137-167.
Simmons , R . F . " Answering English Questions by Computer , " Automated lenguage Processing , edited by Harold Borko . Wiley , New York , 1967, pp . 253-289 . 
Travis , Larry E . " Analytic Information Retrieval , " Natural Language and the Computer , edited by Paul L . Garvin . McGraw Hill , New
York , 1963, pp . 310-353.
Venezky , Richard L . "Storage , Retrieval , and Editing of Information for a Dictionary , " American Documentation , 19 ( January ,  1968) , pp . 71-79 . 

Wegner , Peter . Prog Tamming Languages , Info~matlon Structures ~ and Machine , Or Kanization . McGraw Hill , New York , 1968 . 
Wyllys , Ronald E . ' ~ xtracting and Abstracting by Computer , " Automated Language Processing , edited by Harold Borko . Wiley , New York , i 967, pp . 127-179 . 
Yang , S . C , ' ~ utom~tic Segmentation and Phrase Structure Parsing : a Simple Chinese Parser  , "Thought and Word , 6 ( January ,  1969) , pp . 324-331 . 

