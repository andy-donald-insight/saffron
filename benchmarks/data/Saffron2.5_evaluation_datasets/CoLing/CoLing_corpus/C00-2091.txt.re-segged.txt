Generation , Lambek Calculus , Montague's Semantics
and Semantic ProofNets
Syivain Pogodalla

Xerox Research Centre Europe
6, chemin de Maupertuis
38240 Meylan--France

Most of the studies in the framework of Lambek calculus have considered the parsing process and ignored the generation process  . This paper wants to rely on the close link between Lambek calculus and linear logic to present a method for the generation process with semantic proofnets  . We express the process as a proof search procedure based on a graph calculus and the solutions appear as a matrix computation preserving the decidability properties  , and we characterize a polynomial time case . 
1 Introduction
From the type logical grmn mars point of view , the parametric part of the language analysis is the lexicon  , and the constant one is the logical rules . This should of course hold both for parsing and generation  , hence we can consider the reversibility properties of such grammars  . And a relevant problem is to compare the complexity of the two cases  . 
For Lambek calculus ( Lambek ,  1958) , the parsing complexity is still an open problem . But the question arises to know how to generate in this framework  , and howd ( ~ cult ( on the computational side ) it is . ( Merenciano and Morrill ,  1997 ) answered with a labelled deductive system guided with A-termunification  . But a drawback of this latter mechanism consists in its algorithmic undecidability  ( from second order unification )  . 
Relying on the linear logic ( Girard ,  1987 )   ( which provides a powerful framework to express Lambek calculus  , specially with proofnets for the latter ( Roorda , 1991; Lamarche and Retor 6 ,  1996)) , this paper wants to adress the problem of finding the way we can associate given lexical entries to fit a given semantic expression and generate a syntactically correct expression  ( for the moment , we do not care to the choice of the lexical items  )  . For this purpose , we express our problem as a proof search one in ( multiplicative ) linear logic which is decidable . 
Moreover , we characterize the semantic recipes of lexical items that provide a polynomial solution for the syntactic realization process  . Then we give an example of this process . 
2 ProofNets for Linear Logic
Linear logic ( Girard ,  1987 ) proposes for proofs amorn compact and accurate syntax than sequent calculus : proofnets  ( they group distinct sequential proofs that only have in essential differences  )  . They have both a related to sequential proof definition and a geometrical definition : they can be defined as a class of graphs  ( proof structures ) satisfying a geometrical property so that every proofnet corresponds to a sequential proof and every proof structure built from a sequential proof has this property  ( Retor 6 ,  1998) . 
In this paper , we only consider proofnets of the intuitionistic implicative linear logic : sequents are made of several antecedent formulas  , but only one succedent formula . To deal with the intuitionistic notion for proof nets  ( since we consider one-sided sequents )  , we use the notion of polarities with the input ( o : negative ) and the output ( o:positive )   ( Danes , 1990; Lamarche , 1995) to decorate formulas . Positive ones correspond to succedent formulas and negative ones to antecedent formulas  . 
Given the links of table 1 , we define proof structures ( we consider implicative fragment ) as graphs made of these links such that : 1 . any premise of any link is connected to exactly one conclusion of some other link  ;  2 . any conclusion of any link is connected to at most one premise of some other link  ;  3 . input ( resp . output ) premises are connected to input ( resp . output ) conclusions of the same type . 
Proofnets are proof structures that respect he correctness criterion  . 

Table 1: Links
Name Axiom Tensor Par Cut pl1) ~ PlP2
Premises none Pl , P2Pl ~ P2Pl , P2
Conclusions Cl , c2cnone
Typescl : A+c2:A-

Pl:A+p2:B-c:(A--o/3)-pl:A-
P2: 13+c:(A-oB ) + pl:A-
P2:A +
The last link of table 1 , the Cut link , allows the combination of proofs of 17 I-A and of A , At-/3 into a single proof of I ' , AI-/3 . In sequential cal-culs , tile cut-elimination property states that there exists a normal  ( not using the Cut rule ) proof for the same sequent only IY ompremises of 17 and A ( and builds it )  . 
Of course , this property hokls for proofnets too . 
And to enforce the intrinsic definition of these latter  , a simple rewriting process ( described in table 2 ) actually performs the cut-elimination ( in case of complex for nmlas as in the third rewriting rule  , those rules can apply again on the result and propagate until reaching atoms  )  . 
2.1 ProofNets for Lambek Calculus
As Lambek calculus is an intuitionistic l'ragment of noncommutative linar logic  ( with two linear implications : "\" on the left and "/" on the right  )  , proofnets for it naturally appeared in ( Roorda ,  1991) . 
They slightly differ from those of table 1 : ? we get two tensor links : one for the for nmla  ( /3/A )  -  ( the one in table 1 ) and one for the formula ( /3\A )  -  ( just inverse the polarities of the premises )  . And two par links : one for the fommla ( A\B ) + and one for ( A/B )  +  ( idem )  ; ? formulas in Lambek's equents arc ordered , so that conclusions of the proofnets are cyclically ordered and axiom links may not cross  . 
From a syntactic ategory , we can unfold the formula to obtain a graph which only lacks axiom links to become a proof structure  . So that the parsing process in this framework is , given the syntacticate-gories of the items and their order  , to put noncrossing axiom links such that the proof structure is a proofnet  . It means there is a proof of , 5' given types in a certain order . Proving that John lives in Palls is a correct sentence w  . r . t , the lexicon of table 3 ( the two first columns ) is finding axiom links between the atoms in the figme  1   ( a ) so that the proof structure is correct . Figurel ( b ) shows it actually happens ( for technical reasons , ill the proofnet , the order ot ' the syntactic ategories i the inverse of the order of the words in the sentence to be analysed  . 
Figure 1 ( c ) shows John lives Palls in cannot be successfully parsed  )  . 
2.2 ProofNets for Montague's Semantics
Capitalizing on tile fact that both A-torms ( with the Curry-Howmzlisomorphism ) and proofnets represent proofs of intuitionistic implicative linear logic  , ( de Groote and Retor 6 ,  1996 ) propose to use proofnets as semantic recipes : since proofnets encode linear A-terms  , instead of associating a ) ~- term in tile Montago vian style to a lexicai entry  , they associate a proofnet ( decorated with typed constants )  . An example of such a lexicon is given in table 31   ( parlinks encode abstraction , and tensor links encode application ) . 
Of course , to respect semantic types based on Montagovian basic types e and t  , they use the following homomorphism : 7\ [ ( NP ) = e"H ( S ) : I7t ( A\B ) = 7 t ( A ) -- o'H ( B ) 7 t ( N ) = e--oI7t ( A/13 )  = ~ ( B ) -- o7t ( A ) Let us illustrate the process in parsing tile sentence John lives in Paris  . First we have to find the syntactic proofnet of figure l  ( b ) as explained in 2 . 1 . It provides the way syntactic omponants combine , hence how semantic recipes of each lexical item combine : we take its homomorphic image IUn like in  ( de Groote and Retor 6 ,  1996) , we restrict ourselves for llle moment to linear ~ -terms  . 

Table 2: Cut-elimination rewriting rules
Yr - - q . . . . . . . . . . . . +
Y x
L , qlxIx.2YlY ' 2
Y ; 13
S-,5'+" q9
NP--q\]/S-NP+

Parisinli " s John ( a ) Unfolding of the syntactic typos , d : itrl . . . . . . . . j l ' S '+ ( b ) Matching the dual atoms to obtain a prool ' net i ! N/'  ) ri ! ; ~'  ; i'\r ~ htS + ( c ) Incorrect prool'structure for parsing Jolm lives I ' aris in Figure  1 : Parsing of John lives in Paris as in figure 3  ( a )  . The substitution of every input with its semantic definition we would like to perform on the ~- calculus ide appears on the logical side as plugging selnantic proofnets with cut-links  . 
Then , the fl-reduction we would like to perforln has its logical counterpart in the cut-elimination on the resulting proofnet  . it gives a new proofnet ( on figure 3 ( b ) ) we can use as the semantic analysis of John lives in Paris  . If necessary , we can come back to the k-term expression : ( in p ) (live j )  . 
In other words , the syntactic proofnet yields a term t expressing how the elementary parts combine  ( in this case t = ( ab ) (cd ) ) . Then the resulting proofnet of figure 3 ( b ) corresponds to the /3-normal form of t\[ ) ~x . *y . ( in x ) y/a , p/b , Az . livez/c,j/d\] . 
3 What is Generation ?
We can now state the problem we arc dealing with : given a semantic proofnet  ( like the one in figure 3 ( b ) ) , we want to put together syntactic entries with axiom links such that :  1  . this yields a correct ( syntactic ) proofnet ; 2 . the meaning of the resulting proofnet matches the given semantic expression  . 
Thus , if we define : * l\]o the semantic proofnet of the expression we want to generate  ; ? Hi the semantic proofnets associated to the given lexical entries i we use  ;   . Ti then n folding in proof slructure of the syntactic formula of the lexical item i  ( as in figure 1 ( a ) ) ; ? F the forest made of the syntactic trees ( 7~ ) of all the considered lexical entries plus the output  ( the type we want to derive )  , the generation problem ( see figure 4 ) is to find a matching M of atomic formulas of F such that :  1  . Fendowed with M ( let us call this proof structure F/ ) is a correct proofnet ;  2 . when cut-linking 7\[(1v /) with tile lIi , and eliminating these cuts , we obtain 110 . 
We note that the problem is intrinsically decidable  ( because the finitness of the number of the matchings  ) without making any assumption on the form of tile semantic entries  . Of course , we want to keep these good properties in our algorithm  . 

Table 3: Lexicon lexicalent w syntaxic category associated . k-term
John NPj
Mary N/~m
Paris Nl~p
Lives N/~\,5' Xa: . live:cin(S\,S')/NI"k:c . )~j . ( in , ~) ~ j semantic proofnet \]\ [ John ( cf . tigure 2(a ))\]\ [ Mary ( cf . ligure 2(b )) ll paris ( cf . figure 2(c )) lltive(cf . figure 2(d ))\] lin(cf . figure 2(el)c'+~ .   .   .   .   . Jac-c-'-~--~ , mc-c-'~-----apc- , i ! e'"\[/(a ) tljohn(b)\]IJohn(c ) Ill , aris ( d ) lllivc " .  / / 1  , in ( el \]\] in Figure 2: Semantic proofnets of the lexicon of table 3   4 Cut-elimination as Matrix Computation U:dng proofnets resulling from a cut-elimination to guide a proof search on proofnets b@  ) recut-elimination relies on the algebraic representation fcut-elimination on proofnets expressed in  ( Girard , 1989) and rel'ormulated in ( Retor 6 , 1990; Girard ,  1995) . Due Iolack of space , we cannot developpil , but tile principle is to express cut-elimination between axioms with incidence matrices and paths in graphs  . 
Let us consider a proofnet U . We can define U the incidence matrix of axiom links '  , c , tile incidence matrix of cut links ( we assume wilhout loss of generality that llley happen only between axiom links  )  , and \]\[ the incidence matrix of axiom links of 1I where 111 is lheproofnet resulting from all lhecut -eliminations on U  . Then we have ( Girard , 1989):\]l--(:l-~2)U (: l-~l : ; )- ' ( : l - ~ )   ( l ) We want to give an equiw flent relation to ( 1 ) focusing on some axiom links we are interested in . 
Without loss of generality , we assume tile lack of any axiom link in U such that none of its conclusions are involved in cut links  . 
Then we can choose a nel'tier for tile atoms ( from lheproofnet before the cut-elimination , there is three subsets of atoms : those not involved in a cut link  , those involved in a cut link and whose dual is not involved in a cut link  , and those involved in a cut link and their dual as well  ) such that : fo::o1nt::oolu = o-\[" ( Y'~0"IU ; iJ ,   ,   .   0   i<~ic4\] Note that all the atoms belonging to the matching we are looking for in the generation process  ( see ligure 4 ) are in U:I . 
If we detine A = ( llJ1111-o~eU1l/J1 and X=U:~ ( 1-~ r . lU3)-J , we can state tilt theorem : Theorem 1 Lelg/bea correcl proofnet reducing in Res ( o , U ) after cul-eliminalion . These relations are equivalenl : ? u )  =  ( : i - ) cr ( t --? ( q/jill-a : l* ( /1  ) U1 = o'2 1& ( l-o , lU3 ) -1l ~ ru ? A--I ( T2X ( T2 and U:~=X-1+o4 . 
Of course , all the terms are defined.
We bast the proof search algorithm corresponding to the generation process we are dealing with on this third relation  . 
Indeed , the axiom links we are looking for are those whose two conclusions are involved in cut links  . That is we want Io complete U3 ( knowing all the other matrices )  . The previous theorem states that solving tile equation  ( 1 ) correponds to solving =================== ======= i:i::::\]:::::::iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii :   ( a ) Before cut-elimination %__~ g7:1pmlivej ( b ) After cut-elimination

Figure 3: Semantic proofnets for ( in p ) (live j )  ~ - " ' ~ ' '  ; L cut-climinal kmIll ) l
Figure 4: The generation problem the equation A = cr2X   tcr2 in X with X inversible . 
Then , we have to solve U3 = X -1  +  or4 such that tU ~ = U3 and U~-- 1  . 
Theorem 2I for 4=0 and there exists a solution , then the latter is unique and completely defined ( as matrices product ) from A and ~2 . 
If cq7 ~0 we generally have many solutions , and we have to investigate this case to obtain good computational properties for example in adding word order constraints  . 
Nevertheless , we can decide the case we are handling as soon as we are given the lexical entries  . 
5 Example
Let us process on an example the previous results.
We still use the lexicon of table 3 , and we want to generate ( if possible ) a sentence whose meaning is given by the proof net of figure  3  ( b )  . 
We first need to associat every atom with an index  ( in the figures , we indicate a number i beside the atom ) . Of course , we have to know how to recognize the atoms that are the same in U  ( figure 5 ( b ) ) and in I \[ ( figure 5 ( a ) ) . This can be done by looking at the typed constants decorating the input conclusions  ( for the moment , we don't have a general procedure ) . 
We also assume in this numbering that we know which of the atoms in ~  ( F ) is linked to t + ( the unique output )  . In our case where ?4 = 0 , it is not a problem to make such a statement . In other cases , the complexity would increase at most poly -nomially  . 
Then , the given \] 0 0 0 0 0 0
Ut = 000 1000000000 l matrices are : 00-


O000~2 =
O 0 solution is : x = u ~ = 0:1000000   0000  \]  000   -100000   0  \  ]0000  \[ ; ' ??? i \] oooo 0 0 100 10000000001 figure 6 ( a )   ( do not forget that the link between S+alldc ~ , - is in U1 and not in U3 , and that U:3 represents edges between atoms with iE \[17  , 22\]) and obtain on F the matching of figure 6(b ) . 
We still have to ensure the correctness of this proofnet  ( because we add all the tensor and parlinks )  , but it has a quadratic omplexity ( less than the matricial computation )  . In this case , it is correct . 
Actually , this only gives us the axiom links . It still requires to compute the word order to have no crossing axiom link  . This can be done from the axiom links easier than quadratic time  ( it is a bracketing problem )  . 
6 Conclusion
We showed that the problem of generation in the Lambek calculus fi-ame work is decidable  , and we relied on selnantic proofnets to express it as a guided proof search  . On top of keeping the decidability property of this framework  , we characterized the semantic proofnets that euable a polynomial time processing  . 
Nevertheless , some work remains : we should soon work on the atom numbering and the choice of the lexical items to enable a practicaliln plemen-tation of this work  . Moreover , we want to benefit from the power of linear logic  ( and modalities ) to deal with nonlinear A-terms . 
Finally , since different extensions of Lambek calculus based on proofnets  ( Moortgat , 1996; Lecomte and Retord , 1995) have been considered , we hope our proposal and its good properties to apply to other linguistic approaches  . 

I would like to thank Christian Retord who pointed out tome Girard's algebraic interpretation of the cut elimination  , and the anonymous reviewers for their helpful colnments  . 

Vincent Danos .  1990 . Une Application tiela Logique Lin & tire?tI Etude des Processus tie Normalisation  ( princip alement du A-calcul )  . Ph . D . 
thesis , Universitd Paris VII , June.
Philippede Groote and Chritian Retord . 1996.
On the semantic readings of proof-nets . In Glyn Morrill Geert-Jan Kmijff and Dick Oehrle , editors , Formal Grammar , pages 57-70 , Prague , 
August . FoLLI.
Jean-Yves Girard .  1987 . Linear logic . Theoretical
Conq ) uter Science , 50:1-102.
Jean-Yves Girard .  1989 . Geometry of interaction I : Interpretation of system F  . In C . Bonotto , R . Ferro , S . Valentini , and A . Zanardo , editors , Logic Colloquium '88 , pages 221-260 . Nortll-

Jean-Yves Girard .  1995 . Geometry of interaction III : The general case . In J . -Y . Girard , Y . La-font , and L . Regniel ; editors , Advances in Linear Logic , pages 329-389 . Cambridge University Press , Proceedings of the Workshop on Linear
Logic , ithaca , New York , June 1993.
Franqois Lamarche and Christian Retor 6.1996.
Proof-nets for the lambek calculus-an overview.
In V . Michele Abrusci and Claudio Casadio , editors , PIvceedings 1996 Roma Workshop . Proof ~ and Linguistic Categories , pages 241-262 . Editrice CLUEB , Bologna , April . 
Franqois Lamarche .  1995 . Games semantics for full propositional linear logic  . In Proceedings , Tenth Annual IEEE Symposittmonl_z~gicin Computer Science  , pages 464-473 , San Diego , California , 26-29 June . IEEE Computer Society

Joachim Lambek .  1958 . The mathematics of sentence structure . American Mathematical
Monthly , 65(3):154-170.
Alain Lecomte and Christian Retord .  1995 . Pore-set logic as an alternative categorial grammar  . In
Formal Grammar , Barcelona.
Josep M . Merenciano and Glyn Morrill . 1997.
Generation as deduction on labelled proofnets.
In Christian Retord , editor , hvceedings of LACL-96 , volume 1328 of LNAI , pages 310-328 , Bedin . 

Michael Moortgat .  1996 . Categorial type logics . In Johan van Benthem and Aliceter Meulen , editors , Handbook of lx~gic and Lzm guage , pages 5-91 . Elsevier Science Publishers , Amsterdam . 
Christian Retor 6 .  1990 . A note on turbo cut elimination . Manuscript , September . 
Christian Retor 6, .  1998 . H and some proofilets : R&b-graphs , series-parallel graphs and perfect matchings . Technical Report 1234, IRISA . 
l ) irk Roorda .  1991 . Resource Lz ) gics : Proof-theoretical hlvestigations . Ph . D . thesis , University of Amsterdam , September . 
63334 t__Z-67 ( a ) Marking atoms on \] I .   .   .   .   . F . i , ~ .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . .-,1 12,! 18 '_e~_+:3 _~ . /) e--19222021 lives gIq

17.....~lives .............
,5 I 7 ~- , :+/~/~+ ~-/  ,   , ~A ? oc-----~:"!~to , ~ np , : , ~  .   .   .   .   .   . 
,4 -  . 7 \~ : ,::::  . . . . . . . , i . . . . . . --:'-  . . . . . . . . . . . . . live::::116 . . . ! . . ! :: l ~ . . . . .   . P .  ::
I ~_~77 ZT-Z 7272 ~! . . . . . . . . . . . . _ \ ] ( b ) Marking atoms oll U

Figure 5: Defining the indices on U and \]1 lr- 20Np+21 ' ~ N ,   . - i 72
Pearls 11"~lives Jol~l S+S + ( a ) The syntactic forest ( b ) The syntactic forest endowed with the matching described by  U3 Figure 6: Applying the matching on the syntactic forest
