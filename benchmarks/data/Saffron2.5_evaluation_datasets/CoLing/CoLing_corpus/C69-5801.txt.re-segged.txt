COMPUTER-AIDED RESE ARCHONSY NONY MYAND ANTONYMY*
H.P . Edmundson
University of Maryland , College Park , Md . , U . S . A . 

Martin N . Epstein
National Institutes of Health , Bethesda , Md . , U . S . A . 

This research is a continuation of that reported in Axiomatic Characterization of Synonymy and Antonymy  , which was presented at the 1967 International Conference on Computational Linguistics  \[3\]  . 
In that paper on mathematical linguistics the relations of synonymy and antonymy were regarded asternary relations and their domains and ranges were discussed  . Synonymy and antonymy were defined jointly and implicity by a system of eight axioms  , which permitted the proofs of several intuitively satisfying theorems  . The present paper on computational linguistics is a preliminary report which describes some computer programs that have been used to investigate the extent to which those axioms model an existing dictionary of synonyms and antonyms  \[9\]  . A set of computer programs is discussed that ( i ) input the dictionary data concerning synonyms and antonyms  ,   ( 2 ) create a data structure incore memory to permit the manipulation of data  ,   ( 3 ) query this data structure about words and relations  , and ( 4 ) output the answers to queries or the entire data structure  , if desired . 
Some examples of computer output are also given to indicate present directions of the computer-aided research  . 
* This research was supported in part by the Office of Naval Research under Contract  N00014-67-A-0239-0004  . 
i . Introductioni . iPrevious Research
This work is a continuation of research initially reported in the paper Mathematical Models of Synonymy  , which was presented at the 1965 International Conference on Computational Linguistics  \[2\]  . That paper included a historical summary of the concepts of synonymy and antonymy  . It was noted that since the first book on English synonyms  , which appeared in the second half of the 18th century , dictionaries of synonyms and antonyms have varied according to the particular explicit or implicit definitions of " synonym " and " antonym " that were used  . The roles of grammatical class , word context , and substitu-tability in the same context were discussed  . 
As was noted , synonymy traditionally has been regarded as a bin -ary relation between two words  , Graphs of these binary relations were drawn for several sets of words based on Webster's Dictionary of Synonyms  \[8\] and matrices for these graphs were exhibited as an equivalent representation  . These empirical results showed that the concepts of synonymy and antonymy required the use of ternary relations between two words in a specified sense rather than simply a binary relation between two words  . The synonymy relation was then defined implicitly  , rather than explicitly , by three axioms stating the properties of being reflexive  , symmetric , and transitive . The antonymy relation was also defined by three axioms stating the properties of being irreflexive  , symmetric , and antitransitive ( the last term was coined for that study )  . It was noted that these six axioms could be expressed in the calculus of relations and that this relation algebra could be used to produce shorter proofs of theorems  , even though no proofs were given . In addition , several geometrical and topological models of synonymy and antonymy were posed and examined  . 
The characterizations of synonymy and antonymy initiated in Edmundson  \[2\] were investigated more thoroughly in Edmunds on \[3\]  . 
Synonymy and antonymy were defined jointly and implicitly by a set of eight axioms rather than separately as before  . First , it was noted that the original six axioms were insufficient to permit the proofs of certain theorems whose truth was strongly suggested by intuitive notions about synonymy and antonymy  . In addition , it was discovered that certain fundamental assumptions about synonymy and antonymy must be made explicit as axioms  . Some of these have to do with specifying the domain and range of the synonymy and antonymy relations  . 
This is related to questions about whether function words  , which linguistically belong to closed classes , should have synonyms and ant-onyms and whether content words  , which linguistically belong to open classes , must have synonyms and antonyms . Several fundamental theorems of this axiom system were stated and proved  . The informal interpretations of many of these theorems were intuitively satisfying  . For example , it was proved that any even power of the antonymy relation is the synonymy relation  , while any odd power is the antonymy relation . 
These results supported the belief that an algebraic characterization is  . insightful and appropriate . For example , the assumption that synonymy is an equivalence relation also has been made  , either directly or indirectly , by F . Kiefer and S . Abraham\[4\], U . Welnreich\[i0\], and others . Since the axiom system defined the notions of synonymy and antonymy jointly and implicitly  , it avoided l certain difficulties that are encountered when attempts are made to define these notions separately and explicitly  . 
1.2 Axioms
Before investigating axioms for synonymy and antonymy  , we will recapitulate some notions and notations for the calculus of binary relations  . Consider a set V of arbitrary elements , which will be called the universal set . A binary relation on V is defined as a set R of ordered pairs < x  , y > , where x , y?V . The proposition that x stands in relation R to y will be denoted by xR y  . The domain ~ ( R ) of relation R is defined as the set ~ ( R ) ~x: ( ~y ) (xRy )  . The complement , union , intersection , and converse relations are defined by xRy-~xRy x  ( RnS ) y-xRyAxSyx ( RUS ) y-zxRyVxSyxR-ly-yRx
The identity relation I is defined by xly _=x = y The product and power relations are defined by xRiSy-  (  , ~z)\[xRzAzSy\]
Rn:RIR~-~n~l
The inclusion and equality of relations are defined by 
R = S-xR y - - - - -> xS y

R = S-R = SAS = R
Under the assumption that synonymy and antonymy a reternary relations on the set of all words  , the following definitions will be used : xSiYE word x is a synonym of word y with respect to the intension i  ( or word x is synonymous in sense i to word y ) x AiYE word x is an antonym of word y with respect to the inten-sioni  ( or word x is antonymous in sense i to word y ) In addition to the synonymy and antonymy relations  , it will be useful to introduce the following classes that are the images by these relations  . The synonym class of a word y is defined by si ( Y ) ~ x : xSiY which may be extended to an arbitrary set E of words by si  ( E ) ~ x : ( ~ y ) \[ ycEAxSiY\]Similarly , the antonym class of a word y is defined by ai ( Y ) ~ x : xAiY which may be extended to a set E of words by ai  ( E ) Ex : ( ~ y ) \[ ycEAxAiY \] Following Edmunds on\[3\] , it will be assumed that the synonymy and antonymy relations are defined by the following set of axioms -- rather than as in Edmunds on  \[2\]  . 
Axiomi ( Reflexive):
Axiom2 ( Symmetric):
Axiom 3 ( Transitive):
Axiom 4 ( Ir reflexive):
Axiom5 ( Symmetric):
Axiom 6 ( Ant ~ transitive):
Axiom 7 ( Right-identity):
Axiom 8 ( Nonempty ) :  ( Vx ) \[ xSix \] ( Vx )   ( V y ) \[ xSiY => xSily\] ( Vx )   ( V y )   ( V z ) \[xSiYAYSiz-->xSiz\] ( VX ) \[xAix \] ( Vx )   ( V y ) \[xAi Y --------> xA ? lly\] ( Vx )   ( V y )   ( V z ) \[xAiYAYAiz ~--> xSiz\] ( Vx )   ( V y )   ( V z ) \[xAiYAYSiz -----> xAiz\] ( V y )   ( ~x ) \[ xAiY \] The above eight axioms may be expressed more succinctly in the calculus of relations as follows: 
Axiomi ( Reflexive ): i = Si-i
Axiom2 ( Symmetric ) : Si = Si
Axiom 3 ( Transitive ): S2~Sii
Axiom 4(Irreflexive ) ': I = Ai
Axiom5 ( Symmetric ): Ai ~ Ai
Axiom 6 ( Antitransitive ): A ~ l ~ Si
Axiom 7 ( Right-identity ): AIISi ~ Ai
Axiom8 ( Nonempty ): ( Vy )( ~ x)\[xAiY\]
As mentioned in\[3\] , even though si(Y ) ~@ since Y SiY by Axiomi , it may be necessary to add the following axiom :
Axiom 9: ( V y ) (~x ) \[ x  #yAxSiY \] to guarantee that the domain of the relation Si is not trivia \]  , i . e . , si ( Y )  -  ( y#?Axiom9 is not necessary if si ( Y ) is permitted to be a unit set for certain words . Thus , we might defines i ( Y ) = y for any function word y , e . g . , si(and ) = and . But this will not work for antonymy since ai ( Y ) might be considered empty for certain words such as function words  , e . g . , ai ( and ) = ~ . The alternative of defining ai ( Y ) = y is not reasonable since it produces more problems than it solves  . 
Axiom 8: ( Vy ) ~ x)\[xAiY\] , which is equivalent to (~ y)\[ai(Y ) #~\] , is reasonable if the contrary y of word y(e . g . , " irrelevant " , " imposs-ible " , " nonuse " , etc . ) is permitted , i . e . , ~? ai(Y ) . 
2 . Research Methodology 2 . 1 Research Goals The synonymy and antonymy relations possess interesting proper ~ ties  , which can be treated mathematically to provide insight about semantic relations and connectivity among words in a natural language  . 
One such model is the axiom system just stated . The immediate goal of the current research is to compile  , in computer-accessible form , a dictionary containing all synonymy and antonymy relations holding between selected words  . Such a dictionary is useful in gaining a better understanding of how the English lexicon is semantically structured since it can eventually enable the determination of the completeness of the descriptions in any synonym-antonym dictionary  . Another objective is to assist the lexicographer in compiling such a dictionary so that all words are defined and related in a consistent manner  . 
2.2 Data Base and Data Structure
For the present research a test dictionary was compiled by selecting English words from Webster 's New Dictionary of Synonyms  \[9\]  . Accordingly , a set of computer programs was written to do the following : i  . Input , in a prescribed format , words selected from the above dictionary together with relevant data concerning their synonyms and antonyms  . 
2 . Create incore memory a suitable data structure ( see\[5\] ) for the input , which permits the manipulation of the dictionary data  . Future extensions to the system would make use of direct-access storage to enable the processing of more data  . 
2.3 Data Anal vs ~
The test dictionary is analyzed with the aid of computer programs that were written to do the following : I  . Query the data structure about words and relations  . Two query modes are built into the system . The first mode allows the selection of words fulfilling an input request and the second mode permits the verification that certain relations hold between selected words  . 
2 . Output the answers to queries or output the entire data structure  , if desired . 
3 . Verify the consistency of word groupings , the degree of completeness of related subgroups , and the presence or absence of a nom-alies-in the database  . 
3. Input 3.1 Input Specification
First , it is necessary to specify and format the input data so that a set of programs may process and query a test dictionary  , which resides incore in the present version of the system  . This is accom-plished using the following input prototype : < word >  , < grammar code > < sense #> < relatlon ~ , ~ word > ,  . . . , < word >,; where i . 

< word > is an entry in Web ster's New Dictionary of Synonyms  . 
< grammar code > makes use of the following coding mnemonics : 
N-Noun
V-Verb
J-Adjective
B-Adverb0-Pronoun
D-Determiner
L-Auxiliary
P-Preposition
C-Conjunction 3 . <= ense #> is a one-digit number representing a sense associated with a word in the dictionary  . 
4.< relation > is denoted by
S-Synonymy
A-Antonymy
M-word used in the description of another word but not itself a main entry  . 
5 . < word >, . . . ,<word > is the set of words standing in the given relation to the main entry in the given sense  . 
Thus , each input item consists of a main-entry word followed by a comma  , a one-character grammar code , a one-digit sense number , a one-character relation , a comma , a list of words ( separated by commas ) that in the given senses t and in the given relation to the main entry  , a comma , and a semicolon that denotes the end of an input item  . A sample computer input is : 51 nPLE , J2S , E&SY , FACILE , LIGHT , EFFORTLESS , SMO OTH , ; Continuation cards may be appended to any i tem by placing a "+" in column  80 of subsequent cards . 
3.2 Comments
Several problems remain in fully attaining the above stated goals  . 
On the one hand , it is difficult to select from a manual dictionary sufficiently small sets of words that are closed under the relations S and A  , while on the other hand large segments of such a dictionary cannot be input at present  . Programs have been written to stgucture and process small test dictionaries  , to select words from the data i0 structure using a query language , and to verify that certain relations hold between words  . 
4. Processing 4.1 Input Analysis
In the first phase of pro?essing the program checks the wellformedness of the input entries  , isolates words , records grammatical classes , and establishes relations between words . 
4.2 Creation of the Data Structure
The data structure created incore provides for the construction of two tables  . 
The first is a directory table whose items consist of a location identifier  , an entry , the grammar code , the sense number , and the rela-tion . This directory sequentially stores the input information  , ellm-inates duplicates , and provides a reference pointer to a second table  , the matrix table . 
The matrix table consists of an ineidence or connectivity matrix  , which is used to store the synonymy and antonymy relations between words  . It should be noted that xSy is stored differently from ySx  . 
In addition xSx is recorded in the data structure only if it so appeared in Web ster's New Dictionary of Synonyms  . 
It is also possible to develop at each ability or accessibility matrix from the stored input  . In graph-theoretic terms the matrix may be regarded as follows : words correspond to vertices and relations correspond to directed edges  . Note that for all x and y in the data structure , it can be determined whether xSy and xAy are true or false  . 
ii 4.3 Query Language
The two basic modes of operating upon the data structure are the selection mode and the verification mode  . Both modes permit queries to be composed and matched against the data structure  . The response to a query statement in the selection mode is a listing of all those entries in the data structure satisfying the request  , lh the verification mode the response indicates whether a statement is true or false and  , if false , points out which segment of the query statement does not hold  . 
Simple query statements are of the form : ? if QUERY where "?" is used to initiate the request  ; " if " is used as a prefix for particular query types  ; and " QUERY " consists , in the simplest case , of one of the following five statement types : i . xR y2 . x * y3 . xR * 4 . * Ry 5 . * R * where "*" denotes that any value in the specified field is allowed and the sense i is not explicitiy denoted  . Item 1 above operates in the verification mode , while items 25 operate in the selection mode . 
Simple query statements can be extended to allow compound expre-sions by means of the operators " not "  , " and " , and " then " . For example , the query ? if xSy and ySx words x and y , while the query ? if xSy and ySz then xSz checks to see if transitivity of synonymy  ( in sense i ) holds for the words x , y , and z . 
It is also possible to determine if the composition SIS of the relation Sholds  , i . e . , for given words x and y , does the given word z in the data structure satisfyt % erequest : ? if xSz and zSyTo select all such z from the data structure  , the request is formulated as follows : ? if xS * and * Sy The synonymy relation S is assumed to be reflexive  , symmetric , and transitive , while the antonymy relation A is assumed to be irre-flexive  , symmetric , and antitransitive . The input forms of queries representing these properties are as follows : i  . Reflexive:2 . Symmetric : 3 . Transitive : 4 . Ir reflexive : 5 . Symmetric : 6 . Antitransitive : ? x,S,x,;?ifx,S,y, . then . y , S , x , ; ? if x , S , y, . and . y,S,z, . then . x , S , z ,; ? not x , A , x , ; ? if x , A , y, . then . y , A , x , ; ? if x , A , y, . and . y,A,z, . then . x , $ , z , ; In addition , the input format for the properties of right -identity and nonempty are as follows : ? x  , A , y ,  . and . y,S,z, . then . x , A , z , ; 7 . Right-identity : ? if r8 . Nonempty : ? if * , A , y , ; This last property is interpreted as follows : for all y in the data i  13 structure , does there exist a word x such that x stands in the rela ~ tionA to y ? An example of the input to test if transitivity holds for the words " big  "  , " great " , and " large " , in that order is as follows : ? if big , S , great ,  . and . great,S,large, . then . big , S , large , ; 4 . 4 Verif ication Algorithms Two basic verif ication algorithms have been programmed  . The first seeks to detect the presence of either a chain or a loop among the given words  . The input consists of pairs of words standing in the relation S  . A chain exists if it is possible to linearly order the set of input words so that the relation Sholds between adjacent words  . A loop is detected if every word is preceded by another word and the algorithm cannot locate a word that has no predecessor  . This algorithm may be useful in developing techniques for structuring the vocabulary of a synonym-antonym dictionary so that no word is used before it has been defined  . 
The second algorithm determines whether selected groups of words form an equivalence class with respect to synonymy in a given sense  . 
A binary relation R is said to be an equivalence relation if it is reflexive  , symmetric , and transitive . An equivalence relation R partitions a set of elements into disjoint classes such that two elements are equivalent if and only if they belong to the same class  . The routine determines whether two given words are in an existing synonym class and  , if not , establishes a new class . The test fo ~ equivalence classes in a set of words is initiated by the input statement  . 
EQUV(<word >, ..., < word >)
The output is a table indicating class membership of wozds o\[  , if no equivalence relations exist , indicates those properties not satisfied by particular words  . For example , the routine found that , aside from reflexivity , the words " pure " , " simple " , and " absolute " formed an equivalence class in a particular sense i  . On the other hand , the words " aft " , " astern " , " abaft " , " after " , and " behind " formed two equivalence classes aft  , astern , abaft and after , behind . At present , the graphs of equivalence classes are drawn manually  , rather than by computer . 
Appendix 2 outlines the structure of an input deck and lists a sample input including both input data and query statements  . 
5. Output 5.1 Relational Form
The relational form of output verifies whether the simple state-ment x Ry is true or false and also whether compounds of simple statements are true or false  . For example , the query ? ifs ternA soft produced THE FOLLOUING RELATIOHHOLDS : STERNASOFT while for the query ? if far A high and high Alow then high A far the following set of responses was obtained : rTHEFOLLOWING RELATION HOLDS : FAR & HIGHTHE FOLLOHIHG RELATIOH HOLDS : HIGHALOU THEGIVENREL?TIONDOESHOTHOLD : HIGHAF&H QUERY REQUEST NOTSATISF IED--STATEHENT FALSE In the list form of response to a query the main entry and all words  ( if any ) that are pointed to by the main entry are listed . For example , the query ? if * Sstern produced TEEFOLLOWING ~ ORDSAEE INTHEREL ATION STOSTERN 
SEVEEE

ASCETIC
In general , this form of output consists of lists of the fol low-ing two types : a list of all words synonymous or antonymous to a given Word  , and a list of all synonymy or antonymy relations holding among a given set of words  . 
5.3 Matrix Form
The matrix form of output represents the relations by a matrix consisting of S's and A's according to whether the relation S or A holds between given pairs of words  . A blank in such a matrix indicates that neither S nor A relates two words in the data structure  . For example , the following matrix revealed four senses of the word " simple "  . 
16  . simple a pure absolutes heer * compound complex simplez easy facile light effortless smooth complicated difficult simple $ natural in genuous naive unsophisticated artless simple " foolish silly fatuous as in inewise sensib le 
Judiciousce of ~ diacfp in boco if nq
S mosfrs if saeios paialtm ciitn nmplhop mecilo acmuu a pueul paigeotu proilrtenels lhste l lauve eer d ze yet sh dtel's e 
I a $


SSS
S S S & S $ S S S S & A

SSSSS
SSSSS
SSS 5S





SSSSS
SSSSS
SSSSS
SSSS Sunso
Phi 1 ssut affae dir so a Snictiostiscal mliu  . wiite pilofiboes lsluns luds ehyseees 
SSSSSA
SSSS
SSSS
SSSS
SSSS & ~
ASR & A&SS

The superscript denotes the sense number to be associated with " simple "  . A "*" is placed to the left of those words that do not appear as main eutries in Webster ' s New Dictionary of The programs were written almost completely in FORTRANIV and have been run on the IBM  360 and the PDP i0  . Aflow chart , which stm ~ narizes these programs , appears as Appendixi . In addition , aSNOBOL 4 program has been written for the detection of chains and loops  . 
Several problems in fully achieving the stated research goals have appeared  . It was difficult to select small closed sets of words from Webster's New Dictionary of Synonyms and it was not feasible to key punch the entire dictionary  . Since the size of a truly suitable database was too large to retain in core memory  , several sample dictionaries have been selected to study the feasibility of the principles and techniques involved  . Most of the current effort has been devoted to providing programming capability for the processing of small test dictionaries  . Different words may be input with each run , thereby increasing the size of the sample data base to gain deeper insight into the properties of the entries listed in a manual dictionary  . Further computer-aided research on synonyms and antonyms will help to validate or extend the axiomatic model proposed earlier  . 
Also , future research could consider the additional relations " contrasting " and " analogous " cited in some manual dictionaries and thei automatic determination of the senses of words  . 

Bibliography\[i \].










R . Carnap , Introduction to Symbolic Logic and Its Applications  , W . Meyer and J . Wilkinson(trs . ) . Dover , N . Y . , 1958 . 
H . P . Edmundson , " Mathematical Models of Synonymy " , International Conference on Computational Linguistics  , New York ,  1965 . 
H . P . Edmundson , " Axiomatic Characterization of Synonymy and Antonymy "  , International Conference on Computational
Linguistics , Grenoble , 1967.
F . Kiefer and S . Abraham , " Some Problems of Formalization in , w Linguistics , Linguistics , v . 17, Oct . 1965, pp .  1120 . 
D . Knuth , The Art of Computer Programming : Vol . ____~l , Fundamental Algorithms , Addison-Wesley , New York ,  1968 . 
V . V . Martynov , Pyt an nj apriklad no jiling vist ykv ; tezisydo povidejmi ~ vuzovs'kojinaukovoji konferenciji  , Sept . 2228, 1960, Cernivcy . 
A . Naess , " Synonymity as Revealed by Intuition " , Philosophical
Review , v . 66, 1957, pp . 8793.
Webster's Dictionary of Synonyms , Merriam Co . , Springfield,
Mass ., 1951.
Webster's New Dictionary of Synonyms , Merriam Co . , Springfield,
Mass ., 1968.
U . Weinreich , " Explorations in Semantic Theory " , in Current Trends in Linguistics , III , T . Sebeok ( ed . ), Mouton and
Co ., The Hague , 1966.
P . Z iff , Se__mantic Analysis , Cornell University Press , Ithaca , 
N . Y ., 1960.

APPENDIXI-FLOW CHART
INPUTANALYSIS 1 . Check wellformedness of input entries2 . Edit input entries - isolate words-record grammar codes-establish relations i 
DATA-STRUCTUREC REATION i . Create directory-eliminate duplicate entries 2 . Create connectivity matrix
I ,
QUERY-SELECTION MODEi . Analyze query-s can query-flag errors 2 . Execute query-lookup words-match data structure  3  . Output answer
QUERY-VERIFICATION MODEi . Locate words 2 . Determine equivalences 3 . Output answer First the basic structure elan input deck is outline S  . 
Comments and explanation are enclosed in parentheses  . A sample run which may be input to the system follows  . 
.  .   .   .   .   .   .   .   .   . FOR MATOFTHE IN PUTDECK .   .   .   .   .   .   .   .   .   . 
PARAMETERCARD ( constant for each run).
(input to the creat ion program in the input descr ibed above  ) proto % y per OD ( input delimeter )   . 
-SELE CT MODE ( guery requests in both the verify and select mode follow  )   ( all queries which are to be matched against the datatil ~  . 
using the query input format described above . ) - EQUIVALENCE MODE ( using the set of terms inputted , determine if the set teems an equivalence class  )  ? *  ( runterminator )   . 
ASAMPLERUN , ;+ZSAEONIF~.
FOR , CS , BECAUSE , SINCE , AS , INASMUCHAS , ; BECAUSE , S , FOR , SINCE , AS , INASMUCHAS , ; SINCE , S , BECAUSE , FOR , AS , INASMUCHAS , ; AS , S~SINCE , BECAUSE , FOR , INASMUCHAS , ; INAS MUCIIAS , S , SINCE , BECAUSE , FOR , AS ,  ;
FULL , S , CO ~ PLETE , PLENARY , R'EPLETE,;
FULL , A , EMPTY , ;
COMPLETE , S , FULL , PLENAR ?, REPLETE,:
COMPLETE , A , INCOMPLETE , ;
REPLETE , S , FULL , COMPLETE , PLENAR?,;
PLENARY , S , FULL , COMPLETE , REPLETE,;
PLENARY , A , LIMITED , ;
EMPTY , S , VACANT , BLANK , VOID , VACUOUS , ;
EMPTY , S , EMPTY , ;
INCOMPLETE , M , ;
LIMITED , ~ , ;
SEVERE , S , STERN , AUSTERE , ASCETIC,;
SEVERE , A , TOLERANT , ;
STERN , S , SEVERE , AUSTERE , ASCETIC,;
STERN , A , SOFT , ;
AUSTERE , S , SEVERE , STERN , ASCETIC,;
AUSTERE , A , LUSCIOUS , ;
ASCETIC , S , AUSTERE , SEVERE , STENN,;
REMOTE , StDISTANT wFARwREMOVE ~ , ; ~ EMOVED ,  5 , REMOTEtFARrDISTANT , ;
DISTANT , S , FARsREMOVED , RENOTE,;
FAR , S#RE~OTE , RENOVED wDISTANT,;
FAR , A , REAR , HIGHwNEA ~ BY ,;
NEAR , S , CLOS EeHIG Hr NE ARB Yr;
REAR , AwFAR , ;
HIGHfSwTALL , LOFTY , :
TALL , StHIGHwLOFTY , ;
NEARBY , SwCLOSE tNEA ~, H~GN,;
HIGH . A , LOM , ;
CLOSEoS , NEAR , Ii IGH , NEARBy,:
CLOSE , S , CLOSE , ;
CLOSE , A , REMOTE , ;
SIMPLE , JIS , PU~E , ABSOLUTE , SHEER,;

PURE,JS , SIMPLE , PURE  #ABSOLUTE , SHEER,:
ABSOLUTE , JS , SIMPLE , PURE , SUEER ~;
ShEER , JS , SIMPLE , PURE , ANSOLHTE,;
COMPLEX , JS , COMPLEX , COMPLICATED , INTRICATE , TNVOLVED , KNOTTY , ;
COMPLEX , JA , SIMPLE , ;
CO~PCUND , M , ;

SI~PLE#J2S , EASY , FACILE , LIGHT , EFFORTLESS , S ~ OOTH , ;
SI~PLE , JA , COMPLICATED , DIFF\[CULT,;
COMPLICATED , S , ~NTRICAT~ , INVOLVED , COMPLEX , KNOTT? , ;
COMPLICATED , A , SIMPLE , ;
COMPLEX , S , CUMPLEX , COMPL\[CATED , INTRICATE , INVOLVED , KNITTY , ; FACILE , S , EASY , SMOOTR , LIGHT , SIMPLE , EFFORTLESS , ; LIGHT ,   , , EASY , SIMPLE , FACILE , EFFORTLESS , SMO OTH , ; ~ FFORTLESS , S , EASY , SMOCTH , FACILE , SIMPLE , LIGHT , ; SMO OTH , S , EFFORTLESS , EASY , LIGHT , SIMPLE , FACILE , ; SIMPLE , 3S , NATURAL , INGENUOUS , NAIVE , UNSOPHISTICATED , ARTLESS , ; NATURAL , S , NATURAL , SI~PLE , INGENUOUS , NAIVE , ;JNSOPHISTICATED , ARTLESS , 0 NAFFECTED , ; INGENUOUS , S , NATURAL , SIMPLE , NAIVE , UNSOPHISTICATED , ARTLESS , ; NAIVE , S , UNSOPHISTICATED , ARTLESS , INGERUOUS , NATURAL r S\[RPLE , ; I\]NSOPHISTICATED , S , NATU~AL , SIMPLE o INGENOOUS , NAIVE , A ~ TLESS ~; ARTLESS , S , NATURAL , SIMPLE , INGENUOHS , NAIVF , UNSOPRISTICATED , URAFFECTED , ; UNAFFECTED , S , ARTLESS , NATURAL , SIMPLE , INGENUOUS , NAIVE , UNSOPNISTICATEU , ;

SIMPLE , ,\]~S , FOOLISH , SI~LE , SILLY , FATUOUS , ASfNINE , ; FOO UISH ,  5 , SIMPLE , SILLY , FATUOUS , ASLNINE , ; SILLY , S , SIMPLE , POOLISH , FATHOUS , ASINIRE , ; FATUOUS , S , ASININE , SILLY , FOOLISH , SIMPLE , ;
FATUOUS , A , SENSIBLE , ;
ASININE , S , SIMPLE , FATUOUS , SILLY , FOOLISH,;
ASININE , A , SENSIBLE , JUDICIOUS,:
SIMPLE , ~ A , WISE , ;
WISE , S , SENSIBLE , JUDICIOUS , ;
WISE , A , SIMPLE , ;
SENSISLE , A , FOOLISN , FATUOUS , AS~RINE , :5ENSIBL ~ , S , NISE , JUDICIOUS , ;
JUDICIOUS , S , N\[SE , SENSIULE,;
INFE~TOH , S , UNDERLING , SUBORDI ~& TE , :
I~F ~ HIOH , 5, 1NFERIOR,:
I ~ FERIOR , A , SUPERIOR , ;
UNDERLING , ~, INFERIOR , SUBORDINATE,:
UNDERLING , A , LEADER , ~ASTER , ; 5UBO~DI~ATE , NIS , INFERIOR , UNDENLING , ; SUBORDINATE , JIS , SECONDARY , DEPENDENT , SUBJECT , TRIBUTAR? , COLLATERAL , :

SUBORDINATE , JIA , CHIEF , LEADENG,::

SUPE PrOR , S , BETTER , PREFERABLE,;
SUPERIOR , A , INFERIOR , ;
PREFERABLE , S , BETTER , SUPERIOR,;
BETTER , S , SUPERIOR , PREFE~ABLE , BETTEB,;
LEADER , S , HEAD , CBIEE , CHIEFTAIN , MASTES , ; lEADER , A , FOLLO WER , ; MAST ? R , S , CHIEF , C~IEFTAIN , HEAD , LEADER , : FOLLOWER , S , ADHEBENT , DXSCIPLB , SECTAR? , PABTIS&B , HENCHMAN , SATELLITE , ;
FOLLO WER , A , LEADER , ; hOD-SELECTNODEFORQUERY

STERN,~,SEVERE,:~TERN,A,SOFT,;~,S,STERN,;



IFFAR , A , NEAR, . AND . CLOSE , & , REMOTE, . THEN . FAR , S , BEMOTE,:
IFFAR , A , REAR , . THEN . NEAE , &, FAR#;

FAR ,&,*,. AND .*, S,HIGB,;
IFFAR , A , HIGH, . AND . HIGH , A , IOW, . THEN . HIGB , A , FAB , ; IF UNDEBLING , A , LEADER, . AND . LEADEB#&,FOLLOWEB, . THEN-UWDERLING,S,FOLLOWEB,;
SIMPLEJ 1, S , SIMPLEal , ;
SIMPLEJ ~, S,SIMPLE a ~, ;
IFSIMPLEJ 1, A , COMPLEX, . AND . COMPLEX , A , SIMPLEJ ~, . THER . 
SIMPLEJI , SI~PLEJ 1,;?IFASININE,A,SENSIBLE, . &MD . SENSXBLE , S , JUDIC\[O~S , -THEN-ASININE , A , JUDICIOUS , ;-EQUIVAL ENCE MODEE CUV(FULL , COMPLETE , FULL , PLENARY , FULL , BEPLETE , COMPLETE , PLENARY , RBPLETE , FULL , )E ~ UV(HIGH , TALL , HIGH , LOFTY , LEADER , HEAD , LEADE ~ , MASTBB , ) y
