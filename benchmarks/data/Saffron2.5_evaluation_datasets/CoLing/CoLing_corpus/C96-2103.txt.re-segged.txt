Coordination in Tree Adjoining Grammars :
Formalization and Implementation *
Anoop Sarkar and Aravind Joshi
Department of Computer and Information Science
University of Pennsylvania
Philadelphia , PA 19104
anoop , joshi Olinc.cis.upenn , edu
Abstract
In this paper we show that an account
for coordination can be constructed using the derivation structures in a lexicalized Tree Adjoining Grammar  ( LTAG )  . 
We present a notion of derivation in
LTAGs that preserves the notion of fixed constituency in the LTAG lexicon while providing the flexibility needed for coordination phenomena  . We also discuss the construction of a practical parser for LTAGs that can handle coordination including cases of nonconstituent coordination  . 
1 Introduction
Lexic Mized Tree Adjoining Grammars ( LTAG ) and Combinatory Categorial Grammar ( CCG )   ( Steedman ,  1997 ) are known to be weakly equivalent but not strongly equivalent  . Coordination schema have a natural description in CCG  , while these schema have no natural equivalent in a standard LTAG  . 
In ( Joshi and Schabes ,  1991 ) it was shown that in principle it is possible to construct a CCG-like account for coordination in the framework of LTAGs  , but there was no clear notion of what the derivation structure would look like  . In this paper , continuing the work of ( Joshi and Schabes ,  1991) , we show that an account for coordination can be constructed using the derivation structures in an LTAG  . 
Using the notions given in this paper we also discuss the construction of practical parser for LTAGs that can handle coordination including cases of nonconstituent coordination  . This approach has been implemented in the XTAG system  ( XTAG Research Group ,  1995 ) thus extend -* This work is partially supported by NSF grant NSF-STCSBR  8920230  . ARPA grant N00014-94 and ARO grant DAAH04-94-G0426  . We want to thank Nobo Komagata , Seth Kulick , Jong Park , James Rogers , B . Srinivas , Mark Steedman , and two anonymous reviewers for their valuable comments  . 
ing it to handle coordination . This is the first full implementation of coordination in the LTAG framework  . 
2 LTAG
An LTAG is a set of trees ( elementary lrees ) which have at least one terminal symbol on its frontier called the anchor  . Each node in the tree has a unique address obtained by applying a Gorn tree addressing scheme  , shown in the tree ol ( cooked ) ( Fig .  1) . qYees can be rewritten using snbstitn-tion and adjunction  . A history of these operations on elementary trees in the form of a derivation tree can be used to reconstruct the derivation of a string recognized by a LTAG  . In Fig .  1 , the treefl ( dried ) adjoins into ~ ( beans ) and trees ~ ( John ) and a ( beans ) substitutes into a ( cooked ) to give a derivation tree for John cookedried beans  . Each node in the derivation tree is the name of an elementary tree  . The labels on the edges denote the address in the parent node where a substitution or adjunction has occured  . 
TAGG : a ( cooked ) o  ~ ( Jhn ) o  ~ ( beans ) f i ( dried ) oS NP NP
ADJN*1PI . IIP ~ John be an sdried cfx ) kc(I//2 ~
NP ~ Pa(c00 ked)\]/~
VNP
I///~'2jt , hnc/mked~a(John ) a ( beans)
IIADJ ~ q\[~(dried ) Idried beans
Derivatit , n Tree Derived Tree
Figure 1: Example of an LTAG and an LTAG derivation 3 Trees as Structured Categories In ( Joshi and Schabes ,  1991 ) elementary trees as well as derived trees in an LTAG were considered as structured categories defined as a  3-tuple of an elementary or derived tree , the string it spanned in Fig .  2 . Functional types for trees could be thought of us defining un-Curried flmctions colrcs ponding to the Curried CCG counterpart  . A fimctional type was given to sequences of lexical items in trees even when they were not contiguous  ; i . e . discontinuous constituents were also assigned types  . They were , however , barred from coordinating . 
OlS
NP ~ VP
VNP
LI eats cookies 11 eats cookies "~1 NP--'~"S Figure 2: Structured Category for cats cookies Coordination of two structured categories cq  , a 2 succeeded if tilelexieai strings of both categories were contiguous  , the functional types were identical , and the least nodes dominating tile strings spanned by the component tree have the same label  . For example , in Fig .   3 the tree corresponding to eats cookies and drinks beer would be obtained by : \]  . equating the NP nodes I in cq and t 72 , preserving the linear precedence of the arguments . 
2 . coordinating the VP nodes , which are the least nodes dominating tile two contiguous strings  . 
3. collapsing the supertrees above the VP node.
4 . selecting the leftmost NP as the lexical site for the argument  , since precedence with the verb is maintained by this choice  . 
olv Po2s NP ~ VAL
VNP VNP ~ and
I 1:eals c(~)kies 12: dlil ~ ; beereals ? l ) okie a drinks I : ccr1:1:NP~S't2:NP ~ , ' qI : cats co~lkics alt ddrinks beer
I : NP - - - - : ~" S
Figure 3: Coordination of eats cookies and drinks beer The process of coordination built a new derived structure given previously built pieces of  1This notion of sharing should not be confils cd with a deletion type an  ; dysis of coordination . The scheme presented in ( Joshiattd Schabes ,  1991 ) as well ~* s the analysis presented in this paper are not deletion analyses  . 
derived structure ( or perhaps elementary structures )  . There is no clear notion of a derivation structure for this process  . 
4 Coordination in TAG
An account for coordination in a standard LTAG cannot be given without introducing a notion of sharing of arguments in tile two lexically anchored trees because of the not  ; ion of localily of argurnents in I?FAG . In (1) for instance , the NP the beans in I ; he " right node raising " construction hast obc shared by the two eleinentary trees  ( anchored by cooked and ate respectively )  . 
( l )   ( ( ( Harry cooked ) and ( Maryate ) ) the beans ) We introduce a notation that will enable us to talk about this more formally  . In FiR .   1 the notation ~ denotes that a node is a nonterminal and hence expects a substitution operation to oc ~ cur  . The notation , mark stile foot node of an auxiliary tree . Making this explicit we c~m view an elementary tree as a ordered pair of the tree structure ~ n  ( laordered set 2 of such nodes fi'om its frontier 3  , e . g . the tree for cooked will be represented ~ s ( ~ ( cooked )  ,  \] , 2 . 2 . Note that this representation is not required by the LTAG formalism  . The second projection of this ordered pair is used here for ease of explication  . Let the second projection of the pair minus the foot nodes be  (  ; he substitution set . We will occasionally use the first projection of the elementary tree to refer to the ordered pair  . 
Setting up Contractions . We introduce an operation called build -contraction that takes an elementary tree  , places a subset from its second projection into a contraction set and assigns the difference of the set in the second projection of the original elementary trec and the contraction set to the second projection of the new elementary tree  . 
The contents of the contraction set of a tree can be inferred from the contents of the set in the second projection of the elementary tree  . Hence , while we refer to the contraction set of an elementary tree  , it does not have to b c stored along with its representation  . 
Fig . 4 gives some examples ; each node in the contraction set is circled in the figure  . In the tree ( a ( cooked ), 1, 2 . 2 ) application of the operation on the NP node at address  2  . 2 gives us a tree with the contraction set 2 . 2 . The new tree is denoted by a ( eook cd ) u . 2, 1), or o ~( cooked ) D . 2 for short . Placing the NP nodes at addresses 1 and 2 . 2 of the tree a ( cooked ) into the contraction set gives us a ( cooked ) tl , 2~ ) . 
2'Fhc ordering is given by the fact that the elements of the set ~ re Gorn ~ tddresses  . 
3We sh~ll assume there are no adjunction constraints in this paper  . 
61 1a ( eooked ) Sa ( cexlked ) SI ~ J j - . . . . I ~ . .
s P ~ v p ~ w
II cooked c(mkcd
Figure 4: Building contraction sets
We assume ~ hat the anchor cannot be involved in a build-contraction  . This assumption needs to be revised when gapping is considered in this framework  ( ?5 )  . 
The Coordination Schema . We use the standard notion of coordination shown in Fig  . 5 which maps two constituents of like type , but with different interpretations , into a constituent of the same type 4 . 
X Cn lq X
Figure 5: Coordination schema
We add a new rewriting operation to the LTAG formalism called conjoin  5  . While substitution and adjunction take two trees to give a derived tree  , conjoin takes three trees and composes them to give a derived tree  . One of the trees is always the tree obtained by specializing the schema in Fig  . 5 for a particular category 6 . 
Informally , the conjoin operation works as follows : The two trees being coordinated are substituted into the conjunction tree  . This notion of substitution differs from the traditional LTAG substitution operation in the following way : In LTAG substitution  , always the root node of the tree being substituted is identified with the substitution site  . In the conjoin operation however , the node substituting into the conjunction tree is given by an algorithm  , which we shall call Find Root that takes into account the contraction sets of the two trees  . Find-Root returns the lowest node that dominates all nodes in the substitution set of the elementary tree  7  , e . g . FindRoot(a(cooked)2 . 2) will return the root node , i . e . corresponding to the S4 In this paper , we do not consider coordination of unlike categories  , e . g . Pat is a Republican and proud of it . ( Sarkar and Joshi , 1996) discusse such cases , following Jorgensen and Abeill 6 (1992) . 
SLater we will discuss an alternative which replaces this operation by the traditional operations of substitution and adjunction  . 
6 The tree obtained will be a lexicalized tree , with the lexical anchor as the conjunction : and , but , etc . 
7This ensures the node picked by FindRoot always dominates a contiguou string in a derivation  . This captures the string contiguity condition that was used conjS instantiation of the coordination schema  . 
FindRoot(c~(eooked)1,2 . 2) will return node address 2 . 1, corresponding to the V conj V instanti-ation . 
The conjoin operation then creates a contraction between nodes in the contraction sets of the trees being coordinated  . The term contraction is taken from the graph -theoretic notion of edge contraction  . In a graph , when an edge joining two vertices is contracted , the nodes are merged and the new vertex retains edges to the union of the neighbors of the merged vertices s  . The conjoin operation supplies a new edge between each corresponding node in the contraction set and then contracts that edge  . As a constraint on the application of the conjoin operation  , the contraction sets of the two trees must be identical  . 
Another way of viewing the conjoin operation is as the construction of an auxiliary structure fi'om an elementary tree  . For example , from the elementary tree ( a ( drinks ) ,  1 ,  2 . 2) , the conjoin operation would create the auxiliary structure  ( fl ( drinks ) 1 ,  2 . 2) shown in Fig .  6 . The adjunction operation would now be responsible for creating contractions between nodes in the contraction sets of the two trees supplied to it  . Such an approach is attractive for two reasons . First , it uses only the traditional operations of substitution and adjnnction  . Secondly , it treats conjX as a kind of " modifier " on the left conjunct X  . We do not choose between the two representations but continue to view the conjoin operation as a part of our formalism  . 

VNP ~
IdnnL  ~
Figure 6: Coordination as adjunction.
For example , applying conjoin to the trees Conj ( and ) , a ( eats ) 1 and c ~ ( drinks ) l give sustile derivation tree and derived structure for the constituent in  ( 2 ) shown in Fig .  7 . 
(2)... eats cookies and drinks beer.
In Fig . 7 the nodes ( ~ ( eats ) 1 and a ( drinks ) \[ll signify an operation left incomplete at address  1  . 
in ( Joshi and Schabes , 1991) . A coordinated node will never dominate multiple foot nodes  . Such a case occurs , e . g . , two auxiliary trees with substitution odes at the same tree address are coordinated with only the substitution odes in the contraction set  . 
SMerging in the graph-theoretic definition of contraction involves the identification of two previously distinct nodes  . In the process of contraction over nodes in elementary trees it is the operation on that node  ( either substitution or adjunction ) that is identified . 

Conj(~ml)VI'SSv , .....
cot , i ( , , , ,+ \[ I I I cals el'tiMes drinks b~r oc ( cats ) I a ( drinks ) Derived structure 2 . 21 /2 . 2I , ( cookies ) a ( beer)
Derivation tree
Figure 7: An example of the conjoin operation.
The Effects of Contraction . One of the effects of contraction is that ; the notion of a derivation tree for the 12FAG formalism has to be extended to an acyclic derivation graph  9  . Simultaneous substitution or adjunction modifies a derivation tree into a graph as can be seen in Fig  .  8 . 
If a contracted node in a tree ( after the conjoin operation ) is a substitution ode , then the argument is recorded as a substitution into the two elementary trees ms for example in the sentences  ( 3 ) and ( 4 )  . 
(3) Chapman eats cookies and drinks beer.
(4) Keats steals and Chapman eats apples.
Fig .   8 contains the derivation and derived structures for  ( 3 ) and Fig . 9 for (4) . In Fig . 9thed ( , riw ~- tiongraph for sentence ( 4 ) accounts \[' or the coordinations of the tradition M nonconstituent " K eats steals " by carrying out the coordination at the root  , i . e . SconjS . No constituent corresponding to " Keatssteals " is created in the process of coordination  . 
1) SVP Se~(eats ) llIot(tlrinks ) llINP VP and
Lc  ~ ( cnokies ) 0I ( Chapman ) or ( beer ) Chapman VNP VNP i II\[eats cookies drinks beer Dgl + ivation  , , itrtlt~tufc , Derive zl slit lctt l re Figure 8: Derivation for Chapman eats cookies and drinks beer  . 
The derived structures in Figs . 8 and 9 are diff , cult to reconcile with traditional notions of phrase structure  1?  . However , the derivation structure gives us all the information about dependency ? We shall use the general notation derivation structure to refer to both derivation trees and derivation graphs  . 
t?Mc Cawley ( 1982 ) rMsed the heterodox view that a discontinuous constituent structure should be given for right node raising cases  , having the same notion of constituency as our approach  . I Iowever , no conditions on the construction of such a struct m ' e was given  . In fact , his mechanism also covered cases of parenthetical placement  , scrambling , relative clause extraposition
Colj( ; md ) S ~ Su ( Keats ) a ( applcs )   ( y ~ Chapman ) Keats V Chapman v NP
IIIsteMseats apples
Derivation structule Derived structure
Figure 9: Derivation for Keats steals and Chapman eats apples  . 
that we need about the constituents . The derivation encodes exactly how particular elementary trees are put together  . Obtaining a tree structure fi:oma derived structure built by the conjoin operation is discussed in  ( Sarkar and Joshi ,  1996) . 
Considerations of the locality of movement phenomena and its representation i the LTAGt br -realism  ( Kroch and Joshi ,  1986 ) can also now ex-pkdn constraints on coordinate structure  , such as a cross-the-board exceptions to the well known coordinate structure constraint  , see Fig .  10 . Also in eases of unbounded right node raising such as Keats likes and Chapman thinks Mary likes beans  , Chapman thinks simply adjoins into the right conjunct of the coordinate structure  11  . 
Elelnenlary flees

VNP
II likcdBtaicdEi

Salld S
Coinp S * wh h : h
I ) eriw ~ ticmStnlcture 0 ~( caoke , l)t///~2 Colj ( and )
I:)' . (Mary ) a ( b can s ) ~ ni ' ( \] ~ ( Keats ) eL ( Chapman ) 
Derived s\[i \] lctllrei?\](hunp S **
NI'VP NPx NP which cooked the b cansKeats liked and Chapman hated Figurc  10: Derivation tbrMary cooked the beans which Keats liked and Chapman hated  . 
5 Contractions on Anchors
An LTAG along with the operations of substitution and adjnnction also hastile implicit operation of lexical insertion  ( represented as the diamond mark in Fig .  11) . Under this view , the and heavy NP shift . 
1 1A eomparision of this paper's approach with the derivational machinery in CCG and the devices of  3D coordination is done in ( Sarkar and Joshi ,  1996) . 

LTAG trees are taken to be templates . For example , the tree in Fig . 11 is now represented as < ~( eat ), 1, 2 . 1, 2 . 2\]) . 


NP ~ VP
VONP ~ teats
Figure 11: Lexicalization in a LTAG.
If we extend the notion of contraction in the conjoin operation together with the operation of lexical insertion we have the following observations : The two trees to be used by the conjoin operation are no longer strictly lexicalized as the label associated with the diamond mark is a preterminal  . Previous uses of conjoin applied to two distinct trees  . If the lexicalization operation is to apply simultaneously  , the same anchor projects two elementary trees from the lexicon  . The process of contraction ensures that the anchor is placed into a pair of LTAG tree templates with a single lexical insertion  . 
Gapping . Using this extension to conjoin , we can handle sentences that have the " gapping " construction like sentence  ( 5 )  . 
(5) Johnate bananas and Billstrawberries.
The conjoin operation applies to copies of the same elementary tree when the lexical anchor is in the contraction set  . For example , leto ~( eats ) be the tree selected by cats . The coordination of o ~( cats ) 2 . l with a copy of itself and the subsequent derivation tree is depicted in Fig  .  1212  . 
SConj ( and )
S and 51~~c ~( cat-s ) 2.1 a(cats ) 2.1
V . N . + NP + eats Nr ~
I eats
Figure 12: Handling the gapping construction using contractions  . 
An extension of the approach here will be to permit the conjoin operation to create contractions on all the nodes in contraction sets that it  a2In English , following Ross (1970) , the anchor goes to the left conjunct . 
dominates during a derivation , allowing us to recognize cases of gapping such as : John wants Penntow in and Bill  , Princeton . and John wants to try to see Mary and Bill , Susan . 
Coordinating Ditransitive verbs . In sentence ( 6 ) if we take the position that the string Mary a book is not a constituent  ( i . e . give has a structure as in Fig .  13) , then we can use the notion of contraction over the anchor of a tree to derive the sentence in  ( 6 )  . The structure we derive is shown in Fig .  14 . 
(6) John gave Mary a book and Susan a flower.


VNP ~, NP ~ r gave
Figure 13: Tree for a ditransitive verb in LTAG.
SVPS
NP VP . VP
John V NP NP NP NP
III Pr gave Mary a book Si is an aflower Figure 14: Derived tree for John gave Maryabook and Susan a flower  . 
Interactions . Permitting contractions on multiple substitution and adjunction sites along with contractions on the anchor allow the derivation of sluicing structures such as  ( 7 )   ( where the conjunct Bill too can be interpreted as \ [ John loves \] Bill too or as Bill\[loves Mary \] too  13  . 
(7) John loves Mary and Bill too.
6 Parsing Issues
This section discusses parsing issues that arise in the modified TAG formalism that we have presented  . We do not discuss general issues in parsing TAGs , rather we give the appropriate modifications that are needed to the existing Earley-type parsing algorithm for TAGs due to 
Schabes and Joshi (1988).
The algorithm relies on a tree traversal that scans the input string from left to right while recognizing the application of the conjoin operation  . 
The nodes in the elementary trees are visited in a topdown left to right manner  ( Fig .  15) . F , ach dot in Fig .   15 divides the tree into a left context and a 13Whether this should be derived syntactically is controversial  , for example , see ( Steedman ,  1990) . 
614 right context , enabling the algorithm to scan the elementary tree while trying to recognize possible applications of the conjoin operation  . 
S4" B ? ? a .,' A , (7
Figure 15: Example of a tree traversal 3'he derived structure corresponding to a coordination is a composit c structure built by applying the conjoin operation to two elementary trees and an instantiation of the coordination schema  . 
The algorithm never builds derived structures . It builds the derivation by visiting the appropriate  , ,() des during its tree traversal it , the following order ( see Fig .  16) . 
I 2 .  -  . 3d .   .   . 5 6  .   .   . 2 ' 7 '  .   .   .  ' ( 4 '  .   .   . 5/6 I .  -  . 7 8 The algorithm must also compute the correct span of the string for the nodes that have been identified via a contraction  . Fig .   16 gives the possible scenarios t br the position of nodes that have been linked by a contraction  . Whet , loot nodes undergo contraction , the algorithm has to ensure that both the foo ~ nodes share the subtree pushed under them  , e . g .  9 . ? ?10 and 9~ . ??10 ~ inl , ' ig . 16 ( a ) . Similarly , when substitution odes undergo contraction , the algorithm has to ensure that the tree recognize dile by pr  ( ' . dicting a substitution is shared by the nodcs , e . g . 11???12 and ll ' .   .   . 12' in Figs . 16 ( b ) and 16 ( c) . '1' he traversals9 . . . 10 shoulds t ) an the same length of the intro , as 9' .   .   . 10', similarly for 11 . .  . 12 and 11' .   .   . 12'  . 
Various positions for such traversals is shown in Fig  .  116 . A derivation is valid if the input string is accepted and each i  , odein a contractions l ) ansa valid subs , ring in the inI ) ut . 'rite complete and formal ( leseription of the l ) arsing algorithm is given in ( Sarkar and Joshi ,  1996) . 
7 Conclusion
We have shown thai ; an acconn Ltbr coordination can be given in a I/I . ' AG while maintaining the notion of a derivation strncture which is central to the L'I'A  ( : I approa ( - h . We showed that tixed con-stituen ( -y can be maintained at the level of the elementary tree while accounting for cases of nonconstituent coordination and gapping  . We discussed the construction of a practical parser for \]  ; I'AG that can handle these ( -ases of coordination . 
xoXo-- ( 2 '  )  '  ( a ) AA ( 3  ) ~ ( 6 )   ( 3~ ( 6 '  )   ( 9 )  ~ ~ ( 10 )   ( 9' )   ( 10' ) t
X doesnil , dotninale A ~( b ) (3 ~ . X ~ (6) (3~ oXo ~6 , )  ( 11 ) ? ~ ( 12 )   ( Ir ~ ~ ( 12' )   ( c ) Figure 16: Moving the dot while recognizing a conjoin operation 

Jorgensen , 1I . and A . Abeiild .  1992 . Coordination of " Unlike " ( httegories in TAG . In \] ~ roceedings of the 2nd 7' AG Workshop , Philadelphia , PA . 
Joshi , Aravind and Yves Schabes .  1991 . Fixed and tlexible phrase structnre : Coordination iTree Adjoining Grammar  . Presented attile DARPA Workshop on Spoken Language Systems  . Asilomar , CA . 
Kroch , A . and A . K . Joshi .  1986 . An Myzing extraposition in a tree adjoining gnmm , ar . In G . lluck and A . Ojeda , editors , Syntax and Semantics : l ) is con-tinuous Constituents . Academic Press , New York . 
McCawley , James .  1982 . Parcnthctic Ms and discomtinuous constituent structure  . Linguistic Inquiry , 13(1):91-106 . 
Ross , John .  1970 . Gapping and the order of constituents . In M . Bicrwisch and K . Iieidolph , editors , l'rogress in Linguistics . Mouton , The Iiague . 
Sark ~ r , Anoop and Aravind Joshi .  :1996 . II andling Coordinationia Tree Adjoining Gramma . r . '\[' ech--nicM report , Dept . of Computera . ndInfo . Sc . , Univ . 
of Pennsylwtnia , Philadelphia , PA.
Schabes , Yves and Aravind K . Joshi .  71988 . An F , arley ~ type parsing algorithm for tree adjoining grammars  . In 26th Meeting of the Association for Computational Linguistics  , Buffalo , NY . 
Steedman , Mark .  1990 . Gapping as constituent cooldination . Linguistics and Philosophy , 13:207264 . 
Steedln~n , Mark .  1997 . Surface Structure and inter-prctatiou : Unbounded and Bounded Dependency in Combinatory Grammar  . I , inguistic Inquiry monograph ( to ~ q ~ pear) . M\]T Press . 
XTAG Research Group .  1995 . A Lexicalized ' Free Adjoining Grammar for F , nglish . Technical report , IRCS TechRpt .  95- . 03, University of Pennsylvania,
Philadelphia , PA.

