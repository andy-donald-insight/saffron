A Concept of Derivation for LFG
Jiirgen Wedekind
Department of Linguistics
University of Stuttgart
West Germany

In this paper a version of LFG will be developed , which has only one level of representation and is equivalen to the modified version of  \[2\]  , presented in\[3\] . The structures of this mono-stratal version are fstructures  , augmented by additional information about the derived symbols and their linear order  . For these structures it is possible to define an adequate concept of direct derivability by which the derivation proeess becomes more efficient  , as the f-description solution algorithm is directly simulated during the derivation of these structures  , instead of being postponed . Apart from this it follows from tiffs redueability that LFG as a theory in its present form does not make use of the c-structure information that goes beyond the mere linear order of the derived symbols  . 
1. Introduction *
The derivation process of sentences in LFG as defined in  \[2\] is very complex , because an additional filter has to be applied to derived c-structures  . Within this filter component the fstructures are constructed  . An f-structure can be regarded as a special kind of labelled directed acyclic graph  ( DAG )  , which re-presents a structure of partial functions  ( i . e . the labels of the edges leaving each node have to be different  )  .  1 ) A terminal string ( x ) is wellformed if it satisfies the following conditions : i  . There is a e-structure for x that can be generated by the contextfree  ( of ) base of the grammar . 
ii . There is an f-structured and a mapping f from the set of nodes of c to the set of subDAGs of d such that d is a unique minimal f-structure that satisfies the annotations associated with the c -structure nodes  ( f and d are constructed by the f-description solution algorithm  , for short KB-algorithm ) . 
iii . d satisfies all constraints in the f-description . 
iv . d is complete and coherent.
The derivation process is performed by checking these conditions in the order i  . < ii . < iii . ,iv . .
This kind of derivation has several theoretical and practical disadvantages : a  . A parser/generator that works in accordance witb this deri-rational process is not very efficient  , because usually many strings are parsed completely or many c-structures are generated completely  , although the strings themselves are not wellformed and therefore rejected by the filter  ( ii . -iv . ) . 
b . The process is formally not very transparent and complicates a comparison wlth other formalisms  . 
c . The grammar is multistratal . It has two levels of representation ( c-structures , fstructures ) , although it can be shown that the c-structure information  , which goes beyond the linear order of the derived symbols is not exploited in the present version of the theory  ( \[2\] , \[3\]) at all .  2 ) In the following it will be demonstrated that for each LFG a mono-stratal version can be constructed  , which describes the same language with the monostratal concept of derivation  . The entities of these derivations are augmented fstructures which are constructed along the following lines : In the KB version the c -structure derivation of a wellformed terminal string is a sequence of annotated c-structures  , where each c-structure results from the application of an annotated cf rule to a terminal node of the preceding c-structure  . If one applies the KB-algorithm to each annotated c-structure then it constructs a minimal f -structure and a mapping from the e-structure nodes to the substructures of the f-structure  . The augmented fstructures are then constructed by attaching the occurrences of the derived string  , represented by the labelled terminal nodes of the c-structure tree  , as additional labelled edges to the start nodes of those subDAGs  , which are the values of the mapping for the corresponding c-structure nodes  . An example:
NP VP ~~"~#7\~=>/, l,1
NP NP(<I , NP > , <2, V > , <3, NP >)
The reduction will be complete , if a definition of an adequate concept of direct derivability for these structures can be given  . 
This will be done here in three steps in the following sections  . 
The reducability to these structures will show that the LFG makes no essential use of c -structure informations  , as the new structures contain only information about the linear order of the derived symbols and no other overtor hidden c-structure information  . ( The wellformedness conditions iii . and iv . are defined on fstructures . ) The reduction leads to a more efficient derivation process  , because the postponed filter component ii .   ( the KB-algorithm ) is integrated in the concept of direct derivability  .  3) 2 . Derivation off-description solutions parallel to c-structures In tiffs section the derivation process of KB will be modified in such a way  , that in each step , besides a partial c-structure , also that partial f-structure is generated , which would be the result of the KB-algorithm , if it were applied to the annotated partial c -structure  . A derivation is then a special sequence of triples consisting of a partial c-structure  , a partial f-structure and a mapping from the c -structure nodes to the subDAGs of the f -structure  . Before stating the definition for the start entity and the concept of direct derivability the derivation concept will be defined analogously to the standarderivation concepts  . 
DEFA derivation is a sequences 0 . . . sn where si = : < c , d , f > ; 0 ~ i ~< n ; c=:c-structure ; d = : partial f-structure f ~ IN ( c ) -> T ( d ) \]  ( mapping from the c-struoture nodes ( N ( c ) ) to the subDAGs of " d ( T ( d ) ) ) 
So =: start triples =: derived triple ; with a c-structure of a terminal strings i . CF -> si ; 0 < i ~ < n ( ~ follows from ~ . lbY rule ? ) The c-structure of the start triple consists , as usual in c-structure derivations , only of the start node (1) with the label S(<I , S >) . If each node is to be in the domain off , each node ( including the start node ) has to be annotated with a'v'met a variable . Thus it is possible to apply the KB-algorithm to the start node  . The algorithm creates a placeholder ( DAG , consisting only of one node ) , to which the c-structure node is mapped . So it is adequate to introduce for do a minimal DAG to which the c-structure node  ( I ) is mapped quaf0 . 
S d 0
So = << l,S > , f0 > f01___).
As the entities of a derivation are complex , an application of a rule to a triple expands each component of that triple  . The expansion , that is a ohieved by a rule , can then be isolated if one applies the KB -algorithm to the annotated c-structure which is introduced by this annotated rule  . Example : Thus it is possible to construct for each annotated cf rule ~- with cf baser a rule of the form < Pl  ( r ) '<<~'P2 ( r ) >' dr'fr >> where Pl ( r ) is the first projection of r ( the left hand side of the rule r which equals the lefthand side of r -'  ) and <~ t , P2(r ) > is the introduced c-structure .   ( If one represents the cf part of the righthand side of the annotated rule ?  ( P2 ( r ) ) as a sequence of symbols in the set theoretical sense  , it is possible to interpret the integers as nodes and the symbols as labels of the nodes  . 
For the above rule : < ~, < I , NP > , <2, VP > > . ) The concept of direct derivability now has to be defined as follows : The application of a constructed rule to a triple  , which is constructed for an annotated c-structure by the KB-algorithm  , has to yield exactly that expansion that would be the result of the KB-algorithm  , if it were applied to the annotated c-structure which is derived by the corresponding annotated rule  . Before stating the expansions formally we will describe them informally and illustrate them by an example  . That the definition of direct derivability is adequate in this sense can only be sketched here  . 
Assuming that the triples i . l = < C , d , f > cSdvPJ\[(^SUBJ ) = v\]_t ^= v\]~~'~ . V~1 ~" o
NP VP/V'/\ ,  : \[ ( ^OBJ ) = v\]t ( ~ VCOMP ) = v\]/\[^=vl/I ~ ///////~12311232/~
VV ' ~. ~
VV'f\[^=v\]\[ ( ^ VCOMP ) = v\] is derived and the rule ~ ( above ) is applied to node 122 , tile new components of si = < c' , d' , f '> are determined as follows : 4) 1 .   ( c-structure ) The new c-structure is the expansion which results from applying r to a terminal node  ( 122 in the example ) which is labelled with the lefthand symbol of the rule  . 
2 . ( f-structure ) As the c-structure , introduced by the rule , expands the node 122 in c' , all '^' metavariables in the annotations of the rule have to be instantiated by  122   ( and not by ~ )  . 
Thus )   f122=f \[' and it is necessary to merge the subDAG of d denoted by dVCOMP withdr  .  5 ) The new DAGd'is then the minimal extension of d which results from unifying the DAG which is introduced by the rule with that subDAG of d to which the expanded node was mapped quaf  . 
d &,' A "~@ t . , ~ .   . ~ . d'3 . (mapping ) As the new DAG is an extension of dall attribute paths of d are also paths of d '  . 
a ) If the value off for a node eDom ( f ) is denoted in d by dp , it's f'value ind ' will be denoted by d'p . 
b ) For the new nodes f ' is defined as follows : As the c-structure introduced by the rule expands  122 inc ' , the node 0 is identified with 122 . Therefore ' f122 = f ~' and by the application of the Merge operator dVCOMP ~ driS constructed as the  ( new ) substructure of d ' , denoted by d'VCOMP . By the application of the Substitute operator d ' VCOMP becomes the  ( new ) value of ~' z2 , By the expansion of 122 , a node j of the c-structure , introduced by the rule , becomes the node 122 j in c ' . If ' f ; . = drP " then by the recursion of MergedVCOMP p'udrp ' is constructed as the  ( new ) Substituted VCOMPp'tJ drp'becomes the ( new ) value of ~22j ? Therefore : If the value of fr for the node j ( ~< j ) of the rule'sc-structure is denoted by drP ' and the value off for the expanded node i is denoted by dp  , then the value of f ' for ij is denoted by d'pp' . For the new nodes in the example the values of f ' are determined as follows : f ~= drOBJ'  f12~ dVCOMP => f'1221 = d'VCOMPOBJ f~=d rVCOMP' f12~ dVCOMP => f'122Y d ' VCOMPVCOMP and < c' , d' , f '> isc'Sd'121"-'-f122/123t'
NP VP/V' .  ~ -~/\ ,  \[  ( ^OBJ ) --v\]~COMp ) :v\]^:g/%1232 112322 ~
VV'f't ^= v\]\[(^VCOMP ) = v\]
The concept of direct derivability is defined in the following way : DEF < c  , d , f >= ~ . fT > si = < c' , d' , f '> <-> c-y->c ' and if node i is expanded d ' = I~d '~DAGId-d"AVpePATH  ( fi = dp -> d " p = dpuc ~ ) ) fk \[ N ( c' ) -> T ( d' ) \]
VjeDom(f)VpePATH(fj = dp->f\]=d'p)f . ' . = d'pp')VjeDom(I~(r )) Vp , p'ePATH(fi = dp^fjL drP'->~j3 . Derivation off-descriptlon solutions parallel to strings Since in the derivation process ketched above only the values off for the terminal nodes are needed to define the next triple  , it is possible to define an alternative version for strings instead of c-structures  . The c-structure information which goes beyond the linear order of the labelled terminal nodes is not required  . 
Derivations are to be defined for tripels < w , d , g > , ~nanalogy to Chap .  2 , with w being a string , da DAG and ge\[~?->T ( d)\] . The entities of a derivation and the triples which are introduced by tile rules can be constructed from the entities of the preceding version easily : If < c  , d , f > is such an entity of the preceding version then w is the final string represented by c  , the DAG equals d and g maps each occurrence of the final string represented by c to that subDAG of d which is tt le value off for the corresponding terminal node  . The start triple is s , = << l , S> , do , f ? > and a rule has the form < Pl(r ) , <P2(r) , dr , gr > > ~ , By this construction one obtains the following entities for so and for the examples ~- and si  . 1 of the preceding section : so do ? si . 1d . 
(<1, S > .'~,2~,
VP --> grTT(<I~NP > ,  <2 , NP > ,  <3 , VP > ,  <4 , V > ,  <5 , V > ,  <6 , V '> < I , NP > ,   <2? VP ~ The definition of an adequate concept of direct derivability is now relatively simple  . Assuming that si . 1 = < w , g > and si = < w ', d', g'>:1 . (string ) The direct derivability for the strings is defined as usual : w ' follows from w iff there is a rule ~" and w'follows by the cf part of T from w  . 
2 . ( f-structure ) Because a . the DAG , to which the expanded node is mapped in the c -structure version equals that DAG  ( dp )  , to which the replaced occurrence is mapped and b . the DAG dr , which is introduced by a rule , is in both versions the same ; it follows that the minimal extension of d , which results from dpud r , equals the derived DAG in the c-structure version . 
3 . (mapping ) To define g ' we have to account for : a . The indices of the occurrences of w corresponding to the terminal nodes in the right context of the expanded node in the c-structure version are increased at the transition to w ' depending on the length of the ril  , hth and side of the applied rule ( IP e(r)l ) . 
b . The indices of the occurrences of l ) ( r ) which are used to construc the new nodes in timc -structure version are here increased depending on the index of the replaced occurrence  . This leads to the following definition : DEF < w , d , g >= S ~ . l ~ -> si = < w' , d' , g '> <-> w-F > w ' and if < i , wi > is the replaced occurrenced , =r\]d . gDAG\[dt_-_-d" , , , ?~PATH(g(<i , v ~ > ) = dp->d"p = dpudr ) g ' ~\[ w'->T ( d' ) lVj ~ Dom ( w' ) (j<i -> Vly , PATH(g(<j , ~>) = dp->g'(<j , w ; > ) = d'P ) ) VjsDom ( w' ) (j>~i+ ( lPer ) l ) -> VpePATH ( g ( <J- ( IP2 ( r ) I-I ) ~'> ) = dP->g' ( j , w '>) = d'p )) Vj ~ Dom(w')(i~j < i + lP2(r ) l->V p , p ' ePATH(g(<i , ~>) = dp ^ gr(<j-(i-1) , w ~> = drP'->g'(<j , w ~>) = d'p p ')) 4 . The monostratal derivation concept One obtains the monostratal version quite naturally if for all triples < w  , d , g > of a derivation and a rule's right side in the string version the arguments of g are attached as additional label-led edges to the start nodes of the subDAGs of d to which they are assigned qua g  . Thus one obtains for the start triple , the derived triples i . 1 and the ruler the following structures : 6)
So 11si\[,~/CI~--~Z~vp 11~Np,~v0~\v
NP VP V
If < w , d , g > is a triple of the string version the na DAGs = Nd'e DAG Id-C  ; d '^ V < i , wi > ~ wVpePATH(g(<i , wi > ) = dp->d'p ( i ) =~  ) is the corresponding entity in the monostratal version  . These entities are augmented partial fstructures . They have additional terminal edges . These edges are labelled with integers and lead to elements of the vocabulary  . The labels of such edges which are attached to different nodes have distinct labels  . All such edges represent a string over V . 
If FSp is the ( undefined ) set of partial fstructures then the new structures are elements of the set FSeFSo =  ( s ~ DAG\]~de FSp ~ we V * 3g ~\ [ w -> T ( d ) \] ( s = l'q d'e DA Gld-rod '" , V < i , wi > ew VpaPATH(g(<i , w > ) = dp->d'p ( i ) = wi ) ) ) The string of such a structures ( S ( s ) ) is simply the set of all these additional edges . 
DEF VseFSe(S(s ) = < i , x > e // V x Vl ~ P ~ PATH ( sp ( i ) = x ) The derivation concept is defined as follows : DEFA derivation is a sequence  s0  . . . sn where si ~ FS e ; 0 ~< i ~ n ; So - - : . -1, S
S(Sn)eVT *; si.-y-v > si;0 < i <, n
As in this version the occurrences are attached as edges to the start nodes of those subDAGs  , to which they are assigned in the string version , an adequate concept of direct derivability can be inferred from the definition of the preceding section  . 
One properly re-indexes the DAGs i . 1 and the DAG , which is introduced by the rule ( d , dr ) , according to the definition of g ' . 
The derived DAG is constructed by the elimination of the edge to be replaced  , and the unification of d r with that subDAG of d , to which the replaced edge was attached . A successful unification in the string version can't fail here because the labels of the additional edges of d  ( after elimination of the edge to be replaced ) and d rare pairwise different . 
In the example the result of the application of T on  <3  , VP > of si . 1 is defined as follows:
IAo~v6/\b~<~,At~1"2~,~\~?o_~-\~
NP NP\~~NP VP NP ~~ p
V ' V'NP
The concept of direct derivability is defined in the following way: 
DEFs = si . T---~-> si=s'<->~pePATH3i ~ N ( sp ( i ) = pI ( ~ ) ^ s '=\[-\] d'e DAGId~-d'^d'p=d pudr ) ) with C as the set of atomic values and s r as right hand side of i : 
VI)~PATH(s rp ~ C -> d'p = SrP)A ,   ) dr = lTd'e DAG VpePATH ( srp\S ( Sr ) =?->d'p\S ( d ) =? ) ^ VI ) ePATHV j ~-~/ ( sp ( j ) =d'p ( j+ ( i-1 ) ) ) J
Vp~PATH ( speC->d'p=sp ) ^\[ Vpel ~ ATII ( sp\S ( s ) =~->d'p\S ( d ' ) =? )  ~' , d =\[~( d'e DAGIV pePATIIV j ?~/( j<i->d , p(j ) = sp(j )) /' , 1 VpePATHVj~gC(j>i->dp(j+IS(? . ) l-t ) = s p(j ))
FOOTNOTES :* The material in this paper is based on work supported by the BMFT under grant no  . 1013207 O . 
1)\[2\] suggests , that atomic feature values are not represented as label-led nodes  . Thus in the following illustrations only edges labelled with complex valued features  ( gran~ticat functions ) lead to nodes ; edges labelled with atomic valued features ( morphological features ) point at the atomic values . 
2) In this version ( cf .  \ [3\] ) to ng distance dependencies are handled on f-st ructure level  . For that purpose regular expressions over the set of nuclear functions  ( governable functions plus ADd , XADJ ) are allowed to occur in the equations . These rules can be interpreted ns schemata . A rule which is an instance of a schema is then annotated with an expression that is et en~nt of the set  , denoted by the regular expression . 
3 ) This integration is necessary because f-st ructures are control structures of the filter eomt : ~ nent ii  . and the new structures are expanded f-st ructures  . It is also possible to simulate the postponed f ilter components iii  . endiv . in an adequate way during the deri-vation . This can't be discussed here for tack of space . 
4 ) This example is derivable with the grannmr of \ [1\]   . The annotations are attached to the nodes in order to maked and freconstructable  , l represent nodes as sequences ef integers in the usual way  ( start node 1 ; ij is the j-th daughter of the node i ) . For reasons of clarity f is specified only for the terminal nodes  . 
5 ) If disa DAG and papath ( a sequence of attributes )   , then dp is an abbreviation of a term ( descriptor ) denoting a sub0AG of d . The actual structure of suchs term depel~ds on the chosen metatheoretic at recon-struetion of DAGs  ( partial functions vs . graphs ) ( cf . eg .  \ [4\ ] )  . 
6 ) Note that the VCORP substructure comprises a discontinous structure whose corresponding symbols do not form a proper subs\[ringin w  . 
REFERENCES\[I\]BRESNAN , J . /R . KAPLAN/S . PETERS/A . ZAENEN (1982), Cross-Serial Dependencies in Dutch . In : Linguistic Inquiry 13 . 4\[2\]K APLAN , R . /J . BRESNAN (1982), Lexical Functional Grammar . A Formal System for GramnBtical Representation . In : BRESNAN , J . ( ed . ) , The Mental Representation of Granlnatical Relations  . 
Cambridge , Mass . 1982\[3\]K APLAN , R/A . ZAENEN (1986), Functional Incertainty in LFG . unpub\[,ms . ,
Stanford\[4\]PEREIRA,F . C . N . /S . M . SNIEBER (1984) , The Semantics of Gran ~ ar Formalisms Seenas Computer Lenguages  . In : Proceedings of COLING 84
