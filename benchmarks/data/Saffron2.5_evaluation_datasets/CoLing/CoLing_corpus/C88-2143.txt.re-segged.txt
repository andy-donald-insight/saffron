MASSIVEDIS/~MBIGUATIONO FId % R~ETEA~'COR~K)RA
WITH FLEXIBLE CATEGORIALG ~ KMM~R

Tonvander WOUDEN ( CFLEX/INL )
nirkHEYLEN(INL )

P0s tbus 95 15
2300 RALeiden
The Netherlands

A n6~ ~/ ~ of au ~ mticl ~ u ~ / cald is a ~ i ~ a tion of bigt ~ isd ~ ri ~  , us ~ u ~ recent p~f-t/u ~ tical ~ s~l~f ~%/ ~ th ~ zyf of cat ~ rial ~ an ~  . 
O . Injection
The Insti~te of ~ tc~hI~(~i ~( I/~) , ~z ~ ~ r ~ tc/u ~% / ue ~ lgian ~ ~ , oensists of t ~ de ~ . ~ of % 7~ ~ of ~ a ~ , ~ of %/~~~ s , is to ~ ida ~ for l~l~ical reset . R~sda ~ is 8, pote ~ ntially/_~%~,~tof ~ . ~ is to supply a z ~ p ~ tati ~ ~ , if l ~ sible , ~lete ~ iew of ~ n ~ 0 or ~ ( s ~ r ~ eI ~ 70 ) stan ~ ~_h . In o ~ to a c ~% ~ ~ i al , an elficier ~ ta ~ ~ t ~ ~ ~ lication ~ fi - w~~~i  ( ~ . At ~/% isn~t ( Febz ~1988 ) ~I~L ~ im~s is ~/ ~ ~ t ~ tati ~ oo ~ of t / ~ ~_/ ul~e  ; it ~ tai ~ ~ er 45 milli ~ n ~ e / ~ ,  ~ 8~ ,  ~ ~ ~  . 
I N5 l~c~l~ta~q se is not an ~~ i ~ If : it is ~ t to ~ a ~ i for ~ ificl ~ Jects  , f ~ of ~/ ~ ~ s of due data ~ is ix9 for ef/~r ~ ~ t for a ~ gestation of ~ cti ~ le ~  . R ~ data ~ is ~ J ~, ~ it is . not ~ listic ~ on J ~/ ~ xj it wilt ~ it Ix ~ib\]et ~ ~ c/u ari ~ ~ of ~ nfonnation  . R ~ fo ~ , a ~ tJ ~ ~ i is %0 ~ eall ~/ ~ we ~~ t ~ data ~ av ~ lable for ~ I ~ , ent / ~
I ~ by ~ efficie ~ nt ~ ~ x ~ ula ~ plication ~ ft ~ , en ~/ ~ o ~ I ~ on rich ~~/ ~ ma ~ xgrial . Aut ~ ticmozl ~ hologic ~ ~ u qalys is I ~ r ~ ~ c ~ i ~ outm~~l~_~l~s will ~ ~ ~ rporat ~ J ~ ut ~ D %/ ~ da ~ l ~  . Or ~ l~el hig ~ r , we ~ J~nte~J ~% t / ~ sizn ~ cnot % / ~ of a non -lk ~ Imrse ~ " c ~ l ~ of brii ~ process of lemmatization an effective ?\[ i ~ i ~%/ en ~ e is  , ~ x~s s ~ as well . % b % ~ on ~ ~ . ~ was ~ case for i ~ j ~ l ~ ic ~ lar ~ ll ~ , i~s ~ tactic ~ is an ~ l ~ tion of ac~ialc ~ l ~l~o~d ~ ~ uotion of ~ philo ~ ~ i / ~ La ~ ca~i ~ parser we use for ~~ i ~ ation ~ taotic ~ lysls is ~ topic of this pap ~ l ~  . 
i . A note on smbi ~ tyJ_nC ~ tegorial G~r~F ~ c/uli ~ic ~ ior framewoz ~ ~ ~ isoc ~ r ~ n ~ ~% / u ~ ~ lemofambi ~ l ~ cal ~ tever way c ? ~ deals wi thit as far as ~~ t/on is ~~ whatever neat so luti ~ ~ ~ ~ ~ ~ ~ ~ ~ t ~ h  , % ~ fa~rem~ixlsdqat ( i ) ~ ~ ~ i in otdls appea ~ , but ( 2 ) the explo6ions it gives rise to will cause ( often irreparable ) danage % 0 ( othec ~ is e ) neatly conceived ~ tacticl~s ~ or ~ alyzers . C~t ~ orial ~' ~ , ~id ~ by ~( ~ trici ~ of ~ Lexi(x ~ , may seem by nature to be t . he first victims of this I ~ . S(m ~ c~t c~i ; orial is ~ try to ciz ~ e ~ t t / ~ problems by ~ inherently ~ Dtiva ~ ~ ~ enot / ~ i ~ rigidly defined flexible take a cl ~ look at ~ of ~ z ~ icti  ( ~ isc~~~/~tly , i . e . at ~ of t ~ ~ ian ~ that ~ malcoar ~ tur ~ ly , but , ~ remain unnoticed at first sight ~ . Interesting invariants may act as greedy scissors  , p ~ un  ~ away ~ m ~ ny of the useless branc~s of the search tree  . Catecjorial grammrs encode all syntactic ~ tie n in the i ~ o The effect of this s~ra ~ on ~ ~ ence of ~ i ~ t / escang at / ~ if one ~ idt ~ ean oz ~ i ~ p ~' ase  ( ~ ~ bat happens is that for every cat ~ in the PS g ~ : am ~ E one gets a set of categories in the Cate ~ rislgrsna ~ c  . C ~% be a varage , then ~ of nsw cate4~ies e@mls the ~ of occurzances of old cat~3Dry in %1%8 PSi~/les . A lexical ele~nt that is not at allaa ~ iguous as farass ~ ntac % J  . c cate ~ oz ~ ass ? gm ~ antisoc ~ , in PSG , will a ~ ost c ~ Tain / ~ beoc ~ ambiguous in C ~ . Still , we claim %/~ at effective , i . e of ast , disa , ~ iguati ~, is . p ~ sible with CGo ~ rationale behind this claim : I  . ~ that effective disamhiguation does not depend as much c ~ the de ~? ~ e of ambiguity  , but first and foz~stontl ~ nature off/%e dissmbiguation ~ l ~' Ic~'~do ~ lIl~z'e ~  . ~"6m ~ big ~ llty is damaging toola ~ Lgical ~ ap : c , ~Jedures because there are no intrinsic Zr~e ~% i~s of the system that can deal with it  , aiUnost ~; horeverse is ~ of cat ~ jorial v ~ , full l ~ r ~ f it is made of the ft defining c/ % aracteristics  . : In order to appreciate these s~te ~ nts , the best thing % odo is look at a specifio J ~ l ~tation of this idea  . 
2? ~ f~e L?:mbek calculus \] i ~ this section we would like to present a categorial reduction system which is ~ alogous to  t2~  ~  t0\]icatic~al fragment of propositional logic ? We ~ d . ll present it as a calculus , and will limit o~ese\] . ve , ~; to the formal description , thus ign or J/~g semantic interpz ~ tation ( which is not/nm~liately relevant for our ~ at hand  )  . 
Some definitions
Let BA ?: CAT be a finite set of at/muic categories and CC~a finite set of category for ndrg connec ~ : ives  . Then CAT ( the set of all categories ) is t_he in duotive closure of BASCAT under ( ~NN , i . e ~ the smallest set such that ( i ) BASCAT is a subset of CAT , and ( ii ) if X , Y are manbez ~; of CAT and I is amsmber of CDNN , t t ~ n(xlY ) is a ~ of CAT . 
So or ~ could take BASCAT to be\[S , N , A , T , P and C~I ~ N\[/ ,  \ , * ( the seaz ~ called right division , left division and product , respes % ively ) . Some of the ma~rs of CAT are : N , ( NkS ) , (( N/N )* T ) , ( S/(P\(N/S ))) . . . . ) . 
Ao ~\] , ~ category ( xlY ) consiste of thre ~: h~m ~ diat ~ , suho ~% occ ~ nts:X and Y , which are tbla , L ~ el ~ catecdories , and %/1eoo ~ aeo ~ cive . When the c~3 ot ~ is '/' or ' V , the complex category is a functor . ~Inactor cate4~ories are associated within cxx~plete expressions : they will form an ~  . ~ssion of ca ~ Y ( result ) with an expressi ~ a of category X ( arg~nt )  ~  . In the case of right division ,  %  h8 argument has to be found to fk ~ right of the ~ category  , whereas in the case of left division , the argument l ~ as to be found %0 ths left 5 o ' f1~e product o ~ ive '*' is %0 be interpreted as a c~x~atenation operator , i . e . a prock ~ category ( X ' Y ) is to be associated with an expression which is theoon caten at i ~ of an expression of category X and an expressi ~ of categozy Y in that o~der  . 
Reduction rules
A specific categorial grammar is characterized I ~ the choice of basic c~be/jories and oennectives on the one hand  , ~% d ( m the set of reductic ~ rules ( xl % ks other . The system of reduction rules says how categories c~t be ccm ~/ J ~ ed to form larger  o0nstih~ents   . The application rule which cx labines a funct ~ r with domain X " and  rark3e Y with a suitable a ~ tm~nt of category X %0 give a Y , is only one of the possible reduction rules . 
I , % stead of t~ing a set of reduction laws as pr ~tl tive axioms  , we will investigate the categorial re , orion 8 yst ~ n as a calculus , whare the reduction laws can be ccnsidered theore ~ u ~ that follow from a set of axioms and a set of inference rules  . Next we will see that the parsip ~ , of a syntagm is really the same thing , in ot/~r words , attempting a pz % 9 of for a theorem . 

Before we define the axioms and inference rules of the calculus  , we need % o definether ~3 tion of sequant 6 . 
A sequent is a pair ( G , D ) of finite ( possibly \[ ~ . . . . . B . \] of categories . For categorial L-sequents , we require G to be non-e ~ ioty and n = l . 
For the sequent ( G , D ) we write G => D . The sequence G is called the antecedent , D the suocedent . For simplicity square brackets and ccmma's are often left out  . 
Axloms and Ja~ference rules ( I ) ~ ~ of L are sequ ~ tsoft ~ fo ~ nX =>

(2) Inference rules of L:X , Y and Z are categories , B , T , Q , u , V are sequences of categories , where P , T and Q are , % on-eai0ty . 
695\[/R\]T => Y/X if T , Y => X\[\R\]T => Y ~ X if Y , T => X
E/L\]U , Y/X , % V => Z if W => V and U , X , V => Z\[\I . \] U , T , Y~X , V => Z if T => Y~dU , X , V => Z\[*L\]U , X e Y , V => Z if U , X , Y , V => Z\[*R\]P , Q => X*~f if P => X 8nd Q=>Y ~ jether , c~nic ~ ns and inferenc ~ rules define tl ~ theorems of a categorial  calc~ll~-~0 Suppose we have a sequent S , to fi ~ out w ~ the rit is at ~ ) r ? ~ nor not we have to apply several , off / ~ einfe ~ erules above till hog\]ring but axi  ( ~ ~ anain . A ~ ~ en ~ y have noticed , all these rules involve the \] . ~moval of a ~ nnective Jn some category . Let's p~\[caphrase ~/ m\[/L\] rule by way of ex~01e   . It says : to find OU tw ~ the rase quent withs ~ e fur ~ corcategory Y/X is a the oz ~ Lidentify a sequence of categories that follow this category  , and see whether Y => the identified . sequence is a theorem , and what preceded the catego ~+ X+what followed the sequence => old succedent is a theorem  . 
In the following ex6m~01e we present a proof with the relevant category printed in bold and the identified sequence underlined  . 
a/b , d/(e/(f/a )) , d , e , f => b\[/n\]d => d\[m ~ . 0M \] a/b , e/(f/a ) , e , f => b\[/L\]e => e\[A ~ ICM\]a/b , f/a , f => b\[/n\]f => f\[m ~\] a/b , a => b\[/n\]a=>a\[A~IOM\]b=>b\[~\[ IOM\]If we could find an effioient augx~natic decision procedur ~% k ~ t would tell us whether a certain ~/ uent is either a theorem or not  , then we wo~id have an efficient parser+s well . The idea being , that the succedent represents s~ething like a sentenoe  ( the cag ~ gories of the words that make it up ) and the antecedent the S ( sentence ) category . 
Int /% enext section we will discuss an implem ~ltaticn of the decision procedure  . 
3. The Theorem prover , alias parser
An algorithm to prove a theorem , could go as follows . 
Giv ~: a sequent ~ . LThn(~tegories:n--I in 8ntecedent , 1 ~\] ~ succedent . 
Start at the the first category of the succedent.
If this is a functor , picki he relevant ix ~ f ~ zn \] . et ells you to identify a part of the sequent to one of ~ gyasides of the category  , then first take this t ~ be one category . Seew be ~ r ~ ou can prove t ~ r ~ i l . tJng sequent ( s )   ( the sequent ( s ) in thsif-~3r tofth ~ inferer ~ ex\]/le )  . If % he identification ~ not ~_ \], t(i . e . it , ~siv 61 ycalling % ~* e ~ , th ~ Px > tt ? ~ a of c2 fi ~ , ~\] ~ msr~mginlng is not reacl~ed) , i ~ o I take two eateouories a ~ d see if this do~s %/ - ~ trick ?  ( ~% tinue a Ciding cat 6~Z ) rJ . es\[nltil ~ ou have ap ~ of oriile z~a ~ a~c ) cate \] orie ~ left . Ixt the latter case , not ke h~ji ~; i (~ tyet , because one ( x ~ ald also have " taken the , ' o ~ cxx ~ , or third funct cm to start the proof ~?3_t-ho If Jn % he end there a ~' eno ~ ftu ~ ors left % o start the ellnflrmtion with  , then the tt ~ ) ~ emcm~~t be ~ mov ~ a ~ one ' can even say % hat i % is fals J  . 
Clearly , t  ~ . s procedure might take some time %0 deoide on % he validity of a seq ~ lent . One might hope that % heor ~ , ~ are proven rapidly , but w ~ l the sequents are false , a lot of ~ ork has to be ? k ~ . Fortunately enough , there is as i , 1 01e way to prune a way some branches of the search tree that are guarar  , teed " to lead to faill Dre . There is a necessazy formal condition that holds of valid ii ~ eore ~ ms which is easy to detect ~ If a sequent does not have this formal characteristic  , it cmmot be a theo . r ~ ralEven if % he inputted sequent does have " the z~/ired characteristic  , in % hepz ~ ce~s of proving , there will be a lot of subproofs % bat need not be carried out because they will fail in mnediately  . 
This formal character i . % ~ ticor Jnveriant is known as val Benthem's Go , it , or Count for shor ~ . It counts %/\] e ~ of positive ( range ) and negative ( domain ) of a basic categoz ? X in an arbitrary category , basic or complex . It may be defined as follows . 
count(X , X ) = i , if X is a n~m ber of BASCA To ount ( X , Y ) = O , if X , Ym~n ~ 0 ers of BASCAT , 
X <> Yo ount(X , Y/Z ) = : count(X , Z ) - ommt(X , Y ) oount(X , YkZ ) = count(X , Z )- oount(X , Y ) count(X , Y*Z ) = count(X , Y ) + count(X , Z)C ~ a , ~ ralized fmsequ ~ of categoxle ~ , t ~ X--o ~ at of a sequence , X being a category , is the sum of % heX . -oounts of % he elements in the seqllence . 
count(X,\[Yl .   .   .   .   .  ?  . \]) = ~ x~nt(X,Y1)+"'?+ so~t(X,Y . )\];tw ~ . ' gco~cnbFVan~t~u ( 1986 ) ti ~ t t " d ~_ ~ ( \] oo~tf a < ~ ) tion Js ~ iJn vs ~ lanl : os , e~deri wltJ . o ~ z < 7 ~ oTn : i ; . .~ li~aD ~ ~\[ : ~ f~Etl l~lt : IS a +~ F~Z~II if "\] I ~  ( X < ~ n ; va \] . uosof %/ira alltex ~- Jr ~ nt diffez " fz ~" /- h < a\[x~l~i  ; valu ~ of , Jmsucc+_~k~tft~'~basicm % ogo ' ~: y . ~' ~ ha(~ate4 ~ , o:ty ( PP/ ( NP\8 ) ) ca~i ~ ( x clt ~ xt ~ d for O~k'h of \[ SN VN APPP\] . . . . .  \]-:,7 :<:;  .   .   .   .   .  , \ ]  .   .   .   .   .   .   .   .   .   .  7~  . . . . . . . . . . . . . . . . . . .  : -?  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .  :  . . . . . 
I . . . ,, ~\ [\ [ oooo:, . i/:7?<~:'\ s)i~i-~oo0 . 1  .   .   .   .  7175  . . . . . . . . . . \] ~ o 1 o o ,_i:t . . . . . . . . . . . . tt o . ool'It ) , ~ s ~" lb~~fu\]x~s of % his invmTi ax~t take a  9~:  ( ~vth of the h6K\['c' ) oAps ~ tf~nde- , all ~) :\ [ ~ l ~ J in lids NP a , \]#mi ~ biguo ~<\] o'li~C ~- ~ rhe~ian\[zcc~lc to f  91he m , biguities gives 12 difforent cx ~ nbirlato ~ y\[~Atis:\[bilit:<e~: ( N/NP )   , N , ( NP/PP ) , ( N/NP ) , NP ( N/I ~) , N , ( NP/PP ) , ( N/NP ) , ( N/NP)(N/l-t ~) , N , ( ~ elPP ) ,  ( ~/~ ) , N(N/t ~') , N , ( NPI(~N )) , ( N/NP ) , NP ( N/Ia ) , N , ( NP/(NkN )) , ( N/NP ) , ( N/NP)(~/~e) , ~ , ( ~ P/(~k ~)) ,  (~/~)  , ~( N/i ~) , ( NP\S ) , ( NP/PP ) , ( N/NP ) , NP ( N/I ~) , ( NP\S ) , ( Ni'/I'P ) , ( N/NP ) , ( N/NP)(N/T a ) , ( NP\S ) , ( NP/PP ) , ( N/NP ) , N(N/NP ) , ( NP\S ) , ( NP/(N\N )) , ( N/NP ) , NP ( N/NP) , ( NP\S ) , ( NP/(N~N )) , ( N/NP)~(N/NP)(N/a ) , ( NP\S ) , ( NP/(N~N )) , ( N/NP ) , N % k\]figureo ~' t whethem'i ~ zisJ ~ au~eisai ~ unphr~ase  , one ~ mld have % x ~ to hJild a ( NP ) pa~e ~' e ~ l for each of the se-t welve Ix ) ssible cx ~ , bJnati ( ~sofca ~< ) ryassi~T ~ Its oUsJn~Jt'hoGOt ~\] tinw wiant~l ~ wever  , one 1 ~ beforelknnd % hatons ~ only c ~ of these o ~nblnations  ( given iY_l hold faos ) oL~Id\[x\]6~ib\] . yb~1~3\] . ~ asa~lphrase , ~ . t " Chatpazs J \] ~ J , itself b~l~s super?1u ~ in this ca ~ ~ i ~ f bllowing fic ~ l ~ shows " thaCx:~It values fo~t/~a cx\]r ~ eot~ssiq ~  , t~it . 
N/~,\[0I-Z00\]
N\[00 l00\] ( NP/ ( NkN ) ) \[ 0 - i 0 ' 0 0 \] ( N/~ )  \[ 0 1 -1 0 0  ; I~f\[00i0O\]+\[0!00O\]
N  ~ . \[ o ~ o0o \]' . .' ho ~: e~r can vem'ify for hia~elf that *\ lie of  %1~ other : rxm~Dinations satifies the count invariant  . 
it is ( k  ~ J . ~ that the pmx ~ edure , just presented is a ~ rfe~tn~m ~ to lay hands on " the ratios of the  f~:3qu~ieJios of lexica \] . lyambiglKx ~ ~ rds , given a ~ x ) ~l  ~ us  ~ In ( \] a lexicon with c ~ tegorial iufonnation . 
L ', o , J ~ c ) x f i 6z . #sodex'ive the s~figiL~ss for the words h*% l~t ~ EK database  , sentences of the INL corpus a ~ Ir~utg~d~nac ~ a da of die sm biguath ~ i  , ~ x ~ leso The implementation of this Lambek-@~x-tzen di ~ bi\[~ator is straightfozward as it/~ volv ~  . ~ onlys . il ~ ple ~ atchlngs ? ~% dlist -, ~ an Il ~ lati ~ r ~ s . The m01e of the dis~iguator/\]~the V~c~s of ~ Js ~ iguating the L corpus cant ~ offfrcl  , thef'ollow\]ngfigUmSo
CORPUS : set of sen ~=> sente31 ce select/on
SENTF/$3~ .   ( i ) : list of words=>categozg as slgrment/lexical lookup 
SENTENCE ( 2 ) : list of wozTls+cab ~ ories=>ge ~ rate c~zbinat /ons 
COMBIhi~TIONS : list of categories : : > test combln at ltms  ( i ) C/3~nt ( Z ) Parse/pro~e
RE~Uf , T : grammatical lists of categories Given a coz\ ] pus  sentencx9  , % hes ! nstactic categories of all the words it contains are looked tip  . in a parsing lexicon derived from the 16Dcical database . Whenal \] . combinations of caSegories have been computed , each is tested by the Oount module %0 ~guce % lie number of possible co~Jnatic ~ s of initial category & ssignments  . In the mosts u ~ fulcase , this reductifx z produces ~ ily c~9 possible oc ~ in at lon , Jmplylng % hat all lexical material in this sexztence is disambigua % ed  . In most otl ~ gr cases , tlly as a all ~ tago of the om'iginal n ~ Mae ~ of possible ocm ~ inations of le ~ ical assignments is left over  ; these aro handed over to the Gentzen Proof Machine which wlil find out which of  %1~ ~ emain/ng assignments fail to oc~b~lneto a 9z'am   , Tstical sentence . 


I . Much of the work described here is based on research by Michael  M0ortgat   . See e . g . his (1987a , 1987b , 1988) . 
2. e.g . Wittenburg (1987), Steedman (1987).
3 . Instead of theorems deducible frcm the calculus they are often facts that can be proven of the calculus as such  , outside the calculus ( n ~ tatheorems in other words )  . 
4. This c ~% ation is called applicaticn.
5 . Notice that we will use the ( argu ~ nt connective result ) r ~> tatic n , non ~ " wt~t ~ e directionality of the functor . 
6 . We wili present the sequent calculus , which Lambek adapted from Gentzen's work on logic  . See
Lambek (1958).
7 . Because of space limitatic ~ s ~ will not attempt to show the validity of this procedure  . 
8. Proof omitted for space's sake.

Jovan Benth ~ n (1986)
J . L ~ (1958)
Me Moor ~ at (1987a ) (1987b ) (1988)
MeSteed m3n (1987)
K ? Witten ~ (1987)
Catogorial G ~ c ~? ( tie 7 of Essays in Logical
Semantics . Reidel,

The mathematics of sentence structure , in : ? m . Math ? M~nthly 65, i ~ - ~ L . 
169. Reprinted in
Susz kowskle ? a.(e ~ o):
Categorlal@~amma~o
Benjamin's , Am~Texdsm ( to appear )?
Lsmlbek Theorem P ~ In ~ ~
INL-WP87-04. In Van
Benthem & Klein ( edso):
Categorl ~, Pol . ~ x ~ and Unification.
Generalized Categorial
Grammar . To appear in F.G.
Droste ( ed .): Malnstcea ~ in Linguistics.
Benjamin's , Amsterdam.
Cate ~ jocial Y ~ estlgatlons(dlssertation , to appear ) o
Comblnatoz ~ and (~ rammars.
In Oehrle , Bach & Wheele ~- ( eds .): Categorial
Grits and Natural
Language S?ruc % ures.
Reidel , Dcrdrecht ?
Predictive Ccmbinators : A
Method for Efficient
Processing of Combinator ~
Categorial Grammars ? In
