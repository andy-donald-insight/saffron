Portable Knowledge Sources for Machine Translation
Koi <' hi'\]~ake.da
Tokyo Research Lal > oratory , IBM Research
1623-14 Shimotsurum~t , Yam ; ~ to , K ~ ulaga , wa . 242, Ja , pa , n
Phone : 81-462-73-4569, 81-462-73-7413 ( FAX)
take dag ~ trl.vm~t.lbm.com

in this paper , we describe the acquisition iuld ( Irga-nization of knowledge sources fur machine translation  ( MT ) systems . It hasheen liointed out by many users that one of the most annoying thing sidmtlt MT sys--terns is tim repeated occurrence of identical errors in word sense and attachment dlsambiguation  . We show the limitations of a conventional user -dictionary method and explain how our approach solves the prol/lem  . 
1. Introduction
In the last decal % more and more commercia . l machine translation ( MT ) systems havelmcome available for a wide variety ( if languag , eI iairs . An MT system is a very handy tool : trot one quickly Iinds out thai  , it Irlakestt , e same errors over and over again even if a user dictionary is carefully maintained  . There are sew , ralre ; mons for such repeated errors . 
1 . Commercial MT systems are not t miltinactor dance with a powerful h  ; xical semantic formalism . 
The user dictionary alone cannot ( llsaml figuate word senses and phrasal ict tite limei/ts satis Nmtorily  . 
2 . MT systems cannot handle the domain and context dei  ) endency of words m , s e , phrasal at l , a ehmen L and word selection . 
3 . In a shared environment , each user has a differ- . 
ent user dictionary , and must therefore redumhmtly correct the same errors ms all the other users  . 
A powerfule xieal semantic apl ) roaeh\[s\]couhl give more accurate translatiml ~ but it might be  . to o I nuch to ask users to develop their dictionaries within that formalism  . Tl , esimple structure of a user dieti ( mary also restricts the learning ability of M'r systems during the postediting process  . The second of the alm w ~ r e ; kstmstl ~ motivated recent exanlple-ba~ed and case-b~med machine translation re  . search\[9,s,10\] . However , a method for finding the best-mate hlngeases hi a cime  . base . , where cases ( or exaln ples ) are collected from different dmna . in sor contexts ~ has not been studied well . Norisit kllown whether considering the frequency of eases gives a better result  . The third reason is rarely < liscussed > hut it is riot desirable sirn ply to share a single user dictionary  , since the dictionary may become inconsistent by reflecting multil > le users ' updates  . McRoy\[s\]discussed word sense disambiguation using multlph  ; knowledge sources , but her method is still dictionary-b~med . 
Some of the eoolmer clal systems for human-aided trails latlm h such as the Translation  Manager/2   \[~1~ can provide the user with nmre I lexible access to multilile dictionaries and the Iranslation memory  ( a repository of pairs of smlrce and target sentences  )  . This organization of knowledge cmddlie quite useful for selecting correct transhttlons of vvords ~ lint the types of knowledge awdlable from the dictionaries and translation memo  . 
ries are rather limited > and are certainly not enough for resolvings true turaJ ambiguities in sentences  . 
In this paper , we propose Porhtble Knowledge Sources ( PKSs ) for machine translatlou . A PKS consists of preference in fi~rmatitmon word sense  , l ) hrasal attachment , and word selection for translation . It is acquired through user lift . erection in the postediting process , and is stored with the document being translated . When translating a document by using an Mq ' system  , a user can specify all st ( if already-translated documents , and the system will ma . keuse of the PKSs included in the specilied documents  . We show how Sltch a collectimt of I ) KSs is organized , used for translation ~ and integrated into a user dictionary  , and how the problem stated aliow ~ can he solved by using PKSs  . 
2. Portable Knowledge Sources
A Portabh ~ Knowledge Source ( PKS ) consists of preference infornlation on three kinds of ambiguity :  1  . Word sense 2 . Phrasal attachelnent 3 . Word selection The preference inf ' ormatiou is acquired from the ilser through post-  . edlting or interact lw ; translation \[% i \] iul dispaired with the doculnel it that the user is working till  . 
That is , at ' KS is stored and managed 1 , \[ ) gether with the document flit which it is created . 
l , et PKI ~ PK ~> and PK3 be PKSs for the respective types of ambiguity mentioned above  . The following is ~ ne?ample of word sense ~ m big ~ fity : l  ) elet . etheline . 

The word " line " could be ( 1 ) a single row of letters , (2) a geometric mark , (3) a hardware wire , and so on , for each of which a different ranslation is usually required in a target language  . When tile user specifies that a particular occurrence of tile word " line " in a document 
Dmeans a single row , the PI ( S ( P g l ( " line " ( cat n ) )  ( sense I ) ) is created , and is stored with D . 
An example of phrasal attachment ambiguity is as follows : Order the publication through the IBM branch serving your locality  . 
The present participle phrase can be either attached to the main verb " order  , " or totile noun " branch . " If the user specifies that it modifies the noun as a postnominal adjective phrase  ( ADJP )  , the PKS ( PK2 ( " serve " ( cat v )   ( ~ orm prsprt )   ) 
ADJP ( " branch " ( cat n ) ) ) is created ) The preference of prepositional phrase attachment is also represented by  PK2  . 
Finally , an example of word selection arn biguity is ( 1 )  "~ '1 - -  . ?'y ~"' and (2)"~E ? ~: J'-"fl , r the compound noun " memory chip " , where tile first translatinn can often be found in PC documents  , while the second one , which ha . a the same meaning , is typically used in textbooks . When the user specifies that the second one should be used  , the PKS ( PK3 ( " memory chip " ( cat n ) )  ( " It ~ N ~" ( cat n ) ) ) is created . If word sense is to be included in the definition of word selection  , such that the word W1 is used in sense S and should be translated by the word  W2~ it is separately represented by ( PK 1 W1S ) and ( PK3W1w2 )  . 
Each PKS collected through user interactim ~ has anage  , based on the time and ( late of its creation . The younger the PKS , the stronger its prefer M ) ility in one document , since it could have been used to overrule the preceding PKSs  . Note that the age of a PI ( S is valid only among other PKSs in the same set . Two sets of PKSs are not comparable if they are paired with different documents  . 
3. Organizing Portable Knowledge

Once the user has translated several documents , tile sets of PKSs paired with them begin helping tile MT system to resolve the three kimls of ambiguity described  ( The representation of the PK?can vary depending on the MT system that uses the PKS  . For examl ) le , the modifier and modille e phrases caube represented by syntactic structures  ; word senses and semanticase relations can be associated  ; and so eli . 
Dictionary-based
MT Systemilli ; ;  ; i i i ! i l i i i \] ~ i :\[ i \] ? i ! : i i i i i i i i i i i i i i l if iii : i \] ii  ; i \] i ii \] ~ : ~ i ~ i \] i ~ i l i : :! iY
Ii : : ! i: ; - worO  #OOCton ! ! il ) i ; i : :!) ~ : :!! ~ ; ~! ii ! i ~ ; i!i~iiii::~iis:iii~i~!i::ii!i ; i~::i~:sii::i~i~i~::iii~!::~i!~!iii~ii~ ; ! ~ ii ! ii ~! i ~ : i ! ~: i ; ~\] documents
PKS-based MT System : : : : : : : : : : : : : : : : : : : : : : : : :::::::::::::::::::::::::::::::::::::::::::::::::: : : : : : : : : : : : : : : : : : : coredlctlorlar\[iiiili  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . y, . .i,ti?ii!iiiSi\]
PKS~documents

Figure 1: l ) ictionary-based and PKS:based MTSys:tems in the previou section  . When a new document is to be translated , the user either specifies a list of previously translate documents as a source of available PKSs  , or lets the MT system automatl cMly choose them . Such a list of documents is cM led a document list . 
Figure 1 compares a PKS-based MT system with that of a conventional dietionary d~ased MT system  . 
l" , ven though a logical document ( llay not be identified with a physical lile , it is the e : ~ siest and nost practical way to organize the hierarchy of documents  . In prac-tlce , when transl~d . lng technical documents , it is usual to translate the glossary first , agreetm the translations of technical terms , and then work on individu M chapters . 
This gives us a natural ordering of documents ~ glossary-+chapter  1 - - - + chapter 2   . . . 
which is also used as an ordering of PKSs to be hlc of porated for machine translation  . One way of automatically choosing tile document X for translating a new document Y is to cM culate t i t  ( : overlap of words contained in both X and Y , and to find the X with the largest overlap . This idea is similar to the context idea- ( tification method Bal , which is used effectively h ) r word sense disambiguation . 

One important chltracteristic of tills PKS Ol 'ganiza  . -tlonis that it can be dynamic Mlyrear ranged . \ Veclxninv Midate some PKSs by shnply removing ix do cunlent from tile document list  , or validate a new set ( if PKS stJy adding its paired document to tile list  . This is extremelynseflil furdomal n-sensitive and context-sensitiw ~ tri~nslatlon  , since a close look at documents illaseemingly similar domain will show that there are too many con-tlicting word senses and word selections to build it single consistent domain dictionary  . 2 In the worst ca . ~ e , the , user has to keep oil asking the systenl to prefer olte  ( ' if several word senses , ' kslnally thnesms ix new doculilent arrives to be translated  . 
Another important observatkloist lu~ttim system can calculate tile quallty of preference in hlrrnittion a  . s follows : 1 . Given a document list , find ~ dl the PI ( Ssillthodocnment list , a M create a PIqSgraph I which is a directed gr~q ) h , for each type of PKS ( see Figure 2 ) :* If the PKS is of type . ( I'KI'w('rr disens %), crelx tean o(h' . Nwlfor'mo'rdi , an . deNsj for sen . s'ej , and a direct e . darca U(lal )(; led % ense ") fromN witoN sj . 
? If the PKS is of type ( PK2 word ; role word j ) create a node Nrl for word i ~ a node Nlj for word j  , and a directed a . rcaij ( lal~eled with a syntactic role ) from N'ri to Nlj . 
eIf the PKS is of type ( PK3'lvo'rd ; transj ) create a node Nsl for " wordi , a node Ntjfl ) rtransj , and it directed iu ' c ( tij ( hdmh~d " Irons " ) from NsitoNtj . 
2 . Count the number C1 of ' conJlicling arcs farthe PK1 and PK3 graphs , That is , find the number ( if arcs leaving tim saille node but go higto dlffermit nodes  . 
3 . Count the number CP~of conJlicting ilalii , s ; ~ for each pair of nodes nl and n2 , connected by a narcal in the PK2 trapbSllt : h that for solill ! ltodl ~ I13  , there are two arcs a 2 from n \] to n 3 , and ix3 rronln3tt ln2 , wile . rea2 and a3 lave the same label ( see Figure 3) . 
Intuitively , CI shows all/llll ' Jo . r of a lill lillOtlSword senses and word selections  , and OR shows possibh . ' it ttaehment ambiguities hit hegiwm document list  .   4 = I~e call tile word senses of the word " lh ~ e " in Section  2  . All of them ~ ppear in the conlputer do tniti llInot&l  ) ly in the Itrelts of text editors , graphics , find hard wtu'emarauds , respectively . Our ~ pproach ~ dlow stile user to lid just the sense dynttndcedly for each type of nlgrtu~tl  . 
a A path is ~ sequence of directed arcs .  ( ; on tllcting pMhsare two or store distinct sequellCe8 of paths hetween it give il pair of nodes . 
4SIlppose that n l is * l prepositional ll lrltse ~   112 is it verb I , hrlise : ant in 3 is It not her prepositimud phrttse , Then , we have a u ambiguity in tilen luttadlment . Multiple outgoing arcs from ~ L , lode in the PK2 graph do not necessarily imply ambiguities . 
PK 1,0__,0"ll no "( catrl ) t ~ or lao1

ADJP " sarvo .   .   .   . branch "( catn ) cat v ) form prsprt )
PKa " momor v chip .   .   .   .  ~,\[2~ .   . TJ'(cutn ) ( cat n)
Figure . 2: PKS graphs " information "( cat n)
PPIN % ' ' ~" file " ( cat n)
PPABOUT ~ IPPABOUT " password " ( cat n ) l " it ~ ure 3: C , o , it li (: tiiiglmthshiaPK , qgra . phT here h/re , a document l is L with h w g e C1 and/or C2 gonerally should be divided into smaller lists for consls-Lent translation  . Ill all ideal situation , C1 and C2 botll should be 0 . Coleetid . \[:q and Nasukawafl 71 suggest hat there is a strong telidellcy for C\] to be very slna\[linarei LSO llal  ) lespoilOfgoxt . 
It is easily shown that for any two docllmellt lists I  , liUld1/2 (1 , 1N\[ , 2 -- (/)) , the mtm bersof conllieting arcs and \[) al , il S ~ Ull , C 121 ( ~'21 , and C22 , respect lve\]y , are memogonir . Tlmt is , the numbers C , 1 and C2 of contlieting arcs and Inxths of the combined document list L  ( = l , iU1 , 2) satisfy CI > Ctt + C21 and C2 >
C2, + C~...
4. \]) is ambiguation Method
The Imsis of disanihiguation of the three t . ylms of it in-hignlty discussed in ~ ection ' . ) . is to prefer the host PKS hit he do ( : ilmel/llst . tlut L matches the anihig/lity ~ alid to hlterpret ~ ie  . PKS as ~ t rule for selecting a word Sell Sei phrasld attitchlt tell to Fword traits h~th ln  . 
if there is l to matching PKS , either the . ambiguity is properly hiuidled I > y the systen l , which results in not l S(!r corre . (' . tiollinthedtiCltllielits ~ ( ) r it is l lew to the systc ln . 
In tim for nler case , the riser will probably be satisfied wit . h the transhttim , by the system . In the latter case ~ the translatt lonmay litve to  ) e corrected hytile riser , but the interaction will be recorded its all eWl ll  ( S and usex l for\[llttlri!dis ; tm/iguation . 
I'\['mrllati:hiItg ~ algorithrn for I>K1 and PK3 rnlesis as inllile exa . ct matching of words a . ndle . xieal features . If ages of the rules and the ordering o1" documents in the document llst uniquely determine the most preferable PKS  . The PK2 rules , however , can be used with a more flexible matching algorithm I e  ,   12\] since the coverage of PK2 rules would be very limited if two phra . ses ( the modifier and modifiee phrases ) had to match the rule exactly . 
Once the document list has been given , the PK1 and PK3 rules can be polynomlally converted into a shrq ) lelookup table , where the key is an ambiguous ward , and only the most preferable rules it restored mr retriew ~ d  , s PK2 rules can be organized similarly as a ternary lookup table  . 
It should be noted that sentences in a document list can be utilized as an example base  \[9\] since the documents in the document list has already been translated  , and the translation of the source sentence is readily available  . Indeed ~ the conventioual matching algorithm for a flat example base has to be extended into a hierar-chic Mone  , where the latest translation has the highest priority  , and PKSs must be equally tllken into cons\[d : eration  . 
5. Knowledge Source Compilation
When a set of documents in one domain grows considerably  , or when the MT system is to be transporte ( I to a different environment , it is convenient to be able to compile PKSs into a single  , portable user dictionary . 
The compilation is similar to the creation of lookup tables  , described in the previou section . The numbers of conflicting arcs and paths should be carefully examined to see whether a given document list yields a cousistent user dictionary  . "\[' he user can rearrange the ordering of documents  , and choose the most preferable among conflicting PKS rules to make the optimal user dictionary for the domain  . 
The rearrangement of documents in the document llst does not change the resulting PKS graphs  . It just changes the preferences among the conflicting arcs or paths  . Therefore , the optimal construction of ~ t user dictionary does not have to consider an exponenthd number of possible document order lngs  , but only a polynomial number of the following palrwise constraints : * If there are conflicting arcs ttl ~  a2~   .   . "1 akiu the PK1 ( or PK3) graph , and the most i ) referable arc is a ; , the document di having the PK1 ( or PK3 ) rule for ai must be preceded by each document dj having the arca a "  ( j = 1 ,   .   .   . , k . j 7~ i ) . 
? If there are conflicting paths Pl , P2, .   .   , l ) k in the PK2 graph , and the moat preferable path is Pl , the 5Alternatively , all the conflicting PKS rules can I ) estored to give tire user as many candida . tesas possible . 
document di having the PK2 rule f ~ r the ~ ir starc in Pl must be preceded by each do cunmnt dj having tile I  ) 1 ( 2 rule for the first arc ill pj ( j = 1 ,   .   .   . , k . 
jT ~ i).
It is polynomlally decidable whether there is an mr-dering of documents that satisfies all of the above constraints  . An ordering of documents exists if \ [" the constraints are not cyclic  ( that is , iff there is a document D that must precede itself  )  .  \] , \] yen if there is no linear ordering of such documents  , the user dictionary can still be crejted from the user-selected arcs and paths  . In this case , however , there is no natural carrespoudence between the user dictionary and a document list  . Such a e or respomtence is indispensable if the user wishes to update the user dictionary when a new document is : td de dat  ; to arbitrary imsition in a document list . If the user dictionary is equivalently reducible to a document list  , recompilation of the document list into the user dictionary is straightforward  . When no such equlv Ment list exists ~ a do cun mnt may only be added to the tail of the list  , thusow ' . rruling all the conflicting PKSs . 
6. Alternative Views of Knowledge
Organization
In Section 3 , we took a simplified view of the PKS organization ~ which we may call an " optimistic organization  . "It was implicitly i~ssumed ti , at only the elements in PKSs can conflict with each other  . Howew ~ r , the sys-tem's default choice of word senses , may haw ~ satisfied a user , but maye on \[ lict with a PKS newly added to the document list  . Thus , PKSs need to be more carefully organized if the user thinks that th ~ translation by the system is adequate without the PKSs  . This view may be called a " pessimistic organization " of PKSs  . The op ~ timlstic orga . niza . tion is easier to implement , while the pessimistic organization can provide users with more consistm~t translation  . 
In the pessimistic org ~ niza . tion , the conflicting knowledge has to be defined in terms of PKSs ~ uld the choices of word sense  , phrasali ~ ttachment , and word translation IV the system . ' lk~chnically , it means that fure very PKS in the doculmmt list  , we have to examine if each rule in the PKS to determine whether it con-filets with a preceding PKS rule or a choice by the system  . This is often w~ry time <: on suming . One way to deal with this l ) essimistic view is to keep track of the do cunmnt list with which a new docnment is translated  . It can easily I ) e shown that time-consuming checking of I ) B2Sconlli ( -ts can be avoided by employing a monotonm ~ sly growing sequence of document lists  , dl , all , d2 ,   .   .   .   , al L , d2 , "' i " dk such that each docu-nlent di in the list has been translated by using the PI  ( Ss in the document llst dr , d2 ,   .   .   . , di-I . 
887. Conclusions
In this paper , we have proposed it new machine trlcns-litton mechanism based on portable  , kn(~wl edges on rees . 
It provides MT systems with an efficient way of acqulr-ingar  , (l utilizing the vital inR~rmlttion from the nser in order to gradually achieve correct translation in at multidomain  , multiuser environment . Since the dO Cll-men ) lint ( or a lint of previously translate documents ) is usually read-only , it is not only a convenient unit for storing domain-oriented tlis amblguation knowledge  , I , ut also an ideal resource for machine translation that can be shared by manynse  . rs . 
We have started organizing our knowledge sources into a doculnellt list  . The c ) trrent doc . nllle its consist of four IBM AS/400 computer Iuanllal S with about ,  2'2 , 000 sentences and a CAD manual with about 10 , 000 sentences . Currently only alma ) 1 , 2 00 sentences have been translated by using our prototype MT system  Shalt2\[t l \] and corrected by the use . r for knowlpdge at c-qulsition . The PKS rules art . ' therefore few and not ready for qn antitative analysis  . Some interesting oc-cn rrences of words , however ~ have already been found . 
In one of the above , manuals , for example , the noun " part " was used in two different word senses : as a hard--ware comlmnent and msan abstract lmr tion of a whole  . 
' Phe first usage of this noun , howew ~ r , seemed more re~stricted : it was always modiIied by a prolm r noun  . In one manual , the word " llne " wa . ~ clearly acnd consistently used to mean a specific mw on the screen  , while in another it wins always used to mean at geometric om-ponent  . 
The iuteraetion of PKS rules has not been discussed in this paper  ) although it is a very interesting topic . 
Suppose that PI ( 2 rnlescan also in ch ) dethe word senses for each word . It is not clear whether the word senses in the rules shonld be considered its conditional  ( valid only if the pair of mo/lilier and modifiee is present  ) or absolute ( no matter what the modifier and mtnlitie eacre )  . 
Only the latter case is handled by the PK1 , and the former cases could be the exceptions to the PK  1 rules . 
If the " one sense per doenment " assnmption see ) as too strong ~ we can modify the PK1 aud 1'I ; 3 rules by adding contextual dependency to the rules so that at word sense or a word translation is valid only if the word appears with a certain modifier or modifiee  , has at certain syntactic role ~ and st ) on . 

I would like to thank Tetsuya N~sukawa and Naa -hike Urarnoto for many discussions which haw  ; gr~c<l-ually materialized into the idea of portable knowledge sources  . The comments from tl\[ideo Watanabe and Ili-roshi No miyama also contribnted to the refinement  ( If the technical cmltents . Michael McDo~lMd , a . susual , proofread the paper , and helped mewrite timfinal ver-slO ) l . 
References 1) C . Boitet and II . Blanehon . " l ) i alogue-13ased M'F for nmnolingual authors and the I , II)\[A projec C . Inl'roe . 
of the Natural Langua9e Proeessi~g Pacific RimS ' yrapo-sium '93  , pages 208-222 , I , ' ukuoka , Japan , Dee .  1993 . 
2) IIM Corp . "IBM SAAAl ) /Cyele Translation Man-ager/2 lelease 1 . 0" . q'echnleal report , S1 112-5900, 1992 . 
3) W . ( bile , 1? . . (_:hatch , and I ) . Ynrowsky . "OneSenseI'erl ) is eourse ", htPrec . of lhe ~ lhI ) ARPA Speeeh and
Natur M Language Workshop , 1992.
4) 11 . Maruyama , 1I . Watanabe , and S . Ogino . " An In--teractived ap~tnesel ' arser for Machine q ' ranslation "  , ht Proe . of the 13lh htlernalional Conference on Computational Linguislies  , pages 257-262 , tlels in k i , Aug .  1990 . 
5) S . W . Mcltoy . " Using Multiple Knowledge Sources for Word Sense I  ) is erhnination ' . Computational Liguislies , 18(1):1-30, Mar .  1992 . 
6) K . Nagao . "Dependency Analyzer : A Knowledge-Based Alq ) t . oachtaStrut%m'all ) is amblguatlon ' . In Prec . of the 131h lnlernalional Conference on Compulalional Linguislies  , pages 282-?87 , llels in ki , Aug .  1990 . 
7) '1' . Nasukawa . " l ) is cource Constraint in CO mlmter Man-uals " . Inl'roe , of lhe 51h lnlernalional Conference on ! lTteorelieal and Methodological Issues in Machine Translation  , pages 183194 , Kyot ( ~ , Japan , July 1993 . 
8) J . l~usl . ejovsky . " The Generative I , exie on " . Compula-lional Linguistics , 17(4):409-4'tl , December 1991 . 
9) S . Sat . o and M . Nag , re . " Toward Memory-based Translation " . In 1' roe . of I he 13lh International Conference on Cmap vlalional Linguislic  . ~ pages 247252, tlels in k i ,
Aug . 1990.
\]0) E . Sumita and 1I . lida . " l , ' , xperiments and Prospects of l ' ; xample-lb~sed Ivlachine Translation " . In Prec . of the 291h Annual Meeting of the Association for Computational Linguistics  , pages 185-192 , Berkeley , June 1991 . 
11) K . Takeda , N . Ursine , o , T . Nasnkawa , and T . ' l's nt-snmi . " Shalt2-A Symmetric Machine Translation Sys-l . em with Conceptual Transfer " . In Prec . of lhet#h International Conference on Computational Linguistics  , pages 10341038 , July 1992 . 
12) N . Urarnoto . " Lexical and Structural ) is ambiguation IJsing an Examph ~- Fl : t ~ e ' . Inl'rae , of the 2nd Japan-Au . stralia Joint Syrrt posi'um on NLP , pages 150160,
Oct . 1991.
13) I ) . Yarowsky . " Word-Sensel ) is ambiguation Using St/t-tistieal Models tff Roger 's Categories q ' rained on I  , argeCorpora " . In Prec . of the 14th Inlernational Confer-enee on Compulalional Linguistics  , pages 454-460 , July 1992 , 
