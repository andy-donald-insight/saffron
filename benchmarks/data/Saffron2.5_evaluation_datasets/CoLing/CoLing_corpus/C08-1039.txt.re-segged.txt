Proceedings of the 22nd International Conference on Computational Linguistics ( Coling 2008), pages 305?312
Manchester , August 2008
Homotopy-based Semi-Supervised Hidden Markov Models
for Sequence Labeling?
Gholamreza Haffari and Anoop Sarkar
School of Computing Science
Simon Fraser University
Burnaby , BC , Canada
{ghaffar1,anoop}@cs.sfu.ca
Abstract
This paper explores the use of the homotopy method for training a semisupervised
Hidden Markov Model ( HMM ) used for sequence labeling . We provide a novel polynomial-time algorithm to trace the local maximum of the likelihood function for HMMs from full weight on the labeled data to full weight on the unlabeled data . We present an experimental analysis of different techniques for choosing the best balance between labeled and unlabeled data based on the characteristics observed along this path . Furthermore , experimental results on the field segmentation task in information extraction show that the Homotopy-based method significantly outperforms EM-based semisupervised learning , and provides a more accurate alternative to the use of heldout data to pick the best balance for combining labeled and unlabeled data.
1 Introduction
In semisupervised learning , given a sample containing both labeled data L and unlabeled data U , the maximum likelihood estimator ? mle maximizes:
L (?) := ? ( x,y)?L log P ( x,y |?)+ ? x?U log P ( x |?) (1) where y is a structured output label , e.g . a sequence of tags in the part-of-speech tagging task , or parse trees in the statistical parsing task . When the number of labeled instances is very small compared to the unlabeled instances , i.e . | L | ? | U |, ? We would like to thank Shihao Ji and the anonymous reviewers for their comments . This research was supported in part by NSERC , Canada.
? c ? 2008. Licensed under the Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported license ( http://creativecommons.org/licenses/by-nc-sa/3.0/).
Some rights reserved.
the likelihood of labeled data is dominated by that of unlabeled data , and the valuable information in the labeled data is almost completely ignored.
Several studies in the natural language processing ( NLP ) literature have shown that as the size of unlabeled data increases , the performance of the model with ? mle may deteriorate , most notably in ( Merialdo , 1993; Nigam et al , 2000). One strategy commonly used to alleviate this problem is to explicitly weigh the contribution of labeled and unlabeled data in (1) by ? ? [0, 1]. This new parameter controls the influence of unlabeled data but is estimated either by ( a ) an adhoc setting , where labeled data is given more weight than unlabeled data , or ( b ) by using the EM algorithm or ( c ) by using a heldout set . But each of these alternatives is problematic : the adhoc strategy does not work well in general ; the EM algorithm ignores the labeled data almost entirely ; and using heldout data involves finding a good step size for the search , but small changes in ? may cause drastic changes in the estimated parameters and the performance of the resulting model . Moreover , if labeled data is scarce , which is usually the case , using a heldout set wastes a valuable resource1 .
In this paper , we use continuation techniques ( Corduneanu and Jaakkola , 2002) for determining ? for structured prediction tasks involving HMMs , and more broadly , the product of multinomials ( PoM ) model . We provide a polynomial-time algorithm for HMMs to trace the local maxima of the likelihood function from full weight on the labeled data to full weight on the unlabeled data . In doing so , we introduce dynamic programming algorithms for HMMs that enable the efficient computation over unlabeled data of the covariance between pairs of state transition counts and pairs of state-state and state-observation counts . We present a detailed experimental analysis of different techniques for choosing the best balance be-1Apart from these reasons , we also provide an experimental comparision between the homotopy based approach , the EM algorithm , and the use of a held out set.
305 tween labeled and unlabeled data based on the characteristics observed along this path . Furthermore , experimental results on the field segmentation task in information extraction show that the Homotopy-based method significantly outperforms EM-based semisupervised learning , and provides a more accurate alternative to the use of heldout data to pick the best balance for combining labeled and unlabeled data . We argue this approach is a best bet method which is robust to different settings and types of labeled and unlabeled data combinations.
2 Homotopy Continuation
A continuation method embeds a given hard root finding problem G (?) = 0 into a family of problems H (?(?), ?) = 0 parameterized by ? such that H(?(1), 1) = 0 is the original given problem , and H(?(0), 0) = 0 is an easy problem F (?) = 0 ( Richter and DeCarlo , 1983). We start from a solution ? ? lutions of the intermediate problems2. A simple deformation or homotopy function is:
H (?, ?) = (1? ?) F (?) + ? G (?) (2)
There are many ways to define a homotopy map , but it is not trivial to always guarantee the existence of a path of solutions for the intermediate problems . Fortunately for the homotopy map we will consider in this paper , the path of solutions which starts from ? = 0 to ? = 1 exists and is unique.
In order to find the path numerically , we seek a curve ?(?) which satisfies H (?(?), ?) = 0.
This is found by differentiating with respect to ? and solving the resulting differential equation . To handle singularities along the path and to be able to follow the path beyond them , we introduce a new variable s ( which in our case is the unit path length ) and solve the following differential equation for (?( s ), ?( s )): ? H (?, ?) ?? d ? ds + ? H (?, ?) ?? d ? ds = 0 (3) subject to ||( d ? ds , d ? ds )|| dition (?(0), ?(0)) = (? 2This deformation gives us a solution path (?(?), ?) in Rd+1 for ? ? [0, 1], where each component of the d-dimensional solution vector ?(?) = (? d (?)) is a function of ?.
method ( see Algorithm 1) to solve (3) but higher order methods such as Runge-Kutta of order 2 or 3 can also be used.
3 Homotopy-based Parameter Estimation
One way to control the contribution of the labeled and unlabeled data is to parameterize the log likelihood function as L ? (?) defined by 1? ? | L | ? ( x,y)?L log P ( x , y |?) + ? | U | ? x?U log P ( x |?) How do we choose the best ?? An operator called
EM ? is used with the property that its fixed points ( locally ) maximize L ? (?). Starting from a fixed point of EM ? when ? is zero3, the path of fixed point of this operator is followed for ? > 0 by continuation techniques . Finally the best value for ? is chosen based on the characteristics observed along the path . One option is to choose an allocation value where the first critical4 point occurs had we followed the path based on ?, i.e . without introducing s ( see Sec . 2). Beyond the first critical point , the fixed points may not have their roots in the starting point which has all the information from labeled data ( Corduneanu and Jaakkola , 2002). Alternatively , an allocation may be chosen which corresponds to the model that gives the maximum entropy for label distributions of unlabeled instances ( Ji et al , 2007). In our experiments , we compare all of these methods for determining the choice of ?.
3.1 Product of Multinomials Model
Product of Multinomials ( PoM ) model is an important class of probabilistic models especially for NLP which includes HMMs and PCFGs among others ( Collins , 2005). In the PoM model , the probability of a pair ( x,y ) is
P ( x,y |?) =
M ? m=1 ? ??? m ? m (?)
Count(x,y ,?) (4) where Count(x,y , ?) shows how many times an outcome ? ? ? m has been seen in the input-output pair ( x,y ), and M is the total number of multinomials . A multinomial distribution parameterized 3In general , EM our case , EM cally using relative frequency estimation.
4A critical point is where a discontinuity or bifurcation occurs . In our setting , almost all of the critical points correspond to discontinuities ( Corduneanu , 2002).
306 by ? m is put on each discrete space ? m where the probability of an outcome ? is denoted by ? m (?).
So for each space ? m , we have ? ??? m ? m (?) = 1.
Consider an HMM with K states . There are three types of parameters : ( i ) initial state probabilities P ( s ) which is a multinomial over states ? ( ii ) state transition probabilities P ( s?|s ) which are
K multinomials over states ? s ( s ? ) , and ( iii ) emission probabilities P ( a|s ) which are K multinomials over observation alphabet ? s+K ( a ). To compute the probability of a pair ( x,y ), normally we go through the sequence and multiply the probability of the seen state-state and state-observation events:
P ( x,y |?) = ? y ( x | y|
Y t=2 ? y t?1 ( y t )? y t + K ( x t ) which is in the form of (4) if it is written in terms of the multinomials involved.
3.2 EM ?
Operator for the PoM Model
Usually EM is used to maximize L (?) and estimate the model parameters in the situation where some parts of the training data are hidden . EM has an intuitive description for the PoM model : starting from an arbitrary value for parameters , iteratively update the probability mass of each event proportional to its count in labeled data plus its expected count in the unlabeled data , until convergence.
By changing the EM?s update rule , we get an algorithm for maximizing L ? (?): ? ? m (?) = 1? ? | L | ? ( x,y)?L
Count(x,y , ?) + ? | U | ? x?U ? y?Y x
Count(x,y , ?) P ( y|x ,? old ) (5) where ?? m is the unnormalized parameter vector , i.e . ? m (?) = ? ? m (?)
P ??? m ? ? m (?) . The expected counts can be computed efficiently based on the forwardbackward recurrence for HMMs ( Rabiner , 1989) and insideoutside recurrence for PCFGs ( Lari and Young , 1990). The right hand side of (5) is an operator we call EM ? which transforms the old parameter values to their new ( unnormalized ) values.
EM supervised and unsupervised parameter estimation settings , and:
EM ? (?) = (1? ?) EM 3.3 Homotopy for the PoM Model The iterative maximization algorithm , described in the previous section , proceeds until it reaches a fixed point EM ? (?) = ? ?, where based on (6): (1? ?) ( ? ?? EM | { z }
F (?) +? ( ? ?? EM | { z }
G (?) = 0 (7)
The above condition governs the ( local ) maxima of EM ? . Comparing to (2) we can see that (7) can be viewed as a homotopy map.
We can generalize (7) by replacing (1? ?) with a function g sponds to other ways of balancing labeled and unlabeled data log-likelihoods in (1). Moreover , we may partition the parameter set and use the homotopy method to just estimate the parameters in one partition while keeping the rest of parameters fixed ( to inject some domain knowledge to the estimation procedure ), or repeat it through partitions . We will see this in Sec . 5.2 where the transition matrix of an HMM is frozen and the emission probabilities are learned with the continuation method.
Algorithm 1 describes how to use continuation techniques used for homotopy maps in order to trace the path of fixed points for the EM ? operator . The algorithm uses the Euler method to solve the following differential equation governing the fixed points of EM ? : [ ?? ? ?
EM [ d ? ? d ? ] = 0
For PoM models ? ? ?
EM pactly as follows6: ? x?U
COV
P ( y|x ,?) [
Count(x,y ) ] ? H (8) where COV
P ( y|x ,?) [ Count(x,y )] is the conditional covariance matrix of all features Count(x,y , ?) given an unlabeled instance x . We denote the entry corresponding to events ?
P ( y|x ,?) (? is a block diagonal matrix built from H ? i where
H ? i = ( ? ? i (? ? ? i (? |? i | )) ? I ? i |?|? i | ? ??? i ? ? i (?) 5However the following two conditions must be satisfied : ( i ) the deformation map is reduced to ( ??? EM 0 and ( ??? EM exists for Eqn . (2).
6A full derivation is provided in ( Haffari and Sarkar , 2008) ? 1: Input : Labeled data set L 2: Input : Unlabeled data set U 3: Input : Step size ? 4: Initialize [ ?? ?] = [ EM 5: ? old ? [0 1] 6: repeat 7: Compute ? ? ?
EM on unlabeled data U 8: Compute ? = [ d ?? d ?] as the kernel of [?? ? ?
EM 9: if ? ? ? old < 0 then 10: ? ? ?? 11: end if 12: [ ?? ?]? [ ?? ?] + ? ? ||?|| 14: until ? ? 1 Computing the covariance matrix in (8) is a challenging problem because it consists of summing quantities over all possible structures Y x associated with each unlabeled instance x , which is exponential in the size of the input for HMMs.
4 Efficient Computation of the Covariance Matrix
The entry COV
P ( y|x ,?) (? variance matrix is
E[Count(x,y , ?
E[Count(x,y , ? where the expectations are taken under P ( y|x,?).
To efficiently calculate the covariance , we need to be able to efficiently compute the expectations.
The linear count expectations can be computed efficiently by the forwardbackward recurrence for HMMs . However , we have to design new algorithms for quadratic count expectations which will be done in the rest of this section.
We add a special begin symbol to the sequences and replace the initial probabilities with P ( s|begin ). Based on the terminology used in (4), the outcomes belong to two categories : ? = ( s , s ?) where state s ? follows state s , and ? = ( s , a ) where symbol a is emitted from state s . Define the feature function f ? ( x,y , t ) to be 1 if the outcome ? happens at time step t , and 0 otherwise . Based on the fact that Count(x,y , ?) = ? | x | t=1 f ? ( x,y , t ), we have
E[Count(x,y , ? ? t t y?Y x f ? ? which is the summation of | x|2 different expectations . Fixing two positions t tation is the probability ( over all possible labels ) of observing ? tively , which can be efficiently computed using the following data structure . Prepare an auxiliary table
Z x containing P ( x [ i+1,j ] , s i , s j ), for every pair of states s i and s j for all positions i , j ( i ? j):
Z x i,j ( s i , s j ) =
X s i+1 ,.., s j?1 j?1
Y k=i
P ( s k+1 | s k ) P ( x k+1 | s k+1 )
Let matrix Mx k = [ M x k ( s , s ? )] where Mx k ( s , s ? ) =
P ( s ? | s)P ( x k | s ? ); then Zx i,j = ? j?1 k=i
M x k . Forward and backward probabilities can also be computed from Zx , so building this table helps to compute both linear and quadratic count expectations.
With this table , computing the quadratic counts is straightforward . When both events are of type state-observation , i.e . ? = ( s , a ) and ?? = ( s ?, a ?), their expected quadratic count can be computed as ? t t x t ? x t ? [ ? k
P ( k|begin)Zx 1,t
Z x t ? ).
? k
Z x t ( s ? , k)P ( end|k ) ] where ? x t , a is 1 if x t is equal to a and 0 otherwise.
Likewise we can compute the expected quadratic counts for other combination of events : ( i ) both are of type state-state , ( ii ) one is of type state-state and the other state-observation.
There are L(L+1) of length L , and the time complexity of building each of them is O(K3) where K is the number of states in the HMM . When computing the covariance matrix , the observations are fixed and there is no need to consider all possible combinations of observations and states . The most expensive part of the computation is the situation where the two events are of type state-state which amounts to O(L2K4) matrix updates . Noting that a single entry needs O(K ) for its updating , the time complexity of computing expected quadratic counts for a single sequence is O(L2K5). The space needed to store the auxiliary tables is O(L2K2) and the space needed for covariance matrix is O((K2 +
NK ) 5 Experimental Results
In the field segmentation task , a document is considered to be a sequence of fields . The goal is
Kaufmann ,] [ DATE 1992.]
Figure 1: A field segmentation example for Citations dataset.
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.12 0.13 0.14 0.15 0.16 0.17 0.18 ?
Er ro r ( pe r p os itio n)
EM?2 freez Error on Citation Test (300L5000U)
Viterbi Decoding
SMS Decoding ? MLE ( a ) 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 ?
Er ro r ( pe r p os itio n)
EM ? freez Error on Citation Test (300L5000U)
Viterbi Decoding
SMS Decoding ? MLE ( b)
Figure 2: EM ? error rates while increasing the allocation from 0 to 1 by the step size 0.025.
to segment the document into fields , and to label each field . In our experiments we use the bibliographic citation dataset described in ( Peng and McCallum , 2004) ( see Fig . 1 for an example of the input and expected label output for this task).
This dataset has 500 annotated citations with 13 fields ; 5000 unannotated citations were added to it later by ( Grenager et al , 2005). The annotated data is split into a 300-document training set , a 100-document development ( dev ) set , and a 100-document test set7.
We use a first order HMM with the size of hidden states equal to the number of fields ( equal to 13). We freeze the transition probabilities to what has been observed in the labeled data and only learn the emission probabilities . The transition probabilities are kept frozen due to the nature of this task in which the transition information can be learned with very little labeled data , e.g . first start with ? author ? then move to ? title ? and so on.
However , the challenging aspect of this dataset is to find the segment spans for each field , which depends on learning the emission probabilities , based on the fixed transition probabilities.
At test time , we use both Viterbi ( most probable sequence of states ) decoding and sequence of most probable states decoding methods , and abbreviate them by Viterbi and SMS respectively . We report results in terms of precision , recall and Fmeasure for finding the citation fields , as well as accuracy calculated per position , i.e . the ratio of the words labeled correctly for sequences to all of the words.
The segment-based precision and recall scores are , 7From http://www.stanford.edu/grenager/data/unsupie.tgz of course , lower than the accuracy computed on the per-token basis . However , both these numbers need to be taken into account in order to understand performance in the field segmentation task.
Each input word sequence in this task is very long ( with an average length of 36.7) but the number of fields to be recovered is a small number comparatively ( on average there are 5.4 field segments in a sentence where the average length of a segment is 6.8). Even a few oneword mistakes in finding the full segment span leads to a drastic fall in precision and recall . The situation is quite different from part-of-speech tagging , or even nounphrase chunking using sequence learning methods . Thus , for this task both the per-token accuracy as well as the segment precision and recall are equally important in gauging performance.
Smoothing to remove zero components in the starting point is crucial otherwise these features do not generalize well and yet we know that they have been observed in the unlabeled data . We use a simple add -? smoothing , where ? is .2 for transition table entries and .05 for the emission table entries.
In all experiments , we deal with unknown words in test data by replacing words seen less than 5 times in training by the unknown word token.
5.1 Problems with MLE
MLE chooses to set ? = | U | | L|+|U | which almost ignores labeled data information and puts all the weight on the unlabeled data8. To see this empirically , we show the per position error rates at dif-8One anonymous reviewer suggests using ? = | L | | L|+|U | but the ? best bet ? for different tasks that we mention in the Introduction may not necessarily be a small ? value.
309 ferent source allocation for HMMs trained on 300 labeled and 5000 unlabeled sequences for the Citation dataset in Fig . 2(a ). For each allocation we have run EM ? algorithm , initialized to smoothed counts from labeled data , until convergence . As the plots show , initially the error decreases as ? increases ; however , it starts to increase after ? passes a certain value . MLE has higher error rates compared to complete data estimate , and its performance is far from the best way of combining labeled and unlabeled data.
In Fig . 2(b ), we have done similar experiment with the difference that for each value of ?, the starting point of the EM ? is the final solution found in the previous value of ?. As seen in the plot , the intermediate local optima have better performance compared to the previous experiment , but still the imbalance between labeled and unlabeled data negatively affects the quality of the solutions compared to the purely supervised solution.
The likelihood surface is nonconvex and has many local maxima . Here EM performs hill climbing on the likelihood surface , and arguably the resulting ( locally optimal ) model may not reflect the quality of the globally optimal MLE . But we conjecture that even the MLE model(s ) which globally maximize the likelihood may suffer from the problem of the size imbalance between labeled and unlabeled data , since what matters is the influence of unlabeled data on the likelihood . ( Chang et.
al ., 2007) also report on using hard-EM on these datasets9 in which the performance degrades compared to the purely supervised model.
5.2 Choosing ? in Homotopy-based HMM
We analyze different criteria in picking the best value of ? based on inspection of the continuation path . The following criteria are considered : ? monotone : The first iteration in which the monotonicity of the path is changed , or equivalently the first iteration in which the determinant of ?? ? ?
EM ( Corduneanu and Jaakkola , 2002).
? minEig : Instead of looking into the determinant of the above matrix , consider its minimum eigenvalue . Across all iterations , choose the one for which this minimum eigenvalue is the lowest.
?maxEnt : Choose the iteration whose model puts the maximum entropy on the labeling distribution for unlabeled data ( Ji et al , 2007).
9In Hard-EM , the probability mass is fully assigned to the most probable label , instead of all possible labels.
The second criterion is new , and experimentally has shown a good performance ; it indicates the amount of singularity of a matrix.
100 150 200 250 300 350 400 450 500 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 # Unlabeled Sequences ?
Best Selected Allocations monton maxEnt minEig
EM
Figure 3: ? values picked by different methods.
The size of the labeled data is fixed to 100, and results are averaged over 4 runs . The ? values picked by MaxEnt method for 500 unlabeled examples was .008.
We fix 100 labeled sequences and vary the number of unlabeled sequences from 100 to 500 by a step of 50. All of the experiments are repeated four times with different randomly chosen unlabeled datasets , and the results are the average over four runs . The chosen allocations based on the described criteria are plotted in Figure 3, and their associated performance measures can be seen in
Figure 4.
Figure 3 shows that as the unlabeled data set grows , the reliance of ? minEig ? and ? monotone ? methods on unlabeled data decreases whereas in EM it increases . The ? minEig ? method is more conservative than ? monotone ? in that it usually chooses smaller ? values . The plots in Figure 4 show that homotopy-based HMM always outperforms EM-based HMM . Moreover , ? maxEnt ? method outperforms other ways of picking ?. However , as the size of the unlabeled data increases , the three methods tend to have similar performances.
5.3 Homotopy v.s . other methods
In the second set of experiments , we compare the performance of the homotopy based method against the competitive methods for picking the value of ?.
We use all of the labeled sequences ( size is 300) and vary the number of unlabeled sequences from 300 to 1000 by the step size of 100. For the first competitive method , 100 labeled sequences are put in a held out set and used to select the best value 0.2 0.25
F?measure # Unlabeled Sequences 100 200 300 400 500 0.8 0.82 0.84
Total accuracy # Unlabeled Sequences 100 200 300 400 500 0.1 0.15 0.2 0.25 0.3
F?measure 100 200 300 400 500 0.8 0.82 0.84
Total accuracy monotone maxEnt minEig EM Figure 4: The comparison of different techniques for choosing the best allocation based on datasets with 100 labeled sequences and varying number of unlabeled sequences . Each figure shows the average over 4 runs . Fmeasure is calculated based on the segments , and total accuracy is calculated based on tokens in individual positions . The two plots in the top represent Viterbi decoding , and the two plots in the bottom represent SMS decoding.
of ? based on brute-force search using a fixed step size ; afterwards , this value is used to train HMM ( based on 200 remaining labeled sequences and unlabeled data ). The second competitive method , which we call ? Oracle ?, is similar to the previous method except we use the test set as the held out set and all of the 300 labeled sequences as the training set . In a sense , the resulting model is the best we can expect from cross validation based on the knowledge of true labels for the test set . Despite the name ? Oracle ?, in this setting the ? value is selected based on the loglikelihood criterion , so it is possible that the ? Oracle ? method is outperformed by another method in terms of precision/recall/f-score . Finally , EM is considered as the third baseline.
The results are summarized in Table 1. When decoding based on SMS , the homotopy-based HMM outperforms the ? Heldout ? method for all of performance measures , and generally behaves better than the ? Oracle ? method . When decoding based on Viterbi , the accuracy of the homotopy-based HMM is better than ? Heldout ? and is in the same range as the ? Oracle ?; the three methods have roughly the same fscore . The ? value found by Homotopy gives a small weight to unlabeled data , and so it might seem that it is ignoring the unlabeled data . This is not the case , even with a small weight the unlabeled data has an impact , as can be seen in the comparison with the purely Supervised baseline in Table 1 where the Homotopy method outperforms the Supervised baseline by more than 3.5 points of fscore with SMS-decoding . Homotopy-based HMM with SMS-decoding outperforms all of the other methods.
We noticed that accuracy was better for 700 unlabeled examples in this dataset , and so we include those results as well in Table 1. We observed some noise in unlabeled sequences ; so as the size of the unlabeled data set grows , this noise increases as well . In addition to finding the right balance between labeled and unlabeled data , this is another factor in semisupervised learning . For each particular unlabeled dataset size ( we experimented using 300 to 1000 unlabeled data with a step size of 100) the Homotopy method outperforms the other alternatives.
6 Related Previous Work
Homotopy based parameter estimation was originally proposed in ( Corduneanu and Jaakkola , 2002) for Na??ve Bayes models and mixture of Gaussians , and ( Ji et al , 2007) used it for HMM-based sequence classification which means that an input sequence x is classified into a class label y ? {1, . . . , k } ( the class label is not structured , i.e . not a sequence of tags ). The classification is done using a collection of k HMMs by computing
Pr(x , y | ? y ) which sums over all states in each HMM ? y for input x . The algorithms in ( Ji et al , 2007) could be adapted to the task of sequence labeling , but we argue that our algorithms provide a straightforward and direct solution.
There have been some studies using the Citation dataset , but it is not easy to directly compare their results due to differences in preprocessing , the amount of the previous knowledge and rich features used by the models , and the training data which were used . ( Chang et . al ., 2007) used a first order HMM in order to investigate injecting prior domain knowledge to self-training style bootstrapping by encoding human knowledge into declarative constraints . ( Grenager et al , 2005) used a first order HMM which has a diagonal transition matrix and a specialized boundary model . In both works , the number of randomly selected labeled and unlabeled training data is varied , which makes a di-unlab data p , r , fscore accuracy p , r , fscore accuracy Homotopy 700 .004 .292, .290, .290 87.1% .321, .332, .326 89%1000 .004 .292, .291, .291 87.9% .296, .298, .296 88.6% Heldout 700 .220 .311, .291, .297 87.1% .295, .288, .289 87.2%1000 .320 .300, .276, .283 86.9% .308, .281, .287 87.2% Oracle 700 .150 .284, .293, .287 87.8% .295, .313, .303 88%1000 .200 .285, .294, .289 87.9% .277, .292, .284 88.7% EM 700 .700 .213, .211, .211 84.8% .213, .220, .216 85.2%1000 .770 .199, .198, .198 83.7% .187, .198, .192 83.6% Supervised 0 0 .281, .278, .279 87% .298, .280, .288 88.4% Table 1: Results using entire labeled data with segment precision/recall/f-score and token based accuracy.
rect numerical comparison impossible . ( Peng and McCallum , 2004) used only labeled data to train conditional random fields and HMMs with second order state transitions where they allow observation in each position to depend on the current state as well as observation of the previous position.
7 Conclusion
In many NLP tasks , the addition of unlabeled data to labeled data can decrease the performance on that task . This is often because the unlabeled data can overwhelm the information obtained from the labeled data . In this paper , we have described a methodology and provided efficient algorithms for an approach that attempts to ensure that unlabeled data does not hurt performance . The experimental results show that homotopy-based training performs better than other commonly used competitive methods . We plan to explore faster ways for computing the ( approximate ) covariance matrix , e.g ., label sequences can be sampled from P ( y|x ,?) and an approximation of the covariance matrix can be computed based on these samples . Also , it is possible to compute the covariance matrix in polynomial-time for labels which have richer interdependencies such as those generated by a context free grammars ( Haffari and Sarkar , 2008). Finally , in Algorithm 1 we used a fixed step size ; the number of iterations in the homotopy path following can be reduced greatly with adaptive step size methods ( Allgower and Georg , 1993).
References
E . L . Allgower , K . Georg 1993. Continuation and Path
Following , Acta Numerica , 2:1-64.
M . Chang and L . Ratinov and D . Roth . 2007. Guiding Semi-Supervision with Constraint-Driven Learning,
ACL 2007.
M . Collins 2005. Notes on the EM Algorithm , NLP course notes , MIT.
A . Corduneanu . 2002. Stable Mixing of Complete and Incomplete Information , Masters Thesis , MIT.
A . Corduneanu and T . Jaakkola . 2002. Continuation Methods for Mixing Heterogeneous Sources , UAI 2002.
T . Grenager , D . Klein , and C . Manning . 2005. Unsupervised Learning of Field Segmentation Models for
Information Extraction , ACL 2005.
G . Haffari and A . Sarkar . 2008. A Continuation Method for Semisupervised Learning in Product of Multinomials Models , Technical Report . Simon Fraser University . School of Computing Science.
K . Lari , and S . Young . 1990. The estimation of stochastic contextfree grammars using the insideoutside algorithm , Computer Speech and Language (4).
S . Ji , L . Watson and L . Carin . 2007. Semi-Supervised Learning of Hidden Markov Models via a Homotopy
Method , manuscript.
B . Merialdo . 1993. Tagging English text with a probabilistic model , Computational Linguistics K . Nigam , A . McCallum , S . Thrun and T . Mitchell.
2000. Text Classification from Labeled and Unlabeled Documents using EM , Machine Learning , 39.
p . 103-134.
F . Peng and A . McCallum . 2004. Accurate Information Extraction from Research Papers using Conditional
Random Fields , HLTNAACL 2004.
L . Rabiner . 1989. A Tutorial on Hidden Markov Models and Selected Applications in Speech Recognition , Proc . of the IEEE , 77(2).
S . Richter , and R . DeCarlo . 1983. Continuation methods : Theory and applications , IEEE Trans . on Automatic Control , Vol 26, issue 6.
312
