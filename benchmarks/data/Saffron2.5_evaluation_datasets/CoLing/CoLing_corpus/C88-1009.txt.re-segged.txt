Feature Graphs and Abstract Data Types :
A Unifying Approach
Christoph BEIERLE and Udo PLETAT
IBM Deutschl and GmbH
Science and Technology-LILOG
P.O . Box 800880
7000 Stuttgart 80, West Germany
( electronic mail on EARN/BITNET :
BEIERLE at DS #LILOG , PLETAT at DS #LILOG)
Abstract :
Feature graphs appearing in unification -- based grammar formalisms and algebraic specifications of abstract data types  ( ADTs ) are both used for defining a collection of objects together with functions between these object sets  . Starting from this observation we define an algebraic semantics for feature graphs by assigning an algebraic specification to each feature graph  . This opens the rich world of semantical foundations for abstract data types to the area of feature graphs and thus to unification grammar formalisms  . Using results from ADT theory we define a sim~le and fast syntactic decision procedure testing the usual consistency conditions on feature graphs like constant consistency  , constant/complex consistency and acyclicity on the algebraic specification assigned to a feature graph  . With this machinery at hand feature graph unif ication becomes union of feature graph spec if ications followed by the consistency test  . 
1. Introduction
Unification-based grammar formalisms have become a popular fieldo'f research  . The subject has attracted the interest not only of  ( computer ) linguists but also of computer scientists , especially in the area of logic programming , see e . g . \[ P e87\] . Due to the formality of grammars we also observe activities developing foundations for the formal semantics of various approaches on unific at ion grammars  , e . g . \[ PS84\] , \[ KR86\] , \[ RK86\] , \[ P e87\] , \[ Jo87\] . 
In this paper we investigate the relationship between feature graphs on the one hand and algebraic specifications of abstract data types  ( ADTs ) on the other hand . There is a natural correlation between both these are as since a feature graph as well as an abstract data type defines a collection of objects together with functions relating the objects  . 
We present a formal semantics for feature graphs by assigning to each feature graph Gan equational ADT specification ~  ( G )  , called fg--specification . This opens the rich world of ma'thematical foundations of ADT specifications  ( e . g\[GTW78\] , \[ EM85\] ) in order to obtain a better-not only-formal understanding of the nature of feature graphs  . 
In particular , we provide a model-theoretic characterizat ion of various consistency conditions for feature graph specifications reflecting the consistency concepts usually imposed on feature graphs such as clash-freeness and acyclicity  . These proof-theoretic counterparts in terms of syntactic conditions on the deductive closure of the set of equations of r  ( G ) oAlthough the proof-theoretic consistency characterizations are of syntactic nature  , a test of their validity requires to examine the deductive closure of the set of equations of afg-specification  . Our objective is to restrict consistency checks to equations explicitly mentioned in afg -specification o In the ADT-world there is a wel l-known tool for such tasks : the Knuth-Bendix algorithm  ( \[ KB70\] )  . We present a Knuth-Bendix like completion procedure transforming any fg-specification into a reduced normal form  . 
We show that the model-theoretic consistency characterizations for G are equivalent to the presence resp  . absence of certain types of equations in this reduced normal form  . 
These results are used for defining the semantics of the unification of two feature graphs GI and  G2 as the ( set-theoretic componentwise ) union of ~ ( GI ) and x ( G2 ) followed by the normalization process using the completion algorithm and the consistency check on the resulting set of equations ?  2  . Feature graphs A feature graph is a directed graph with a distinguished root node  . The edges of the graph are called features . An atomic graph is just a symbol ; it contains no features . A complex graph is a set of feature-value pairs where each value is either an atomic graph or again a complex one  . Two paths starting at the root and ending at the same node are said to co-  . refer . Feature graph unification is a binary eperation taking two graphs and returning \[ a graph containing exactly the informat J  . on of both graphs if they are unifiabl ~ . ~, and fails otherwise . An atomic graph is unifiable only with its e lf and the empty graph  . A complex graph G ~ is unifiable with the , empty graph , and G ~ is unifiable with a complex graph G2 if for all features in both G : and G2 the respective vahles are unifiab \] ( ~? Several notations for feature graphs have been suggested ? The graphical representation of 
NP could al~obe represented in matrix form : ~ CatI:VP 

IAgr < 1 > in the matrix notation coreference is ind icated by numbers enclosed in brackets  . 
Another notation , which for instance is employed in PATR , uses special equations indicati\[Lg core ference of paths and atomic values aL the end of of paths  , respectively : < Cat >== VP < SubjCat >== NP
SubjA gr > :< Agr >
In the following we will discuss an equat Jon~l representation of feature graphs in greater detail  . This representation will be oriented towards the equational specification of abstract data types  , thus making ~ . vailable the powerful machinery developed for such specifications ? Above we did not make a clear distinction between the syntax for describing feature graphs and feature graphs as semantical objects  . In fact , such a distinction has been omitted to a large extent in the literature  . 
The situation changed with approaches that fo rmalize the concepts of feature graphs since such a distinction is essential for a formal treatment  ( see e . g . \[ KR86\],\[Jo87\]) . 
In the area of ADT specifications the str ict separation of the syntactic and the semant ic level has ulways beet * a central aspect  . Our ADT- . based approach to feature graphs adopts this two- level view in a natural way : Feature graph specifications are the syntactical means to describe feature graphs which are the mode ls  ( or structures ) of such specifications . 
3 . _Equational Specifications 3oi ADT Specifications : Syntax and Semantics Weint roduce the basic notions of abstract data type specifications  . More detailed information can be gathered in \[GTW  78\] or \[ EM 85\  ]  . 
As . ~ gt_ure is a pair Z = < S , O > where S is a set of s or ts and O = < O > a family of sets of ~ erators w  . r . t . S . We write op : s ~ . . . s ~-> s for an operator whose i-th argument is of sorts ~ and which delivers a result of sorts  . The well-fermed terms w . r . t . Z and S-sorted variables V form an S- indexed family Tz  ( V )  , and an equation over ~ and V is of the form i = r where  1 and rare terms of the same sort . Anal ~ @ hraic ~ gcifiqation is a pair SP = < Z  , E > where Z is a signature and E is a set of equations over Z and some family of variables V  . 
Besides these syntactical concepts of ADT spec ifications we provide the basic semantic a l concepts of heterogenous algebras : Given as ignature ~= < S  , O > , a ~- algebra A consists of a family of sets A = < A  ,  >  .   .   .   . 
and for each operator ope O . . . . there is a funct ion opA : A , ---> A ~ . A satisfies an equation 1 = r if for each assignment of values from A to the variables of  1 and r the evaluation of 1 and r in A yields the same element of A . A is a < Z , E>-algebra if A satisfies ever ye ~ E . 
We say that E semantically implies an equat ione if ever y < ~  , E>-algebra satisfies e . It is well-known that this model-theoreti cnotion of satisfaction coincides with the proof-theoretic notion of deduction  ( Birkhoff theorem ) where e can be proved from E iff e can be deduced from E using the rules of the equational ca lculus  ( e . g . \[ EM85\]) . We let Ee denote the deductive closure of E . 
The following theorem is one of the central results of ADT theory and forms the basis fo\] : " defining the semantics of a specific at ion  . 

For each algebraic specification SP = < ~ , E > there is an initial algebra Tspsatis fying the equations in E  . 
T  ~ , is the so-called ~ uotient termal qebr ~ consisting of congruence classes-obtained by factorization according to the equat ions in E-of constant terms over Z  . The initial algebra T spis ' the ADT speci fied by SP  . It can be characterized informally by two conditions : all its elements are denoted by some ground term  ( " no junk " )  , and it satisfies a ground equation e iff every other < Z  , E>-algebra also satisfies e("no confusion ") . 
3, 2 Feature Graph Specifications
Feature graphs can be seen as particular a lgebraic specifications  ( see also \[ Pe87\] ) : values ) and unary functions ( representing the features ) in the signature . We assume that ATOMS is the set of all atomic va lues and FEATURES is set of all features occur ing in the feature graphs  ; both sets may be infinite in general . An equation s = t is given for paths having the same final node  , or for paths ending at an atomic value . 
For instance , consider the feature graph %/ Following e . g . Pereira and Shieber ( \[ PS 84 ) this feature graph can be described by the equat ions < fg >= < h > < g >= aleaving the root symbol of the feature graplic it and us ing the order for the attributes as in the examples of Section  2  . 
However , in equational ADT specifications it is essential to state explicitly to which objects an equation can be applied  . 
For simplicitly , we first assume that we have only one sort wh ich we call " universe "  , and that we have a variable x of s or t " universe '  . 
By using a functional notation for the attr ibutes and thus the reverse order of the attr ibutes as compared to e  . g . \[ PS84\] , we would arrive at the specification sorts universe functions a :-> universef  , g , h : universe -> universe equations g ( f ( x ) ) = h ( x ) g ( x ) = a However , by simply introducing a universally quant ified variable x of sort " universe " we run into problems : From 
I , g(f(x )) = h(x ) 2 . g ( x ) = a we can deduce h ( x ) = a by using the usual rules of the equation a l calculus and substituting f  ( x ) for x in equation ( 2 )  . The problem is that x should be quantified only overall objects described by the orig in al feature graph  . But f(x ) is not neccessarily in this set , so we must find a way of avoiding such a subst itution  . A simple way of achieving this is to switch to another signature with an additional sort  , say " soi ' , denoting the " sort of interest " and compris ing all objects described by a feature graph  . 
The sort " sol " is then a subsort of sort " universe '  . This could be expressed by extending the a lgebraic specifications to include also subsort relationships  , thus moving from many-sorted specific at ions  ( as described in Section 3 . 1 ) to so-called order-sorted specific at ions  ( e . g . \[GM87\]) . 
Here , we want to stick to the simpler case of many -sorted specifications  . 
A subsort relationship in a many-sorted set t ing is expressed by an inclusion function i : so i -> universe in our case  . In order to avoid problems with empty sorts ( \[GM87\] , \[ EM85\] ) we assume that there is a constant " const " of sort " sol '  . 
For the rest of this paper we also assume that x is a variable of sort " seA '  . Thus ~ the feature graph above gi~es rise to the feature graph specification sorts sol  , universe functions a :-> universef , g , h : universe ~> uz ~ iver seconst : . -> so ii : so i ~> universe equations g ( f ( i ( x )   )   ) = h ( i ( x )   ) g ( k ( x )   ) = a motivating the following definition : A feature graph signature  ( fg-signature ) 
Z = < S , OP > is a signature with
S : sol,~lniverse
OP : Atoms(Z ) u Features(X ) u const:-.> so i
Ui : SOJ -> universewhere:
Atoms ( E ) ca :-> universe I as ATOMS\]Features ( Z ) cf:universe->universe\[fsFEATURESA feature graph specification  ( fg- . specification ) SP ~ < Z , E > has a fg-signature Z and a set of equat ions over 
Z and x.
With the definitions above it shoud be obv ious how to transform any feature graph G into afg-specification ~  ( G ) : The signature of ~ ( G ) contains all atoms and features occuring in G as constants resp  . unary functions , and for any coreferring paths or any path ending with an atomic value there is an equation in  ~  ( G )  . Thus , we have a well-defined function ~: Feature graphs -> fg-specifications making avai lable the machinery that has been developed for algebraic specifications  . 
4. Consistency_
In \[ PS 84\] the only inconsistency considered is an equat ion of the form a ~ b where a and b are dist inct constants  . Such a situation Js called constant clash in\[P e  87\] where additionally a constant L_cpmP ! exf ~ lash is considered  . Such a clash is " any set of two equations e ~ and  e2 in which e ~ equates some path p to some other path or atomic value and  e2 equates a strict prefix of p to a constant " \[ P e  87\]  . 
Whereas \[ PS 84\] also consider cyclic feature graphs , Kasper and Rounds (\[ KR86\]) , ~ ome PATR-II implementations , and also the STUF formalism described in \[ Us  86\]  , only allow for 99~fclic feature graphs . We will show that the absence of cycles in a feature graph car ~ also be expressed as a cons is tency condition on the corresponding fg- specification  . 
Below we use the machinery of abstract data types in order to define several notions of semantical  , consistency for a feature grap\[b . 
FinestW (-: introduceario_tat:ior %
A texf a : ; , , ( .   .   . ( f~(t )) ~ . ) ~' r ~(\[ x \]) with t~T , (\[ X\]), , , i . . . . .   .   . . . . fl ~ Features(Y , ) , and nk0 will be writ'ten as p ( t ) where p :=: ,  !  . o ~ of ~ e Features (  :  ) * o Note that the notation f .  (  .   .   . ( f~(t )) .   .   .   ) reflects - the usual mathematical notation for function composition  , whei'e as the ~ ) athnotation ampLoyed for feature graphs as sketched : i  ( l Section 2 uses the reverse order Let S~'==-<:~\]!' , > becl . fg-;~pe<:ificatien . 
A <\] ~ E>-al . gebraA is ~ cpn\[~tt ~ . g'g0n siste ~ cJff for all a , b ~ . Atoms(Z ) with a ~: b we have : u constagt /<' . omp . \] . excons . is tent iff for all a ~ b ~ Atoms ( Z ) and a \]\] pl , p2 , q  ~ Feature ~ ; ( Z ): tl here exists ralelemento ~ A ,   ,   , ~  , ,?: iti ~: 7p \]~ ( i ~ ( o ) ) : : a , , :: > p2 , ,(p \] . , ( i , ( o ))) + q ^( i ~( o )) &)/ , 2a(pl ~ ( i . ( o ))) ~- b ^ a cycl'i , /iff for all p~q ~ Features ( Z ) ? there exists an element o ~ A , o?with:p~(q~(i ^( o ))) + q^(i^(o )) SP is . g_grn it alrt cons : L ste . l-tt , cor ~ staL~t/gpmplgx-collsiste_lJtor " . gcy cliqiff there is at least one mode \] , of SP having the respective proper t ? . 
The above definition of \[ censJstency of a fg-specifi ~ ation SP suggests that one has to search through the entire  ( : lass of models of SP in or , let to determ J new hether SP : is consistent or net  . The fol ) . owing theorem shows the poweref initial mode ls in the sense of shrinking the search space : only the initial model has to be cons idered  . 
Theorem :
The fg-speeific a T-i on SP is constant cons is tent  , constant/complex consistent , or acyclic iff the initial algebra Ts ~ , has the respective property . 
The above pz : opert : ies can be proven for the in i tial model by using the deductive closure 
E * of a set of equations E.
Theoz'em :
The initial algebl Ta\[I , ' , 3 ~ of the fg - spec \ [ f i ca t ion SP is u constant consistent iff for all a  , b ~ Atoms(Z ) with a + b
We have : a::'b ~/ E*~i coiL . ~tar~t/complex consistent iff for all a ~ b  ?   Atom:3  (   ; ) and all t)\[~t :) 2 , q ~ Features(Z ) " % ' ? , ~ have:pl('i(const )) = ; ~ . ~ E';,"it ~ p\] . i es p2 ( pl ( i ( const )   )   ) : : : q ( i ( const )   ) /E * and p2 ( pl ( i ( const )   )   ) = b/E*I acyclic iff for all p , qe Features ( Z ) ~ we have : p ( q ( i ( const )   )   ) --: q ( i ( const )   ) /E * The equivalences established by these two theorems show us that the consistency of a fg-specification < Z  , E > can be tested by inspecting tile deductive closure E * for the absence of certain equat ions  , depending on which consistency aspects one is interested ill  . Since E * may be too large for performing these tests efficiently it would be desi rable to be able to perform the consistency tests on E only  . ill the next section we develop a completion procedure for the set of equations E which t rans forms E into a normalized set E " such that it Js sufficient to check E '  . The complet . io ~) , procedure thus provides a simple and fast dec ision procedure for our consistency constra ints  . 
5 o_T i ) 9 completion pr~cedure
Our completion procedure is a variant of the Knuth-Bendix algorithm  ( \[ KB70\] ) which J . sawell-known method for testing propert ies of rewrite rule systems and for trans forming equations into a set of rewrite rules  , which then constitute a decision procedure for the equality  , in general , there are some problems with the Knuth-Bend ix algorithm : \] it may not terminate  , or it may terminate with failure . However , we csn show that due to the restricted form of equations these problems do not occur when dealing with fg-specifications  . 
We first define an order relation ~ on the set T ~  ( x ) of terms over an fg-signature Z . 
We assume that ATOMS ( resp . FEATURES ) is linearly ordered by ~^ To ~ ( resp .  ~  . . . . u~:~) . 
Then we order T ~ ( x ) using the lexicographic ordering induced by NA ~ oMs and N ~^ TunE ~: Let a  , b ~ ATOMS , f  ~ , g ~ eFEATURES , and t
T ~( x).
a < , rbifa <^' roM~b"a<T f , ( t ) t <~ f ~( t ) f ~ , ( . . . ( f~(t )) .   .   .  ) < . rg , ( . . . ( g~(t )) .   .   .   ) -<- T  is the reflexive and transitive c losure of <  . ~ . 
Let SP :< Z,E > be afg-specification . We assume that E does not contain any trivia \] equations of the form t :: t  ( otherwise we can just eliminate such equat ions from E  )  . 

For all 1 = r ~ E we have either 1 < ~ r or r < . ~ \] . .
Thus , without loss of generality , we assume that r < T1 for all 1 . = rsE ( otherwise we can just exchange the lefthand and the right hand side of the equation  )   . We call E a directed set of equations and we may write  1 -> r instead of 1 = r . 

C ~ letion algorithm CP
Transform E into a directed set of equations and apply successively any of the two follow ing rules until none is applicable any more :\[\] LHS reduction : If there are two di fferent equations  ( I ) p ( 1 ) -> r ( 2 ) 1-> r ' in E then:
Delete equation ( I ) from E
If r < Tp ( r ' ) then add p ( r ' ) -> r to E-If p ( r ' ) < ~ r then add r -> p ( r ' ) to E\[Note : Nothing is added if p ( r ' ) and rare identical !\]? RHS__!'9_d " uction !_ If there are two different equations  ( I ) 1-> p ( l ' )   ( 2 ) 1"-> r in E then :- Delete equation ( I ) from E
If 1 < ~ p(r ) then add p(r)->1 toE
If p ( r ) < T1 then add 1-> p ( r ) to E\[Note : Nothing is added if p ( r ) and 1 are identical !\] where : r , r ' , i , i " ~ T ~( x ) , and p ~ Features(Z )*
Theorem :
For every fg-specification completion procedure CP 
SP the ? terminates on input SP = < Z , E > delivers as output a fg-specific at ion 
SP "= < Z , E '> and SP and SP ' are equivalent in the sense of 
E *= ( E')*, i . e . E and E " have the same deductive closure . 
This theorem assures that the completion procedure performs only syntactical modifi cations on the fg-specifications  , but does not change their meaning . So we can use SP " in order to test the cons is tency constraints of SP  . The next theorem shows that stepping from SP to SP"simplifies this task : instead of inspecting the deductive closure E * itsuff ices to inspect the set of equations E '  . 

Let SP = < Z , E > beafg-specification and SP "= < Z , E '> be the result of running the completion procedure CP on SP  . SP is
Constant consistent iff
E " does not contain an equation whose lef th and side is an atoma ~ Atoms  ( Z ) constant/complex consistent iffE " does not contain an equation in which a term f  ( a ) occurs where f ~ Features ( Z ) and a ~ Atoms ( Z ) acyclic iff
E " does not contain an equation p ( t ) -> t where p ~ Features ( Z ) * fact that E " is a confluent and terminating set of rewrite rules  . Since the atoms are smaller than any non-atomic term with respect to the term order < ~  , for any equation a --> t in E " with an atom a  , t must also be a natom ~ Therefore , any equation holding between atoms must be contained directly in E '  , implying the constant consistency property of the theorem  . The other parts of ' the theorem follow from similar observations  . 
6. Unification
In Section 2 we presented three different notations for feature graphs  , and in 3 . 2~ we in t roduced a t rans la t ion ~ f rom feature graphs to fg - spec i f i ca t ions  . On the other hand , it is straightforward to transform afg- specification SP into a feature graph C : The atoms and features of G are those occuring in the signature of SP and ? he equations of E reflect the coreferring paths resp  . paths ending with an atomic value in G ?
We denote this transformation by ~-~: fg- specifications -> feature graphs Although ~- I  ( SP ) and ~- i ( CP ( SP ) ) may be syntact i ca l l y d i f fe rent s ince CP  ( SP ) ) conta ins equat ions in a reduced normal form , the two graphs are equivalent in the sense of feature graph unification : they are unifiab \]  . e with exactly the same feature graphs . 
Besides giving a basis for a simple cons is tency test and providing a normal form presentation for fg-specifications the completion procedure CP also provides the bas is for a precise mathematical definit ion of feature graph unification  . This is true regardless which consistency concept for feature graphs one wants to apply  , e . g . J . fone wants to allow cyclic graphs or only acyclic ones  . Thus , let X-consistent be either " constant cons is tent "  , " constant/complex consistent " , " acyclic " , or any combination thereof . Let GI and G2 be feature graphs . 
graph-unify ( G  ~ , G ~) = let(Zi , E i ) = ~( G t ) in let ( Z , E ) = CP ( Z~u Z , , El u E2) in ~- I ( Z , E ) if ( Z , E ) is X-consistent fail if ( Z , E ) is not X-consistent 7 . Conclusions We have presented a mathematical semantics of feature graphs and feature graph un ification in terms of ADT specific at ions  . It supports various consistency concepts used for feature graphs  . The important notion of partiality ( \[ P e87\] ) in the sense that arbitrary new features may be unified into a feature graph is supported since any feature graph specification can be extended by arbitrary features  , atoms , and equations ; there exists no " largest " feature graphspeci fication  ( unless of course , one adds an artificial " largest " element  , e . g . as the $ F$-specification in the STUF fo rmalism as described in \[ BPU  88\]  )  . 
Another approach bringing together initial ADT spec  , ifications and feature graphs is given ill\[ SA  87\]  . ~tuses an order-sorted approach : , where the set of atoms and features must be f ixed in advance  , and where every element of a supersort must be in one of its subsorts Compared to the order- sorte % l approach of \[ SA  87\] a drawback of the work presented here is the asymetric treatment of the tool  ; of a feature graph ( giving rise to the " se , i " sort ) and the other nodes ( being mapped t ; oth E ; " universe " sort) . We are currently extending out work in order to overcome this disadvantage  ( \[BP88\] )  . Other a : ? eas of future work are the treatment of disjunct Jons and of functional uncertainty  ( \[ KR86\] , \[ Jo86\]) . 
Refefr ~ nc ~, s\[Aie#\]Ait . -Kaci , H . : A Lattice Theoretic
Approach to Computai ; i on based on a
Calculus of Partially Ordered Type
Structures . \]? hD thesis , University of Pennsylw ~ nia , 1984\[BPss\]Beierle , C . , Pietat , U . :%' he
Algebra of Feature Graph
Specifications . ( in preparat:ion )\[ BPu88\]Beierle , C . , Pletat , U . , Uszkoreit,
If . : An Algebraic Characterization of STUF . Proc . Symposium " Computer linguistik und ihre theoretischen Grundlagen "  , 
Saarbr ~ cken 1988.
\[EM88\]Ehrig , H . and Mahr , B . : Foundations of Algebraic Specification I . 
Springer Verlag , Berlin 1985.
Goguell , J.G . and Meseguer , J.:
Order-Sorted Algebrai : Partial and
Overloaded Operators , Errors and
Inheritance ? Computer Science Lab.,
SRI International , 1987.
\[OTW78\] Goguen , J.A . and Thatcher , J.W.
and Wagner , E .: An Initial Algebra
Approach to The Specification,
Correctness and Implementation of
Abstract Data Types . In : Current
Trends in Programming Methodology,
R.T.Yeh,(ed)~Prentice-Hall , 1978.
\[Jo86\]Johnson , M . : Computing with regular path formulas . Draft , 1986 . 
\[Jo87\] Johnson , M . : Attribute-Value Logic and Theory of Grammar . PhD Thesis,
Stanford University , 1987.
\[KB70\]Knuth,D.E.~Bendix , P.B.:Simple
Word_Problems in Universal Algebra.
in : J . Leech ( Ed . ): Computational problems in Universal Algebra . 
Pergamon Press , 1970.
\[ Kaa6\]Kasper , R . T . , Rounds , W . C . : A logical semantics for feature structures . Proc . 24th Annual
Meeting , ACL , 1986.
\[ Pe87\]Pereira , Fo : Grammars and Logics of
Partial Information . Proc . 4th
Int . Confonf , ogic Programming , May 1987.
\[Ps84\]\[RK86\]\[SA87\]\[Us86\]
Pereira , F . , Shieber , S . M . : The semantics of grammar formalisms seen as computer languages  . Proc . 
COLING-84, ACL , 1984.
Rounds , W . C . , Kasper , R . : A complete logical calculus for record structures representing linguistic information  . IEEE
Symposium on Logic in Computer
Science , 1986.
Smolka , G ., Ait-Kaci , H.:
Inheritance Hierarchies : Semantics and Unif ication  . MCC Technical
Report AI-057-87, 1987.
Uszkoreit , H . : Syntaktische and semantische Generalis ie run genims trukturier ten Lexikon  . Proc . 
GWAI-86, ( eds.C.R . Rollinger , W.
Horn ), Springer Verlag 1986.

