Parshlg with lookahead in realtime online translation system 
ttiroy a suNOGAMI , Yumiko YOS HIMURA and Shinya AMANO
Research and Development Center
Toshiba Corporation
1, Komukai Toshihacho , Saiwai-ku,
Kawasaki-City , Kanagawa , 210 Japan
Abstract
In order to increase parsing efficiency in a realtime online translation system interfaced with a keyboard conversation program  , we have developed a version of the ATN formalism with a lookahead function  . By permitting future input to be scanned , arcs can be reordered or suppressed . Various mechanisms utilizing this capability are presented  . 
1. Introduction
A realtime online communication system including automatic translation was realized by combining a keyboard conversation function with an English -Japanese bidirectional machine translation system implemented on a workstation \[ Amano  1986  ,  1987\] . Using a satellite connection , bilingual conversations were held between members of this laboratory in Japan and visitors to the  5th World Telecommunications Exhibition Telecom 87  , organized by the International Telecommunication Union  , held in Geneva from 20th to 27th October in 1987 \[Amano 1988a   ,   1988b \]\[ Miike 1988\] \[ Takeda 1988\] \[ Asahioka 1988\]  . 
The general setup , the screen display and the system configuration are illustrated in Appendix  . The system operates as follows : an operator in Switzerland types his/her message in English which is displayed in the upper window and is transmitted via standard telecommunications devices to Japan  , where it is immediately translated into Japanese . The operator in Japan receives the message in Japanese in the lower window and types his/her response in Japanese  . This is translated and then txansmitted to Switzerland  . The system is like UNIX's*'talk ' , except that contributions to the dialogue appear in the appropriate language  . 
An important feature of such a realtime translation system is that translation time must be reduced to an absolute minimum so that the conversation can proceed naturally  . To reduce the parsing time , this system uses a version of the ATN formalism with a lookahead function  , based on the concept of a parsing method using global information  . This parsing method proved to be very effective during this experiment  , so that we could communicate with visitors very naturally irrespective of time taken for satellite communication and time required in typing his/her messages  . 
* UNIX is a Trademark of AT&T Bell Laboratories Focusing on the parsing of English  , the paper discusses the concept of parsing using global information in Section  2  , the realization of the parsing method as an ATN in Section  3 and the conclusion in Section 4  . 
2 . The concept of parsing using global informat i on In parsing natural languages using large-size dictionaries and grammars  , there are usually nmltiple categorial and syntactic possibilities for the current word  , when using only the information associated with this word  . 
The parsing methods in \[ Woods 1970\]\[Pereira   1980\] use only the information of the current word , so that these methods waste much time trying a lot of possibilities which eventually prove to be failure  . 
Such possibilities , however , can be suppressed or reordered even at the current word position by using global surface information from the input without really parsing it  . 
This notion is especially usefld , given the following features of English syntax : i  ) constituents consist of at ' least one obligatory element  , e . g . a sentence requires a verb , a noun phrase requires a noun , etc . 
ii ) many structures involve discontinuities , e . g . as --- as , riot---but , the more --- the more , both --- and , etc . 
In order to suppress or reorder the possibilities , these features are used in real parsing as follows  . These feature suggest hat each rule of a CF gramma requires at least one obligatory terminal element  , as well as optional terminal and nonterminal elements  . By looking for the obligatory elements in the global input as the first step in applying a given rule  , the rule can be rejected or reordered dynamically at the eun'ent word position  . This search is of great significance , especially if there are many intelwening optional elements and/or these are themselves rather complex  . 
This function fm~ther has the additional advantage of provisionally partitioning file input into approximate constituents delineated by the obligatory elements which act as " stepping stones " through the input " stream "  . This might be useful for parsing with parallel processors  , and may have implications for cognitive psychology applications of parsing  . However , we have not pursued these particular aspects . 
3o Rea l i za t ion o f pars ing us ing g loba l iu ib r l~af ion as an ATN  3olo Lookahead mechanisms We have realized the " Parsing using global informatiof f ' method as an ATN  , which uses the topdown depth-first search method , reinforced with a " lookahead " condition . 
This condition cheeks the specified obligatory elements which each syntactic or categorial lXoSsibilities  ( denoted as arcs of ATN ) require in the future input , from the current word position m the number specified or to the end of sentence : as default  . 
The ATN with " lookahead " conditions works very effectiw  ; lyfor(1) rejection of syntactic possibilities , (2) reordering of them , (3) rejection of categorial possibilities , and (4) reordering of them . These ambest shown with some examples of linguistic phenomena  . 
(1 ) rejection of syntactic possibilities a  ) rejection of one syntactic possibility The general description for rejection is shown in Figure  1 with an example at the right hand side . The general network of Figure 1 has the following meaning : - Atmc'A' , if the obligatory condition'c'which arc'A' requires at arc'D'is not satisfied in the future input  , then arc'A'is rejected without really parsing from arc'A'to arc'D'  . ( i . e . useless parsing from arc'A'to arc'D'can be avoided  . ) in parsing the example ( a ) without looking-ahead , "the lecture " can be analyzed as the subject of " that-clause "  . 
Eventually , this interpretation is rejected since there is no verbaher " lecture " in  ( a )  . In this case , control returns to the previous backtrack point in the subnetwork for " noun phrase "  , and then wastes still more time trying all the remaining possibilities which will eventually lead to failure  . On the other hand , by looking-ahead for a " verb " in the future input  , parsing " the lecture " as the subject of " that -chmse " can be avoided  . 
In realistic , large-size ATN , states have a lot of arcs . 
For example , the first state of a subnetwork for a noun phrase has a lot of arcs for determiner  , pronoun , noun , adjective , present-participle , past-participle , adverb , possessive , prefix , negative , numeral , quantifier , intensive , interrogative ,  --- , and also for certain paiticulm " words such as " that "  , " so " , " both " , " such " , " from " ( ex . from 2 to 5 inch ), etc . The number of arcs from this state alone is generally greater than the number of words in the average input sentence  . And what's the next state also has lots of arcs . Therefore , even in parsing a noun phrase we must check an enormous number of arcs compared with the lookahead checks  ( see 3 . 2) . 
The lookahead function works more effectively as the length and the complexity of input sentences increase  . For example , the lookahead is very useful if " lecture " has many coordinands and is modified by many optional elements such as a prepositional phrase  , a participle phrase , etc . It is also useful for long-distance discontinuities  , e . g . identification of phrasal verbs , or constructions such as " so adj . - - - that " , "it\[formalsubj\]---that\[logicalsubj\]" , " not---but " , " the more . . . . the illOl"e ' l , " either---or ", etc . 
Compare the sentence " I heard the lecture and then had lunch  . " to the sentences of Figure 1 . Looking-ahead for " verb " beyond " and " in the future input is of no effect since " had " isn't an element within " that-clause "  . Therefore , a boundary condition which can terminate the lookahead search of " verb " at " and " can be considered  . 
However , it is very difficult to give such conditions without real parsing  , and such conditions might be rather complex and time-consuming  . For this reason , we use only simple lookahead conditions without considering search boundary  . Therefore , these conditions generally check categories or words of the future input to the end of the sentence  ( cf .  (2)(4)) . Note that such a simple check of a word in the future input takes about the same time as the travers alo fone arc  ( see 3 . 2) , and only conditions which never cause any mistakes beyond the search boundary must be written  . Fortunately it is not difficult , because almost of all lookaheads work as an existential check of word or word sequence  , which assures fail safe property . 
For example , the lookahead condition shown in Figure 1 never causes any mistakes . 
3 A\[lookaheadc!~ , ~ c-C2~4~? ) I ) \[ el 0 : I<\[\]:eomlltion?~PUSIITIIAT-C___I , AUSt' , '\ [ lookaheadverb\] . 
PUSIINP x , . _PUSttINI"P ( a ) I heard tile leet are . 
(b ) I heard the lecture was Interesting.
Figure IR ejection of one syntactic possibility
O-verL~o "' , the same obligatory element in this case , a " failar c " is very useful , as shown in Figure 2 . The general network of Figure 2 has the following meaning : -- At fail arc'D' , if the condition'c'is satisfied in the future input  , then sister arcs'E' , ' F ' , --- are pruned ( i . e . 
the current backtrack point is released ) , control returns to the previous backtrack point and arc'B'istried  , in this way , useless parsing of sister arcs can be avoided . 
In practice , fail arc soft cn have negation of conditions which apply to sister arcs  . In the example ( a ) , parsing " repairs " as the subject of a coordinated S can be avoided  . 
This alternative is useful , especially when there are many are sata state : rather thmicheck repeatedly the condition on each  , a failar c with the negatiou of the condition leads us back to the previou state  . 
c ) rejection of all but one possibility In this case  , an " anchor arc " is very useful , as shown in Figure 3 . The general network of Figure 3 has the following meaning : Atanch or arc'C' , if the condition'c'is satisfied in the future input  , arc'F'istried and sister arcs'D' , ' E ' , --- are pruned , irrespective of the ultimate success or failure of parsing after arc'F'  . Otherwise the next arc'D'istried . 
Anchor arcs , like fail arcs , often have negative conditions . 
Consider the text segment in the example ( a ) : if there is not another candidate imperative verb in the input  , analysis of " turn on the power " as a coordin and of " start the machine " can be rejected  ( of . example ( b )) . 
Also consider parsing " if NP1 vt NP2, NP3 vt NP 4 . " Bylooldng-ahead , parsing NP3 as a coordinated NP of NP2 , and parsing " NP3 vt NP4" as a coordinated S of " NP1 vt NP2" can be avoided . Note that all possibilities of a noun phrase must be checked in both cases before the success  . 
d ) rejectio ~ of the input sentence In this case  , a " stop arc " is used , as shown in Figure 4 , which has the following meaning : . -) ktstop arc'A' , if the condition'c'is satisfied in the flmtre inpat  , the parsing of the whole sentence is stoppedia ' espective of the midst  , because this sentence has no possibilities of success  . 
In the example , useless parsing of ungrammatical sentence wl fich has no verbs after relative pronoun by typing errors can be avoided  . This is used for ungrammatical sentences including undefined words  , typing m ~ or s , etc . It is particular useful when false paths would otherwise be a cosily detour  . 
_^/flai LI ) \ [ look-ah~adc ~ ~ e : negation efc
Figure 2
SO-~USI !-7 ~ OCA Tee-conj ; 0Id U~-Ii-:S ; O
S~-I~'^IL\[lookahead ~ vorbJ\~, . ____pus , pi,-\~-~ . PUgHINPP_~ ( a ) Tileiaehl no requires laint on a nee and repairs ,   ( b ) The machine requlres lalntenance and repairs are expensive  . 
I~ejectionel ' all possibilities of one state f ~ ?__A  ~101~ C\[iook-alloadhl ~ CilOii \ [ eatceliafl / - ~" O_P  . USl l VP___look-ahea__d~ce-cionJ . ~Y'~'~Dco~lla(~/PUSIVVP oOM'co-conj . 
( a ) To start the machine , turn on the pover , ( b ) To start the ltachine , turn on the power , or test the circuit , suitct k on at the ~ aln . 
Figure ffe Jeetlon of all but one ~ ssibillty tl '  ( iPA\[Iook . -at lead c ~ .   .   .   .   . 
STOP\[cattel-pron . & oc ^ y ~_ ~ ou ~ , ~lookahead-~ver ~ Lo ( a ) $\] hlsIsInformationu hlch here cleved by this ~ achtne  . 
Figure 4 ffejee\[Io ~ of the ungrammatical Input sentence In the  , traditional parsing methods , arcs with higher-possibility at the state are written at upperside of arcs with lowe ~ -possibility  . Therefore , the application order of arcs can be dynamically reordered only by infomaation of the current word  , not by the future input . But by looking ahead the future input , arcs can be dynamically xeorde~ed to select the arc with highest possibility  . This function reduces the time for finding a successful parse  . 
A " jumparc " used for change of application order is shown in _~' igure  5  . The general network of Figure 5 has the following meaning : - If the condition ' e ' is satisfied in the future input  , arc'A'and'l~Va~etried in this order ; otherwise , arc'B'and'A'a retriedia this order . In either case , both interpretations are possible at the current word position : only the ordering is affected  . 
In the example ( a ) , parsing " restaurants and cafeterias " as the subject is preferred  , and in the example ( b ) , parsing as the obje , zt of " in " is preferre 4 . 
Also , we can specify in conditions the number of words to be searched  . This condition works as a heuristic for reordering arcs in order to reduce time required for success  ( see ( 4 ) ) . It is difficult to use this number in order to reject arcs  , beca~set he ~ e may be intervening optional elements and so this number may cause mistakes  ( see ( 1 ) ) . 
There are many words which have categorial ambiguities in English  . In parsing English , categorial ambiguity is a big problem , especially in the case of very commonly used words  . Examples are " as " ( preposition , adverb , conjunction , relative pronoun ) , " after " ( preposition , subordinate conjunction , adverb ) , and " that " ( demonstrative pronoun , relative pronoun , conjunction ) . 
How the lookahead fimction works effectively for categorial disambiguation is as follows  , and reordering of categorial possibilities is presented in  ( 4 )  . 
The use of ares is the same as (1) . Here the example shown in Figure 6 is the rejection of " as " as an adverb , if a second " as " is not found , and the rejection of " as " as a conjunction , if a verb is not found . In the example ( e ) , parsing " as " as adverb and conjunction can be avoided by linear search  . 
Such categorial ambiguity is also common in Japanese  , for example , " no " , " de " , etc . These categorial ambiguities in Japanese can be also avoided by lookahead  . 
(4 ) reordering of eategorial possibilities How lookahead works effectively for reordering of categorial possibilities is presented  . 
The use of arcs is the same as (2). An example is


Figure 5
JUMPE cat comma &\( a ) Indepartment-stores , reataurants and cafeterias are sometimes found . 
( b ) In department-stores ? restaurants and cafeterias  , no smokh ~ Is allow S . 
ff corderlng of syntactic possibilities , 3 WI~D as JU fl . _PE look-ahja_das J_~_pus ADJI__~~_~I ) IJSHS\[lookaheadverb\]~x ~ . PUSIIN l )  ~-  ( a ) I used tills machine as recently as yesterday . 
_~ . PUSt l PP-a- ( b ) luset ills machine as the old cite Isbroken . 
~ .   ( c ) I bought tills machine as a present for my friend . 
Figure 6 l Cejectlon of eategorlal possslbll ltles
ANCIIOR\[(catsub-conj .& prep.)&
C~l~k-'~icad . ( comma ~ ~ tvcrbs > l)\]PUSIISUB-CLttUSE_ ~ . 
. I'USII PffE-PIII~ASE ~ . k PUSI/PI~E-PIIRASE . ~( a ) After the conversation we will have lunch . 
x . . . .~ FUSII SUB-CI,AUSE -- . ---( b ) After the conversation finishes , : we will have lunch . 
Figure ? Reordering of categorlal Possibilities " after " which has multiple category ambiguity  . At the beginning of a sentence , if there is comma and more than one verb in the future input  , the subordinate conjunction interpretation is preferred  ( i . e . tried first ) , otherwise , the preposition interpretation is preferred . In the example ( a ) , parsing " after " as preposition is prefen'ed , and in the example ( b ) , parsing " after " as conjunction is prefen'ed . 
3.2. Parsing with vs without lookahead
Despite of its advantages , mentioned earlier , a question may arise in using lookahead conditions : 
Is lookahead rather time-consuming ?
The topdown depth-first search like ATN takes kl Cn time\[Aho  1972\]  , where C is a constant , n is the number of input words , and k 1 is a coefficient which is determined by time taken for the traversal of one arc  . The lookahead search presented here however , takes k2n time , where k 2 is a coefficient which is determined by time taken for one word check of a lookahead condition  . 
If a lookahead condition is satisfied , klCn can be reduced to k2n . If not , time taken for lookahead is wasted . Therefore , the effect of lookahead is determined by these tradeoff  . This increases as n and C increase ( i . e . 
the length of sentences and the size of the grammar increase  ) and ask 2 decreases . 
In our ATN , k1 is nearly equal to k 2 , since one check of lookahead conditions which we use take about the stone time as the traversal of one arc  , as discussed in (1) . 
Therefore , the effect of lookahead is generally determined by the difference of the number of checks between arc traverses and looking-ahead  . Since the number of arcs from one state often is greater than the number of the input words  , as discussed in (1) , and the number of checks for looking ahead is less than the number of input words  , extra time needed in lookahead is not too significant  . Of course , lookahead conditions are attached to arcs only when it is effective  . 
For the above reasons , the number of arcs with effective lookahead increases in realistic  , large-size grammars such as our ATN . 
4. Conclusion
We have shown how a parsing method using global information as well as information about the current word  , is very effective for increasing the efficiency in the face of natural language phenomena such as categorial and syntactic alternatives  . 
This is especially significant in a realtime translation system using large-size dictionaries and realistic grammars for natural language  . In such a system , enormous numbers of ride applications , which are caused by categorial and syntactic alternatives and which linear search of an input sentence  . 
In this paper , we have focussed on the parsing of English , but this method is also ve ~ T effective for Japanese  , in as much as it has similar features to English . For example , a Japanese sentence also requires a verb , a noun phrase requires a noun , etc , and many struct ttresinvolve discontinuitie such as " shika--nai "  , " kara . . . . . made ", " to---to---to ", etc . 
In our system , lookahead conditions are written manually . A compiler which can automatically attach lookahead conditions at source ATN is being considered for a future system  . 
The lookahead parsing also works very effectively for scientific and technical document since these do cuntents are more complicated and longer than communication dialogues  ( see 3 . 2)\[Nogami 1987\] . 

We would like to thank Harold Somers ( the Centre for Computational Linguistics , University of Manchester Institute of Science and Technology  , England ) for his comments on an earlier version of this paper  . 
References\[Aho1972\]Aho , A . V . and Ullman , J . D . : The Theory of Parsing , Translation , and Compiling , Volume 1: Parsing . Prentice-Hall , lnc,
Englewood Cliffs , N.J ., 1972.
\[Amano1986\]AMANOshin-ya (1986) . ' fhe Toshiba Machine Translation system . Japan Computer Quarterly 64 " Machine Translation - Threator Tool " ( Japan Information Processing
Development Center , Tokyo ) , 32-35\[Amano1987\]AMANOShinya , HidekiH1RAKAWA&YoshinaoTSUTSUMI(1987) . TAURAS : The Toshiba Machine Translation System . Machine Translation Summit , Manuscripts & Program , Tokyo : Japan Electric Industry Development Association  ( JEIDA )  ,  1523 . 
\[Amano1988 a\]AMANO shin-ya , Kimihito TAKEDA , Koichi HASEBE&Hideki HIRAKAWA (1988) . Experiment of Automatic Translation Typing Phone ( in Japanese )  . Information Processing
Society of Japan (1988 . 3 . 16-18)\[Amano1988b\]AMANOShinya , Hiroyasu NOGAMI & Seiji MIIKE (1988) . A step towards Telecommunication with Machine Interpreter  . Second International Conference on Theoretical and Methodological Issues in Machine Translation of Natural Languages  , 
June 1214 , 1988 ( CMU)\[Asahioka1988\] A SAHIOKAYoshimi , Yumiko YOS HIMURA , Seiji MIIKE & Hiroya suNOGAMI (1988) . Analysis of the Translated Dialogue by Automatic Translation Typing Phone  ( in Japanese )  . 
Information Processing Society of Japan (1988 . 3 . 1618)\[Marcus1980\] Marcus , M . : A Theory of Syntactic Recognition for
Natural Language , MIT Press , 1980\[Miike1988\]MIIKESeiji , Koichi HASEBE , Harold SOMERS & Shinya AMANO (1988) . Experiences with an online translating dial ngu , ~ system .   26th Ammal Meeting of the ACLI Nogan fi 1987\] NOGAMI Hiroy'asu , Yumiko SUGIURA , Hideki II 1RAKA WA&Shinya AMANO . English Analysis in an English-Japanes , : Machine Translation System ( in Japanese) . Information Pcocessing Society of Japau 61-4 ( 1987 .  5 . 22)\[Pereira1980\]Pereira , F . C . N . and Warren , H . D . : Definite Clause Gl ' amm ; ~ s/or I_ . anguage Analysis , A Survey of the Formalism and a Comparison with Augmented Transition Networks  . Artificial intelligence ,  13 , 1980r/'akeda1988\]TAKEDA Kimihito , Koiehi HASEBE&Shinya AMANO (1988) . System Configuration of Automatic Translation Typing Phone  ( in Japanese )  , Information Processing Society of Japan (1988 . 3 .  16 . .18) \[ Woods 1970\] Woods , W , A . : Transition Network Grammars for Natural Language Analysis  , CACM Vol . 13, pp .  591-606, 1970


USING REY BOARDS
SWITZERLANOJAPAN
General setup -.":"~.,.,,~_.
lello.Takeda.I ~ nalreis ~ zarlEe.
\[ livein geneva , her I come from Califorlia.
( e ~, ~ t ~ lI~S12~, ~ arsold.
tery in tel ~ sti ~ o , ~ tlick , and u ~ ful ! lu ~ mnvla ~ uaoes dova ~ speak , Takc~a?~tisok . 
t ~ p ~ is Ta V ~ da .
PI~SO'tellm ~ rr ~..
Where do ~ live ?
Ha ~ ~ visited JaPan ?
Please tellm thei ~ or ~ ssion of this mchir
Thank you , \[ caospeak of ly JaPa0~.
! i
Switzerlandli ;, ~ I .   . ~a - - ~ .   .   .   .   .   .   . ; IJ~tli ~, ;, ~-, i , ~, i . 
IIB ~ IIIIJ : : II~M ~ III~miIlJJlJllllIIIILLL
That is ok.
Japan
Screen displayr ~ - - - ASJO00 - - ~ Elii El , hS3000 I!I , J2 .   E2~-~ I ~ omaun ~ i ~ t ~ --~- I~- -1 \[ iK\[-~---~--~ eommunl cat lon~--~2a  ~ \ ]~~  j2   , EI , JIlil " S - - - - - -\] - ~ L\[functi o11 Jy--kTole p_~'"i . . . . . . . i '"\[ ~\[ fuller , or , J-~s ~' stell I ~\] , - J2\]2 , E2J2 , E2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  iii "\[' n Put i ii S~i t zer i a i i i i j i i tra  . ' siati o6Oi " iiT\[j 2 iii pitiii JAPAN\[ E2 itraasiatio , ioi"j2
Switzo et a ~ ldJapan
System configuration
