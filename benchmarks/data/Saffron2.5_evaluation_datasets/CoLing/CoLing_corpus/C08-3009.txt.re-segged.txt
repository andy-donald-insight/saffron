Coling 2008: Companion volume ? Posters and Demonstrations , pages 177?180
Manchester , August 2008
Shahmukhi to Gurmukhi Transliteration System
Tejinder Singh Saini
ACTDPL , Punjabi University,
Patiala 147 002, India
tej@pbi.ac.in
Gurpreet Singh Lehal
DCS , Punjabi University,
Patiala 147 002, India
gslehal@yahoo.com
Virinder S Kalra
Sociology , SOSS
University of Manchester
kalra@manchester.uk


Abstract
The existence of two scripts for Punjabi language has created a script barrier between the Punjabi literature written in India and Pakistan . This research has developed a new system for the first time of its kind for Shahmukhi text without diacritical marks . The purposed system for
Shahmukhi to Gurmukhi transliteration has been implemented with various research techniques based on language corpus . The corpus analysis of both scripts is performed for generating statistical data of different types like character and word frequencies and bigram frequencies.
This statistical analysis is used in different phases of transliteration . Potentially , all members of the substantial Punjabi community will benefit vastly from this transliteration system.
1 Introduction
One of the great challenges before Information Technology is to overcome language barriers across the whole humanity so that everyone can communicate with everyone else on the planet in real time . South Asia is one of those unique parts of the world where a single language is written in different scripts . This is the case , for example , with Punjabi language , spoken by tens of millions of people , but written in Indian East Punjab (20 million ) in Gurmukhi script ( a Left to Right script based on Devanagari ) and in Pakistani West Punjab (80 million ), written in Shahmukhi script ( a Right to Left script based on Arabic ), and by growing number of Punjabis (2 million ) in the EU and the US in the Roman script . Whilst in speech Punjabi spoken in the Eastern and the ? 2008. Licensed under the Creative Commons Attri-bution-Noncommercial-Share Alike 3.0 Unported license ( http://creativecommons.org/licenses/by-nc-sa/3.0/). Some rights reserved.
Western parts is mutually comprehensible , in the written form it is not so . The existence of two scripts for Punjabi has created a script barrier between the Punjabi literature written in India and Pakistan . More than 60 per cent of Punjabi literature of medieval period (500-1450 AD ) is available in Shahmukhi script only , while most of the modern Punjabi writings are in Gurmukhi.
Potentially , all members of the substantial Punjabi community will benefit vastly from this transliteration system.
1.1 Gurmukhi Script
The Gurmukhi script , derived from the Sharada script and standardised by Guru Angad Dev in the 16th century , was designed to write the Punjabi language . The meaning of " Gurmukhi " is literally ? from the mouth of the Guru ". The Gurmukhi script has forty one letters , including thirty eight consonants and three basic vowel sign bearers . There are five nasal consonants (?, ?, ?, ?, ?) and two additional nasalization signs , bindi ?? [?] and tippi ?? [?]. In addition to this , there are nine dependent vowel signs (??[?], ?? [ u ], ??[ o ], ??[?], ??[?], ??[ i ], ??[ e ], ??[?], ??[?]) used to create ten independent vowels with three bearer characters : Ura ?[?], Aira ? [?] and Iri ?[?].
1.2 Shahmukhi Script
The meaning of " Shahmukhi " is literally ? from the King's mouth ". Shahmukhi is a local variant of the Urdu script used to record the Punjabi language . It is based on right to left Nastalique style of the Persian and Arabic script.
It has thirty seven simple consonants , eleven frequently used aspirated consonants , four long vowels and three short vowel symbols ( Malik 2006).
177 2 Comparison with the Existing System In actual practice , Shahmukhi script is written without short vowels and other diacritical marks.
The PMT system discussed by Malik A . (2006) claims 98% accuracy only when the input text
Input text ( right to leftutput-A of PMT system ( left to rightutput-B of proposed system ( left to rightable 1. I/O of PMT and Proposed Systems
Transliteration Tokens Output
Type Total Wrong Right
Accuracy %
A 116 64 52 44.8275
B 116 02 114 98.2758
Table 2. Comparison of Output-A & B has all necessary diacritical marks for removing ambiguities . But this process of putting missing diacritical marks is not practically possible due to many reasons like large input size , manual intervention , person having knowledge of both the scripts and so on . We have manually evaluated PMT system against the following Shahmukhi input published on a web site and the output text is shown as output-A in Table 1.The output of proposed system on the same input is shown as output-B . The wrong transliteration of Gurmukhi tokens is shown in bold and italic and the comparison of both outputs is shown in Table 2.Clearly , our system is more practical in nature than PMT and we got good transliteration with different inputs having missing diacritical marks.
3 The Complexity
The Shahmukhi script has many complexities by its nature and the major two of them are : 3.1 Recognition of Shahmukhi Text without
Diacritical Marks
Shahmukhi script is usually written without short vowels and other diacritical marks , often leading to potential ambiguity . Arabic orthography does not provide full vocalization of the text , and the reader is expected to infer short vowels from the context of the sentence . In the written Shahmukhi script it is not mandatory to put short vowels below or above the Shahmukhi character to clear its sound . These special signs are called " Aerab " in Urdu . It is a big challenge in the process of machine transliteration to recognize the right word from the written text.
3.2 Multiple Mappings
It is observed that there is multiple possible mapping in Gurmukhi script corresponding to a single character in the Shahmukhi script as shown in Table 3.
Name Shahmukhi Character Gurmukhi Mapping
Vav ? [ v ] ? [ v ], ?? [ o ], ?? [?], ?? [?], ?? [ u ], ? [ o]
Yeh ?[ j ] ? [ j ], ?? [?], ?? [ e ], ??[?], ??[ i ], ? [ i ] Table 3. Multiple Mapping into Gurmukhi Script 4 Transliteration System The transliteration system as shown in figure 1 is virtually divided into two phases . The first phase performs preprocessing on the input Shahmukhi token by performing dictionary lookup . If the dictionary lookup fails then the token will go for rule based transliteration and ultimately this phase will generate best possible Gurmukhi token(s ). The second phase performs component performs context analysis of input Gurmukhi token(s ). All Forms generator ( AFG ) component will perform critical task of handling missing diacritical marks . This component will suggest similar possible forms of a Gurmukhi token which is not most frequent one . The queue manager of postprocessing phase is designed to work on bigram language model . This will select the best possible unigram for final output by consulting bigram weights of the current token with its neighboring tokens
Figure 1. System Overview 5 Lexical Resources Used Shahmukhi Corpus : 3.3 million words.
Gurmukhi Corpus : 7 million words.
Shahmukhi-Gurmukhi Dictionary Unigram and Bigram Table All Forms Generator ( AFG ) 6 Example Here we show the internal working of the system through an example . Suppose we observe a Shahmukhi string as shown in figure 2. First , we pass this through the preprocessing and transliteration phase where the input string has been tokenized into eleven Shahmukhi tokens . Every input token has been searched in the dictionary for their existence . This status result is shown in table 4 where the tokens 1st , 2nd , 4th , 5th , 6th , 7th , 8th , 10th and 11th are found in dictionary and their intermediate Weighted Gurmukhi Forms ( WGF ) have been generated . These tokens directly jump to bigram queue manager for bigram analysis in postprocessing phase.

Figure 2. Shahmukhi Gurmukhi Tokens
Token Shahmukhi
Token
Found in
Dictionary
WGF token{weight } 1 a ??? ? Yes ???{4513}; ???{8714} 2 ? b ?? Yes ???{14054}; ???{18} 3 k~?a ??? ? No ??????{524} 4 Qr ?? Yes ??{59998}; ??{1186} 5 ? b?5 Yes ????{107} 6 ?> mb ?? ? Yes ??? ??{7699} 7 ?? Yes ?{7927}; ?{3600} 8 l ?? Yes ??{295}; ??{9791} 9 j ? ??? No ????{4} 10 ^ M Yes ???{447};??{47};????{9} ???{5};????{5} 11 ? A : Yes ???{21582};???{174}; ????{159} Table 4. PreProcessing Transliteration Status On the other hand , the input tokens 3rd and 9th are not found in dictionary . Therefore , in this phase they will pass through transliteration component and then in postprocessing phase they will pass through Unicode formatting . After that they will test for Most Frequent ( MF ) check by comparing their weights with a predefined threshold value2 2 Threshold value is minimum probability of occurrence among most frequent tokens in target script corpus.
??? ??? ?????? ?? ???? ??? ?? ? ?? ????? ??? ??? Input 11 Shahmukhi tokens ( Right to Left ) ???? a ? ? b ? ???~? ak ?? rQ?>mb ? ? b ? ? ? 5?? ? l ? ?? ?? ? j?A : ^ M 11 10 9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9 10 11 Transliterated 11 Gurmukhi tokens ( Left to Right)
Unicode Encoded Shahmukhi Text
Rule Based Transliteration
Component
All Forms Generator ( AFG)
BiGram
Queue
Manager
Gurmukhi Token(s)
Shahmukhi Token
Shahmukhi Tokenizer
Dictionary Component
Unicode Alignment
PreProcessing & Transliteration
Post-Processing
Unicode Encoded Gurmukhi Text
Transliteration
System
Out Put Text Generator of 3rd token ??????{524} is most frequent one and will move to bigram queue whereas the WGF of 9th token ????{4} is not a most frequent token and will reach at bigram queue manager only after passing through all forms generator ( AFG).
Token MF AFG Status Bigram Found Output 1 - - hold ???;??? -2 - - ???-???,12; ???-???, 20; ??? 3 Yes - hold ??? ??? 4 - - ??????-??,10; ?????? 5 - - hold ?? ?? 6 - - ??-???? ,45; ???? 7 - - ??? ??-?,86; ??? ??-?,125; ??? ?? 8 - - hold ? ? 9 No ?????{310} ?????{1486} ????{4} ?-??,22; ??-?????,13; ?? 18 Yes - hold ????? ????? 11 - -?????-???,38; ???-???,179; ??-???,18; ??? EOS - hold ??? ??? Table 5. Post-Processing Status and output Here , we see that the AFG has generated two additional forms ?????{310} ?????{1486} ( table 5) for this token . These new forms are having additional diacritical marks of short vowels those are missing in the original form . Clearly , AFG has supplied the best possible forms . Next , we show how bigram manager will work on WGF tokens to generate final Gurmukhi token . In this model the next token will decide the selection of its previous one . Consider the case of second WFG token ???{14054} having bigram combinations with previous one as ???-??? with weight 12 and ???-??? with weight 20. Clearly , the token ??? will produce as output not ??? because ???-??? combination has higher weight than ???-???. Similarly , this table shows found bigram weights and correspondingly decided Gurmukhi token as output.
7 Results and Discussion
The transliteration system was tested on a small set of poetry , article and story . The results are tabulated in Table 6.
As we can observe an average transliteration accuracy of 91.37% has been obtained . We got good transliteration with different inputs . The main source of error is the existence of vowel-consonant mapping between the two scripts . The Shahmukhi vowel characters Vav (?) and Yeh (?) have mapping into Gurmukhi consonants Vava (?) and Ya (?) respectively . This kind of vowel-consonant mapping can not be resolved fully with dependency rules but can be minimized by refining the dictionary and phonetic code generation rules of AFG component . In other cases , system makes errors showing deficiency in handling those tokens which are not belonging to common vocabulary domain.
Type Transliterated Tokens Accuracy %
Poetry 3,301 90.63769
Article 584 92.60274
Story 3,981 90.88043
Total 7,866 91.37362
Table 6. Transliteration Results 8 References Arbabi , Mansur , Scott M . Fischthal , Vincent C.
Cheng and Elizabeth Bar . 1994. Algorithms for Arabic name transliteration . IBM Journal of research and Development , pp 183-193.

Haizhou Li , Min Zhang and Jian Su . 2004. A Joint Source-Channel Model for Machine Transliteration.
Proceedings of the 42nd Annual Meeting of the Association for Computational Linguistics , pp 159-166.

Malik , M . G . Abbas . 2006. Punjabi Machine Transliteration . Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL , pp 1137-1144.

Y . Gal , 2002. An HMM Approach to Vowel
Restoration in Arabic and Hebrew . Proceedings of ACL Workshop on Computational Approaches to
Semitic Languages , pp 27-33.

Youngim Jung , Donghun Lee , Aesun Yoon , Hyuk Chul Kwon . 2004. Transliteration System for Arabic-Numeral Expressions using Decision Tree for Intelligent Korean TTS , volume 1. 30th Annual
Conference of IEEE , pp 657-662.
180
