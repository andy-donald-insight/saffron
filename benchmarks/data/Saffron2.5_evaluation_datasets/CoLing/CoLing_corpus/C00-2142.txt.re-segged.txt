Rapid Development of Translation Tools:
Application to Persian and Turkish
Jan W . Amtrup ~ Karine Meger doomian and RdmiZajac
Computing Research Lab
New Mexico State University
jamtrup , kar?ne , zajacOcrl , nmsu.edu

The Computing Research laboratory ( CRL ) is developing a machine translation toolkit that allows rapid deployment of translation capabilities  . This toolkit has been used to develop several machine translation systems  , including a Persian-English and a Turkish-English system  , which will be demonstrated . We present hearch itecture of these systems as well as the development methodology  . 
1 Introduction
At CRL , one of the major research topics is the development and deployment of machine translation systems for low-density languages in a short amount of time  . As the availability of knowledge sources suitable for automatic processing in those languages  ( e . g . Persian , Turkish , Serbo-Croatian ) is usually scarce , the systems developed have to assist the acquisition process in an incremental fashion  , starting out fl'om low-level translation on a word-fo > word basis and gradually extending to the incorporation of syntactic and world knowledge  . 
The tasks and requirements for a machine translation enviromnent that supports linguists with the necessary tools to develop and debug increasingly complex knowledge about a specific language in-elude : ? The development of a bilingual dictionary that is used for initial basic translation and can further be utilized in the more complex translation system stages  . 
? Methods to describe and process morphologically rich languages  , either by integrating already existing processors or by developing a morphologic M processor within the system framework  . 
? Glossing a text to ensure the correctness of mor -phological analysis and the colnpleteness of the dictionary for a given corpus  . 
? Processors and grammar development tools for the syntactic analysis of the source language  . 
? In order to allow rapid development cycles , the translation system itself has to be reasonably fast and provide the user with a rich environment for debugging of linguistic data and knowledge  . 
? The system used for development must be configurable for a large variety of tasks that emerge during the development process  . 
We have developed a component-based translation system that meets all of the criteria mentioned above  . In the next section , we will describe them : chitecture of the system MEAT  ( Multilingual Environment for Advanced Trml slations  )   , which is used to translate between a number of languages  ( Persian , Turkish , Arabic , Japanese , Korean , Russian , Serbo-Croatian and Spanish ) and English . In the following sections , we will describe the general development cycle for a new language  , going into nmre detail for two such languages , Persian and

2 General architecture
MEAT is a publicly available n vironmeut I hat assists a linguist in rapidly developing a machine translation system  , in order to keep the overhead involved in learning and using the system as low as possible  , the linguist uses use simple yet powerful basic data and control structures  . These structures are oriented towards contemporary linguistic and con > putation M linguistic theories  . 
In MEAT , linguistic knowledge is entirely represented using Typed Feature Structures  ( TFS )   ( Carpenter , 1992; Zajac ,  1992) , the most widely used representational formalism today  . We developed a fast implementation of Typed Feature Structm : es with appropriateness  , based on an abstract machine view ( eft Carpenter and Qu ( 1995 )  , Wintner and Francez (1995) . Bilingual dictionary entries as well as all kinds of rules  ( morphology , syntax , transfer , generation ) are expressed as feature structures of specific types  , so only one description language has to be mastered  . This usually leads to a rapid familiarity with the system  , yielding a high productivity almost from the start  . 
i http://crl . nmsu . edu/~jaratrup / Meattures etc . ) are stored in a central data struct . ure . 
We use an extension of the wellknown concept of a chart  ( Kay , 1973) to hold all temporary and final results . As nmltiple components have to process different origins of data  , the chart is equipped with several different layers  , each of which denotes a specific aspect of processing  . Thus , at every point during the runtime of the system , the contents of the chart reflect what operations have been performed so far  ( Amtrup ,  1999) . The complete chart is available to the user using a graphical interface  . This chart browser can be used to exactly trace why a specific solution was produced  , a significant aid in developing and debugging rammars  . 
MEAT addresses the necessity of carrying out several different asks by providing a component -based architecture  . The core of the system consists of the formalism and the chart data representation  . All processing components arc implemented in the form of plugins  , components that obey a small interface to comumnicate with the main application  . The choice of which components to apply to an actual input  , the order in which the components are processed , and individual parameters for components can be specified by the user  , allowing for a highly flexible way of configuring a machine translation  ( or word-lookup , of glossing etc . ) system ( el . Amtrup et al ( 2000 ) for a more detailed description of the architecture  )  . 
The MEAT system is completely implemented in G++ , resulting in a relatively tast mode of op- -eration  . The implen rentation of the TFS formalism supports between  3000 and 4500 unifications per second , depending on the application it is used in . Translating an average length sentence ( 2025 words ) takes about 3 . 5 seconds on a Pentium PII 400 ( in non-optimize debug mode )  . The systems up . -ports Unix ( tested on Solaris and Linux ) and Win--dows95/98/NT . We use Unicode to represent character data , as we face translations of several different , non-European languages with a variety of scripts . 
3 Development cycle
One of the main requirement facilitating the deployment of a new language with possibly scarce preexisting resources is the ability to incrementally develop knowledge sources and translation capability  ( the incremental pproach to MT development is described in  ( Zajac ,  1999)) . In the case of translations y , ~tems at our laboratory , we mostly translate into English . Thus , a comple test of English resources i already available  ( dictionary , generation grammars and morphological generation ) and does not need to be developed . 
The first step in bootstrapping a running system is to build a bilingual dictionary  . The work on the dictionary usually continues throughouthe devel  . -opment process of higher level knowledge sources . 
We use dictionaries where entries are encoded as flat feature-value pairs  , as shown in Figure 1 . 
$ Head word O Jlyb hftglnh $ Category Noun $ Number Plural $ Regular False $ English Seven Wonder < nc plur >  ; $ $ Figure h A Persian -- English dictionary entry . 
While this is already enough information to faciL i rate a basic word-  . for-word translation , in general a morphological analyzer for the source language is needed to translate realworld text  . For MEAT , one can either import the results of an existing morphological analyzer  , or use the native description language , based on a finite-state transducer using characters as left projections and typed feature structures as right projections  ( Zajac ,  1998) . After completing the morphological nalys is of the source language and specifying the mapping of lexical features to English  , glossing is available . The Glosser is an MEAT application consisting of morphological-ysis of source language words  , t bllowed by dictionary lookup for single words and compounds  , and the translation into English inflected word forms  . An example of the interface \[ br the glosser is shown in  . 
l ? igure 2.

File Edit View G0C0 mlaun\[c~2 otHelo-:-"7- .   .   .   . 
~', ~3~t ~ l?n donttsia;
J an d ; ~3/z ~ J_~contractj ~@ rant ; ~ stit~o ; p  ~ . ttir ~/ ; & ~- to ; at lin ; on ; for ; ) ~) ~ EastTJ2 ~ O = ; b . ;
L~Imi~j ~ at ~ r ~; approval . ; slanatu ~ ; u ~ wine ; ~I ~ E dig ; pull of l ; do ; ~ J/i Indon Q=ia ; 
Jan ~3 J ~ i to day ; & ~ a ; (& ~3; ( V e ?\] .   .   .   .   .   .   .   .   . 
diq ; pull off;
Pre~ent ; Th/x  ~ ; Plural_ ~ c ~ ive ;   S~o3~ctive   1~ unstgned Javn ~ pFl~tWhq d~v'c-Ai .   .   .   . iAp ~ a taeat ~ p ~; ~ r , ~, ~' ' . ~"--5"J ~-2-
Figure : 2: The Glosser interface
The next step in developing an m dium- . quality , broadcoverage translation system is to develop

Q~II %;

I-dgeS16 1Z
Sta ~. Imai 0.....
N~ki~-~::-2-L 77 . . . . . . . . . . . . 7"-"---,A ,/"--> . .# / _--J - - . " - " , , ' > - ~ / j ~ < - ~ 2 ' " - .  / ,",  .  ->%/"  .  /  .   . C , -< . ~ Z--,~ .   .  / , ~  .   .   .   .  ,  .  ,  .  _  .  ,  . ~  . ~ \ // '  . I /,'::; G~>"';-5-" . .'~,~  . . . .
~1/5I /'/ . '-'/2?" ~51"-'2- . ~,- I - ~ . :-- . << . "" III " t /':"-"1/ . -~2, . /-~ /  .  /~  .   .  ,  .  7 \ 1' ,/ // . $ . -' L > :'7 . .~;v , . . . . IK ,*; ' . '%-,~-\f/~?,~"~, h'~2 . . . . . . ~,?7:- . . \ by lqYy Iz sh mD l)y '~ ~ . ~' ~ c'_ .  -~  . ~_~  .   .   .   .  :-- .  "- . . ; . q <* j- . . "-, %, .  ~ . *  . . . . . . . ~"7-Yb ?:--'" . . . . . . :- v ~<~, . . . . "-3, . ', q . ./" _ _~,~7<---7 . .2; . =~  .   .   .   .   .   .   .   .   .  ~ ~-  .   . ~  .  ~_  . , zv %, >, y . x ' q .  , , \  .   .   .   .   . -~--~\, x ~* . ~J ~"-- . . ,,  .   .   .   .   .   .  --- . -? . . v :>:< "-~--'> .  ";~ . y "_If zly " s^sl Iy dyylfth Is/v
I83 ggg9?3?76'~fibg6100liltI'"
Camlamt : Sentence\[ .   .   .   .   . i- .   .   .   .   .   .   .   .   .   .   . l:\[aer . l  ~ . ~ M~lra ~ oun a TZeel\[ Ad\]ecti'3e "\[ I\[\[Prem~l ta0nA   . \]~'\] N'\]ICP o IIIP\[\[\[\[\[~lu~er al\]l'!u ~ ' INu : ' ~\]$" " : " VerhlUPlS "  , \[NounlN'INPo\[\[\[Noun\]If'INP 0 l , ' ct ; ~ IPPIXIXP\[\[\[\[Ml'i ~: lmr . l : ~ le . .~ e rdetg : e he~d VerbPhraae I a~er . rml  ~ . ~nm,~headf:nt~y(~"'formg,,~mI4:per . R1 11 e . Se . tei ? ~; ~ orphVe; . blloi:pholo~-i\[,~,~,\[blle .   , ~ e , ~ ~ I celex Verha \] J , ox ~ call\[i:laai * . FRIIIt .  ~ . ! ~ , telll ? ~ ~ poa 9 eeb . 
7: ger . Rule . ~ e . tei * ceip ~, ::) entSte ~ . " ylh % regul . a , " T ~ uel . 
II:p ~ r . l ' I lll ~ l . ~nll~llrA ~ inflVe~bal . lnfkect\] . on\[,~:NF . ~ t1 111 . ~\[~ n~t IIg ~ voice Undeflned , tlhper . Rtlleo ~ len~m ; eclztzc:C ? . Jtic\[function : Nulll , 11: ~ . Rtde . 8 ~ It ~ I1C8 tense ' Particlp1 ~ LIZ : per . RtdmS6~ten~sIcaus atlwFalse , I1:J--el'~UlI~~lall/eligli~i , person Unde ~: tned .  , \[  . 4'?'~ oodUn(~f ~ . ned . 14: lll ~? . Rt~e'Se " ~ ttce\[nu~erAg~eementUndefined , nege , tlon False \] l ,   , og ~ Orrhography ! key : " ylftn " , *! ~\[:--~ Li .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .  ~  . . . .
. . . . . . . . . . . . . . .  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .  : . ::: : : : : _ : :  .  ::  . :: : -=  . _ :  . . . . . . .  :  .   .   .   .  - : =- :_- . ::_  . :_ : .  : : _ ' : : - : : - _ _:  .  _ _ : :_;:  .  :_  . _ _ -_  .  _=>-:_ -  2 :: J Figure 3: Viewing a eomple : ~ caual & , ;is knowledge sources for the stt?uctural analysis of input sentences  . Mt '; AT supports the use of modmlarm fific . ation grammars , which facilitate , , " develop . 
merit and debugging . E ; ach grammar module ca , ~ . be developed and testedir Jisolation , the final system applying each gtammar in a linear fashion  ( Zajac and Amtrup ,  2000) . The main . component used is a bidirectional island- . parser ( cf . Stock et al (1988)) for unification-based gra . mmars . The gramma rules are usually writtet ~ in the style of contextfree rules with \[~ ssociated unification constraints as shown i ~ Figure  4  . The rules allow for the specification of the right hand side as a regular-  . expression of feature structures . We plan to add more restricted types of grammars ( e . g . based on finite- . state transducers ) to give the linguist a richer choice of syntactic processes to choose from  . 
For the time being , the transfer capabilities of the system are restricted to lexical trans Dr  , as we have not finished the implementation fa complex transfer module  . Thus , the grammar developer either needs to create structural descriptions that match the English generation  , or the English generation grammar has to be modified for each language  . 
At each point during the development of a trans-.
Adj ~: : :' i ; u : c , thdLc ;\ [
Jim : i;u ~:', gdjBa ~ :\[\[\[ c:x: . ! eAd:#Ld\]jg p e . : : :'~ adv\],#adv::tl ** . & dvg ~ Et ; ry " Y " #a d . j ': :: i: . u : ~ . ', gdjEnt : !: y :>\];
Figm'e 4: A Turldsh syntax rule lation syste . m , we consider it essential to beah lenotouly to see there suRs  , but also to monitor the processing history of a result  . Thus , th . echart that leads 1 ; othe construction of all English olt tptlt can be viewed in order to examine all intermediate constructions  . In the MEAT system , each module records various steps of computations in the chart which can be inspected statically after processing  . A unified data interface for all modules in the systein allows both the inspection of recorded internal data structures for each module  ( when it makes sen:- ; e , input/ou?put of all module , '; . The graphical i ~ terfa . ce used to view complex a . t ~ alyscsi . r ; shown in Figure 3 . 
dA.pp\]J.ca;ions
In this section , we give an overview of the capal)i ! i . 
ti(~'; of MEA71' using ~ wo(-l!ri ~ . nt examples from work af , our laboratory . In the Shiraz project ? ( Amtrupei ; al . , 2000) , we developed a machine translatio ~ system from Farsit O English  , for which no previous knowledge sources were awdlable  . We mainly target news material and the transl ~ tion of web pages  . TileTm'kish~Englishy stem has been developed with the Expedition project a  , an enterprise for the rapid development of MT systems for low-density languages  . 
Botl/systems use a common user interface for a c ~cess to MEAT  , which is shown in Figure 5 . The MT systems are targeted t ( ) the translation of newsy . 
paper text and other sources available online ( e . g . 
web pages ) . The emphasis is therefore put ou exten+sive coverage rather than very -+ high quality transta + tion + Currently  , we reach for bol ; h systmns a level of quality that allows to assess in detailtile content of source texts  , at the expense of some rm felicitous

r~ta ~ .   .   .   .   .   .   .   .   .   .   .   .   . Dvc~lv~ll ; t , ~ cs:/Im~oa~tjam ~ In Iplr , e an hltm-!Cfltg ' ~ A . t . .R ~ d~q ~ ~ f~l ,+01 . blt .   .   .   .   .   .   .   .   .   .   .   .   .   .   . i ? i ~ ZL2Z-2-~?2-? . 27~-+~2Z7-~-_ . __L_,7 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . T~ak~tmac ~, ~:\[ iT ~; i-;;,a ;; ~ E iTg ~' TggU ~ . ., . -gJ ~ g ; gTJE . T Kg7 \[ y T7:2~:   7   7  ~  7  ~  7 : IIC ~ W : Cria X ~= true \] ( ocon 0 ~ , 
Dm(rL  ~ Rhlh)II ' ' ~" ~ t"jC .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .  \[ : ~-~  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . s ~, 2 ~ , , ~ .   .   .   .   . 
~ ht~l~llt~alONergx ~ cutin 9 llodu\[~cll~rgS~v~r + ~ .   .   .   .   .   .   .   .  ~5:___ . ::~  .   .   .   .   .   . :\[ chartsauer Size-ag , re~x de ~ t-S ~, to Cah, . O , C~U . , 0   010a ' ? ht~l-~IRt ~ Executin ~ Nodulesu'f ce I\ [c +  Sueface0ener~nor Start in q t ~ 1 + OZL~ts t~tl-O3  , lxt ": : S~t cfGcn:Urf ~ e0onor~orsiz~+0E ~ = ~ t delt t = ~ K'z nL~h~d " to~cl-0  , ~ pII-00\]0s . Jhl~*1-0/' bctIrTot~\] . " g ~ ze = S2R , re ~ id ~ nt-48 g , toeal ~99800C ~ J = 23~0s ( croat ~/\] Iu ,  -  . +; = ~, i ~ .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . 
Figure 5: The MEAT user interface 4, 1Persian . .+Englisb MT The input for the Persian-English system is usually taken from web pages  ( online news articles )  , although plaintext can be handled as well . The imternal encoding is Unicode , and various codeset con-w . 'rters are available ; we also developed an ASCII-based transliteration to facilitate the easy acquisi ~ tion of dictionaries and grammars  ( see Figure 1 )  . 
The dictionary consists of approximately 50 , 000 en+tries , single words as well as multiword compounds . 
Additionally , we utilize a multilingual on omastic on maintained locally to identify proper names  . 
2 http://crl . ransu , edu/shiraz 3http://crl . nmsu . edu/expedition we developed a , morphological grammar for Per-siai ~ using a unifies  . lion-based formalism ( Zajac , 1998) . A sample rule is showtt in Figure 6 ( of . 
Megerdoomian ( 2000 ) for a more thorough descrip ~ ion of the Persian morphological analyzer  )  . 
Present Stem = <
Regular Px'esentStem <<<" In "" y "?> per  . Verbal\[inf \] .   . causative : Trne\]>I < per . Verba . \] o\[infl . causative : False\]>>>; Figu . re 6: A Persian morphological rule The knowledge sources for syntax were  ( manually ) developed using a corpus of 3 , 000 tagged and bracketed set rt , ences extracted h:oma10MB corpus of Per . ?siannews articles . We use three grammars , respon . -siblelor the attaetunent of auxiliaries to main verbs  , the recognition and processing of light verb phenom-  . 
ena , and phrasal and sentential syntax , respectively . 
The combined size is about 110 rules . The develop . 
ment of the Persian resources took several months , primarily due to the fact that the translation system was developed in parallel to the linguistic knowl  . .
edge . The Persian resources were developed by a team of one computational linguist  ( morphological and syntactic grammars , overall supervision ibrlan--guage resources ) , and 3 lexicographers ( dictionary and corpus annotation )  . 
4?2' lti ~ urkish+-English MT
With ii ~ yet another project ( Expedition ) , we developed a machine translation system , for Turkish . This application functioned as a benchnrark on how much effort the building of a medium-quality system re--quires  , given that an appropriate framework is al- . 
ready available.
For Turkish , we use a preexisting morphological analyzer ( Oflazer ,  1994) . Turkish shows a rich derivational and inflectional morphology  , which accounts for most of the system development work that was necessary to build a wrapper for integrating the Turkish morphological analyzer in the system  ( approximatly 60 person-hours )  4 . The development of the Turkish syntactic grammars took around  100 person-hours , resulting in 85 unification-based phrase structure rules describing the basics of Turkish syntax  . The development of the bilingual Turkish-English dictionary had been going on for  4The main problem during the adaptation was the treatment of derivational information  , where the morphologically analyzed input does not conform exactly to the contents of the dictionary currently contains approximately  43  , 000 head words . 
5 Conclusion
The development of automatic machine translation systems for several languages is a complicated task  , even more so if it has to be done in a short amount of time  . We have shown how the availability of a machine translation environment based on contemporary computational linguistic theories and using a sound system designaids a linguist in building a complete system  , starting out with relatively siln-ple tasks as word-for-word translation and increlnen-tally increasing the complexity and capabilities of the system  . Using the current library of modules , it is possible to achieve a level of quality on par with the best transfer-based MT systems  . Some of the strong points of the system are : ( 1 ) The system can be used by a linguist with reasonable knowledge of computational linguistics and does not require specific programming skills  .   ( 2 ) It can be easily configured for building a variety of applications  , including a complete MT system , by reusing a library of generic modular components  .   ( 3 ) It supports an in-crelnental develol ) ment methodology which allows to develop a system in a stepwise fashion and enables to deliver rumfing systems early in the development cycle  .   ( 4 ) Based on the experiences in building the MT systems mentioned in the paper  , we estimate that a team of one linguist and three lexicographers can build a basic transfer-based MT system with medium-size coverage  ( dictionary of 50 , 000 head words , all most fi'equent syntactic onstructions in the language  ) in less than a year . 
One major improve , nent of the system would be an mre integrated test and debug cycle linked to a corpus and to a database of test items  . Although existing testing methodologies and tools could be used  ( l ) auphin E . , 1996; Judith Klein and Wegst ,  1998) , building test sets is a rather time-consulning task and some new approach to testing supporting rapid development of MT systems with an emphasis on wide coverage would be needed  . 

Jan W . Amtrup , Hmnid Mansouri Rad , Karine Megerdoomian , and Rdmi Zajac .  2000 . Persian-English Machine Translation : An Overview of the Shiraz Project  . Memoranda in Computer and Cognitive Science MCCS-00-319  , Colnputing Research Laboratory , New Mexico State University , 
Las Cruces , NM , April.
Jan W . Amtrup .  1999 . In crcmcntal Speech TraTts la-tion . Nmnber 1735 in Lecture Notes in Artificial Intelligence . Springer Verlag , Berlin , Heidelberg,
New York.
Bob Carpenter and Yan Qu .  1995 . An Abstract Machine for Attribute Value Logics . In Proceedings of the ~th International Workshop on Parsing Technologies  ( II/VPT 95 )  , pages 5970 , Prague . 
Charles University.
Bob Carpenter .  1992 . The Logic of 2~ped Feature Structures . Tracts in Theoretical Computer Science . Cambridge University Press , Cambridge . 
Lux V . Dauphin E .  1996 . Corpus-Based annotated Test Set for Machine Translation Evaluation by an Industrial User  . In Proceedings of the 16th International Conference on Computational Linguistics  , COLING96 , pages 1061-1065 , Center for Sprogteknologi , Copenhagell , Demnark , August 59 . 
Klaus Netter Judith Klein , Sabine Lehmann and Tillman Wegst .  1998 . DIET in the context of MT evaluation . In Proceedings of KONVENS-98 . 
Martin Kay . 1973. The MIND System . In.
R . Rustin , editor , Natural Language Processing , pages 155-188 . Algorithmic Press , New York . 
Karine Megerdoomian .  2000 . Unification-Based Persian Morphology . In Proceedings of the CI-Cling 2000 , Mexico City , Mexico , February . 
Kemal Oflazer .  1994 . Two-level Description of Tnrkish Mor I ) hology . Literary and Linguistic
Computing , 9(2).
Oliviero Stock , Rino Falcone , and Patrizia Insin-namo .  1988 . Island Parsing and Bidirectional Charts . In Proc . of the 12t1~COLING , pages 636-641 , Budapest , Hungary , August . 
Shuly Wintner and Nissim Francez .  1995 . Parsing with Typed Feature Structures . In Proceedings of the ~th International Workshop on Parsing Technologies  ( \] WPT95 )  , pages 273287 , Prague , 
September . Charles University.
Rdmi Zajac and Jan W . Amtrup .  2000 . Modular Unification-Based Parsers . In Proc . Sizth lr ~ , tcrna-tional Workshop on Parsing Technologies , trento , 
Italy , February.
Rdmi Zajac .  1992 . Inheritance and Constraint-Based Grammar Form Mislns  . Computational Linguistics , 18(2):159-182 . 
R&miZajac .  1998 . Feature Structures , Unification and FiniteState Transducers . In FSMNLP'98 , Intcrnational Workshop on FiniteState Methods in Natural Language Processing  , Ankara , ~ lhlrkey , 

Remi Zajac .  1999 . A Multilevel Frmnework for Incremental Development of MT Systems  . In Machine Translation Summit VII , pages 131-157 , University of Singapore , September 1 . 3-17 . 

