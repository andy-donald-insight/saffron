Extended Dependency Structures and their Formal Interpretation 
Marc Dymetman Max Coppcrman
Rank Xerox Research Centre
6, there in de Maupertuis , Meylan 38240, France
dymetman , copperman@xerox.fr

We describe two " semantically-oriented " dependency-structure formalisms  , tJ-forms and S-forms . U-forms have heen previously used in nm chine translation as interlingual representations  , hut without being provided with a formal interpretation  . S-forms , which we introduce in this paper , are a scoped vetsion of U-fnrms , and we define a compositional semantics mechanism for them  . Two types of semantic composition are basic : complement in corlgoration and modifier incorporation  . Binding of variables is done attire time of incorporation  , permitting tnttch\[lexibility in composition order and a simple account of the semantic effects of permuting several incorporations  . 
1 INTRODUCTION
U-fi ) rm s ( Unscope dependency form ) arc are presentation formalism which has been used  ( under a different name ) astire basis for the intermediary language in the machine mm sht tion system CRITFER  ( lsahelle et at . , 1988;l)ymetman , 1992; Isabelle , 1995) . U-forms account for two central aspects of linguistic structure : predicate-argument relations and headedness  ( complements vs . modifiers ) , and so form a middle ground between a " semantic " and a " syntactic " representation  . 
This , combined with their formal simplicity , accotmts for much of the popularity of U-forms or related formalisms -- such as the semantic and deep syntactic representations used in Mel'cuk's Meaning-Text Theory  ( Mel'+nk ,  1981 ) -- in application such as \[ nit-chine translation and text generation  . 
Althought J-fot n~s are strongly " meaning -oriented " their interpretation is never made explicit but is left to the computational linguist's intuition  . This has two consequences : ? Operations performed on U-forms and related formalisms canno the controlled for semantic validity  . So , for instance , it is comnlon practice to deline graph rewriting rules on these representations which are believed to produce semantically equivalent expressions  . Without he check of for + real interpretation , thesert des may work in some cases , hut produce wrong results in other cases . 
So for instance , a rule rewriting ( the representation of ) " John's salary is $25000 higher this year than last year " into " John's salary was  $25000 lower last year than this year " would seem intuitively valid until one considered the case of " John's salary is  50% higher this year than last year " , where it does not work any rnore . 
? U-forms are not directly adapted to applications putting emphasis on denotational semantics and formal reasoning  , like for instance some lmtural hmguage generation systems in well-formalized domains  ( l-htang and Fiedler , 1995; Ranta , 1995; I+evine ,  1990) , see also ( Alshawi ,  1992) . 
A basic obstacle to providing a formal interpretation for U-forms is the fact that these representations leave the relative scopes of dependents implicit  . The S-form representation ( Scoped dependency form )  , which we introduce here , is an extension of U-form notation which makes scope explicit  , by allowing dependents to be ordered relative to one another  . Dependents ( complements or modifiers ) c~mmovefi'eely relative to one another in the S -form structure  , under certain binding-site constraints + We then go on to provide it compositional interpretation mechanism for S-forms  . Freevmiahles ( generalizations of the argt , arg . _ , , atrg :+ annotations of standard dependency formalisms  ) are used to connect an argutnent to its binding -site inside a predicate  . Binding of variables is done attire time of incorporation  , permitting much llexibility in composition order and at simple account of the semantic effects of permuting several incorporations  . This liberal use of freewlri-ables is contrasted to the approach of Montague grammar  , where the requirement that semantic expressions entering into at composition m'e closed  ( do not contain composition . 
Two kinds of senmnticomposition are basic : coin -plement incorporation  , whine the complement fills a semantic role inside the head  , and modifier incorporation , where the head fills a semantic role inside the modifier  . The mechanism of actually deriving the semantic translation of the composition fi + olntile semantic translations of its two components i handled through a list of type-sensitive composition rules  , which determine the action to be taken on the basis of the component types  . The flexibility of the approach is il hlstr; . lted on an example involving proper names , quantitied noun phrases , adverbials and relative clauses . 
2 U-FORMS
Formally . U-ferms are nnordered labelled nary trees such as tile one shown in Fig  . l , corresponding to tile sentence : ( Sl ) " John does not like every woman hated by Peter " . 
like // ~"\ ~ . < s // 2 jolTnwoman m>t+let //" k-'~/et'et+vhate peterl Vigttre  1' AU-form . 
The edge ht bels me members of the set det ,  1 , 2 ,  3 ,   . . . . - l , -2 .  -3  . . . .  , alld correspond either to determiners ( label " det ' ) or to argument positions relative to a predicate node  ( other labels )  . 
The U-form of Fig .   1 expresses three predicate-argument relations among the nodes : like no that e john ll  . ' oma  #llike peler womalg Figure 2: Predicate-argument relations in a U-form . 
In order to extrac the predicate-argument relations encoded in totile U-form  , one needs to apply the following "' rule " . Let's notate(A , L , B ) an edge of the tree , where A is the upper vertex , Btile lower vertex , and L the edge label . With each node A in tile tree , one associates its set of predication edges , that is the set PAl of edges of the form ( A , +i . X ) or ( X . - i,A) . One then consider stile predication tree Ti made by forming the collection of edges  ( A , LX ) where I , is positive and either ( A . L , X ) or ( X . inverse(L ), A ) is a predication edge of A . Each predication tree denotes a predicate -argtnnent rehition among IJ  , + for nl nodes . So for ill stance , the tree ' l ~ ; u < ~ islt/inled by forming tile edges ( hate , l , peter ) and ( hate , 2 . woman ) , and this corresponds to the predicate-argunlent rehi-tiontlate  ( peter . woman) . 
WELL-FOR MEDNESSCON I il TIONS ( iNU-
FORMS In order to be wellformed , a U-iormUf : has to respectile following condition  . For ; . lily node A of L!F . the predication tree Ti must be such that : 1 . \[Nohoh,scomliti(m\]If(A . i . B ) is an edge of 1"i . 
then for any number j between I and i , T . In lttst contain a node of form ( A , i,C)+2 . \[Nordpe'tiliollcomlimml No two edges of T . t can have tiles alne label i . 
MOREONU-FORMS Negative labels are a device which permits to reconcile the not alien of predicate -arg nn lenl structnre with the notation of syntactic de-pondoilcy  , So , in the i . .\]-fornl considered above , while " semantically " tile ' well qan ' node is an  ;  . irglnl\]oni of tile " hate " node , " syntactically " tile hate ' node is a dependent of tile ' woman ' node  . Cases such as this one . 
where there is a conflict between predicate -argument directionality and dependency directionality are notated ill the Uform throng h negative labels  , and correspond tO  #llodifie#' , ' , ' . Cases where tile directionality is parallel correspond to complement  . s . 
When used as interlingual representations in machine translation systems  , U-forms have several advantages . The first is ttmt they neutralize certain details of syntactic structure that denot carry easily between languages  . For instance . French and English ex-piess negation in syntactically different ways : " Rachel does net like Claude " vs  . ?' Racheln ' aimepasClaude ": this difference is neutralized in the U-for nl representation  , for both negations are expressed through a single negation predicate in the U-feral  . 
A second advantage is that they represent a good compromise between paraphrasing potential and semantic precision  . So . for instance , intile CRITTEI , I system , the three sentences : John does not like every woman that Peter hates John does not like every woman hated by Peter Everywoman whom Peter hates is not liked by John would be assigned the U-form of Fig  .  1 . On the other hand , the sentence : would be assigned tile t !- form or ' f : i ~  ,  .  3 , which is different from the previous U-form , although tile predicate-argument rehitions are exactly tiles a nie in hoth cases  . 
\]Idt'1//"~2/\ , /)(' tg'rWOllldll-<Qd/\~"e very like , /\<  . jolmm~t
Figure 3: Adilf 0 renlt J-form ( ) he can take advantage of such paral ) hrasing potential incerlain cases of synlacl Jc divergence belween languages  , l : or instance , French does not have a syntactic equivalent o the dative-lnoven/etlt+passive configuration  o1: 
Rachel was given a book by Claude so that a direct syntactic translation is not possible  . 
However , attile level of U-form , this sentence is equivalent to the French sentence : 
Claudea donne unlivre ~ tRachel and this equivalence can he exploited it  ) provide a translation of the first sentence . 
One serious problenl with 1 . \] . \[ or n is , however , istil at they do not have una in biguous read higs in cases where the rehliive scopes of constituents can result in clifl'er-ent semantic ii ~ terp retations  . So , in the case of senfence ( Sl ) , tile two readings : " it is not the case thai John likes every woman hated by Peter "  , and ' Lh ) tl . n dislikes every woman thai Peter hates " are not distinguished by tiletl-l:oi+nlOfl " ig +  1  , 3 S-FORM SINTI , I()I ) UCIN ( ; SC ( ) I ' E Lefs consider the trec represented in Iqg .  4 . 
The only differe iice hetween this tree amlthel , J-form of l:ig . l is thai the nodes of our new tree are considered ordered whereas they were considered t in-ordered in the I !- lorm + The convention is now that  ( tepet lttent sister nodes are interpreted : is having  ttil'-l\]2retlt scopes , with llar rower scope correspondillg to a position i i l o r e I t  ) tile right . 
The tree of l :' ig . 4 can he glossed in the following way : like // . -J ! 2 t . jolm ~ u ~ tW ( ) lll(lfl(q'dl ' V\]lg . ll("lT , #H't " I : igure 4: In hoducing scope hyordering the nodes . 
John , it is not the case that he likes every woman that Pe+terhates If we consider tile six l  ) mmulalions of lhenodes under like . we can produce six differenl scopings . Because John tele is to an individual , not a quantified NP . 
these six pernmtations really corrcs l ) ond to only the two interl ) relaiiens given a hove . The tree of Fig .   4 corresponds to the lirst of I hese interpretations  , which is the preferred interpretation Ik ) l sentence ( SI )  . 
Our discussion of scope being represented by node order has been inforn ml so far  . In order to n lake it\['Oi'lllal , we need to encode our representation into a binary-tree for nmtell which a compositioiml senlantics can he delined  . To tie that . in a lirst step we rephtce the at'g unlent nunibers of l : ig  . 4 hyexl ) lici ! argumen thaines ; illase Colldslep we encode the resulting or deredmary free in h  ) a himuy forumt which makes explicit the order in which dependents are incorlmrated in lotheir head  . 
S-I " ORMS Consider tile mary tree of Fig .  4 . For any node A in this tree , take the set of predication edges associated with A  , that is the set of edges ( a , + i , B , ) and ( Bi , i , A ) . By renaming each such node A into A(XI . . . . X ,+) . where XI . . . . . X , are hesh identiliers , and by renaming each such htbel + i ( resp . + i ) into + X , : ( resp . -X , :) , one obtains a flew tree where argunm n l numbers have been replaced by argument haines  . \[: or instance the previous representation now become stile tree of l " ig  .  5 . 
This representation is called a scope Udepemh'm3' , lotto , or Sqbrm . 
BINARY TREEFN CODING OFS-FORMS : B-
FORMS In order to encode tile ordered nary tree into a binary tree  , we need to apply recursively the transfotnmtiou il hlstrated in Fig  .  6 , which consists in forming a " headline " , projecting in a northwest direction from tile head  11  , and in " attaching " to this line " dependent -lines " D  ~  , D2 . . . . .  1) , , , with l- ) ltile right-john not ( nl ) woman/\+evetlvhate ( hl , h2)
I+hlpeter
Figure 5: An S-form.
most dependent ( narro west scope ) and D ~ , the leftmost dependent ( widest scope ) in the original tree . 
;\[ l , nI+~\z\ , I , I ,  / \ "\ , l)nD 2151\]511//l\ , N\\]+I\]/i"1"\'N\// , , / /~'\\ 1 , 2// / ) \  , // Il ,  /  .   .   .   .  ,,
D21"\

Figure 6: The translbrmation between S-forms and B-forms . 
Applying this encoding to our example , we obtain the binary tree of Fig . 7, which is called a B-form . 
The B-form makes explicit the order of incorporation of dependents into the headline  . By permuting several dependent-lines along their headline  , this incorporation order is changed and gives rise to different scopings  . 
S-forms and B-forms are completely equivalent representations  . Cle~ly , the encoding , called the S-form/B : fi~rmen coding , which has just been defined is reversible . The S-form is more compact , and makes the dependency relations more conspicuous  , whereas the B-form makes the compositionality more explicit  . 
WELL-FOR MEDNESS CONDITION SONB-
FORMSANDS-FORMS Stm'ting from the U-form and enriching it  , we have informally introduced the notions of S -form and B-form  . We now define them formally . 
We start by giving a rect , rsive definition of IBFs ( incomplete B-forms ) , that is , B-forms which may contain unresolved flee variables  . We use the notation (( D , Label) , H ) the labelled binary tree obtained by taking H as the right subtree  , D as the left subtree , and by labelling the left edge with Label . We , also use the notation fv ( IBF ) for the set of the free variables in IBF . 
DEFINITION OFIN COMPLETEB-FORMS not(hi)+lf . ~ ~ N , . 
d ~ tevman like ( ll , 12) peter hate(hl , h2)
Figure 7: AB-form.
1 . A node N of the form Pmd(xl , . . , xn ) is an IBF with the set of free variables fv ( N ) = xI ,  . ., xn ; 2 . If D and HamIBFs , fv(D ) and fv(H ) ale disjoint , and x~fv(H ) then H '= (( D , +x) , H ) is an IBF with fv ( ll ' ) = fv ( D ) Ufv ( H ) \ x ;  3 . If D and H are 1BFs , fv(D ) and fv(H ) , are disjoint , and xCfv(D ) then H '= (( D , -x) , H ) is an IBF with fv(H')=fv(D)Ufv(H)\x ;  4 . If D and H are IBFs , and fv(D ) and D(H ) are disjoint , then H ' = (( D , det) , H ) is an 1BF with fv(H')=fv(D)Ufv(H) . 
DEFINITION OFB-FORMS AB-form is an IBF with an empty set of free variables  . 
The notion of S-form cart now be delined through thense of the S-form/B-form encoding  . 
DEFINITION OFS-FOR MSAS-form is an of demd labelled nary tree which can be obtained from a B -form through the inverse application of the S -form/B-form encoding  . 
It can be easily verified that the representation of Fig  . 7 is indeed a B-form , and , consequently , the representation of Fig . 5 is a valid S-form . More generally , it can be easily verified that enriching a U-form by ordering its nodes  , and then replacing argument variables by argument names always results in a valid S-form  ) t The converse is not true : not all S-forms can be obtained in this way from a U-form  . For instance , there exists a S-fonn corresponding to the prefel Ted reading for " Fi do visited most rash cans on every street "  , which has " every street " We now describe the interpretation process on B-fl  ) rms . 
lnler pretation proceeds by propagating semantic translations and their types bottom-up  . 
The first step consists in typing the leaves of the tree  , while keeping track of the types of fl'ee variables  , as in Fig .  8 . 
+/(/\,,/5", // ~\\ john . " e'+//"~""",,,?\ .   . till : t //\ \ t to t (* t1): t //"/ < , det/"\ , /\/ h2/\\ , el'crY . ' ? i\]+l ) -+( u-~t ) ~ t / "\"\ . /\\,+ h ;/"',, .   ,  \\ ,  / "" " , , , hhe , h2: cpeter : e hale Chl , h2) . ' t "\\,"- . , " \  , \voDt(in:U~1"\ , , , tlm , 12: elike(ll , 121:! Figure 8: Typing the leaves . The fleewu'iables and their types are indicated in brackets  . 
The types given to the leaves of the tree are the usual functional types formed starting with e  ( entities ) and t ( truth values )  . In the case where the leaf entity cot > tains flee variable arguments  , the types of these free variables are indicated , and the type of the leaf takes into accounthe fact that these free variables have already been included in the functioned form of the leaf  . 
Thus hate ( hl , h2) , which can be glossed as : " hihatesh2" , is given type t , while hl and h2 are constrained to be free variables of type e . 
VARIABLE-BINDING RULES According to the wellformedness conditions to tB-forms  , a complement incorporation (( D , +x) , It ) is only possible when H contains x among its fi : eevariables  ; the " syntactic dependent " Disseen as semantically " filling " the place that x occtt pies in the +' syntactic head " H  . In the same way , a modifier incorporation (( D , -x) , H ) is only possible when D contains x among its fie e wuiables  ; outscoping " most trash cans " , and which is not obtained from a U-form in this simple way  . However , the t+eexists a mapping fiom S-forms to U-h>rms , the scope-fi ) rgetting mapping , which permits to deiine equiwtlence chtsses among S-torms " sharing " the same U-form  . This relation between S-R~rms and Uqbrms can be used to give a  ( not > deterministic ) lbrmal interpretation to U-forms , by considering the interpretations of the various S-forms associated with it  ( see the technical report eoln panion to this paper  . ) in this case the " syntactic " head I I is seen as semantically " filling " the place that x occupies in the " syn--tactic dependent " D  .   ( This difference corresponds to the opposition which is sometimes made between syntactic and semantic heads and dependents : complements are dependents both syntactically and semantically  , while modiliers are syntactically dependents but semantically heads  . ) In order to make formal sense of the informal notion " filling the place of x in A  . , , "( where the notation A , : means that A contains the free variable x ) , we introduce the variable-binding rules of Fig .  9 . 
cotnllh , ntenltntl dilict dotctL\]IiI/CIi\[iC ~ ) li ) Ol\[itt , llill Ct ) tpol\[t\[iOlllit'o\[pOl~ItiOll / 7\
D '\[\[' I)' , I\['I ) '1\[' dot//\]kl ) ' . \ x . l\[i + Ax , I ) ' ~ H'IYH ' Figure 9: Variable-binding rules . D ' and tl ' con'e-spond to the senmntic translation of the subtrees rooted in  1  ) and 11 respectively . 
These rules tell t , show to " get rid " of the freevail-able being bound during complement or tnodifier incorporation  , amely by forming the abstraction , X x . A , : before actually performing the semantic omposition between tile dependent and tile head  . For completeness , detemainer incorporation , which does not in w ) lvevmiable binding , is given along with complement and rnodifier incorporation  . 
Two things should be noted about this way of " delaying " variable-binding until the relevant dependent is incorporated : ? Suppose that we had bound the variables appearing in the head predicate locally  , that is to say , that , in the style of Montague grammar ( Gamut ,  1991 ) , we had written ) d21 l . like(l1 , 12) instead of like (11 , 12) , and so forth , in Fig .  7 . Then each incorporation of a dependent into the " headline " would have changed the type of the head  ; thus ' not ' would have had to combine either with a head of type e --+ e~t  , or e--t , or t , depending on its scope relative to the other dependents  ; with the scheme adopted here , the type of the head re-nmins invariant along the headline  ; ? tinder the same hypothesis , the incorporation of the second ment first and of the first argt  , -ment second would have been much simpler than an is m would have had to be found to distinguish the two orders  . Then permuting the relative order of two dependents along the headline--corre-?O '"" spondm ~ to dttferent scope possibililies - -wonld have had complex computational conseqt tences + In the scheme adopted here  , these cases are handled in at in if or n away . 
The way freewu'iables are used in our scheme is somewhat reminiscent of then seol :  . vvitla ?' li?'variableshe , , in Montague glanlliiar . Montaguegl + anlmar hits the general requirement that only closed lambda-tetms  ( lanibda terms containing only bound variables ) are composed together . This requirement , however , is dif-ficult to reconcile with the flexibility needed for handling quantilier scope ambiguities  . Syntactic variables are zt device which pertnit to "' quantify Jim '> " clauses at an arbitrary time  , hypassing the normal functional compc~sition of lambda-terms  , which requires a strict management of incorporation order  . In our scheme . 
by contrast , this secondary mechanism of Montagueo \] ammar is graduated to a central position  . Composition is always done between two lambda -terms one of which at least contains a free variable which gets bound at the time of incorporation  . 
TYPESENSITIVI~COMPOSITIONR . UI , ESIf we apply the vat+table-binding rules to the snbtree PH =  ( ( peter , -hl) , hate(hi , h2)) of Fig .  8 , we lind that wemt is l compose the semantic transhttion speter and % h  1  . hate(hI , h2) in " con+lplement "(+) mode . The litstftmction is of type e , while the second function is oitypee~t ( lorhate ( hi , h2) is of type t , and hl of type e ) . 
ltow do we compose two such functions ? A first so lution  , in the spirit of Lambek calculus ( Morrill , 1994) or of linear logic ( Dah'ympletal . . 1995) , would tie to define a general computational mechanism which would be able  , through a systematic discipline of type-changing operations  , to " adapt " atttomatically to the types of the functions undergoing composition  . 
Such mechanisms are powerful , but they tend to be algorithmically complex , to be non-lncal , and also to give rise to spurious ant biguities ( uperficial variations in the proof process which do not correspond to differ-ent semantic readinos  ) t "" Here , we will prefer to use a less general tnecha + nism  , but one which has two advantages . First , it is local , simple , and efficient . Second , it is flexible at td cantie extended to handle the semantics of sentences extracted fiom a real corpus of texts  , which it might heperilous to constrain too strongly fi'om the starc The mechanism is the following  . We establish a list of acceptable " type -sensitive composition rules "  , which tell us how to compose two flmctions according to their types  . Sucha ( provisory ) list is given beow : e ( el ) compos?L ? on ( + , L : T >$ , R : T , L(R ) : S ) ( C2) composiLion(+ , L : e , R : e > L , R(L ): t ) ( C3) composition ( de L , L : T -+> S , R :% B(R ) :$) ( C4) com Dosig ? on ( , L : T > S , R : T , LIR ): S ) ( C5) composit ? on ( , L : e > t , R : e > t , kx . R ( x ) AL ( ? ) : e -> t : ) The entries in this list have the following for nmt  . 
The lfl stargtuncnt indicate stile type of composition  ( ++' fl ) r complement in corporation . " -" for modilier in-corl ) or at h'm . "++ let " for deter+miner incorporation ) : the second argument is of the IklrlnLelt : l + eftTypc  , where Left is the left translation entering the composition  , and Left Typc is its type : similarly , the second argument Right : RightType corresponds to the right subtree ent cl in ~ r ~  . the composition : linallv + the third at ELl- , ment ~ ives the resuhl , ? , esuh:l , P , esult Type of the composition , where the notation A ( B ) has been used to indicates landard functional application of function A on arguntent B  . Uppercase letters indicate unifiable variahles . 
It may be remarked thai if , in these rules , we neglect the functions themselves (1+ eft , Right , Resnlt ) and con . 
centrate on their types ( l+eflType , RightType , Result + l'ype) , then the rules can be seen as it nl ) os in , ,+ constraints on what can count : is validly typed trees : these constrahlts can flow from nlother to daugthers as  ,  . veil as in the opposite direction . Thus . through these rules . 
knowing thai the headline functions projecting l\ ] tln lit verbal head must he of type t impose some constraints on wlmt are the possible types for the det  ) endents : this can be useftt l in partict , lar for constraining the types nf semantically ambiguot  , slexical elements . 
If we now go back to our example , we have to con > pose in complement mode ( + ) the function peter , ol type e . with the ftm ction th I . hate(hI . h2) . of type e--t . 
Consnlting the list of composition rules , we see that the only applicable rnleis ( C2) . and that the result is Ahl . hate(hl , h2) ( peter ) = hate(peter . h2), of type t . 
Now that we have the semamic translation hate ( peter , h2) for the subtree P it , we can compute the translation for the suhtree ( ( PH , -h2) . woman ) . By the variable-binding rnle for modiliers , we need lirst to form the abstraction X h2 . hate(peter . lt2) . of type e~t . 
and compose it in '-' mode with wo nmn , of type e--t . 
Consnlting the list of composition rules , we find that the only applicable rule is ( C5) . and that the result of this application is Ah2 . woman(h =) A hate(l~eter , h =) . : eIt is a matter for furthere search to propose principles lk  ) l " ploducing such Ill\]ON . Sotll Ct ) t " them can be seen as special cases of general typeraising principles  , others ( such as C5 ) are necessary it one accepts that the type of intersectiv cadjectives and restrictive relative clauses has to bee-t  . 
: ~ Thc rule ( C5 ) differs from the previous rules in ll~e list in that it introduces the logical connective A which does lint originate in functional material already present in either of the arguments  . A possible justilication for the rule . however , ~ . tl //'/ ('2 ~ ,  \  , of cvelv fAh2 ~ omolib2 , \ halc(l)eh'th2AI2til , cIII2)) . I / .  / \  .  / / (:,/~ . 
job . : nl/~everv(Mt2 . woman(h2)Ahal?ll~e&'rh2b\12 . hketll . f2) tI ?/
IIOI(Izl):I/+:2/x ,, //"\\/<"), l!cle~I . \ h2 woma , fh2)/qtuteqJelel:h2) . l ') . " le-Ht . /7 ~;\\\\ del//'/~\/\/il , elll ll2) t //"--//~\ , \I 12 . woma,(It2)/\ hate@)et et : h2) . e . It , s,~'t-~:l#-\[)--(?' . I ) -- I\//~hatcq:ete ~: h2) t\\\/~ , \ M'Olll(Itl . t'I//R\/~'lt't cftdle(hl . /12 Jll:igur ?10: B form interpretation , l " or " cvcry ' , we make use of the gcner ; tlized quantilier notation qmml(n' . stricliou . SCO l ) e) . 
Fhe process of semantic translalion t in > coeds in this way bottom Ul-~on the B form  . The endrest this ; shown in Fig .  10 . 

Thanks to Alainl , ecomt c and Frdd drique Segond fOl " COITIIllOIIIS ~111  ( 1 discussions , 

Fliyan Alshawi . editor.
The M1T Press.
199 2.77 1e('o/'ulxmq ', agul : ', qin?.
J . Barwise and R . (7 oopcr .  1981 . (; cium dizc dquantiiicl S and naturalanguage . Lingtdstic , samll % ilo , wy)hy . .l . 
Mary I ) a hymple . Johnl . amping , l:omamlo (' . N , Percira . 
and Viiay Saraswat .  1995 . A deductive ; . lccount of quatnili-cation in IA : (; . In Makoto Kanazawa , (? hristopher J . l > i ih 3n , and llemietted cSwart , editors , OttaHti/ier , v . lledtu ' tion , aud (" o/dext . Cemcr ( or the Study of I , anguagc' , llldhHor\]mttitm . 
Staif lord . Call for rda.
Marc I ) yl/leln ~ an .  1992 . Transfiw matious degrammair csIogiqucs et rdv crsibilit d on Traduction Auto in alique  . ThC's ? is that it allows conferring 11!o " h\]atural " type e . t to an ( in-tcrsective ) adj c ~ c tivc such as " b htck " , or for a relative mod-ilid such as "' hated by peter "  , and also that there clots not seem to exist any goodic ~ ts Oll why type compositions ht  ) tdd bcr cstricledIo "' fun ?/ iorutllynml ching " types : rely  . Scmantic typt : coercions ab , ,mnd in llatttral allgttagc , as illtile case of " glass elephant " , short w in " , etc . , and these require con > plcx ColllIosilioll Ierations  O11 tile elements colll ' , illcd . 
d ' lkat . \[ Jniversit d . Io sqf lll:ouricr((h-cn oblcIt . ( hcnoble . 
\]: I'~II)CC .
I . , T , 1: . ( hm\]tLI . \[99 I . I , o , qic , l , anq , tta , '4c , and Memtin . q , . ~) ltune 2: hatct >; ionalI , ogic and I . o ~ i cal Graminar . The \[ hivers if yol Chicago Press . (? hicago . 
Xia , mcmgl Iuangall d Attainl : icdler .  1995 . ( k : llcralillgmul . 
tilingual proofs . In Richar, . I Kittrcdgc . editor . I , ICA/WrJrk . .
LS'/Uy ~( mMulti/in , '4 ual 7 Ev / ( ; enuratio , , pages 5 , 1 63 , August . 
Pierre Isabell c . Marcl ) ymetman , all dl?11 iott Mackh ) vilch . 
1988 . ( ? Rlq ' TH) . : a translation system for agricu hural market reports  . In lhz ~ ceeding sq/file /2th \[ llh'rllcttioIIcll ( ' oll-fi , renc ~ , on (' on qmtatin mdl Jng , istic , ~ , pages 261266 , Iu-dapes l , August . 
pierre\[sabelle .  1995 . Unmru/eh " linA , nistiq . ucal c . la /) le pot trlat rad . ctirm automatiq ttetfidirectiomlelle , F'h . D . the-s is . /lniv crsit de Momrdal . 
Johnl , evinc .  1990 . Praginaal " lcxiblc bidircdionaldia--logu ? system  . It\]t ' roceeding , s , EiA , hl National (' on fi , renc ' ernlArt ~/ k'ial Intelligence . pages 96469 . 
Igor A . Mel'cuk .  1987 . l ) epem/encvSw~ta . v : 77 t , : , : , , rv and Practice . State University of New York Press . 
Igor Mel'(;uk .  1981 . M can inp text n l , , ) d cl s . ./our/la/Q/AIt-lhrol)olos,3 .  10:27 62 . 
Glyn V . Morrill .  1994 .  '/~ , /) eLoA , ica/Grammar : (' at < q , oria / Logic q/Si ~ , s . Kluwer Academic Pulflishers . Dordrecht . 
I lolhmd.
Aart/cRanta .  1995 . \] ivl ) e Theoretical C ; rammar . Oxford
University Press.

