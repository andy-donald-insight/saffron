ANews Analysis System
Robert J . KU HNS
Artificial Intelligence Center
Arthur D . Little , Inc.
Cambridge , MA 02140 USA

This paper describes a prototype news analysis system Which classifies and indexes news stories in realtime  . The system extracts stories from a newswire , parses the sentences of the story , and then maps the syntactic structures into a concept base  . This process results in an index containing both ger ~ eral categories and specific details  . 
Central to this system is a Government-Binding parser which processes each sentence of a news item  . The system is completely modular and can be interfaced with different news feeds or concept bases  . 
1, 0 Introduction
This paper reports on a prototype news analysis system  ( NAS ) which classifies and indexes news stories in real time  . That is , the system receiving reports from a newswire is capable of classifying the reports and constructing an index of them  . Once a news item is classified , it can then be routed to users for whom the story is pertinent  . This system , which runs as an independent background process , is automatic and greatly reduces the amount of irrelevant information users must cope with  . 
From a theoretical view , one significant aspect of the system is that its parser is a deterministic princlple-based Government-Binding  ( GB ) system . Basing NAS on such a processor demonstrates capabilities of a syntax-oriented natural % anguage parser and how linguistic and world knowledge  ( primarily financial ) can be interfaced to provide a useful application  . While a pre-prototype of NAS was written in Zeta Lispon Symbolics and later ported to the TI Explorer and Explorer II  , the current version is implemented in
Symbolics Cool , on Lisp.
~ round
Much of the text processing work has focused on methods for obtaining information or retrieving texts from large databases  . Approaches are wide and inc\]ude keywording , statistical analysis , pattern matching , and a method using lexical , syntactic , and semantic filters . However , there are other applications for which these techniques seem inadequate  .   ( /Hayes et al 1988/ does describe a strictly pattern matching approach to news categorization  . ) For instance , consider the news and financial industries where those who gather and report news or trade stocks and bonds must read  , analyze , and react to current electronic information from many different sources almost instantly  . This need to process information within seconds , coupled with the fact that there is already ~ t overwhelming amount of information that individuals must sort through in order to find relevant news  , clearly shows the need for rapid and accurate indexing and routing systems  . 
It was in this context that NAS was developed.
The goal was to build a system with the capability of processing news stories received from active newswires  , i . e . , to be able to categorize each story against a set of general topics and more detailed subtopics in a matter of seconds  . These stories and their associated indexes can then be routed to those interested individuals  , thereby helping to reduce the load of irrelevant information that they must see in order to find the items which are pertinent to them  . 
Having identified this need , a pre-prototype was built around an existing parser based closely on the work of Marcus / Marcus  1980/  . Stories in the pro-prototype were manually entered and were chosen so that the concepts do not directly appear in the story  . The system was not using keywords or phrases and was characterizing stories at a certain level of abstraction  . While there were only about 12 different concepts from which this system could process  , it was able to classify a story as a merger /acquisition  , for example , and provide the companies involved , including the buyer and the acquired company , and tell whether the merger was successful or not . 
The present version incorporates a more powerful parser than the one in the previous version  , and it can identify over 200 concepts ranging from specific ( a name of a company or currency ) to abstract ( marketing reports vs . 
analysis for some industry ) . Since NAS processes unrestricted sets of stories , concepts can be either explicit ( specific ones ) or in , licit ( abstract ones ) and NAS will select those which are appropriate for each story  . 
The remaining sections will discuss the major components of NAS  , the way it handles errors , and future directions . Several example stories and their indexes are also provided  . 
3,0 The Architecture of NAS
NAS consists of four major subsystems , viz . , a stream filter , a lexical scanner , a parser , and a semantic processor or filter working sequentially as listed  . The stream filter is the component which scans the news stream received via a satellite dish and selects only the textual news reports  . Once a story is identified , it enters a lexieal scanner resulting in sequences of words that are distinguished as sentences of the incoming report  . These sentences are passed to the parser which constructs syntactic structures which are then used by the semantic processor in mapping these structures onto representations of the concepts  . The story and index can then he directed to interested users and/or entered into a database for future consultations  . 
The underlying design consideration of this architecture was to modular lzestream  , linguistic , and application-specific semantic processing . In this way , new interfaces to different newswlres , enhancements to the parser , or changes of application or a different concept base can be completed without impacting the other components  , thereby enabling easy modification to NAS . 
3513, 1~h ~ Stream Filter
NAS is currently interfaeed with a news feed which transmits news related to financial and commodity markets  . Since the textual reports are interspersed with various quotations which are not input to NAS  , the stream filter screens the nontextual items and directs only the stories containing text to NAS  . When a quote is prefaced with several lines of text  , the stream filter will send the item for proees slng of the text while the numerical quotes are ignored  . 
The stream filter can be deactivated and stories that have been stored on text files are then used as the corpus  . The effect of changes to the system can now be traced when using static input  . 
3, 2 The Lexical sca~ne ~
The lexical scanner receives the news reports from the stream filter and provides the parser with processlble input  . It decomposes the incoming stream into words , numbers , distinguished characters , e . g . , $ ( dollar sign ) and % ( percent sign ) , punctuation , and sentences , and it also equates abbreviations with its unabbreviated form  . 
The scanner has access to the lexicon and when it recognizes a word  , it associates all the lexlcal information with that word  . 
As the scanner is analyzing the stream of characters  , it is also determining the presence of sentences , i . e . , sentence delimiters . Sentence sending in question or exclamation marks are easily detectable  . Although news services differ , algorithms which rely on the formatting scheme of the news source have been developed which find declarative sentences even in the cases where they contain per lod-final abbreviations  . The beginning and end of a news story are characterized by distinguishing features  , so story identification is trivial . 
3, $ The Parser
Central to NAS is the parser which provides syntactic structures that are eventually mapped onto concepts resulting in an index for a story  . 
The parser is a prlnclple-based GB parser and is a substantially revised " version of/Kuhns  1986/  . 
( See/Abney 1986/ , /Berwlck 1987/ , /Kashket1987/ , /Thiersch 1987/ , and / We hrll 1987/ for descriptions of prlnclple-based parsers . ) The parsing strategy is deterministic in that no temporary Structures are built or information deleted during the course of a parse  ( /Berwlek 1987/ and/Marcus 1980/ )  . It sh6uld be noted that in connection with this type of application  , speed is crucial and although a deterministic parser is strict in that it cannot backtrack or produce alternate parses in ambiguous sentences  , its speed of approximately 100 words/second in linear time is essential . 
The parser has two main subsystems , vlz . , the set of inthractlng GB-modules and the lexicon  . 
These modules include principles and constraints from Case and bounding theories and  , especially , X bar , thematic or 0 , trace , binding , and control theories . These latter subsystems have a particularly prominent role for the parser  . 
Predl cate-argument relations or 8-role assignments to arguments of predicates are determined by  0-theory   . In the ease where movement has occurred , trace theory will relate an . argument which now must reside in a position which cannot receive a  0-role with its empty category or trace in a 8-marked position from which the constituent has moved . 

This enables the 0-role of the argument to be determined . Possible eoreferent lal relations for pronomlnals and anaphors are identified with principles of binding and control theory  . 
Moreover , the Extended Projection Principle , 8-Criterlon , and Case filter are observed by the parser .   ( For a full discussion of these modules and principles see/Chomsky  1981/  . ) The primary output of the parser is a set of licensing relations  . "Licensing " is a cover term ~ for any of a number of possible relatlons b@t ween_ projections  . Nonmaximal projections are licensed by maximal projections via Xbar theory and these maximal projections are licensed by an argument  . or a trace of an argument , a predicate , or an operator . Specifically , a predicate licenses its internal arguments or complements and its external argument or its subject  .   ( Again for a more detailed discussion of these aspects of GB theory see/Chomsky  1986/  . ) In that the goal of the parser is to license projections of each element of a sentence  , it can perform two basic operations . It can construct a projection of a lexical item indirect use of Xbar theory or it can establish or assert alicensing relation between two maximal projections with respect to other constraints of GB Theory  . The parser proceeds by first building a maximal projection and then attempts to license it to another maximal projection or vice versa  , i . e . , another projection to it . 
Upon encountering a lexical item , the parser creates a maximal projection consisting of a set of features  . Each node receives a type in terms of X bar primitives  ( ? N , +_V ) , an index , and its lexleal item from which it has projected . 
Relevant GB systems are invoked during the parse to determine binding relations and  8-role assignments . 
The proper index to encode binding or e o referen ~ e will be incorporated in the projection and co -lndexed projections share all of their features  . 
However , it is not always possible to assign an index or 0-role at the inception of a projection because of inadequate information  . The parser will not commit itself and will only include the syntactie structure that it can derive at that stage of the parse  . When the relevant information is available , the parser will incorporate it in the incomplete node which preserves the monotonicity of parsing information  . This process is constrained to the current cyclic node which is the left bounded context of the parser  .   ( /Knhnsin preparation/will discuss the specifics of this parser  . ) The parser produces a llst of lleenslng relations for each sentence of a news story  . In turn it outputs an ordered llst of the relations corresponding to the sentences of a news report  . 
This set is then passed to the semantic processor.
The other component of the linguistic processor of NAS is the lexicon whi__ceh contains words and distinguished strings  , together with their syntactic and subcategorlzatlon features including Xbar primitives  ( ?~ , iV ) , number , name or referential expressions , complement types , control features ( for interpreting empty subjects ( PRO ) of infinitival complements )  , and @- grids or 8-role assignments for predicates . An ambiguous lexleal entry has features for all of its potential types associated wlth that item and lexlcal ambiguity resolution procedures choose the appropriate features during the parse  ( /Milne 1983/and/Milne 1986/ )   . 
Morphology is minlmal ~ reflecting : only r ~ at lon sbet  , @on roots and th~i ~ . ~ ri ~ a ~ onal forms and associations between words and affixes  . 
Lexical redundancy rules for specifying correspol ~dences between sets of features have been implemented  . Since news reports frequently have abbreviations , lexlcal entries which have an abbreviated form will be marked as such  , and when the abbreviation appears in a story , the lexical scanner ) : etrieves the lexlcal information of the unabbreviated form  . Relationships between lexical items and their extragrammatical features will be discussed below  ( Section 3 . 4) . 
The lexicon consists of less than 15 , 0 00 members and in building the lexicon the emphasis has been on the inclusion of verbs  , adjectives , and prepositions . Names , espeelally of individuals , corporations , and geographical locations , not present In the lexicon are found in news reports regularly  . While many familiar names are in the lexicon , unfamiliar nouns are handled by the error handling routines  ( Section 5 . 0) . 
While the lexicon is updated as needed , the way it was originally constructed was to collect distinct " words " from stories received from a satellite feed  . Numbers were disregarded but names and abbreviations were included  . During several non-continuous weeks of scanning the stream for new words  , the task of assigning syntactic features to each valid item began  . While this is a laborious and time . consuming process , it was aided by a menu-drlw ~ n facility for feature assignment where typing wa ! ~ minimized and much time saved  . 
Also ~ during the time that previously unknown words were being " collected  , " a counter was indicatin ~ the number of current words in increments of  I00  . When the llst was slightly over 7 , 000 , then u , ~ er of new words being added to it slowed . Fur ~ , er more , a point of convergence seemed to occur under 9 , 500 items . At this stage of lexicon development , a comparison of the existing words against a sample of over  50 words ( mainly verbs and adjectives ) taken from another news service suggested that the present llst was sufficient in that it contained every word word taken from the news stories  . This is significant because a system which is to parse sentences within a story must have the capability of recognizing each word  . 
Since it appears that the vocabulary of reports is bounded  ( ~ ith the exception of names )  , rapid linguistic processing of news is realizable with respect to \]  . exical recognition . 
~_ ~ ~/ , . T be_j_e !, m_D_~c processor
The semantic processor is an automatic pattern marcher which incorporates world knowledge that is used to determine the " meaning " of its linguistic input with respect to a set of topics and designators in its concept base  . The term concept refers to a general notion such as merger/acquisition  , terrorism , currency report , or strikes and lock outs . Designators are subtopics which provide detail to an index  . A story categorized as a merger/acquls lt loncould be further characterized by designators indicating specific tentacles involved or by the industries impacted  . The existing system has the capability of processing over  200 concepts and designators . 
~ e output of this processor ( and NAS ) is a classification or index of a story consisting of one or mor ~  ) general concepts and their designators . 
% fno general concept is found , the system may still assign designators . In other words , a story may be ~ , out Air France while the general classification is unknown  . 
Structurally , the processor can be viewed as having a concept base and a #- relation interpreter which takes as input the predicate-argument structures denoted by #- relations and attempts to find matches with elements in the concept base  . 
The concept base itself possesses an internal structure consisting of several levels of abstraction  . The most concrete level consists of names which enter into an index whenever present in a story  . This level primarily contains names of corporations  , industries , corporate executives , government officials , and geographical locations . 
In order to keep linguistic and the application dependent concepts independent  , pointers between the lowest level of the concept base and the lexicon are used  . A change to the concept base or substitution of a new one will not affect the linguistic component  . 
Representations at the next level reflect con ~ onality which the elements at the first level share and together they provlde desi~ators for a story  . The objects at this more abstract level are called entity types and they further characterize the members of the first level  . Two common entity types are industry type and company  . The semantic processor can assign an industry designator to a story if either the industry is explicitly mentioned in the story or if companies or individuals mentioned in the story are related to a particular industry  . So a news item about Swiss Air will have both the name Swiss Air and its associated industry  , viz . , Airline Industry , assigned to its index . 
The last and most abstract level is that of a general concept such as merger/acquisition  , currency report , strikes and lock outs , and terrorism . These are represented by frames where there is one action slot and at least one entity type slot  ( determined from the previous level )  . 
Moreover , one concept may have several different representations  .   1~e action slot is a list of one or more synonomous words or phrases that denote an action or the " doing " component of a concept  . The members of the action slot are not semantic primitives but are actual words  . Furthermore , they are word stems and not all of their morphological variants  . The entity type slots contain types of entities which are found in the previously discussed level of the concept base  . For example , a partial representation for merger/acquisition is:  ( i ) Merger/Acquisition
Action : buy , take over
Agent : company
Object : company where b ~ or take over is the action and the entity type slots are labeled agent and object and their members must be of the type company  . Details of this formalism are discussed below in connection with the #- relation interpreter  . 
The other module of the semantic processor is a #- relation interpreter which maps #- relations of each sentence of a news story into the concept base  , or , in other words , onto specific concepts and designators . This mapping is executed as follows . First , recall that the parser returns a set of licens ' ing relations including #? relations for each story  . Each member of this set is all st of the relations for a sentence of the story  . In examining the #- relations for a sentence , the interpreter attempts to establish general concepts by pairing the predicate and arbalests of a a concept  , respectively . For example , consider a merger/acquisition frame ( i ) and ag-relation which has boh ~ h_~t as a predicate with its agent being Acme 
Co_~. and its object as Software Inc.
The 0-relatlon interpreter first determines that is related to ~ and that ~ is a member of the action slot  . Since this comparison is successful , the interpreter then derives the entity types of Acme ~ and Software Inc from the abbreviations ~ and ~ Both have an entity type of company  , and the interpreter can match the argument structure of the #- relation with the entity type slots of  ( I )  , resulting in a merger/acquisition classification being assigned to the story  . 
In attempting to determine a general categorization  , the interpreter is encountering specific company names and  , perhaps , their associated industry names . If these are contained in the concept base , they are also entered into the index . In this hypothetical example , if Software Inc . was listed in the concept base and related to the computer industry  , then independent of the general classification , the final index wou\]d contain both the name of the company and its industry  . In this way , a user can specify a particular company and receive all stories mentioning it  , although there may not be any further index . 
Since the mapping of the interpreter between the # -relations of the parser and the concepts in the concept base is structure preserving  , the items within indexes can also exhibit certain relationships  . Arg ~ llents which are either an agent or object in a @- relation will correspond to entity slots marked agent and object in a concept  , respectively . Thus , the index will reflect the roles in which the participants are engaged  , e . g . , in a merger/acqulsitlon the buyer and the acquired could be distinguished  . 
The next section provides several examples.
4.0 Examp__~
This section illustrates the type of indexes which NAS produces  . The stories are from Reuters and the results are actual outputs from NAS  . 

Montreal , Nov 3 Air Canada's 8 , 5 00 ground workers plan rotating strikes in the next few days following a collapse in contract talks with the government-owned airline earlier today  , a union spokesman said . 
Chief union negotiator R on F ontaine said the workers will give  24 hours notice of a walk out but only two hours notice of which airports or maintenance centres they will strike  . 
The airline has warned that it will lock out any workers participating in rotating strikes until a new contract agreement is reached  . The union last went on strike in 1978 , shutting down the airline for two weeks . 

Strikes and Lockouts
Industry-Airlines
The system has the concepts of strikes and lock outs and airlines industry in its concept base  . 
The designator Airlines Industry is arrived at by a relation between Air Canada and its industry  . The more general notion of Strikes and Lockouts appears as a frame in the concept base of the form :  ( 2 ) Strikes and Lockouts
Action : plan , participate
Agent : employee
Object : strike where the action slot consists of Rlan and i ~ and the agent slot is of type employee of which Kround workers is so marked  . The word strike is simply marked as strike . The parser return sa #- relation for the first sentence with as a predicate  , gr Qund workers as the agent , and strikes as the object . The g-interpreter operates as described in the previous section and the Strikes and Lockouts frame is satisfied  . Other typical results of processing by NAS are stories  2 and 3  . Only the first sentence of each are provided since the remaining sentences of these news reports did not add any new information to the index  . 

Valley Forge , Pa , November 3 oAlco Standard Corp . said it sold two of its gift and glassware companies for an und is closed amount of cash to management groups in leveraged huyouts  . 


Industry-Giftware
Trade-Glass

Kuwait , November 3 -A booby-trapped carbom bexploded in Kuwait City on Tuesday morning  , the official Kuwait news agency Knna report . 


Location-Kuwait
Instrument-Bombings
Since the details of indexing are identical to those above  , they will be omitted here . However , it is noteworthy to indieat @ that the word divestment does not appear anywhere in Story  2  . 
( Clearly , the verb sold alone could not trigger a divestment  . ) Similarly , in Story3 terrorism is never used , yet NAS correctly indexes the story and also identifies the location and the weapon or instrument used  . 
354 ,9 . 1_, ~~ + ~ ~ U < ~, ~ t ( : ! in ~ . ~') ? h ~ . , : e ~! . re , qevera ! ways in which NAS ca ~ fail top ~_~: i , ~? mana ~ ta\] . ysi . ' . ~ . % f the seamier i . ?: : ~ dsano . ~ tkuown word , it will tl'Igger procedures in an attempt to ~ nfer its category  . For I . astanee ~ it ~ . ~i \]% lookahead for abbreviations such as i_~ ! nq  , ~ ozp . , o:\[co . and if any of the striugs are preseut , the sca~m . erwilla ~: sign name features with the hmned ~ ately preceding unidentified words  , (% deal . ly , in a fully deployed applie at Jou , NAS would h: . veinter faces to specialized databa ~: es of names , ~; ay , of compsnies . ) Also , the lexleal ~ . ; canner , infail : Lug to find a word In the lexicon ~ l!~d ~- ~ t  . \] ~ a~su\[tce of t : ertain triggeft\](e . g . , i loe ), ~ . y ~\[\] . \]\] o\[el the unknown word a noun and pass the word to the parser in the sentence  . This method for hand . ilng unknown words works well only if verbs , z ~ dj natives , and prepositions used in news reports are near lyex haustively contained in the lexicen ~ and NAS has been extremely successful by using E his technique  . 
Another potent : ial problem for NAS is an ~ l leomple i : e or incorrect parse  . Both eases often indicat : e insufficient info 13nat ion of a lexica \] item . ~ owever , during execution of NAS , if the parser c~n not final alicensing relat ionship for a projeatilm of an item in its input ~  , ; tream , it will \[ move t : o the next word . This projection will remaint mlieen . , : edo ~ . uninterpreted . \]:f the word has a semantic mark that may tr iggera designator  , the semantic processor will use it for construct ing an index  ,  \] . ' or example , Yen is a low-level designator word and it is also semantically marked as currency  . . If the parser cannot l icense a project ion c ~ entaining this word to a verb or a preposition o ~'  , perhaps , misassign ~; a relation , the index wJT . \], still contain ~9\[~ and currency report . 
What may be missing is a general , cat ~ . gorization , In add . it icn to ext : end\]ng and enhancing the eomponenL ~ oithese ~ llalltic processor and parser  , ~ hellea Yt ~ erm nilerrs will focus on establ ishing quantitative benchma~lks for both speed and accuracy t ~ sing stories from an active newswire  . While a pre-protaty peo_~NAS with a different and \] ess-  . qoph\[stlcated scanner and less-developed parse i ? a ~ d semantic processor relied on storiesf\[:omflol  , py disks or manual entry , the current versiol l\[s linked tea live feed . A rough performance measure of the pre ~ prototype on a very  . ~al\[l sample of less than 50 sterles showed that it < , ~ a seompletel 2 correct for over 70% of the stories . 
The pres~nt semantic processor operates on a much i_a ~ get conceptual base and while it is premattzz '  , ~ to make assessments , the system has indexed (~ leday of news stor . le . ~ front Reuters and the results were independent ly examined by a group of p~efe~slonal indexers  . The indexers who had manually l~dexed the stories snpplied over  400 topics for inclusion in the concept base of NAS , some of which were OOt relewmt to any of the ~'4to~':i  . e : ~ . The : rewasno communication with these indexers before or during tile process and while there  , : ; ei:e " no formal criteria previously specified  , the inde ~; : e~s found the results very promising . 
Gui'y . 'ent\] . y , a precise evaluation I aetrie for NAS Is bc~ing formulated with these indexers  . 
Long-term work will include ~ n ha~l ceme . nt to the semantic proeessor and a refinement of its class lfic ~ tion scheme  . Inferencing across classified stories is also an option as we\]\]  . as the eapabllity of allowing the user to query those processed stori~s  ( using the same p ~ rs ; or ) ? Automatin stumnarization of stories is also a fut : ur ~ possibility  . 
J \], 0 Acknowledgf ~\[ mp~t~s
Steve Gushing made va \] uabl . ~ ~; omment so ~ a ~ earlier draft of this p ~ per . Oa ~ Su !\] . ivau was ~ co-developer and implementer of th ? ~ pre-prototype  . 
On the present version of NAS , Steve Ganderha ; ; made signif icant contr ibut ions to its des:\ [ gll and implementation  . 
_SLQ .. I . (9~ f ! ~/ < enc_e_s
Abney , S .   ,  (1986)  , " Lieen ~ qing and Pad:sing , " ( personal conmlunication ) . 
Berwick , R . C . , (1987), Princ:Ipilc ~: BA ~ . q-d . ~ f . _q . ~ . s  ~ J3 g , Technical Report 972 , MITArt~fle~alIntei\]igenee
Laboratory , Cambridge , MA
Chomsky , N .  , (\] . 981), I , ectur (! . k_ee(~o ~ qrDlit ! ~! ; tc ~ Lld Binding , For is Publications , Dordrecht , Holland . 
Chomsky , N . , (1986), Knowledyg ~; qf_~ . ~\[~! ~ u ~! ge,
Praager , New York , N.Y.
Hayes , P . J . , L . E . Knecht , and M . J . Cel\]io ,  (1988) , " A News Story Categorization System , " PcL , c . ~ dj , ng ~% of the Second Conference on A\[?!2\] , ! eLl . N @_! Lur . @ j_L ~ ! ngua_~q_Processing , Aust:ie , Texas . 
Kashket , M , B ,,(\] . 987)  , A Gow ~ linme / ~ Lt ~ t\[~ , Dil ~ Dg__ji ~\ [ ~@ Technical Report : q 93 , bllTArtifie . Jal Intelligence
I , aboratory , Cambridge , MA.
Kuhns , R . J . , (1986) , " A Proiog\]hn plementatiou of Government- Binding Theory  , " Proceedings; . . . . . c ! . f
C_OLING'86, Bonn , West Germany.
Kuhns , R . J . , ( in preparation ), " A Tree-leas(;~
Parser , "( tentative title).
Marcus , M . P . , (1980), A Theory . ~_!~f_Sy_!~taq_t~j ~ Recognition for Natural Langu_age  , ' File NIT Fress , 
Cambridge , MA.
Milne , R . , (1983), Resolvi ! iogLexicalAmb ~= g~iLyjn_ . a Determinist Ja Parser D . Phi \] . Dissertation,
University of Edinburgh,
Milne , R . , (1986) , " Resolving Lexieal Ambiguity in a Deterministic Parser  , " Copiputat ~ on a \] I , ingu~j~( . \[cs,
Vol , 12, No , i.
Thiersch , C . , and H . P . Ko \] . b ,  (1987)  , " Parsing with Principles & Parameters : Prolegomenat : oa Universal 
Parser , " ( personal communication).
Wehrli , E . , (1987), Par~s ~_~! ~__ . wi~t_~A__ . ~l! . .: . gr . p3,_k_f~X . 
( personal communication).

