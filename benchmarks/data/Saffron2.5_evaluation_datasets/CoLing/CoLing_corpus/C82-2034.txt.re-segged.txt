RULEBASEDINFLEXION ALANALYSIS
Zbigniew Jurkiewlcz
University of Warsaw , Institute of Informatics
Palackultury in aukl , 00-901 Warszawa , P . O . Box 1210, Pol and
This paper presents a system for representation and use of inflex lonal knowledge for Polish language  . By inflex lonal knowledge we mean information about rules of inflection/de-flection for regul ~ words together with a llst of exceptions  , Such knowledge can be successfully manipulated by a rule-based system  . The research is a part of big undertakin ~ , aimed at construction of a system able to converse in Polish with casual user  . 
The problem we are concerned with may be stated as follows  . For each word in input sentence the system should find its basic form and dictionary i ~ ormatlon connected with 

The simplest approach to this problem is to store all forms of words in the forms dictionary  , which associates them with their bsslc forms . This method is acceptable for small sets of words  . It places too bigstrain on system resources for bigger dictionaries  . T ~ e way to minimize resource usage is to exploit regularities in the inflection  . 
Each isn6uage possesses some regnllarltes in its ID flex-ion . The extent of these regularities is different in different languages  . Also the number of different inflectional forms may be different  , e . g . an average polish verb can have about 100 forms . This forced us to think seriously about using re -gularltles even in lexlcal components for small subsets of ~'-  146 -oflan ~ ageo We view the inflections lanalysis system as composed out of %~ oparts ~- an exception dictionary wi~h all forms taken as it- -amechanism  e~9~oiti ~ ~ e@~lax ~ ties forgetting neoess-ax-y efficiency inses~ch and ~ ving resources  . 
We based our mechanism on the analysis of endings . The ending is defined as a ps~t of word which is changed while reducing the word to its b~sic  ( d ~ Ictionax ~ ) form . Polish language is characterized by many rules of deflection  , which may be applicable to a given ending ? A single word may be interpreted in as many w~s as many endings we can disting-uish in it  , multiplied by a number of applicable rules for each ending  . Therefore such candidate ending must be confirm -ed by checking result in the diction ~ of basic forms after applying proposed deflection rule  . 
The described knowledge was written down in rule -based system " FORS "  . " PORS " is rather classical for wax ~- driven rule system with some degree of extensibility  . I% is written in programming language LISP and is composed out of three parts :- facts  , represented as list structures stored in a fully indexed data  base8 -rules of the form condition = ~ aotlon action . . . 
-control mechanism for choosing and applying rules  . 
Eaoh condition is a sequence of patterns of faots , which must be asserted in a database for rule to be applicab-le  . 
Patterns may contain typed variables . The type Of a variable is identified by one -letter long prefix  . Prefix must bean on ~ alphanumex ~ I cal character . Variable type may be defin-ed by providing matching functions for this type  . 

Inflexional knowledge is represented in " YORS " as follows  . 
Each dictionary entry is represented as fact of the following forms  ( ENTRY ( BASIC-PORU )   ( CATEGORY )   ( OTHERPARAME TERS ) ) The word cur rent ly processed i s saved asz ( ~ C~WD ( W0~ ) ) The exceptions are represented as rules ' of the for e  ( ~ ED~D ( WO~-FO ~ ) )  ( E~TR ? ( BA SlC-FO ~ )  . . . )

The " rules for deflection by endings replacement are stored as  ( ~ C~IVED * V Aa- ( ~DINGI ) )  ( E~TR~~Wa- ( E  ~ DI  ~ )   . . . )(~ S~R . . . ) The prefix ~ is used for variables typed " suffixed "? All variables in " FORS " getvaluss by mato hlng to fact elements ? For suffixed variable without value  , the value is assigned after cutting a g iven ending from item element  ( if possible , otherwise the matching fails ) ? While mato h?ng suffixed variab-le which already7 has some valuer Final value is obtained by concatenating ~ ivengufix to its There may exist msn ~ oompeti ~ E rules for recognized ending  . Also , for a given word a couple of allowed endings may beln dentified  ( e?g?one letter long , two letters long etc .  )  . The control component in " PORe- . allows to specify the sequencing between such completing rules  . In a current version , the set of rules for regular endings is div ided into ~ oups according to the ending in  ( RECEIVED , ? ?) pattern . We amocla ~ ea node with each such group . The nodes form a directed graph , called control graph . We associate a node with exception rules group too  . One node is selected as a staz ~__ ing node . The ares in this ~ aphspecify ( partial )  -  148 -order between node eo~hus defininge oquen@L ~ between groups of rules  . AI ? nodes must be aocese4blo from start in Knode ( 4  . 
other terms,@cat . elgraph must bead L reoted ao yol ? oo on no@t-The . system works in cycles . At each cycle It roads the nex ~ word from input sentence and t  r~e8 to find a rule appli~-able to the eword . Rules 8~re tr~eda@coz ~ LnK to the order defined by a cont rolgraph  , 8 tart in K from the et art ~ node . 
For each node , the rules ansoolated with it are@hsoked , until one is found with satisfied condi tions This rule is then run and the next cyc lebegins  . If no rule wanapp\]~Loable , system goes to one of successor nodes , guided by analysed word ~ head vantages of represent in K inflection e ? knowledge in such a form are mango The system is modular  , because each rule is independent from all others  . Therefore rules may be addedo ~ deleted at will  , allowing additional sources of knowledge to be tried  . 
The beha ~ our of the 8yatem Is easily observable by non-proKraumer ( in linguistic terms such as rules , end?n Kseto .   ) o The set of rules may be adjusted to a given application  , espeoielly for small systems with special ised diotionariese The independent control component allows to  exper2ment with different rule groupings in the search of minimization of resource usage  . The grouping ac@ord ~ to theoonoludad'syntact ic category may ellow to exploit syntact i c expectations  , prowlded from parser . As for . now , we succeeded in in corporat-in K only most popular deflection rules  ( about 600 of them ) e We are goi ~ to in o or porat ~ e some addition e l phonetic rules to take care ~ falter at ions  . This could hopefully dimin : l . sh the number of deflection r ~ les . 

