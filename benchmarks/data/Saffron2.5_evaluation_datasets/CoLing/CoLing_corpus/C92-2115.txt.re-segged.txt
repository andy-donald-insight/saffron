A Similarity-Driven Transfer System
Hideo W ~ t ~ n ~) c
IBM Research ~ Tokyo Research Laboratory
519 Sitnbancbo , Chiyoda-ku , Tokyo 102 Japan
e-mathwatanabe@trl.vnet.ibm.cmn

The transfer phase in machine translation ( MT ) systems has been considered to be more complicated titan analysis and generation ~ since it is inherently a conglomeration of individual exical rules  . Currently some attempts are being made to use case-based reasoning in machine translation  , that is , to make decisions on the basis of translation examples at appropriate pohtts in MT  . This paper proposes a new type of transfer system  , called a Similarity-driven Transfer ' System ( SimTi'ao )  , for use in such case-based MT ( CBMT ) . 
1 Introduction
The transfer process in macbine translatiou systems is  , in general , more complicated than the processes of analysis and generatim t  . Onereas mt for this is that it relies heavily on human heuristic knowledge or the linguistic intuition of the rule writers  . Unfortunately , linguistic intuition tends to be unable to control the process properly for a wide variety of inputs  , because of the huge amount of data and the huge number of situations that need to be considered  . However , rule writers must rely on their linguistic intuition to some extent  , because there is no linguistic theory on lexieal transfer  \[7\]  . Another eason \[81113 \] is that tile transfer task is inherently a conglomeration f individual ex-ical rules  . Therefore , the transfer process can be said to fall into a class of problem that cannot easily be controlled by the linguistic intuition of rule writers  . 
In accordance with these observations , various attempts have been made to overcome the problems of transfer  ; they include knowledge-based MT\[12\] , bilingual signs\[13\] , and Tags for MT\[1\] . One such approacbiscase-based or example-based MT  \[4\]   \[9\]   \[10\]   [11\]  . The essential idea behind all case-based MT ( CBMT ) methods is that tile system chooses the case ( or example ) most similar to tile given input from the case base  , and applies the knowledge attached to the chosen case to the input  .   1 Supposing that there is a corpus of parsed translation examples in which corresponding parts are linked to each other ~ we can regard those parsed  transla-1 This approach can be regarded as an application of case-baaedtea  . sorting\[3\]tontttural language translation . 
tion examples as translation rules . A promising ~ rp-proach is therefore to make a transfi~r process that  ( 1 ) chooses a set of translation examples , each source part of which is similar to a part of the input ~ attdall source parts of which overlap the whole input ~ and  ( 2 ) constructs an output by combining the target parts of those translation examples chosen  . However , this does \] to tmean that existing transfer knowledge should be abandoned  . Rather , such transfer knowledge should be used ms a fail -safe mechanism if there are no appropriate examples  . In the similarity-dr ~ ivent , unsfer system ( Simlmn ) we have developed , both translation examples and existing transfer knowledge are treated uniformly as trauslation pattern % and are called translation rules  . 
In Figure 1 , for example ,   ( a ) is tile parsed dependency structure of an inpnt Japanese sentence  , " karegakusuriwonumu . " Suppose that ( b ) is selected as the most similar translation rule for the part " k are ga  . . . nomu " frmn the translation rule base , and that ( c ) is selected as the most similar translation rule for the part " kusuri wo no mu ~" even though there are several translation candidates for the Japanese verb " no mu  . " This figure illustrates what we would like to do  ; that is , to construct ( d ) , the translated structure by combining the target structures of the selected translation rules  . 
To develop this kind of system , we must consider the following issues : ( a ) a metric for similarity ,   ( b ) a mecbanism for combining target parts of rules , and ( c ) correspondence bt ween the source part antithe target part of a rule  . 
To handle the last two issues , I developed a model called Rules Combination Transfer  ( RUT )  \[14\] . 
SimTran is RCT coupled with a similarity calculation method  . In tb is paper , I will introduce RCT and the similarity calculation method used in SimTran  . 
The next section defines the data structure for graphs  , aud the format of a translation rule . Section 3 presents a method for calculating the similarity between an input and the source part of a translation rule  . Section 4 describes the flow of the transfer process in RCT  . Section 5 gives examples of translation using SimTran , and Section 6 discusses related work . 
Some concluding remarks bring the paper to an end.
AcrEsDECOLING-92 , NAN2T ~ , 2328 AOI~T1992770 PROC . OFCOLING-92, NANTES , AUG . 23-2fl , 1992 . . . . . -" . . . . . .  . . . .  . . . . . . . .  . 
l : igure 1: Sample Japanest v 4 o . English tr ~ u , s\[ation2 Translation Rules A basic type , ffgra . phused in this paper is a labeled directed graph , or art Ida . 2At , ldgG consists of a set of nodes N , and a set of arcs A . Further , each node and art : has a label , ht particular , node labels are unique . Each node consists tff features , each of which is a pair of a feature name att da feature v ~ lue  . 
If an ldglta . ~ only one root node , then it is called ~ nr ldg , and if an Ida has no cyclic pr~th , then it is called an idag . s Therefore ~ an ridag denotes an Ida that h~-s only one root node and no cyclic path  . 
A translation rnle 4 r consists of the folk , wing three corrt po , leots : r = ( G ,   ,   ,   , M , G ~) where Gm is a matching r ~ r p h , G ~ is a construction graph , e . ndM is a set of mappings between Gm and A matching graph G '  , , , and a construction graph G~must be at lea . stanrl dag . 5 Further , nodes in ( ~ , , must be labeled uniqnely ; that is , each node in G , , , mnsthz ~ veonly one unique label , and the l ~ bel of the node n ~ in G ~ is determined to be the label of the ~ The term qabeled ' means that nodes and arcs are labeled  , and the term ~ directed ' means that each arc has a direction  . 
Further , an Idain this paper refers to a connected graph unless otherwise specified  . 
Z The term dag is often used in the NLP world , and usually denotes a rooted connected labeled ( as functional ) directed graph . But in this paper , dag denotes a direct , : dacy cllc graph that may have multiple toots , is not necessarily a connected graph , and does not necessarily it ave labels . 
4 In this paper , the term rule does not mean a procedure , but rather a pattern of translation knowledge . 
bSudl graphs are sufficient to express almost MI lingu ~ atlcstrsctures  . 
Figure 2: Samph . rule for translation between
Japanese ~ tnd English node nm in G , . such that n : . = M(nm ) . 
Mat ) ping between (: . , ~ and G ~ designate stile cor- . 
respondences be , wee . , ,\[ des in G , . and (; . . l')r instance , in Figure 2 , tim Japanese word " nagai " (" tong ") should c . r respond to both of the English words " have " and  ~\[  ( lll ~111 bl ! cal , seifam ) , her word g . ow ~ rn . ~the word " nagai " then its English , re , rela-tion should be connected to the word " h ~ Lve . " On the other hand , if the Japanese word " to , elan " ( " very " ) modifies " nagai " then its English translation " very " should be connected to " long  . " This shows tll at fi ) rnode in ~ source languag % two kinds of connection point  , for translations of both governing structures attd governed structures of the node  , are needed in its translated structure . This implies that there shouht be two kinds of correspondence btween G '  , , and (7~ , namely , ( I ) a mapping from a G ,   , node n ,   , to a G~noden c that is to be a node connected to translations ACq'ESDE  COLING-92  , NAN qT!S , 2328 AOUq "1992771 PP . OC . OFCOLING-92, NAt WrES , AUG .  2328 , 1992 of structures governing nm , and (2) a mapping from n ,   , to a G~node n ' ~ that is to be a node connected to translations of structures governed by n  , ~ . We call the former an upward mapping and the latter a downward mapping  , and denote these twn kinds of mapping as follows : where MT is upward mapping  , and M~is downward mapping . 
Not all kinds of mapping should be permitted as M \[ and M  1  . A translation rule r = ( Gm , M , Gc ) must satisfy the following conditions : ( 1 ) MT and MI are both injections , (2) there are no two distinct nodes xamly in G . ~ such that M(x ) = M(y ) , e and (3) M l(root(G , , , ))  .   .   .   . t(a ~) . 
Condition ( 1 ) ensures that there is only one c ( )n-nection point in G ~ for each translation of gow~rn ing structures and governed structures  , coudition ( 2 ) ensures that the label of a G'~node is determined uniquely  , and condition ( 3 ) ensures that the result of this transfer model becomes a rooted graph  ( see\[15\] for details )  . A rules at . is ying these conditions is said to be sound . 
3 Similarity Calculation
This section desribes how a similarity is calcuhm ~d  . 
3.1 Graph Distance
The shnilarity between a Gm and an input graph Gi , , is defined as the inverse of the graph distance 7 between then LFirst , the simple graph distance D ; between Gi , , and G ~ is given ; ks follows:
D ', ( G ~, a . .) = o=(n ~ . , R . ,) + E , ,, min(D'a(VS(Ri .   .   .   .   . ), GS(t~,, .   .   .   . ))) where R/ , and / ~ are roots of Gi ~ and Gm , respec-tlvely ~ D , , is a node distance , a = is an arc in G , n such that its source node is R . m , and GS ( n  ~ a ) denotes a subgraph that is related to a narca from n  . 
Briefly , a simple distance is the sum of the node distance between two roots and the sum of the minimal simple distances between G in subgraphs and Gm subgraphs that  , f are a charca outgoing from the GmmO t node , are related to the all arcs a from the root nodes . 
~ This means that either M ~ ( x ) or Ml ( x ) is equal to either
MT(Y ) or M . ~ ( y ) r Distltnces defined in this section are not actual distances in the mathematical sense  . 
However , the larger Gm is , the larger this simple distance becomes . Therefore ~ when normalized by the number of nodes in G  , , , , the graph distance Dg is given as follows:

Dg(Gin , am)--N where N is the number of nodes in G ~ . 
3.2 Node Distance
When considering the distance between two words ( nodes )  , we usually think of their semantic distance in a semantic hierarchy  . In general , no matter what semantic hierarchy we use , it is inevitable that there will be some sort of distortion  . Further ,   , as stated be > f i ) re , a node consists of several features and may not have a lexica\[form that is a pointer to a semantic hierarchy  . Therefore , a promising approach to calculating distances betwee nodes is to use both a semantic hierarchy and syntactic features ~ that is  , to use syntactic features to correct the distortion contained in the semantic hierarchy to some extent  . 
The node distance between a Ginnodeni and a G , , , node n m is detined ms follows:
Dn(hi , nm)D/+D , *6,
NS + a.
where DI is a feature node distance , D , is a semantic no ( h . " distance , NI is the number of features in nm for DI , and 6 , is the weight of a semantic distance . 
The semantic distance D , between a Gi , ~ word wi , ~ and a G , , word wm is given by the following equation . 
In Sim Tran , Bunrul Goi Hyou\[5\] code ( or bgh codes ) is used for calculating the smnant lc distance between 
Japanese words.
Do(wln , wm ) = 0Win ~ Wm0 . 5 wiT ~ or wm is unknown 1win and w , , , are unknown I~?h ( ~' ) -@h ( ~' ) l + ~ otherwise bghmax-F ~ where bgh ( w ) is the fraction part of the bgh code of w , bghmax is the mammal difference between two bgh code fraction parts  , and 6b is a penalty incurred if two words are not ident lcM  . 
The feature distance l ) f between a Gi ~ node hi , , and a Gm nmle nm is given ms follows : D:(n ~ . . . . . . . . ) = E :~ . , d:(n . , , f ) df(n in , fn:fv ) = 1fi~(fnin:fvi , ,) whose fni , ~ = f n , and fv is consistent with f V ln 0 otherwises Abgheode is a fraction of number . Its integer part roughly corresponds to a syntactic ~ tegory  , and therefore , only its fraction part is used . 
ACRESDE COLING-92 , NANTES , 2328 AOm "1992772 PROC . OFCOLING-92, NANTES , AUG .  2328, 1992  . //" Each matching pivot in ~ tsimibtri-cover rule set must have MI or M  1  , to ensure that tim G cs of the ic overrllle set pr  ( lduce at : ounected graph a ~ s a result . 
If there at rerules in the giveni-cover ruleset that do not s~tt ls fy this condition  , they are renloved from the set of ruh , camlidates ~ and the cover search method is executed until an icover rulesetth ~  . t satisfies this condit in n is found . Such as , i-cover rule set is called a proper rule set . 
Next , for each projection nf the giveni-cover , wenms t make ; t copy of its origin rule ~ m " rule instance , be > C ; -LU Seoneride IEay makelllort ? thgnoue project  ( t in un ( ~ in '
Figure 3: An isomorphic over
In the ~ bove equatiol btile consistency checking depends on a feature  . 
4 Rules Combination Transl ~ r
In this section , I presentile tlow of the transduction process by using RCT formalism  . 
4.1 Rule Selection
A transfer processrnust first find a set of rules whose Gins ' matching parts  ( called projections ) totally overlap all input structure , and which is the most similar to the intmt . We call a uuimi of projections a cover , and a cower identical to the input an iso-morph iccover  ( ori-cover )  . In or ( her words , wha ' ~ we want here is the i-coverth ; ~ t is the most similar to the input . Further , if a G .   , make ~ Lllrojection pjonaGi ~ , then tile G , a is called the origin graph of the pj . A pivot is a node of (; ~ , ~ that has more than one origingraph , attda matching pivot is the origin node of a pivot  . For instance , in Figure 3~A and D are pivots . 
There may be some methods for tinding such an i -cover rule set  . One method is to pick up a rule whose projection does not have any arcow ~ rlapped by cover by other selected rules until there ~ treno uncovered arc % if it is desirable that a rule set should lave few overlaps as possible  . Weh ; tve Klso developed auotlmr method using dynamic programmiug : which can choose the most similar rule set from cttndidate rule sets  . Briefly , it stores the most similar rule set for each combination of arcs of each node from Ice  . yesup to the root ~ and the most similar ruleset stored in the root node is tile one for the input structure  ( see\[6\] for details )  ,  4 . 2 Prc-Lexicalization It may It~qqlen that ~ lexit : al-h Irm of a  6'~ in the given rub ! iust ~ tnce is lint ~ t\[ uuld ldat ~! translation word of its correspoudilt g word in the input  , because a lexica \] form in a . l , ~ tci , iug node it , its G , . is not necessarily the same as the input word . hl this (: ~ e , such a node is lexlcMized by c~L . dida . tetr ~ tnslation words . 
4.3 Node Labeling
The label of a(d , , , node becomes tit ( . " I ~ bel of its mate illngnude in(;~,, . Since(;i ,, nodes are labeled uniquely , (?, .   . odes are idso I~mled uniquely . On the uther h ; md , the label of a (7 , : nuden ~ becomes the tt-bel of a ( , ' , , , node(n , ,~ ) such that ~' z ~= MT ( nm ) or '\[' herenlay1h ( l We Vl ~ r I betwn nodes ill ( Jcill ; ? rule inst ~ ulce that are mapped by ; tnode in ( ;  , ~ with M\]~ . ndM ~, respectiw dy . In the succeeding process ,   ( 1~ nodes with the same bLbel are merged into one node in order to gener ~  . teanmlt pul structure , luth is phase , tim transferred hdmls of these two nodes shoulcl be different ~ becnuse the two  ( lodes should not be merged f . r this rule . We must therefore relabel G~nodes of rule it stances as follows : G ~ Node Relabeling : for any label li  , , G ~ , if l is distrilmted t\[ ) t w t ) distinctuoch ! s of (  ; ~ bytroth M\[andM ~ fronlanode( , f ( ; , , , , then a I~bel l iu a G ~ tulde , which is mall ped only by M\] , or is mapped by both M\[~tndM . ~tnd has no descendants , is
Cil\[tUg ! dtoI'I 4.4 Gluing
Unificatior ~ is ~ twellknown c ( unput ~ tiuual tool for c ( mm . ctingra . phs , and is widely used in natural language l ) rocessing . Usually , unitl cation uses two func-AcrEs DECOLING-92 . NANTES . 2328 Ao ~' rr 1992773P ~ oc . oF COLING-92 . NANTI~S . AUG .  2328 . 1992 y ( a )   ( x (   ( b )   ( e ) Gluing of ( a ) and ( b ) 
Figure 4: Example of gluinglion elrldags as data and unifies them front the root node down to the leaves  . In RCT , however , we want to merge those nodes of two graphs that have the same labels  , even if their root nodes are different and they are not function a L as shown in Figure  4  . Unifi : cation , however , cannot proceed in this manner , because it unifies two nodes that occupy the same p+sition  , and always starts from the root node . For instance , in Figure 4 , even if unification starts from node B then it fails  , since it tries to unify node D of ( a ) and node C of ( b ) for arc y . 
In Graph Grammars , this method of connecting two graphs is called g luing  \[2\]  . The ghfing used in Graph Grammars is not concerned with the content of a node  , so it must be extended in order to check the consistency among the nodes to be glued  . 
in SiraTi'an , if two features conflict then the feature whose rule is more simi\[arto the input is taken  . 
Briefly , gluing is performed as follows g:I Civst , nodes with the same label are me~yed if they are consistent  . 
If arty nodes fail to be merged , then the ghdn 9 also fails . If all theme ~ ge succeed , all ares are reat-lached to the original nodes , which may or may not be me ~ yed . As a result , some ares with the same labels and attached to the same nodes may be me~ed  , if they are consistent . 
A glued graph is not nece ~ arily acmmeeted , rooted , or acyclic graph , but we usually need a connected rldagiunatural language processing  . Several con-stralnt satisfying such requirements are described in previous papers  \[14\]\[15\]  . 
After the G~s have been labeled and relabeled , the target structure is built by gluing the G~s . 
ODet Mlsoftire algorithm are given iu previous papers  \[141115\]  . 
4.5 Post-Lexicalization
The constructed target structure is still bn perfect  ; there might be a G ~ node thai . has no lexical-form , because there are some rules made froul transfer knowledge that have no lexl cal-forms  . Therefore , as in the pre-lexicalizatiou phase , nonlexical G : nodes are lex:icalized . 
5 Examples
This sectimt gives examples of translation by SimT can  . Figure 5 shows how the Japanese sentmme " Kauojonomega to temokire in a now osit teiru " is translated bl to the English sentence "  ( 1 ) know that she has very beautifule yes . " In this figure , ( a ) is an input sentence structure , ( b ) , ( c ) , and ( d ) are rules ( precisely , rule instances ) , and ( e ) is the output structure produced . In these rules , a mapping line not marked M ~ and M~has both M ~ and M ~  . Dotted lines designate matching orgluing correspondences between rule nodes and input or output nodes  , respectively . I :' urther , numbers prefixed by '*' denote node labels . In this example , we assume type hierarchies in which , for instance , ' you gen ( predicate ) ' is a supercategory of ' keiynu ( axl j ) ' , and " kaut6o(she ) " is an instance of : hnmau ' . Note that the node labels of both " have " in rule instance  ( c ) and lower'pred'in rule instance ( b ) are changed from that of the corresponding Japanese word " kirei  ( beautiful ) " by the G ? node relabeling procedure . 
Another example is shown in Figure 6 , which shows how the Japanese sentence " US ga . . . wo fusegut a menibu hit/ul kanzei wokakeru " is translated into the English sentence " US imposes taxon parts in order to block a de  .   .   .   . " In this example , ( a ) is an input structure , ( b ) , ( c ) and ( d ) are matched rules , and ( e ) is the output structure produced . The Japanese verb " kakeru " has several trauslation candidates associated with different governing words  , as shown in the following + ~ able:
Similarity dapaues + Eng/ish 5 . 988  ( meishi ) nizei kiuwokaker uimpose taxon ( noun )  3 , 077  ( meishi ) wo salban nika keru take ( noun ) to court 2 . 717  ( meishi ) womadonikaker uhang ( noun ) in window 2 . 545  ( meishi ) wo su too buuikakeruput ( noun ) on stove haukatiui kousui wokakeru2 . 0 40 spray perfume on hand kerchief This table lists the top live similar rules for the part " buh in nikanzei wokakeru " of the input  . As shown ACTI~DECOLING-92 . NANTES , 2328 AOt ~ q"1992774 PROC . OFCOLING-92, NANTES , AUG .  2328, 1992  . , ?+ . .--- -- . . " r '+ *3 l i t " LI ' hive ~' ~ I !-\ o ,   , , T " ,  .  ,~/< . ~  . . .  >~ . ---7'-~xt . .~? . iZ-~"~',, . , -- L -/') -% -" ~ . +-, ~ L <, I \ , t . - - ? tz -' . 9" t_7 . 9", ' U , , I " i ~: . . . > . ~", ~ r~t'3 .   . -, 7_L .  ,  .   . . . . . . . . . . .  ~:  . . . . . . +_"~ "~ I . ~\" ~ II"*~i " . . . . . . . . . . ('~ ~ . . . .: . , . .~- r ~, fSb,7 .   . . . . . . . 
Figure 5: Exami ~ le 1 of translation by SimTi'~n ,  . -"\[" 2 ~ . z ~_d '2" . . . .
///"\[( b ) ~', , . \ . " , .., .
I ,  "/" " '2 / '5 " , ' l\ "6 t ! t + 4 _MI ~"-" *3 / t '4  \[ /  '3  / ~  4 mort ' x ' ,   . .~" / ~ . ." : / : '~ ' e ' . . >~  . . " F ' / ",/-" . .  . .  . . . . . . . .  . - . " ~! i /', /"", . . . .- . : < i . . . . . . . . . . . . . . . . " . , // ii\--~" . , .   . . . . . . :::~':( L ~ f ~ / " / / "" / " ' x " , B '; '~") ~ prpr , ~ l , !" i'l ( ,   , t , ~ L .   . j . . . . . . . . . . . . . . / . . d . , F . .~, i ", . 5" " '~  , '( d ) ( c ) Figure 6: Example 2 of transl ; ~tioubySim ! l'~nA~l . : sBECOLING-92 , Nnlqi ~; ~; , 2328^Ot~T1992775 PROC . OFCOLING-92 , NANTES , AUG ,  2328 , 1992 in this table , rule(c ) is the most similar one . Note that this similarity calculation was done for all rules  , including nonlexical translation rules . There were no appropriat example rules for the part " US gakakeru  , " and a nonlexical rule ( b ) wastim refore selected . Further , note that the lexical forms in *3 nodes of ( c ) and ( el are different , and that *4 node of ( el has no lexical form other than a preposition , whereas "4 node of ( el has a lexical form . The for-met was obtained by pre-lexicalization , and the latter by post-lexicaiiz atiml . 
6 Related Work
Although there were several early experimental projects on CBMT  \[4\]\[9\]\[11\]  , MWF-H \[10\] is the first working prototype of a case-based transfer systern ~ and demonstrates the promise of the CBMTalr-proad LIt uses Japanese-to -English translation ex-anlples as translation rules : chooses the source trees of examples that are most similar to theiu put tree from the root node down to the leaves  , and assembles those targetrees to produce an output tree  , With respect to the transducing mechanism , MBT-II is a tree-to-tree transducer adopting one- -to-one correspondeuce  . 
MT by LTAGs\[1\] , although it is not an attempt of CI3MT , proposed a similar mechanism to RCT described in this paper  . It uses paired derivation trees of English and French as translation rules  . An input sentence is parsed by the source grammar  , and at the same time , its output tree is generated by derivation pairs of trees used in the parsing  . As a traus-dueer ~ this mechanism is also a tree -to-tree transducer adopting one-to-one correspondence  . 
In contrast , the RCT employed in SimTran is a rldag-to-rl dag transducer adopting upward and downward correspondences  . These extended correspondences are desirable for expressing the structural discrepancies that often occur in translation  . Moreover , this transducing model is a parallel production system  \[2\] that Call produce an output structure in one execution of gluing if all the G~s required to produce an output are supplied  ,   7 Conclusion In this paper : 1 described a cas ~ based transfer system , Sim Tran , which combines I~CT with a similarity calculation method  . RCT has powerful correspondences between the source structure and the target structure of a translation rule  , which can express most structural discrepancies between two languages  . 
As a transducing mechanism , RCT is a parallel non-destructive rldag-to-rk lag transducing system  . I also propose a similarity calculation method for graphs whose nodes consist of syntactic and semantic features  , and show that a translation rule th ~ t t has no \ [ exical forms can he used msa default rule  , that is , that such rules can provide a fail-sMemechanism if there are no appropriate translation examples  . 
References\[1\]Aheilld , A . , Schabes , Y . , and Joshi , A . K . , " Using l , exiealized Tagsf , ~r Machine q Yanslation , " Prec . of
Coling 90, 1990.
\[2\]E hrig , 11 . , " Introduction to the Algebraic Theory of Graph Grammars  , " Prec . of Inle , ' national Workshop on Graph Grammars , LNCS 73 ,  169 ,  1979 . 
\[3\] l(o lodner , J . and ILiesbeck , C . , " Cmse-Bmscd Reason-ings " tutorial textbook of llth IJCAI  ,  1989 . 
\[41 Nagao , M . , " A Framework of a MechanicM Translation between Japanese and English by Analogy Principle  , " Elittmrn , A . and Banerji , R . ( eds . ): Arlificisl and Humanlntelhgence , NATO 1984 . 
\ [5\] National Languagelte soarch Institute : Bunrui Got Hyou  ( in Japanese )  , Syuuei Syuppan ,  1964 . 
\[6\] Marnyama , ft . and Watanabe , l-l . , " Tree Cover Search Algorithm for Example-Based Translation  , " Prec . of 4th 1st . Conf . on Theoretical and Melhodological 1s-sues in Machine Translation ,  1992 . 
\[7\] Melhy , A . K . , " l , exical Transfer : A Missing Element in Linguistic Theories  , " Prec . of Coting 86, pp .  104 -106, 1986 . 
\[8\] Nitro , Y . , " Idiosyncratic Gap : A Tough Problem to Structure-hound Machine q~'anslation  , " Prec . of Col-in ~86, pp .  107--111, 1986 . 
\[9\] Sadler , V . , " Working with Analogical Semantics,"
Forts Publications , 1989.
\[10\]Sate , S . and Nagao , M . , " Toward Memory-based
Translations " Cohn 990, 1990.
\[11\]Sumita , E . , lida , 11 . , attdKohyama , 11 . , " Translating with Examples : A New Approach to Machine'l ~' ans-lotion  , " l ' roc , of lnfoJapan 90 ,  1990 . 
\[12\]Tomita , M . and Carbonell , J . G .   , " Another Stride Towards Knowledge-Ba~qed Machine Translation  , " Prec . of Coling 86, 1986\[13\]Tsujii , J . and Fujita , K . , " bexical ~ lYansfer bmsed on bilingual signs : Towards interaction during transfer  , " Prec . of Seoul Int Conf . on NLP , 1990 . 
\[14\]Watanabe ~ ll . , " A Model of a Transfer t'roccss Using Combinations of Translation Rules  , " Proc . of Pacific
Rim of Int . Conf . on AI ' 90, 1990.
\[15\]Watanabe , tt . , " A Formal Model of Transfer Using Rules Combination  , " submitted to Machine Translation ,  1991 . 
AcrEsDECOLlNG-92 , NANTEs , 2328 AOt'Zr 1992776 PROC . OFCOLlNG-92, NANTES , AUG .  2328, 1992
