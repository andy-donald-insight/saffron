LIl ~( k)-I'msing of C(ut1A-Cont(xt , -\]~( cGrammars :)-)0"~~~'*~*
G ~ se\]a Pit ; sch
l ? Blnfornlatik , Universil . i ; tdesSaarland(!s
1) . -6612' , /Saar \]) ricken , (\]ermanyE-marl:pitsch~cs . uni-sb . de
Abstract
(hmpled-Cmltext--l:ree ( lrammars are at ~ eneralizati ( m of contextfree , grammars obtained by combining nonterminals to parcn the scs which can only be substituted si -mnltaneously  , l/efl ~ rring to the generative capacity of the grammars we obtain an inlinite \] licrarchy <  ) f lanl4uages that comprlscs the contextfree languages as the first and all the latt guages generated by ~ lYee Adjoining Crammars  ( TA (  ; s ) as the second e h ' . ment . Ilere , we present a genera \] izati ( in of the contextfree LR ( k ) -- notion , which characterizes subclasses of Couph:d-Context -\[: ree  ( rall tlltars and ihelefme for TAGs-which c ; tn be . pa . rsed in linear time . The pars-\]rig proce . dure described works incrementally so that it can be used for on-llnel  ) arsing o\[natural language . \]'~ x anlples show that important Tree Adjobling Languages  , e . g . those modelling cross-serial dependencies , c : tn\])ege . nerate . d by LR(k ) Coupled--Context . -\] : ree ( Iranlmars . 
\] Introduction ill order to processll & ttlra\ [ I  ; t/l~ll ; l~ , eS3 ; Vfl first lave to model the synta ? formally . Many investigations ; is ~ e . g . , \[ lligS , l \] showth ~ t t this cannot be done by contextfree graliilllars  ( ( Jl!' ( ls )  . I " or context-sensitive ~ . , , l ' allllllars which are powerful enough , it is kn(i wlt that the anal 5'-s is is PS l ) ACl : , -- coml ~ lete . q'hus , there is a tradeoff'hetweentile power of the . formalism and it ;; analysis coln-plexlty . To solve this dilenlma , much work has \] mendonet Ochar ; t (: terize l ; tllglal ~ e classes ill Detweet tcoltt ( ! xt-free and context-sensit lvelanguages herig powerful enough to model the syntaxo\['natural \] all gllages hut endowed with at I mlynomial time analysis  . (2mll)\[:(l-(; onl . ext-I " ree Grammars represent such a . form a \] is nlyener alizhlg CI " Cs . Their suitability to model syntactical phenmnen:t fo\]h  ) ws\[rom the fact that they include tit . '\] it llgllaJ ! , eS ~ . ; CllCl'il ( Cd by ( he Tree Adjoining ( h'ammars ( TACs )   ( i \]'\[ . hls87\]as(mesubclass . Anlung other properties , both f()rmallsms are ; d ) letomodel timlinguistic phenomenon of crosss ( :ri ; d depen . 
dencies , which is not context . free hut \]' rcquently appears in natural languages  ( of . \[Shi86\]) . 
The formalism of ( fOul ) led-Context-Free (' , ramnlars \] tits been introdu <: edin\[ CIIR92\] and \[ Cua92\]  . Ith , ' . hmt , sto~l  ~ ( : family ( ffv ' egulate < l striwg rewriting syslems investigated in  \[1  ) P89\] . The inc : ruased generative capa < : it yiso\] ) lain cd by allowing to rewrites in tult an emlsly a retain i HllllbCl ' of elements  . Other regulated string rewriting systems its , e . g . , the Scatte . red ( Jontext ( ll ' allllllars of \[(', llft . q\] generalize CFCs by allowing simultaneous rewriting of arbitrary combination so \] elements  . \[ n\[I)P89\] , it is shown that this results in languages which are not sentill near  . But semilin = earity is important since it formalizes the " conslant-growthlm  ) pe . rty " of naturallanyuages ( cf . \[3os85\]) . Inco , ,t , ' as to these , all languages defined by our I ' urmalls nl are semi \[ near*'\['his research as been supported hya  ( h'a duh : rten kol\]cg-fellowship of the I ) cutschel " or schtmgs genle in schaf (  . 
because of two restrlctions . First , only those element sean here writteu simultaneously whh : h were produced by the same re  . writing . Second , the Coupled-Conte?t-Free ( \] ram-llial'Scoltsi ( lere \] elllelttsIewr\[tten Silllll Lalleotsly  ; tsCOil-portents of ; t parenthesis . Those can only l ) esubstituted if they form a parenthesis and t\ ] ley can only he suhstitute tl\[  ) yseqltelt c ( !s of pa . r( . * lll , heses cov ' rectly nested . 
When characterizh q4Cuup\]ed-Context-I'~ree ( ~\] r&ll~l\[Htrs by lhemaximal number o1" elements rewritten simultan ( > ously-width we call the rm&o\["the grammar we get an infinite hierarchy  . The generative capacity grows with the rank . The smallest element of the hierarc\]W-the one of rank I ? are  ( ~ l ; '( ; s . The next element , namely Couple . d-Context-Free ( Iramn lars of rank 2 , generates tle same class of Tanguag . es as the Tree Adioini , g(~ra IlllnaFs of\[Jl/I'75\] and\[Jos87\] . llence , all not h ) ns and algorithms design led for Couph~d-Conl . ext-Free ( il ' il Ii Illt ; tl'sO friLItk 2 can easily be translated onto't'A ( ls ( eL\[Cua92\] )  . 
l~ec : all se of the en Jarl , e(IgeIter at , lvecapacity , it is not sutprising that the coutllh : xity of analysing I:tl<g I Htgesgen-er~tled by  ( Jouph : d-Context-l " ree ( h ' an m , ars is larger than it is in the contextfree case . \[teven increa . ses with grow-i , mrattk(c:L\[11P9,1\]) . Therefore , we aim to characterizes uh classes of the set of all lall  , ~ll~t . ff , esgeller ~ tl . edhy (, ' Oul ) led-( . ~oiHexl,- . Vree ( ~ '4t'atllllltaFs which are powerfulell Oltgh to model the important phenomena of natural liu  , guages , I ) ut which are of at lower c(mq ) lexity . 
The deternliuistic ( : on lext-free parsing with Llt ( k ) -~ , ~"  . . . . . . . . . . . . leads t .   .   .   . li . . . . . . r tinl . . . . . . . . . lysis ( of . \[ Knu 65\]), the best lmssible . The ref bre , its generalization is very attractive . Afh'staltempt in this direction was done in \[  . ' qVg()\] . I ~ u ( . there , only TA(Is are ilwestiga . ed . \]\] ere , we invesilg at c ~ the whole hi ( HallchyOfCouph:d Context-l " ree ( lramma ~ s . Allhou , ;h their enlarged generative ( Stl ) a : ity seems to I ) ec ( mlradictory Ioa . I hm ; u ' time cOnll )\] exlty of q\]lepals rigalgmithm , we can present an Ll ~( k)-notion t ' , (: oup\[(:d-Co , ttext-l " vee Crammars dcs : ril , ing a class of laugual ' j : s , which can actnal \] yb can Mysed in linear time . 
This increase ill power a . s to the linear time ~ tlH tlysis is ilaid hyan expensive ln ' e processil ~ g  . It in taking into account ( he comple ? r clnt lons \] ) et we ' n parew these . s that involves ILL ( : ill ( : rease ill conll ) lexity , l\[o wever , these costs are to hepaid only once for each grammar  . The suhchuss described hyour I , l~(k)-notion for a lixed ki . rows with the rank . 
"\[' heal ~ or ithm of \[ . q\:90\] fnrl , l?(k)/l'AGs does not ful-lill the imp ( , tant Valid Prefix I ) roperty . This means that for any prefix o 1"thei Ul ) Ul : aheady accepted , there exists a suffix such that the whoh ' , word is in the language analysed . 
It allows to detectille galin puts as so on its possible  , which is necessary for efllcient parsing . Our algorithm fulfills this property . Addition ; lily , the algorithm its well as the notion defined here  , ' e prescnt genera . lization so \] their con-text-free C <) lllt( , et'pltrts which arell ~ ttllra \] illt it <: sense that they strictly contain t it : contextfree sitnation as the special case of  (  ; ouple(\[-(Jonl , exl . - Free(\]ran Lularso \] rank 1 . 

An example of an important LR ( k ) -Coupled-Context-Free Grammar is the one generating the language w$w I w ~ a  , b * which reflects the syntactical construction of cross-serial dependencies  . 
The paper starts by defining the Coupled-Context -Free Grammars  . Thcn , wc shortly recall the contextfree Lib parsing procedure  . Subsequently , the deterministic finite automaton used there to guide the analysis is modified such that it can handle Couplcd-Cm~text-Frec Grammars  . 
Based on it , the parsing algorithm for LR ( O ) Coupled-Context-Free Grammars is derived . Tiffs results in the generalize definition of the LR  ( O ) -not lon . As for CFCs , the LR ( k ) -Coupled-Context-Free Grammars result from the LR ( 0 ) -ones by resolving decision conflicts using a lookahead of at most k symbols  . 
2 Coupled-Context-Free Grammars
Coupled-Context-Free Grammars are defined over extended semi-Dyck sets which area generalization of scml-Dyck sets  . Elements of these sets can be regarded as sequences of parentheses that are correctly nested  . Senti-Dyek sets play an important role in the theory of formal languages  . To extend the family of contextfree languages by using them wc consider parentheses of arbitrary finite order define  ( \[ as follows:
Definition I(ParenthesesSet)
A finite sctK := (( k i , ~ .   .   .   .   . k i ,   ,   ,   ,   , ) li , mi ~ N is a Parentheses Set iff it satisfies ki , j#kt , , , , Jot " i ? I or j # m . 
The element sericar eerdled Parentheses . All parentheses of a fixed length rare summarized as ~:\[ ~\] :=  ( (~ ,  . ,  .   .   .   .   . ~, , , , , , ) ~ ~ : I , n , = ~, , hct . e ~ C\[O \] := ~ . ( ~ de . otes O , ee . , Vt , a , , otd . ) " thes, . 2 of all ( first ) components of parenthesis in K is denoted by e on , p(~C ) := ~ , I ( ~ ,   .   .   .   .   .  ~,  .   .   .   .   . ~,) e~c , esp . 
co , marc ) := ~, I(~,.....~,)e~c.
Straightforward frmn this , we get
Definition 2 ( Extended Semi-DyckSet)
Let ~ be a parentheses set and 7' an arbiteary set where 7" VIK = Tm comp ( K ) = O . ED(K , T ) , the extended semi-Dyckset over E and T , is indnetively defined by ( El ) T*CED(K , T ) . 
( E2) ~ C\[~1c ~ D(~C,T).
( E3) u ~ .   .   .   .   . u , EED(IC , T ), ( k, .   .   .   .   . k , + , ) eK\[ , "+ 11 == ~ k ~ u ~" " k ru~k ~+ ~ GED(K , T ) . 
(E4) u , veED(K,T ) ~ u.v ~ E1)(K,T).
( E5) ED(K , 7") is the smallest set f , ,lfilling em , ditions(E1)-(E4) . 
Now , we define how to generate new elements in ED(K , T ) starting from given ones . 
Definition 3 ( Parenthesis Rewriting System ) A Parenthesis Rewriting System over ED ( /C , T ) is a fiaite , nonempty set P of productions of the form ( k ,   .   .   .   .   . k ~) ~( . ~  .   .   .   .   . o , . )I(~, .   .   .   .   . ~,) C -, ~, .  ,  .   .   .   .   .  ,, . eED(~," r) . 
The left and the right side of p := ( X ~, .   .   . , X ~) -* ( o:1 .   .   .   .   . o6,) GP is denoted by ? S(p ) :=( x, .   .   .   .   . x ~), thc sonrce oh ,, a , , d?V(p ) := ( or , .   .   .   .   . e  ~ , . ), the drain of p . 
Now , we can deline our grammars . The term " coupled " expresses that a certain number of  ( : on text-free rewritings is executed in parallel and controlled by K\[  . " Definition 4 ( Couph ; d-Context-l , Yeo Grammar ) A Coupled-Context-Free Grammar over ED ( K , T ) is a u ordered ~- luple(IC , T , l7 , S ) wh cr ' el ' is a Parentheses Rewrit in 9 Syste , nover ED(K  ~ , 7') and S6K Ill . Therefore , IC can be regaeded as a set of couph : d nonterminct ls  . 
The set of ( all these granmmrs is denoted by CG'I , 'G . 
- ~( ~ At last , we give the definition of derivation in CCI ,  . 
Let (; '=( K,T,P,S)C -,( . 1G and V := corn p(l ?) UT . 
We define the relation : : ~ zc ; as a subset of V * ? V ' consisting of all derivation steps of rank r for G ' with " r > l  . 
p => a '0 holds for 99 , ~/ , GV * if and only if there ex-\[st(k ,   .   .   .   . , k ,) -~ (-* .   .   .   .   . -,)e P ,,*,,,*,,,, eV ', and u2, .   .   . , UrEED(K , T ) such that 9~= ulkau . fl~2 . . . u, . k, . u, . + l and ~\] ~ . ~: Itlt ~ l //2 e?2? ,   , ltv('gr ? lr + l , -'~6' denotes the reflexive , transitive CIOSII'(:Of ~'( ~' , () b-viously , ' al . u , +\] (5I')D (/ C , '/') follows from S =*> c ;   ( p for ~2 and ~ b siuce the result of the substitution is a sequence of parentheses correctly nest cdif and only if the original word was  . The language generated by C is defined as
LaG):=w ~7'" 1.9-4~,,,.
A sequence ~1, .   .   .   ,  90 , with 9~i-~c ; ( ~' ~ i - - 1 for all I < i < n and ~1 - - g , ( P . = ? is called a derivation o\]'(, from g in C . A deriwttion is righhaost if and only if in each derivation step  , the parenthesis ending at the rlght n lost point is substituted  . In analogy to C\]"Cls , it is obvions that for any derivation in CC1 ; ' C there exists exactly one ri ~ htmost(h ' . riwttk , i . 
Ex , ,  , np\[ ,   , ~c:_-(s , ( x , x )) , a ,  (' , S , ' t , P , s ) is i , , cc/ , '6'(2)  ,  . here 1': = S- . XSYf,(X,X ) - ~( aXb , e~,t)I ( . ~, ea ) . c ~ e , , e , '( , . , sthelan:tt, . g .   . " ~*' e"d"I '*-> ~, e . g . S : ~'6' X$ . ~ =>( ~ aXb$c ~ ; d :> c ; aaXbb$ccX-dd = > c1 a aabbbecc ddd In order to be able to describe the generative cal  ) ac-ity of Coupled-Context-Free Crammars of different ranks exlt ctly  , we need the following notions :
Definition 5 ( Rank , CCFG(l))
Foe any (5' = ( K , 7' , P , S ) GC (21 , ' C , ' , let the rank of ( lbed , 'finc , l , , s , ' ank(G ) := , , , ax"I (< .   .   .   .   . k , . )C , ~ . The . at , we define for all l > l : CC l , ' C(l ) := c , Eccrc;'l ,  . a , ,k ( c' ) < l The following theorem prowm in \[ Gua92\] shows that CCI , '( IIn , \[ his up an infinite hierarchy of languages and , at the same time , represents aprel ) er extension of CI " Cs not exceeding the lmwer of context-sensitive granlolars : 
Theorem 1 ( llierarehy )
Let CI " L be the family of all e on text-free , CSL the family of all context-sensitive languages  , TAL the family of all languages generated by 7' A (  . Is and CCI ;' L(I ) I he one generated by CCFG ( l) . It hohls : (1) c't , u , = cc/ , ' t , (1) , " eAL = c'cl . 't,(2) . 
(2) cct.'t,(l)~C'C'FL(I + ~)/ o , ... l > i.
( a ) 6' CVL(I ) ccs /,/ or , nl > i.
Sometimes , i * is useful to " neglect " the relations be-g tween the components of a parenthesis for a short time  . 
Then , wc investlg ~ t teC/:==(eomp()C ) , 7' , P ' , S ) instead of G = ( K , T , P , S ) C ~ . CI'G for
P':--Uki-,~v ~ ll_<i<.r.
(~, ..., ~..) -.( ,,, ...,, ~, .) ~ P
Since C ' is certain l ~ a CI'G we & mote 6" ( resl )  . P '), by CI"(G ) ( resp . CI'(I')) in the sequel . Obvmus , y,G'satisfiesLaG)CLAG ") . 
4023 Context-Free L\]? , -Parsing Now , we shortly recall the deterministic on text-free LR  ( k ) -parsing strategy of I ( nuth ( or . \[ Kmt 65\]) .  1 , ' or slm-plicity , we restrict ourselves on the case k = O . The strategy essentially renlains unchanged if lookahead is necessary  . It uses a deterministic finite antoniaton ( dfa ) to drive a pushdown stack while sciln liiiig the inpnt from left to right  . ' l . ' u is , it COll strllcts ariglit n lost derivation bottom -up  . The states of the d . f a for a given LR ( 0 ) -CI"G consist of subsets of the set of all contextfree items for  (  ; ( N , T , P , S ') , i . e . of the set\[X--~~, . fit\]Ix .   .   .   . i ~ ev ) . 
'\[' hey result from dcternilning the deternlinistic w ~ rslon of the following nondetern finistic automaton for  ( : l:\]!\] aeh contextfree item is a state . 
There are . three kinds of state transitions : \[ x . . . . . . yf ~\] "~ Z \ [ x .   .   .   . Y . fq,\[X . ~, r .  ? -~  .   . , , i7, b':-'<,, . / ~\], a , , d\[Y > " ~ . X ~\]-<,\[ X--, . <, . 1 . 
In the ( leternll nlstic version , all those contextfree\tents are grouped in one state which can here a clled from tile initial st ~ tteby the sail  ) eSetltle . itce of symbols ) with ally possible number of e-transltions inbetween  . 
The stack symbols are the states of the df a . At first , the state containing the item \[ S'- ,   . S\] is llushed . ( The add ithmal ) rodnction . S ' ~-- ,   , S'serves to define exactly the start and the end of the analysis  . ) Then , we iterate the following actions delmnd hlg on the to I m lost state q:  ( Shift ) lfq contains \[ X- , ~*  . a/f\] and a is the next input synt\] ) ol to be read , we push the state reached froln r1v l .   .   .   .   . ( it coiitai its at least X~<,a . fl \] . )(Reduce ) if q contai , , s\[X-~c < . , weI , Ol , tim II tov , il , ist states . Let q ' be the state now OH top of the stack . 
Then , we push the state reached via X from q ' . ( q'e outains at least one it . e,n\[Y-- . T . XS\] and \[ X-~ . ~\] while the new top niost state contains \[ Y - ~ 7X   . @ ) ' l ? he pushdown is driven determl nlst h:ally hy the Ilia if this dfa contains no state wlie re th  ( ' ~ e are two different Reduce-items ( Ih : duce-lteduce conllict ) or as well it Shift-a salt . ednee-itent ( Shift-Reduce conflict ) . A ( ~'1" ( 1 is LR ( O ) ill " the states of its df as how no Shift-i\[e . dnce and 11 oReduce-l/ . educe conflict . For LR ( k ) - grammars , conflicts in the LR ( O ) -dfa are solved by ith ) okahead of k syml ) ols . 
4 The Finite Automaton
One possibility to generalized fais to construct the usnald Ja for  6'F  ( G )  , ( IECCI , 'G . Inl ) rinciph !, this idea is used in \[ SV g0\] . "' liefl ) llowing example shows that this produces unnecessary contlicts : I  , et(;-- . -(s , ( X , A_~), S), . ,*,, ~, i ~, V , . s ') c = c'cva (2) re , Z ":= s--~X X D$ , D - , D , Zld , ( x , ~;)---+( t , ,e ) l ( , O , ,<:d ) a , ,d C(a ) =  b , :d"$ , ,d , e<t , P$1 , , > 1) . its < q < , is sl . > w , , hi Figurel .   ( ~ is not LI ~ ( O ) in this way since this dSaoh vlously has a Sllift -l\[educe conflict  ( in the box doubly lined )  . This conflict canno the solved by loek a head since at this point  , the lookahead is always dx . Therefore , ( l is not LR(k ) for ~ tlly k ~0 . But this conflict is liOt necessary . I ", g . , when analysiugbedd bottoni-up , we first haw . .
to reduce X--+ b . This inlplies that lieerecoming to the conflict state  , we have to choose X- , e in order to get a correct derl wt tion . This is the case \] ) ecause Xan ( IX resnlt hlg from apply h~g the productiou 5 ; '- ~ X X D $ ar(:/x .   .   .   .   .   . bIIN-,,eJID-+ . dl
Lx--,J .   .   .   . L---l : igure 1:dfa((;)<:mq)h' . d and there fm'e haw ~ to be substitut ~ M by coupled

To awfid these conflicts , we extend the df a . If " we use the contextfree LR-I ) arsing strate . gy , we know which produc-t\o , , we have to choose for any Xi G eoinp(K . )\ compl(K . ) because we first encounter alld reduce the corresponding  X1 Eco , lpj(hT ) . Suppose that we can store the inforn la-tlm , a hout X .   .   .   .   .   . X , . , ( Xl .   .   .   .   . X , . ) EK . \[ , '\] , when X ~ is reduced , let ussay as the " future " . (\ [ low to do this is shown in Section 5 . ) Can we use this to awfid the conflict ? Now , our automaton needs add it im , fl transitions unders , ,ch ~ , ~ ccv(P ) where S(7 , ~) ?  , , o , , , V ~ ( JC ) h , ) las . " rh , , s , we split ways inside the dfaw hich lead to conflicts i  . ates . 
" Fo formalize our at ltOlt ) ai All ) We need the following
Definlt . hni 6(1-Closure)/,'o , .  <, . .\ ' c = , . o , , , p4sc ), t, . ~,' e . < , h . bte(X ) := ( vc . . . . . . ~,,( E . ) I-Ix- . Y . e or ( v ) . 
reachabb:+ ( X ) denotes its reflexive transitive closure . For . , yqEf , (\[ X --, a . /7\]\[X--+c~flGCI"(I')) , wc define the I-Closure ( q ) as quntied to I heset\[X .   .   .   . qlXe , : o , , , I , , ( X :), X-,, ~ eC'F ( P ) .   . d . -3Yccoi , + , ( sc ) : (3\[z- , / ~ Yv\]c , s , , , , J x e ,  . ~ . ~ . h . bte'(Y)) . 
i-Closu reformalizes the construction of the deterministic version of a nondeterministic finite auton hM  , On as it is done for the dJ ' a of ( Jl " Cls . Its special feature is that it use so , ,ly those X ~ , * ECI"(P ) f , ,lfilling X C - e , , , , , p , ( K ) . If A"c , , o , , , v(JC)\c , , , , , v , UC ) , ti , e expa , ,di , ,g prod , , , : ti <) , , is detc . rm hm dhy the corresponding first component . 
l ) eflnlthm 7(1)1"/1((_;))
Let G ' = ( K , 7', 1", . q ') ~ CC b'(l . Thel)ete . rmild stk:l"hdte Autonlaton for ( I is defined as DI " A ( (1 )  :=  ( Qa , ~ a , ~G , S'c ~ , l " a ) , , , he , ' , : S' . := l-C to . .,,'e(\[,V '-~ . Sl ) is 0 . ; initial state , > 2~:--=eo , ,u , ( Jc)u ~/' uD , ecv(l')l s(p ) ?_ co , , , vi(sc )) the input alphabet , bc , the transition function defined/or ( 2 e Oliip ( ~ C ) U'r a , ,d L e C'F(P ) , S(L ) ? c , , , , , ,l(/C ) , by 6< dq , ~)::1-C to . ~,,i . 4\[xs->-s~ . ~ J\]I\[A'j .   .   .   . J . ~fls\]cq )) , 5c , ,(q , f i ) := i-CIo surc ( \[S ( f i ) -- ~" P ( I ' ) \]I~\[x :- ,   . ~  . s(fd/~s\]cq ) ,  (2( ; ' is the set of the states given by ' lI = ~" C = ( e  o ,  . p(IC)U"rUOF(P )) " : ~;( S . , u ) =' d,,,,,~l,'~,:=(,~cO . I\[X ~- . \] cq,x- .  < , < ~ cs , '( v )) is the set of the final states . 
403 sl/x ~ ~_ Ids , - ~ . s_~s ~ xX . D , Is ~' xxD*lIv_ . ,, ID~'D'IIx-~'~I~_12_ ~ .   .   .   . ID ~ . , l
Figure 2: DFA(G )
The first difference to the usual contextfree automaton is that we allow transitions nn derfl CCI  ; '( P ) , if we have S(fl ) ? ~ comps(It ) . The second point is that we use 1-Closure instead of the usual closure . DFA ( G ' ) for the example grammar is shown in Figure 2 . The conflict is removcd because we can now dist inguish two cases by looking at the information additionally stored  . Ill\[SV 90\] , only the first i ( te~t was realized oh viously leading to a weaker antolnaton  . 
5 The Analysis " Pouse DFA ( G) , the usual pnshdown is extended by a data-st ructure consisting in a list of partial derivation trees  . This list future collects all information determined by Reduce's relative to first nonterminal components and is used to drive the transitions under pGCF  ( P ) in DFA ( G ) as soon as we have to investigate nontermlnal components Xi ~ compl  ( K .  ) . The change between the two different kinds of control leads to a new characterization of conflicts  . 
For better explanation , we use a list past paral M to future where all Reduce operatimls performed so farale stored  . An example for tile new data-structnresi shown in Figure  3  . We use it to explain how they arc built up during the analysis  . The first operations on this past were Shift ( w1) , Shift ( w2) , Reduce ( A-+w2) . From CFGs , we know that any Reduce takes place at the end of the sen-tentlal ' or m generated so far  . This remains true . Thus , we Calla . rgue completely analogolls as f~kl'itsl ) (18l iS COtlC ( !l'lICd . 
But we investigate coupled productions as , e . g . , ( Z , ,Z ~) -- , ( w ~ A , U , V ~) , A , ( Z  ~ , Z ~) , ( Vl , U ~) C -* C . We know that coupled nonterminal components are located at the same depth of the derivation tree and that they are substitnted by components of tile same coupled production  . Therefore , when insert iilg any p , S(p ) Geomlh(K . ), in past , e . g . , Zl -~ , viA , we additionally insert the coupled productions , e . g . , Z2--+UtU2, in future . In general , Yt-~w4"-'-tll ", ~- past fld . " ~ B2-"B : l - ~ V 22-, i " - . I //%,
Z , N ws wo a DZ ~ Ql (225 , \ Awl Awa U1   U2 * lJ 2 Figure 3: The New Data-Structures there are two cases to distinguish depending oill  ) linserted in pnst . If Dips ) cont , ( insonly sYmbols in/C\[1\]O'F ( i . e . 
only uncouple dones ), the conpled p2, . . .   , p , , are inserted as the first up to the ( r-1 ) the lement in future . ( E . g . for ( Z1, Z~)---+( wlA , U1U'~) . ) Otherwise , we behave as it is do , lefor(Y ,   , ~) ~( Z ~ N , Z . /& Q2) in V @ , rea .  ~  . . . . the sllbtr~es i ,, Iut,,re for those sy,nbols i . "( V ~) .   .   .   .   . " D(V , , ) coupled to first comlmnents in 7 ) (pt ) become the sons of these elements . Tms , wc maintain the property that the symbols at each fixed depth ill past and future together form an element of  13D  ( ~ , T ) . 
Thereby , in addition to Shift's which are handled as usual  , we know what to do during as e ( lt lelice Of Reduce operatk ) ns relative to elements of co , np~(K ) . Now , let us be in the situation that we have to use the information in future  , e . g . a transition under B2 --+ a=:pifrmn the top n lost state . Then , we create a pointerprise ( tee walking on future . Weptls h~Sc ; ( q to v , pl ) ; rod make presence point onto the firsts on " o1' " D ( pi )  . Let q be the new topmost state . We have to distinguish three cases : GT ': If ~" is tile next input symbol  , we push ~ a(q , ~) . 
Otherwise , the whole , input is rejected , preseuce now points on the brother of ~' . 
eGeomp ( ~ ) \ comlh ( J  ~ ) : fulure already stores the exp ; tn-sion ~--+ ft . We push 6c~(q , (-- fl ) . presence now points on the first symbol in ft . 
(7_eompl(K ) : \] , du , ' e does not store information + tl ) oltt ( , but ~ and its coupled components rel ) resent ; t complete independent analysis probh:n~which hast obc solved rccurslvely  . E . g . , this is the casc for D , ( I : ~, U ~) . . . . . . I ( q ~, Q ~) . The recursive call of the procedure starts with tlu '  . topmost state since , it contains all items \[~"-~ . ~,\] . Each recursion needs separate data structures . I ) et ails are described in \[ Pitg3\] . 
If l ) Feserlce en colllters no brot\]ler ~ We 13 . vetored llce . Let Y - ~ 3' be the production at whose last synlbol presence points  . We pop 171-I-1 states . The additional Impconl-l ) ared to the context . -fi ' eecase results from the transition under : ~   7  . peesenee walks to tim brother of Y in fut , ,re and we push 6c;(q ' , Y ) if q ' is the IleW to i ) n lost state . 1\[Y is the root of the tirst tree in f , l ,   , ' e , its complete subtree is n lov cd\['romflttm'e to past and presence is deleted  . 
~ Ve Olllllt 19~1 ) whell redue iug its last conll ) onent . 
"\[' hus , ollr resultix auiphtmostd crlval . ion in inverse or ( h : r . 
13 q ? he Definition
Gofar , we . did not discuss the situation that the re/tre distinct transitions fitting for the same state in DFA  ( (\[ )  . 
Shift-Reduce and Rednce-Redu ( : e conflicts are for bkl de . n as they are for C l "(\] s . The new conflicts result if we have to decide whether we  . push & ~( q , , , , , fj ) , fjeCI"(P ) , or Shift resp . Reduce as usual . If a state q shows such a <' llew " conflict , it contains two items of the kind\[Zi-~7i . Yflli \] and\[Xt---*(tt . ~fll\],~Q:\[', or\[XI-*(~t . \] . ~l ' his is easy to dee ideas far as we are wadking on future  , since tile in for-lllatiol Illecessal'y is store . d there , r\]'lllSlWe only \] , ave a real con\[\[let if " i = 1 : tndl = : 1 holds for the M ) ove items . 
Obviolmly , this cannot ) e decided determinlstically , sluce we would h : tve to know about the structure of the derivation tree not constructed so far  . E . g . , in the first conflict , we wouhl \] lave to s ; ty whether ~" is , ~ sonof)~(cl toose & ;( q , ) 5  .   .   .   . 21 ( f , ))) or whetlete is a son of X , ( choose 8c:(q , ~)) . It follows that ( we need a modified d clinitio , Iof " conllicts " compared to CI ; ' Cs . 
404 l ) efl nithm8 (( hmtllcl , )
Fo , . , , , , y0 = :(/ C , 7', P ,, S')c . 26' CI , 'G , DI , ' A((;) show , ~  , contlict q at least one of it , ~slulesconlai . s a subset of lhefollowing kind : ( ILR ) \[X-rc ~ . \], \[~  .   .   .   . #diS , Y ~ , , o , , , v , fie ), 2:--, . , Y-,fleor(?)(s40\[x-~~ . \], Y-~f t . , v\]Ix,Yc : , , o , , , , ~ Oc ), x~-,Y -, # . v ~ elf(u ), . ~i71(xq0IX--, .   .   . #\],\[ z .  , %~3 . \] Ix , z ~ eo , , , Vs ( , ~:), x- .   .   . #, z -> vS , ~ ec's,'(u ), , <~%~9c, . . o , , , p(;c)\co , , ,   ,   , (;c ) Ut-/c)\[x- ,  ~ , \] , \[ z-+%5 , 1\]Ix , z ~ ! , ; o ,   . a(x :), ', . e  ~ o , , , p(~c ) \ eo , s , m(~:) , x - ,   , ~ , z - ,  ~5  , / e or ( p ) ,  )
Definition 9 ( Lie(o ) in CO l , '(;)(IGC (71 , '( I is . /;R(0) <> l)I ;' A((;')h . sno conflicts . 
Then rem2 LetOffCUb'(2beI,R(O ) . Our cdgorilhm deterministieally solves the word prohlem for any w~?  7"  , n :=\[ wl , in time O(n ) by e or t strt . : ting , rightmoslde , ' iva-6 on rela6ue to G if ' to ( iL(C ) , and , if w(L(O ) , by rejecting t its i . put . In . d dition , the algorithm , ~ hows liter
Valid PrefixI ' ropert ! l.
Proot 5The linear time eomph Ml , y follows since we only need a Ct ) ll Stltllt it lll OlllltOf additional steps per e on text-fi'cestepl or past and fulure  . DI , ' A(G ) is determined only once for each G ' . The VPP hohls since it holds fortlle contcxt-fi ' ec algorithm and fl dure additionally e  . sures that timctmpling is correct . ~1LR(k)-(?oupled-Context . .l"ree ( lI' ; tllllll~tl'Sl ' CSIlIl~\[lOm the above by resolving conflicts in I  ) I " A ( ( ; ) by add i . gsth ) okahead set to tim items which are involved in it conflict  . For this purpose , welsseLhem ; tppht gsb ' ll ~ ST ' ~~ tst ( Il " OLLOWk as defined fin " LL ( k )  ~  ( \] Oul ) led-Context-Free Grammars in \[ Pit94\] . There , these mappings are generalized such that they take the couplinl  , Imtweenthee Olll ) otleltts of eachlloiaterlllilla \] ilt too ; I . CCOIIIS ~ , illSte ; tdo\[working simply on C/"(G ) . Thus , wetre ; ttonly colnplete parentheses as ~ t contextfree I iotlters I lillal it lld thei '  ( ~ Slllt is much ltlo:eex ~ Lct as , e . g . , ill\[SVgl)\] . This results in an adequate generalization of the LR  ( k ) -notion for CCI"C . 
s . . . . w,-12 x@_,x~~~;?v/\]
Ix . . . t , r " l.t " i.l . . . .
L ; - .   .   .   .   . lq ,,- .   .   .   . x . , , l\[,- .   .   .   .   .   . l \]\[ . , .  ,,, . , . ., l \] , I -: l . \['1\[-C-:J:~Z:jIA ; : Y , SbqI ~; , ) , (1 \[:?;- , ,: , ~:~ . JE xample 2 The lanyuage a " b " c " d '*\]" n > l general cd by the gmut  . u . " inl '): rttmple1 shows the . LR(O ) - properly . 
DFA(G ) is shown i . Figure 4.
l~x,~,~q,h,:t 7'/, e:l . ,, . ,, . : . , ( , w $ , , , l w ~ . , ~,')  . , o&ni,,q cross-seri(dcpemh'ncicsc . nbe . qencroled by lheLR(l)-r .   .  , ,  .  ,  . , s . ( s , ( . _5 x )), , , . , I ,, /', s ) ~? cro(2),, . .,, e P : :  s -~ x , x , ( x , x )-~ ( . x , , , x ) lO , x , ~ x)I(~,~:) . 
References\[I)P89\],1 . I ) assow , C . P , ~ . n : Regulated Reweiti . gits For-rn . ll , m~gem9e77 wory . Springer 11989\[G1169\]S . A . Greibach , J . E . /\[ opcroft : Seallercd Con?lexl(;r . mmnrs . J . (9 olnp , lt . Syst . S(:i . 3(1969), pp . 232-247\[CHI91~\]Y . Cluan , C . llotz , A . Reichert : Tree (: ramrn . rs with mulliline m " lnte ~7 . ' el all on . Technical Report , Univ . Saarbrik : lu : n1992\[(\]ua92\]Y .  (' , II&SHl(lammer qraramatiken , Nelzgrmmna-like nundl . lerp relalioneny on Nelzen . PhD thesis , U'niv . , q~tarbrlicken 199'2\[1IP94\]G . llotz , (', . Pitsch : It . stIIrdform Annlysis of Coupled-Oonle : rl-l " ree ( /rammm's . In Pro(: . of
ICAI , P'g4\[liigS,l\] . 1 . Iliggin both am : l';nglish is no la Contexl-f , Yee Langu . ye . lang . lilquiry 15 (1984), pp . 225-235\[,112\['75\]A . K . Joshi , I, . S . l,evy,M,TakMm~hi:7) ' eeAdjunct(h'amut,rs . , I . Comput . , Syst . Sci .  10 (1975) . pp . 136-163\[, Ios85\]A . K . , Ioshl . Tree Adjoinim . ! CT v l m m . rs:llowMuch Conle:vl- . $' ensilivity is I~equired to Ptvvide Heasomd de Sh ' uelural Descriptions  . In Natural\[ , ; tnguage Parsing , ( ~ ambridge U , iver . .fity Press 1985, pp .  206-2/;0 \[ . los87\]A . K .   . Ioshi:hsh ' oduction to Tree Adjoin in 9(; r . z t t z t t a r s . lit Ma . thematics of Language , John
Bel Liaminsl ' ublishing Comp ~ uty 1987\[Knu 65\]D . E . Kntttls . On the Translation o/Languages from Left 1o IN flht . I . formation ; und Controlg (1965), pp . 607-(; 39 SP it 93\](\] . Pitsch : An(llyseyonl(lammer!lrmnm . tiken . 
l'hl ) thesis , Univ . ~t ~ trbrfi(:ken1993\[Pitg,l\](\] . Pitsch:LL(k)l'ars in 9 of Couple , l-Oonh:: , : l -/" tee(/r . mmnrs . to iq ) peal i ik ( iJ Omlmt ; t Lional
Inlelli ~ en (: e199, t\[ . qhia /;\] . q . .qhielmr . I ' ; videm : eagain*stUonleittl / " reeness of Natm'alL , nguage . Linguistics and Philosophy 8(198(i ), pp . 333-3,13\[SV!)0\]Y . Schid)es , K . V i . iay- , %:tnl ( er : Deterministic Left Io I?dght Pars in 9 of 7Yce Adjoining Lmt-9uages   . ACI , '90, pp . 276-283 Figured : I .   .   .   . a " b " c " d " ln ' ~1)
