An Education and Research Tool for Computation a l Semantics 
Karsten Konrad1 , Holger Maier1 , David Milward2 and Manfred Pinka P
( t ) Coinputer linguistik,
Universitgt des Saarlandes
66041 Saarbriicken , Germany
konrad , maier , pinkal@coli.uni-sb.de
(2) SRI Internal ; ional,
Suite 23, Millers Yard
Cambridge , CI \]21 RQ , GB
milward~cam.sri.com

This paper describes an interactive graphical environment for computational semantics  . The system provides at eaching tool , a standalone extendible gra-pher , and a library of algorithms together with test suites  . The teaching tool allows users to work step by step through derivations of semantic representations  , and to compare the properties of various semantic formalism such as Intensional Logic  , DRT , and Situation Semantics . The system is freely available on the Internet . 
1 Introduction
The CT , EARS tool ( Computational Linguistics Education and Research Toolin Semantics  ) was developed as part of the FraCaS project 1 which aimed to encourage convergence between different semantic formalisms  . Although formalism such as Intensional Logic , DR ? l ' , and Situation Semantics look different on first sight  , they share many common assumptions , and provide similar treat-meats of many phenomena  . The CLEARS tool allows exploration and comparison of these different formalisms  , enabling the user to get an idea of the range of possibilities of semantic onstruction  . It is intended to be used as both a research tool and a tutor iM tool  . 
The first part of the paper shows the potential of the system for investigating the properties of different seinantic form Misms  , and for teaching students formal semantics . The next section outlines the library contents and the system architecture  , which was designed to reflect convergence between theories  . The result is a highly modular and , we beliew ~ , a highly flexible system which 1A lh'amework tor Computational Semantics , F , u-ropean Community LRE62-051 . 
sapp(1, 2) np vpi did
IIp nv\]la!ghsanna
XA . ~? A(B )) ~ C , laughs(C)
Figure 1: Initial ffep resentation of annalaughs with Aq ) ll ' allows user prograrns to be integrated at various levels  . The final part of the paper describes the grapher which was designed as a standalone tool which can be used by various applications  . 
2 A Tutorial System for
Computational Semantics
As a tutorial tool , CI , PArtS allows students to investigate certain t brmalisms and their relationship  . It also provides the possibility for the teacher to provide interactive demonstrations amito produce example slides and handouts  . 
In this section we show how a user can interactively explore the step-by-step construction of a semantic representation ut of a syntax tree  . Figures 1 and 2 show a possible initial display for the sentence " Annalaughs " in a compositional version of I  ) RT ( Bos et al , 1994) and in ' Montague
Grammar'(Dowty et al , 198:1).
The user controls the semantic construction process by moving to particular nodes in the derivation tree  , and performing operations by using mouse double -clicks  , or by selecting froln a popup menu . For example , clicking on app(2 , 1) app(2 , 1) n p v p i d i d p n v f I an n a l a u g h s a n n a X A . laughs(A)
Cman(C )

Ioves ( C,J ) woman ( J)
VC . (man(C ) ~3J . (Ioves(C , J ) ^ woman ( J ) ) ) Figure 4: ' I ' rans lating I ) IT to Predicate Logic li'igure 2: Initial Representation of Annalaughs with ' Montague Grammar's laughs  ( anna ) 
I .. app(2,1)/Nn pvp
Iir A . laughs(A )) nvn naia!qhs annakA . laughs ( A ) - Figure 3: Final Representation fAnna laughs in ' Montague -Grammar ' in the tree shown in l?igure  2 has the effect of applying the lambda-ext ) ression lA . laughs ( A ) to an na . The resulting display is given int , ' igure 3 . 
The poI ) -up menu allows a user to per-t brm single derivation steps  . For example , the user can first form an application term AA . hmghs ( A )   ( anna ) and then reduce this at the next step . Menu options include the possibility of cancelling intensional operators  , performing lm nb da reduction , applying meaning postulates , and \[) R Smerging . The glenn also allows a user to choose whether or not to perform quantifier storage or discharge  , and thereby pick a particn-larreading for a sentence  . Alterxlatively the user can choose to fully process a node  , in which case all readings are simultaneously displayed  . 
3 Comparing Theories
A major use of the tool is for comparison of different semantic theories and methods of semantic construction  . To a kl comparison of theories , there are translation routines between some semantic tbrmalisms  . For example ,  \] , ' igure 4 shows a translation from a DS to a formula in Predicate Logic  . 
The user can try out various options for semantic construction by using a menu to set various parameters  . An illustrative subset of the parameters and their possible va  . lues is given below : semantic for ntalism l , ogic of Generalized Quantitiers , lntensional Logic , 
Compositional 1) RT ( Muskens , 1993),
Aq)R'F ( Bos et al ,  1994) , ' lbp-l ) own-DlT ( Kamp and Reyle ,  \[993) , 
Situation Semantics.
granllnar simple PSG , PSG with features,
Categorial Grammar with features.
parser topdown , incremental ( for CG only).
lexicon simple lexicon , lexicon with features.
syntax-semantics mai ) plng rule-to- . rule , syntactic template . 
syntax-semantlcs (' onstruetlonserial , parallel.
subject applied to verb phrase yes , no.
quantifier storage me (: hanism
Cooper Storage ( Cooper , 1983),
Nested Cooper Storage ( Keller , 1988) fl-reduction unification based , substitution based . 
10994 The Library
Because a tutorial system of this kind has to be based largely on standard routines and algorithms that are fundamental for the area of computational semantics  , a secondary aim of the project was to provide a set of well documented programs which could form the nucleus of a larger library of reusable code for this field  . Most of the library contents correspondirectly to particular values of parameter settings  . However there are some extralibrary routines , for example a very generalised form of flmction composition  . The library is being expanded with routines for semantic on struc-tion driven by semantic types  . It is also intended to integrate a wider range of grammars  , parsing strategies and pronoun resolution strategies  . For program documentation we largely have followed the approach taken in LEDA  ( Ngher ,  1993)) . 
Apart from the routines concerned irectly with computational semantics  , there are also routines designed to aid application developers who want to provide a graphical output tbr semantic representations  . These routines are mainly concerned with translating from Prolog syntax into the description string syntax used by the CLiG grapher  . 
Currently they rely on the Tcl/Tk library package provided by Sicstus  3  . 
4.1 Modularls at lon Principles
A standard approach to modularisation is to split a problem into independent black boxes  , e . g . a grammar , a parser etc . This topdown modulari-sation is then followed by some bottom-up mod-ularisation in the sense of supplying general utilities which each of the larger modules can use  . For this application , such an approach adobvious in-adequacies . For example , there are subtle differences in some steps of quantifier storage according to the formalism being used  , similarly , differences even in lambda reduction ( for intensional logic it is natural to interleave the step of operator can-eellation between / ? -reductions  )  . Even the parsing stage cannot be totally independent unless we generalise to the worst case  ( the Situation Semantics fragment requires an utterance node as well as a sentence node  )  . 
One of the aims in building the tool was to show where semantic formalisms converge  . Thus there was theoretical motivation to ensure components of the system were shared wherever possible  . 
There was also practical motivation , since there is more chance of finding errors in shared code  . The solution adopted was to use parameterised modu-larisation  . This allows differences to be located in as small pieces of code as possible  ( e . g . single lines
I parameterised no eformation 1
I semantic construction I
I parameterised extraction from nodes 1---
Figure 5: Architecture of apm't of the Syntax-Semantics lnt  , erface of tile quantifier storage routine ) , with the parameters picking up the correct ; piece of code at runtime . There are some small costs due to indirec-tion ( instead of calling e . g . a /?- reducer directly , a program first calls arout in e which chooses the /?- reducer according to the parameters  )  . But with these parameterisation layers we provide natural points where the system can be extended or modified by the user  . The approach also gets rid of the need to create large data structures which include information which would be relevant for one choice of parameters  , but not the current choice . For example , in parsing , a parameterised level chooses how to annotate nodes so that the syntax trees only have the relevant inibrmation for the chosen syntax -semantics strategy  . The architecture is illustrated in Figure 5 . 
The result of the parameterised approach is a system which provides several thousand possible valid combinations of semantic tbrmalism  , grammar , reducer etc . using a small amount of code . 
5 The Graphical Interface
A major part of our work on the educational tool was the development of a general graphical browser or grapher for the graphical notations used in computational linguistics  , espe-ciMly those in computational semantic such as trees  , Attribute-Value-Matrices , EKN ( Barwise and Cooper , 1993) and 1) RSs . The grapher was
Ii 00 written in Tcl/Tk , a programming system tbr develop in graphical user interfaces  ( Ousterhout ,  1994) . Two attrilm tes of Tel/Tk which were important l br this applie at tion were thel  ) rowision of translation routines from graphic can vasses into Postscript  ( allowing generation of diagram such as Figures 1 to d )  , and the ease of providing scaling routines for zooming  . 
The grapher was designed to be extendible for future al  ) plications . Graphical structures are described using a ( les ( :ril ) tion stritlg , a . plaintext hi--erarchical description of the object to be drawn without any exact positioning information  , l , ' or example , the following tree:

A is created by the description string : tree plaintext"S"plaintext"NP"plaintext"VP " CLIG Call display hale  , active graphicals lA'llcl ; llres which a Jlowtim user to perform actions by clicking on mouse-sensitive regions ill the display are  ; ~ . 
The grapher and an underlying application therefore can be haw  . ' in a way that the grapher is not only a way to visual * s the data of t  ; he application , but also provid c . s are al interface I ) etween user and af ) plication . 
6 Availability of the System
The system ( ' urrently requires Sicstus 3 plus'\['cl version 7  . d and ' l'kw ; rsi on 4 . 0 ( or later versions ) , lit , is awfilabl cat the ' ftp address : ftp . coli . uni-sb . de:/pub/fracasor on the
WWW at the UI/J ,: http://coli . uni-sb , de/~clears/clears , html l ; urther ( to eumentation f the ' system is given in ( l , ' raCaS , 1996a ) and ( FraC , aS , 1996b ) , which are available from : http://www , cogs ci . ed , ac . uk / ~ fracas / 7 Conclusion Initial reactions to demonstrations of the educational tool suggest that it has the potential to become a widely used educatioual aid  . We also believe that the program siml ~ lemented and document edit * this work provide the nucleus of a larger library of rens ab\[e programs for computational semantics  . Our current plans a . retotest t;\[l (' , system with a wide ( : lass of users to discover areas requiring extension or modification  . A longer term aim is to integrate the system with existing grammar develol  ) ment environments . 
Acknowledgements'l'his work would not have been I  ) ossible without the encouragement and support of the other men > hers of the l " ra  ( ~ aS Project . We . would especially like to thank Ih ) bin ( , ' ooper , Mass * me Poe . sio and Stevenlhdman for e on tril ) utions to the code . 
References . J . Barwise and R . Cooper .  1993 . Extended l(anq ~ notation . In Y . I ( at agiri P . A(:zel , 1) . Israel and S . Peters , editors , Situation 7' heorg and its Application Vol . 3, chapter 2, t ) ages 2954 . CSIA,

J . Bos , E . Mastenbroek , S . McClashan , S . Mil-lies , and M . l ' in kal .  1994 . A composition all ) iS-based\['orm ~ dism for nip applic ; ~ tions . In Proceedings of the International Workshop on Computational  , 5' cmanlics , pages 213 , 

11 . ( JOOl)er .  1983 . Q'uanlificalion and 5' gnlactw
Tttcory . SI , AI '. leidel , 1) ord recht.
I ) . l ) owty , R . Wall , and 8 . Peters .  1981 . Introduction I . o Monla(lUC , %: man * its . SI , AI' . t/x~ide\[,
I ) ord vecht.
FraCaS . 1996a . Ih , il ( ling the framework , l " racas
I ) eliver ~ d ) lcl ) J 5.
l " ra (: a S . 1996b . I . J singtim framework . Fracas
Deliverable 1) 16.
1 l . l(amp and 11 . lt . (: yle .  1993 . l ') zmtI ) is cours (' to
Logic . Kluwer , l ) or drecht.
W . Keller .  11988 . Nested coopers to rag < In U . Reyle and C . Rohrer , editors , Natural Lan-(tltag (' ~ Parsing and Ling . uistic Theories , pages 432447 . i / , eidel , 1) or dree ht . 
If . Muskens .  1993 . A compositional discoul:se representation theory . In P . l)ekker and M . Stokhof , editors , I ' rocecdings of the 9thA'mosterdam Colloquium , pages 46748(5 . IIAX\],Uni- . 
versity of Amsterdam.
S . Niher .  1993 . Le ( lama nu M version 3 . 11 . ' Ib . chni-eell ~ eport MP1-I-93-109, IHa . x-Planck-lnstitut fiir Infornmtik , S ~ . ~arbriicken , I " ebru ~ ry . 
a . Ousterhout .  1994 . " Fcl and the 7'k 7' oolkii . Pro--fessional Computing . Addison-Wesley , Ieading,

ii01
