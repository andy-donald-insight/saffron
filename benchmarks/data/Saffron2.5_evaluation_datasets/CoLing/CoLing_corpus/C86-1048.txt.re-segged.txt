Tree Adjoining and Head Wrapping ~
K . Vijay-Shanker David J . Weir Aravind K . Joshi
Department of Computer and Information Science
University of Pennsylvania
Philadelphia , PA 19104

In this paper we discuss the formal relationship between the classes of languages generated by Tree Adjoining Grammars and Head Grammars  . In particular , we show that Head Languages are included in Tree Adjoining Languages and that Tree Adjoining Grammars are equivalen to a modification of Head Grammars called Modified Head Grammars  . 
The inclusion of MHL in HL , and thus the equivalence of HG's and TAG's , in the most general case remains to be established  . 
1. Introduction
This paper discusses the relations tfip between Tree Adjoining Grammars  ( TAG's ) and : Head Grammars ( HG's )  . TAG's and HG's , introduced to capture certain structural properties of natural languages  , were developed independently . 
TAG's deal with a set of elementary trees which are composed by means of an operation called ad joining  . HG's are like Context-free Grammars , except for the fact that besides concatenation of strings  , string wrapping operations are permitted . TAG's were first introduced in 1975 by Joshi , Levy and Wakahashi\[3\] . Joshi \[2\] investigated some formal and linguistic properties of TAG's with local constraints  . 
The formulation of local constraints was then modified and formal properties were investigated by Vijay-Shanker and Joshi  \[9\]  . The linguistic properties were studied in detail by Kroeh and Joshi  \[5\]  . HG's were first introduced by Pollard \[6\] in 1983 and their formal properties were investigated by Roach  \[7\]  . It was observed that the two system seemed to posses similar generative power and since they also appear to have the same closure properties  \[7  , 9\] as well as similar parsing algorithn ~\[6 , 9\] a significant amount of indirect evidence existed to suggest hat they were formally equivalent  . In the present paper , we will attempto provide a characterization f the formal relationship between HG's and TAG's  . In \[10\] we consider various linguistic aspects of the relationship : in particular what might be referred to as the strong equivalence of the two formalisms  . 
Vijay-Shanker and Joshi \[9\] provided a brief description of the intuition behind the inclusion of Tree Adjoining Langages  ( TAL ) in the class of languages generated by a variant of HG's called Modified Head Grammars  ( MHG's )  . In the present paper , we give a proof of this result as well as a proof for the inclusion of Modified Head Languages  ( MHL ) in TAL : hence we show that MHG's and TAG's are equivalent  . This result is presented in section 3 . In section 2 , we discuss the relationship between MHG's and HG 's  . 
J " This work was partially supported by NSF grants  MCS-82-19116-CER   , MCS-82-07294 and DC1~-84-10413 . We are grateful boTony Kroch and Carl Pollard for valuable discus~sions  . 
1.1.'. ? ree Adjoining Grammars
Definition 1 . A TAG is a 54 uple G -= ( VN , V . r , S , I , A ) where Vlv and VT are finite sets of nonterminals and terminals respectively  , S is a distinguished nonterminal , I is a finite set of initial trees and A is a finite set of auxiliary trees  . 
Initial trees and auxiliary trees have the following form : /\ ~ V  . w ~ w z ~ V x " x ~ V ~ figure 1 . l Except for one node , which is called the foot node , all the nodes in the frontier of an auxiliary tree are labelled by terminal symbols  . The foot node is labelled by the same nonterminal syrnbol as the root  . All initial aud auxilia : 3 r trees , referred to a selement a :- y trees , have a height of at least one . 
We now define the adjoining operation . Let ~ be some node labelled X in a tree % Let fl be an auxiliary tree with root and foot labelled by X  . The tree obtained by adjoilfing flat r/is given in tigur c  1  . 2 . 
LLVvu'v,/f ""/ Z figure 1.; ~

The subtree under ~ is excised from % the auxiliary tree \[~ is inserted in its place and the excised subtree is inserted at the foot of / ~  . 
As defined above it is possible to adjoin any auxiliary tree at a node as long as the label of the node was the same as that of the root and the foot of the auxiliary tree  . How- . 
ever , in general , adjoining will be constrained ss follows . 
Associated with each node is a selective adjoin ing  ( SA ) constraint specifying that subset of the auxiliary tree which can be adjoined at this node  . Trees can only be included in the SA constraint associated with a particular node if their root and foot are labelled with the same nonterminal that labels the node  . There are two special cases : ( a ) the subset specified by SA is the entire set of auxiliary trees ~ in this set specified is empty i  . e . , no adjoining is possible . We call this the null adjoining ( NA ) constraint . A node may be associated with a a socalled obl igatory adjoining  ( OA ) constraint which can be used to ensure that an adjunction is obligatorily performed at a node  . 
Example 1 . 1 We now present an example TAGG , which illustrates the notation used to specify the constraints associated with a node  . There is one initial tree a and two auxiliary trees fll and  f12:   0  ( : So ~: A " figure 1 . 3 Having introduced SA and OA constraints , we must extend the definition of the adjunction operation  . Suppose we adjoin an auxiliary tree flat a node y of a tree ~/ producing the tree ~'  . For those nodes in ~' that do not correspond to nodes of f l  , the constraints remain the same as those in % The remaining nodes in  "7 ~ have the same constraints as those for the corresponding nodes of ft  . For example , consider a sample derivations in the grammar G as given below in figure  1  . 4 . We use an * to indicate the node at which adjunetion is performed  . 
I h
I figure 1.4
We will now present an alternative ( yet equivalent ) definition of the adjoining operation . So far , our definition allowed us to adjoin only with auxiliary trees  , and allowed adjunetion only into sentential trees  . This can be generalized to allow adjunctions of any tree derived from an auxiliary tree into any derived ti'ee  . Consider the derivation given in figure 1 . 4 . Given this generalization of adjunetion , we can also derive the same tree q2 by composing trees in the following sequence . 
The derived auxiliary tree "-/~ can be obtained by adjoining  f12 infl ~ . ~/ ~ can then be adjoined in a to give q ~ . Notice that trees derived from an auxiliary tree fl  , will always have the property that their root and foot are labelled with the same nonterminal as those offt  . Viewing a derivation in this manner considerably simplifies several proofs of formal properties of ' rAG's  \[9\]  . 

O ~ S ~ 5 ~ S r ~ figure 1.5
We use the notation P ( 3 ) to denote the set of trees derived from the elementary tree  3 using 0 or more adjunctions . 
The tree set T(G ) of a TAGC is T(G ) = U , ~ IP ( a ) . 
The string language L ( G ) generated by a TAGG is given by L ( G ) = wI " is the frontier of some " y in T ( G ) Now we can see that tile language Lt , generated by the example grammar G , is L1 = : a'~g bnfcnh\]n > 0 It is useful to further generalize the notion of a derived tree to include trees derived from subSrees of elementary trees  . If is a node in some elementary tree , then P ( ~ ) represents the set of trees derived from the subtree rooted at y  . Nodes are represented using an extension of the tree addressing scheme of Gorn  \[11  . Each node in an elementary tree is given a unique name in the following manner : the pMr  ( % e denotes the root of ~ , ; if (% i is a node in % then (3 , i . j ) represents the jth daughter of this node . 
1.2.t lead Grammars
Before giving the formal definition of I : lead Grammars  , the notion of a beaded string will be described  . A headed string is a string of symbols containing one distinguished symbol referred to as the head of tile string  . Formally , this can be represented as a pair consisting of a string w and an integer that indicates the position of the \] lead in the string  . 
In this paper , we use one of two notations to denote this string : when we wish to explicitly mention the head we use the representation  wlSw2 where wlaw2 = - w ; alternatively , we can simply denote the headed string by ~' . This allows us to denote the headed empty string as ~  . 
Definition 2 . A Itead Grammar , G , is given by a 4-tupk ; ( VN , VT , S , P ) . Productions in P are of the form : A-~f(al ,   .   .   .   , a ~) or A-~alw here ACVN , a ~ either belongs to Vlvor is a headed string . 
fC\[ . J~1LCi , LLi , LRi , RC i , RLi , RRi We now define the operations LCi , LLi , and L Ri for iC1 ,  2 . Definitions of the other operations can be found in  \[6\] and are not given here , since Roach \[7\] has shown that there is a normal form for Head Grammars which only uses these operations  . 
LC\](Ul~U2 , V ) = ulafu2v , LC2(~ , vlh-~v2):: uvla2 v2 , LLI(ulSTlu2 , ~) = ul5 ~ lvu ~ . , LL2(ul~u2, V-)=ulal ~' u2, Lm(u , ~; ~, v)-~ . ~u  ~, LR2(u  ~ . ~, v ) = ~ lVa~u2 partial functions . Pollard's definition of headed strings includes the headed empty string  ( A )  . However , mathematically , A does not have the same status as other headed strings : for example  , LCI(A , ~) is undefined . In general , the term fi(~-T, .   .   .  ,~~, .   .   . , ~--~) is undefined when w-T = A . 
This nonuniformity has led to difficulties in proving certain formal results about Head Grammars  \[7\]  , and has caused problems in showing the equivalence of MHG's and HG's  ( see section 2 )  . 
The language generated by a HGG is defined as follows: 
L(G ) = wlS ~ : ~
Example 1 . 2 We now present a sample Head Grammar for the language  L1 = a " gb ' ~ fcr * hJn > 0 S  ~ LL2  ( S ,   , f ) , S---+ LL2 ( S2 , -f) , 
S~-.~LC2(-~, Sa ), $2--+"~ h,
S3---+ Ln2(S ~ , bc ), Sa-~nL2(S2, bc)1 . 3 . Modified Head Grammars We find it convenient to consider a formalism that closely resembles HG 's : referred to as Modified Head Grammars  ( MHG's )  . Instead of headed strings , MHG's have split strings . A split string has a distinguished position between two strings in V ~  , about which it may be split . We will denote a split string as Wl~W2 where wlw2 CVT . Notice that we can represent the split empty string as ATA  , though this will be denoted A whenever the context makes it obvious that we are referring to a split string  . In MHG's , there are 3 operations on split strings : W , C1 , and C2 , defined as follows:
W ( wl~w2, ul~u2) = wlu , Tu2w2
C1(WllW2,ul~u2) = WllW2ulu2
C2(WllW2,Ul~U2) = wlw2ul~u2
The operations C1 and C2 correspond to the operations LC1 and LC2 in ttG's . The operation W has been defined such that the split point of its second argument becomes the split point of the string resulting from application of the operation  ( like the HG operations LL2 and Lit2 )  . 
Since the split point is not a symbol but a position between strings  , separate operations corresponding to LL2 and LR2 are not needed . In addition , unlike HG's , which distinguish the two wrapping operations LL1 and LL2  , W suffices as a substitute for both of these operations  . Suppose Y ~ WlTW2 and Z ~ u~yu2 and we want X to derive W~lU~U2W   2  . This can be achieved with the following two productions : Zf ~ ~ el  ( A , Z ) and X-+W(Y , Z1~) . 
Example 1.3 We now give a MHG generating L~.
, 5'--~W(S ,, It ), S--~W(S2, f %),
S1"--+C2(a ~ , Sa ) , S2 ~ g~h , s ~ - ~ w(s ~ , Nd , ss- , w(s  ~ , Nd We will defer the discussion of both the formal and linguistic relationship between HG~s and MHG 's until section  2  . It is worth noting at this point that the definition of MHG's given here coincides with the definition of HG's given in are very closely related  . 
1.4. Tree Adjunetion and Wrapping
Before showing the formal equivalence of MHG's and TAG's  , it is instructive to consider the relationship between the wrapping operation W of MHG's and the adjoining operation of TAG's  . Suppose that we have the production p-X--~W ( Y , Z ) in a MHGG , and that we have two derivations from the nonterminals Y and Z deriving the headed strings  wltw2 and VlTV2 respectively . Given the production p , we can derive the split string wlvl lv2w2 from X . 
Suppose there is a derived auxiliary tree "7 correspond?ing to the above derivation of wl~w2  , from Y where the foot node appears at the split point  , as shown in figure 1 . 6 below . Also assume that there is a node ~/ dominating a subtree that corresponds to a derivation of  vl~v2 from Z where , as before ~ we assume that the foot node appears at the split point  . Consider the tree resulting from the adjunction of  *7 at the node ~? , also shown in figure 1 . 6 . The resulting tree can be thought of as corresponding to the derivation of the split string w l v l  ) v2w2 from X . 
w,t~va ~ oot figure 1.6
This example illustrates the basic intuition behind the constructions involved in the following proofs showing the equivalence of MHG's and TAG's  . 
2 . Head Grammars and Modified Head Grammars In this section  , we shall discuss the relationship between MHG's and HG's  . First we present he outline of a construction showing that for evel THGG there is an equivalent MHG G '  . We then briefly discuss the linguistic relationship between MHG's and HG %  . 
Suppose X ~ wl-hw2 . This headed string can be split in two ways : into the substrings wt and  hw2  ; or wl h and w2 . 
This depends on whether X is used in a left or right wrapping operation  . Since in MHG's we can only split a string in one place  , we use two nonterminals , X ~ and X r deriving wth ; w2 and Wl~hW2 respectively . Thus , for example , the production Z---+W(X ~ , Y ) can be used in place of Z~LL2(X , Y ) . A further complication arises when a headed string is split first to the right of its head and then the resulting string is split to the left of the same head  . The problem is resolved by introducing nonterminals X$h  , that derive split strings of the form wl~w2 whenever X derives wl-hw2 in the HG . We can reintroduce the missing head with the following productions : X~-~W  ( X Th , ht ) and Xr---+W ( X Th , Th ) Complete details of this proof are given in \[4\] . 
We are unable to prove the inclusion of MHL's in HL's  . 
The problems faced when attempting to find such a proof are a result of the operations in HG's not being total functions  . For example , CI(A , W ) is defined in MItG's , whereas LCI(~ , ~) is undefined in the HG's framework . We have not found any way of getting around this technical problem in a systematic manner  . All TAG's considered by the author so far have an equivalent HG  . We feel that the problem of the empty headed string in the HG formalism does not result from an important difference between the formalisms  . 
In the following discussion , we propose that MHG's can be given a linguistic interpretation if we retain the notion of a head terminal in a split string  . The split point should be viewed a ~ determining the position of the head  . As far as the authors are aware , Ilead Grammars for natural languages use only one kind of wrapping operation : either only the left wrapping operations LLi  , or only the right wrapping operations LRi . Thus , any headed string can be split on only one ' fide of the head  . For example , if wl-hw2 is a headed string , and only the left wrapping operations were used , then the headed string can only be split as wlh and w ~  . . For any HG using only left wrapping operations there exists an equivalent MHG such that split strings will have their split points in ~ nediately to the right of the actual head  . 
However , obviously not every MHG ( : an be given a linguistic interpretation it his way  . 
3 . Equivalence of MttG's and TAG , 's We will now straw that the class MIl L is equal to the class TAL  . The complete proofs for the results presented here are given in  \[4\]  . 
3.1.. Inclusion of TAL in MIlL
Based on the earlier observation concerning the similarity between the wrapping and adjoining operations  , we shall now present a scheme for transforming a given TAGG--  ( V t ? , VT , S , I , A ) to an equivalent MHG G '-( V\]~ , VT , S , P ) . 
In this section , we have generalized the concatentation operations of MHG's to be of the form Cj for j_>  1  . It is obvious that these operations can always be simulated using just  C1 and C2  . 
We shall first describe the algorithm convert informally  . 
If r\] is a node of some elementary tree '7 , applying convert to ~1 returns a sequence of productions in the MHG formalism capturing the structure of the subtree of q rooted at ~  . The wrapping operation is used to simulate the effect of adjunction  ; the concatenation operations Cie on catentate the strings derivable from the daughters of a node  . The choice of i depends on which child is the ancestor of the foot node  . The exact structure ' of a tree can be captured by using nonterminals that are named by the addresses of nodes of elementary trees rather than the nontermin Ms labelling tim nodes  . 
The main idea of our scheme is as follows . Let ( fl , i ) be the address of a node in an auxiliary treefl , and '7 belongs to P (( fl , i )) with a frontier WlXtO2 , We have a nonterminal corresponding to this node ( denoted by \[ fl , i \]) which derives the split string w at w ~ . . In particular , when ( f l , i ) is the root of fl(i . e . , i =: e ) , then the nonterminal \[ fl , c \] should derive the split strings WlTW2 whenever there is a tree in P ( fl ) with frontier WlXW2 . That is , the split point appears in a position corresponding to the foot node  . 
Thus , the wrapping operation W can be used to simulate the effect of adjoining in the following manner  . If ('7 , i ) is a node at which fl is adjoinable , we have a production corresponding to adjunction of flat  ( '7 , i ) . 
b , i \]- , w(\[fl , 4 , b , il ) where \['7 ,   i1 derives strings derivable from the children of ( '7 , i ) . We also have the rule \['7 , i \] - ~\['7 , i \] for the case when no adjunction takes place at  ( '7 , i ) . Since\['7 , i \] is supposed to derive strings derivable by the concatenation f the frontiers of subtrees dominated by the children of  ( '7 , i ) , we have the production , \[%i\]"-*Cj(\[%i .  1\]  .   .   .   . , \[% i . j \] .   .   .   .   . \['7, i . k \]) where @, i .  1>, . .  . , ('7, i . j > , .   .   . , ('7, i . k > correspond to the h children of ('7 , i ) and where the jth child is the ancestor of the foot node  . The operation Cj is used so that the split point appears in the same position as the foot node  . By convention , we let j be I when ( % i ) is not the ancestor of the foot node . 
We are now in a position to define the conversion process  . The algorithm is as fi ) llows : for each initial tree a , let S->\[a , e\]GP . 
for each elementary tree % call convert ( (% e ) ) where the procedure convert is as defined below . 
define convert (('7 , i )); case 1: (% i ) is a leaf node if ('7 , i ) has label a CiVTUA then step 1: add\[%i \] --+ artoP else \['7  , i \] is the foot node step 2: add \[% i \] -+ W ( \[fl , el , A ) for each f l in SA constraint of ('7 , i ) step 3: add\['7 , i \] -+ if ('7 , i ) does not have an OA constraint ; case 2: ('7 , i ) is an internal node and hask children step 4: add \['7  , i \]-~ W (\[ fl , e\] ,  \['7 , i \]) for each /3 in SA constraint of ('7 , i ) if ('7 , i does not have OA constraint then step 5: add \[3  , i \]- , \[%i\]if ('7 , i ) is ancestor of foot node then step 6: add\['7 , i \]- , C j (\['7 , i .  1\]  .   .   .   .   . \[ V , i . k \]) where j~h child dominates foot node ; if ('7 , i ) is not ancestor of foot node then step 7: add\[ '7  , i \[- , C1(\['7 , i .  1\], . .  . ,\['7, i'kl ) for 1 < j < k doeonvert((%i . j )) . 
We prove the inclusion of L(G ) in L(G') , by induction oll the height of the trees derived from all subtrees of elementary trees  , where the inductive hypothesis tates : For all elementary trees  "7  , and addresses i in q , if there is a tree "7' in P (('7 , i ) of height less than k , and the frontier of "71 = WlXW2 or wlw2 , then \['7 , i \]--~ wl~w2 . 
It will be easy to simw the inclusion of L ( G ) in L ( G ' ) by induction , considering steps 4 ,  5 , 6 and 7 . The base cases correspond to steps 1, 2 and 3 . 

We show the inclusion in the other direction by induction on the length of derivation of split strings in G '  . The induction hypothesis is given by : ir\[-~ , i \]_~~ , ~ Tw . , . in k steps , then there is a "~' c p((~ , i )) such that the frontier of q'is wlXw2 or wlw2 , depending on whether the foot node of % labelled by X if it exists  , is a descendant of <' ~ , i > or not . 
3.2. Inclusion of MHL in TAL
When we convert a TAG into a MHG , each elementary tree generates a set of productions  . The sets generated by any two distinct elementary trees are disjoint and  , furthermore , have a constrained form encoding the hierarchical structure of the tree  . The task of converting a MHG to a TAG cannot simply involve the inversion of this construction since it is not in general possible to find groupings of productions in a MHG that have the required structure  . 
The approach used to convert MHG's to TAG's is based on satisfying the following requirement : for each derivation in the MHG there must be a derived tree in the TAG for the same string  , in which the foot is positioned at the split point : i  . e . , X  ~ wHw2 in MHG if and only if there is a derived auxiliary tree " ~ having no OA constraints  , with root labelled X and frontier wlXw2 , Suppose we had derived trees corresponding to derivations for B and C  ( as shown in the center of figure 3 . 1) that satisfied the above requirement . 
We can capture the effect of each MHG production directly by associating exactly one elementary tree with each production  . For example , figure 3 . 1 illustrates trees associated with the productions A --~ CI  ( B , C ) ( on the left ) and A-~W ( B , C ) ( on the right ) . We position the foot node in the elementary trees to ensure that the split point and foot node appear at the same position  . When the tree corresponding to wrapping is used the string derived from B is wrapped around the string derived from C  . The foot of the resulting tree will appear immediately under the foot of the derived tree for C  . 
Coa
I figure 3.1
The TAG that we produce could be viewed as simulating rewriting of nontermin Ms  . Each rewriting corresponds to one use of the adjoining operation  . The NA constraints at the root and the foot node of each auxiliary tree ensure that each occurence of a nontermin ~ l is rewritten only once  . The OA constraints are used to ensure that every nonterminal introduced is rewritten  . 
We now present the complete construction . Without loss of generality , we will assume a normal form that uses productions of the following form : where A  , B , CeVN , a CVTtOA and feCI , C2 , W . 
The conversion proceeds as follows : 1 . If A-~T a 6PorA --+ at EP then include fll orfl2 in A respectively . 
#':A~~,:A#/\/\
A~mcLk , ~'2 . If A-~CI(B , include flaor f14 in A respectively . 
#~: A #/3,: A Z&o AC 0 ai iII
A#A,~A#3 . If A-~W(B,C ) ~ P then include f ls . 
f l ~ : A #
J5 oa

CoAi

The set I of " initial trees consists of the single tree a : ~ X:  t5   0  , I


We prove that L ( G ) C_L ( G ' ) by induction on the length of the MHG derivation . We show that if X = % wlTw = then there is a derived auxiliary tree having no OA constraints  , with root labelled X and frontier wlXw2 . 
We prove that L ( G ' ) CL ( G ) by induction on the height of the " rAG derivation tree  . We show that if qEP ( fl ) , has no OA constraints , and has frontier wlXw2 then X = % wlr w2 . 
While straightforward , the proof given above does not capture the linguistic motivation underlying TAG's  . The auxiliary trees directly reflect the use of the concatenation and the wrapping operations  . It is also interesting to note that a consequence of the equivalence of MHG's and TAG's and the construction used in proving the inclusion of MHL in TAL is that we have the following normal form for TAG's  . 
For any TAG there is an equivalent TAG with exactly one initial tree and auxiliary trees which are of five possible forms shown above  . 
C ) EP or A---+C2(B,C ) 6P then 4 . Conclusion In this paper we have shown the equivalence of TAL and MHL  . Since we have also established the inclusion of HL in MHL we have shown that HLs are included in TALs  . The inclusion of MHL in HL , and thus the equivalence of HG's and TAG's , in the most general case remains to be established We briefly discuss the relationship between MHG's and HG's and argue that it is close  , both linguistically and formally . Figure 4 . 1 provides a summary of these results . 
I'3HL .%1" figure 4.\]1.
Reference u\[1\]G or n,S . 1962 Processors for infinite Codes of the Shannon . .Fano type , Proc . of Syrup . Math . Theory of

\[2\] doshi , A . K . 1983 How Much Contcxl . -- Sensltivity is Necessary for Characterizing Structural Dcscriptkms-Tree Adjoining Grammars  , in Natural Language ; Processing - - - Theoretical Computation alnd Psychological Perspectives  , eds . D . Dowry , L . Karttuncn , A . Zwicky,
Cambridge University Press , Ncw York.
\[3\] Jostfi , A  ~ K . \], cvy , L . and Takahashi , M . 1975 TrecAdjunct Grammars . Jour . Comp . \[? ys . Sci . 10(I ):: 136-1 . 63 . 
\[4\] Joshi , A , K . , Vijay , - Sllanker , K . and Weir , \]) . .\] . 1986 Tree Adjoining Grammars and . lIead Grammars , Tech . 
Rep . ~ MS-CIS-86-\],\]) ept . of CIS , Univ . of Penn sylw ~ . -nia . 
\[51 Kroch , A . and , Ioshi , A . K . 1985 The Linguistic R . cl--evance o1!Tree Adjoining Grammars , Tcch . ILep . , MS- . 
CIS-85~18, Dept . of CIS , Univ . of Pennsylvania.
\[6\] Pollard , C . 1984 tIead Grammars . Ph . \]) . dissertation,
Stand \] oral Univ ., California.
\[71l Loaeh , g . 1984\]) brmalProperties of ilead Grammars , Manuscript , S1; and fl ) rdUaiversity . To appear in Math-ematies of Language , ed . A . Manaster-l ~ amer , Amsterdam : John Benjamins . 
\[8\] Rounds , W . C . 1985 LFP : A Logic for \] , inguistie \] ) e-seription : ~ and an Analysis of its Complexity , Unpublished Manuscript , Univ . of Mich . , Ann Arbor , Sept 1985 . 
\[9\] Vijay-Shanker , K . and Joshi , A . K . 11985 Some Compu . .
rational Properties of Tree Adjoining Grammars . Proc . 
of 23rd Meeting of Assoc . Comp . Ling ., 8293.
\[1 . 0\] Weir , D . J . , Vijay ~ Shanker , K . and Joshi , A . K .   1986 The Relationship Be Lween Tree Adjoining Grammars and Head Grammars  , Proc . of 24th Meeting of Assoc . 
Comp . Ling.

