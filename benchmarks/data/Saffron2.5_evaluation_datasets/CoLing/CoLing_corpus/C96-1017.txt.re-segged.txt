Arabic Finite State Morphological Analysis and Generation 
Kenneth R . Beesley
Rank Xerox Research Centre
Grenoble Laboratory
Le Quartz
6, chemin de Maupertuis
3824 OMEY LAN

ken . beesley@xerox , fr

This paper describes a largescale system that performs morphological analysis and generation of online Arabic words represented in the standard orthography  , whether fully voweled , partially voweled or unw ) weled . Analyses display the root , pattern and all other affixes together with feature tags indicating part of speech  , person , number , mood , voice , aspect , etc . The system is based on lexicons and rules from an earlier KIMMO-style two-level morphological system  , reworked extensively using Xerox FiniteState Morphology tools  . The result is an Arabic FiniteState Lexical Transducer that is applied with the same runtime code used for English  , French , German , Spanish , Portuguese , Dutch and Italian lexical tran~ducers . 
1 Introduction 1 . 1 Chal lenges of Arab ic Morpho logy Semitic languages like Arabic present unusual challenges to automatic morphological analysis and generation  . The first challenge is morphotactic : whereas most languages construct words out of morphemes which are just concatenated one after another  , as in un-t-fail+ing-t-ly , an Arabic stem like daras(& , 3 . ~ )   1 is traditionally analyzed as consisting of a three-consonant root  , transliterated as drs(0~ . ~ ~) , which is interdigitated with a pattern CaCaC , where C represents a slot for a root consonant , sometimes termed a radical ; various prefixes and suffixes can then concatenate o the stem in the familiar way  . See Figure 1 . 
Similarly , the root klb(~, . c . ~"- J ) interdigitates with the same pattern to form katab  (   . ~ ; and 1The Arabic examples in this paper were produced using the Arab TeX package for TEX and ~: I'EX by: Professor Klaus Lagally  . 
Abstract lexical evel:
CaCaCwa ++ at drs
Abstract intersected level : wa+daras+at
Figure 1: Abstract wa-l-daras-l-at ( " and she learned/studied " ) the root brj (  . ~ j  ~ . ) iuterdigitates with the pattern taCaC-aC to form the steint a bar-aj  ( ~ . ~ . :) . 
There are perhaps 5000 Arabic roots in common usage , and about 400 phonologically distinct patterns , most of which are ambiguous . Each root can legally combine with only a small subset of the phonologically distinct patterns  , an average of about seventeen or eighteen , and this decidedly derivational process must be controlled by old-fashioned lexicography  . 
The second challenge is that standard Arabic surface orthographyseldom represents short vowels  , distinctive consonant length , and other potentially helpful details . The wa+daras+atexam-pie could conceivably be written fully roweled as wadarasal  ( ~ . aSJ ~) , but it is much more likely to appearms tile unvoweled wdrst  (  , ~ . ., p_~) . The re-suiting incompleteness of the surface orthography makes written text unusually ambiguous  , with an average of a hnost five valid morphological analyses per word  . Finally , Arabic orthography displays an idiosyncratic mix of deep morphophonological elements carried to the surface  , resulting in silent letters , and more surfacy representations of epen thesis , deletion and assimilation . 
1 . 2 ChMlenges of Arab ic Lexical Lookup Standard Arabic dictionaries like the Wehr-Cohen are organized by root head words liked rs  ( & , j ~) and ktb ( ~ . ~ a ) . In fact the roots by themselves able until they are combined with a pattern  . Because in orthographical words these root consonants or radicals are usually surrounded  , and even split up , by other consonant letters , and because the radicals themselves may be modified by assimilation or even deleted entirely in a written word  , root identification and dictionary lookup are significant challenges for learners and native speakers alike  . 
2 Goals
To be interesting in our applications , the Arabic morphology system had to have the following qualities :  1  . It had to deal with real Arabic surface orthography  , as represented online in standards such as ASMO 449 or the Macintosh Arabic code page ( ISO8859-6 )  . While it is possible to devise strict roman transliterations of Arabic orthography that are unambiguously convert-ible back and forth into real Arabi corthography  , most existing romanizations are in fact transcriptions that contain more or less information than the original and so represent different orthographical systems  . 
2 . It had to be able to analyze Arabic words as they appear in real texts  . This means timt input words may be fully voweled or diacriticized  ( i . e . supplied with full diacritical markings , a style of writing found only in religious texts , poetry , and writings intended for children and other learners  )  , partially diacriticized or undia criticized , which is the normal case . A single system had to handle undia criticized words and yet be able to take advantage of any diacritics that might be present  . 
3 . To facilitate lookup of words in printed and online dictionaries  , and for pedagogical purposes , the system had to return the root as an easily distinguished part of the analysis  . An easier to build , but less useful , system would simply deal with complete stems rather than roots and patterns  . 
4 . The system had to be large and open-ended , with each root coded to restrict the patterns with which it can in fact cooccur  . 
5 . It had to be efficient and accurate , successfully analyzing hundreds or thousands of words per second on commonly available workstations and higher-end PCs  . 
6 . It had to perform efficient and accurate generation of valid surface forms when supplied with the component root and relevant feature tags  . Analysis and generation had to be straightforward inverse operations  . 
Forest of Lexicon " Letter Trees "
Trees are connected by " continuation classes YA letter path through the trees is an abstract word  . 
Rules hand-compiled into FSTs
The intersection of the rules is simulated in code . 
Rules allow and control the discrepancies between the abstract words in the lexicon and the surface words being analyzed  . 
Figure 2: Traditional Kimmo-Style System Architecture 3 History In 1989 and 1990  , with colleagues at ALPNET ( Beesley , 1989; Beesley , Buckwalter and New-toil , 1989; Buckwalter , 1990; Beesley ,  1990) , I built a large two-level morphological naly zer for Arabic using a slightly enhanced implementation of KIMMO-style two-level morphology  ( Koskenniemi ,  1983 , 1984; Gajek , 1983; Karttunen ,  1983) . 
Traditional two-level morphology ( see Figure 2) , as in the publicly available PC-KIMMO implementation  ( Antworth ,  1990) , allows only concatenation of morphemes in the morphotacties  . Lexicons are stored and manipulated at runtime as a forest of letter trees  , with each trectypically containing a single class of morphemes  , with the leaves connected to subsequent morpheme trees via a system of " continuation classes "  . A letter path through the lexieal trees from a legal starting state to a final leaf defines an abstractor " lexical " string  . The various two-level rules , which had to be hand-compiled into finite-state transducers  , were run in parallel by code that simulated their intersection  . The rules allowed and controlled the variations between the lexical strings and the surface strings being analyzed : thus the Arabic surface word wdr sl  ( ~5 , ~ ja ~ ) could be matched with the lexical string wa+daras + al  , among others , via appropriate rules . 
In the ALPNET Arabic system , roots and pat=terns were stored in separate trees in the lexical forest  , and an algorithm , called Detouring , performed the interdigitation of semitic roots and patterns into stems at runtime  . The other chal-thography , including varying amounts of diacritical marking , all succmnbed to rather complex but conq ) letely traditional two-level rules . Whih " the resulting system was successfidly sold and is also currently being used as the morphological engine of an Arabic project at the University of Maryland  , it suffers from many wellknown limitations of traditional two-level morphology  . 
1 . As there was no automatic rulc compiler available to us  , the rules had to bccompiled into tinite-state transducers t  ) y h and , a tedious task that often influences the linguist to simplify the rules by postulating a rather surfacy lexical level  . Hand-compilation of a complex rule , which can easily take hours , is a real disincentive to change and experimentation  . 
2 . Because there was no algorithm to intersect the rule transduccrs  , over 100 of them in the ALPNET system , th cy are stored separately and must each be consulted separately at each step of the analysis  . As the time necessary to move a rule transduc cr to a new state is usually independent of its size  , moving 100 transducers at runtim c cat , be 100 times slower than moving a single intersected transducer  . 
3 . Because the lexical letter trccs in a traditional Kimmo-style system are dccor at cd with glosses  , features and other miscellaneous information on the leaves  , they are not purc finite-state machines , cannot bc combined into a single f sm , cannot be composed with the rules , and have to be storcd and run as separate data structures  . 
4 . Various diacritical fcatures inscrted into the lexical strings to in surc proper analyses made this and other KIMMO-stylc system sawkward or in  , practical for generation . 
5 . Finally , in the enhanced ALPNI , ; T implementation , the storage of almost 5000 roots and hundreds of patterns it , separate sul ) lcxi cons saved memory space , but the l ) etouring operation that interdigit at cd them in r caltime was inherently inelficient  , building and then throwing away many superficially plausibles terns that were not sahctioned by the lexicon codings  . ( Any Arabic root (: at , combine legally with only a small subset of the possible patterns  . ) With building phantom stems and the unavoidable backtracking caused by the overall deficiency and ambiguity of written Arabic words  , the resulting system was rather slow , analyzing about 2 words per second on a small IBM main frame . 
Abstract lcxical level :\[ drs & CaCaC\]
Abstract intersected Icvcl : daras
Figure 3: Intersection of Lexically Consecutive
Root and Pattcrn
Abstract Icxical lcvcl:\[drs&CVCVC&aa\]
Abstract in tcr scct cd level : daras
Figure 4: Intersection of Lexically Consecutive
Root , CV-Template , and Voweling 4 Reimplementation Work began in 1995 to conver the analysis to thc Xeroxfst format . The ALPNET lexicons were first converted into the format of lexc  , the lexicon c ( ) mpiler ( Karttnnen and Beesley ,  1992) . Al-thongillex c by itself is largely limited to concatc-native morphotactics  , just like traditional two-level morphology , it was noted that the interdig-itation of semitic roots and patterns is nothing more or less than their intersection  , an operation supported in the Xerox finite-state calculus  . Thus if ? represents any letter , and C represents any radical ( consonant ) , the root drs ( tY'- )  ~ ) can be interpreted as ?* d ? * r ?* s ?* . 
The intersection of this root with the pattern CaCaC yields the stem daras  ( t y , 55) . See Figure 3 . 
In s ( ) m canalyses ( e . g . McCarthy ,  1981) , the voweling of the pattern is also abstracted out  , leaving pattern templatcs like CVC VC and a vocalic elemen that cat  , bcformalized as ?* a ?* a ?* . 
If V represents a vowel , then the intersection of the root , ten , plate and vocalic elements yields the same result . See Figure 4 . 
Using standard Ol ) crations availabl c through the lexc compiler and other finite-state tools  , the analysis can be constructed according to the taste and necds of the linguists  . 
Because the upper-side string is returned as the result of an an Mysis  , it is often more helpful to define the upper-side string as a baseform  ( here a root ) folh , wed by a set of symbol tags designed to represent relevant morphosyntactic features of the attalysis  . For examph ' , daras(O , )~ ) happens to be the Form 1 perfect active stem based on the root drs ( tY ) a , with CVCVC being the Form drs + Form I+Perfect +Active 
Abstract intermediate level : drs+CVC VC+aa
Abstract intersected level : daras
Figure 5: Root drs with CVC VC Template and
Active Voweling
Abstract lexical level:drs+Forml+Perfect+Passive
Abstract intermediate lvel:drs+CVC VC+ui
Abstract intersected level : dur is
Figure 6: Root drs with CVC VC Template and
Passive Voweling
I pattern and the vocal element a are presenting active voice  . The stem duris(~ . r , 9 . ~) , using the passive voweling ui is the parallel passive xample  . 
If + Form I , + Perfect , + Active and + Passive are defined as single symbols  , and if + Form I+Perfect maps to CVC VC , and if + Active maps to a a and + Passive to ui , the analyses can be constructed as in Figures 5 and 6  . 
After composition of the relevant ransducers , the intermediate lvels disappear , resulting in a direct mapping between the upper and lower levels shown  . The resulting single transducer is called the lexicon transducer  . 
All valid stems , currently about 85 , 000 of them , are automatically intersected , at compile time , at one level of the analysis . Suitable prefixes and suffixes are also present in the lexicon transducer  , added in the normal concatenative ways . 
Stems like davas(t . r , 33) and duris(tg4~) , and especially those like banay ( ~ . ') based on " weak " roots , are still quite abstract and idealized compared to their ultimate surface realizations  . 
Finitestate rules rules map the idealized strings into surface strings  , handling all kinds of epen the-ses , deletions and assimilations . The twolc rule compiler ( Karttunen and Beesley ,  1992 ) is able not only to recompile the rules automatically but to intersect hem into a single rule fst  . This rule fst is then composed on the bottom of the lexi- 
Lexicon FST * O.
Rule FST
Lexical Transducer
Figure 7: Composition of Lexicon and Rule FSTs into a Single Lexical Transducer 
Lexical evel:drs+Form I+Perfect+Active+3P+Fem+Sg
Surface level : drst
Figure 8: Typical Transduction from Lexical String to Unvoweled Surface String c  . ,~_)~ con fst , yielding a single Lexical Transducer . The symbol . o . in Figure 7 indicates composition . 
Another transducer is also composed on top of the lexiconfst to map various rule-triggering features  , no longer needed , into epsilon and to enforce various long-distance morphotactic restrictions  . 
All intermediate lvels disappear in the compositions  , and one is left with a single two-level lexical transducer that contain surface strings on tim bottom and lexical strings  , including roots and tags , on the top . A typical transduction is shown in Figure 8 , where the final t ( ~ ) is the surface realization of the third-person feminine singular suffix-at  . Fully voweled , the surface string for this reading would be daras at  (  - , ~ a33) . Because short vowels are seldom written in surface words  , dv st is also analyzed as the Form I perfect passive third-person singular  , which would be fully roweled as dnr is at (" , ~ ~ . ~), and as several other forms . 
At runtime , strings being analyzed are simply matched along paths on the bottom side of the lexical transducer  , and the solution strings are read off of the matching top side  . Like all finite-state transducers , it also generates as easily as it analyzes , literally by running the transducer " back-
Transducer o O *
Lexicon Transducer.o.
Rules that Generate
Fuily-Voweled Forms oO.
Rules Generating from
Fully Voweled Forms to
All Surface Variations
Figure 9: Full System with Two Levels of R , uleswards ~ . 
The Arabic system runs in exactly the same way , using the same runtime code , a ~ the lcxi-cal transducers for other languages like English  , French and Spanish . The Arabic system is , however , substantially slower than the . other languages , t ) ecause the ambiguity of the surface words forces many dead-end analysis paths to be explored and because more valid solutions have to be found and returned  . The mismatch between the concatenated root and pattern on the lexical side and the intersected stem on the lower side also creates an Arabic system that is substantially larger than the other languages  . 
5 Generation
A single underlying Arabic word may be spelled many ways on the surface  , depending on how coin-plctely the writer specilies the diacritics  . Because the system described above recognizes all possible written forms of a word  , with varying degrees of diacritical marking , it also generates all the possible surface forms of a word  , which may be less than useful in many applications  , q ' y i ) i call y , a user wants to see only the fidly vowcled form during generation  . 
The Arabic rules have now been modilied to work in two steps  , lirst to generate the fully vow-eled form , and then to generate the various partially roweled forms and the unvoweled form  . 
Where desired , the lexiconfst can be composed with only the upper set of rules to make a lexical transducer that gencratcs  ( and recognizes ) only fully-roweled surface forms , l , ' or general recognition , both sets of rules , a . s shown in Figure 9, are composed . The result is equivalent to the original lexical transducer described in Figure  7  . 
6 Conclusion
Arabic morphology , though considerably more difficult than the morphology found in the commonly studied European languages  , is fully susceptible to finit c-state analysis techniques  , either in an enhanced two-level morphology or in the mathematically equiwdent but much more cornputationally efficient Xerox finite-state format  . We hope to extend our tinite-state techniques to cover I lebrew and <  ) ther languages with exotic morphology . 
References
Antworth , Evan L .  1990 . PC-KIMMO : A Two-level Processor for Morphological Analysis  . Occa-sional Publications in Academic Computing No . 
16. Dallas : Summer Institute of Linguistics.
Beesley , Kenneth R .  1989 . Computer Analysis of Arabic Morphology : AT wo -Level Approach with Detours  . Read at the Third Annual Symposium on Arabic I , inguistics , University of Utah , Salt Lake City , Utah , 34 March 1989 . Published in Bernard Comrie and Mushira Eid ( eds . ) , Perspectives on Arabic Linguistics 111: l ' apers from the Third Anuual Symposium on Arabic Linguistics  , Amsterdam : John Benjamins , pp .  155-172 . 
Beesley , Kcnneth R . ; Buckwalter , Tim ; and Newton , Stuart N .  1989 . Two-Level Finite State Analysis of Arabic Morphology  . In Proceedings of the Seminar on Bilingual Computing in Arabic and English  , Cambridge , England , 67 Sept 1989 . 
No pagination.
Beesley , Kenneth R . . 1990 . FiniteState Description of Arabic Morphology . In Proceedings of the Second Cambridge Conference on Bilingual Computing in Arabic and English  , 57 Sept 199 0 . 
No pagination.
Beeston , A . F . L .  1968 . Written Arabic : an approach to the basic structures  . Cambridge : Cambridge University Press . 
Buckwalter , Timothy A .  1990 . Lexicographic Notation of Arabic Noun Pattern Morphemes and Their Inflectional Features  . In Proceedings of the Second Cambridge Conference on Bilingual Computing in Arabic and English  , 57 Sept 199 0 . No pagination . 
Gajek , Oliver el al .  1983 . LIS Plmplcmenta-tion . Texas Linguistic Forum 22ed . by 1 ) alrym-pie et al Austin : Linguistics Department . University of Texas , pp . 187-202 Kaplan , Ronald M . and Kay , Martin .  1981 . 
l ) honological rules and linite-state transducers\[ Abstract \]  . Linguistic Society of America Meetingber 2730 ,  1981 . New York . 
Kaplan , Ronald M . and Kay , Martin . 1994.
Regular Models of Phonological Rule Systems.
Computational Linguistics . 20:3, pp . 331-378.
Karttunen , Lauri .  1983 . A General Morphological Processor . Texas Linguistic Forum 22ed . by Dalrumpl et al . Austin : Linguistics Department,
University of Texas , pp . 165-186.
Karttunen , Lauri .  1991 . FiniteState Constraints . In the Proceedings of the International Conference on Current Issues in Computational Linguistics  . June 1014, 1991 . Penang : Universiti
Sains Malaysia.
Karttunen , Lauri ; Kaplan , Ronald M . ; and Zaenen , Annie .  1992 . Two-Level Morphology with
Composition . COLING92, pp . 141-148.
Karttunen , Lauri .  1993 . FiniteState Lexicon Compiler . Technical Report . ISTL-NLTT-1993-04-02 . Xerox Palo Alto Research Center . Palo
Alto , California.
Koskenniemi , Kimmo .  1983 . Two-Level Morphology : A General Computational Model for Word Form Recognition and Production  . Publication No .  11 . Helsinki : Department of General
Linguistics , University of Helsinki.
Koskenniemi , Kimmo .  1984 . A General Computational Model for Word Form Recognition and 
Production . COLING84, pp . 178-181.
Karttunen , Lauri and Beesley , Kenneth R.
1992 . Two-Level Rule Compiler . Technical Report . ISTL-1992-2 . Xerox Palo Alto Research
Center . Palo Alto , California.
McCarthy , J .  1981 . A Prosodic Theory of Nonconcatenative Morphology . Linguistic Inquiry , 12(3), pp .  373-418 . 
Wehr , Hans .  1976 . A Dictionary of Modern Written Arabic . Third edition , ed . by J . Milton Cowan . Ithaca , N . Y . : Spoken Language Services,


