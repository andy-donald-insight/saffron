ISTV ? NB_.~, TORI
WORKING WITH THE INTER ACTIVE VERSION OF THE
T.G.T.-SYSTEMOFJOY CEFRIED MAN
The present paper does not claim to be a description of the TGT- 
System , since it was already presented by Professor Friedman herself at the International Conference on Computational Linguistics in Stockholm in  1969  . In addition the system has been described also in the book Jo'i'cEFRIED MAN  , A Computational Model of Transformational Grammar  , Elsevier ,  1971 . Our intention is to present the new interactive version of the TGT-System  , which has been developed at the Basic Research of  I13M Germany , and to show how it can be used in linguistic research  . 
In order to appreciate the present interactive version  , it will be , however , necessary to recall some essential aspects of the TGT-System  , yet we do not want to discuss the Friedman System as such in a systematic fashion  . 
Accordingly , in the first part of the paper Ishall talk about the batch version  , and about our experiences with the system and then I procede to the interactive version  . 
1. TIlETGT-SYSTEMING ENERAL
The TGT-System of Friedman grew out of the necessity to Verify or control a formal grammar  . It becomes increasingly di~culto control any formal system beyond a certain size : if one wishes to follow the interaction of two or three abstract rules with all their implications  , The new interactive version of the System has actually been installed at the C  . N . U . C . E . 
in order to enable the participants of the Conference to see the systems as it works  . I take this opportunity to thank the organizers of the conference  , the C . N . U . C . E . , and particularly Professor Faedo , Torrigiani , and Zampolli , once again , for their generous support of the demonstration . I also thank my collegues Mrs . Schirmer , Miss Zoeppritz and Mr , Henning , who assisted me to prep are the demonstration . I am especially indebted Dr . Picchi , who adopted the interactive version to the local cMs-System  . 
104 ISTV . ~N  ~ . ~TOa the may still use his head ; for a dozen rules , he will need paper and pencil ; and for hundreds of rules , he must have a computer . 
As primary objective Friedman wanted to give a computation alaid to the transformationally oriented linguists  . Her system as it stands now can , however , be considered also as an attempt to formalize the transformational grammar in the strict mathematical sense as well  . 
The basic intention of Friedman was not to argue for a specific type of generative grammar but rather to Offer a framework as general as possible and let the linguistim pose restrictions on his particular grammar  . However , it cmmot be overlooked that the starting point of Friedman is clearly CHOMSKY'SAspects-model  . 
Accordingly , it is easy to learn how to work with the TGT -Systemify OU are familiar with transformational theory  . On the other hand , you can use to system " to learn " transformational grammar  , as a tutorial aid . Since we do not want to discuss either the transformation-algrammar directly  , nor the purely technical details of Friedman's System  , please , let me presume familiarity with the basic notions of generative grammar and refer for the purely notational conventions once again to Friedman's book  . 
2. THEFOR MOF THEG RAMMAR
The form of the Grammar is strictly prescribed , but as already mentioned , it is very close to curren transformationalist notation  . 
For the TGT-System a grammar consists of a phrase structure  , a lexicon , and a transformational part . In the first phase of the processing the grammar is built up according to the users specifications and in the second  , subsequent phase one sentence ( or more ) are constructed according to the grammar . Each of these major components is subdivided further into smaller units  . The structuring of the Grammar is indicated by keywords  , which must be used in certain positions and are anticipated by the System  . 
Let me shortly comment on some points of this scheme of grammar  . 
3 . THETREATMENTOFTHECONTEXTUAL FEATURES Friedman introduced a new type of feature  , called contextual , which comprises Chomsky'strict subcategorization adselectional restrictions  ; i . e . , it is all the same for further processing , whether a THEINTERACTIVE VERSION OF THET . G . T . -SYSTEM 105 contextual rule involves features , like ( a ) or just category symbols , like ( b ) in ( Fig .  1 . ) . 
Contextual Rule ( a ) HUM SBJ - - - - - ( S/ (  #  ( ART ) N\]+HUMAN\]?/o_% )   )   . 
0 ~) DmOBJ = ( V ~ (% NP ) > .
Lexical Entries
Key\[+N . . . . -- HUMANf,
Student I + N . . . . + HUMAN\],
Imagine I+V . . . . + HUMSBJ . . . I,
Lexical Insertion 1. Category NV ...



I\[+N+HUMANI
NP lip #, ., , .,

I+V+HUMS 13 Jl 2. Category VN . . . .
S#NP VP
II
Nv
Hul , atz ~ I+V+HUMSBJ.Ik~Student\]"~%~1
FI+t IUMAN\[
Fig . 1. Side Effects
But apart from this simplification , the treatment of these contextual features i significantly different from that of CHOMSKV'S in  , the Aspects-model . The main innovation is the concept of the " side effects "  , which makes the selectional rules independent of the order of inserting lexical items into the derivational tree  . 
If the contextual feature refers to a node ( or nodes ) to which a lexical entry has already been attached  , ( as in (1) on Fig .  1 ) the program checks the compatibility of the item with its environment  , just as in the Aspects-model . If on the other hand ( as in (2), Fig .  1 ) the node referred to in the contextual rule is still empty  , the new item is introduced and the consequences of the contextual features  , i . e . the feature on which the insertion depends , are projected into the invironment . 
f106 IST V~NB?TO~4 . THEREPRESENTATION OFTREES Note that the output trees are leaned on the side to simplify print  , ing . In addition the nodes are numbered for ease of reference  . These numbers can be used , among others to localize the feature , which belong to a specific node , also with higher , nonterminal nodes . Note also that features coming from the lexicon are associated originally with the lexical entries  . After lexical insertion they are adjoined to the immediately dominating category node and not to the actual word any more  . 
5. THEFOR MOF TRANS FOR MATIONS
In comparison with the Phrase Structure Rules the notational conventions for transformations are less uniform  . The notation alun-steadiness i largely due to the lack of a strict  , mathematically founded and universally accepted transformational theory  . 
There are two notational styles in use ; the more popular of them is the MIT-Style . ( Fig .  2) . 
Verbal Description of Passive : 1 . EXCHANGE SUBJECT AND OBJECT 2 . INSERTTHEWORD BYASLE FTSISTER . OF THE AGENT 3 . MAR . KTHEMAIN VERBAS PAST PARTICIPLE
M . LT . - Notation:
SD # NP X PASS V NP X ) 1 2 3 4 5 6 7 ~ 
MITRE-Notation :
SD % 1#2 NP % PASS 3 V 4 NP %,
SC(PREP < BY >) ACHLE2,
I+PARTIMERGEF3,4 ALESE2,2 ARISE3.

ALESE . . . add left sister
ARISE ... add right sister
MERGEF . . . merge feature
ACHLE ... add by Chomsky adjunction to the left
Fig . 2. Writing Transformations
THE INTER ACTIVE VERSION OF THET . G . T . -SYSTEM 107 This convention for transformation is generally advocated in standard introductory works  . Accordingly , transformations are written in the form of pseudo -rewriting rules  , where apparently , the structural description ( SD ) part should be replaced by the structural change ( SC ) part . With other words : you define the input arid you define the output  . The convention is self explanatory , but perhap somewhat vague . The MIT notation is regarded even by its own adherents rather as a convenient shorthand for indicating structural cllanges and not as a proper  , full scale formalism . 
The other style is the MITRE-notation , which is less known and resembles computer commands  . This convention defines the ! nput into a transformation and lists the elementary operations  , to be carried out on the input tree . The elementary operations hotild be defined in advance  . On the whole this way of representing transformations is more abstract but it can be formalized more readily  . Friedman uses this style of notation : there is no problem to reformulate a transformation from the pseudo-rewriting style into the operational representation  . 
6.' ~ THETRAFHCRULES "
The purpose of the control program ( cv ) is to determine m which order , and at which point in a derivational tree , a transformation should be applied . 
By means of a fORTRAN-like control language ( by the socalled " traffic rules " )  , the linguist can execute the transformations cyclically  , i . e . applying the same set of transformations to every clause  , he can determine in which order the clauses of a sentence should be processed  , he may change the order of execution depending on certain condition  , e . g . on the success of preceding transformations etc . This control part of Friedman's System provides an enormous generative power  , the possibilities of which have hardly been discussed in the linguistics  . You can easily define several successive transformational cycles by the cv of Friedman  , you can solve the ordering problem of transformations by defining unique jumps in order to leave out the execution of a transformation  , which in a " simple " , cyclically ordered grammar would be impossible . 
~ vt108 XST V~N ~ XXO aI7 . USING THESENTENCEG ENERATOR The actual testing of the Grammar is done by the Sentence Generator  . As already said the Grammar is laid on in the first phase of the processing and subsequendy the system should be instructed to generate sentences according to the given grammar  . Trivially in as much as the system generates correct sentences  , the grammar is verified to the extent the generated sentences are false  , the grammar is wrong and has to be corrected . 
The sentence generator as such can operate in one of three nodes  ( Fig .  3): 1 . Random Sentences:

A random sentence will be generated 2 . Predefined Structures :
S #
NPARTTHE
NBOY
VP AUXMODQ
TNS PRS
VPASS
VREAD
NP PRON WHAT#
The structure will be operated on according to your grammar  3  . Directed Random Generation :
SRES


A random sentence will be generated with the restriction that it will not dominate a Q-node Fig  .  3 . Types of Input into the Sentence Generator 1 . It can generate sentences completely at random , where a random number generator mechanism controls the selection of grammatical rules and lexical insertion  . All you have to do is to enter the sentence symbols S  . 
THE INTER ACTIVE VERSION OF THET . G . T . -SYSTEM 1092 . You can predef measentencentirely at the level of deep structure and let the system check the tree and carry out the transformations leading up to  . the surface structure . 
3 . You can use partially defined input , e . g . defining just the structure , but leaving open the lexical insertions , or just specifying a partic-ular structural configuration you are interested in  , while letting the system fill up the rest at random  . 
For practical testing the second and the third way of using the sentence generator is clearly preferable  . The random generator may produces pectacular sentences  , but practically never the ones which have bearing on the problem you are interested in  . The sentences delivered . by the random generator may be and are revealing , and nobody experimenting with the system would with stand the temptation to see what his grammar would produce " left entirely alone "  , but it is not suitable for systematic work . You may correct a mistake detected by the random generator  , but you better test the correction by a predetermined skeleton  , otherwise you may get a totally different sentence  , from which you cannot see whether the error has really been corrected or not  . 
According to our experience , ntirely predetermined structures including lexical entries are the best to test a grammar  . In this case you can anticipate a normal sentence as the final output of the generator  , and can immediately decide whether the generation is correct or not  . 
There are two input formats : a free , bracketed ( FTRIN ) format , and a fixed tree format ( TVJN ) . It is perhaps a matter of personal taste , yet for us the rTRIN , that is the bracketed input , seemed to be more convenient . ( Fig .  4)
FTRINF or mat :
S <  #NP ( PRON < JEMAND ) ) VP ( NP ( AtkT ( D ) N ( BUCH ) > V ( LES > > MOD < V ( HAB > TNS ( PtLS > )  #  )  . 
TRIN Format : #


MOD #
PRONJEM AND
NPARTD
NBUCH
VLES
VHAB
TNSPR . S
Fig . 4.
110 IST VANB/kTORI
Usually , the interaction of the phrase structure rules is fairly straightforward  , while that of the transformational rues is much more intricate  . 
Therefore you can easily predefme a skeleton by using your own phrase structure rules " manually " and then let the system apply the transformations to the prefabricated input  . If you use partially predetermined trees , you may be distracted by mistakes , which occur at places which are of no interesto you  . Note that you cannot correct all errors , at least not at once , and therefore you had better concentrate on a few points  , otherwise youloose sight of you own grammar . 
8. THEOUTPUTOFTHEBATCHVERSION
The original batch output of the ToT-System has been designed to provide all possible information about the processing  , which the linguist may possibly need . First the input grammar is listed , followed by the content of the major internal tables  , according to which the subsequent generation procedes  . Then , the process of sentence generation is reported in such a manner  , that the linguist can follow the significant steps of the processing  ( Fig .  5 (1)) . 
9 . TIIE INTERACTIVE VERSION OFTH . ETGT-SYSTEM The present interactive version has been developed according to the experiences gained by working with the original batch version  . 
We have noticed in general that we are interested in the linguistic aspects of the derivation  , such as changes in the tree , or in the final output , but not the actual computation . 
The demand for a more condensed output will be even more imperative in a terminal environment where the time and the output should be restricted to a minimum  . Therefore we defined a new additional output file  , containing just the essential information in which a linguist is interested  ( Fig .  5) . 
The original batch protocolenables you to follow the actual flow of computation  , e . g . in the case of a transformation you get the modules called to perform the successive steps of the processing  . The interplay of the different subroutines i , however , always the same : ANTEST calls PASSIV , PASSIV calls ELEMOP etc . Since Friedman's System works practically free of error  , there is no need to check the subroutine THE INTERACTIVE VERSION OF THET  . G . T . -SYSTEM 111 The Transformations a formulated in the Grammar : TRANS  1 PASSIV " PASSIVBILDUNG " lOB . 
SD#INP 2NP 3 V4 Vl+PAS S1%.
SC(PREPI+DAT\[(VON )) AFIDE 1 , \[+ PART\[MERGEF3 , 2 ALESE 1 . 
The Derivational Tree to be Manipulated on : 1S   2#   3 NP 4 ART 5 D 6 N 7   STUDENT3   8 VP 9 NP 10 PR . ON12V 13LES 14MOD 15V 16WEILD 17TNS 18PR . S 19 Q 20  #  11 WAS The Report on the Successful Completion : 1  . The ordinal batch protocol ANTESTCALLED FOR . 2 " PASSIV "( AC ), SD = 7 . RESTRICTION = O . 
TOP=I:S
ANTESTRETURNS **1**
CHANGE . CALLELE MOPFOR . AFIDE 213
CHANGE . CALLEL EMOPFOR . ALESE932 . The new interactive protocol PASSIVAFIDE 21   3 ADDED SUBTREE : 21 ISHEADED BYPREP
PASSIV MER . GEF 12+PART
PASSIVALESE 93
Fig .  5 . The Protocol of the Transformations calls every time  . This information , therefore , can be dispensed with for the most purposes . 
We have designed a slightly different , more comprehensive format , which contains only the linguistically relevant information  . The new output format of the interactive version makes a clear reference to the input grammar  , such as the name of the transformation , the name of the elementary operations , the nodes affected by them . In one point the interactive version provides information  , which has not been explicitly reported in the original batch version  . You can follow now also the feature operations in the same form as you follow the tree operations : the interactive protocol delivers the features names and the actual feature value  . For a linguistesting feature operations this is an  inno-112 IST VANBATORI vation over the original batch version  , which suffices to give a hint at this point , that the feature operation has been successfully completed without further details  . 
It should be noted , that batch-output and terminal output are not mutually exclusive  , the terminal output is a summary extracted from the original and placed on a separate file output  . The original output is , however , still available . The file on which is written is normally set dummy  , but it can be reactivated and listed , in the very same form as in the original version .  1 10 . THE COMM ANDS OF THE INTER ACTIVE VERSION The interactive version on the whole uses a fairly straightforward language  . The answer to most of the question sieither yes or no  ( or just the first letter of these words )  . Every answer is prompted ; and should be answered by saying yes or no . In such cases where another answer is expected the book of Friedman should be consulted  . Note that in case you want to enter the input skele to not from the terminal you must have the file allocated prior to calling the TgT-System  . 
~. THECONTROLOF THE INPUT
Summarizing : if you want to run the ToT-System you have to define and enter a grammar  , give a command for the sentence generator , and you have to deliver a skeleton to be expanded  ( Fig .  6) . Orig-inally all these three kinds of input were entered in sequence into the system on the same file as data  . 
It should be noted that the grammar is a part of the input data  , which is entered and processed in each run . This homogenous input is then interpreted by the system as grammar or as input into the sentence generator according to the internalogics of the program  . In order to achieve greater flexibility while testing a grammar  , we separated the three logically different input into three logically different files  . The input grammar , usually a text of several hundreds of lines , 1 The flies 8 and 9 , containing system messages have been , however , dropped ; they were of no interestoordinary users . 

THE INTERACTIVE VERSION OF THET.G.T.-SYSTEM
Bat & Input 3 . Input skeletons ' - ~2 . Generator Commands . -"-~ A1 . Gram
Inter aaive Input
I . Grall l l l h q r 2 . Generator Cmm and sor 3 . Input Skeletons
Fig .  6 . The Reorganization fIn put is normally already stored on an external device and entered accordingly  . The generator command ( the $ MatN-card ) may be attached to the grammar , if not , it is prompted and you may enter it from the terminal  . 
Similarly , you may predefine input skeletons to be tested and enter them just as you enter the grammar as a separate file  . You have , however , the choice to enter skeletons directly from the terminal  . In case of interest you may enter as many skeleton as you like  . The random generator then provides for variation . 
Technically , the separation of the three logically different kinds of input has been accomplished by introducing a file variable  , which is set first to accep the grammar from a permanent dataset and then changed over to the terminal or another permanent input dataset according to user specifications at session time  . 
114 IST VANB~TORI 12 . TIlETREATMENTOFTHEERRORI~iESSAGES The same file variable technique is used to control the error messages  . The error file is set either to the terminal or to the batch file alternatively  . There would be no problem to assign the error messages permanently  , et an eventual change of the file requirements in terminal environment would mean a revision of several hundreds of error messages  , while a file variable can be controlled by a single instruction  . 
There is a further problem to be faced and that is the reference point of the error message  . In the original batch version the error message precedes the actual erroneous line in the grammar or inserted in the protocol at the appropriate point  . 
In the first case the interastive version does not display the original input grammar  , and therefore a message that e . g . brackets are opened , but not closed or " special character expected " , but not found , and the like are not very informative , since the user would be left alone to find the critical place in the grammar  . Therefore the error messages during the processing of the input grammar are preceded by the actual line in which the error has occurred  . The line numbering will help the linguist to localize the erroneou section in the input grammar  . 
If on the other hand the error occurs during sentence generation  , the message will be inserted in the terminal protocol at the appropriate place  . 
13. THECONTROLOFOUTPUT
Another crucial point is the control of the terminal output  . You can have the following choices as regards extent of output :  1  ) You are not interested in any further details , you , do not want to see the full input tree . In this case you still get : 1 . , the linear representation f the input , 2 . , the list of transformations which have been applied and  3  . , the output of the transformations , also in the linear form . This is the minimal amount of output ( Fig .  7 ) : 2 ) You wish to see the input tree into the transformational component  , you answer to the question PRINTOUTINPUTTREE ? by saying " yes "  . In this case you get alo the full output tree of the THEINTERACTIVE VERSION OF THET  . G . T . - SYSTEM 115
ERRORMESSAGESWANTED ?

INPUTTREE FROM TER MINAL ?

PRINTOUTINPUTTREE?n
INPUTTOTRANS FOR MATIONS : #QNEGWEP . EINPREISER MOEH WERDH ABKOENN WERD PRS#~r
TRANSFOR MATION SWHICH APPLY :
AUXELIMALESE 2019
AUXELIMALESE 2219
AUXELIMALESE 2419
AUXELIMALESE 2619
AUXELIMALESE 2819
KEINAFIDEK 13
KEINERASE 06
PASSIVALESE 128
PASSIVAFIDE 328 log off in 15 rain
PASSIVALESE 817
KNGRUMERASE 028
VR . ISEARISE 2611
VRISE ARISE 2411
VRISE ARISE 2211
VRISE ARISE 2011
VR . ISEARISE 1711
TOPICERASE 03
TOPICALESE 812
VERBUM 3 ARISE 268
GR . MARKERASE 02
Gt LM ARKER ASE 0 30
INFPAP , . ALADET 17
INFPARSUBSE WORDEN 21
INFPARSUBSESEIN 23
INFPAR . ALADEEN 24
MORPHY SUBSEWIRD 27
INDARTSUBSEEIN 14
PROMORSUBSE WEM 10
PUNKT&LADE 411
PUNKTALADE 431
OUTPUTGENERATED BYTRANS FOR MATIONS : ~ r,R
ADDED SUBTREE : 32
ADDED SUBTR.EE : 41
ADDED SUBTR.EE : 43
VON WEM WIR DKE IN PR . .EIS ERHOEHT WORDEN SEIN KOENNEN
QMARK PUNKT
Fig . 7.
116 IST VANBATOR I whole generation automatically . Youg et alo the list of the transformations which apply displayed  ; to be more precise you get the list of tree operations  ( Fig .  8):
ENTER . RANDOMGENERATORCOMMANDS !$ maintringent ran . 
INPUTTREE FROM TER MINAL ? yes
ENTEP . RANDOMGENERATORIN PUTINTHEFORMOFTI~INI++ + + + s 
PRINTOUTINPUTTREE?yes
PRINTOUTFEATURES ? no
INPUTTOTRANS FOR MATIONS : 1S   2#   3NP   4VP   5 MOD 9 PI~ON 15 JEMAND 7NP   10N   8 V 16 SEH 11 TNS 17 PRS 12 Q 13 NEG  #JEM AND HANS SEHPR . SQNEG #
TR_&NSFOR MATION SWHICH APPLY :
NICHTALESE 189
NICHTERASE 013
KONGP . UE5ERASE 011
VERBUMALESE 83
VERBUME P . ASE012
GRLOEERASE 02
GRLOESUBSEFtLGZ6
OUTPUTGENERATED BYTRANS FOR MATIONS : 1 S 8 V 16 SEH 3 NP 9 PRON 15 JEMAND 4VP   7NP   10N   18 NEG 19 NICHT 20 FI~GZ
SEHJEMANDHANSNICHTFRGZ + + + + +/*
TRIN . NO MORE IN PUTS.
READY 14 HANS
ADDED SUBTREE : 1814 HANS
ORQUITBY >/~>!
Fig . 8.
THE INTER ACTIVE VERSION OF THET . G . T . - SYSTEM 1173 ) You may want to see also the features associated with the nodes in the tree-then you respond to the next question of the system PRINTOUT FEATURES correspondingly - and you get the features displayed both of the input and the output tree  . In addition you get also the list of transformations applying  , now including also the feature operations ( Fig . 9): call new ( tgt250) ~ r
WELCOME TO THE INTER ACTIVE VERSION OF
FRIED MAN\[STGT-SYSTEM !
ERROR MESS AGES WANTED ? yes
INPUTTREE FROM TER MINAL ? no
PRINTOUTINPUTTREE?yes
PRINTOUTFEATURES ? yes
INPUTTOTRANS FOR MATIONS :





NODE 1S   2#   3 NP 4 ART 5 D 6 N 7   STUDENT3   8 VP 9 NP 10 PRON 12 V 13 LES 14 MOD 15 V 16 WERD 17 TNS 18 PRS 19 Q 20  #  4 ART\[+ART+DEF\[ 6N   11 WAS " k
PASSIVA . FIDE 2 13
PASSIV MERGE F12+PART
PASSIVALESE 93
NOMIN MERGE F9+NOM
NOMIN MERGEF : 10+NOM
DATIV MERGE F3+DAT
TRANSFOR MATION SWHICH APPLY :
ADDED SUBTR . EE : 21 + N+MASC-SG+HUMAN+ANIM-PRPNM\[ 10 PRON+PRON+SG-HUMAN+ANIM + ( S/ ( %_%Q %>>\[12v+V+EN+STRK+<S/>~NP < ( ART ) *\[+ HUMANl >%_b/o >>\[15V
I+v+PASSI 17 TNS\[+TNS+PRS\[#DSTUDENTENWASLESWERD PRSQ #  118 IST VANBATORI
KONGR . UE5 MOVEF 1015
KONGI ~ UE5 MOVEF 1715
KONGtkUE5ERASE 017
VERBUMALESE 159
VERBUMERASE 019
ERGFI kARISE 92
INFPAI ~ ERASE F12SG

INFPAR . AFIDEGE 12
INFPAkALADEN 12
MORPHYSUBSEWIleD16?DEFAR.TSUBSEDEN 5
DEF At LT SUBSEDEN 5
GtLLOEERASE02
GR LO ES UB SE FR GZ 20
OUTPUTGENERATED BYTRANS FOR MATIONS :- k 1 S 9 NP 10 PRON 11 WAS 15 V 25 VCIR . D3 NP21 PREP22 VON4 At LT26 DEN







NODE+SG+PRS 6 N 7   STUDENT3   8 VP 12 V 23 G  E 13 LES 24 EN 28 FRGZ '9NP   -4- NOM\[ 10 PRON+PRON+SG-HUMAN+ANIM+NOM+< S1  ( % -% Q % ) ) I 15 V+V+SG+PIKS + PASS\[ 3NP + DATI 21 PREP+DAT\[ 4 APT+AR . T+DEF\[ 6N + N+MASC-SG+HUMAN+ANIM-PRPNM\[ 12 V+V+EN+STR . K+PAP . T + < S/<#NP < ( AIKT ) * I+HUMANl > % > > IWASWIRDVONDENS TUDENTEN GELE SENFP  . GZ
Fig . 9.
THE INTER ACTIVE VERSION OF THET . G . T . - SYSTEM 1194 ) You may be interested in even more details , for instance in some intermediate rees and you have inserted TrACE-cards in the control program of the grammar just as they are inserted in the original batch version  . Now if you answer to the question PRINTOUTIN-PUT TREE by saying ALL  , you will receiv every intermediate ree as well , in addition to the input and output tree with features and feature operations  . Otherwise the TRAC t . function returns just the terminal string of the derivation  . Fig .   10 shows the general logics of the output control :
Print out inputree ?
Print out features ?
Output produced :
Terminal strings


Tree operations
Feature operations
Intermediate Trees by axse ~
NO ++

No +++
Fig . 10. The Control of Interactive Output

Yes ++ + + +
All++++++14. CtOSl NC~F . MARKS
A grammar develope direcdy with the aid of the TGT -System is practically never complete  , it generates only a subset of the language in question  . You may add , change , remove parts of the grammar and thus you can easily produce minor variants of the same grammar one of which may be preferable over the other  . In fact this is the normal way to work with the system  . 
At the C . N . U . C . E . -installation the/'e was a number of test-gram -mars  ( German , Italian , English and Spanish ) , offered to the participants to try how such testing looks like  . The participants of the Conference were invited to look at the Grammar Tester as it works  . In the Centro Nazionale Universitario di Calcolo Elettronico the Transformational Grammar Tester was running on a I~M  System/360 Model 67 under


N . CHOMSK ~', Aspects of the Theory of
Syntax , Cambridge ( Mass .), 1965.
J . FaI ~ I~lq , T . H . B ~ DT Lexical Insertion in Transformational Grammar  , Palo Alto ( Calif . ), 1968 . 
J.Fr.I~D ~, P , . W . Do ~, A Formal
Syntax for Transformational Grammar,
Palo Alto ( Calif .), 1968.
J . Fm . ~ aA ~, P . MYst ~ NsgY , Computer
Experiments in Transformational Grammar : The UCLA English Grammar  , 
Ann Arbor ( Mich .), 1970.
J . FRIr ~ MAN , Application of a Computer
System for Transformational Grammar,
Preprint No .  14 , in International Con-~rence on Computational Linguistics  , 
Stockholm , 1969.
J . Fr . mDV_~ , Directed Random Generations of Sentences , in , ~ Communications of the ACM ~ , , XII (1969) 1 . 
j . FRmDV~N , A Computer System for
Transformational Grammar , in ~ Communications of the ACM ~ , XII (1969) 1 . 
J . Fmr ~ DMAN , Distribution and Use of the
Computer System for Transformational
Grammar , Working paper in Computational Linguistics , M-27 , The University of Michigan ,  1973 . 
J . FRmDmA ~, et al , A Computer Model of
Transformational Grammar ( Mathemat-kal Linguistics and Automatic Language
Processing Nr . 9), New York , London,
Amsterdam , 1971.
Y . CH . Mom ~, Computer Experiments in
Transformational Grammar : French I,
Ann Arbor ( Mich .), ( Natural Language
Studies Nr . 3), 1969.
P . I~OSENBAUM , D.I.OCI~AK , The IBM
Core Grammar of English , Yorktown
Heights ( New York ), 1966.
