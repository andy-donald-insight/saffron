VOCNETS-ATOOLFORH ANDLING FINITE VOCABULARIES
Hans KARL GREN
KVAL Institute for Information Science
SS dermalm storg 8
S-ll 645 Stockholm

J ~ rgen KUNZE
Academy of Sciences of the GDR
Prenzlauer Prome nade 149-152
Berlin , DDR-1100
German Democratic Republic
Abstract
A method is proposed for storing a finite vocabulary in a manner which makes it conven ient to recognize words and substrings of words  . The representation , which can be generated automatically from al ist of words or from given representations of other sets by means of which the vocabulary has been defined through set or string operat ions  , has the form of a modified finite-state grammar  , a form eliminating the multiplicative e ffects of conjunction  , complementation , etc . , on the node sets of convent iona l f in i te - s tate representations  . 
0. Background
Traditionally , linguists describe sent-ences , and inflected and derived word forms by means of rules  , whereas vocabularies are accounted for by enumeration  . But even for the purpose of specifying a g iven lexicon or the vocabulary of a given p iece of text we find mere enumerations in conven ient to access and not very illuminating  . We want answers to be readily given to quest ions like whether a given string is a member  ( or a prefix , a suffix , some other substring or sequence of substr ings of a member  )   , ~ or which elements of some set of strings have such properties  . 
That is , we want to arrange the lexical data so that it is easy to perform Boolean and string operat ions on sets of words  . 
We therefore introduce a grammar-like representation for a finite vocabulary  , specifying it as is , i . e .   , without exaggeration or omission , with no claim on the linguistic status of the set described or the rules constructed to specify it  . No prediction about potential strings outside the given set is suggested  . The representation can be algorithmically derived from a list of the words in the vocabu lary  . 
The proposed too \] appears to have theoretical as we \]\] as computation almer its  . 
1. Task
We thus require a method for representing avo cabu  1 ary V of strings over on a 1 phabet A ( of letters , phonemes , morphemes or other atoms ) , where * A is small compared to the vocabulary V  ( say , 30 against 30000 or 300000) , * the vocabulary V , though large , is finite , * V hasa " structure " in the sense that , typically , a string in V contains substrings included in other strings in V  . 
We want the representation to * permit conven ient retrieva  1 of strings and substrings of strings in V , * be algorithmically constructed on suc-c essive input of strings in V  , or , if  V  is defined through Boo 1 eanor string operations on other sets  , be derivable from operations on repre-sent at ions of these more elementary sets  , * be reasonably compact for practical computational applications  . 
2 . Modified Finite-State Representation We have chosen to represent vocabularies as mod ified finite-state gra ~ aars  , which we shall call vocnets . 
Avocnet will include a finite directed graph with edges  , arrows , labelled with elements of the alphabet A . Such a graph will specify a vocabulary over the alphabet A if we mark a subset S of the nodes as source nodes and define as an accepted word the concatenation of the labels of such paths through the graph from nodes in S as arr ive under certain side conditions at a set of nodes which fulfills given target cond itions  . 
We do not assume avoc net to be deterministic in the sense that for any node i and string ~ there exist only one node j such that ~ is a path from i to j  . Should we introduce such a restraint , it can be proven that it is lost already under regular operations on the vocabularies  , io e . , that this a t t rac t ive feature wi l l be absent from a vocnet derived in the manner we propose for the union  , concatenation set or closure of the vocabular i es  , for which deterministic vocnets had been introduced  . 
Precautions had to be taken to keep the mechan ically generated representations compact  . In particular , it was essential to eliminate the well- known multiplicative effect on the number of states arising when standard f in ite-state grammars are combined by in tersection and complementation  . 
3. Definition of vocnet graphs
Avoc net graph U = < A , N , C ' , C">quadruple , where is a A is an alphabet of atoms a , b ; c ,   . . . 
N is a set of nodes h , i , j , k , . o.
C ' and C " are mappings of A into N~N .
We define C ( x ) = C' ( x ) uC " ( x ) as the set of categories of " the atom x . 
We define tile product C 4 oC ~ of two category sets C ~ and C ~ as C ~ oC  ~ =  ( i , j)IBk(i , k ) eC ~^ ( k ~ j ) ? C~I and the category set for a string ~: x ~ asc  ( ~ ) = C ( x ) oc ( ~ ) 
We shall say that the atom x Connects the set  M1 to the set M2 in U iff either M2 is the set of all j for which there is a node i in MI such that  ( i , j ) ~ C ' ( x ) ror M2 is the set of all j for which there is a node i in  M1 such that ( i , j ) ~ C"(x ) . 

We shall a \] so say that a string &= x connects Ml to  M2 if there is some set M3 such that x connects M1 to M3 and ~ connects
M3 to M2?
By : introducing two kind so far rows , one can so to speak synchronize parallel paths : the restraint that in every path the arrow associated with one position in as tring will haw ! to be of the same kind can be utilized to partition the graph into zones which correspond to segments of the str ings  , if one kind of arrows , intrazonear rows ( tliose in C ' ) join nodes within the same zone and another kind  , interzonear rows ( those in C " ) ~ join nodes in one zone with nodes in another zone  . A string can then be seen as consisting of segments separated by junctures  , where each segment Js associated with paral lelint razon earrow sequences and each juncture with parallel interzonear rows  . 
4 ? Definition of Vocnets
Avocnet G is a triple < U , S , P > ~ where S~N is a nonempty set of source nodes P  ( M ) is ~ t target condition on node sets M  , P ( M ) being a proposition over elementary condit ions of the form that M overlaps with some subset E of N  , say(M~E\]~:~)A~(MoE~>2?~) . 
The sets E1 and E2 here form the target areas of G . 
The union of all minimal sets M for which P ( M ) is true in the vocnet G will be called the t arget set T of G  . 
Avocnet G defines the language L ( G ) : \[  ( * I~M~N and ~ connects S to the nonempty node set M and P  ( M ) is true \] Whereas for a string to be accepted by a conventional finite-state grammar it is enough ~ hat it is associated with one permitted path through the graph  , a string will be accepted by a vocnet if it is associated with a set of simultaneous paths  , each leading from a source node to a target node  , these target nodes forming a permitted combinat i on M  ( i . e . , M is not empty and P ( M ) i . Strue ) . 
The vocnet may contain special exit chec kers  . An exit checker is a dummy zone , consisting of exactly one node connected to i tself by a narrow in C ' for each atom in A  . By using exit checkers , local conditions for zones can be accounted for in the target conditions for the whole vocnet ? The exit checkers  , in a way , will then fre ~ , zethez one exit conditions so that they remain accessible for verification when the who legraph has been passed through  . 
5 . Genexation of Vecnets from List of Words A vocnet for a given vocabulary can be generate o algorithmically in the following manner ? Words are entered one by one  . For each new word unique new nodes are introduced : if the new word is x^x z  . .  , x  ~ , each letter x ~ is given the new category ( kT , k ~+ A ) , where no k ~ . existed before . 
Clearly , this procedure will create a vocnet which wi ll account for all and only the words given ? The set of nodes  , however , will typically be much larger than necessary  , but it can be reduced-after one word has been entered or after the insertion of several words-by appropriate fusion of nodes  ; cf . section 8 infra . 
6. Set Operations on Vocabularies
In the : following , it will be assumed that the vocabularies cons idered are strings over the same alphabet A  , that none of them includes the empty string , and that the vocnet graphs which we combine have disjunct sets of nodes  . 
6.1 Complement Formation
Given avocnet G1 for a language LI , the vocnet G for the complement L is given immediately by replacing  P1 by its negation
G = < UI , SI , ~ PI>,
Jf G1 is complete in the sense that for any string there exists some path beginning in an e lement of SI  . If G1 is not complete in this sense , it can be made complete at the expense of adding one more node  . 
6.2 Union
In avocnet G = < U , S , P > for the union of L ( GI ) and L ( G2 ) the vocnet graph U is formed directly through union of the elements of  U1 and U2  , and P is formed through disjunction : U = < A , N1 uN2 , CI ' ~ C2' , Cl"uC2">
S = SIu $ 2
P ( M ) < :> PI(M ) v P2(M ) for M~N .
6.3 Intersection
In avocnet G for L(GI ) ~ L(G2) , U and S are formed as in the case of union and
P ( M ) <=> Pl(M ) AP2(M ) for S~N .
Thus , one and the same vocnet graph will serve as a component invocnets defining different languages  . 
7 . String Operations on Vocabularies 7 . 1 Concatenat ion The concatenat ion set V of V1 and V2  , i . e . , the set V of st r ings cons is t ing of a s t r ing in Vl  , specified by the vocnet GI , concatenated with one in V 2 , specified by the vocnet G2 , is defined by a vocnet G
G = < U , SI , P > where
U=<A,NI+uN2,CI'uC2',Cl"+uC2"uC12">
P ( M ) <=> QI(M)AP2(M)

NI+is N1 with the addition of exit checkers : if G1 has the target areas El ,  ?'2 ,  . . . , NI+will contain the exit checkers fl , f2, . . . , C I "+ is CI " w i th the add i t ion of arrows for each atom from each node in Ep to the exit checker fp  , CI2"(x ) is tile set of all arrows ( i , j ) with i ~ T1 and j6N2 for which ( h , j)~Cl'(x ) for some h&$2 . 
QI(M ) is the frozen version of PI(M ) , with f l , f2 ,   . . . , substituting El , E2, . . . 
The vocnet graphs U1 and U2 have thus been integrated as zones into the new vocnet graph  . A few exit checkers have been added pass@g e through the zone  U1 as target conditions on the totality of G . Thanks to the use of exit checkers the complex i ty of the target condition P of G in terms of the number of target areas is not the product of the complexities of Pl and  P2 but less than their sum . 
7 . 2 . Restricted Iteration and Involution The languages L  ( GI ) uL ( GI ) Zu .   .   . uL ( GI ) q and L ( GI ) q ( q = ~2 ) may be represented as vocnets that are const ructed in a similar way as for concaten at ion  , with GI in the role of G2 , but the exit checkers have to be stratifi ed so that we may count the depth d of the concatenation  . Therefore C " ( x ) contains besides the categories explained in  7  . 1 all pairs ( dfp , d*~fp ) for l~d~q-l . 
The target condition for restricted ite ration is P  ( M ) < :> PI ( M ) A ( Mn\[qfl , q f2 . . . . \] = ~) A ( q-A PI(M ) => . . . => 4PI ( M ) ) and for the p - th power of L ( GI ) P ( M ) <=> PI ( M ) A ( Mr\[qf\] , q f2 . . . . \] = ~) A ~' API(M ) A . . . A ~ PI(M ) . 
Here , ~ PI ( M ) are the frozen stratified target condit ions of GI  . 
7.3. Decatenation
Given one vocnet G1 ( say for words beginning with a prefix ) and another vocnet G2 ( say for prefixes and prefix sequences )   , we search avocnet G ( say for words stripped of their prefixes ) such that ~& L ( G\]iff ~ 4a ~ A2 ( ~& L ( GI ) A0~2C-L ( G2 ) A The following vocnet G will sats if your requirement : 
G = < UI , S , PI > where S is the union of all sets M~NI for which  S1 is connected to M in G1 by some string contained in L ( G2 )  . 
8. Equatability and Node Fusion
Vocnets generated with the incremental algori thm described in section  5 above typically contain more nodes than a min imalvocnet for the same language  . Similarly , vocnets derived from other vocnets tend to be h ighly redundant  . 
Compacting of a given vocnet can be algori thmically performed as follows  . 
We shall say that nodes in a vocnet G are equa tab  1 e if they can be identified without affec ting the language defined by G  . 
The following definitions permit ust of ind pairs of equatable nodes  . 
We first define some equivalence relat ions between nodes  . 
The nodes i and j are precedence equiv a  1 ent in a vocnet graph U iff for all k and x ( k , i)~C'(x ) <=>( k , and ( k , i)GC"(x ) <=>( k , j ) ~ C'(x)j ) 6C-(x )
The nodes J and j a resion equiva 1 entgraph U iff for all k and xsUCC es-in avocnet  ( i , k ) eC ' ( x )  <=>  ( j ~ k ) 6C ' ( x ) and ( i , k ) ~ C"(x ) <=>( j , k)eC'(x )
The nodes i and j are source equiva 1 ent in avocnet G iff i&S <=> j&S
The nodes i and j are target equiva 1 ent in a vocnet G iff for any subset M of N
P ( Mui ) < :> P ( Mu\[j).
Nowtile nodes i and j are 1 eft equiva 1 ent in a vocnet G iff they are precedence and source equivalent  , r Phey are right equiva 1 ent in a vocnet G iff they are succession and target equivalent  . They are equatab I eif-but not necessar ily only if - they are left or right equiva lent  . 
By successive fusion of pairwise equatable nodes vocnets can be-not rarely drastical ly-compacted  . It should be noted vhowever , that equatability is not an equivalence re lation and that reduction of a given vocnet graph does not yield a unique result but depends on the choice of node pairs to identi fy in each step of the procedure  . 
9. Parasites
By parasites of a language L we shall mean strings which are not members of L nor substrings of members of L  . 
Clearly , if with the vocnet G tile set C ( ~  ) is empty , ~ is a parasite of L(G ) ~4 , is not a member nor will it become a member whatever is appended at either end  . 
We shall say a node i in a vocnet G is genui neif there is some string o < associated w it hapath from a source node in G via i to a node in some M  , such that connects S to M and P ( M ) is true . 
If all nodes in a not vecare genuiner as tr ing  4  . is a parasite iff C(o <) is empty . 
The vocnet will then offer us an associative calculus for recognizing parasites  ( and strings which constitute the beginn ing of a word or the end of a word  )  . 
A node i is in genuine if no path leads from nodes in Stoior from i to nodes of To If P  ( M ) has the simple form that M must overlap with some given target set  , a node i is in genuine only if the preceding condition is full filled  . 
i0. Node Elimination
In genuine nodes can be removed from the graph Uw it hout affecting the language accepted by G = < U  , S , P > . 
Successive elimination of ingenuine nodes and fusion of equatable node may lead to cons iderable compression and simpli-ficat ion of a given vocnet  . It should be observed that the final , irreducible result of such compression is not independent of the choice at each stage of what reduction operation to perform  . 

