THE COMPLEXITY OFPARSING WITH
EXTENDED CATEGOPIAL GPAMMARS
Esther K Snig , Universit?t Stuttgart , Institute for Computational Linguistics , 
Keplerstrasse 17 , D-7000 Stuttgart1 , FRG , koenig Qds01i log . bitnet

Instead of incorporating a gap-percolation mechanism for handling certain " movement " phenomena  , the extended categorial grammars contain special inference rules for treating these problems  . The Lambek categorial grammar is one representative of the grammar family under consideration  . It allows for a restricted use of hypothetical reasoning  . We define a modification of the Cocke-Younger -Kasami  ( CKY ) parsing algorithm which covers this additional deductive power and analyze its time complexity  . 
1 Introduction
Categorial grammars have become attractive in the last decade  . One reason might be there discovery of their conceptual elegance : the combine to rypotential of a lexeme is stated indirect association with the lexeme itself-in the lexicon  . A basic ( bidirectional ) categorial grammar B is defined by a set of categories C :=  C0Uz l ~ = x/Y or z = x\y ; x , yCC(C0 a finite set of basic categories , the category is referred to as the argument category  , the category x is called value category , complex categories are named functor categories ) , a goal category g ( the start symbol ) which is a basic category , a lexicon L which is a function from a finite set of lexemes onto a set of finite sets of categories  , and the two combination rules " leftward application "  ( app\ ) and " rightward application " ( app / ) which state how argument positions are filled : ( app\ ) y , xky ~ xAn object U --* x where U is a sequence of categories is called a sequent  . 
This basic concept of categorial grammar may be extended by adding more combinatory rules  . E . g . 
the rule of functional composition is the incarna -tion of the idea how to handle certain phenomena of unbounde dependencies : if a funet or category x/y finds only an incomplete argument category / z  , i . e . which , itself , still lacks an argument z , then these two partial categories can be , nevertheless , combined into the category x/z , which expresses the fact that z is still missing . 
In general , functional composition cannot do its job by itself  . One needs rules which allow for changing the order in which a functor category takes its left arguments with regard to its right arguments  . 
The use of the typeraising rules is one way to obtain this goal:  ( tr\ ) y-~x\ ( x/y )   ( tr / ) yxl ( \ y ) The first extensive use of the concept of functional composition in syntax appears in the paper lAdes  , Steedman 1982\] . The rules of functional coin-position and type raising have already been mentioned in \[ Lambek  1958\] as being theorems of the
Lambek calculus.
To obtain a Lambek categorial grammar L from a basic categorial grammar  , one has to add the two rules of functional abstraction  ( T is a nonempty sequence of categories ) : :/ Y'T--+x ( abtr\ ) --~ x\y ( abstr / ) T , y -- ~ x
T--~x/y
The rule ( abstr\ ) reads : If x can be derived from the category sequence  7' under the assumption that y has been put in front of T then it holds that x\y is derivable from T alone  . An example of an L-deri-vation in a somewhat abbreviated notation  1 is given in figure 22  . This analysis is an adaptation of ideas due to \[ Hepple  1990a\]  . 
In the remainder of the paper , we first give a brief overview on other approaches to parsing with extended categorial grammars  . Then the modified
CKY-algorithm is presented.
2 General Process ing Issues in connection with parsers for extended categorial grammars  , the problem of " spurious ambiguities " or derivational equivalence has appeared in a massive way : One syntactic  ( or semantic ) reading of a sentence can be derived in many , many ways . There have been several proposals in tile literature how to tackle this problem  . The first group of approaches uses repeated equivalence tests such that the spurious ambiguities tay local and do not carry over  1 Only the categories on the righthand sides of the ---~- signs are shown  . 
2Ignore the extra decoration i this figure for a moment  . 
i233 globally to the final parse results ( \[Karttunen 1989\] , \[ Hepple , Morrill 1989\]) . But the presence of local spurious ambiguities means that still some superfluous work has to be done by the parser  . The second group of : methods uses topdown information to avoid equivalent derivations completely  . This has been illustrated for the method of prediclive combination i \ [ Wall  , Wittenburg 1989\] where , instead of functional composition , rules like the following one are used : ( PfCl ) xll ( x~lx3 )  , x ~ lx4-+xll ( x41x3 ) This : method has the shortcoming of changing the set of derivable sequents with regard to the original ruleset  . Checke . g . the sequent xil(x2lx3) , x ~ l(x ~ l x s ) , x  ~ lx 6 , ( x61 xs ) lxa--+x ~ . 
Since those extended categorial grammars which are based on the explicit use of functional composition and typeraising seem to be reluctant to leave behind the problem of spurious ambiguity  , we have chosen the Lambek calculus as a different setup for an extended categorial grammar where those rules are theorems but not axioms  . In the Lambek calculus , the problem of spurious ambiguities disappears since one can define a normal form for derivations which can be carried out on the fly  ( cf . \[ Hepple1990b\],\[KS nig1989\]) . One essential characteristic of this normal form is the following : If there is a choice between using an application rule and an abstraction rule  , the abstraction rule is preferred . Another requirement is that no spontaneouses of the abstraction rules do occur  ( cf . Prawitz normal form ,\[ Prawitz 1965\]) . This means that an abstraction rule can only be triggered by lexical material  . 
3 A char t parser for extended categor ia l g rammar The CKY-algorithm  ( \[Aho , Ullman 1972\]) works bottom . -up . It uses a chart of wellformed substrings in order to avoid redundant work  . By defining a parser for the basic categorial grammars  , we introduce our particula representation fchart parsing  . 
3 . 1 Char t pars ing w i th a bas ic cate - gor ia l g rammar A chart is a set of items  . An item is a triple \[ x , i , j \] which states the fact that the category x has been derived from the continuous part of the input string between the positions i and j  . We use a slightly alienated sequent notation where the lefthand side of a sequent is the current chart  , and the right hand side is the goal category g of the grammar  . The *-sign marks the current scanning position . 
Figure 1 shows the processing steps which can be performed with a chart  . The rule ( axiom ) describes the conditions for successful termination of the parsing process : The chart has been processed until its end and there exists an item which covers the whole input string of length n  . The rule ( scan ) replaces a lexeme in the input string by one of the categories it is assigned to in the lexicon  . The rule ( complete\ ) implements leftward functional application : a leftward looking functor which follows immediately its argument causes the addition of a new item with the value category  . For rightward functional application , this works symmetrically . The inference rule-style representation four algorithm abstracts away from details dealing with the appropriate control mechanism which guarantees that e  . g . 
all possible ( complete\ ) -steps are performed with one item . 
The completer step is the part of the CKY -algorithm which determines its cubic time complexity  . The applications of the rules ( complete\ ) and ( complete / ) stay within the same time bound because the search for a pair of reducible items works as in the original algorithm  . In particular , the number of items which span the same section of the input string has a constant bound which is the number of subcategories of the categories occuring in the lexicon  . This number is proportional to the size of the finite lexicon  . 
( L lexicon ; w lexeme ; a string ; I set of items )( ~ xiom ) - ~ , 0*---~Zn(sca ~) xeL(w)\[*W , Ot--*Z ? ~"-- ) " Z ( complete\ ) ' L$J'L'J ( complete / )  ?  001- -+ Z Figure I : A chart parser B c for basic categorial grammars  3  . 2 Extend ing the bas ic char t parser In the traditional concept of a chart every item is visible to every other item in the chart  . For the Lambek calculus , general accessability is inadequate because of its use of hypothetical reasoning : The  ab-234   2 t ; traction rules assert hypothetical constituents which : must only be used in the subproo for the premise ~ equent  . Thus , tile interaction of items must be regulated in a more finegrained way  . 
Fig .   3 shows a section of an L-derivation where ~ use of an abstraction rule occurs  3  . The complex ~ rgurnent of the emitter category */ \[  . . . 
~; riggers the act of a , sserting its own arguments as hypothetical categories  ( in a fixed order ) in addition to a given nonempty category sequence xi  .   .   . xj . We ( : all the sequence of hypothetical categories which are ~ ts serted on the lefthand sidetile left mini-chart  , its symmetric ounter part is a right mini-chart . A sub-proof is carried out on the basis of these additional premise categories  . If this subproof yields a category y , then x spans the whole sequence of premises under consideration  . 
To pertbrmall abstraction rule , obviously an in-termingling of topdown and bottom -up directed ac-t  , ions is needed . The sequence xi .   .   . xj , i . e . the po-:i ; itions where the mini-charts are attached , h ~ to be chosen non-determinist \ tally . Instead of asserting copies of the mini-charts at all positions in the current chart  , it is more convenient to put the mini- , : harts apart and tokeel ) them accessible from all chart positions . An adapted completer rule will built additional kems on the basis of the extended chart  . 
Since there might be several emitter categories in lheoriginal sequent  , it is important o provide the a : ~ serted min i -charts with enough information in ofder to control their use  . In particular , altachrae'alchai ~ zs can arise because , mird-chartsca " . be attached
I . o other mini-charts.
We assume that each value category of a corn-plex argument of an emitter is marked with a unique number m  . Items also have m fiquenl Hnbersa . A ( left ) index of an item is now a quadruple < t , m , i , p ) where t stands t br the type of miui- . charthe\tern belongs to : 1(left ) , r(right ) , or ~ ,  ( , ~ one ); , n is the l tumber of the subcategory which caused the assertion of this \ tern  ; i is a position nulnber relative to the ( re\hi- ) chart wi~h type t and number m ; p is the ~ urn ber of an item in another part of the <: hart where the mini-chart is attached to  . Por items which have been deriw , ' donthe basis of the items given by the input string  , t := n , m = 0 , and p = 0 . 
In figure 4, the extended algorithm is presented.
From the following discussion , various details and , in particular , a proof of correctness , are omitted due to the laek of space . The rule ( compl\s ) is roughly equivalent to ( complete\ ) in the basic algorithm : two items which are adjacent in the same piece of the  ( : hart are combined . The rule ( compl\r ) allows an il ; emattile beginning of a right mini-charto corn -line witlls or ne other item with number alon its left  . The function new last adds the information td ~ out his new attachment point at the end of the  3In the following , symmetric cases are mosl , ly omitted . 
right attachment chain of item a 2 ( see item 6 in figure 2 where the item id 0 is replaced by the id 5 because of ' a ( compl\r ) -step which combines items 5 and 9 )  . In order to avoid cycles , the intersection o\[' the mini-chart numbers which are fbund by traversing all the tbur attachment chain's has to be empty  . 
The work of the abstraction rule ( abstr\ ) is split into the two subtasks : The rule ( emit \ ) pertbrms the assertion of the mini-charts . The rule ( di , sc\ )   ( " discharge " ) is a specialization of the complete rule for fllnctor categories which are emitters  . The conditions in the rule guarantee the following : Both mini-charts which are due to the current emitter must have been used completely in deriving y  . The rigi~t index of the attachment point p4 of y ( determined by a function ri ) must be equal to the left index of the emitter . The value category x must not bear any information about the involvement of the current mini-charts in its derivation  . This is achieved by going back to the attachment point of the left mini-chart  . 
Since each of the O ( n ) mini-charts f bran input string of length n can only be used once in a derivation  , and since we currently do not know any reasonable restrictions  , we assume that any one of the ? ( n ! ) permutations of the mini-charts possibly can be used in a specific derivation  . For every item in the initial chart , O(n !) completer-steps can be possible . 
This means that the whole parser has a time complexity of O  ( n ~ xn ! )  . In order to evaluate the result for tim given algorit  , hm , one has to be aware of tile fact that . this parsing procedure can handlen-fold extraction from phrases-to speak linguistically  . 
If we restrict ourselves to single extraction ( this can be implemented by checking the length of the attachment chain before performing  ( compl\r ) ) then the time complexity reduces drastically : The formulan !/  ( n-k ' ) !t brtile variations of length k of a set of length ' n equals nt brk ' =  1  . Thus , the time corn-plexity of the algorithm is O(n : ~) . If we want to describe two-t bld extraction like in figure  2  , i . e . use a "2-restricted version of Lc" , the algorithm needs O ( n4 ) steps for deriving an input string of length n . 
Conjecture: 1-restricted Lccovers the rules of functional composition and typeraising  , whereas 2-rest , rioted LC suffices to derive the rules of predictive combination  . 
4 Conclusion
We have presented an extension of tile CKY-algo -rithm for an instance of the family of extended categorial grammars which uses hypothetical reasoning  , i . e . for the bidirectional Lambek categorial grammars . Although the current algorithm has an undesirable time complexity in its gener~d case  , one carl define restricted versions which cover tile kind of structures found in linguistic examples with time complexity O  ( n3 ) or O ( n4 ) depending on the . fact 3   235 whether one wishes to describe single or double extraction from phrases  . It is an interesting question whether better Mgorithms for the general case can be found  . 
There are many ways to improve this new algorithm concerning its " average complexity " in practical applications  . For example , the search for a partner item in a completer-step could be reduced by using appropriate heuristics  . Further incre~es in efficiency can be expected , if one allows for arbitrary embedding of disjunctions and slashes in categories  ( of . \[Benthem 19891 , \[ Morrill 1989\] ) instead of using the flat set notation which amounts to a disjunctive normal form of categories in the lexicon  . 
Theoretical complexity results for a group of categorial grammars reaching beyond contextfree languages are known  , as well . From the fact that certain extended versions of categorial grammars  ( CCG ) are equivalent with the Tree Adjoining Grammars ( TAG )   ( \ [ Weir , Josh\[19881) , the O ( n4 log n ) -time complexity of TAG-parsers ( \[t Iarbusch 1989\] )  , in principle , carries over to CCG . 
The connection of the propositional grammar calculias discussed above with a unification device for first order ms is done by taking care of the variable bindings in the hypothetical categories which are asserted by the abstraction rules  . The recognition problem is still decidable ( cf . \[ Pareschi 1988\] ) although surely not well-behaved as this is the case for all non-propositional grammars  . For example , the recognition problem for a . basic categorial grammar wittifeature unification is NP-complete  ( \[ Morrill 1988\] )  . Higher order versions of categorial grammars like the ones being produced in the CUG/UCG -frameworks  ( \[Uszkoreit 1986\] , \[ Zeevatetat .  1986\] ) where variables can range over categories are in general undecidable because higher order unification itself is undecidable  . 
5 Acknowledgements
The research reported in this paper is supported by the LILOG project  , and a doctoral fellowship , both from IBM Deutschl and OmbH , and by the Esprit Basic Research Action Project 3175   ( DYANA )  . I thank Andreas Eisele for discussion . The responsibility for errors resides with me . 
Referencesl Ades , Steedman 1982\] Anthony E . Ades , Mark J . 
Steedman . On the order of words . Linguistics and Philosophy , 4:517-558, 1982 . 
\[Aho , Ullman 1972\] Alfred V . Aho , Jeffrey D . Ullman . The Theory of Parsing , Translation and
Compiling . Prentice Hall , 1972.
\[Benthem1989\]ao hanvan Benthem . Categorial grammar and type theory . Linguistics and Phi-
Iosophy , 1989.
\[Harbusch1989\]Karinttarbusch . Effiziente Struk-tur analysen aliir licher Sprache mit Tree Adjoining Grammars  ( Efficient Parsing of Natural Language with Tree Adjoining Grammars  )  . PhD thesis , Uni-versit?t des Saarlandes , Saarbriicken ,  1989 . 
\[ Hepple1990 a\] Mark Hepple . Gramrnatic M relations and the Lambek calculus . In Proc . of the Symposium on Discontinous Constituency , Tilburg , The Netherlands , Institute for Language Technology and Artificial Intelligence  ,  1990 . 
\[ Hepple1990b \] Mark Hepple . Normal form theorem proving for the Lambek calculus  . This volume . 
\[ Hepple , Morrill 1989\] Marktepple , Olyn Morrill . 
Parsing and derivational equivalence . In Proc.
EACL , Manchester , 1989.
\[Karttunen1989\]Lauri Karttunen . Radical lexicalism . In Mark Baltin , Anthony Kroeh , eds . , Alter-~zalive Conceptions of Phrase Stvact'are , University of Chicago Press ,  1989 . 
\[K6 nig1989\]Es the rKbnig . Parsing as natural deduction . In Pr'oc . ACL , Vancouver , B . C . , 1989 . 
\[Lambek1958\] Joachim Lambek . The mathematics of sentence structure . American Mathematical
Monthly , 65:154-170, 1958.
\ [ Morrill 1988\] Glyn Morrill . ?' ztraction and Coordination in Phrase S'tr ~cture Grammar a Ttd Categorial Grammar  . PhD thesis , University of Edinburgh , Centre for Cognit . ive Science , Edinburgh,
Scotland , i 988.
\[Morrill1989\] Gtyn Morrill . Grammar as Logic.
Technical Report EUCCS/IP-34 , Centre for Cognitive Science , University of Edinburgh , Edinburgh , Scotland ,  1989 . 
\[ Pareschi1988\] Remo Pareschi . A definite clause version of categorial grammar . In Proc . ACL,
Buffalo , N.Y ., 1988.
\[ Prawitz 1965\] Dag Praw Rz . Natural Deduction.
Alqvist and Wiksell , Uppsata , 1965.
\[Uszkoreit 1986\] Hans Uszkoreit . Categorial unification grammars . In Proc . COLING , Bonn , 1986 . 
\[Wall , Wittenburg 1989\] Robert , E . WM1 , Kent Wittenburg . Predict . iren or mM forms t br function , :: omposition in cat , egorial granim ~ rs . In Proc . of the I'a~e`alional Workshop on Parsing Technologies  , Carnegie Mellon University ,  1989 . 
\ [ Weir , Josh\[1988\] D . J . Weir , A . K . Josh \ [ . Combinatory categorial grammmars : Generative power and relationship to linear contextfree rewriting systems  . In Proc . ACL , Buffalo , N . Y . , 1988 . 
\ [ Zeevat et al1986\] Henk Zeev at , Ewan Klein , Jo Calder . Unification Categorial Grammar . Tech-Meal Report EUCCS/R . P-21 , Centre for Cognitive Science , University of Edinburgh , Edinburgh , 
Scotland , 1986.
2364 " l(~l~p)(n , o , o)
I ~)'?'''?)_ ~
Wel %/ whom
Sn , o , o , o)n , O , 5 , 0) 15) s/np(n , O , l , O ) ( r , mt , l , 5)
In , O , 1 , 0)_/"\ says ~/((~\~ p)\~)n , o , 2 , o ) r , m2 , 1 , 11) (' , 3) r , m2 , 1 , 1112) ( n , o , 3 , o ) ( r , ml , l , a ) " ~ . 
nps/((s\np)\np)(n , o , 2 , o ) s1 ~ ; , ?  ,  ' ' / ~ , ) , ~ , o ~\ . .
poto~s/(~/~)~) , o , 4 , o ) r , mL0 , 0) liebtnp/~) , rn3 , 1 , 6) loves ( n , o , 4 , o)Ig , o , ~ , o ~ /---~( z ' , ml , O , O ) ( r , ~ , a , o , o ) r , ,~l , t , CJ ) ( r , ~ , a , 1  , o ) 6) (8) (8\~p)\s(r , ,n%0 , o ) ( r , m2 , 1 , 0 )   ( 7 ) Figure 2: Long dist~mee dependency\[tv = ( s\np ) \ np , iv2 = ( s\np)\s\]x/\[ . . . ( y/x ~)\ xl ~) . . . \ x11)/~21\]\[ . ( y/~)\~ip . . .  \~ . ) / ~ q
Y ~.. ~ x ~. ~ ~... ~; j
Figure 3: Schema for the use of the abstraction rules 5   237   ( axiom )   ( sca , O\[(~)(ol\]
I , ( n , o , o , o ) ?- ~ z(n , o , , , ,o ) \[ (~)( o > x 6 L(w ) I , / n , o , i , o ) ( It , O , i+1 , 0 ) \[ OW~O~---~ZoO~--+Z ( compl\s ) p2 = OV p3 = O , ( t2 , m2 , i2 , p3) , ( tl , ml , i l , pl ) , ooz -+ z(t2 , rn2 , i2 , p2) ( t4 , m4 , i4 , p4) ( t4 , m4 , i4 , p4)\]:\[\]I , \[ YtI , ml , ii , pl ) x\y(t2 , m2 , i2 , p3) ? OL--+Zt2 , m2 , i2 , p2) ( t4 , m4 , 14 , p4 )   ( compl\I ) chain ( p1 ) F1 chain ( p2 ) Nchain ( p3 ) nchain ( p4 ) = new last ( pl , a2)\[(v)~o , l\[(~\~)~o2~l\[(~)~o ~ . lI , (* l , ml , i l , pl)/ , /( ta , ma , i3 , p8)/ , /( t  ~ ,   , ~ .  ,  .   , pl)/ , ' c~---+z(1 , m2 , 0 , p2J(t4 , m4 , i4 , p4Jk(t4 , m4 , i4 , p4J , \[( y)~oi ~--1'\[(~\ y)(o~1_ , 
L 1 ,  '~2 , ?  , P ~) Jk it 4 ,   ,   , p~j ( compl\r ) new last ( p4 , al ) I , ( tl , ml , i l , pl ) , ( r , ma , O , p3 , ( tl , ml , i l , pl \] , IDOL--~Z(t2 , m2 , i2 , p2t 4 , m4 , i4 , p4) ( t4 , m4 , i4 , p4) r(tl , ml , i l , pl ) ( r , ma , o , pa ,   , c~--+z(t2 , m2 , i2 , p2(Z4 , m4 , i4 , p4(emit \) I ,  1 , ma , ~  , o ) ,   .  ,  . , (1, ma , l , O ), ( r .   .   .   .   . o , o), .   .   .   , /r ,   , na , q-1 , 0) 1 , ma , p-1 , 0) (1 , m3 , O , O ) ( r , m3 ,  1 , 0) ( r , mS , q , O ) x\\[ . . . (vl , , al/x~)\'~,,) . . . \ x ~) / ~\] tl , ml , i l , pl ) ? OL"-+Z2 , m2 , i2 , p2)\[~X\[ . . . ( v(~al/~2 e )\~*~) . . . i11)/~=~1
I , ( tl , ml , i l , pl ) ? o ~ -- + z(t2 , m2 , i2 , p2)( disc\)~?(p4) = ( , 1 ,   , ~1 , i l , ~ i > . . . .
( tl , ml , i l , pl ) ? Ot--~Z(r , mg , q , p4) ( t2 , m2 , i2 , p2 ) o ~ - - + Z Figure 4: Chart-parser Lc for Lambek categorial grammars ( L lexicon ; w lexeme ; a string ; aitemid ; I set of items ) 2386
