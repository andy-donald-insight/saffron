METHODSFOROBT AINING CORRES PONDING PHRASE
STRUCTURE AND DEPENDENCY GRAMMARS
Jane J . Robinson
International Business Machines Corporation
Thomas J . Watson Research Center
Yorktown Heights , New York
ABSTRACTT wo methods are given for converting rammars belonging to different systems  . One converts as ~ mple ( context-free ) phrase structure grammar ( SPG ) into a corresponding dependency grammar ( DG )  ; the other converts a DG into a corresponding SPG  . 
The structures assigned to a string by a source grammar will cor-respond systematica lly  , though asymmetrically , to those assigned by the target grammar resul ting from its conversion  . Since both systems are we aldy equivalent , generating exactly the CF lan-guages , the methods facilitate experimentation with either notation in devising rules for any CF language or any CF set of strings des igned to undergo subsequent transformation  . 
A source SPG is assumed to be of ' finite degree with or-dered rules in which only the initial symbol is recursive  . Unless the source grammars obey additional constraints  , the target gram-mars may exhibit a peculia r property  , defined as " structure sensi-tivity " . The linguistic implications of the property are discussed  , and the linguistic motivation for impos ing the constraints necessary to avoid its appearance is suggested  . 
The authorowes an especial debt to Jesse Wr ight of the Automata Theory and Computability Group in the Mathematical Science De-partment of IBM Research for many helpful discussior ~ s of theore-tical problems arising in the course of this investigation  . 
In an article on dependency theory i appearing in 1964   \[5\]  , Hays remarked , " Casual examination suggests there would be little difference between transformation of dependency trees and transformation of IC \[ immediate constituent \] structures  , but no definite investigation has been under taken  . " Since then , a dependency grammar with transformation alru les has been designed for a subset of English sentences  , and preliminary results indicate that Hays ' observation is correct  . \[9\] In either case , transforma-tions are specified in terms of labeled trees  , and the number of branches and the denotations of the labels do not affect the essen-tial operation  . Since the base grammar is generally limited to the generation of context-free pro-te rminal strings of " deep struc-ture "  , and since context-free languages are characterizable in either dependency or phrase structure  ( i . e .   , immediate constitu-ent systems , neither system is clearly preferable as a base  . A linguist may find that the notation affo rded by one or the other is simpler for characterizing some language  , or for defining struc-tures to be trans formed  , or for adapting a grammar to computer applica tions  . A linguist may also wish to experiment wi th grammars of both types  , or redesign transformations defined on thes tructures of one base grammar in order to incorporate them into a transformation alg rammar using a different base  . 
Such considerations as these motivate the present treat-ment of the problem of obtain ing paired grammars by converting a grammar of one kind into a systematically cor responding grammar of the other which generates the same sentences and assigns com -parable structures  . In addition , conversion draws attention to some linguis tically significant relationships that may exist unno-ticed among the categor ies and rules of the source grammar and which may induce in the derived grammar a peculiar property of structure sensitivity  , roughly analogous to context sensitivity . 
This property will be exhibited and di scussed in the course of il-lust rating the method  . 
We begin concretely by inspecting ( Fig . i ) a pair of gram-mars : SPG1 , a simple or context-free phrase structure grammar of the kind formalized by Chomsky  \[2\]  , Bar-Hillel \[ i \] , and others , and DGI , a dependency grammar of the kind formalized by Gaif-man4\ ] and Hays \[5\]   . Two structural diagrams , a P-tree and a D-tree drawn beneath the grammars , illustrate the structure each assigns . 
The rewriting rules of SPO tare of two k inds  , those in which only categories appear , and those in which a category is re-written as a terminal  ( lexical formative or word )   . The latter may be separated from the former and made into assignment rules  , iFor additional material on dependency theory  , see Ref .  6 . 
SPGIDGI
Axiom :  #S #
Rewriting Rules : i . S ~ NP VP 2 . VP--~VNP 3 . NP ~ DN ? ~ the 5 . D ~ some 6 . N ~ boys 7 . N---girls8 . V--~like 9 . V ~ admire(ia )
Axiom :*( V )
Dependency Rules : i.v(N*N )
Z . N(D *) 3. D(,)
Assignment Rules : i . D : the , some 2 . N : boys , girls3 . V : like , admire(Ib)

D N
I the boys

VNP

D N
II like the girls ( Ic )



DI

II iI the boys
IN

IDI
III
I ! ii I like the girls ( Id)
Figure it here by increasing the resemblance of SPG i to DGi in an obvious way  . This is possible because SPG t does not conta in any mixed rewriting rules in which both categories and lexical formatives appear on the right  . It can be shown that any SPG which has mixed ru les  , in this sense , can be converted into one which does not mere lyby introducing new categories  , without affecting generative power . Thus there is no reason for not separating the two types of rules  , and Chomsky ~ devotes a good part of Aspects of the Theoryo_ff Syntax  \[3\] to giving linguistic reasons for just such a separation  . 
Hereafter , " rewriting rules " will refer only to those like rules i  -3 in SPGi , and those like rules 4   -9 Will be called " assign-ment rules " . Categories which do not appear on the left of any re-writing rules are terminal ca tegories  . 
With each category of SPG i , we associate a number called its degree . To say that a category is of degree n means that n is the fixed upper limit to the number of nodes of the shortest path leading f romit to a terminal category in any st ructure derived from St by successive rule applications  . A category may be of in-finite degree . For example , if X ~ X X , then X is of infinite de-gree and so is the grammar in which it occurs even though another rule rewrites X as a string conta ining only terminal categories  . ) i In SPG t the terminal categories D , N , V are of zero degree , since they are not rewritten ; the categories NP and VP are of degree i , since at least one category in their rep lacement is of zero degree  ; and the degree of S is 2 , since the least degree assigned to any category on the right of the rule for rewrit ingSisi  . The maxi-mum number assigned to any category in a grammar is also the degree of the grammar  ; therefore , the degree of SPGi is 2 . 
An essential difference between SPGi and DGi no we merges more clearly  . DG i uses only terminal categories , while SPG i uses categories of higher degree . The effects of the differences are ref lected in the structure of the P-tree and D -tree  . The latter has fewer branches , and this will always be the case for st ructures assigned to the same string by grammars belonging to the two dif-ferent systems  . 
Even so , there is a systematic correspondence between the two trees and their labels of a kind de fined by Hays  \[5\]   . Every complete subtree of the D-tree , that is , every node taken together with all of its descendents  , covers a substring of the sentence that is covered by a complete subtree of the P-tree  . The conver , se does not hold , but every complete subtree of the P-tree covers a substring that is covered by a connected subtree of the D-tree  . In iFor a more precise characterization of " degree "  , see Gaifman \[4\] . 
3 ? the example , both complete subtrees dominated by N in the D -tree correspond to the two complete subt~ees of the P-tree dominated by NP  , and the complete ( sub ) tree dominated by V corresponds to the complete ( sub ) tree dominated by S . However , the complete subtree dominated by Vloint helo -tree corresponds to an incomplete subtree of the D-tree  , which is dominated by V but includes only V and the branches to its right  ; so that the relationship of cor-respondence is asymmetrical  . 
While such systematic correspondences exist between the structures assigned to all st rings generated by SloGi and DGi  , this is not the general case . In general . ~ i . Any context-free language can be generated by grammars of either simple phrase structure or dependency systems  . 
2 . For any given SPG , there exists one or more DG over the same language all of whose structures correspond systemati-cally to structures assigned to the same strings by the SPG if and only if the SPG is of finite degree  . 
3 . For any given DG there exists one or more cor responding SloG  . 
4 . For any given DG there exists a unique SPG of degree i that is strongly equivalent o it  . 
Gaifman \[4\] gives a very general method for constructing corresponding DG from any SloG of finite degree  , and also a method for constructing a unique SloG of degree t from any DG  . Here we give two methods for constructing cor responding Slog and DG that differ from Gai fman's  . The first applies only to a more re-str icted set of SI?G and leads to reduced DG  , whereas Ga~fman's method tends to produce DG with overlapping categories and super-fluous ru les that may never be used to generate any str ing  . The second allows construction of SPG of degree greater than i from certain DG  . 2 A simplified sketch of the two methods follows . Each rewriting rule is " augmented " by starring a category on the right  . 
Each dependency rule is augmented by assigning a numerical coefficient to each dependent  . Figure 2 shows a possible augmented lloro of s are given by Gaifman  \[4\]  . It is assumed that the Slog is nonerasing and reduced  ; that is , no category is rewritten as null , and there are no superfluous categories or rules . 
2The second method was suggested by Kay's procedurefor constructing lo-trees f rom D -trees  \[7\]  . More precisely , an S log of degree n > i may be derived if , in the DG , some categories govern two or more dependents , and the left-or rightmost depen=dent itself governs dependents  . 
form of SPGI on the left and a possible augmented form of DGI on the right  .   ( Detailed consideration of the problem of augmentation@ill follow the sketch of the operations  . ) These augmentations were deliberately chosen so that conversion of either grammar uniquely produces the other  . Different augmentations produce different results  , although structures of the original grammar and of the grammar derived from it still cor respond  . 
SPGIT SIRLDGI
S--NP Vim * S : Vz V2---Ni . IV i * V ( 2N * iN ) VP---V*N1 mVP:ViVi-~V0NiN ( ID * ) NP ~ DN*NP:NiN1---DONOD ( * ) 
Figure 2
The columns TS and IRL in Figure 2 represent a Table of Substitutes and an In termediate Rule List  . In the conversion of SPGi , the TS is constructed , equating each category on the left of a rule with a superscripted terminal category  . The numerical superscript hereafter cal led the exponent  ) equals the number of rules traced through when tracing by starred categories before as tarred terminal category is reached  , and expresses the distance between the term in a l category and the category for which it is a substitute  . In the IRL , the categories occurring in each rule of the SPG are replaced by their substitutes from TS  . Taking the first LRL rule , construction of a dependency rule is begun by replacing the arrow with parentheses enclos ing the substitute categories on the right  . Thus from the first IRL rule in Figure 2 we obtain V 2   ( Ni V ~ )  . The construction of a dependency rule is continued so long as the exponent of the starred category X ~ is greater than zero  . The next step is to search the IRL for a rule with X s on the left  . The categories on the right of the new rule are inserted in the parentheses of the D rule under construction  , in the position of X ~ , but no new parentheses are added . When the starred occurrence is X ~ , it is replaced by * , all exponents are erased , and the dependency rule is complete . The process is repeated for new dependency rules until all IRL rules are exhausted  . 
We must add rules to the constructed DG for any unstarred terminal category of the IRL  . The added rules assign no dependents and are of the form D  ( * )  . The assignment rules are simply transferred , and since V is the substitute for the axiom category S  , it is taken as the axiom for the DG . 
Going in the other direction from an augmented DGI to SI :' Gt  , we first assign an exponents to each category  , where s equals the largest coefficient of any dependent of that category  . If a category is not assigned dependents , its exponent is zero . The first rule of augmented DG tnow appears as Vz  ( ZN 1*1Nt )   . 
From this rule two rules are constructed fo r the IRL  ; that is , the number of IRL rules constructed from each rule of DG t will be equal to the exponent of the governor  . The first rules o obtained writes the governor with its exponent on the left of the arrow  . All of its dependents whose coefficients equal that of the exponent are written in o rder on the right  , and the governing category with its exponent decreased by t is written with the *  . Thus we obtain Vz ~ N1 Vt .   . The second rule is obtained in a similar fashion  , with the exponent of the governing category d iminished by  1 yield-ing Vt-~ V0   N1  . ' The process is repeated until an IRL rule re -writing some category with exponent equal to  1 is used , after which the next DG rule is processed , and so on until all DG rules are exhausted . 
At this point , the *' s may be erased and , except for cate-gory labels , the IRL is exactly equivalent to the rewrit ing rules of the original unaugmented SPG  . The only function the TS serves is to reass ign labels  . Assignment rules are transferred and the sub-stitute for the axiom of DGt is added  , tSPGI and DG1 are very simple , with no embeddings and no optional rules . More complicated grammars give rise to problems of augmentation  , especially for SPG . Even SPGI poses a problem . 
Assume it had been augmented by starring NP in rule I and in rule Z  . In that case , the same substitute , NZ , is assigned to both S and VP , and the procedure produces a DG that is not even weakly equivalent to the original  . Clearly some constraints must be imposed on augmentation and provision made for grammars in which it may not be possible to avoid starring a category more than once  . 
Similarly , assume that some DG has a rule of the form C ( AB*D )  , and that this is augmented as C ( tAZ\]3*tD )   . The
IRL rules are:
Cz --, BC$
C1 ~ ACOD.
But now the rules generate the sequence \]3 ACD , which was not generated by the original ru le  , and do not generate ABCD , which was . This is remedied by requiring that if a coe fficient n has been assigned to a dependent  , no higher number is assigned to any dependent which intervenes between it and the *  . We will also re-quire that at least one dependent be preceded by t  , and if any dependent is preceded by n > t , there must be at least one dependent 1A l though grammars with only one axiom are il lust rated  , gram-mars with more than one axiom can obv iously be handled as well  . 
preceded by n-i . This is not crucial , but it avoids setting up unnecessary , single-branching categories in the derived $ PG  . Note that if all dependents in any rule are preceded by i  , which is the same as not augmenting the DG at all  , the resulting SPG will be of degree i ; that is , each rule of the grammar will contain at least one terminal category on the right  . This is equivalent to Gaifman's procedure  \[4\]  . 
Augmentation of SPG is the more difficult case . Primarily it is the problem of constructing the TS in a finite number of steps  . 
For ex~mple , if for S---NP VPS the S is starred on the right  , an infinite loop is created immediately . This is easy to avoid when considering a single rule or a small set of rules  , but we do not know in general whether some series of rule augmentations may not lead to the same situation  . Gaifman's solution is to require that the marked category be of lesser degree than the category on the left  , but this not only leads to a proliferation of categories in the derived DG whenever the SPG has more than one rewriting rule for any of its categories  , it prevents us from deriving the simplest corresponding DG in some cases  . IOn the other hand , the method employed here will not work unless some restrictions are imposed on augmentation wh ich also imply restrictions on the form of the SPG in addition to the requirement of finite degree  . It is not clear what restrictions are minimally necessary  , but it is sufficient to require , in addition to finiteness of degree , that the rules of the SPG be ordered , so that in a developing derivation , if rulen has been applied , no rule m , m < n , need be applied thereafter . This is too restrictive , and does not allow for full recursion . We may , however , allow a dummy symbol , S ' , to appear in any rule rewriting some X as a string containing some Y  , S ' ~ Y ~ X , where S' is replaced after one application of the set of rules by  #S#  , the axiom , so that the rules then reapply in linear order . 
Any $ PG of finite degree with ordered rules providing for recursive application in the manner specified can be converted to a corresponding DG by the method given here  . The base component proposed by 2Chomsky   \[3\] for transformational grammar is an SPG of this form  . 
l " Simplest " with respect to process , number of categories , and freedom from the property of structure sensitivity  . Seep . 14 ff . 
2Chomsky does not explicitly require that if S ' appears in rewriting X  , some Y(S ' ~ Y ~ X ) appear in the rule also , but implicitly observes the restriction . A new grammar for English by Rosenbaum \[10\] contains a rule NP~NPS ' which does not observe it  . This is the only case known tome of an actual g rammar for some !' real " language that violates this restriction  , and Rosenbaum does not claim any strong theoretical motivation for the rule in-question  . 
Cf . also Lees\[8\], and the MITRE grammar\[11\] . 
We turn now to more detailed consideration of augmenting and converting SPG subject to the above constraints  . While the constraints insure that the SPG can be workably converted  , some linguistically significant problems arise if we consider how to derive a simple DG  , and it will be shown that under some conditions the derived DG will exhibit a feature not here to fore considered in the literature  , a feature of " structure sensitivity " . 
Methodi . Conversion of SI :' G to DG
Stepi . Augmentation
All rules of the SPG which rewrite a given category are conflated and written as one schematized rule  , with square brackets enclosing optionally omitted categories and braces enclosing li sts of categories from which a single cho ice is made  . tThusZ-- , \[ W\]X conflates four rules , and will , in any given application , rewrite Z as either WX or WY or
X or Y .
Beginning with the first rule rewrit ing some X and pro-ceeding in rule order  , star occurrences of categories , ex-cluding the dummy symbol SI , on the right in such a way that one and only one starred category Y % where Y ~ X  , will oc-cur in any application of the rule  . 2It follows that no bracket-ed ( omissible ) occurrence may be starred . If more than one category is starred , the schernatized rule must be separated into as many rt  , les as there are starred categories , with one starred category appearing in each . For example , X-~C must be separated into X-~A*C~D*F JX--D*F  . This is a partial undoing of the conflat ion  , but for linguistic reasons all ways of rewriting a category will usually have some element in common and some  c0nf lation will usual-lybe preserved . 
iSquare brackets are used here rather than the customary parentheses to avoid confusion wi th the parentheses used in the derived DG  . More exactly , \[\] and enclose lists of strings of ca tego-ries  . In the case of \[\] the list may consist of one member  , and in both cases the strings may consist of one item  . 
Z Since the SPG must be finite , no rule will rewrite X as a string or al s in any application  , and some other category of degree less th ~ nX wi ll be available for starring in all cases  . 
If the simplest DG corresponding to the SPGi s desired  , then it is preferable to augment the SPG in such a way that a  ) no category occurs both starred and non-star red on the right  , and b ) no category is starred on the right of two or more rules which rewrite different categories  . 
But it is not always possible to observe these policies  , and in that case , additional augmentation is necessary in order to distinguish among occurrences of X as the marked constituent in the rule rewrit ingY  , X as the marked constituent in the rule rewri ting Z  , Z  ~ Y , and X as an unmarked constituent of any category  . 
Assume some category X is starred in two or more rules which rewrite different categories  , 1 say Y and Z , and also occurs unstarred on the right in some rules  . The two X*'s are assigned different subscripts to avoid assigning the same substitutes for Y and Z with the consequent loss of essential information  . We now have three varieties of X , namely : X , XI , and X2 , where X is the unstarred variety , XI is the marked constituent of Y , and X2 of Z . ( If X does not occur unstarred , only X and XI are needed . ) If X is not a terminal category , there is a rule rewriting X . Then we must add , beneath that rule , rules for rewriting X1 and X2 . If
X ~ U*W , we add XI ~ UI*W and X2-~U2*W.
Now , if U is not a terminal category , we add rules for rewriting UI and U 2 beneath the rule rewriting U . Thus the process of adding rules is iterative , but it will eventually end when , in some lower rule , a terminal category is starred . 
Note that in some cases sub-subscripts are needed . For example:
I.Z . ... PI*"""2. X . . . . RI * . .
3. Y . . . . R2 * ...
4. R ... P2*"""5.P ... A * ...
IX  #may occurgory , Y .
E.g ., in Y - ~
LY ~ X ~ Z * more than once in rules rewrit ing the same cate-YX  , the only possible starring is
Z , which produces three rules for Y , in two of which X * occurs . 
1" roceeding down the rules , we see first that p t ~ and OCCURS , scanning down the left , ~ that P's are not terminal categories and that there is no rule rewriting  1"1" Therefore , beneath1" .   .   .   . A * .   .   . 
we add Pt . . . . At * . . . .
In the second rule , RI * occurs , is non-terminal , and requires a rule , so beneath we add
RZ * occurs beneath we add 1"2" occurs beneath we add
Our rules are now : 1 . Z .   .   .   .  1"1"" "" 2 . X .   .   .   . R t * .   .   . 
3. Y . . . . RZ * ...
4 . R .   .   .   . P2*"""5 . R1* .   .   .   .   .   .   .  1"21 6 . R2#; .   .   .   .   .   .   . P227 .  1"  .   .   .   . A * . .  . 
8. Pl . . . . AI * "" " 9.1"2 . . . A2* ...
R ...1'2 ....
Rt---1"21#;.?.
in the third rule , under the same conditions , and
R1*.......'1"21
R2* .   .   .   .   .   .   .   . 1"22 in the fourth rule , under the same conditions , and 1"1 .   .   .   . At *""" 1"2  ~ ' ' '  A2* ''" and we are looking at rule 5 where P2 i * requires us to add t0   .   .   .   .   .  *  .   .   .   . P21 A21
Rule 6 requires us to add t t .   .   .   .   . 1 = 22 A22 .   .   .   .   . 
But in rule 7 , A #; requires no additions , because A is not sub-scripted , and the subscripted A's in rules 8   -1 trequire no ad-ditions because A's are terminal categories  . 
As a result , no Xi * occurs on the right of two or more ru les which rewrite different categories  . 
This process and the remaining steps will be illustrated using  SPG2  . In order to show the effects of different choices  t0 : ii in ~ ugmentation ,   SPG2 will be augmented in a way that delib-er a tely violates the policies advocated for starring  ( but not the restrictions )   . 

Axiom : S
Rewriting Rules:
I . S ~ NP ~ VP 2 .   VP4" VNP*\[NP\] 3: NP--~DN~We will assume assignments are the same as for SPG t with the additional as s ignments of " s end " and " give " to V  , and " books " and " flowers " to N . INote that , in this augmentation , NP is starred twice and also occurs non-s tarred on the right  . Subscripting and dupli-cation are requi red  , resulting in i . S---NP ~ VP z . vP-v\[NP\]3 . NP ~ DN~4 . NP1 ~ DN~5 . NP2 ~ DN~Step 2 . Establish a table of substitutes ( TS ) of 2 columns and n rows , where n equals the number of rules in the SPG ( after step i )  . List categories on the left in columnt , and starred categories on the right inco lumn  2  , in order . Eliminate any duplicate rows . ( Cf . p . 9, footnote l . ) At the end of step 2 , applied to SPGZ , the result is

SNP i
VP NP z
NPN
NP iNI
NP zN 21 In a transformational grammar , lexical assignment rules of more complex fo rm than that given here would presumably block the generation of un-English sentences  . 
li
Step 3 . Starting with k = i , try to match the category in row k , column 2(k ,  2 ) with a category occurring in columniof a lower row  . If a match is found on row m , check to see if a match also occurs on m+i . This will be the case if the SPG contains more than one rewriting rule for the category in '  ( k ,  2 . ) If it does , markmas a branching point , insert a duplicate of row k beneath row k the duplicate will be row k + i  ) and follow separate branches for substitu tes for  ( k , i ) and ( k + i , i ) . Replace the category in ( k , 2) with the category in ( m ,  2 ) and repeat the search on the remaining lower rows  . 
When the search is exhausted , assign an exponents to the last category obta ined the final substitute in column  2  , where s equals the number of matches plus i . Increment k and re-peat until every category in column i has a substitute that does not appear in column i  . At the end of step 3 , we obtain a unique substitute for every rewritten category of  SPG2  . i

NPN ii
NP i N ii
NP2 N2
Step 4 . Construct an Intermediate Rule List ( IRL ) by replacing each category in the augmented SPG rules with its substitutes from TS  . If a category has no substitute , superscript it with a zero . If X i has more than one substitute , include them in braces wherever Xi appears on the right  . If a category X occurring on the left has more than one substitute  , provide a separate rewriting rule for each substitute y S such that yn  . _~ .   .   . _nSys-i ~ .   .   .   . 2 I f a non-s tar red category on the r ight i In cases  , not illustrated here , where several substitutes are found because several rules rewrite some Xi  , each substitute will be uniquely as s igned to X i  . 
2E.g ., assume X . . . . A ~...
~' X . . . . Y ~ ...
Y .... B ~...
Y .   .   .   . C  ~ .   .   . Aiso that the substitutes for X are , B2 , and C2 , and the substi-tutes for Y are Bi and Ci . Then the IRL is: i2 has more than one substitute , include all substitutes as braced options . At the end of step 4, we obtain 2N ~*21 . N1---N2
ZV0NiZ,\[Ni\]2 . N23 . N1-*DON O1-~DON ~* 4 . Nit--~DON ~* 5 . N2 Step 5 . Take the first unmarked IRL rule , which rewrites some X ~ , sets as a counter , and write X n followed by a pair of parentheses enclosing the string of categor ies on the r~ght of the IRL rule  . Note that the string will contain an X s-  *  . 

Step 6 . Mark the previously processed IRL rule , decreases by t , and test for s = 0 . If so , go to step 7 . Otherwise , finds the rule which rewrites the new Xn . Replaced the starred xS * in the current Dru le with the categories on the right of the IRL rule  . Repeat step 6 . 
Step 7 . Test to see if any unmarked rules remain in the IRL  . If they do , return to step 5 . If not , a . Erase starred categories , leaving only the star . 
b . Add rules of the form X ( * ) for any non-starred terminal , category of the IRL . 
c . Add as axiom ( s ) of the DG the substitute ( s ) of the axiom ( s ) of the SPG . 
d . Add the assignment rules of the SPG . If a category is subscripted in the DG , the assignments are duplicated for each subscripted variant  . 
e . E rase exponents.
At the end of step 7 , we obtain the derived DG2 . 
Axiom :* ( Ni )
Dependency Rules : 1 . NI(D*N2)2 . Then the IRL is : Ai .   .   .   . A0 .   .   . 
B2 . . . . Bi , ...
C2 . . . . CI , ...
BI . . . . B 0...
CI__~..C0...

Z . N z ( V D ? i N\]) 3 . N(D *) 4 . V (*) 5 . D ( * ) If we interpret each distinct X n as a separate category  , then the same list of words is assigned to the three categories  , N , Nf , and NZ , by the assignment rules . If we interpret them as the same category , then the subscripts distinguish the different substructures of a sentence in which the N's occur  . Each N governs a D directly on the left , but if it is the axiom it is required to govern another N on the right also  . If N is not the axiom but is governed directly by the axiom  , it ~ governanother N on the right , and is required to governa V on the left . If it is neither the axiom no radirect dependent of the axiom  , it governs nothing but the D . We may noterase the subscripts and write a single conflated rule N  ( iv\]D ? iN\] )  , for then strings not generated by SPGZ would be generated  . ( For example , the rule would generate an infinite set of s trings  , ( DN ) n . ) In such c i rcumstances we say that the DG is s t ruc ture sens i t i ve  . 
Definition i . ADG is structure sensitive if a . the set of terminals assigned to one category is identical to the set assigned to any other category  , and/or b . any rule restricts the choice of dependents a category may govern to a subset of the ordered dependents it is permitted to govern in some other rule  . 
Note that a DG containing the rules A ( * ) and A ( B ? C ) is structure sensitive by this definition . Here , too , conflation is impossible , since A ( \[B\]?\[C\] ) allows A to gover nB without gov-erning C . 
This structure-sensitive feature of some DG apparently serves functions llke those served by the context-sensitive feature of context-sensitive phrase structure grammars in placing restric-tions on the string generated  , but there seems to be no mention of it in the l iterature  . Its character may be masked by the freedom to setup categories and assign the same term in a ls to them  . iFor example , one may substitute simple symbols X and Y for the complex symbols Ni and N  2  , and obtain the rules
X(D*Y )
Y ( VD ~' iN\])
N ( D * ) iGaif rnan's method \[4\] for converting SPG to DG makes great use of this freedam  . 

In this case , only the assignment rules , assigning exactly the same set of terminals to X  , Y , and N , explicitly show the struc-ture sensi tivity  , ' although the fact that N governs a subset of the dependents of X and Y is significant  . 
Such arbitrariness in assigning symbols ra is es the signifi-cant linguistic p roblem of criteria for establi  . shing categories , which is too large an issue to be discussed here  , The p . roblem is no less relevant to SPG , Definition Z . An SPG is structure sensitive if a . the set of terminals assigned to one term in a l category is ? identical to these tass igned to any other  , and/or b . any rewriting rule does not contain , on the right , a unique category ( other than the axiom ) which occurs only once in that rule and appears on the right in no other rule  . 
The linguistic implica . tions of the property may be clarified by considering two sets of rules  , one for the artificial language an ba n and one for a fragment of English  . 
The language anban is generated by the rules S ~- ~ ASA  , S  ~ B , A  ~ a , and B ~ b . The first rule " does not contain a unique category  ( other than the axiom ) which occurs only once " , since A occurs twice . One of the A's must be starred in con-vert ing to a DG and the DG will distinguish two categories of a  , a leftA and a rightA . Note that the same language is generated if the first rule is S~AS and a transform at ional rule XB => XBX is added  . In this case , each rewriting rule con-tains a unique category other than the axiom  , and a structure-free set of dependency ru lesis obtainable from them  . 
A less artificial but still extreme case of structure sensi-tivity is that in which two or more rules are rewritten in exactly the same way  . Assume that an SPG for English has the fol lowing rewriting rules : 
S  ~ X V P
VP ~ VY
X--~DN
Y  ~ DN
Here the distinction drawn between a sequence DN that is a  ( n ) X ( i . e .   , derives from X ) and a DN that is a Y , reflects the func-tional notions of sub ject and object  , but obscures the categorial no-tion is a noun phrase  . Chomsky\[3, pp .   68-72 \] argues that it is confusing and redundant to assign categorial status to both notions since the purely relational character of the functional notion is im-plicit in the rewriting rules S--~NP VP and VP~V\ [ NP\]  ; that is , the notion " subject of a sentence " refers to the NP under the im-mediate domination of S  , and " object of a verb " refers to the NP under the immediate domination of VP  . Chomsky also shows that i5 for sentences like " John was persuaded by Bil l to leave " where " John " is simultaneously object-of " persuade " and subject-of a transformed embedded sentence " John leave "  , it is impossible to represent such functional notions by categorial assignments  , and adds that " Examples of this sort , of course , provide the primary motivation and empiri cal justification for the theory of t rans for-mational grammar  . "\[ p .  70\] . 
Whether it is possible or desirable to requi rethat SPG components of transformation alg rammars for natural languages be structure f ree is an open question  , ibresumably , it is desirable if it is possible , since the least powerful , most restricted grammar--the tightest f it--is to be preferred  . Moreover , inspec-tion of proposed grammars , for English at least , indicates that most of their rules do conta in unique categories on the right  . 
Returning now to SPG2 , we see that it is structure free , since every elementary rewriting rule for every category Xi con-tains a single occur rence of at least one category Yi on the right which does not appear elsewhere on the right  , and is not the axiom . 
Under these conditions we will say that Yi is a head for category Xi and call all such Y 's head categories  . Examination shows that the structure-sensi tive property of  DG2 arose from the choices made in augmenting SPG2  . If only head categories are marked , a structure-free DG similar to D Giresu lts  , in which all signs of augmentation can be erased without altering its generative capacity  . 
Intuitively , it seems reasonable to regard heads as sources of a " governor " in any string derivable f rom the category in whose rewriting rules they appear  . This does not mean that the string is to be considered endocentric in the strong sense of requiring that the governor be substitu table for the entire string without loss of grammaticality  , and the objection sometimes raised that dependency theory forces a purely endocent ri canalysis of a language is based on failu retodistinguish between " head o  . P ' and " substitutable for " . It appears truer to say that dependency analys is assumes that one phrase type is disting u is hed from another primarily by the singu lar presence of some category in it rather than by co-occur-rence and order of categories in it  . 
Incidentally , aside from the problem of obtaining a struc -ture-free DG from an SPG  , avoidance of structure sensitivity may be a criterion for assigning government when one is analyzing a language in terms of dependency theory  . In English , for example , the choice has generally wavered between noun and verb as candi-dates for sentence government  . Since every elementary sentence contains one verb but may contain several nouns  , choosing the noun forces a structure-sens itive DG  . 
In converting a DG to an SPG , no requirement of intrinsic t6 ordering needs to be imposed on the dependency rules  , as it was on the rewriting rules of SPG . Dependency rules may always he partially o rdered by starting with the rule  ( or rules ) for the axi-om ( s )   . Call these " level zero rules " . Then levelirules are those which assign dependents to the axiom  , level Z those which assign dependents to categories which make their first appearance in level trules  , and so on . To insure eventual termination , however , it is required that if X occurs anywhere in a level n rule  , and is a dependent in a level m rule , m > n , then its choice as ? dependent in the level m rule is option alor else the governor in the level m rule is optionally chosen at some point  . Otherwise no constraints on recursion are necessary  , and any category may be i ' e introduce data lower level  . 
By contrast , the problem of conflation arises . It has been shown that rules like k ( ~ ) and A ( B * C )  , occurring in structure-sensitive DG , cannot be conflated . Conflations of A ( B $ ) with A ( C * D ) and of A ( ~ B ) with A ( B * ) are also impossible , although structure sensitivity as defined above is not involved  . If the rules are not conflatable because the DG is structure sensitive  , then the SPG may also be structure sensitive . If they are not con-flatable solely because of disparate number or position C left or right  ) with respect to the governor , the SPG will be structure free . 
In either case , the conversion process becomes somewhat more complicated  . 
The process will be illustrated first by applying it to a DG whose rules cannot be fully conflated both because some arest ruc-ture sensitive and because some assign disparate numbers or po-sitions to dependents of a category  . 
Method 2. Conversion of DG to SPG
Stept . Augmentation
Definition : A dependent element in a dependency rule is any braced or bracketed st ring not included in larger braces or b rackets  , ~nd any single unbraced , unbracketed occurrence other than ? occurring within parentheses  . 
E . g . , in A ( BD\[C\]*E\[F \] ) there are three dependent elements : " BD\[C\]' ~   , E , and\[F \] . 
a . Precede each dependent element with a coefficient n > i  , so that for any n > i , at least one element is preceded by n-I , and for any m > n , m does not intervene between n and ~ . Thus:


A(ZB*IC )
A ( 2 BIC * ) but not A ( 2B@2C ) and not A ( iB2 C* )  . 
Assign an exponents to the governor in each ru le  , where s equals the largest coefficient n of any depende St  . ( For rules of the form X(~), siszero .   ) If a category X is assigned different exponents for differ-ent rules in which it occurs as governor  , associate a dis-tinct subscript with each distinct exponent  . 
Replace every occurrence of X as dependent by X s  . If X has been subscripted , include each variant in braces , thus : j Step 2 . Test for unmarked ( unprocessed ) rules . If none remain , go to step 4 . Otherwise take the first unmarked rule , where some x~i is governor and set a counterS = s  . .

Step 3 . If S = 0, mark the rule and repeat step 2 . If S~0 , con-struct ' a rule of an IntErmediate Rule List of the form X ~  .   .   .   .   . On the right of the arrow duplicate all dependent elements whose coefficients n = S  . Include the $, and pre-cede it with ~- i . Decrease Sbyi , and repeat step 3 . 
Step 4 . Establish a Table of Substitutes , assigning a unique symbol to every distinct XS ni for which Si ~  0  . 
Step 5 . Assign the substitute or substitutes for the axioms of the 
DG as axioms of the SPG.
Step 6 . Rewrite the IRL , using substitutes from the TS , deleting exponents and subscripts from any X  0 and omitting ~ . n'Step 7 . Transfer the assignment rules . 
This method will be illustrated using an abstract  DG3  , with-out assignment rules .   DG3 is structure sensitive since there are rules which restrict the choices of dependents of categories A and C to subsets of the ordered categories they are permitted to gov-ern in other rules  . 
DG3 ( augmented )
Axiom : ?( A)i8

Dependency Rules : ii . A(IB *)
Z . A(2 ~ cDIB*3E ) 3 . B ( IE *) 4 . B (* iF ) 5 . C(IG*iF ) 6 . C (*) 7 . D (*) 8 . z ( , IG ) 9 . F ( IA *) iO . G (*) final augmented form after step i is:
Axiom : * tA32j
Dependency Rules : ( tBi *) i . Ai
BiDO3i
Z . Az(ZCi3 . Bi ( IEi *) 4 . Bi (* iFi ) i ( iG0, iFi ) 5 . Ci7 . DO (*) 8 . Ei (* IG0) iB1 , 3 E1 ) iNote the impossibility of further conf lation  , and that every category ' occurring as dependent in a rule of level m and also occur -ring in some other rule of level n < m is a l ways optionally chosen as a dependent  . That is , there is the possibility of avoiding its re introduction  . Thus A , the axiom , is reintroduced in rule 9 , but its governor , F , is optionally chosen as a dependent . Other-wise no derivation could terminate . 
i99. Fi(ti3*)\[A2 io.GO (*)
At the end of iteration monsteps 2 and 3 , the IRL isi--~BiA0 , i . A i2 . SA2,E ~
A2~\[BtDO
I--~BIA02,4 . A25 . Bi-~EiB06 . Bi--B0Fii_, . GOC0~Fi7 . C i 8 . Ei ~ E0 GO
A possible TS is : i
S : AiiX : A2
W : BiiV : Ci
U : Ei
T : Fi
Axiom(s):S
Rewriting Rules : i . S-*WA
Z.Z-*YUWD 3.Y ~ V
C4 . X - - ~ WA 5 . W---~UB6 . W ~ B T 7 . V ~ GCT8 . U---*EGt LJ

SPG3 is structure sensitive , since two categories , S and X , are rewritten the same way . This results from the fact that , in DG3 , A has two sets of dependents and one set is in c luded in the other  . The structure-sensitive rules for C in DG3 produced no additional structure-sensit iverules in  SPG3  , however , since one of them , C($1 , was not processed in step 3 and did not form part of the IRL . 
S PG3 may be rewritten as a structure-free grammar in a purely adhoc way by elimin at ing the rewriting rule for X and shb-stitut ingS for the occurrence of X on the right  . More generally , it is reasonable to require of the origina lDG that its rules be designed so that it is possible to write a single rule  ( schema as-signing dependents to any given category  . This requirement is reasonable if the DG is a base component of a transformational grammar whose transformations take care of the eventua lorder of elements in a sentence  . The primary function of the DO's dependency ru lesis  , in this case , only that of listing ' co-occurring cate -gories in the dependency relations in some canonical order  . In DO3, A always occurs with B as dependent . Whenever E is a dependent of A , then either a second BoraC are also dependents  , and if a second B is a dependent of A , Disalso . This set of conditions is summed up by 2i Similarly , Balways occurs with E or F as dependents , i . e . , and C occurs with no dependents or else with both G and F  , i . e . , c(*\[OF\]) . 
These rules express cooccurrence relationships more directly than the original rules do  . Let us assume this constraint and redesign DG3 as DG4  . Let the augmented DG4 be:
Axiom : ?( A )
Dependency Rules : i . A(zB"I\[tCDE l ) 3 . c(*JiGF\])4 . D(#;)5 . E ( , IG ) 6 . F ( tA*)v . G (*)
The IRL is:
Az__.BIAi ~?
AI--A'L\[CIE~\]o , ci_co\[GOF~1
Ei_.E0 GO
FI_AzF0
With appropriate substitutions , this becomes SPG4:
Axiom : Z
Rewriting Rules : 1. Z-~X Y
ZZ4 . w-c\[Gu\]5~V--EG6 . U--ZF v\]SP G4 is structure free . Furthermore , it has only one axiom , whereas SPG3 had two even though derived from a DG which had only one  . 
The additional restrictions proposed fo rDG and SPG in discussions of the results of conversion by these methods are not crucia las far as obtaining systematically cor responding grammars is concerned  . Without them , every complete subtree of a D-tree will correspond to a complete subtree of a P-tree over the same string  , and every complete subtree of the P-tree wi llcor-respond to a connected subtree of a D -tree over the same string  . 
( No formal proof of this was given , but the methods of constructing an IRL make it moderately apparent  .   ) Hays \[5\] suggests the term relational correspondence for this state of affairs  . Also there is a systematic relationship between the categories of the two grammars ~ wh ich the TS makes explicit  . 
Sometimes that relationship is simple , as in the case of DG4 and SPG4 . Given any category of DG4 , there is exactly one category of SPG4 from which the same set of strings is der ivable  . 
The relationship also holds between the categories of DGt and SPGt  , and between those of DG2 and SPG2 . Under these condi-tions , Hays \[5\] calls the categories " substantively equ ivalent "  . 
The relationship between the categories of DG3 and SPG3 is less simple . There the set of strings derivable from A of the DG is the union of the set of strings derivable from S and Z of the SPG  , and the set derivable from B is the union d the set derivable from 
W and V .
Hays says that a D-tree and a P-tree correspond if they correspond relationally and if the category at the origin of every complete subtree of the D -tree is substantively equivalent to the category labeling the complete subtree of the P-tree related to it  . 
If a DG and an SPG " have the same terminal a lphabet  , and for every string over that alphabet , every structure attributed by either cot /responds to a structure attributed by the other "  , he calls the two grammars " strongly equ ivalent "  . \[5, p .   52t \] We prefer to say that they correspond substantively  , since relational corre-spondence is asymmetric and there are always " left-over " SPG The weaker relationship exhibited by  SPG3 and DG3  , where some DG categories are not substantively equivalent to any single SPG category  , we have been calling systematic correspondence . 

Conversion by the methods given here results in systematic ' correspondence  . If the suggested constraints , which appear to be linguistically well-mot ~ vated for base components of transformational g rammars  , are imposed on the form of the source grammar , the target grammar corresponds substantively as well as systematically to the source grammar and both a restructure free  . 

BIBLIOGRAPHYt.

Bar-Hillel , Y . , Perles , M . , and Shamir , E . " On formal properties of phrase structure grammars  , " in R . D . Luce , R . Bush , and E . Galanter ( eds .  )  , Readings in Mathematical Psychology , Vol . II , pp . 75 ~ i04 . New York , Wiley , i965 . 
Chomsky , Noam . " On certain formal properties of gram -mars  , " in R . D . Luce , R . Bush , and E . Galanter ( eds . ), Handbook of Mathematical Psychology , Vol . II , pp . 323-4 t8 . 
New York , Wiley , i 963.
3 . Chomsky , Noam . Aspects of the theory of syntax . The M . I . T . 
Press , Massachusetts Institute of Technology , Cambridge , 
Mass ., 1965.
4 . Gaifman , Haim . Dependency systems and phrase structures ys tems  . P-23t5, The RAND Corporation , Santa Monica,
California , May 1961.
5. Hays , David G.
observations , "5ti-525.
"Dependency theory : a formalism and some Language  , Vol . 40, ( Oct . -Dec . i964), pp . 
6 . Hays , David G . An annotated bibliography of publications on depende-tc7 theory . RM-4479-PR , The RAND Corporation , Santa Monica , California , Marc 1~1965 . 


Kay , Martin . The tabular parser : A parsing program for phrase structure and dependency  . RM-4933-PR . The RAND Corporation , Santa Monica , California , July 1966 . 
Lees , R . B . Th___e_e grammar of English nominalizat ions  , Sup-plement to International Journal of Amer ican Linguistics  ,  26 , 
No . 3, Part II , 1960.


ii.
Robinson , Jane , " A dependency-based transformation alg rammar  . "IBM Corporation , Yorktown Heights , New
York . ( Forthcoming , i967)
Rosenbaum , Peter S . " English Grammar II . "IBM Corpo-ration , Yorktown Heights , New York . ( Forthcoming , 1967) Zwicky , A . M . , Hall , B . C . , Fraser , J . B . , Geis , M . L . , Mintz , J . W . , Isar-d , S . ~ and Peters , P . S . " English pre-processor manual . " Inforrrmtions System Language Studies Number Seven  , SR-i32 , The MITRE Corporation , Decemberi 964 . 

