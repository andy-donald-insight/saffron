Higher-Order Coloured Unification and Natural Language 

Claire Gardent
Computational Linguistics
Universit?t des Saarlandes
D-Saar briicken
claire@coil,uni-sb , de
Michael Kohlhase
Computer Science
Universit ~ tdes Saarlandes
D-Saar briicken
kohlhase?cs , uni-sb , de

In this paper , we show that Higher-Order Coloured Unification - a form of unification developed for automated theorem proving-provides a general theory for modeling the interface between the interpretation process and other sources of linguistic  , nonsemantic information . In particular , it provides the general theory for the Primary Occurrence Restriction which  ( Dalrymple et al , 1991)'s analysis called for . 
1 Introduction
It is wellknown that Higher-Order Unification ( HOU ) can be used to construc the semantics of Natural Language:  ( Dalrympl et al . , 1991) - henceforth , DSP-show that it allows a treatment of VP -Ellipsis which successfully captures the interaction of VPE with quantification and nominal anaphora  ; ( Pulman , 1995; Gardent and Kohlhase ,  1996 ) use HOU to model the interpretation of focus and its interaction with focus sensitive operators  , adverbial quantifiers and second occurrence expressions  ; ( Gardent et al ,  1996 ) shows that HOU yields a simple but precise treatment of corrections  ; Finally , ( Pinkal ,  1995 ) uses linear HOU to reconstruct underspecified semantic representations  . 
However , it is also wellknown that the HOU approach to NL semantic systematically over generates and that some general theory of the interface between the interpretation process and other sources of linguistic information is needed in order to avoid this  . 
In their treatment of VP-ellipsis , DSP introduce an informal restriction to avoid overgeneration : the Primary Occurrence Restriction  ( POR )  . Although this restriction is intuitive and linguistically well-motivated  , it does not provide a general theoretical framework for extra-semantic constraints  . 
In this paper , we argue that Higher-Order Coloured Unification ( HOCU , ( cf . sections 3 , 6) , a restricted form of HOU developed independently for theorem proving  , provides the needed general framework . We start out by showing that the HOCU approach allows for a precise and intuitive modeling of DSP's Primary Occurrence Restriction  ( cf . 
section 3 . 1) . We then show that the POR can be extended to capture linguistic restrictions on other phenomena  ( focus , second occurrence x pressions and adverbial quantification  ) provided that the notion of primary occurrence is suitably adjusted  ( cf . 
section 4) . Obviously a treatment of the interplay of these phenomena and their related notion of primary occurrence is only feasible given a precise and well-understood theoretical framework  . We illustrate this by an example in section 4 . 4 . Finally , we illustrate the generality of the HOCU framework by using it to encode a completely different constraint  , namely Kratzer's binding principle ( cf . section 5) . 
2 Higher-Order Unification and NL semantics The basic idea underlying the use of HOU for NL semantics ivery simple : the typed A-calculus is used as a semantic representation laguage while semantically underspecified lements  ( e . g . anaphors and ellipses ) are represented by free variables whose value is determined by solving higher-order equations  . For instance , the discourse ( la ) has ( lb ) as a semantic representation where the value of R is given by equation  ( lc ) with solutions ( ld ) and ( le )  . 
(1) a . Danlikes golf . Peter does too.
b . like ( dan , golf ) AR ( peter ) c . like ( dan , golf ) = R(dan)d . R = Ax . like(x , golf ) e . R = Ax . like ( dan , golf ) The process of solving such equations i traditionally called unification and can be stated as follows : given two terms M and N  , find a substitution of terms for free variables that will make M and N equal  . For first order logic , this problem is decidable and the set of solutions can be represented by a single most general unifier  . For the typed A-calculus , the problem is undecidable , but there is an algorithm which-given a solvable equation-will enumerate a complete set of solutions for this equation  ( Huet ,  1975) . 
Note that in (1) , unification yields a linguistically valid solution  ( ld ) but also an invalid one: ( le )  . 
To remedy this shortcoming , DSP propose an informal restriction , the Primary Occurrence Re-striction : In what follows  , we present a unification framework which solves both of these problems  . 
3 Higher-Order Coloured
Unification ( HOCU)
There is a restricted form of HOU which allows for a natural modeling of DSP's Primary Occurrence Restriction : Higher-Order Coloured Unification developed independently for theorem proving  ( Hutter and Kohlhase ,  1995) . This framework uses a variant of the simply typed A-calculus where symbol occurrences can be annotated with socalled colours and substitutions must obey the following constraint : Given a labeling of occurrences as either primary or secondary  , the POR excludes of the set of linguistically valid solutions  , any solution which contains a primary occurrence . 
For any colour constant c and any c-coloured variable V ~  , a wellformed coloured substitution must assign to Vcac-monochrometermi  . e . , a term whose symbols are c-coloured . 
Here , a primary occurrence is an occurrence that is directly associated with a source parallel element  . 
Neither the notion of direct association , nor that of parallelism is given a formal definition  ; but given an intuitive understanding of these notions  , a source parallel element is an element of the source  ( i . e . 
antecedent ) clause which has a parallel counterpart in the target  ( i . e . elliptic or anaphoric ) clause . 
To see how this works , consider example (1) again . 
In this case , dan is taken to be a primary occurrence because it represents a source parallel element which is neither anaphoric nor controlled i  . e . it is directly associated with a source parallel element  . 
Given this , equation ( lc ) becomes ( 2a ) with solutions ( 2b ) and ( 2c )   ( primary occurrences are underlined )  . Since (2c ) contains a primary occurrence , it is ruled out by the POR and is thus excluded from the set of linguistically valid solutions  . 
(2) a . like ( dan , golf ) = R(dan ) b . R = Ax . like(x,golf)c . R = Ax . like ( dan , golf ) Although the intuitions underlying the POR are clear  , two main objections can be raised . First , the restriction is informal and as such provides no good basis for a mathematical nd computational evaluation  . As DSP themselves note , a general theory for the POR is called for . Second , their method is a generate-and-test method : all logically valid solutions are generated before those solutions that violate the POR and are linguistically invalid are eliminated  . While this is sufficient for a theoretical analysis  , for actual computation it would be preferable never to produce these solutions in the first place  . 
3.1 Modeling the Primary Occurrence

Given this coloured framework , the POR is directly modelled as follows : Primary occurrences are pe-coloured whilst free variables are-~pe-coloured  . For the moment we will just consider the colours p e  ( primary for ellipsis ) and ~ p e ( secondary for ellipsis ) as distinct basic colours to keep the presentation simple  . Only for the analysis of the interaction of e . g . 
ellipsis with focus phenomena ( cf . section 4 . 4) do we need a more elaborate formalization , which we will discuss there . 
Given the above restriction for wellformed coloured substitutions  , uch a colouring ensures that any solution containing a primary occurrence is ruled out : free variables are-~pe-coloured and must be assigned a-~pe-monochrometerm  . Hence no substitution will ever contain a primary occurrence  ( i . e . 
ape-coloured symbol ) . For instance , discourse ( la ) above is assigned the semantic representation ( 3a ) and the equation ( 3b ) with unique solution ( 3c )  . In contrast ,   ( 3d ) is not a possible solution since it assigns to an -~pe-coloured variable  , a term containing a pe-coloured symbol i . e . a term that is not-~pe-monochrome . 
(3) a . like ( danpe , golf ) AR ~ pe(peter ) b . like ( danpe , golf ) = R ~ pe(danpe)c . R ~ p e = Ax . like(x , golf ) d . R ~ p e = Ax . like ( danpe , gOlf ) 3 . 2 HOC U theory To be more formal , we presuppose a finite set g = a , b , c , p e , - ~ p e ,  . . . ) of colour constants and a variables . 
As usual in A-calculus , the set wff of well-formed formulae consists of ( coloured 1 ) constants ca , runs~ , runs A ,  . . . , ( possibly uncoloured ) variables x , x a , yb , . . .   ( function ) applications of the form MN and A-abstractions of the form Ax  . M . Note that only variables without colours can be abstracted over  . We call a formula Mc-monochrome , if all symbols in M are bound or tagged with c . 
We will need the socalled colourer asure IMI of M  , i . e . the formula obtained from M by erasing all colour annotations in M  . We will also use various elementary concepts of the A-calculus  , such as free and bound occurrences of variables or substitutions without defining them explicitly here  . In particular we assume that free variables are coloured in all formulae occuring  . We will denote the substitution of a term N for all free occurrences of x in M with \[ N/x\]M  . 
It is crucial for our system that colours annotate symbol occurrences  ( i . e . colours are not sorts !) , in particular , it is intended that different occurrences of symbols carry different colours  ( e . g . f(xb , X a ) ) and that symbols that carry different colours are treated ifferently  . This observation leads to the notion of coloured substitutions  , that takes the colour information of formulae into account  . In contrast to traditional ( uncoloured ) substitutions , a coloured substitution a is a pair ( at , at ) , where the term substitution at maps coloured variables  ( i . e . the pair x c of a variable x and the colour c ) to formulae of the appropriate type and the co lour substitu-tionac maps colour variables to colours  . In order to be legal ( ag-substitution ) such a mapping a must obey the following constraints : ? If a and b are different colours  , then\[a(xa)\[=\[a(xb)\[ , i . e . the colourer a sures have to be equal . 
? If cEC is a colour constant , then a(x ?) is c-monochrome . 
The first condition ensures that the colour erasure of a C-substitution is a well-defined classical substitution of the simply typed A -calculus  . The second condition formalizes the fact that free variables with constant colours stand for monochrome subformu-lae  , whereas colour variables do not constrain the substitutions  . This is exactly the trait , that we will exploit in our analysis . 
1Colours axe indicated by subscripts labeling term occurrences  ; whenever colours axe irrelevant , we simply omit them . 
Note that/37/-reduction in the coloured A-calculus is just the classical notion  , since the bound variables do not carry colour information  . Thus we have all the known theoretical results , such as the fact that/~/-reduction always terminates producing unique normal forms and that  /3T/-equality can be tested by reducing to normal form and comparing for syntactic equality  . This gives us a decidable test for validity of an equation  . 
In contrast othis , higher-order unification tests for satisfiability by finding a substitution a that makes a given equation M = N valid  ( a ( M ) =  ~ a ( N ) ) , even if the original equation is not ( M~Z , N ) . In the coloured A-calculus the space of ( semantic ) solutions is further constrained by requiring the solutions to beg-substitutions  . Such a substitution is called a C-unifier of M and N  . In particular , C-unification will only succeed if comparable formulae have unifiable colours  . For instance , introa(P a , jb , Xa ) unifies with introa(Ya , jA , Sa ) but not with introa(Pa , ja , sa ) because of the colour clash on j . 
It is well known , that in first-order logic ( and in certain related forms of feature structures  ) there is always a most general unifier for any equation that is solvable at all  . This is not the case for higher-order ( coloured ) unification , where variables can range over functions , instead of only individuals . Fortunately , in our case we are not interested in general unification  , but we can use the fact that our formulae belong to very restricted syntactic subclasses  , for which much better results are known . In particular , the fact that free variables only occur on the lefthand side of our equations reduces the problem of finding solutions to higher-order matching  , of which decidability has been proven for the subclass of third-order formulae  ( Dowek , 1992) and is conjectured for the general case . This class ,   ( intuitively allowing only nesting functions as arguments up to depth two  ) covers all of our examples in this paper . For a discussion of other subclasses of formulae , where higher-order unification is computationally feasible see  ( Prehofer ,  1994) . 

Some of the equations in the examples have multiple most general solutions  , and indeed this multiplicity corresponds to the possibility of multiple different interpretations of the focus constructions  . The role of colours in this is to restric the logically possible solutions to those that are linguistically sound  . 
4 Linguistic Applications of the

In section 3 . 1 , we have seen that HOCU allowed for a simple theoretical rendering of DSP's Primary Occurrence Restriction  . But isn't this restriction fairly idiosyncratic ? In this section  , we show that the restriction which was originally proposed by DSP to model VP-ellipsis  , is in fact a very general constraint which far from being idiosyncratic  , applies to many different phenomena . In particular , we show that it is necessary for an adequate analysis of focus  , second occurrence x pressions and adverbial quantification  . 
Furthermore , we will see that what counts as a primary occurrence differs from one phenomenon to the other  ( for instance , an occurrence directly associated with focus counts as primary w  . r . t focus semantics but not w . r . t to VP-ellipsis interpretation ) . 
To account for these differences , ome machinery is needed which turns DSP's intuitive idea into a fully-blown theory  . Fortunately , the HOCU framework is just this : different colours can be used for different types of primary occurrences and likewise for different types of free variables  . In what follows , we show how each phenomenon is dealt with . We then illustrate by an example how their interaction can be accounted for  . 
4.1 Focus
Since ( Jackendoff ,  1972) , it is commonly agreed that focus affects the semantics and pragmatics of utterances  . Under this perspective , focus is taken to be the semantic value of a prosodically prominent element  . Furthermore , focus is assumed to trigger the formation of an additional semantic value  ( henceforth , the Focus Semantic Value or FSV ) which is in essence the set of propositions obtained by making a substitution i the focus position  ( cf . e . g . ( Kratzer , 1991)) . For instance , the FSV of (4a ) 2 is (4b ) , the set of formulae of the form l(j , x ) where x is of type e , and the pragmatic effect of focus is to presuppose that the denotation of this set is under consideration  . 
(4) a . Jonlikes SARAHb . l(j , x ) lxewife In ( Gardent and Kohlhase ,  1996) , we show that HOU can successfully be used to compute the FSV of an utterance  . More specifically , given ( part of ) an utterance U with semantic representation Sere and foci  F1  .   .   . Fn , we require that the following equa-2Focus is indicated using uppercase . 
tion , the FSV equation , be so Ived:
Sem = Gd(F1) . . . ( F ~)
On the basis of the Gdvalue , we then define the
FSV , writtenGd , as follows:
Definition 4.1 ( Focus Semantic Value)
Let G d be of type ~ = ~ k - - ~ t and n be the number of loci  ( n < k )  , then the Focus Semantic Value derivable from Gd , written G---d , isGd(tl .   .   . tn ) Itie wife, . 
This yields a focus semantic value which is in essence Kratzer's presupposition skeleton  . For instance , given (4a ) above , the required equation will be l(j , s ) = Gd(s ) with two possible values for Gd : Ax . l(j,x ) and Ax . l(j , s) . Given definition (4 . 1), (4a ) is then assigned two FSVs namely (5) a . Gd = l(j,x ) lxeWife b . G'--d = l(j , s)lx ~ Wife That is , the HOU treatment of focus over generates : ( 5a ) is an appropriate FSV , but not (5b ) . 
Clearly though , the POR can be used to rule out ( 5b ) if we assume that occurrences that are directly associated with a focus are primary occurrences  . To capture the fact that those primary occurrences are different from DSP's primary occurrences when dealing with ellipsis  , we colour occurrences that are directly associated with focus  ( rather than a source parallel element in the case of ellipsis  ) pf . Consequently , we require that the variable representing the FSV be-~pf coloured  , that is , its value may not contain any pf term . Under these assumptions , the equation for ( 4a ) will be ( 6a ) which has for unique solution ( 6b )  . 
(6) a . l(j,Spf ) = FSV ~ pf(Spf)b . FSV~pf = Ax . l(j , x ) A second occurrence expression ( SOE ) is a partial or complete repetition of the preceding utterance and is characterised by a deaccenting of the repeating part  ( Bartels ,  1995) . For instance ,   ( Tb ) is an SOE whose repeating part only likes Mary is de accented  . 
(7) a . Jononly likes MARY.
b . No , PETER only likes Mary.
In ( Gardent , 1996; Gardent et al ,  1996 ) we show that SOEs are advantageously viewed as involving a deaccented anaphor whose semantic representation must unify with that of its antecedent  . Formally , this is captured as follows . Let SSem and TSem be the semantic representation f the source and target clause respectively  , and TP1 . . . TPn , SP1 . . . SP n be the target and source parallel elements 3 , then the interpretation of an SOE must respect he following equations : 
An(Sp1, ..., SPn ) = SSem
An ( Tp1, . . . , TP ' ~) = TSem
Given this proposal and some further assumptions about the semantics of only  , the analysis of ( Tb ) involves the following equations : ( 8 ) A n ( j ) = VP\[P e ) ~x . like(x , y ) ly ? wife
AP ( j)~P = ~ x.like(x,m)\]
An(p ) = VP\[P ? FSVAP(p)--+P=Ax . like(x , m ) \] Resolution of the first equation then yields two solutions : An =  ) ~zVP\[P ? ; kx . like(x , y ) lY ? wife
AP ( z)~P =) ~ x.like(x,m)\]
An = AzVP\[P ?) ~ x.like(x , y ) lY ? wife
AP(j)~P =) ~ x.like(x,m)\]
Since An represents the semantic information shared by target and source clause  , the second solution is clearly incorrect given that it contains information  ( j ) that is specific to the source clause . 
Again , the POR will rule out the incorrect solutions , whereby contrary to the VP-ellipsis case , all occurrences that are directly associated with parallel elements  ( i . e . not just source parallel elements ) are taken to be primary occurrences . The distinction is implemented by colouring all occurrences that are directly associated with parallel element ps  , whereas the corresponding free variable ( A n ) is coloured as -- ps . Given these constraints , the first equation in ( 8 ) is reformulated as : An~ps ( jps ) = VP\[P ? ) ~x . like(x , y ) lY ? wife
AP(Jps)--+P=Ax . like(x , m )\] with the unique well-coloured solution An . , s =) ~ z . VP\[P?Ax . like(x , y ) ly ? wife
AP(z)--~P =) ~ x . like(x,m)\]4 . 3 Adverbial quantification Finally , let us briefly examine some cases of adverbial quantification  . Consider the following example from ( vonF intel ,  1995):
Tomal ways takes SUE to Al's mother.
Yes , and healways takes Sue to JO's mother.
In ( Gardent and Kohlhase ,  1996) , we suggest that such cases are SOEs , and thus can be treated as involving a deaccented anaphor  ( in this case , the anaphor healways takes Sue to _' smother ) . Given some standard assumptions about the semantics of  3As in DSP , the identification of parallel elements i taken as given  . 
5 always , the equations constraining the interpretation
An of this anaphor are:
An ( al ) = always ( Tom take x to al's mother )   ( Tom take Sue to al's mother ) 
An ( jo ) = always FSV ( Tom take Sueto Jo's mother ) Consider the first equation . If An is the semantics shared by target and source clause  , then the only possible value for Anis ) ~ z . always ( Tom take x to z's mother )   ( Tom take Suetoz's mother ) where both occurrences of the parallel element m have been abstracted over  . In contrast , the following solutions for An are incorrect . 
Az . always ( Tom take x to al's mother ) ( Tom ) ~ z . always ( Tom(Tom
Az . always ( Tom take Suetoz's mother ) take x to al's mother ) take Sue to al's mother ) take x to z's mother . ) ( Tom take Sue to al's mother ) Once again , we see that the POR is a necessary restriction : by labeling as primary  , all occurrences representing a parallel element , it can be ensured that only the first solution is generated  . 
4.4 Interaction of constraints
Perhaps the most convincing way of showing the need for a theory of colours  ( rather than just an informal constraint ) is by looking at the interaction of constraints between various phenomena  . Consider the following discourse (9) a . Jonlikes SARAHb . Peter does too Such a discourse presents us with a case of interaction between ellipsis and focus thereby raising the question of how DSP'POR for ellipsis should interact with our POR for focus  . 
As remarked in section 3 . 1 , we have to interpret the colour -~ peasthe concept of being not primary for ellipsis  , which includes pf(primary for focus ) . In order to make this approach work formally , we have to extend the supply of colours by allowing boolean combinations of colour constants  . The semantics of these ground colour formula is that of propositional logic  , where -~ distaken to be equivalent to the disjunction of all other colour constants  . 
Consequently we have to generalize the second condition on C-substitutions ? For all colour annotations d of symbols in a  ( xc ) d ~ c in propositional logic . 
Thus X . d can be instantiated with any coloured formula that does not contain the colourd  . The HOCU algorithm is augmented with suitable rules for boolean constraint satisfaction for colour equations  . 
The equations resulting from the interpretation of  ( 9b ) are : l ( jpe , 8 pf ) ~-- R- , pe(jpe)
R~pe ( P ) = FSV~pf ( F ) where the first equation determines the interpretation of the ellipsis whereas the second fixes the value of the FSV  . Resolution of the first equation yields the value Ax  . l(x , Sp f ) for R ~ p e . As required , no other solution is possible given the colour con-stralnts  ; in particular Ax . l(jpe,Spf ) is not a valid solution . The value of R~pe(jpe ) is now l(Ppe , 8 pf ) SO that the second equation is 4: l(p , Spf ) = FSV~pf ( F ) Under the indicated colour constraints , three solutions are possible :
FSV ~ pf = Ax.l(p , x ), F = spf
FSV ~ pf = AO . O(p ), F = Ax.l(x , Spf)
FSV ~ pf = ~ X.X , F = l(p , spf)
The first solution yields a narrow focus reading ( only SARAH is in focus ) whereas the second and the third yield wide focus interpretations corresponding to a VP and an S focus respectively  . That is , not only do colours allow us to correctly capture the interaction of the two PORs restricting the interpretation of ellipsis of focus  , they also permit a natural modeling of focus projection  ( cf . ( Jackendoff , 1972)) . 
5 Another constraint
An additional argument in favour of a general theory of colours lies in the fact that constraints that are distinct from the POR need to be encoded to prevent HOU analyses from overgenerating  . In this section , we present one such constraint ( the socalled weak-cross over constraint ) and show how it can be implemented within the HOCU framework  . 
In essence , the main function of the POR is to ensure that some occurrence occuring in an equation appears as a bound variable in the term assigned by substitution to the free variable occurring in this equation  . However , there are cases where the dual 4Note that this equation falls out of our formal system in that it is untyped and thus cannot be solved by the algorithm described in section  6   ( as the solutions will show , we have to allow for FSV and F to have different types  )  . However , it seems to be a rout in exercise to augment HOU algorithms that can cope with type variables like  ( Hustadt , 1991; Dougherty ,  1993 ) with the colour methods from ( Hutter and Kohlhase ,  1995) . 
6 constraint must be enforced : a term occurrence appearing in an equation must appear unchanged in the term assigned by substitution to the free variable occurring in this equation  . The following example illustrates this . 
( Chomsky ,  1976 ) observes that focused NPs pattern with quantified and wh-NPs with respect to pronominal anaphora : when the quanti-fied/wh/focused NP precedes and c -commands the pronoun  , this pronoun yields an ambiguity between a coreferential nd a bound-variable rading  . This is illustrated in example ( 10 ) We only expected HIMi to claim that he ~ was brilliant where the presence of the pronoun hei gives rise to two possible FSVs s 
FSV = Ax . ex(x , y , i ) lYE wife
FSV = Ax . ex(x , y , y ) \[ yEWife thus allowing two different readings : the corefen-tial or strict reading 
VP\[PEAx.ex(x , y , i ) IYEWife
AP ( we ) - - + P = Ax . ex(x , i , i )\] and the bound-variable or sloppy reading . 
VP\[PEAx . ex(x , y , y ))\ [ yE wife^P ( we ) ~ P = Ax . ex(x , i , i ))\] In contrast , if the quantified/wh/focused NP does not precede and c-command the pronoun  , as in ( 11 ) We only expected himito claim that HE i was brilliant there is no ambiguity and the pronoun can only give rise to a coreferential interpretation  . For instance , given (11) only one reading arises
VP\[PEAx.ex(x,i,y)lYEWife
AP ( we ) ~ P = Ax . ex(x,i , i )\] where the FSV is Ax . ex(x,i,y)lYE wife . 
To capture this data , Government and Binding analyses postulate first , that the antecedent is raised by quantifier aising and second  , that pronouns that are c-commanded and preceded by their antecedent are represented either as a A -bound variable or as a constant whereas other pronouns can only be represented by a constant  ( cf . e . g . ( Kratzer , 1991)'s binding principle) . Using HOC U , we can model this restriction directly . As before , the focus term is pf - and the FSV variable -~ pf -coloured  . Furthermore , we assume that pronouns that are preceded and c -commanded by a quantified/wh/focused antecedent are variable coloured whereas other pronouns are - ~ pf-coloured  . Finally , all other terms are taken to 5We abbreviate exp ( x , cl(y , blt(i ))) to ex(x , y , i ) to increase legibility . 
be--pf-coloured . Given these assumptions , the representation for (10) is ex~o ~( we ~ pf , ip f , iA ) and the corresponding FSV equation
R ~ pf(ipf ) --) ~ x . eX~pf(x,ipf , in ) has two possible solutions
R~0f =) ~ y.)~x.ex~pf(x,y,i ~ 0 f)
R~of =) ~ y.)~x.ex ~ of(x,y,)
In contrast , the representation for (11) is ex- . pf(We ~ of , i ~0 f , ipf ) and the equation is R-~pf(ipf ) =) ~ x . ex~pf(X , i  ~ of , /0f ) with only one well-coloured solution
R~0f =) ~ y.Ax.ex ~ of(x,i~of,Y)
Importantly , given the indicated colour constraints , no other solutions are admissible . Intuitively , there are two reasons for this . First , the definition of coloured substitutions ensures that the term assigned to  R~0f is-~pf-monochrome . In particular , this forces any occurrences of/of to appear as a bound variable in the value assigned to R~pf whereas in can appear either as  i~0f   ( a colour variable unifies with any colour constant  ) or as a bound variable-this in effect models the sloppy/strict ambiguity  . Second , a colour constant only unifies with itself . This in effect rules out the bound variable reading in  ( 11 ) : if the i~0f occurrence were to become a bound variable , the value of R ~ of would then Ay . )~x . ex ~ of(x , y , y) . But then by ~- reduction , R ~ of ( ipf ) would be ) ~ x . ex ~ of(x , i of , i of ) which does not unify with the righthand side of the original equation i  . e~x . ex . of(x,i-0f,i0f ) . 
For a more formal account of how the unifiers are calculated see section  6  . 1 . 
6 Calculating Coloured Unifiers
Since the HOCU is the principal computational device of the analysis in this paper  , we will now try to give an intuition for the functioning of the algorithm  . For a formal account including all details and proofs see  ( Hutter and Kohlhase ,  1995) . 
Just as in the case of unification for first-order terms  , the algorithm is a process of recursive decomposition and variable limination that transform sets of equations into solved forms  . Since C-substitutions have two parts , a term - and a colour part , we need two kinds ( M = tN for term equations and c = cd for colour equations  )  . Setsg of equations in solved form ( i . e . where all equations are of the form x = M such that the variable x does not occur anywherels e in Morg  ) have a unique most general C-unifier a ~ that also C-unifies the initial equation  . 
There are several rules that decompose the syntactic structure of formulae  , we will only present wo of them . The rule for abstractions transforms equations of the form  ) ~x . A = t ) ~ y . Bto\[c/x\]A = t\[c / y\]B , and Ax . A = tBto\[c/x\]A = tBc where c is a new constant  , which may not appear in any solution . The rule for applications decomposes ha(s1, . .  . , sn ) = thb(tl , .   .   . , t '~) to the set a = cb , sl = ttl, .   .   . , s , ~= ttn , provided that h is a constant . Furthermore equations are kept in 13~/-normal form . 
The variable elimination process for colour variables is very simple  , it allows to transform a set gUA = cd of equations to \[ d/A\]gUA = cd  , making the equation A = cd solved in the result  . 
For the formula case , elimination is not that simple , since we have to ensure that la ( XA ) l = la ( xs ) l to obtain a C-substitution a . Thus we cannot simply transform a set gUXd = tM into\[M/X d\]EUX d__tM  , since this would ( incorrectly ) solve the equations X c = f c , X d=g d . The correct variable elimination rule transforms $ UXd=t M into a  ( g ) UX d=1 M , xc , = M1 ,  . .  .   , X c ~= t M n , where ci are all colours of the variable x occurring in M and g  , the Mi are appropriately coloured variants ( same colourer asure ) of M , and a is the g-substitution that eliminates all occurrences of x from g  . 
Due to the presence of function variables , systematic application of these rules can terminate with equations of the form x c  ( sl ,   .   .   . , sn ) = thd(tl , .   .   . , tm ) . Such equations can neither be further decomposed , since this would loose unifiers ( if G and F are variables , then Ga = Fb as a solution Ax . c for F and G , but F = G , a = b is unsolvable ) , nor can the right hand side be substituted for x as in a variable elimination rule  , since the types would clash . Let us consider the uncoloured equation x ( a ) ~taw hich has the solutions ( A z . a ) and ( Az . z ) for x . 
The standard solution for finding a complete set of solutions in this socalled flex/rigid situation is to substitute a term for x that will enable decomposition to be applicable afterwards  . It turns out that for finding all g-unifiers it is sufficient obind x to terms of the same type as x  ( otherwise the unifier would be ill-typed ) and compatible colour ( otherwise the unifier would not be a C -substitution  ) that either ? have the same head as the right hand side  ; the socalled imitation solution ( . k z . a in our example ) or ? where the head is a bound variable that enables the head of one of the arguments of x to become head  ; the socalled projection binding ( ) ~ z . z) . 
In order to get a better understanding of the situation let us reconsider our example using colours  . 
z(a ?) -- ad . For the imitation solution ( ~ z . ad ) we " imitate " the right hand side , so the colour on a must be d . For the projection solution we instantiate ($ z . z ) for x and obtain ( ) k z . z ) ac , which f ~- reduces to a c . We see that this " lifts " the constantac from the argument position to the top  . Incidentally , the projection is only a C-unifier of our coloured example  , if c and d axe identical . 
Fortunately , the choice of instantiations can be further restricted to the most general terms in the categories above ? If X c has type f~n--+ c ~ and hd has type ~- ~ a  , then these socalled general bind-ings have the following form : Gh = ~ kzal  . . . za " . hd(H~l(-5), . . . , Hem ( -5 ) ) where the H i are new variables of type f ) -~~ Vi and the ei are either distinct colour variables  ( if cECI ) ) or ei = d = c ( if cEC )  . If h is one of the bound variables z ~' , then ~ his called an imitation bind-ing , and else , ( h is a constant or a free variable ) , a projection binding ? The general rule for flex/rigid equations transforms X c  ( Sl ,   .   .   . , sn ) = thd(tl , .   .   . , tm ) into Xc(S1 .   .   .   . , sn ) = thal(t1, . . . , tin ) , X c = t ~ h , which in essence only fixes a particular binding for the head variable Xc  . It turns out ( for details and proofs see ( Hutter and Kohlhase ,  1995 ) ) that these general bindings uffice to solve all flex/rigid situations  , possibly at the cost of creating new flex/rigid situations after elimination of the variable Xc and decomposition of the changed equations  ( the elimination of x changes x c ( sl ,   .   .   . , sn ) to ~ h(sl , .   .   . , sn ) which has head h) . 
6.1 Example
To fortify our intuition on calculating higher -order coloured unifiers let us reconsider examples  ( 10 ) and ( 11 ) with the equations
R~pf(ipf )__t ~ x.ex~pf(X , ipf , iA)
R~pf(ipf ) = tAx.ex~pf(X,i-~pf,ipf)
We will develop the derivation of the solutions for the first equations  ( 10 ) and point out the differences for the second ( 11 )  . As a first step , the first equation is decomposed to
R ~ pf(ipf , c ): tex~pf(C , ip f , iA ) where c is a new constant ? Since R~pf is a variable  , we are in a flex/rigid situation and have the possibilities of projection and imitation  . The projection bindings Axy . x and )~ xy . y for R~pf would lead us to the equations ipf = t eX~pf  ( C , ip f , iA ) and c = teX ~ pf(c , ip f , iA ) , which are obviously unsolvable , since the head constants ipf ( and cresp . ) and eX~pf binding ~ kyx ? ex~pf(H~pf(y , x ) , H~2 pf(y , x ) , H3(y , x )) . 
Now , we can directly eliminate the variable R~pf , since there are no other variants . The resulting equation eX~pf(Hlpf(ipf , c ) , H2pf(ipf , c ) , g3(ipf , c )) = teX~pf(c , ip f , iA ) can be decomposed to the equations ( 17 ) Hlpf ( ipf , C )__tc
H~pf(ipf , c ) = tip fg3pf(/pf , C ) __--tiALetus first look at the first equation ; in this flex/rigid situation , only the projection binding ) kzw . w can be applied , since the imitation binding A zw . c contains the forbidden constant c and the other projection leads to a clash  . This solves the equation , since ( Azw . w)(ipf , c)j3-reduces to c , giving the trivial equation c__t c which can be deleted by the decomposition rules ? Similarly  , in the second equation , the projection binding Azw . z for H2 solves the equation , while the second projection clashes and the imitation binding  ) kzw . ipf is not-~pf-monochrome . Thus we are left with the third equation , where both imitation and projection bindings yield legal solutions : ? The imitation binding for  H3pf is ) kzw . i ~ pf , and not Azw . iA , as one is tempted to believe , since it has to be-~pf-monochrome . Thus we are left with i ~ pf = tiA , which can ( uniquely ) be solved by the colour substitution \[-~ pf/A\] . 
? If we bind H3 to Azw . z , then we are left with ~ pfZpf . _-tiA , which can ( uniquely ) be solved by the colour substitution \[ pf/A\] . 
If we collect all instantiations , we arrive at exactly the two possible solutions for R~pf in the original equations  , which we had claimed in section 5:
R ~ pf = ~ kyx.ex ~ pf(X , y , i ~ pf)
R ~ pf =) kyx ? ex~pf(X , y , x)
Obviously both of them solve the equation and furthermore  , none is more general than the other , since i ~ pf cannot be inserted for the variable x in the second unifier  ( which would make it more general than the first )  , since x is bound ? In the case of ( 11 ) the equations corresponding 1 __t 2 "__t - and to ( 17 ) are H . ~ pf(e , ipf)-e , H~pf(e , Zpf ) -? , ~ pfH3pf(ipf)__tipf . Given the discussion above , it is immediate to see that H 1 has to be instantiated with -~ pf the projection binding ~ kzw  . w , H2 with the imitation 6For ( 11 ) we have the same situation ? Here the cor-?t responding equation is tpf--ex~pf  ( C , i ~ p f , ipf ) . 
binding Azw . i  ~ of , since the projection binding leads to a colour clash  ( i ~ f = t ip f ) and finally H~p f has to be bound to the projection binding Azw  . z , since the imitation binding Azw . ipf is not-~pf-monochrome . 
Collecting the bindings , we arrive at the unique solution R~f = Ayx . ex~pf(x,i ~ pf,x ) . 
7 Conclusion
Higher-Order Unification has been shown to be a powerful tool for constructing the interpretation fNL  . In this paper , we have argued that Higher-Order Coloured Unification allows a precise specification of the interface between semantic interpretation and other sources of linguistic information  , thus preventing over generation . We have substan-tiated this claim by specifying the linguistic  , extra-semantic constraints regulating the interpretation fVP-ellipsis  , focus , SOEs , adverbial quantification and pronouns whose antecedent is a focused NP  . 
Other phenomena for which the HOCU approach seems particularly promising are phenomena in which the semantic interpretation process is obviously constrained by the other sources of linguistic information  . In particular , it would be interesting to see whether coloured unification can appropriately model the complex interaction of constraints governing the interpretation adacceptability of gapping on the one hand  , and sloppy/strict ambiguity on the other . 
Another interesting research direction would be the development and implementation famonos -tratal grammar for anaphors whose interpretation are determined by coloured unification  . Colours are tags which decorate a semantic representation thereby constraining the unification process  ; on the other hand , there are also the reflex of linguistic , non-semantic ( e . g . syntactic or prosodic ) information . A full grammar implementation would make this connection more precise  . 
8 Acknowledgements
The work reported in this paper was funded by the Deutsche Forschungsgemeinschaft  ( DFG ) in Sonder-forschungs bereich SFB-378 , Project C2 ( LISA) . 

Christine Bartels . 1995. Second occurrence test.

Noam Chomsky .  1976 . Conditions on rules in grammar . Linguistic Analysis , 2(4):303-351 . 
Mary Dalrymple , Stuart Shieber , and Fernando Pereira .  1991 . Ellipsis and higher-order-unification . Linguistics and Philosophy , 14:399-452 . 
Daniel Dougherty .  1993 . Higher-order unification using combinators . Theoretical Computer Science
B , 114(2):273-298.
Gilles Dowek .  1992 . Third order matching is decidable . In Proc . LICS 92, pages 210 . IEEE Computer Society Press . 
Claire Gardent and Michael Kohlhase .  1996 . Focus and higher-order unification . In Proe . COLING96 forthcoming . 
Claire Gardent , Michael Kohlhase , and Noor van Leusen .  1996 . Corrections and higher-order unification . CLAUS report 77, University of Saarland . 
Claire Gardent .  1996 . Anaphores parall ~ leset techniques der ~ solution . Langages . 
G@rard Huet .  1975 . A unification algorithm for typed A-calculus . Theoretical Computer Science 1, pages 27-57 . 
Ulrich Hustadt .  1991 . A complete transformation system for polymorphic higher-order unification  . 
Technical Report MPI-I-91-228, MPI Informatik,
Saarbriicken , Germany.
Dieter Hutter and Michael Kohlhase .  1995 . A coloured version of the A-calculus . SEKI-Report SR-95-05, Universit/itdes Saarlandes . 
Ray S . Jackendoff .  1972 . Semantic Interpretation in Generative Grammar . The MIT Press . 
Angelika Kratzer .  1991 . The representation f focus . In Arnim van Stechow and Dieter Wunder-lich , editors , Semantik : E in internationales H and buch der zeit genoessischen Forschung  . Berlin :
Walter de Gruyter.
Manfred Pinkal . 1995. Radical underspecification.
In Thel Oth Amsterdam Colloquium.
Christian Prehofer .  1994 . Decidable higher-order unification problems . In Alan Bundy , editor , Proc . CADE94, LNAI , pages 635-649, Nancy,

Steve G . Pulman .  1995 . Higher-order unification and the interpretation f focus  . Paper submitted for publication . 
Kaivon Fintel .  1995 . A minimal theory of adverbial quantification . Unpublishe draft Ms . MIT,
Cambridge , March.

