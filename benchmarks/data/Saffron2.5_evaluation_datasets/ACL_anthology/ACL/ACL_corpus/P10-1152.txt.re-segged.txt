Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics , pages 1502?1511,
Uppsala , Sweden , 1116 July 2010. c?2010 Association for Computational Linguistics
Viterbi Training for PCFGs:
Hardness Results and Competitiveness of Uniform Initialization
Shay B . Cohen and Noah A . Smith
School of Computer Science
Carnegie Mellon University
Pittsburgh , PA 15213, USA
{scohen,nasmith}@cs.cmu.edu
Abstract
We consider the search for a maximum likelihood assignment of hidden derivations and grammar weights for a probabilistic contextfree grammar , the problem approximately solved by ? Viterbi training .? We show that solving and even approximating Viterbi training for PCFGs is NP-hard . We motivate the use of uniform-at-random initialization for Viterbi EM as an optimal initializer in absence of further information about the correct model parameters , providing an approximate bound on the loglikelihood.
1 Introduction
Probabilistic contextfree grammars are an essential ingredient in many natural language processing models ( Charniak , 1997; Collins , 2003; Johnson et al , 2006; Cohen and Smith , 2009, inter alia ). Various algorithms for training such models have been proposed , including unsupervised methods . Many of these are based on the expectation-maximization ( EM ) algorithm.
There are alternatives to EM , and one such alternative is Viterbi EM , also called ? hard ? EM or ? sparse ? EM ( Neal and Hinton , 1998). Instead of using the parameters ( which are maintained in the algorithm?s current state ) to find the true posterior over the derivations , Viterbi EM algorithm uses a posterior focused on the Viterbi parse of those parameters . Viterbi EM and variants have been used in various settings in natural language processing ( Yejin and Cardie , 2007; Wang et al , 2007; Goldwater and Johnson , 2005; DeNero and
Klein , 2008; Spitkovsky et al , 2010).
Viterbi EM can be understood as a coordinate ascent procedure that locally optimizes a function ; we call this optimization goal ? Viterbi training .? In this paper , we explore Viterbi training for probabilistic contextfree grammars . We first show that under the assumption that P 6= NP , solving and even approximating the Viterbi training problem is hard . This result holds even for hidden Markov models . We extend the main hardness result to the EM algorithm ( giving an alternative proof to this known result ), as well as the problem of conditional Viterbi training . We then describe a ? competitiveness ? result for uniform initialization of Viterbi EM : we show that initialization of the trees in an E-step which uses uniform distributions over the trees is optimal with respect to a certain approximate bound.
The rest of this paper is organized as follows . ?2 gives background on PCFGs and introduces some notation . ?3 explains Viterbi training , the declarative form of Viterbi EM . ?4 describes a hardness result for Viterbi training . ?5 extends this result to a hardness result of approximation and ?6 further extends these results for other cases . ?7 describes the advantages in using uniform-at-random initialization for Viterbi training . We relate these results to work on the kmeans problem in ?8.
2 Background and Notation
We assume familiarity with probabilistic contextfree grammars ( PCFGs ). A PCFGG consists of : ? A finite set of nonterminal symbols N ; ? A finite set of terminal symbols ?; ? For each A ? N , a set of rewrite rules R(A ) of the form A ? ?, where ? ? ( N ? ?)?, and
R = ? A?NR(A ); ? For each rule A ? ?, a probability ? A ??. The collection of probabilities is denoted ?, and they are constrained such that : ?( A ? ?) ? R(A ), ? A ?? ? 0 ? A ? N , ? ?:( A??)?R(A ) ? A ?? = 1 That is , ? is grouped into | N | multinomial distributions.
1502
Under the PCFG , the joint probability of a string x ? ?? and a grammatical derivation z is1 p(x , z | ?) = ? ( A??)?R (? A ??) fA??(z ) (1) = exp ? ( A??)?R fA??(z ) log ? A ?? where fA??(z ) is a function that ? counts ? the number of times the rule A ? ? appears in the derivation z . fA(z ) will similarly denote the number of times that nonterminal A appears in z.
Given a sample of derivations z = ? z1, . . . , zn ?, let:
FA??(z ) = n ? i=1 fA??(zi ) (2)
FA(z ) = n ? i=1 fA(zi ) (3)
We use the following notation forG : ? L(G ) is the set of all strings ( sentences ) x that can be generated using the grammar G ( the ? language ofG?).
? D(G ) is the set of all possible derivations z that can be generated using the grammarG.
? D(G , x ) is the set of all possible derivations z that can be generated using the grammarG and have the yield x.
3 Viterbi Training
Viterbi EM , or ? hard ? EM , is an unsupervised learning algorithm , used in NLP in various settings ( Yejin and Cardie , 2007; Wang et al , 2007; Goldwater and Johnson , 2005; DeNero and Klein , 2008; Spitkovsky et al , 2010). In the context of PCFGs , it aims to select parameters ? and phrase-structure trees z jointly . It does so by iteratively updating a state consisting of (?, z ). The state is initialized with some value , then the algorithm alternates between ( i ) a ? hard ? E-step , where the strings x1, . . . , xn are parsed according to a current , fixed ?, giving new values for z , and ( ii ) an M-step , where the ? are selected to maximize likelihood , with z fixed.
With PCFGs , the E-step requires running an algorithm such as ( probabilistic ) CKY or Earley?s 1Note that x = yield(z ); if the derivation is known , the string is also known . On the other hand , there may be many derivations with the same yield , perhaps even infinitely many.
algorithm , while the M-step normalizes frequency counts FA??(z ) to obtain the maximum likelihood estimate?s closedform solution.
We can understand Viterbi EM as a coordinate ascent procedure that approximates the solution to the following declarative problem:
Problem 1. ViterbiTrain
Input : G contextfree grammar , x1, . . . , xn training instances from L(G)
Output : ? and z1, . . . , zn such that (?, z1, . . . , zn ) = argmax ?, z n ? i=1 p(xi , zi | ?) (4) The optimization problem in Eq . 4 is nonconvex and , as we will show in ?4, hard to optimize . Therefore it is necessary to resort to approximate algorithms like Viterbi EM.
Neal and Hinton (1998) use the term ? sparse EM ? to refer to a version of the EM algorithm where the E-step finds the modes of hidden variables ( rather than marginals as in standard EM).
Viterbi EM is a variant of this , where the E-step finds the mode for each xi?s derivation , argmaxz?D(G,xi ) p(xi , z | ?).
We will refer to
L (?, z ) = n ? i=1 p(xi , zi | ?) (5) as ? the objective function of ViterbiTrain .? Viterbi training and Viterbi EM are closely related to self-training , an important concept in semisupervised NLP ( Charniak , 1997; McClosky et al , 2006a ; McClosky et al , 2006b ). With self-training , the model is learned with some seed annotated data , and then iterates by labeling new , unannotated data and adding it to the original annotated training set . McClosky et al consider self-training to be ? one round of Viterbi EM ? with supervised initialization using labeled seed data . We refer the reader to Abney (2007) for more details.
4 Hardness of Viterbi Training
We now describe hardness results for Problem 1.
We first note that the following problem is known to be NP-hard , and in fact , NP-complete ( Sipser , 2006):
Problem 2. 3SAT
Input : A formula ? = ? m i=1 ( ai ? bi ? ci ) in conjunctive normal form , such that each clause has 3 ccccc ccccc ccccc ccccc ccccc ccccc c
TT
TT
TT
TT
TT
TT
TT
TT
TT
TT
TT
TT
TT
TT
TT
TT
S?1
A1 eee eee eee eee eee eee e
YYY
YYY
YYY
YYY
YYY
YYY
Y
A2 eee eee eee eee eee eee e
YYY
YYY
YYY
YYY
YYY
YYY
Y
UY1,0 qq qq qq q
MM
MM
MM
M
UY2,1 qq qq qq q
MM
MM
MM
M
UY4,0 qq qq qq q
MM
MM
MM
M
UY1,0 qq qq qq q
MM
MM
MM
M
UY2,1 qq qq qq q
MM
MM
MM
M
UY3,1 qq qq qq q
MM
MM
MM
M
VY?1 VY1 VY2 VY?2 VY?4 VY4 VY?1 VY1 VY2 VY?2 VY3 VY?3 1 0 1 0 1 0 1 0 1 0 1 0 Figure 1: An example of a Viterbi parse tree which represents a satisfying assignment for ? = ( Y1?Y2? Y?4)? ( Y?1? Y?2?Y3).
In ??, all rules appearing in the parse tree have probability 1. The extracted assignment would be Y1 = 0, Y2 = 1, Y3 = 1, Y4 = 0. Note that there is no usage of two different rules for a single nonterminal.
literals.
Output : 1 if there is a satisfying assignment for ? and 0 otherwise.
We now describe a reduction of 3SAT to Problem 1. Given an instance of the 3SAT problem , the reduction will , in polynomial time , create a grammar and a single string such that solving the ViterbiTrain problem for this grammar and string will yield a solution for the instance of the 3SAT problem.
Let ? = ? m i=1 ( ai ? bi ? ci ) be an instance of the 3SAT problem , where ai , bi and ci are literals over the set of variables { Y1, . . . , YN } ( a literal refers to a variable Yj or its negation , Y?j ). Let Cj be the jth clause in ?, such that Cj = aj ? bj ? cj .
We define the following contextfree grammarG ? and string to parse s ?: 1. The terminals of G ? are the binary digits ? = {0, 1}.
2. We create N nonterminals VYr , r ? {1, . . . , N } and rules VYr ? 0 and VYr ? 1.
3. We create N nonterminals VY?r , r ? {1, . . . , N } and rules VY?r ? 0 and VY?r ? 1.
4. We create UYr,1 ? VYrVY?r and UYr,0 ?
VY?rVYr .
5. We create the rule S?1 ? A1. For each j ? {2, . . . , m }, we create a rule S?j ? S?j?1Aj where S?j is a new nonterminal indexed by ? j , ? j i=1Ci and Aj is also a new nonterminal indexed by j ? {1, . . . , m}.
6. Let Cj = aj ? bj ? cj be clause j in ?. Let Y ( aj ) be the variable that aj mentions . Let ( y1, y2, y3) be a satisfying assignment for Cj where yk ? {0, 1} and is the value of Y ( aj ), Y ( bj ) and Y ( cj ) respectively for k ? {1, 2, 3}.
For each such clause-satisfying assignment , we add the rule : Aj ? UY ( aj),y1UY ( bj),y2UY ( cj),y3 (6) For each Aj , we would have at most 7 rules of that form , since one rule will be logically inconsistent with aj ? bj ? cj .
7. The grammar?s start symbol is S?n .
8. The string to parse is s ? = (10)3m , i.e . 3m consecutive occurrences of the string 10.
A parse of the string s ? using G ? will be used to get an assignment by setting Yr = 0 if the rule VYr ? 0 or VY?r ? 1 are used in the derivation of the parse tree , and 1 otherwise . Notice that at this point we do not exclude ? contradictions ? coming from the parse tree , such as VY3 ? 0 used in the tree together with VY3 ? 1 or VY?3 ? 0. The following lemma gives a condition under which the assignment is consistent ( so contradictions do not occur in the parse tree ): Lemma 1. Let ? be an instance of the 3SAT problem , and letG ? be a probabilistic CFG based on the above grammar with weights ??. If the ( multiplicative ) weight of the Viterbi parse of s ? is 1, then the assignment extracted from the parse tree is consistent.
Proof . Since the probability of the Viterbi parse is 1, all rules of the form { VYr , VY?r } ? {0, 1} which appear in the parse tree have probability 1 as well . There are two possible types of inconsistencies . We show that neither exists in the Viterbi parse : form VYr ? 0 and VYr ? 1 cannot occur because all rules that appear in the Viterbi parse tree have probability 1.
2. For any r , an appearance of rules of the form VYr ? 1 and VY?r ? 1 cannot occur , because whenever we have an appearance of the rule VYr ? 0, we have an adjacent appearance of the rule VY?r ? 1 ( because we parse substrings of the form 10), and then again we use the fact that all rules in the parse tree have probability 1.
The case of VYr ? 0 and VY?r ? 0 is handled analogously.
Thus , both possible inconsistencies are ruled out , resulting in a consistent assignment.
Figure 1 gives an example of an application of the reduction.
Lemma 2. Define ?, G ? as before . There exists ?? such that the Viterbi parse of s ? is 1 if and only if ? is satisfiable . Moreover , the satisfying assignment is the one extracted from the parse tree with weight 1 of s ? under ??.
Proof . (=?) Assume that there is a satisfying assignment . Each clause Cj = aj ? bj ? cj is satisfied using a tuple ( y1, y2, y3) which assigns value for Y ( aj ), Y ( bj ) and Y ( cj ). This assignment corresponds the following rule Aj ? UY ( aj),y1UY ( bj),y2UY ( cj),y3 (7) Set its probability to 1, and set al other rules of Aj to 0. In addition , for each r , if Yr = y , set the probabilities of the rules VYr ? y and VY?r ? 1?y to 1 and VY?r ? y and VYr ? 1? y to 0. The rest of the weights for S?j ? S?j?1Aj are set to 1.
This assignment of rule probabilities results in a
Viterbi parse of weight 1.
(?=) Assume that the Viterbi parse has probability 1. From Lemma 1, we know that we can extract a consistent assignment from the Viterbi parse . In addition , for each clause Cj we have a rule Aj ? UY ( aj),y1UY ( bj),y2UY ( cj),y3 (8) that is assigned probability 1, for some ( y1, y2, y3). One can verify that ( y1, y2, y3) are the values of the assignment for the corresponding variables in clause Cj , and that they satisfy this clause . This means that each clause is satisfied by the assignment we extracted.
In order to show an NP-hardness result , we need to ? convert ? ViterbiTrain to a decision problem.
The natural way to do it , following Lemmas 1 and 2, is to state the decision problem for ViterbiTrain as ? given G and x1, . . . , xn and ? ? 0, is the optimized value of the objective function L (?, z ) ? ??? and use ? = 1 together with Lemmas 1 and 2. ( Naturally , an algorithm for solving ViterbiTrain can easily be used to solve its decision problem .) Theorem 3. The decision version of the Viterbi-
Train problem is NP-hard.
5 Hardness of Approximation
A natural path of exploration following the hardness result we showed is determining whether an approximation of ViterbiTrain is also hard . Perhaps there is an efficient approximation algorithm for ViterbiTrain we could use instead of coordinate ascent algorithms such as Viterbi EM . Recall that such algorithms ? main guarantee is identifying a local maximum ; we know nothing about how far it will be from the global maximum.
We next show that approximating the objective function of ViterbiTrain with a constant factor of ? is hard for any ? ? (12 , 1] ( i.e ., 1/2 +  approximation is hard for any  ? 1/2). This means that , under the P 6= NP assumption , there is no efficient algorithm that , given a grammar G and a sample of sentences x1, . . . , xn , returns ?? and z ? such that:
L (??, z ?) ? ? ? max ?, z n ? i=1 p(xi , zi | ?) (9) We will continue to use the same reduction from ?4. Let s ? be the string from that reduction , and let (?, z ) be the optimal solution for ViterbiTrain given G ? and s ?. We first note that if p(s ?, z | ?) < 1 ( implying that there is no satisfying assignment ), then there must be a nonterminal which appears along with two different rules in z.
This means that we have a nonterminal B ? N with some rule B ? ? that appears k times , while the nonterminal appears in the parse r ? k + 1 times . Given the tree z , the ? that maximizes the objective function is the maximum likelihood estimate ( MLE ) for z ( counting and normalizing the rules).2 We therefore know that the ViterbiTrain objective function , L (?, z ), is at 2Note that we can only make p(z | ?, x ) greater by using ? to be the MLE for the derivation z.
1505 most ( k r ) k , because it includes a factor equal to ( fB??(z ) fB(z ) ) fB??(z ) , where fB(z ) is the number of times nonterminal B appears in z ( hence fB(z ) = r ) and fB??(z ) is the number of times B ? ? appears in z ( hence fB??(z ) = k ). For any k ? 1, r ? k + 1: ( k r ) k ? ( k k + 1 ) k ? (10) This means that if the value of the objective function of ViterbiTrain is not 1 using the reduction from ?4, then it is at most 12 . If we had an efficient approximate algorithm with approximation coefficient ? > 12 ( Eq . 9 holds ), then in order to solve 3SAT for formula ?, we could run the algorithm on G ? and s ? and check whether the assignment to (?, z ) that the algorithm returns satisfies ? or not , and return our response accordingly.
If ? were satisfiable , then the true maximal value of L would be 1, and the approximation algorithm would return (?, z ) such that L (?, z ) ? ? > 12 . z would have to correspond to a satisfying assignment , and in fact p(z | ?) = 1, because in any other case , the probability of a derivation which does not represent a satisfying assignment is smaller than 12 . If ? were not satisfiable , then the approximation algorithm would never return a (?, z ) that results in a satisfying assignment ( because such a (?, z ) does not exist).
The conclusion is that an efficient algorithm for approximating the objective function of ViterbiTrain ( Eq . 4) within a factor of 12 +  is unlikely to exist . If there were such an algorithm , we could use it to solve 3SAT using the reduction from ?4.
6 Extensions of the Hardness Result
An alternative problem to Problem 1, a variant of Viterbi-training , is the following ( see , for example , Klein and Manning , 2001):
Problem 3. ConditionalViterbiTrain
Input : G contextfree grammar , x1, . . . , xn training instances from L(G)
Output : ? and z1, . . . , zn such that (?, z1, . . . , zn ) = argmax ?, z n ? i=1 p(zi | ?, xi ) (11) Here , instead of maximizing the likelihood , we maximize the conditional likelihood . Note that there is a hidden assumption in this problem definition , that xi can be parsed using the grammar G . Otherwise , the quantity p(zi | ?, xi ) is not well-defined . We can extend ConditionalViterbiTrain to return ? in the case of not having a parse for one of the xi?this can be efficiently checked using a run of a cubic-time parser on each of the strings xi with the grammarG.
An approximate technique for this problem is similar to Viterbi EM , only modifying the M-step to maximize the conditional , rather than joint , likelihood . This new M-step will not have a closed form and may require auxiliary optimization techniques like gradient ascent.
Our hardness result for ViterbiTrain applies to ConditionalViterbiTrain as well . The reason is that if p(z , s ? | ??) = 1 for a ? with a satisfying assignment , thenL(G ) = { s ?} andD(G ) = { z}.
This implies that p(z | ??, s ?) = 1. If ? is unsatisfiable , then for the optimal ? of ViterbiTrain we have z and z ? such that 0 < p(z , s ? | ??) < 1 and 0 < p(z ?, s ? | ??) < 1, and therefore p(z | ??, s ?) < 1, which means the conditional objective function will not obtain the value 1. ( Note that there always exist some parameters ?? that generate s ?.) So , again , given an algorithm for ConditionalViterbiTrain , we can discern between a satisfiable formula and an unsatisfiable formula , using the reduction from ?4 with the given algorithm , and identify whether the value of the objective function is 1 or strictly less than 1. We get the result that : Theorem 4. The decision problem of ConditionalViterbiTrain problem is NP-hard.
where the decision problem of ConditionalViterbiTrain is defined analogously to the decision problem of ViterbiTrain.
We can similarly show that finding the global maximum of the marginalized likelihood : max ? n ? i=1 log ? z p(xi , z | ?) (12) is NP-hard . The reasoning follows . Using the reduction from before , if ? is satisfiable , then Eq . 12 gets value 0. If ? is unsatisfiable , then we would still get value 0 only if L(G ) = { s ?}. If G ? generates a single derivation for (10)3m , then we actually do have a satisfying assignment from tion ), the optimal ? would have to give fractional probabilities to rules of the form VYr ? {0, 1} ( or VY?r ? {0, 1}). In that case , it is no longer true that (10)3m is the only generated sentence , which is a contradiction.
The quantity in Eq . 12 can be maximized approximately using algorithms like EM , so this gives a hardness result for optimizing the objective function of EM for PCFGs . Day (1983) previously showed that maximizing the marginalized likelihood for hidden Markov models is NP-hard.
We note that the grammar we use for all of our results is not recursive . Therefore , we can encode this grammar as a hidden Markov model , strengthening our result from PCFGs to HMMs.3 7 Uniform-at-Random Initialization In the previous sections , we showed that solving Viterbi training is hard , and therefore requires an approximation algorithm . Viterbi EM , which is an example of such algorithm , is dependent on an initialization of either ? to start with an E-step or z to start with an M-step . In the absence of a better-informed initializer , it is reasonable to initialize z using a uniform distribution over D(G , xi ) for each i . If D(G , xi ) is finite , it can be done efficiently by setting ? = 1 ( ignoring the normalization constraint ), running the inside algorithm , and sampling from the ( unnormalized ) posterior given by the chart ( Johnson et al , 2007). We turn next to an analysis of this initialization technique that suggests it is well-motivated.
The sketch of our result is as follows : we first give an asymptotic upper bound for the loglikelihood of derivations and sentences . This bound , which has an information-theoretic interpretation , depends on a parameter ?, which depends on the distribution from which the derivations were chosen . We then show that this bound is minimized when we pick ? such that this distribution is ( conditioned on the sentence ) a uniform distribution over derivations.
Let q(x ) be any distribution over L(G ) and ? some parameters for G . Let f(z ) be some feature function ( such as the one that counts the number of appearances of a certain rule in a derivation ), and then:
Eq,?[f ] , ? x?L(G ) q(x ) ? z?D(G,x ) p(z | ?, x)f(z ) 3We thank an anonymous reviewer for pointing this out.
which gives the expected value of the feature function f(z ) under the distribution q(x)?p(z | ?, x).
We will make the following assumption aboutG : Condition 1. There exists some ? I such that ? x ? L(G),?z ? D(G , x ), p(z | ? I , x ) = 1/|D(G , x)|.
This condition is satisfied , for example , whenG is in Chomsky normal form and for all A,A ? ? N , | R(A )| = | R(A ?)|. Then , if we set ? A ?? = 1/|R(A )|, we get that all derivations of x will have the same number of rules and hence the same probability . This condition does not hold for grammars with unary cycles because | D(G , x)|may be infinite for some derivations . Such grammars are not commonly used in NLP.
Let us assume that some ? correct ? parameters ?? exist , and that our data were drawn from a distribution parametrized by ??. The goal of this section is to motivate the following initialization for ?, which we call UniformInit : 1. Initialize z by sampling from the uniform distribution over D(G , xi ) for each xi.
2. Update the grammar parameters using maximum likelihood estimation.
7.1 Bounding the Objective
To show our result , we require first the following definition due to Freund et al (1997): Definition 5. A distribution p1 is within ? ? 1 of a distribution p2 if for every event A , we have ? p1(A ) p2(A ) ? ? (13) For any feature function f(z ) and any two sets of parameters ?2 and ?1 for G and for any marginal q(x ), if p(z | ?1, x ) is within ? of p(z | ?2, x ) for all x then:
Eq,?1 [ f ] ? ? Eq,?2 [ f ] ? ? Eq,?1 [ f ] (14) Let ?0 be a set of parameters such that we perform the following procedure in initializing Viterbi EM : first , we sample from the posterior distribution p(z | ?0, x ), and then update the parameters with maximum likelihood estimate , in a regular M-step.
Let ? be such that p(z | ?0, x ) is within ? of p(z | ??, x ) ( for all x ? L(G )). ( Later we will show that UniformInit is a wise choice for making ? small . Note that UniformInit is equivalent to the procedure mentioned above with ?0 = ? I .) x1, . . . , xn . As n ? ?, we have that p?n(x ) ? p?(x ), almost surely , where p ? is : p?(x ) = ? z p?(x , z | ??) (15) This means that as n ? ? we have Ep?n,?[f ] ? Ep?,?[f ]. Now , let z0 = ( z0,1, . . . , z0,n ) be samples from p(z | ?0, xi ) for i ? {1, . . . , n }. Then , from simple MLE computation , we know that the value max ?? n ? i=1 p(xi , z0,i | ??) (16) = ? ( A??)?R (
FA??(z0)
FA(z0) ) FA??(z0)
We also know that for ?0, from the consistency of
MLE , for large enough samples:
FA??(z0)
FA(z0) ?
Ep?n,?0 [ fA??]
Ep?n,?0 [ fA ] (17) which means that we have the following as n grows ( starting from the ViterbiTrain objective with initial state z = z0): max ?? n ? i=1 p(xi , z0,i | ??) (18) ( Eq . 16) = ? ( A??)?R (
FA??(z0)
FA(z0) ) FA??(z0) (19) ( Eq . 17) ? ? ( A??)?R (
Ep?n,?0 [ fA??]
Ep?n,?0 [ fA ] ) FA??(z0) (20)
We next use the fact that p?n(x ) ? p?(x ) for large n , and apply Eq . 14, noting again our assumption that p(z | ?0, x ) is within ? of p(z | ??, x ). We also let B = ? i | zi |, where | zi | is the number of nodes in the derivation zi . Note that FA(zi ) ? B . The above quantity ( Eq . 20) is approximately bounded above by ? ( A??)?R (
Ep ?,?? [ fA??]
Ep ?,?? [ fA ] ) FA??(z0) (21) = ? ( A??)?R (?? A??)
FA??(z0) (22)
Eq . 22 follows from : ?? A ?? =
Ep ?,?? [ fA??]
Ep ?,?? [ fA ] (23)
If we continue to develop Eq . 22 and apply
Eq . 17 and Eq . 23 again , we get that : ? ( A??)?R (?? A??)
FA??(z0) = ? ( A??)?R (?? A??)
FA??(z0)?
FA(z0)
FA(z0) ? ? ( A??)?R (?? A??)
Ep?,?0 [ fA??]
Ep?,?0 [ fA ] ? FA(z0) ? ? ( A??)?R (?? A ??) ?2??A??FA(z0) ? ? ? ? ( A??)?R (?? A ??) n??A ?? ? ? ? ?? ?
T (??, n)
B?2/n (24) = ( )
T (??, n)B ? 2/n (25) , d (?;??, | R |, B ) (26) where Eq . 24 is the result of FA(z0) ? B.
For two series { an } and { bn }, let ? an ' bn ? denote that limn ?? an ? limn ?? bn . In other words , an is asymptotically larger than bn . Then , if we changed the representation of the objective function of the ViterbiTrain problem to loglikelihood , for ?? that maximizes Eq . 18 ( with some simple algebra ) we have : n ? i=1 log2 p(xi , z0,i | ? ?) (27) ' ? 2|R|B n log2 ?+
B?2 n ( log2 T (? ?, n ) ) = ? 2|R|B n log2 ?? | N|
B?2 | N|n ?
A?N
H (??, A ) (28) where
H (??, A ) = ? ? ( A??)?R(A ) ?? A ?? log2 ? ?
A ?? (29) is the entropy of the multinomial for nonterminal A . H (??, A ) can be thought of as the minimal number of bits required to encode a choice of a rule from A , if chosen independently from the other rules . All together , the quantity
B | N|n (?
A?NH (? ?, A ) ) is the average number of bits required to encode a tree in our sample using and assuming that each node at the tree is chosen uniformly.4 This means that the loglikelihood , for large n , is bounded from above by a linear function of the ( average ) number of bits required to optimally encode n trees of total size B , while assuming independence among the rules in a tree.
We note that the quantityB/nwill tend toward the average size of a tree , which , under Condition 1, must be finite.
Our final approximate bound from Eq . 28 relates the choice of distribution , from which sample z0, to ?. The lower bound in Eq . 28 is a monotone-decreasing function of ?. We seek to make ? as small as possible to make the bound tight . We next show that the uniform distribution optimizes ? in that sense.
7.2 Optimizing ?
Note that the optimal choice of ?, for a single x and for candidate initializer ??, is ? opt(x,??;?0) = sup z?D(G,x ) p(z | ?0, x ) p(z | ??, x ) (30) In order to avoid degenerate cases , we will add another condition on the true model , ??: Condition 2. There exists ? > 0 such that , for any x ? L(G ) and for any z ? D(G , x ), p(z | ??, x ) ? ? .
This is a strong condition , forcing the cardinality of D(G ) to be finite , but it is not unreasonable if natural language sentences are effectively bounded in length.
Without further information about ?? ( other than that it satisfies Condition 2), we may want to consider the worst-case scenario of possible ?, hence we seek initializer ?0 such that ?( x;?0) , sup ? ? opt(x,?;?0) (31) is minimized . If ?0 = ? I , then we have that p(z | ? I , x ) = | D(G , x)|?1 , ? x . Together with
Condition 2, this implies that p(z | ? I , x ) p(z | ??, x ) ? ? x ? (32) 4We note that Grenander (1967) describes a ( linear ) relationship between the derivational entropy and H (??, A ). The derivational entropy is defined as h (??, A ) = ?
P x,z p(x , z | ? ?) log p(x , z | ??), where z ranges over trees that have nonterminal A as the root . It follows immediately from Grenander?s result that
P
AH (? ?, A ) ? P
A h (? ?, A).
and hence ? opt(x ,??) ? ? x /? for any ??, hence ?( x;?I ) ? ? x /? . However , if we choose ?0 6= ? I , we have that p(z ? | ?0, x ) > ? x for some z ?, hence , for ?? such that it assigns probability ? on z ?, we have that sup z?D(G,x ) p(z | ?0, x ) p(z | ??, x ) > ? x ? (33) and hence ? opt(x ,??;??) > ? x /? , so ?( x ;??) > ? x /? . So , to optimize for the worst-case scenario over true distributions with respect to ?, we are motivated to choose ?0 = ? I as defined in Condition 1. Indeed , UniformInit uses ? I to initialize the state of Viterbi EM.
We note that if ? I was known for a specific grammar , then we could have used it as a direct initializer . However , Condition 1 only guarantees its existence , and does not give a practical way to identify it . In general , as mentioned above , ? = 1 can be used to obtain a weighted CFG that satisfies p(z | ?, x ) = 1/|D(G , x )|. Since we require a uniform posterior distribution , the number of derivations of a fixed length is finite . This means that we can converted the weighted CFG with ? = 1 to a PCFG with the same posterior ( Smith and Johnson , 2007), and identify the appropriate ? I .
8 Related Work
Viterbi training is closely related to the kmeans clustering problem , where the objective is to find k centroids for a given set of d-dimensional points such that the sum of distances between the points and the closest centroid is minimized . The analog for Viterbi EM for the kmeans problem is the kmeans clustering algorithm ( Lloyd , 1982), a coordinate ascent algorithm for solving the kmeans problem . It works by iterating between an E-like-step , in which each point is assigned the closest centroid , and an M-like-step , in which the centroids are set to be the center of each cluster.
?k ? in kmeans corresponds , in a sense , to the size of our grammar . kmeans has been shown to be NP-hard both when k varies and d is fixed and when d varies and k is fixed ( Aloise et al , 2009; Mahajan et al , 2009). An open problem relating to our hardness result would be whether ViterbiTrain ( or ConditionalViterbiTrain ) is hard even if we do not permit grammars of arbitrarily large size , or at least , constrain the number of rules that do not rewrite to terminals ( in our current reduction , the formula grows).
On a related note to ?7, Arthur and Vassilvitskii (2007) described a greedy initialization algorithm for initializing the centroids of kmeans , called kmeans ++. They show that their initialization is O(log k)-competitive ; i.e ., it approximates the optimal clusters assignment by a factor of O(log k ). In ?7.1, we showed that uniform-at-random initialization is approximately O(|N|L?2/n)-competitive ( modulo an additive constant ) for CNF grammars , where n is the number of sentences , L is the total length of sentences and ? is a measure for distance between the true distribution and the uniform distribution.5 Many combinatorial problems in NLP involving phrase-structure trees , alignments , and dependency graphs are hard ( Sima?an , 1996; Goodman , 1998; Knight , 1999; Casacuberta and de la Higuera , 2000; Lyngs ? and Pederson , 2002; Udupa and Maji , 2006; McDonald and Satta , 2007; DeNero and Klein , 2008, inter alia ). Of special relevance to this paper is Abe and Warmuth (1992), who showed that the problem of finding maximum likelihood model of probabilistic automata is hard even for a single string and an automaton with two states . Understanding the complexity of NLP problems , we believe , is crucial as we seek effective practical approximations when necessary.
9 Conclusion
We described some properties of Viterbi training for probabilistic contextfree grammars . We showed that Viterbi training is NP-hard and , in fact , NP-hard to approximate . We gave motivation for uniform-at-random initialization for derivations in the Viterbi EM algorithm.
Acknowledgments
We acknowledge helpful comments by the anonymous reviewers . This research was supported by
NSF grant 0915187.
References
N . Abe and M . Warmuth . 1992. On the computational complexity of approximating distributions by prob-5Making the assumption that the grammar is in CNF permits us to use L instead of B , since there is a linear relationship between them in that case.
abilistic automata . Machine Learning , 9(2?3):205? 260.
S . Abney . 2007. Semisupervised Learning for Computational Linguistics . CRC Press.
D . Aloise , A . Deshpande , P . Hansen , and P . Popat.
2009. NP-hardness of Euclidean sum-of-squares clustering . Machine Learning , 75(2):245?248.
D . Arthur and S . Vassilvitskii . 2007. kmeans ++: The advantages of careful seeding . In Proc . of ACM-
SIAM symposium on Discrete Algorithms.
F . Casacuberta and C . de la Higuera . 2000. Computational complexity of problems on probabilistic grammars and transducers . In Proc . of ICGI.
E . Charniak . 1997. Statistical parsing with a contextfree grammar and word statistics . In Proc . of AAAI.
S . B . Cohen and N . A . Smith . 2009. Shared logistic normal distributions for soft parameter tying in unsupervised grammar induction . In Proc . of HLT-
NAACL.
M . Collins . 2003. Head-driven statistical models for natural language processing . Computational Linguistics , 29(4):589?637.
W . H . E . Day . 1983. Computationally difficult parsimony problems in phylogenetic systematics . Journal of Theoretical Biology , 103.
J . DeNero and D . Klein . 2008. The complexity of phrase alignment problems . In Proc . of ACL.
Y . Freund , H . Seung , E . Shamir , and N . Tishby . 1997.
Selective sampling using the query by committee algorithm . Machine Learning , 28(2?3):133?168.
S . Goldwater and M . Johnson . 2005. Bias in learning syllable structure . In Proc . of CoNLL.
J . Goodman . 1998. Parsing Inside-Out . Ph.D . thesis,
Harvard University.
U . Grenander . 1967. Syntax-controlled probabilities.
Technical report , Brown University , Division of Applied Mathematics.
M . Johnson , T . L . Griffiths , and S . Goldwater . 2006.
Adaptor grammars : A framework for specifying compositional nonparameteric Bayesian models . In
Advances in NIPS.
M . Johnson , T . L . Griffiths , and S . Goldwater . 2007.
Bayesian inference for PCFGs via Markov chain
Monte Carlo . In Proc . of NAACL.
D . Klein and C . Manning . 2001. Natural language grammar induction using a constituent-context model . In Advances in NIPS.
K . Knight . 1999. Decoding complexity in word-replacement translation models . Computational
Linguistics , 25(4):607?615.
S . P . Lloyd . 1982. Least squares quantization in PCM.
In IEEE Transactions on Information Theory.
R . B . Lyngs ? and C . N . S . Pederson . 2002. The consensus string problem and the complexity of comparing hidden Markov models . Journal of Computing and System Science , 65(3):545?569.
M . Mahajan , P . Nimbhorkar , and K . Varadarajan . 2009.
The planar kmeans problem is NP-hard . In Proc . of International Workshop on Algorithms and Computation.
1510
D . McClosky , E . Charniak , and M . Johnson . 2006a.
Effective self-training for parsing . In Proc . of HLT-
NAACL.
D . McClosky , E . Charniak , and M . Johnson . 2006b.
Reranking and self-training for parser adaptation . In
Proc . of COLINGACL.
R . McDonald and G . Satta . 2007. On the complexity of nonprojective datadriven dependency parsing . In Proc . of IWPT.
R . M . Neal and G . E . Hinton . 1998. A view of the EM algorithm that justifies incremental , sparse , and other variants . In Learning and Graphical Models , pages 355?368. Kluwer Academic Publishers.
K . Sima?an . 1996. Computational complexity of probabilistic disambiguation by means of tree-grammars.
In In Proc . of COLING.
M . Sipser . 2006. Introduction to the Theory of Computation , Second Edition . Thomson Course Technology.
N . A . Smith and M . Johnson . 2007. Weighted and probabilistic contextfree grammars are equally expressive . Computational Linguistics , 33(4):477? 491.
V . I . Spitkovsky , H . Alshawi , D . Jurafsky , and C . D.
Manning . 2010. Viterbi training improves unsupervised dependency parsing . In Proc . of CoNLL.
R . Udupa and K . Maji . 2006. Computational complexity of statistical machine translation . In Proc . of
EACL.
M . Wang , N . A . Smith , and T . Mitamura . 2007. What is the Jeopardy model ? a quasi-synchronous grammar for question answering . In Proc . of EMNLP.
C . Yejin and C . Cardie . 2007. Structured local training and biased potential functions for conditional random fields with application to coreference resolution . In Proc . of HLTNAACL.
1511
