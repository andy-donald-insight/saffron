FACTORINGRECURSION AND DEPENDENCIES : ANASPECT OFTREE ADJOINING G AMMARS  ( TAG ) AND
A COMPARISON OF SOME FOR MALPROPER TIES OF TAGS , GP SGS , PLGS , ANDLPGS *
Aravind K . Joshi
Department of Computer and Information Science
R .268 Moore School
University of Pennsylvania
Philadelphia , PA 19104

During the last few years there is vigorous activity In constructing highly constrained grammatical systems by eliminating the transformational component either totally or partially  . There is increasing recognition of the fact that the entire range of dependencies that trans formational grammars in their various incarnations have tried to account for can be satisfactorily captured by classes of rules that are non-transformational and at the same Clme highly constrlaned in terms of the classes of grammars and languages that they define  . 
Two types of dependencies are especially important : subcategorlzatlon and filler-gap dependencies  . Moreover , these dependencies can be unbounded . One of the motivations for transformations was coaccount for unbounded dependencies  . The socalled non-transformational grammars account for the unbounded dependencies in different ways  . In a cree-adJoinlng grammar ( TAG ) , which has been introduced earlier in ( Joshi , 1982) , unhoundedness is achieved by factoring the dependencies and recursion in a novel and  , we belleve , in a linguistically interesting manner . 
All dependencies are defined on a finite set of basic structures  ( trees ) which are bounded . 
Unhoundedness is then a corollary of a particu larcomposition operation called ad ~ olnlng  . There are thus noun bounded dependencies in a sense  . 
In this paper , we will ~ irs C briefly describe TAG's , which have the following Important properties  :   ( l ) we can represent the usual transformational relations more or less directly in TAG's  ,   ( 2 ) the power of TAG's is only slightly more than that of contextfree grammars  ( CFG's ) in what appears to be Just the rightway , and ( 3 ) TAG's are powerful enough to characterize dependencies  ( e . g .   , subcategorlzatlon , as in verb subcategorlzatl on , and filler-gap dependencies , as in the case of moved constltutents in wh -quest lons  ) which might * GPSG : Generalized phrase structure grammar  , PLG : Phrase linking grammar , and LFG : Lexl cal functional grannnar . 
This work is partially supported by the NSF
Grant MCS81-07290.
be at unbounded distance and nested or crossed . 
We will then compare some of the formal properties of TAG's  , GPSG * s , PLG's , and LFG * s , in particular , concerning ( I ) the types of languages , reflecting different patterns of dependencies that can or cannot be generated by the diffe rent types of grammars  ,   ( 2 ) the degree of free word ordering permitted by different grammars  , and (3) parsing complexity of the different gra-- , -rs . 
2. TREE ADJO INING GRAMMAR ( TAG)
A tree adjoining grammar ( TAG ) , G = ( I , A ) consists of two finite sets of e lementary trees  . 
The trees in I will be called the initial trees and the trees in A  , the auxiliary trees . A tree ~ is an initial tree if the root node of is labeled S and the frontier nodes are all terminal symbols  ( the interior nodes are all non-term lnals )  . A tree ~ is an auxiliary tree if the root node of ~ is labeled by a nonterminal  , say , X , and the frontler nodes are all terminals except one which is also labeled X  , the same label as that of the root . The node labeled by X on the frontier will be called the foot node of ~  . The internal nodes are nonterminals . 
~t . ~ ermfmJ $,, hAl ~
As defined above , the initial trees and the auxiliary t rees are not constrained in any manner other than as indicated above  . The idea , however , is that both the initial and the auxiliary trees will be minimal in some sense  . 
An initial tree will correspond to a minimal sentent laltree  ( i . e . , for example , without recurslng on any nonterminal ) and an auxiliary tree , with the root node and the foot node labeled X , will correspond to a minimal structure that must be brought into the derivation  , if one recurses on X . 
* I wish to thank Bob Berwlck , Tim Finin , Jean Gallier , Gerald Gazdar , Ron Kaplan , Tony Kroch , Bill Marsh , Milch Marcus , Ellen Prince , Geoff Pullum , R . Shyamasundar , Bonnie Webber , Scott Weinstein , and Takashi Yokomori for their valuable comments We will now define a composition operation called adjoining  ( or adJunction ) which composes an auxilia ~ tree ~ with at ree~?~t tree with a node labeled X and le t ~ ~ an auxiliary tree ~ th the root labe led X also  . 
~teChat ~ ~ st ~ ve , by definition , a node ( and only one ) labeled X on the frontier . 
~ Jolnlng can now ~ defined as follows . If Is adjoining to ~ at the node n then the resulting tree ~ is as sho ~ in Fig  . l . 
se /
FiG , : L.
The treet dominated by X in ~ is excised , ~ is inserted at the node n in and the tree t is attached to the foot node  ( labeled X ) of ~ , i . e .   , ~ is inserted or ' adjoined ' to the node n in ~ pushing tdownwards  . Note that adjoining is not a substitution operation in the usual sense  . 
Example 2 . 1: Let G-(I , A ) be a TAG where m + b ~ r/~/x bo-bt+i-- , ( Z ) + + + : db
T x ( ~ S o , , b < : x , , T b
The root node and the foot node of each auxili ary tree is circled for convenience  . Let us took at some derivations in G . 
~ wlll be adjoined to ~/ o at the indicated node in ~  . The resulting tree
Is then ~ b~-ro$(~.T.bb
We can continue the derivation by ad ~ olnlng , say /@@ , at S as indicated ing ? . 
The resulting tree ~ fX is then . sL"?P4F ? ~"\[4'' z'"@-b
Note that ~ o is an initial tree  #a sententiat tree  . The derived trees yi and MR are also sentential trees  , 
We will now define
T ( G ) : The set of all trees derived in G starting from the initial Crees in I  . This set will be called the tree set of G . 
LCG ) : The set of all terminal strings of the trees in TCG  )  . This set will be called the strln ~ language ( or language ) of G . 
The relationship between TAG's CFG's and the corresponding string languages can be summarized as follows  ( Joehl , Levy , and
Takahashl , 1975).
Theorem 2 . 1: For every CFG , G ' , there is an equivalent TAG , G , both weakly and strongly . 
Theorem 2 . 2: For every TAG , G , one of the following statements holds : ( a ) there is a cfg , G ' , that is both weakly and strongly equivalent to G  , ( b ) there is a cfg , G ' , that is weakly equivalent to G but not st rongly equivalent to 
G , Or (3) there is no cfg , G ' , that is weakly equivalent to G . 
Parts ( a ) and ( c ) appear in ( Joshl , Levy , and Takahashl ,  1975) . Part ( b ) is implicit in that paper , but it is important to state It explicitly as we have done here  . For the TAG , G , in Example 2 . 1 , it can be shown that there is a CFG , G ' , such that G " Is both weakly and strongly equivalent to O  . Examples 2 . 2 and 2 . 3 below illustrate parts ( b ) and ( c ) respectively . 
Example 2.2: Let G-(I , A ) be a TAG where

A e
So-'I"$-r~z"IIi",i ~" T "
Some derivations in G.
te .
? ~:-'/ I/O , "1"~,,/, i
O."I""b$!eiO."3".,,.t!e.
/ndi'u ~ iliaide ~ i ? a~i $
Clearly , L(G ) = L = a ' ~ ebe/n ~ /0 , which Isacfl . Thus there must exist a CFG , G ' , whichts at least weakly equivalent to G . It can be shown however that there Is no CFG , G ' , which Is strongly , equivalent to G , l . e . , T ( G ) = T ( G') . This follows from the fact that
T ( G ) , the tree set of G , is " non-recogntzab\]e' , i . e .   , there is no finite state bottom to top automaton that can recognize precisely T  ( G )   . Thus a TAG may generate a cfl , yet assign structural descriptions to the strings that cannot be assigned by any CFG  . 
Example 2 . 3: Let C-(I , A ) be a TAG where "\[: o < d = S
I e
A ; ", d3O-"1-"/1~11~b"I"c
It can be shown that L ( C ) - L1 = we cn/n ~ 0 , w is a string of a ' s and b's such that ( 1  ) the number of a ' s = the number of b's and ( 2 ) for any initial substrlng of w , the number of a ' s ~ the number of b's . Ll can be characterized as follows . We start with the language L = (   ( ba ) " ec~/n ~ 0 . L ! is then obtained by taking strings in L and moving  ( d t s l o c s t t n g ) some a ' s to the left . 
It can be shown that L ! is a strictly context -sens it lve language  ( csl )  , thus there can be no CFG that is weakly equivalent to G  . 
TAG's have more power than CFG's , however , the extra power is quite limited . The language Ll has equal number of a's , b's hadc's ; however , the a's and b's are mixed in a certain way . The Language L2 = a~b~ecn/nO is similar to Li , except that all a ' scome before all b's . TAG's are not powerful to generate L2 . 
The socalled copyinguage L3~wew/w6a , bP also cannot be generated by a TAG . 
The fact that TAG's cannot generate L2 and L3 is important , because it shows that TAG's are only slightly more powerful than CFG's  . The way TAG's acquire this power is linguistically significant  . With some modifications of TAG's or rather the operation of adjoin lnR  , which Is linguistically motivated , it is possible to generate L2 and L3 , but only in some special ways .   ( This modification consists of allowing for the possibility for checkingieft-riRht tree context  ( In terms of a proner analysis ) as well as top-bottom tree context ( in terms of domination ) around the node at which a diunctlonis made . Thls is the notion of local constraints in ( Joshi and Levy , 1981)) . Thus L2 and L3 in some ways characterize the limiting cases of context-sensit llty that can be achieved by TAG's and TAG's with local constraints  . 
In ( Josh I , Levy , and Takahashi , 1975 ) it is also shown that CFL's CTAL's CIL's ~ CSL's  . 
where IL's denotes indexed languages.
3. We will now consider TAG's with links.
The elementary trees ( initial and auxlliar-~"-=-trees ) are the appropriate domains for characteriz ing certain dependencies  . The domain of the dependency is defined by the elementary tree itself  . However , the dependency can be charae Cerlzed explicitly by introducing a special relationship between certains pecLfled pairs of nodes of an elementary tree  . This relationship is pictorially exhibited by an arc  ( a dotted line ) from one node to the oti , er . For example , in the tree below , the nodes labeled B and q are linked , 
A ~- c
I-,,,l':FG'I ~ ~" ~~.--~~=.
We will require the following conditions to hold for all nkIn an elementary tree  . If a node n\[is tlnked to a node n2 then ( 1 ) n2c-commands nl and ( 2 ) nl dominates a null string ( or atem i . alsymbol in the non-linguistic formal grammar examples  )   . 
The notion of a link introduced here is closely related to that of Peters and Rltchie  ( 1982 )  . 
A TAG with links is a TAG where some of the elementary trees ~ y have links as defined above  . Henceforth , we may often refer to a TAG with links as just a TAG  . Links are defined on the elementary trees . However , the important idea is that the composition operation of adjoining will preserve the links  . Links defined on the elementary trees may become stretched as the derivation proceeds  . 
\[ naTAG the dependencies are defined on the elementary trees  ( which are bounded ) and these dependencies are then preserved by the ad ~ olnlng  ( recurslve ) operation . This is how rectlrsion and dependencies are factored in a TAG  . This is in contrast to transformational grammars ( TC ) where recursion is defined in the base and the transformations essentially carry out the checking of the dependencies  . The PiG's and LFG's share this aspect ' of TG , i . e . , tee . talon builds up a set of structures , some of which are filtered out by transfot n ~atlons in a TG  , by the constraints on linking in a PiG , and by the constraints introduced via functional structures in LFG  . In a GPSG on the other hand , recurslon and the checking of the dependencies go hand in hand in a sense  . In a TAG , dependencies are defined initially on bounded structures and recurslon simply preserves chem  . 
In the APPENDIX we have given some examples to show how certain sentences could be deirved in a TAG  . 
Example 2 . 4: Let G = ( I , A ) be a TAG with links where
I e ,
IXi '-, b
IS // I o . . " Sl--r :
Some derivations in G : ! e.
.'I t "" . , , i -, . B . ? OL_'-"%=?f"i/t ', . L . ', . 
5%,,/= o , . o , . e . bb?sO-';I"~,'i . '" l . -Io'ow--o , ebi . ., . . . ., . I
Y ~" S/i/O . ",  . % / i , \' . , - . :,_ . " I = .   .   .   .   .   . 
""-. L ":-' ~
Sc , ,*" I'"l"s-'-.1.~be.
% J : ct~s~e-4l0 ~? and es each have one link . ~% and ~63 show how the linking is preserved in adjoin ing  . In ~ one of the links is stretched . It should be clear now , how , in general , the links will be preserved during the der ivation  . We note in this example that in ~? the dependencies between the a's and theb's as reflected tn the terminal string are proper lynested  , while in ~ two of them are properly nested , and the third one is cross-serlal and it is crossed with respect Co the nested ones  . The two elementary trees / ~ and Ps have only one link each  . The nest tngs and crossings in ~ and ~3 are the result of adjoining . There are two points Conote here: ( I ) TAG's with links can characterize certain c ross-serial dependencies as well as  , of course , nested dependencies .   ( 2  ) The cross-serial dependencies as well as the nested dependencies arise as a resulto f adjoining  . But this is not the only way they can ari s e  . It is possible to have two links in an e lementary tree which represent crossed or nes ted dependencies  , which will then be preserved during the der ivation  . 
It is clear from Example 2 . 4 that the string language of TAG with links is not affected by the links  . Thus if G is a TAG with links . Then L ( G ) -L ( G ' ) where G " is a TAG which is obtained from G by removing all the links in the elementary t rees of G  . The links do not affect the weak generative capacity  . However , they make certain aspects of the structura l description explicit  , which is implicit in the
TAG without the links.
TAG's ( or TAL's ) also have the following three impor~ant proper ties :  ( l ) Limited cross-serial dependencies : Although TAG's permit cross-serial dependencies  , these are restricted . The restriction is that if there are two sets of crossing dependencies  , then they must be either disjoint or one of them must be properly nested inside the other  . 
Hence , languages such as the double copy language , L4-we wew/w ~ a , b ~ or L5 = anb"@dne~/n~\[cannot be generated by TAG's  . For details , see ( Joshi , 1983) . 
(2) Constant . ~ rowth property : In a TAG , G , at each step of the derivation , we have a sentent laltree with the terminal string which is a string in L  ( G )  . As we adjoin an auxiliary tree , we augment the length of the terminal string by the length of the terminal string of  ( not counting the single nonterminal symbol in the frontier of ~  )  . Thus for any string , w , of L(G ) , we have where wgls the terminal string of some initial tree and wg  , l~i ~ m , the terminal string of the \[- th auxiliary tree , assuming there are mauxiliary trees . Thus w is a linear combination of the length of the terminal string o ~ some Inltial tree and the lengths of the terminal strings of the auxiliary trees  . Th ~ constant growth property severely restricts the class of languages generated by TAG's  . 
Hence , languages such as L6 = a ~"/ n ~ lor L8 ~ an %/ n ~\[ cannot be generated by TAG's . 
(3 ) Polynomial pars tn~:TAL's can be parsed in time O ( n  ~ )   ( Joshi and Yokomori ,  1983) . 
Whether or not an O(n5) algorithm exists for
TAL's is not known at present.
3 . A COMPARISION OFGPSG's , TAG's , PFG's , and LFG's WITHRESPECT TO SOME OF THEIRF ORMAL

TABLE I lists ( i ) a set of languages reflecting different patterns of dependencies Chat can or cannot be generated by the different types of grammars  , and ( li ) the three properties
Just mentioned a hove.
As regards the degree of free word order permitted by each grammar  , the languages 1 , 2 , 3 , 4 , 5 , and 6 In TABLEI give some idea of the degree of freedom  . The language in 3 in TABLEI is the extreme case where the a's , b's , and c's can he any order , as long as the number of a ' s = the number of b's = the number of c'S  . GPSG ~ and TAG's cannot generate this language ( although for TAG's a proof is not in hand yet )  , LFG's can generate this language . 
In a TAG for each elementary tree , we can add m are elementary trees , systematically generated from the given tree to provide additional freedom of word order  ( tn asomewhat simllar fashion as in ( Pullum , 1982)) . Since the adjoining operation in a TAG gives some additional power to a TAG beyond chat of a CFG  , this device of augmenting the set of elementary trees should give more freedom  , for example , by allowing some limited scrambling of an item outside of the constituent it belongs co  . Even then a TAG does not seem cobe capable of gener at lng the language in  3 in TABLEI . Thus there is extra freedom but it is quite limited  . 
lwl . , i ' ~ . l ~ " al . lw~i + % ~ w + l + --- . a , . lw . liI
TABLEI
GP SG TAG ( and CFG )   ( with or without local constraints ) 
PLCLFG no yes yes to Language obcalned by s tarting with 
L= ( ba ) n~n/n ~ 1 and then dislocating some a ' s to the lef t  . 
2o Same as I above except that the d i s located a ' s a re to the le f t o f a l l b ' s  .   . 
3 . L = w/w is string of equal number of a's , b's and noc's but mixed in any order 4? L = x~y/n~l , x , y are string s of a ' s and b * s such that the number of a ' sinx and y = the number of b's in x and y-n  5  . Same as above except that the length of x = length of y  . 
6 . L = w ~/ n~t , w is string of a ' s and b's and the number of a ' sinw = the number of b's in w-n  7  . L = a ~ b " c " In~l ) 8 . Lfanb ~ cnd "/ n~t 9 . L = a~b ~ ~ d " ~ e/n 71
IO . L = ww/w is string of a ' s and b's ( copy language )  11 . L = ( ww wl w is string of a ' s and b's ( double copy language )  12 . L = i a ~ cTMb ~ dm/m ~ l,n ~1 13 . L = a ~ ~ cW/n~1,p~n ) 14 . L-a ~ In ~ It 15 . L-anz/n~1 16 . Limited cross-serial dependencies . 
17 . Constant growth property 18 . Polynomial parsing no yes yes yes no ( ? ) no no yes no yes no ( ?  ) no yes yes (  ?  ) no yesnonoyes no nononoyes yes ( ?  ) no no ? no no no (  ?  ) no yes ? no no no (  ?  ) no no no (  ?  ) no yes ? yes yes (  ?  ) yes yes ? yes yes yes ( ?  ) yes ( ?  ) yes yes yes yes ? yes <? ) yes yes no ( ?  ) no no ( ?  ) Notation : ?: answer unknown to the author , yes ( ?  ) : conjectured yes no ( ?  ) : conjectured no . 

REFERENCES\[\[\]Gazdar,G . ,"Phrase structure grammars " in The Nature of Syntactic Representations  ( eds . 
P . Jacobson and G . K . Pullum ), D . Reidel,
Dordrecht , ( to appear).
\[2\] Joshi , A . K . and Levy , L . S . ,"Phrase structure trees bear more fruit than you would have thought "  , AJCL ,  1982 . 
\[3\] Joshl , A . K . , Levy , L . S . , and Takahashi , M . , " Tree adjunct grammars ", Journal of the
Computer and System Sciences , 1975.
\[4\] Josht , A . K . ,"How much context - sens i t iv i ty Is requ i red to prov ide adequate structural descrlpclons ?"  , in Natural language processing : Psycholln ~ ulstic  , -- Theoretical , and Computational Perseptives , ( edso Dowry , O . , Karttunen , L . , and Zwicky , A . ), Cambridge University Press , ( to appear) . 
\[5\] Joshl , A . K . and Yokomorl , T . , " Parsln8 of tree adjoining grammars ", Tech . Rep . 
Department of Computer and Information Science,
University of Pennsylvanla , 1983.
\[6\] Joshl , A . K . and Kroch , T . , " Linguistic slgniflcance of TAG's " ( tentative title )  , forthcomlng . 
\[7\] Kaplan R . and Bresnan J . W . , " Lexlcal funct iona l grammar-s formal system for grammatical representation "  , in The Mental Representation of Grammatical Relatlons ~ ed  . 
Bresnan , J .), MIT Press , 1983.
\[8\] Peters , S . and Ritchte , R . W . , " Phrase linking grammars ", Tech . Rep . University of Texas at Austin , Department of Linguistics ,  1982 . 
\[9\] Pullum , G . K . ,"Free word order and phrase structure rules " , in Proceeding of NELS\[_~2 ( eds . Puste . ovsky , J . and Sells , P .  ) ,
Amherst , MA , 1982.

We will give here some examples to show how certain sentences could be derived in a TAG  . 
For further details about thlsTAG and its linguistic relevance  , see ( Joshi , 1983 and Joshl and Kroch , forthcoming ) . Only the releva-~trees of the TAG , G-(I , A ) are shown below . The following points are worth noting : ( 1 ) In a TAG the derivation starts with an initial tree  . The appropriate lexlcal insertions are made for the Inlt laltree and the corresponding constraints as specified by the lexicon can be checked  ( e . g . , agreement and subcacegorizacion ) . Then as the derivation proceeds , as each auxiliary tree is brought into the derivation  , the appropriate lexical items are inserted and the constraints checked  . Thus in a TAG , lexical insertion goes hand in hand with the derivation  . 
(2) Each one of the two finite sets , I and A can be quite large , but these sets need not be expll cltely listed . The crees in\[roughly correspond to all the " minimal ' sentences corresponding to different subcategorlzation frames together with the " transforms " of these sentences  . We could , of course , provide rules for obtaining the trees in I from a given subset of I  . These rules achieve the effect of conventional transformational rules  , however , these rules can be formulated not as the usual transformational rules but directly as tree rewriting rules  , since both the domains and the co-domains of the rules are finite  . 
Introduction of links can ~ , ~ considered as a part of this rewriting . In any case , these rules will be abbreviatory in the sense Chat they will generate only finite sets of trees  . 
Their adoption will be only a matter of convenience and does not affect the TAG in any essential ~ nner  . The set of auxiliary trees is also finite . Again these trees could themselves be " derived " from the corresponding trees in I by introduc ing appropriate tree rewrltlng rules  . 
Again these rules will be abbrevlacory only as discussed above  . It is in this sense that the trees in I and A capture the usual transformational relations more or less directly  . 
Some derivations : ( l ) The girl who met8ill is a senior . 
We start with the inlttal tree ~ with the appropriate texlcal insertions  . 
S~--z ..--~/ PVP ~ re~v~P
II ; ~/~-' tke . ~; ~ Io..


Se . .n , ' ~? insertions ) to ~ at the indicated node in ~ , ve obtain ~ I . 
/"\ Z . ~ ' , /\ eVNP ) kipv ~'% ~ i ~ i1/\ ,   , INt "
IIi VIvp'.
ltlll ) II ! 4i--Z . _llklmeeI,'i l~i ~ llii . .-' ? " rl , ,t ~ i~i i i k , Imlit I ; lli0 , il ~ ilr(2) John persuaded Bill to invite Hary . 
N9, ~ p /. ~, tim " Tovl ?
V x P
II inv ; teI
Ad ~ otn in ~/ ~ ro ~" . 1 at the tn dit ' ~ a ted node in ~ . lr , ~ ohtain Yi " ~ JP ' 4p
I/\~#t , i ; , ,'11 ~ ii , ~' ll~ellitieiLll'lltI/t ~_\] /I  , "/~_'~~' o ~'" I ~ . ; II\%/"'tI-'Iril,~i ~ i ) fro .   .   .   . " V~P
II ~ , i ~ l't ti ( 3 ) Nhodid John persua de Bill to invite ? ~ l ~ oI i-  . . 3 44 \  . S "/'' x'''~vI/\~,~a To V ?
V ,' SAP"~,I" . I ?"% i'l ' lll'fl ~ " Ad ~ ointng ~ J to ~ C % at the indicated node in IC ~ L  , we obtain y ~ .   . 
?3 oNP ~?/~~
IvNPra't " " ~' ak , , ldp ~ v . fu . , ll ; r~?tl . S "",/~- AP/,ili~lle ' . , i ?,, a/~--~'~--:
I-~~V ~ P , ' ~ peY ~ . ,~ . \[', mov,'h@"-GIll) .   .   , I " , I it is " stretched'result in 8 in the so-called unbounded dependency . 
(&) John tried to please Mary.
i ", ._-
NP vpl/~-~o1-o ,,/ P'
VNP
On the other hand (5) john seems to like Mary . could be derived as follows . We will start with ~#~ . 
/ ~ . Sz "- z--~"~PV?-r~vf/\:T ~ , 4 UP\[i

AdJ ? inin8   J7 ~ o ~ at the indicated node in Y ~ we obtain ~ l "~' r =  ,  ~4
It/tHr " vP ' lI/'~'\-t . i ~'~ j~i'~f ~"~?~ .   . ?- to VP ~ ei \
VNP
AdJoin in ~ ~ M to Y ~ . at the indicated node in ~'* t , we obtain ~* ~ . 


Io / ~..! mVYP
I"ii!/~wP
Ir ~ A  ~
JaQm~-tol(ka /, 4 oP . ~
