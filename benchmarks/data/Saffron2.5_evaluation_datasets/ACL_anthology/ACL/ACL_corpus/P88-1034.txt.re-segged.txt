COMBINATORY CATEGORIAL GRAMMARS : GENERATIVE POWER AND 
RELATIONS HIPTOLINE ARCONTEXT-FREEREWRITING SYSTEMS " 
David J . Weir Aravind K . Joshi
Department of Computer and Information Science
University of Pennsylvania
Philadelphia , PA 19104-6389
Abstract
Recent results have established that there is a family of languages that is exactly the class of languages generated by three independently developed grammar formalisms : Tree Adjoining Grammm ~  , Head Grammars , and Linear Indexed Grammars . In this paper we show that Combinatory Categorial Grammars also generates the same class of languages  . We discuss the slruclm ' al descriptions produced by Combinawry Categorial Grammars and compare them to those of grammar formalisms in the class of Linear ContextFree Rewriting Systems  . We also discuss certain extensions of Comb in a Wry Categorial Grammars and their effect on the weak generative capacity  . 
1 Introduction
There have been a number of results concerning the relationship between the weak generative capacity  ( family of string languages ) associated with different grammar formalisms ; for example , the the cxem of Oaifman , et al \[3\] that Classical Categorial Grammars are weakly equivalent to ContextFree Grammars  ( CFG's )  . Mote recently it has been found that there is a class of languages slightly larger than the class of ContextFree languages that is generated by several different formalisms  . In pardodar , Tree Adjoining Grammars ( TAG's ) and Head Grammars ( HG's ) have been shown to be weakly equivalent\[15\] , and these formalism are also equivalent to a reslriction of Indexed Grammars considered by Gazdar  \[6\] called Linear In-dexed Grammars ( LIG's )  \[13\] . 
In this paper , we examine Combinatory Categorial Grammars ( CCG's )  , an extension of Classical Categorial Grammars developed by Steedman and his collaborators  \[1  , 12 , 9 , 10 , 11\] . The main result in this paper is * This work was partially mpported by NSF gnmts  MCS-82-19116-CER   . MCS-82-07294 , DCR-84-10413 , ARO grant DAA29-84-9-0027 . 
and DARPAgnmt N0014-85-K0018 . We are very grateful to Mark Steedmm , \] C Vijay-Shanker and RemoPare ~: hi for helpful disctmiem  . 
that CCG's are weakly equivalent to TAG's , HG's , and LIG's . We prove this by showing in Section 3 that Combinatory Categorlal Languages ( CCL's ) are included in Linear Indexed Languages ( LIL's )  , and that Tree Adjoining Languages ( TAL's ) are included in CCL's . 
After considering their weak generative capacity , we investigate he relationship between the struclzwal descriptions produced by CCG's and those of other grammar formalisms  . In \[14\] a number of grammar formalisms were compared and it was suggested that an important aspect of their descriptive capacity was reflected by the derivation structures that they produced  . Several formalisms that had previously been descn2~d as mildly context-sensitive were found to share a number of properties  . In particular , the derivations of a grammar could be repre -senled with trees that always formed the tree set of a contextfree grammar  . Formalisms that share these properties were called Linear ContextFree Rewriting Systems  ( ' LCFRS's )  \[14\] . 
On the basis of their weak generative capacity , it appears that CCG's should be classified as mildly context-sensitive  . In Section 4 we consider whether CCG's should be included in the class of LCFRS's  . The derivation treesets traditionally associated with CCG's have Context-free path sets  , and are similar to those of LIG's , and therefore differ from those of LCFRS's . This does not , however , nile out the possibility that there may be alternative ways of representing the derivation of CCG's that will allow for their classification as LCP'RS's  . 
Extensions to CCG's have been considered that enable them to compare two unbounded sU ' uctures  ( for example , in\[12\]) . It has been argued that this may be needed in the analysis of certain coordination phenomena in Dutch  . 
In Section 5 we discuss how these additional features increase the power of the formalism  . In so doing , we also give an example demonstrating that the Parenthesis-free Categorial Grammar formalism  \[5  , 4\] is moze powerful that CCG's as defined here . Extensions to TAG's ( Multicomponent TAG ) have been considered for similar the relationship between the extension of CCG's and Mul -ticomponent TAG  . 
2 Description of Formalisms
In this section we describe Combinatory Categorial Grammars  , Tree Adjoining Grammars , and Linear Indexed

2.1 Combinatory Categoriai Grammars
Combinatory Categorial Grammar ( CCG ) , as defined here , is the most recent version of a system that has evolved in a number of papers  \[1  , 12 , 9 , 10 , 11\] . 
ACCG , G , is denoted by ( V T , VN , S , f , R ) where VT is a finite set of terminals ( lexical items )  , VN is a finite set of nonterminals ( atomic categories )  , 
S is a distinguished member of VN , f is a function that maps elements of VTU e to finite subsets of C  ( VN )  , the set of categories * , where
VNg C(VN ) and if CI , C2 eC ( VN ) then ( el/c2 ) EC ( VN ) and ( c1\c2 ) EC ( VN )  . 
R is a finite set of combinatory rules , described below . 
We now give the combinatory rules , where z , y , z are variables over categories , and each Ii denotes either \ or / . 
1 . forward application : 2 . backward application : u(z\u)- . z3 . generaliT ~ dforward composition for some n_>1: (  . . . I . z . ) -  . 
4 . generalized backward composition for some nE1: (  . . . ( yll~x ) 12 . . . I -=-)(~\~)--'(-- . (~11 = x ) 12 . . . I ~ z . ) z Note that f can assign categoric8 to the empty suing ,  ~ , though , to our knowledge , this feature has not been employed in the linguistic applications ? ~ C'CG  . 
Restrictions can be associated with the use of the combinatory rule in R  . These restrictions take the form of conswaints on the instantiations of variables in the rules  . 
These can be constrained in two ways.
1 . The initial nonterminal of the category to which z is instantiated can be restricted  . 
2 . The entire category to which y is instantiated can be resuicted  . 
Derivations in a CCG involve the use of the combinatory rules in R  . Let the derives relation be defined as follows . 
~c  ~ F  ~ clc2~ if R contains a combina wry rule that has czc2 --* cas an instance , and a and ~ are ( possibly empty ) strings of categories . The string languages , L(G ), generated by a
CCG , G ', is defined as follows.
al ...
c,~f(aO,a,~VTU~,1_<i_<.
Although there is no typeraising rule , its effect can be achieved to a limited extent since f can assign type-raised categories to lexical items  , which is the schemem ployed in Steedman's recent work  . 
2.2 Linear Indexed Grammars
Linear Indexed Grammars ( LIG's ) were introduced by Gazdar\[6\] , and are a restriction of Indexed Grammars introduced by Aho  \[2\]  . LIG's can be seen as an extension of CFG's in which each nonterrninal is associated with a stack  . 
AnLIG , G , is denoted by G = ( V j v , VT , Vs , S , P ) where
VNiS a finite set of nontenninals,
VT is a finite set of terminals,
Vs is a finite set of stack symbols,
SEVN is the start symbol , and
P is a finite set of productions , having the form
A\[\]-
A\[ . .1\] -* A I \ [ \ ] .   .   . Ai\["\] .   .   . A .  \ [ \ ]
A\[ . .\]--a~\[\] . . . Ad . .t\] . . . A . \[\] where At .   .   .   . A . EVN , lEVs , and a EVTO ~ . 
The notation for stacks uses \[ . ?/\] to denote an arbi-Wary stack whose top symbol is I  . This system is called L/near Indexed Grammars because it can be viewed as a nonterminals on the right-hand-side of a production can inherithe stack from the left-hand-side  . 
The derives relation is defined as follows.
~ A\[Z , , . . . ht\]~~~~A,\[\] . . . A ,\[ Z , , . . . t ~\] . ., a , \ [ \ ]~ if A \[ . . l \] - .  ~,\[\]  .   .   . A , \[ .   .  \]  .   .   . A,\[\]~PotA\[lm . ., l l \]~ o =~ aA l \ [ \ ] .   .   . Ai\[lm . . . ill \] .   .   . An\[\]/~ifA\[ . .\] -- . A , \[\] .   .   . A , \[- . Z \] . . . A , ,\[\] ~ P : c , a\[\]a ~ , maifA\[\]-- . a ~ P
The language , L(G ), generated by G is 2 . 3 Tree Adjoining Grammars ATAG\[8 , 7\] is denoted G = ( VN , VT , S , I , A ) where
VN is a finite set of nontennlnals,
VT is a finite set of terminals,
S is a distinguished nonterminal,
I is a finite set of initial trees and
A is a finite set of auxiliary trees.
Initial trees are rooted in S with wEV ~ on their frontier  . Each internal node is labeled by a member of

Auxiliary trees have tOlAW2 EV'~VNV ~ oll their frontier . The node on the frontier labeled A is called the foot node  , and the root is also labeled A . Each internal node is labeled by a member of VN . 
Trees are composed by tree adjunction . When a tree 7' is adjoine data node ~/ in a tree . y the tree that results ,  7 , ' , is obtained by excising the subtree undert/from and inserting  7' in its place . The excised subtree is then substituted for the foot node of  3  /  . This operation is illustrated in the following figure  . 
~':$ r '." x
Y ": s
Each node in an auxiliary tree labeled by a nonterminal is associated with adjoining constraints  . These constraints specify a set of auxiliary trees that can be adjoined at that node  , and may specify that the node has obligatory adjunction  ( OA )  . When no tree can be adjoined at a node that node has a null adjoining  ( NA ) constraint . 
The siring language L(G ) generated by a TAG , G , is the set of all strings lYing on the frontier of some tree that can be derived from an initial trees with a finite number of adjunctions  , where that tree has no OA constraints . 
3 Weak Generative Capacity
In this section we show that CCO's are weakly equivalent to TAG's  , HG's , and LIO's . We do this by showing the Inclusion of CCL's in L1L's   , and the inclusion of TAL's in CCL's . It is know that TAG and LIG are equivalent\[13\] , and that TAG and HG are equivalent\[15\] . Thus , the two inclusion shown here imply the weak equivalence of all four systems  . We have not included complete details of the proofs which can be found in  \[16\]  . 
3.1 CCL's CLIL's
We describe how to construct a LIG , G ' , from an arbitrary CCG , G such that G and G ' are equivalent . Let us assume that categories m-ewritten without parentheses  , tm less they are needed to override the left associativity of the slashes  . 
A category c is minimally parenthesized if and only if one of the following holds  . 
c = A for AEVN c = (* oll*xl2 . . . I , , c , ,) , for ,  >_ 1 , where CoEVN and each c ~ is minimally parenthesize ~ It will be useful to be able to refer to the components of a category  , c . We first define the immediate components of c . 
280 when c = A the immediate component is A , when c = ( col : xh . . . I . c . ) the immediate components are co , cl, . ??, e . ,, . 
The components of a category care its immediate components  , as well as the components of its immediate components  . 
Although in CCG's there is no bound on the number of categories that are derivable during a derivation  ( categories resulting from the use of a combinator yule  )  , there is a bound on the number of components hat derivable categories may have  . This would no longer hold if unrestricted typeraising were allowed during a derivation  . 
Let the set Dc(G ) he defined as follows.
cED e ( G ) if c is a component of d where c'E f ( a ) for some a EVT U e . 
Clearly for any CCG , G , Dc(G ) is a finite set . Dc ( G ) contains the set of all derivable components because for every category e that can appear in a sentential form of a derivation in some CCG  , G , each component of c is in Dc(G ) . This can be shown , since , for each combinatory rule , ff it holds of the categories on the left of the rule then it will hold of the category on the right  . 
Each of the combinatory rules in a CCG can be viewed as a statement about how a pair of categories can be combined  . For the sake of this discussion , let us name the members of the pair according to their role in the rule  . 
The first of the pair inforward rules and the second of the pair in backward rules will be named the primary category  . The second of the parr in forward rules and the first of the pair in backward rules will be named the secondary category  . 
As a resuit of the form that combinatory rules can take in a CCG  , they have the following property . When a combinator yule is used , there is a bound on the number of immediate components that he secondary categories of that rule may have  . Thus , because immediate constituents must belong to De ( G )   ( a finite set )  , there is a bound on the number of categories that can fill the role of secondary categories in the use of a combinator yule  . Thus , the ae is a bound on the number of instantiations of the variables y and zi in the combinator yules in Section  2  . 1 . The only variable that can be instantiated to an unbounded number of categories iz  . Thus , by enumerating each of the finite number of variable bindings for y and each z ~  , the number of combinator yules in R can be increased in such a way that only x is needed  . Notice that z will appears only once on each side of the rules  ( Le , they are linear ) . 
We are now in a position m describe how to represent each of the combinator yules by a production i the LIG  , G ' . In the combinator yules , categories can be viewed as stacks since symbols need only be added and removed from the right  . The secondary category of each rule will be a ground category : either A  , or ( AIlcl\[2 . . . \[ ncn ), for some n >__ I . These can be represented in a LIG as A\[\] or A\[hCl\[2  . . . In Ch\], respectively . The primary category in a combinatory ule will be unspecified except for the identity of its left and rightmost immediate components  . 
Its leftmost component is a nonterminal , A , and its rightmost component is a member of De ( G )   , c . This can be represented in a LIG by A\[ . . el . 
In addition to mapping combinator yules onto productions we must include productions in G ' for the mappings from lexical items  . 
If cEf ( a ) where a EVT U e then if e = A then A\[\] . . . * aEP if c -'( ahcll 2 .   .   . I , c , ) then
A\[llC112.."\]nO n\].-o , ae P
We are assuming an extension of the notation for productions that is given in Section  2  . 2 . Rather than adding or removing a single symbol from the stack  , a fixed number of symbols can be removed and added in one production  . Furthermore , any of the nonterminals on the right of productions can be given stacks of some fixed size  . 
3.2 TAL's CCCL's
We briefly describe the construction of a CCG , G ' from a TAG , G , such that G and G ' are equivalent . 
For each nonterminal , A of G there will be two nonterminals A ? and Ac in G '  . The nonterminal of G ' will also include a nonterminal A i for each terminal ai of the TAG  . 
The terminal alphabets will be the same . The combinatory rules of G ' are as follows . 
Forward and backward application are restr icted to cases where the secondary category is some X ~  , and the left immediate component of the primary category is some Y ?  . 
Forward and backward composition are restricted to cases where the secondary category has the form  ( ( XChcl ) \[2c2 )  , and the left immediate component of the primary category is some Y % An effect of the restrictions on the use of combinatory rules is that only categories that can fill the secondary ole during composition are categories assigned to terminals by f  . Notice that the combinator yules of G ' depend only are independent of the elementary trees  . 
f is defined on the basis of the auxiliary trees in G  . 
Without loss of generality we assume that the TAG , G , has trees of the following form . 
I contains one initial tree : $ OA

Thus , in considering the language derived by G , we need only be concerned with trees derived from auxiliary trees whose root and foot are labeled by S  . 
There are 5 kinds of auxiliary trees in A.
1. For each tree of the following form include
A"/Ca/B~~f(e ) and A ?/ C*/B+~f(O
ANA
BOACOA
II
AI~e2 . For each tree of the fonowing form include
Aa\Ba/C ? Ef(e ) and A?\Ba/C ? Ef(e)
ANA
BOACOA
II
ANA3. For each tree of the following form
Aa/B ?/ Ce . Ef(e ) and Ae/Be/C ? Ef(e)


BOA



ANA include 4 . For each tree of the following form include A ?\ AI Ef  ( e )  , A*\AIEf(e ) and A , E f(a , )
ANAalANA 5 . For each tree of the following form include A ?/ AiEf  ( e )  , AC/AiEf(e ) and AiEf(al )

ANA ai
The CCG , G ' , in deriving a string , can be understood as mimicking a derivation in G of that suing in which trees are adjoined in a particular order  , that we now describe . 
We define this order by describing the set , 2~(G ) , of all trees produced in i or fewer steps , for i >_0 . 
To(G ) is the set of auxiliary trees of G.
TI ( G ) is the union of T~_x ( G ) with the set of all trees 7 produced in one of the following two ways . 


Let 3/ and 7" be trees in T~-I ( G ) such that there is a unique lowest OA node , I ? , in 7' that does not dominate the foot node , and 3/' has no OA nodes . 7 is produced by adjoining 7" at in 7' . 
Let 7' be trees in T~-I ( G ) such that there is OA node ,  7 , in 7' that dominates the foot node and has no lower OA nodes  .   7 is pmduce A by adjoining an auxiliary tree ~ at 17 in 7'-Each tree 7 E 2~  ( G ) with frontier w iAw2 hast be property that it has a single spine from the root to a node that dominates the entire string  wlAw2  . All of the OA nodes remaining in the tree fall on this spine  , or hang immediately to its right or left . For each such tree 7 there will be a derivation tree in a ' , whose root is labeled by a ca~gory c and with f rontier to  1W2  , wher ~ cencodes the remaining obligatory adjunctions on this spine in  7  . 
Each OA nodes on the spine is encoded in c by a slash and nonterminal symbol in the appropriate position  . Suppose the OA node is labeled by some A . When the OA node falls on the spine c will contain /  . 4 ?  ( in this case the direction of the slash was arbiwarfly chosen to be forward  )  . When the OA node faUs to the left of the spine c will contain \ A % and when the OA node fall ~ to the right of the spine c will contain/A ?  . For example , the following tree is encoded by the category A\A ~/ AI/A ~\ A ~ i 
AIOAA2OA/\
Wlw2
We now give an example of a TAG for the language a " bnIn >_  0 with crossing dependencies . We then give the CCG that would be produced according to this construction  . 
SNA
S10AS2OA
II?SNA


SOA
I $30 A
I$2 NA
SINA$3 NAaSINAS 3NAb
NA ? SNAs'\s ~/ s~~f(Os'\sf/s~~f(O
S ~\ A ~ f(OS~\A ~ f(O
Aef (~) B~f ( b)
Sa\S , 6f (?) S ?\ S , 6f (?)
S , Ef (6) 4 Derivations Trees
Vijay-Shanker , Weir and Joshi \[14\] described several properties that were common to various conswained grammatical systems  , and defined a class of such systems called Linear ContextFree Rewriting Systems  ( LCFRS's )  . LCFRS's are constrained to have linear nonerasing composition operations and derivation trees that are structurally identical to those of contextfree grammars  . The intuition behind the latter restriction is that the rewriting  ( whether it be of strings , trees or graphs ) be performed in a contextfree way ; i . e . , choices about how to rewrite a structure should not be dependent on an unbounded amount of the previous or future context of the derivation  . Several wen-known formalisms fall into this class including ContextFree Grammars  , Generalized Phrase Structure Grammars ( GPSG ) , Head Grammars , Tree Adjoining Grammars , and Multicomponent Tree Adjoining Grammars . In \[14\] it is shown that each formalism in the class generates scmilinear languages that can be recognized in polynomial time  . 
In this section , we examine derivation trees of CCG's and compare them with respect to those of formalisms that are known to be LCFRS's  . In order to compare CCG's with other systems we must choose a suitable method for the representation f derivations in a CCG  . In the case of CFG , TAG , HG , for example , it is fairly clear what the elementary structures and composition operation should be  , and as a result , in the case of these formalisms , it is apparent how to represent derivations . 
The traditional way in which derivations of a CCG have been represented has involved a binary tree whose nodes are labeled by categories with annotations indicating which combinatory ule was used at each stage  . These derivation trees are different from those systems in the class of LCFRS's in two ways  . They have contextfree path sets , and the set of categories labeling nodes may be infinite  . A property that they share with LCFRS's is that there is no dependence btween unbounded paths  . In fact , the derivation trees sets produced by CCG's have the same properties as those produced by LIG's  ( this is apparent from the construction i Section 3A  )  . 
Although the derivation trees that are traditionally associated with CCG's differ from those of LCFRS's  , this does not preclude the possibility that there may be an alternative way of representing derivations  . What appears to be needed is some characterization fCCG's that identities a finite set of elementary structures and a finite set of composition operations  . 
The equivalence of TAG's and CCG's suggests one way of doing this  . The construction that we gave from TAG's to CCG's produced CCG's having a specific form which can be thought of as a normal form for CCG's  . We can represent the derivations of grammars in this form with the same tree sets as the derivation tree sets of the TAG from which they were constructed  . Hence CCG's in this normal form can be classified as LCFRS's  . 

TAG derivation trees encode the adjanction of specified elementary trees at specified nodes of other elementary trees  . Thus , the nodes of the derivation trees are labeled by the names of elementary trees and tree addresses  . In the construction used in Section 3 . 2 , each auxiliary tree produces assignments of elementary categories to lexicai items  . CCG derivations can be represented . with trees whose nodes identify elementary categories and specify which combinatory rule was used to combine it  . 
For grammars in this normal form , a unique derivation can be recovered from these trees  , but this is not true of arbitrary CCG's where different orders of combination of the elementary categories can result in derivations that must be distinguished  . In this normal form , the combinatory rules are so restrictive that there is only one order in which elementary categories can be combined  . Without such restrictions , this style of derivation tree must encode the order of derivation  . 
5 Additions to CCG's
CCG's have not always been defined in the same way . 
Although TAG's , HG's , and CCG's , can produce the crossing dependencies appearing in Dutch  , two additions to CCG's have been considered by Steedman in  \[12\] to describe certain coordination phenomena occurring in Dutch  . For each addition , we discuss its effect on the power of the system . 
5.1 Unbounded Dependent Structures
A characteristic feature of LCFRS's is that they are unable to produce two structures exhibiting an unbounded dependence  . It has been suggested that this capability may be needed in the analysis of coordination in Dutch  , and an extension of CCG's has been proposed by Steedman  \[12\] in which this is possible . The following schema is included . 
X * CO nj x ~ x where , in the analysis given of Dutch , z is allowed to match categories of arbitrary size  . Two arbitrarily large structures can be encoded with two arbitrarily large categories  . This schema has the effect of checking that the encodings are identical The addition of rules such as this increases the generative power of CCG's  , e . g . , the following language can be generated . 
( wc ) " I wea , b ?
In giving analysis of coordination in languages other than Dutch  , only a finite number of instances of this schema are required since only bounded categories are involved  . 
This form of coordination does not cause problems for 

5.2 Generalized Composition
Steedman \[12\] considers a CCG in which there are an inf~te number of composition rules for each n_>  1 of the form ( ~ lv )   (  . . . ( vhz ~) l ~ . . . I . z . ) -(-  .   . ( ~ l : dln- . . I , z , ) ( .   .   . ( Vll Zl)l, .   .   . I,z , )(~\ y ) -"( .   .   .  (~1:012  .   .   . I , z ,   ) This form of composition is permitted in Parenthesis-free Categorial Grammars which have been studied in  \[5  , 4\] , and the results of this section als0 apply to this system . 
With this addition , the generative power of CCG's increases . We show this by giving a grammar for a language that is known not to be a Tree Adjoining language  . Consider the following CCG . We allow um~stricted use of arbitrarily many combinatory rules for forward or backwards generalized composition and application  . 
f(e ) = s/(al ) = At . ~ ( a2 ) = A2f ( Cl ) = S\A I/D 1/S\B If ( c2 ) -- S\A 21 D21 S\B2 f ( bx ) = Bxf ( b2 ) '- B2f ( dl ) = DIf ( d2 ) = D2 When the language , L , generated by this grammar is intersected with the regular language we get the following language  . 
nl ~3   ~1 ftl ft2 f t 3   2   1 aIG 2 bIC 1 b 2 C 2   d~2 d~lInl , n 2    0 The pumping lemma for Tree Adjoining Grammars \[13\] can be used to show that this is not a Tree Adjoining Language  . Since Tree Adjoining Languages are closed under intersection with Regular Languages  , L cannot be a Tree Adjoining Language it her . 
6 Conclusions
In this paper we have considered the string languages and derivation trees produced by CCL ' s  . We have shown that CCG's generate the same class of string language smally associated with CCG's are found to be the same as those of LIG's  . They have contextfree path sets , and nodes labeled by an unbounded alphabo LA consequence of the proof of equivalence with TAG is the existence of a normal form for CCG's having the property that derivation trees can be given for grammars in this normal form that are structurally the same as the derivation trees of CFG's  . The question of whether there is a method of representing the derivations of arbitrary CCG's with tree sets similar to those of CFG's remains open  . Thus , it is unclear , whether , despite their restricted weak generative power , CCG's can be classified as LCFRS's . 
References\[1\]A . E . Ades and M . J . Steedman . On the order of words . Ling . a . nd Philosophy , 3:517-558, 1982 . 
\[2\]A . V . Aho . Indexed grammars -- An extension to contextfree grammars  . J . ACM , 15:647--671, 1968 . 
\[3\]Y . Bar-Hillel , C . Gaifman , and E . Shamir . On categorial and phrase structure grammars . In Language and Information , Addison-Wesley , Reading , MA ,  1964 . 
\[4\] J . Friedman , D . Dai , and W . Wang . The weak generative capacity of parenthesis-free categorial grammars  . In 11th Intern . Conf . on Comput . Ling . , 1986 . 
\[5\] J . Friedman and R . Venkatesan . Categorial and Non-Categorial languages . In 24 Ch meeting Assoc . Corn-put . Ling . , 1986 . 
\[6\]G . Gazdar . Applicability of Indexed Grammars to Natural Languages  . Technical Report CSLI-85-34 , Center for Study of Language and Information ,  1985 . 
\[7\]A . tLJoshi . How much context sensitivity is nee-essary for characterizing su'ucm  . , ~ descriptions Tree Adjoining Grammars . In D . Dowry , L . Karttunen , and A . Zwieky , editors , Natural Language Processing ~ Theoretical , Computational and Psychological Perspective , Cambridge University Press , New York , NY ,  1985 . Originally presented in 1983 . 
\[8\]A . K . Joshi , L . S . Levy , and M . Takahashi . Tree adjunct grammars . J . Comput . Syst . Sci . , 10(1), 1975 . 
\[9\] M . Steedman . Combinators and grammars . In R . 
Oehrle , E . Bach , and D . Wheeler , editors , Categorial Grammars and Natural Language Structures  , For is , 
Dordrecht , 1986.
\ [1o  \]  \[11\]   \[12\]   \[13\]   \[14\]   \[15\]   \[16\] M . Steedman . Combinatory grammars and parasitic gaps . Natural Language and Linguistic Theory , 1987 . 
M . Steedman . Gapping as constituent coordination . 
1987. m.s . University of Edinburgh.
M . J . Steexlman . Dependency and coordination i the grammar of Dutch and English  . Language , 61:523-568, 1985 . 
K . Vijay-Shanker . A Study of Tree Adjoining Grammars . PhD thesis , University of Pennsylvania,
Philadelphia , Pa , 1987.
K . Vijay-Shankcr , D . L Weir , and A . K . Joshi . Characterizing structural descriptions produced by vari-ons grammatical formalisms  . In 25th meeting Assoc . 
Comput . Ling ., 1987.
K . Vijay-Shanker , D . J . Weir , and A . K . Joshi . Tree adjoining and head wrapping . In 11th International
Conference on Comput . Ling ., 1986.
D . J . Weir . Characterizing Mildly Context-Sensitive Grammar Formalisms  . PhD thesis , University of Pennsylvania , Philadelphia , Pa , in prep . 

