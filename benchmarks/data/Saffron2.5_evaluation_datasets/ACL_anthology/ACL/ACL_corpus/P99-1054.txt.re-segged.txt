Efficient probabilistic topdown and left-corner parsing t 
Brian Roark and Mark Johnson
Cognitive and Linguistic Sciences
Box 1978, Brown University
Providence , RI 02912, USA
brian-roark@brown , edumj@cs.brown , edu
Abstract
This paper examines efficient predictive broadcoverage parsing without dynamic programming  . In contrast to bottom-up methods , depth-first op-down parsing produces partial parses that are fully connected trees spanning the entire left context  , from which any kind of nonlocal dependency or partial semantic interpretation can in principle be read  . We contrast two predictive parsing approaches , topdown and left-corner parsing , and find both to be viable . In addition , we find that enhancement with nonlocal information ot only improves parser accuracy  , but also substantially improves the search efficiency  . 
1 Introduction
Strong empirical evidence has been presented over the past  15 years indicating that the human sentence processing mechanis makes online use of contextual information i the preceding discourse  ( Crain and Steedman , 1985; Altmann and Steedman , 1988; Britt ,  1994 ) and in the visual environment ( Tanenhaus et al ,  1995) . 
These results lend supporto Mark Steedman's ( 1989 ) " intuition " that sentence interpretation takes place incrementally  , and that partial interpretations are being built while the sentence is being perceived  . This is a very commonly held view among psycholinguists today  . 
Many possible models of human sentence processing can be made consistent with the above view  , but the general assumption that must underlie them all is that explicit relationships between lexical items in the sentence must be specified incrementally  . Such a processing mecha-t This material is based on work supported by the National Science Foundation under Grant No  . SBR-9720368 . 
nismstands in marked contrasto dynamic programming parsers  , which delay construction of a constituent until all of its subconstituents have been completed  , and whose partial parses thus consist of disconnected tree fragments  . For example , such parsers do not integrate a main verb into the same tree structure as its subject NP until the VP has been completely parsed  , and in many cases this is the final step of the entire parsing process  . Without explicit online integration , it would be difficult ( though not impossible ) to produce partial interpretations online . 
Similarly , it may be difficult to use nonlocal statistical dependencies  ( e . g . between subject and main verb ) to actively guide such parsers . 
Our predictive parser does not use dynamic programming  , but rather maintains fully connected trees spanning the entire left context  , which make explicit the relationships between constituents required for partial interpretation  . 
The parser uses probabilistic bestfirst parsing methods to pursue the most likely analyses first  , and a beam search to avoid the non-termination problems typical of nonstatistical topdown predictive parsers  . 
There are two main results . First , this approach works and , with appropriate attention to specific algorithmic details  , is surprisingly efficient . Second , not just accuracy but also efficiency improves as the language model is made more accurate  . This bodes well for future research into the use of other nonlocal  ( e . g . 
lexical and semantic ) information to guide the parser . 
In addition , we show that the improvement in accuracy associated with left-corner parsing over topdown is attributable to the nonlocal information supplied by the strategy  , and can thus be obtained through other methods that utilize that same information  . 
4212 Parser architecture
The parser proceeds incrementally from left to right  , with one item of lookahead . Nodes are expanded in a standard topdown , left-to-right fashion . The parser utilizes : ( i ) a probabilistic contextfree grammar ( PCFG )  , induced via standard relative frequency estimation from a corpus of parse trees  ; and ( ii ) lookahead probabilities as described below . Multiple competing partial parses ( or analyses ) are held on a priority queue , which we will call the pending heap . They are ranked by a figure of merit ( FOM ) , which will be discussed below . Each analysis has its own stack of nodes to be expanded  , as well as a history , probability , and FOM . The highestranked analysis is popped from the pending heap  , and the category at the top of its stack is expanded  . A category is expanded using every rule which could eventually reach the lookahead terminal  . For every such rule expansion , a new analysis is created 1 and pushed back onto the pending heap . 
The FOM for an analysis is the product of the probabilities of all PCFG rules used in its derivation and what we call its lookahead probability  ( LAP )  . The LAP approximates the product of the probabilities of the rules that will be required to link the analysis in its current state with the lookahead terminal  2  . That is , for a grammar G , a stack state \[ C1 . . . C , \] and a look a head terminal item w : ( 1 ) LAP---PG ( \[C1 .   . Cn\]-~wa ) We recursively estimate this with two empirically observed conditional probabilities for every nonterminal Ci on the stack :/ ~  ( Ci2+w ) and / ~ ( Ci - ~ e )  . The LAP approximation for a given stack state and lookahead terminal is:  ( 2 ) PG ( \[ Ci .   . . Ca \] wot ) P ( Ciw ) + When the topmost stack category of an analysis matches the lookahead terminal  , the terminal is popped from the stack and the analysis  1We count each of these as a parser state ( or rule expansion ) considered , which can be used as a measure of efficiency . 
2 Since this is a nonlexicalized grammar , we are taking preterminal POS markers as our terminal items  . 
is pushed on to a second priority queue , which we will call the success heap . Once there are " enough " analyses on the success heap  , all those remaining on the pending heap are discarded  . 
The success heap then becomes the pending heap , and the lookahead is moved forward to the next item in the input string  . When the end of the input string is reached , the analysis with the highest probability and an empty stack is returned as the parse  . If no such parse is found , an error is returned . 
The specifics of the beam search dictate how many analyses on the success heap constitute " enough  "  . One approach is to set a constant beam width , e . g .  10 , 000 analyses on the success heap , at which point the parser moves to the next item in the input  . A problem with this approach is that parses towards the bottom of the success heap may be so unlikely relative to those at the top that they have little or no chance of becoming the most likely parse at the end of the day  , causing wasted effort . An alternative approach is to dynamically vary the beam width by stipulating a factor  , say 10-5 , and proceed until the best analysis on the pending heap has an FOM less than  10   -5 times the probability of the best analysis on the success heap  . Sometimes , however , the number of analyses that fall within such a range can be enormous  , creating nearly as large of a processing burden as the first approach  . As a compromise between these two approaches , we stipulated a base beam factor a ( usually 104) , and the actual beam factor used was a ?/ ~ ,   where/3 is the number of analyses on the success heap . Thus , when f ~ is small , the beam stays relatively wide , to include as many analyses as possible ; but as/3 grows , the beam narrows . We found this to be a simple and successful compromise  . 
Of course , with a left recursive grammar , such a topdown parser may never terminate . If no analysis ever makes it to the success heap , then , however one defines the beam search , a topdown depth-first search with a left -recursive grammar will never terminate  . To avoid this , one must place an upper bound on the number of analyses allowed to be pushed onto the pending heap  . If that bound is exceeded , the parse fails . With a left-corner strategy , which is not prey to left recursion , no such upper bound is necessary . 
422 ( a ) ( b ) ( d)
NP NP
DT+JJ+JJ NN DT NP-DT
DT+JJJJ cat the JJ NP-DT-JJ
DT JJ happy fat JJ NN
IIII the fat happy cat
NP NP
DT NP-DT DT NP-DT l the JJ NP-DT-JJ tLeJJNP-DT -JJ_J fat JJ NP-DT-JJ-JJ fiat JJ NP-DT-JJ-JJ happy NN happy NNNP-DT-JJ-JJ-NN 
III cat cate
Figure 1: Binaxized trees : ( a ) left binaxized ( LB )  ; ( b ) right b in axized to binary ( RB2) ; ( c ) right b in axized to unary ( RB1) ;   ( d ) right binarized to null axy ( RB 0 ) 3 Grammar transforms Nijholt ( 1980 ) characterized parsing strategies in terms of announce points : the point at which a parent category is announced  ( identified ) relative to its children , and the point at which the rule expanding the parent is identified  . In pure topdown parsing , a parent category and the rule expanding it are announced before any of its children  . In pure bottom-up parsing , they are identified after all of the children . Grammar transforms are one method for changing the announce points  . In topdown parsing with an appropriately binaxized grammar  , the pax-ent is identified before , but the rule expanding the parent after , all of the children . Left-corner parsers announce a parent category and its expanding rule after its leftmost child has been completed  , but before any of the other children . 
3 . 1 De lay ing ru le ident i f i cat ion through b inarization Suppose that the category on the top of the stack is an NP and there is a determiner  ( DT ) in the lookahead . In such a situation , there is no information to distinguish between the rules NP~DTJJNN and NP--+DT JJ NNS  . 
If the decision can be delayed , however , until such a time as the relevant preterminal is in the lookahead  , the parser can make a more informed decision . Grammar binaxization is one way to do this , by allowing the parser to use a rule like NP--+ DT NP-DT  , where the new nonterminal NP-DT can expand into anything that follows a DT in an NP  . The expansion of NP-DT occurs only after the next preterminal is in the lookahead  . Such a delay is essential for an efficient implementation of the kind of incremental parser that we are proposing  . 
There axe actually several ways to make a grammar binary  , some of which are better than others for our parser  . The first distinction that can be drawn is between what we will call left binaxization  ( LB ) versus right binaxization ( RB , see figure 1) . In the former , the leftmost items on the righthand side of each rule are grouped together  ; in the latter , the rightmost items on the righthand side of the rule are grouped together  . Notice that , for a topdown , left-to-right parser , RB is the appropriate transform , because it underspecifies the right siblings . With LB , a topdown parser must identify all of the siblings before reaching the leftmost item  , which does not aid our purposes . 
Within RB transforms , however , there is some variation , with respecto how long rule underspecification is maintained  . One method is to have the final underspecified category rewrite as a binary rule  ( hereafter RB2 , see figure lb ) . Another is to have the final underspecified category rewrite as a unary rule  ( RB1 , figure lc ) . The last is to have the final underspecified category rewrite as a nullaxy rule  ( RB 0 , figure ld ) . Notice that the original motivation for RB , to delay specification until the relevant items are present in the lookahead  , is not served by RB2 , because the second child must be specified without being present in the lookahead  .   RB0 pushes the lookahead out to the first item in the string after the constituent being expanded  , which can be useful in deciding between rules of unequal length  , e . g . NP---+DTNN and NP~DT NN NN . 
Table 1 summarizes some trials demonstrat-Grammar Sentences Considered Precision and Labelled Prob to Avg  . 
Parsed * Recall t Prec/Rect MLP Probt
None 1496 234 . 16 19270  . 65521  . 76427  . 001721 LB3795533 . 99 96813  . 65539  . 76095  . 001440I ~ B 12985191 . 27 10140  . 71616  . 72712  . 340858 RB04108497 . 37 13868  . 73207  . 72327  . 443705 Beam Factor=10-4* Length ~40 ( 2245 sentences in F23 Avg . length --21 . 68 ) t of those sentences parsed Table 1: The effect of different approaches to binarizationing the effect of different binarization approaches on parser performance  . The grammars were induced from sections 221 of the Penn Wall St . Journal Treebank ( Marcus et al . , 1993), and tested on section 23 . For each transform tested , every tree in the training corpus was transformed before grammar induction  , resulting in a transformed PCFG and lookahead probabilities estimated in the standard way  . Each parse returned by the parser was detransformed for evaluation  3  . The parser used in each trial was identical , with a base beam factor c ~ = 10-4 . The performance is evaluated using these measures  :   ( i ) the percentage of candidate sentences for which a parse was found  ( coverage )  ; ( ii ) the average number of states ( i . e . rule expansions ) considered per candidate sentence ( efficiency )  ; and ( iii ) the average labelled precision and recall of those sentences for which a parse was found  ( accuracy )  . We also used the same grammars with an exhaustive  , bottom-up CKY parser , to ascertain both the accuracy and probability of the maximum likelihood parse  ( MLP )  . We can then additionally compare the parser's performance to the MLP's on those same sentences  . 
As expected , left binarization conferred no benefitoour parser  . Right binarization , in contrast , improved performance across the board . 
R B0 provided a substantial improvement in coverage and accuracy over  RB1  , with something of a decrease in efficiency . This efficiency hit is partly attributable to the fact that the same tree has more nodes with  RB0  . Indeed , the efficiency improvement with right binarization over the standard grammar is even more interesting in light of the great increase in the size of the grammars  . 
3See Johnson ( 1998 ) for details of the transform/de-transform paradigm  . 
It is worth noting at this point that , with the RB0 grammar , this parser is now a viable broadcoverage statistical parser  , with good coverage , accuracy , and efficiency 4 . Next we considered the left-corner parsing strategy  . 
3.2 Left-corner parsing
Left-corner ( LC ) parsing ( Rosenkrantz and Lewis II ,  1970 ) is a wellknown strategy that uses both bottom-up evidence  ( from the left corner of a rule ) and topdown prediction ( of the rest of the rule )  . Rosenkrantz and Lewis showed how to transform a contextfree grammar into a grammar that  , when used by a topdown parser , follows the same search path as an LC parser . These LC grammars allow us to use exactly the same predictive parser to evaluate topdown versus LC parsing  . Naturally , an LC grammar performs best with our parser when right binarized  , for the same reasons outlined above . We use transform composition to apply first one transform  , then another to the output of the first . We denote this AoB where ( AoB )   ( t ) = B ( A ( t ) ) . After applying the left-corner transform , we then binarize the resulting grammar 5 , i . e . LCoRB . 
Another probabilistic LC parser investigated ( Manning and Carpenter ,  1997) , which utilized an LC parsing architecture ( not a transformed grammar )  , also got a performance boost 4The very efficient bottom-up statistical parser detailed in Charniak et al  ( 1998 ) measured efficiency in terms of total edges popped  . An edge ( or , in our case , a parser state ) is considered when a probability is calculated for it  , and we felt that this was a better efficiency measure than simply those popped  . As a baseline , their parser considered an average of 2216 edges per sentence in section 22 of the WSJ corpus ( p . c . ) . 
5Given that the LC transform involves nullary productions  , the use of RB0 is not needed , i . e . nullary productions need only be introduced from one source  . Thus binarization with left corner is always to unary  ( RB1 )  . 

Transform Rules in Pct . of Avg . States Avg Labelled Avg . MLP Ratio of Avg . 
Grammar Sentences Considered Precision and Labelled ProbtoAvg  . 
Parsed * Recall t Prec/Rect MLP Probt
Left Corner ( LC ) 2179791 . 75 9000  . 76399  . 78156  . 175928 LBoLC 53026 96 . 75 7865  . 77815  . 78056  . 35 9828 LCoRB 5349 496 . 7 8125  . 77830  . 78066  . 359439 LCoRBoANN 55094 96 . 21 7945  . 77854  . 78094  . 346778 RBoLC86007 93 . 38 4675  . 76120  . 80529* Length_40 (2245 sentences in F23-Avg . length - - - - 21 . 68 Beam Factor - - - - 10 - 4 . 267330 tOf those sentences parsed
Table 2: Left Corner Results through right binarization . This , however , is equivalent oRB oLC , which is a very different grammar from LCoRB . Given our two binarization orientations ( LB and RB )  , there are four possible compositions of binarization and 
LC transforms : ( a ) LB oLC ( b ) RB oLC ( c ) LCoLB ( d ) LCoRB Table 2 shows left-corner results over various conditions  6  . Interestingly , options ( a ) and ( d ) encode the same information , leading to nearly identical performance 7 . As stated before , right binarization moves the rule announce point from before to after all of the children  . The LC transform is such that LCoRB also delays parent identification until after all of the children  . The transform LCoRB oA NN moves the parent announce point back to the left corner by introducing unary rules at the left corner that simply identify the parent of the binarized rule  . 
This allows us to test the effect of the position of the parent announce point on the performance of the parser  . As we can see , however , the effect is slight , with similar performance on all measures . 
RB oL C performs with higher accuracy than the others when used with an exhaustive parser  , but seems to require a massive beam in order to even approach performance at the MLP level  . 
Manning and Carpenter ( 1997 ) used a beam width of 40 , 000 parses on the success heap at each input item , which must have resulted in an order of magnitude more rule expansions than what we have been considering up to now  , and 6 Option ( c ) is not the appropriate kind of binarization for our parser  , as argued in the previous section , and so is omitted . 
7The difference is due to the int roduct ion of vacuous unary rules with RB  . 
yet their average labelled precision and recall ( . 7875 ) still fell well below what we found to be the MLP accuracy  (  . 7987) for the grammar . We are still investigating why this grammar functions so poorly when used by an incremental parser  . 
3.3 Non-local annotation
Johnson ( 1998 ) discusses the improvement of PCFG models via the annotation of nonlocal information onto nonterminal nodes in the trees of the training corpus  . One simple example is to copy the parent node onto every nonterminal  , e . g . the rule S~NP VP becomes S~NP ~ SVP ~ S . The idea here is that the distribution of rules of expansion of a particular nonterminal may differ depending on the non-terminal's parent  . Indeed , it was shown that this additional information improves the MLP accuracy dramatically  . 
We looked at two kinds of nonlocal information annotation : parent  ( PA ) and left-corner ( LCA )  . Left-corner parsing gives improved accuracy over topdown or bottom-up parsing with the same grammar  . Why ? One reason may be that the ancestor category exerts the same kind of nonlocal influence upon the parser that the parent category does in parent annotation  . To test this , we annotated the left-corner ancestor category onto every leftmost nonterminal category  . The results of our annotation trials are shown in table  3  . 
There are two important points to notice from these results  . First , with PA we get not only the previously reported improvement in accuracy  , but additionally a fairly dramatic decrease in the number of parser states that must be visited to find a parse  . That is , the nonlocal information not only improves the final product of the parse  , but it guides the parser more quickly Grammar Sentences Considered Precision and Labelled Prob to Avg  . 
Parsed * Recall t Prec/Rect MLP Probt
RB04108497 . 37 13868  . 73207  . 72327  . 443705 PAoRB 06346795 . 19 8596  . 79188  . 79759  . 486995 LCoRB 5349496 . 7 8125  . 77830  . 78066  . 359439 LCAoRB05866996 . 48 11158  . 77476  . 78058  . 495912 PAoLCoRB802 4593 . 52 4455  . 81144  . 81833  . 484428 Beam Factor --10-4* Length ~40 ( 2245 sentences in F23-Avg . length -= 21 . 68) tOf those sentences parsed
Table 3: Nonlocal annotation results to the final product . The annotated grammar has 1 . 5 times as many rules , and would slow a bottom-up CKY parser proportionally  . Yet our parser actually considers far fewer states enroute to the more accurate parse  . 
Second , LC-annotation gives nearly all of the accuracy gain of left-corner parsings  , in support of the hypothesis that the ancestor information was responsible for the observed accuracy improvement  . This result suggests that if we can determine the information that is being annotated by the trouble some RBoLC transform  , we may be able to get the accuracy improvement with a relatively narrow beam  . Parent-annotation before the LC transform gave us the best performance of all  , with very few states considered on average , and excellent accuracy for a nonlexicalized grammar  . 
4 Accuracy/Efficiency tradeoff
One point that deserves to be made is that there is something of an accuracy/efficiency tradeoff with regards to the base beam factor  . The results given so far were at 10-4 , which functions pretty well for the transforms we have investigated  . Figures 2 and 3 show four performance measures for four of our transforms at base beam factors of  10   -3   ,  10 -4  ,  10 -5  , and 10-6 . There is a dramatically increasing efficiency burden as the beam widens  , with varying degrees of pay off . With the topdown transforms ( RB0 and PAoRB0) , the ratio of the average probability to the MLP probability does improve substantially as the beam grows  , yet with only marginal improvements in coverage and accuracy  . Increasing the beam seems to do less with the left-corner transforms  . 
S The rest could very well be within noise.
5 Conclusions and Future Research
We have examined several probabilistic predictive parser variations  , and have shown the approach in general to be a viable one  , both in terms of the quality of the parses , and the efficiency with which they are found . We have shown that the improvement of the grammars with nonlocal information not only results in better parses  , but guides the parser to them much more efficiently  , in contrast to dynamic programming methods . Finally , we have shown that the accuracy improvement that has been demonstrated with left-corner approaches can be attributed to the nonlocal information utilized by the method  . 
This is relevant to the study of the human sentence processing mechanism in so far as it demonstrates that it is possible to have a model which makes explicit the syntactic relationships between items in the input incrementally  , while still scaling up to broadcoverage . 
Future research will include : ? lexicalization of the parser ? utilization of fully connected trees for additional syntactic and semantic processing ? the use of syntactic predictions in the beam for language modeling ? an examination of predictive parsing with a left-branching language  ( e . g . German ) In addition , it may be of interest to the psycholinguistic ommunity if we introduce a time variable into our model  , and use it to compare such competing sentence processing models a srace-based and competition -based parsing  . 
References
G . Altmann and M . Steedman .  1988 . Interaction with context during human sentence processing  . Cognition , 30:198-238 . 
426 xlO4 Average States Considered per Sentence
RB 0 .   .   .   .   .   . LC0RB 12---PA0RB 0 .   .   .   .   . PA0LC0RB0r-10-310 . -4 Base Beam Factor 10-s106
Percentage of Sentences Parsed .   .   .   .   .   . LCoRB---PAoRB0~ . ,,, , =  . . . . . . . . . . . . . . . PAoLCoRB ~,~" ~, . . . . . , . ,"'~,  .   .   .   .   .   .   .   .  ~ ~  . 
92 ~ ,4"~ 10  . . 4 Base Beam Factor 10   -5   10   -6 Figure 2: Changes in performance with beam factor variation M  . Britt .  1994 . The interaction of referential ambiguity and argument structure  . Journalo/Memory and Language , 33:251-283 . 
E . Charniak , S . Goldwater , and M . Johnson.
1998 . Edge-based bestfirst chart parsing . In Proceedings of the Sixth Workshop on Very
Large Corpora , pages 127-133.
S . Crain and M . Steedman .  1985 . On not being led up the garden path : The use of context by the psychological parser  . In D . Dowty , L . Karttunen , and A . Zwicky , editors , Natural Language Parsing . Cambridge University
Press , Cambridge , UK.
M . Johnson .  1998 . PCFG models of linguistic tree representations . Computational Linguistics , 24:617-636 . 
C . Manning and B . Carpenter .  1997 . Probabilistic parsing using left corner language models  . In Proceedings of the Fifth International Workshop on Parsing Technologies  . 

Average Labelled Precision and Recall 82 ,   , o ~7 ~ (1 . 
76 10"-3 0 . 65 0 . 6 0 . 55 0 . 5  . o0,45 rr 0 . 4 0 . 35 0 . 3 0 . 25 10 -3
RB0......LCoRB---PAoRB0
PAOLCoRBi10-4i
Base Beam Factor 10610-s
Average Ratio of Parse Probability to Maximum Likelihood Probability  , RB0-'' .   .   .   .   .   . LCoRB---PAoRB0/~~ .  - "
II10-4 Base Beam Factor 10-s10-6
Figure 3: Changes in performance with beam factor variation
M.P . Marcus , B . Santorini , and M.A.
Marcinkiewicz .  1993 . Building a large annotated corpus of English : The Penn 
Treebank . Computational Linguistics , 19(2):313-330 . 
A . Nijholt .  1980 . Context-/tee Grammars : Covers , Normal Forms , and Parsing . Springer
Verlag , Berlin.
S . J . Rosenkrantz and P . M . Lewis II .  1970 . Deterministic left corner parsing . In IEEE Conference Record of the 11th Annual Symposium on Switching and Automata , pages 139-152 . 
M . Steedman .  1989 . Grammar , interpretation , and processing from the lexicon . In W . Marslen-Wilson , editor , Lexical representation and process . MIT Press , Cambridge,

M . Tanenhaus , M . Spivey-Knowlton , K . Eberhard , and J . Sedivy .  1995 . Integration of visual and linguistic information during spoken language comprehension  . Science , 268:1632-1634 . 

