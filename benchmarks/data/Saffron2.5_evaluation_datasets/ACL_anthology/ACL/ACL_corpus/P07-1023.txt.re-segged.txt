Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics , pages 176?183,
Prague , Czech Republic , June 2007. c?2007 Association for Computational Linguistics
Parsing and Generation as Datalog Queries
Makoto Kanazawa
National Institute of Informatics
2?1?2 Hitotsubashi , Chiyoda-ku , Tokyo , 101?8430, Japan
kanazawa@nii.ac.jp
Abstract
We show that the problems of parsing and surface realization for grammar formalisms with ? contextfree ? derivations , coupled with Montague semantics ( under a certain restriction ) can be reduced in a uniform way to Datalog query evaluation . As well as giving a polynomial-time algorithm for computing all derivation trees ( in the form of a shared forest ) from an input string or input logical form , this reduction has the following complexity-theoretic consequences for all such formalisms : ( i ) the decision problem of recognizing grammaticality ( surface realizability ) of an input string ( logical form ) is in LOGCFL ; and ( ii ) the search problem of finding one logical form ( surface string ) from an input string ( logical form ) is in functional LOGCFL . Moreover , the generalized supplementary magic-sets rewriting of the Datalog program resulting from the reduction yields efficient Earley-style algorithms for both parsing and generation.
1 Introduction
The representation of contextfree grammars ( augmented with features ) in terms of definite clause programs is wellknown . In the case of a bare-bone CFG , the corresponding program is in the function-free subset of logic programming , known as Datalog . For example , determining whether a string John found a unicorn belongs to the language of the CFG in Figure 1 is equivalent to deciding whether the Datalog program in Figure 2 together with the database in (1) can derive the query ??? S(0, 4).? (1) John(0, 1). found(1, 2). a(2, 3). unicorn(3, 4).
S ? NP VP
VP ? V NP
V ? V Conj V
NP ? Det N
NP ? John
V ? found
V ? caught
Conj ? and
Det ? a
N ? unicorn
Figure 1: A CFG.
S(i , j ) :? NP(i , k),VP(k , j).
VP(i , j ) :? V(i , k),NP(k , j).
V(i , j ) :? V(i , k),Conj(k , l),V(l , j).
NP(i , j ) :? Det(i , k),N(k , j).
NP(i , j ) :? John(i , j).
V(i , j ) :? found(i , j).
V(i , j ) :? caught(i , j).
Conj(i , j ) :? and(i , j).
Det(i , j ) :? a(i , j).
N(i , j ) :? unicorn(i , j).
Figure 2: The Datalog representation of a CFG.
By naive ( or seminaive ) bottom-up evaluation ( see , e.g ., Ullman , 1988), the answer to such a query can be computed in polynomial time in the size of the database for any Datalog program . By recording rule instances rather than derived facts , a packed representation of the complete set of Datalog derivation trees for a given query can also be obtained in polynomial time by the same technique . Since a Datalog derivation tree uniquely determines a grammar derivation tree , this gives a reduction of contextfree recognition and parsing to query evaluation in Datalog.
In this paper , we show that a similar reduction to Datalog is possible for more powerful grammar formalisms with ? contextfree ? derivations , such as ( multicomponent ) tree-adjoining grammars ( Joshi and Schabes , 1997; Weir , 1988), IO macro grammars ( Fisher , 1968), and ( parallel ) multiple contextfree grammars ( Seki et al , 1991). For instance , the TAG in Figure 3 is represented by the Datalog program in Figure 4. Moreover , the method of reduc-?
ANA a A b A?NA c d
Figure 3: A TAG with one initial tree ( left ) and one auxiliary tree ( right)
S(p1, p3) :? A(p1, p3, p2, p2).
A(p1, p8, p4, p5) :? A(p2, p7, p3, p6), a(p1, p2), b(p3, p4), c(p5, p6), d(p7, p8).
A(p1, p2, p1, p2).
Figure 4: The Datalog representation of a TAG.
tion extends to the problem of tactical generation ( surface realization ) for these grammar formalisms coupled with Montague semantics ( under a certain restriction ). Our method essentially relies on the encoding of different formalisms in terms of abstract categorial grammars ( de Groote , 2001).
The reduction to Datalog makes it possible to apply to parsing and generation sophisticated evaluation techniques for Datalog queries ; in particular , an application of generalized supplementary magic-sets rewriting ( Beeri and Ramakrishnan , 1991) automatically yields Earley-style algorithms for both parsing and generation . The reduction can also be used to obtain a tight upper bound , namely LOGCFL , on the computational complexity of the problem of recognition , both for grammaticality of input strings and for surface realizability of input logical forms.
With regard to parsing and recognition of input strings , polynomial-time algorithms and the LOGCFL upper bound on the computational complexity are already known for the grammar formalisms covered by our results ( Engelfriet , 1986); nevertheless , we believe that our reduction to Datalog offers valuable insights . Concerning generation , our results seem to be entirely new.1 2 Context-free grammars on ?- terms Consider an augmentation of the grammar in Figure 1 with Montague semantics , where the lefthand 1We only consider exact generation , not taking into account the problem of logical form equivalence , which will most likely render the problem of generation computationally intractable ( Moore , 2002).
S(X1X2) ? NP(X1) VP(X2)
VP(?x.X2(?y.X1yx )) ? V(X1) NP(X2)
V(?yx.X2(X1yx)(X3yx )) ? V(X1) Conj(X2) V(X3)
NP(X1X2) ? Det(X1) N(X2)
NP(?u.u Johne ) ? John
V(finde?e?t ) ? found
V(catche?e?t ) ? caught
Conj(?t?t?t ) ? and
Det(?uv.?(e?t)?t(?y.?t?t?t(uy)(vy ))) ? a
N(unicorne?t ) ? unicorn
Figure 5: A contextfree grammar with Montague semantics.
S
NP
John
VP
V found
NP
Det a
N unicorn
Figure 6: A derivation tree.
side of each rule is annotated with a ?- term that tells how the meaning of the lefthand side is composed from the meanings of the righthand side nonterminals , represented by uppercase variables X1, X2, . . .
(Figure 5).2
The meaning of a sentence is computed from its derivation tree . For example , John found a unicorn has the derivation tree in Figure 6, and the grammar rules assign its root node the ?- term (? u.u John)(?x.(?uv.?(?y.?(uy)(vy ))) unicorn (? y.find y x )), which ?- reduces to the ?- term (2) ?(? y.?(unicorn y)(find y John )) encoding the first-order logic formula representing the meaning of the sentence ( i.e ., its logical form).
Thus , computing the logical form(s ) of a sentence involves parsing and ?- term normalization . To find a sentence expressing a given logical form , it suffices 2We follow standard notational conventions in typed ?- calculus . Thus , an application M1M2M3 ( written without parentheses ) associates to the left , ? x.?y.M is abbreviated to ? xy.M , and ?? ?? ? stands for ?? (?? ?). We refer the reader to Hindley , 1997 or S?rensen and Urzyczyn , 2006 for standard notions used in simply typed ?- calculus.
177
S(X1X2) :? NP(X1),VP(X2).
VP(?x.X2(?y.X1yx )) :? V(X1),NP(X2).
V(?yx.X2(X1yx)(X3yx )) :? V(X1),Conj(X2),V(X3).
NP(X1X2) :? Det(X1),N(X2).
NP(?u.u Johne).
V(finde?e?t).
V(catche?e?t).
Conj(?t?t?t).
Det(?uv.?(e?t)?t(?y.?t?t?t(uy)(vy))).
N(unicorne?t).
Figure 7: A CFLG.
to find a derivation tree whose root node is associated with a ?- term that ?- reduces to the given logical form ; the desired sentence can simply be read off from the derivation tree . At the heart of both tasks is the computation of the derivation tree(s ) that yield the input . In the case of generation , this may be viewed as parsing the input ?- term with a ? contextfree ? grammar that generates a set of ?- terms ( in normal form ) ( Figure 7), which is obtained from the original CFG with Montague semantics by stripping off terminal symbols . Determining whether a given logical form is surface realizable with the original grammar is equivalent to recognition with the resulting contextfree ?- term grammar ( CFLG).
In a CFLG such as in Figure 7, constants appearing in the ?- terms have preassigned types indicated by superscripts . There is a mapping ? from nonterminals to their types (? = { S 7? t,NP 7? ( e ? t )? t,VP 7? e?t,V 7? e?e?t,Conj 7? t?t?t,Det 7? ( e?t)?(e?t)?t,N 7? e?t }). A rule that has A on the lefthand side and B1, . . . , Bn as righthand side nonterminals has its lefthand side annotated with a wellformed ?- term M that has type ?( A ) under the type environment X1 :?( B1), . . . , Xn :?( Bn ) ( in symbols , X1 : ?( B1), . . . , Xn : ?( Bn ) ` M : ?( A)).
What we have called a contextfree ?- term grammar is nothing but an alternative notation for an abstract categorial grammar ( de Groote , 2001) whose abstract vocabulary is second-order , with the restriction to linear ?- terms removed.3 In the linear case , Salvati (2005) has shown the recognition/parsing complexity to be PTIME , and exhibited an algorithm similar to Earley parsing for TAGs . Second-order 3A ?- term is a ? I-term if each occurrence of ? binds at least one occurrence of a variable . A ? I-term is linear if no subterm contains more than one free occurrence of the same variable.
S(?y.X1(?z.z)y ) :? A(X1).
A(?xy.ao?o(X1(?z.bo?o(x(co?oz)))(do?oy ))) :? A(X1).
A(?xy.xy).
Figure 8: The CFLG encoding a TAG.
linear ACGs are known to be expressive enough to encode wellknown mildly context-sensitive grammar formalisms in a straightforward way , including TAGs and multiple contextfree grammars ( de Groote , 2002; de Groote and Pogodalla , 2004).
For example , the linear CFLG in Figure 8 is an encoding of the TAG in Figure 3, where?(S ) = o?o and ?( A ) = ( o ? o )? o ? o ( see de Groote , 2002 for details of this encoding ). In encoding a string-generating grammar , a CFLG uses o as the type of string position and o ? o as the type of string . Each terminal symbol is represented by a constant of type o?o , and a string a1 . . . an is encoded by the ?- term ? z.ao?o1 (. . . ( a o?o n z ) . . . ), which has type o ? o.
A string-generating grammar coupled with Montague semantics may be represented by a synchronous CFLG , a pair of CFLGs with matching rule sets ( de Groote 2001). The transduction between strings and logical forms in either direction consists of parsing the input ?- term with the source-side grammar and normalizing the ?- term(s ) constructed in accordance with the target-side grammar from the derivation tree(s ) output by parsing.
3 Reduction to Datalog
We show that under a weaker condition than linearity , a CFLG can be represented by a Datalog program , obtaining a tight upper bound ( LOGCFL ) on the recognition complexity . Due to space limitation , our presentation here is kept at an informal level ; formal definitions and rigorous proof of correctness will appear elsewhere.
We use the grammar in Figure 7 as an example , which is represented by the Datalog program in Figure 9. Note that all ?- terms in this grammar are almost linear in the sense that they are ? Iterms where any variable occurring free more than once in any subterm must have an atomic type . Our construction is guaranteed to be correct only when this condition is met.
Each Datalog rule is obtained from the corresponding grammar rule in the following way . Let VP(p1, p4) :? V(p2, p4, p3),NP(p1, p2, p3).
V(p1, p4, p3) :?
V(p2, p4, p3),Conj(p1, p5, p2),V(p5, p4, p3).
NP(p1, p4, p5) :? Det(p1, p4, p5, p2, p3),N(p2, p3).
NP(p1, p1, p2) :? John(p2).
V(p1, p3, p2) :? find(p1, p3, p2).
V(p1, p3, p2) :? catch(p1, p3, p2).
Conj(p1, p3, p2) :? ?( p1, p3, p2).
Det(p1, p5, p4, p3, p4) :? ?( p1, p2, p4),?(p2, p5, p3).
N(p1, p2) :? unicorn(p1, p2).
Figure 9: The Datalog representation of a CFLG.
M be the ?- term annotating the lefthand side of the grammar rule . We first obtain a principal ( i.e ., most general ) typing of M.4 In the case of the second rule , this is
X1 : p3? p4? p2, X2 : ( p3? p2)? p1 ` ? x.X2(?y.X1yx ) : p4? p1.
We then remove ? and parentheses from the types in the principal typing and write the resulting sequences of atomic types in reverse.5 We obtain the Datalog rule by replacing Xi and M in the grammar rule with the sequence coming from the type paired with Xi and M , respectively . Note that atomic types in the principal typing become variables in the Datalog rule . When there are constants in the ?- term M , they are treated like free variables . In the case of the second-to-last rule , the principal typing is ? : ( p4? p2)? p1, ? : p3? p5? p2 ` ? uv.?(?y.?(uy)(vy )) : ( p4? p3)? ( p4? p5)? p1.
If the same constant occurs more than once , distinct occurrences are treated as distinct free variables.
The construction of the database representing the input ?- term is similar , but slightly more complex.
A simple case is the ?- term (2), where each constant occurs just once . We compute its principal typing , treating constants as free variables.6 ? : (4? 2)? 1, ? : 3? 5? 2, unicorn : 4? 3, find : 4? 6? 5 , John : 6 ` ?(? y.?(unicorn y)(find y John )) : 1.
4To be precise , we must first convert M to its ?- long form relative to the type assigned to it by the grammar . For example , X1X2 in the first rule is converted to X1(?x.X2x).
5The reason for reversing the sequences of atomic types is to reconcile the ?- term encoding of strings with the convention of listing string positions from left to right in databases like (1).
6We assume that the input ?- term is in ?- long normal form.
We then obtain the corresponding database (3) and query (4) from the antecedent and succedent of this judgment , respectively . Note that here we are using 1, 2, 3, . . . as atomic types , which become database constants.
?(1, 2, 4). ?(2, 5, 3). unicorn(3, 4).
find(5, 6, 4). John(6).
(3) ?? S(1).(4)
When the input ?- term contains more than one occurrence of the same constant , it is not always correct to simply treat them as distinct free variables , unlike in the case of ?- terms annotating grammar rules . Consider the ?- term (5) ( John found and caught a unicorn ): (5) ?(? y.?(unicorn y)(?(find y John)(catch y John))).
Here , the two occurrences of John must be treated as the same variable . The principal typing is (6) and the resulting database is (7).
? : (4? 2)? 1, ?1 : 3? 5? 2, unicorn : 4? 3, ?2 : 6? 8? 5, find : 4? 7? 6, John : 7, catch : 4? 7? 8 ` ?(? y.?1(unicorn y ) (?2(find y John)(catch y John ))) : 1.
(6) ?(1, 2, 4). ?(2, 5, 3). ?(5, 8, 6). unicron(3, 4).
find(6, 7, 4). John(7). catch(8, 7, 4).
(7)
It is not correct to identify the two occurrences of ? in this example . The rule is to identify distinct occurrences of the same constant just in case they occur in the same position within ?- equivalent subterms of an atomic type . This is a necessary condition for those occurrences to originate as one and the same occurrence in the nonnormal ?- term at the root of the derivation tree . ( As a preprocessing step , it is also necessary to check that distinct occurrences of a bound variable satisfy the same condition , so that the given ?- term is ?- equal to some almost linear ?- term.7) 7Note that the way we obtain a database from an input ?- term generalizes the standard database representation of a string : from the ?- term encoding ? z.ao?o1 (. . . ( a o?o n z ) . . . ) of a string a1 . . . an , we obtain the database { a1(0, 1), . . . , an(n?1, n)}.
179 4 Correctness of the reduction
We sketch some key points in the proof of correctness of our reduction . The ?- term N obtained from the input ?- term by replacing occurrences of constants by free variables in the manner described above is the normal form of some almost linear ?- term N ?. The leftmost reduction from an almost linear ?- term to its normal form must be nondeleting and almost non-duplicating in the sense that when a ?- redex (? x.P)Q is contracted , Q is not deleted , and moreover it is not duplicated unless the type of x is atomic . We can show that the Subject Expansion Theorem holds for such ?- reduction , so the principal typing of N is also the principal typing of N ?. By a slight generalization of a result by Aoto (1999), this typing ? ` N ? : ? must be negatively non-duplicated in the sense that each atomic type has at most one negative occurrence in it . By Aoto and Ono?s (1994) generalization of the Coherence Theorem ( see Mints , 2000), it follows that every ?- term P such that ?? ` P : ? for some ?? ? ? must be ??- equal to N ? ( and consequently to N).
Given the one-one correspondence between the grammar rules and the Datalog rules , a Datalog derivation tree uniquely determines a grammar derivation tree ( see Figure 10 as an example ). This relation is not one-one , because a Datalog derivation tree contains database constants from the input database . This extra information determines a typing of the ?- term P at the root of the grammar derivation tree ( with occurrences of constants in the ?- term corresponding to distinct facts in the database regarded as distinct free variables ): John : 6, find : 4? 6? 5, ? : (4? 2)? 1, ? : 3? 5? 2, unicorn : 4? 3 ` (? u.u John ) (? x.(?uv.?(?y.?(uy)(vy ))) unicorn (? y.find y x )) : 1.
The antecedent of this typing must be a subset of the antecedent of the principal typing of the ?- term N from which the input database was obtained . By the property mentioned at the end of the preceding paragraph , it follows that the grammar derivation tree is a derivation tree for the input ?- term.
Conversely , consider the ?- term P ( with distinct occurrences of constants regarded as distinct free variables ) at the root of a grammar derivation tree for the input ?- term . We can show that there is a substitution ? which maps the free variables of P to the free variables of the ?- term N used to build the input database such that ? sends the normal form of P to N . Since P is an almost linear ?- term , the leftmost reduction from P ? to N is nondeleting and almost non-duplicating . By the Subject Expansion Theorem , the principal typing of N is also the principal typing of P ?, and this together with the grammar derivation tree determines a Datalog derivation tree.
5 Complexity-theoretic consequences
Let us call a rule A(M ) :? B1(X1), . . . , Bn(Xn ) in a CFLG an ?- rule if n = 0 and M does not contain any constants . We can eliminate ?- rules from an almost linear CFLG by the same method that Kanazawa and Yoshinaka (2005) used for linear grammars , noting that for any ? and ?, there are only finitely many almost linear ?- terms M such that ? ` M : ?. If a grammar has no ?- rule , any derivation tree for the input ?- term N that has a ?- term P at its root node corresponds to a Datalog derivation tree whose number of leaves is equal to the number of occurrences of constants in P , which cannot exceed the number of occurrences of constants in N.
A Datalog program P is said to have the polynomial fringe property relative to a class D of databases if there is a polynomial p(n ) such that for every database D in D of n facts and every query q such that P?D derives q , there is a derivation tree for q whose fringe ( i.e ., sequence of leaves ) is of length at most p(n ). For such P and D , it is known that { ( D , q ) | D ? D,P ? D derives q } is in the complexity class LOGCFL ( Ullman and Van Gelder , 1988;
Kanellakis , 1988).
We state without proof that the database-query pair ( D , q ) representing an input ?- term N can be computed in logspace . By padding D with extra useless facts so that the size of D becomes equal to the number of occurrences of constants in N , we obtain a logspace reduction from the set of ?- terms generated by an almost linear CFLG to a set of the form { ( D , q ) | D ? D,P ? D ` q }, where P has the polynomial fringe property relative to D . This shows that the problem of recognition for an almost linear
CFLG is in LOGCFL.
180
S(1)
NP(1, 1, 6)
John(6)
VP(1, 6)
V(5, 6, 4) find(5, 6, 4)
NP(1, 5, 4)
Det(1, 5, 4, 3, 4) ?(1, 2, 4) ?(2, 5, 3)
N(3, 4) unicorn(3, 4)
S((?u.u John)(?x.(?uv.?(?y.?(uy)(vy ))) unicorn (? y.find y x ))) NP(?u.u John ) VP(?x.(?uv.?(?y.?(uy)(vy ))) unicorn (? y.find y x ))) V(find ) NP((?uv.?(?y.?(uy)(vy ))) unicorn)
Det(?uv.?(?y.?(uy)(vy ))) N(unicorn)
Figure 10: A Datalog derivation tree ( left ) and the corresponding grammar derivation tree ( right ) By the main result of Gottlob et al (2002), the related search problem of finding one derivation tree for the input ?- term is in functional LOGCFL , i.e ., the class of functions that can be computed by a logspace-bounded Turing machine with a LOGCFL oracle . In the case of a synchronous almost linear CFLG , the derivation tree found from the source ?- term can be used to compute a target ?- term . Thus , to the extent that transduction back and forth between strings and logical forms can be expressed by a synchronous almost linear CFLG , the search problem of finding one logical form of an input sentence and that of finding one surface realization of an input logical form are both in functional LOGCFL.8 As a consequence , there are efficient parallel algorithms for these problems.
6 Regular sets of trees as input
Almost linear CFLGs can represent a substantial fragment of a Montague semantics for English and such ? linear ? grammar formalisms as ( multicomponent ) tree-adjoining grammars ( both as string grammars and as tree grammars ) and multiple contextfree grammars . However , IO macro grammars and parallel multiple contextfree grammars cannot be directly represented because representing string copying requires multiple occurrences of a variable of type o ? o . This problem can be solved by switching from strings to trees . We convert the input string into the regular set of binary trees whose yield equals the input string ( using c 8If the target-side grammar is not linear , the normal form of the target ?- term cannot be explicitly computed because its size may be exponential in the size of the source ?- term . Nevertheless , a typing that serves to uniquely identify the target ?- term can be computed from the derivation tree in logspace . Also , if the target-side grammar is linear and string-generating , the target string can be explicitly computed from the derivation tree in logspace ( Salvati , 2007).
as the sole symbol of rank 2), and turn the grammar into a tree grammar , replacing all instances of string concatenation in the grammar with the tree operation t1, t2 7? c(t1, t2). This way , a string grammar is turned into a tree grammar that generates a set of trees whose image under the yield function is the language of the string grammar . ( In the case of an IO macro grammar , the result is an IO contextfree tree grammar ( Engelfriet , 1977).) String copying becomes tree copying , and the resulting grammar can be represented by an almost linear CFLG and hence by a Datalog program . The regular set of all binary trees that yield the input string is represented by a database that is constructed from a deterministic bottom-up finite tree automaton recognizing it . Determinism is important for ensuring correctness of this reduction . Since the database can be computed from the input string in logspace , the complexity-theoretic consequences of the last section carry over here.
7 Magic sets and Earley-style algorithms Magic-sets rewriting of a Datalog program allows bottom-up evaluation to avoid deriving useless facts by mimicking topdown evaluation of the original program . The result of the generalized supplementary magic-sets rewriting of Beeri and Ramakrishnan (1991) applied to the Datalog program representing a CFG essentially coincides with the deduction system ( Shieber et al , 1995) or uninstantiated parsing system ( Sikkel , 1997) for Earley parsing.
By applying the same rewriting method to Datalog programs representing almost linear CFLGs , we can obtain efficient parsing and generation algorithms for various grammar formalisms with contextfree derivations.
We illustrate this approach with the program in Figure 4, following the presentation of Ullman form ??? S(0, x ).?, so that the input database can be processed incrementally . The program is first made safe by eliminating the possibility of deriving non-ground atoms:
S(p1, p3) :? A(p1, p3, p2, p2).
A(p1, p8, p4, p5) :? A(p2, p7, p3, p6), a(p1, p2), b(p3, p4), c(p5, p6), d(p7, p8).
A(p1, p8, p4, p5) :? a(p1, p2), b(p2, p4), c(p5, p6), d(p6, p8).
The subgoal rectification removes duplicate arguments from subgoals , creating new predicates as needed:
S(p1, p3) :? B(p1, p3, p2).
A(p1, p8, p4, p5) :? A(p2, p7, p3, p6), a(p1, p2), b(p3, p4), c(p5, p6), d(p7, p8).
A(p1, p8, p4, p5) :? a(p1, p2), b(p2, p4), c(p5, p6), d(p6, p8).
B(p1, p8, p4) :? A(p2, p7, p3, p6), a(p1, p2), b(p3, p4), c(p4, p6), d(p7, p8).
B(p1, p8, p4) :? a(p1, p2), b(p2, p4), c(p4, p6), d(p6, p8).
We then attach to predicates adornments indicating the free/bound status of arguments in topdown evaluation , reordering subgoals so that as many arguments as possible are marked as bound:
Sbf(p1, p3) :? Bbff(p1, p3, p2).
Bbff(p1, p8, p4) :? abf(p1, p2), Abfff(p2, p7, p3, p6), bbf(p3, p4), cbb(p4, p6), dbf(p7, p8).
Bbff(p1, p8, p4) :? abf(p1, p2), bbf(p2, p4), cbf(p4, p6), dbf(p6, p8).
Abfff(p1, p8, p4, p5) :? abf(p1, p2), Abfff(p2, p7, p3, p6), bbf(p3, p4), cbb(p5, p6), dbf(p7, p8).
Abfff(p1, p8, p4, p5) :? abf(p1, p2), bbf(p2, p4), cff(p5, p6), dbf(p6, p8).
The generalized supplementary magic-sets rewriting finally gives the following rule set : r1 : m B(p1) :? m S(p1).
r2 : S(p1, p3) :? m B(p1), B(p1, p3, p2).
r3 : sup2.1(p1, p2) :? m B(p1), a(p1, p2).
r4 : sup2.2(p1, p7, p3, p6) :? sup2.1(p1, p2), A(p2, p7, p3, p6).
r5 : sup2.3(p1, p7, p6, p4) :? sup2.2(p1, p7, p3, p6), b(p3, p4).
r6 : sup2.4(p1, p7, p4) :? sup2.3(p1, p7, p6, p4), c(p4, p6).
r7 : B(p1, p8, p4) :? sup2.4(p1, p7, p4), d(p7, p8).
r8 : sup3.1(p1, p2) :? m B(p1), a(p1, p2).
r9 : sup3.2(p1, p4) :? sup3.1(p1, p2), b(p2, p4).
r10 : sup3.3(p1, p4, p6) :? sup3.2(p1, p4), c(p4, p6).
r11 : B(p1, p8, p4) :? sup3.3(p1, p4, p6), d(p6, p8).
r12 : m A(p2) :? sup2.1(p1, p2).
r13 : m A(p2) :? sup4.1(p1, p2).
r14 : sup4.1(p1, p2) :? m A(p1), a(p1, p2).
r15 : sup4.2(p1, p7, p3, p6) :? sup4.1(p1, p2), A(p2, p7, p3, p6).
r16 : sup4.3(p1, p7, p6, p4) :? sup4.2(p1, p7, p3, p6), b(p3, p4).
r17 : sup4.4(p1, p7, p4, p5) :? sup4.3(p1, p7, p6, p4), c(p5, p6).
r18 : A(p1, p8, p4, p5) :? sup4.4(p1, p7, p4, p5), d(p7, p8).
r19 : sup5.1(p1, p2) :? m A(p1), a(p1, p2).
r20 : sup5.2(p1, p4) :? sup5.1(p1, p2), b(p2, p4).
r21 : sup5.3(p1, p4, p5, p6) :? sup5.2(p1, p4), c(p5, p6).
r22 : A(p1, p8, p4, p5) :? sup5.3(p1, p4, p5, p6), d(p6, p8).
The following version of chart parsing adds control structure to this deduction system : 1. (????) Initialize the chart to the empty set , the agenda to the singleton { m S(0)}, and n to 0.
2. Repeat the following steps : ( a ) Repeat the following steps until the agenda is exhausted : i . Remove a fact from the agenda , called the trigger.
ii . Add the trigger to the chart.
iii . Generate all facts that are immediate consequences of the trigger together with all facts in the chart , and add to the agenda those generated facts that are neither already in the chart nor in the agenda.
(b ) (????) Remove the next fact from the input database and add it to the agenda , incrementing n . If there is no more fact in the input database , go to step 3.
3. If S(0, n ) is in the chart , accept ; otherwise reject.
The following is the trace of the algorithm on input string aabbccdd : 1. m S(0) ???? 2. m B(0) r1, 1 3. a(0, 1) ???? 4. sup2.1(0, 1) r3, 2, 3 5. sup3.1(0, 1) r8, 2, 3 6. m A(1) r12, 4 7. a(1, 2) ???? 8. sup4.1(1, 2) r14, 6, 7 9. sup5.1(1, 2) r19, 6, 7 10. m A(2) r13, 8 11. b(2, 3) ???? 12. sup5.2(1, 3) r20, 9, 11 13. b(3, 4) ???? 14. c(4, 5) ???? 15. sup5.3(1, 3, 4, 5) r21, 12, 14 16. c(6, 5) ???? 17. sup5.3(1, 3, 5, 6) r21, 12, 16 18. d(6, 7) ???? 19. A(1, 7, 3, 5) r22, 17, 18 20. sup2.2(0, 7, 3, 5) r4, 4, 19 21. sup2.3(0, 7, 5, 4) r5, 13, 20 22. sup2.4(0, 7, 4) r6, 14, 21 23. d(7, 8) ???? 24. B(0, 8, 4) r7, 22, 23 25. S(0, 8) r2, 2, 24 Note that unlike existing Earley-style parsing algorithms for TAGs , the present algorithm is an instantiation of a general schema that applies to parsing with more powerful grammar formalisms as well as to generation with Montague semantics.
8 Conclusion
Our reduction to Datalog brings sophisticated techniques for Datalog query evaluation to the problems bound on the computational complexity of recognition for a wide range of grammars . In particular , it shows that the use of higher-order ?- terms for semantic representation need not be avoided for the purpose of achieving computational tractability.
References
Aoto , Takahito . 1999. Uniqueness of normal proofs in implicational intuitionistic logic . Journal of Logic,
Language and Information 8, 217?242.
Aoto , Takahito and Hiroakira Ono . 1994. Uniqueness of normal proofs in {?,?}- fragment of NJ . Research Report IS-RR-94-0024F . School of Information Science , Japan Advanced Institute of Science and Technology.
Beeri , Catriel and Raghu Ramakrishnan . 1991. On the power of magic . Journal of Logic Programming 10, 255?299.
Engelfriet , J . and E . M . Schmidt . 1977. IO and OI , part I . The Journal of Computer and System Sciences 15, 328?353.
Engelfriet , Joost . 1986. The complexity of languages generated by attribute grammars . SIAM Journal on
Computing 15, 70?86.
Fisher , Michael J . 1968. Grammars with Macro-Like Productions . Ph.D . dissertation . Harvard University.
Gottlob , Georg , Nicola Lenoe , Francesco Scarcello.
2002. Computing LOGCFL certificates . Theoretical
Computer Science 270, 761?777.
de Groote , Philippe . 2001. Towards abstract categorial grammars . In Association for Computational Linguistics , 39th Annual Meeting and 10th Conference of the European Chapter , Proceedings of the Conference , pages 148?155.
de Groote , Philippe . 2002. Tree-adjoining grammars as abstract categorial grammars . In Proceedings of the Sixth International Workshop on Tree Adjoining Grammar and Related Frameworks ( TAG+6), pages 145?150. Universita ? di Venezia.
de Groote , Philippe and Sylvain Pogodalla . 2004. On the expressive power of abstract categorial grammars : Representing contextfree formalisms . Journal of Logic , Language and Information 13, 421?438.
Hindley , J . Roger . 1997. Basic Simple Type Theory.
Cambridge : Cambridge University Press.
Aravind K . Joshi and Yves Schabes . 1997. Tree-adjoining grammars . In Grzegoz Rozenberg and Arto Salomaa , editors , Handbook of Formal Languages , Vol . 3, pages 69?123. Berlin : Springer.
Kanazawa , Makoto and Ryo Yoshinaka . 2005. Lexicalization of second-order ACGs . NII Technical Report . NII-2005-012E . National Institute of Informatics , Tokyo.
Kanellakis , Paris C . 1988. Logic programming and parallel complexity . In Jack Minker , editor , Foundations of Deductive Databases and Logic Programming , pages 547?585. Los Altos , CA : Morgan Kaufmann.
Mints , Grigori . 2000. A Short Introduction to Intuitionistic Logic . New York : Kluwer Academic/Plenum Publishers.
Moore , Robert C . 2002. A complete , efficient sentence-realization algorithm for unification grammar . In Proceedings , International Natural Language Generation Conference , Harriman , New York , pages 41?48.
Salvati , Sylvain . 2005. Proble`mes de filtrage et proble`mes d?analyse pour les grammaires cate?gorielles abstraites . Doctoral dissertation , l?Institut National Polytechnique de Lorraine.
Salvati , Sylvain . 2007. Encoding second order string ACG with deterministic tree walking transducers . In Shuly Wintner , editor , Proceedings of FG 2006: The 11th conference on Formal Grammar , pages 143?156.
FG Online Proceedings . Stanford , CA : CSLI Publications.
Seki , Hiroyuki , Takashi Matsumura , Mamoru Fujii , and Tadao Kasami . 1991. On multiple contextfree grammars . Theoretical Computer Science 88, 191?229.
Shieber , Stuart M ., Yves Schabes , and Fernando C . N.
Pereira . 1995. Principles and implementations of deductive parsing . Journal of Logic Programming 24, 3?36.
Sikkel , Klaas . 1997. Parsing Schemata . Berlin:
Springer.
S?rensen , Morten Heine and Pawe ? Urzyczyn . 2006.
Lectures on the Curry-Howard Isomorphism . Amsterdam : Elsevier.
Ullman , Jeffrey D . 1988. Principles of Database and KnowledgeBase Systems . Volume I . Rockville , MD.:
Computer Science Press.
Ullman , Jeffrey D . 1989a . Bottom-up beats topdown for Datalog . In Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems , Philadelphia , pages 140?149.
Ullman , Jeffrey D . 1989b . Principles of Database and KnowledgeBase Systems . Volume II : The New Technologies . Rockville , MD .: Computer Science Press.
Ullman , Jeffrey D . and Allen Van Gelder . 1988. Parallel complexity of logical query programs . Algorithmica 3, 5?42.
David J . Weir . 1988. Characterizing Mildly Context-Sensitive Grammar Formalisms . Ph.D . dissertation.
University of Pennsylvania.
183
