k-valued Non-Associative Lambek Categorial Grammars 
are not Learnable from Strings
Denis Be?chet
INRIA , IRISA
Campus Universitaire de Beaulieu
Avenue du Ge?ne?ral Leclerc
3504 2 Rennes Cedex


Annie Foret
Universite ? de Rennes1, IRISA
Campus Universitaire de Beaulieu
Avenue du Ge?ne?ral Leclerc
3504 2 Rennes Cedex



This paper is concerned with learning cat-
egorial grammars in Gold?s model . In
contrast to k-valued classical categorial
grammars , k-valued Lambek grammars
are not learnable from strings . This re-
sult was shown for several variants but
the question was left open for the weakest one , the non-associative variant NL . 
We show that the class of rigid and k-valued NL grammars is unlearnable from strings  , for each k ; this result is obtained by a specific construction of a limit point in the considered class  , that does not use product operator . 
Another interest of our construction is that it provides limit points for the whole hierarchy of Lambek grammars  , including the recent pregroup grammars . 
Such a result aims at clarifying the possible directions for future learning algorithms : it expresses the difficulty of learning categorial grammars from strings and the need for an adequate structure on examples  . 
1 Introduction
Categorial grammars ( Bar-Hillel , 1953) and Lambek grammars ( Lambek , 1958; Lambek ,  1961 ) have been studied in the field of natural language processing  . They are well adapted to learning perspectives since they are completely lexicalized and an actual way of research is to determine the subclasses of such grammars that remain learnable in the sense of 
Gold ( Gold , 1967).
We recall that learning here consists to define an algorithm on a finite set of sentences that converge to obtain a grammar in the class that generates the examples  . Let G be a class of grammars , that we wish to learn from positive examples . Formally , let L ( G ) denote the language associated with grammar G , and let V be a given alphabet , a learning algorithm is a function ? from finite sets of words in V ? to G  , such that for all G ? G with L ( G ) =< ei>i?N there exists a grammar G ? ? G and there exists  n0 ? N such that : ? n > n0  ? ( e1 ,   .   .   . , en ) = G ? ? G with L(G ?) = L(G) . 
After pessimistic unlearnability results in ( Gold ,  1967) , learnability of nontrivial classes has been proved in  ( Angluin , 1980) and ( Shinohara ,  1990) . 
Recent works from ( Kanazawa , 1998) and ( Nicolas , 1999) following ( Buszkowski and Penn ,  1990 ) have answered the problem for different subclasses of classical categorial grammars  ( we recall that the w-hole class of classical categorial grammars is equivalent to contextfree grammars  ; the same holds for the class of Lambek grammars ( Pentus , 1993) that is thus not learnable in Gold?s model ) . 
The extension of such results for Lambek grammars is an interesting challenge that is addressed by works on logic types from  ( Dudau-Sofronie et al ,  2001 )   ( these grammars enjoy a direct link with Montague semantics  )  , learning from structures in ( Re-tor and Bonato , september 2001) , complexity results from ( Flore?ncio ,  2002 ) or unlearnability results from ( Foret and Le Nir , 2002a ; Foret and Le Nir , 2002b ) ; this result was shown for several variants but the question was left open for the basic variant  , the non-associative variant NL . 
In this paper , we consider the following question : is the non -associative variant NL of k-valued Lambek grammars learnable from strings  ; we answer by constructing a limit point for this class  . Our construction is in some sense more complex than those for the other systems since they do not directly translate as limit point in the more restricted system NL  . 
The paper is organized as follows . Section 2 gives some background knowledge on three main aspects : Lambek categorial grammars  ; learning in Gold?s model ; Lambek pregroup grammars that we use later as models in some proofs  . Section 3 then presents our main result on NL ( NL denotes non-associative Lambek grammars not allowing empty sequence  ) : after a construction over view , we discuss some corollaries and then provide the details of proof  . Section 4 concludes . 
2 Background 2.1 Categorial Grammars
The reader not familiar with Lambek Calculus and its non-associative version will find nice presentation in the first ones written by Lambek  ( Lambek , 1958; Lambek , 1961) or more recently in ( Kandul-ski , 1988; Aarts and Trautwein , 1995; Buszkowski , 1997; Moortgat , 1997; de Groote , 1999; de Groote and Lamarche ,  2002) . 
The types Tp , or formulas , are generated from a set of primitive types Pr , or atomic formulas by three binary connectives ? / ?   ( over )  ,  ? \ ?  ( under ) and ??? ( product ) : Tp::=PrT p\T pTp/T pT p?T p . As a logical system , we use a Gentzen-style sequent presentation . A sequent ?` A is composed of a sequence of formulas ? which is the antecedent configuration and a succedent formula A  . 
Let ? be a fixed alphabet . A categorial grammar over ? is a finite relation G between ? and Tp  . If < c , A > ? G , we say that G assigns A to c , and we write G : c7 ? A . 
2.1.1 Lambek Derivation ` L
The relation ` L is the smallest relation ` between Tp + and Tp  , such that for all ? , ??? Tp + , ? , ?? ?
T p ? and for all A , B , C ? Tp : ? , A , ??` C?`A(Cut )? , ? , ? ?` C
A`A(Id ) ?` A ? , B , ? ?` C/L ? , B/A , ? , ? ? ` C ? , A ` B/R ? ` B/A ?` A ? , B , ? ? ` C\L ? , ? , A\B , ? ?` C
A , ? ` B\R ? ` A\B ? , A , B , ? ?` C?L ? , A ? B , ??` C?`A ? ?` B?R ? , ??` A?B We write L ? for the Lambek calculus with empty antecedents  ( left part of the sequent )  . 
2 . 1 . 2 Non-associative Lambek Derivation ` NL In the Gentzen presentation  , the derivability relation of NL holds between a term in S and a formula in Tp  , where the term language is S : := T p(S , S) . 
Terms in S are also called G-terms . A sequent is a pair (?, A ) ? S ? T p . The notation ?[?] represents a G-term with a distinguished occurrence of ?  ( with the same position in premise and conclusion of a rule  )  . The relation ` NL is the smallest relation ` between S and Tp  , such that for all ? , ? ? S and for all A , B , C ? Tp : ?[ A]`C ?` A(Cut ) ? [?] ` C
A`A(Id ) ?` A ? [ B]`C/L ? [( B/A , ?)]` C (? , A ) ` B/R ? ` B/A ?` A ? [ B]`C\L ? [(? , A\B )] ` C(A , ?) ` B\R ? ` A\B ? [( A , B )] ` C?L ? [ A?B]`C ? ` A ? ` B?R(? , ? )  `  ( A ? B ) We write NL ? for the non-associative Lambek calculus with empty antecedents  ( left part of the sequent )  . 
2.1.3 Notes
Cut elimination . We recall that cut rule can bee-liminated in ` L and ` NL : every derivable sequent has a cut-free derivation  . 
Type order . The order or d(A ) of a type A of L or
NL is defined by : ord ( A ) = 0 if A is a primitive type or d ( C1/C2 ) = max ( ord ( C1 )  , ord(C2)+1) ord(C1\C2) = max(ord(C1)+1 , ord(C2)) ord ( C1?C2) = max(ord(C1) , ord ( C2)) 2 . 1 . 4 Language . 
Let G be a categorial grammar over ? . G generates a string c1 .   .   . cn ??+ iff there are types A1, .   .   .   , An ? Tp such that : G : ci 7? Ai ( 1 ? i ? n ) and A1 ,   .   .   . , An`LS . The language of G , written LL ( G ) is the set of strings generated by G . 
We define similarly LL?(G ) , LNL(G ) and LNL?(G ) replacing ` L by ` L ? , `NL and ` NL ? in the sequent where the types are parenthesized in some way  . 
2.1.5 Notation.
In some sections , we may write simply ` instead of ` L , ` L ? , ` NL or ` NL ? . We may simply write
L(G ) accordingly.
2.1.6 Rigid and k-valued Grammars.
Categorial grammars that assign at most k types to each symbol in the alphabet are called k-valued grammars  ; 1-valued grammars are also called rigid grammars . 
Example 1 Let ?1 = John , Mary , likes and let Pr = S , N for sentences and nouns respectively . 
Let G1 = John 7? N , Mary 7? N , likes 7? N\(S/N ) . We get ( John likes Mary ) ? LNL(G1) since((N , N\(S/N )) , N ) ` NLS . 
G1 is a rigid ( or 1-valued ) grammar.
2.2 Learning and Limit Points
We now recall some useful definitions and known properties on learning  . 
2.2.1 Limit Points
A class CL of languages has a limit point iff there exists an infinite sequence < Ln>n ? N of languages in CL and a language L?CL such that :   L0   ( L 1 .   .   .  (  . . . ( Ln ( .   .   . and L = ? n ? NLn(L is a limit point of CL ) . 
2.2.2 Limit Points Imply Unlearnability
The following property is important for our purpose  . If the languages of the grammars in a class G have a limit point then the class G is unlearnable  .  1 2 . 3 Some Useful Models For ease of proof , in next section we use two kinds of models that we now recall : free groups and pregroups introduced recently by  ( Lambek , 1999) as an alternative of existing type grammars . 
2.3.1 Free Group Interpretation.
Let FG denote the freegroup with generators Pr , operation ? and with neutral element 1 . We associate with each formula C of L or NL , an element in FG written [[ C ]] as follows : [[ A ]] = A if A is a primitive type [[  C1  \  C2]]  = [[  C1]]?1  ? [[  C2]]  [[  C1  /  C2]]  = [[  C1]]  ? [[  C2]]?1  [[  C1  ?  C2]]  = [[  C1]]  ? [[  C2]] 
We extend the notation to sequents by : [[ C1 , C2 ,   .   .   .   , Cn ]] = [[ C1]]  ? [[  C2]] ????? [[ Cn ]] The following property states that FG is a model for L  ( hence for NL ) : if ? ` LC then [[?]] = FG [[ C ]] 2 . 3 . 2 Free Pregroup Interpretation Pregroup . A pregroup is a structure ( P , ?  ,  ? , l , r , 1) such that ( P , ? ,  ? , 1) is a partially ordered monoid 2 and l , rare two unary operations on P that satisfy for alla ? Pala ?  1 ? aalandaar ? 1 ? ara . 
Free pregroup . Let ( P , ?) be an ordered set of primitive types , P (  ) = p(i)p?P , i ? Z is the set of atomic types and T ( P , ?) = (
P ( )) ? = p(i1)1 ? ? ? p(in)n0?k?n , pk ? P and ik ? Z is the set of types . For X and Y ? T ( P , ?) , X ? Y i if this relation is deductible in the following system where p  , q ? P , n , k ? Z and X , Y , Z?T ( P , ? ) :  1This implies that the class has in finite elasticity . A class CL of languages has in finite elasticity iff ? < ei > i ? N sentences ? < Li > i ? N languages in CL?i?N : ei  6? Li and e1  ,   .   .   . , en?Ln+1 . 
2We briefly recall that a monoid is a structure < M  ,  ? ,  1 > , such that ? is associative and has a neutral element  1   ( ? x?M : 1? x = x?1 = x )  . A partially ordered monoid is a monoid M ,  ? , 1) with a partial order ? that satisfies ? a , b , c : a ? b ? c ? a ? c ? b and a ? c ? b ? c . 
X ? X(Id )
X ? Y Y ? Z ( Cut)
X ? Z
XY ? Z(AL )
X p(n)p(n+1)Y ? Z
X ? Y Z ( AR)
X ? Y p(n+1) p(n)Z
X p(k)Y?Z ( INDL)
X q(k)Y ? Z
X ? Y p(k)Z(INDR)
X ? Y q(k ) Z q ? p if k is even , and p?qifk is odd This construction , proposed by Buskowski , defines a pregroup that extends ? on primitive types 
P to T ( P , ?) 3.
Cut elimination . As for L and NL , cut rule can be eliminated : every derivable inequality has a cut-free derivation  . 
Simple free pregroup . A simple free pregroup is a free pregroup where the order on primitive type is equality  . 
Free pregroup interpretation . Let FP denotes the simple free pregroup with Pr as primitive types  . 
We associate with each formula C of L or NL , an element in FP written [ C ] as follows : [ A] = A if A is a primitive type [  C1  \  C2]  = [  C1]r[C2]  [  C1  /  C2]  = [  C1][C2]l  [  C1  ?  C2]  = [  C1][C2] 
We extend the notation to sequents by : [ A1, .   .   .   , A n ] = [ A1] ? ? ? [ An ] The following property states that FP is a model for L  ( hence for NL ) : if ? ` LC then [?] ? FP [ C] . 
3 Limit Point Construction 3 . 1 Method overview and remarks Form of grammars . We define grammars Gn where A , B , Dn and En are complex types and S is the main type of each grammar : Gn = a  7? A/B ; b7?Dn ; c7?E n\S
Some key points.
? We prove that a kbc0?k?n ? L ( Gn ) using the following properties : 3Left and right adjoints are defined by ( p ( n ) )l = p ( n?1 )  , ( p(n )) r = p(n+1) , ( XY ) l = YlXl and ( XY ) r = Y rXr . We write p for p(0) . 
B`A ( but A6`B ) ( A/B , Dn+1) ` Dn
D n ` E n
En`En+1 we get : bc?L ( Gn ) since Dn`En if w?L ( Gn ) the naw ? L ( Gn+1 ) since ( A/B , Dn+1 ) ` Dn`En ` En+1 ? The condition A 6` Biscrucial for strictness of language inclusion  . In particular : ( A/B , A ) 6` A , where A = D0 ? This construction is in some sense more complex than those for the other systems  ( Foret and Le Nir , 2002a ; Foret and Le Nir , 2002b ) since they do not directly translate as limit points in the more restricted system NL  . 
3.2 Definition and Main Results
Definitions of Rigid grammars Gn and G ?
Definition 1 Let p , q , S , three primitive types . We define :
A = D0 = E0 = q/(p\q)
B = p
Dn+1 = ( A/B)\Dn
En+1 = ( A/A)\E n
Let Gn = ??? a 7? A/B = ( q / ( p\q ) ) / p b 7? Dn c 7? En \ S ? ? ? Let G ? =  a 7? ( p/p ) b7 ? pc7? ( p\S ) 
MainProperties
Proposition 1 ( language description ) ? L ( Gn ) = akb c0?k?n ? L ( G ? ) = ak b c0 ? k . 
From this construction we get a limit point and the following result  . 
Proposition 2 ( NL-non-learnability ) The class of languages of rigid ( or k-valued for an arbitrary k ) non-associative Lambek grammars ( not allowing empty sequence and without product ) admits a limit point ; the class of rigid ( or k-valued for an arbitrary k ) non-associative Lambek grammars ( not allowing empty sequence and without product ) is not learnable from strings . 
3.3 Details of proof for Gn
Lemma akb c0?k?n ? L(Gn)
Proof : It is relatively easy to see that for 0 ? k ? n , akbc?L(Gn ) . We have to consider ( ( a ? ? ? ( a ( a ? ? ? ? k b ) ) ? ? ?  ) c ) and prove the following sequent in NL : (   ( a ??? ( a ???? ( ( A / B )  ,   .   .   .   , (( A/B ) , ??? ? k b ? ??? ( ( A / B )  \ ? ? ? \  ( ( A / B ) \???? n
A ) ? ? ?) ,  ? ? ? ) , c ? ? ? ? ( ( A / A )  \ ? ? ? \  ( ( A / A ) \???? n
A ) ???)\ S )) ` NLS
Models of NL
For the converse ,   ( for technical reasons and to ease proofs ) we use both free group and free pregroup models of NL since a sequent is valid in NL only if its interpretation is valid in both models  . 
Translation in free groups
The freegroup translation for the types of Gn is : [[ p ]] = p  , [[ q ]] = q , [[ S ]] = S [[ x/y ]] = [[ x ]] ? [[ y]]?1 [[ x\y ]] = [[ x]]?1 ? [[ y ]] [[ x ? y ]] = [[ x ]] ? [[ y ]] Typeraising disappears by translation : [[ x/  ( y\x ) ]] = [[ x ]] ? ( [[ y ]]?1?[[x ]] ) ?1 = [[ y ]]
Thus , we get : [[ A ]] = [[ D0]] = [[ E0]] = [[ q/ ( p\q ) ]] = p [[ B ]] = p [[ A/B ]] = [[ A ]] ? [[ B]]?1  =  pp?1  =  1  [[  Dn+1]]  = [[ ( A/B ) \Dn ]] = [[ Dn ]] = [[ D0]] = p[[En+1]] = [[ ( A/A ) \En ]] = [[ En ]] = [[ E0]] = p
Translation in free pregroups
The free pregroup translation for the types of Gn is : [ p ] = p  , [ q ] = q , [ S ] = S[x\y ] = [ x]r [ y][y/x ] = [ y] [ x]l[x?y ] = [ x][y] 
Typeraising translation : [ x/ ( y\x ) ] = [ x ] ( [y]r[x] ) l = [ x][x]l[y ] [ x/ ( x\x ) ] = [ x ] ( [ x]r[x ] ) l = [ x][x]l[x ] = [ x]
Thus , we get : [ A ] = [ D0] = [ E0] = [ q/ ( p\q ) ] = qqlp[B]=p[A/B]=[A][B]l = q  qlppl [   Dn+1]  = [ ( A/B ) ] r[Dn ] = pprq qr ? ? ? ? n+1 q qlp[En+1] = [ ( A/A ) \En ] = [ A][A]lq qlp = q qlp

L(Gn ) ? akbak ? cak ? ?;0 ? k , 0 ? k ? ,   0 ? k ? ? Proof : Let ? n denote the type assignment by the rigid grammar Gn  . Suppose ? n(w)`S , using free groups [[? n(w )]] =  S ; -This entails that w has exactly one occurrence of c  ( since [[ ? n ( c ) ]] =  p?1S and the other type images are either 1 or p ) -Then , this entails that w has exactly one occurrence of b on the left of the occurrence of c  ( since [[ ? n ( c ) ]] = p?1S , [[? n(b )]] = p and [[? n(a )]] = 1)

L(Gn ) ? ak b c0 ? k
Proof : Suppose ? n(w)`S , using pregroups [ ? n(w )] ? S . We can write w = akbak ? cak ?? for some k , k ? , k ?? , such that : [? n ( w ) ] = q qlppl ? ? ? ? k p p r q q r ? ? ? ? n q q l p q l p p l ? ??? k?prq qr Sq qlppl ??? ? k ? ? 
For q = 1 , we get ppl ???? kppr ??? ? npppl ???? k?prS ppl ? ? ? ? k ? ? ? S and it yields pppl ? ? ? ? k ? prSppl ? ? ? ? k ? ? ? S  . 
We now discuss possible deductions ( note that p plp pl ? ? ? ppl = ppl ) : ? if k ? and k ? ? 6=   0: pp pl pr Sp pl ? S impossible . 
? if k ? 6= 0 and k ? ? = 0: pppl prS ? S impossible . 
? if k ? = 0 and k ? ?6 = 0: p prSppl ? S impossible . 
? if k ? = k ? ? = 0 : w?akb c0?k ( Final ) Lemma
L(Gn ) ? ak b c0 ? k ? n
Proof : Suppose ? n(w)`S , using pregroups [ ? n(w )] ? S . We can write w = akbc for some k , such that : [? n ( w ) ] = q qlppl ? ? ? ? k p prq q r ? ? ? ? n q q l q q r S W e use the following property  ( its proof is in Appendix A ) that entails that 0 ? k ? n . 
( Auxiliary ) Lemma : if (1) X , Y , q q l p , prq qr , S ? S where X ? ppl , q q l ? and Y ? q q r , ppr ? then ( 2 ) nbalt ( X q q l ) ? nbalt ( qqrY )   ( 2bis ) nbalt ( X ppl ) ? nbalt ( pprY ) where nbalt counts the alternations of p?s and q ?s sequences  ( for getting/dropping their exponents )  . 
3.4 Details of proof for G ?
Lemma akb c0?k?L(G ?)
Proof : As with Gn , it is relatively easy to see that for k ? 0 , akbc?L(G ?) . We have to consider ( ( a ? ? ? ( a ( a ? ? ? ? k b ) ) ? ? ?  ) c ) and prove the following sequent in NL : ( ( ( p/p )  ,   .   .   .   , (( p/p ) , ???? kp )???) , ( p\S )) ` NLS

L(G ?) ? ak b c0 ? k
Proof : Like for w ? Gn , due to free groups , a word of L ( G ? ) has exactly one occurrence of c and one occurrence of b on the left of c  ( since [[?? ( c ) ]] = p?1S , [[??( b )]] = p and [[??( a )]] = 1) . 
Suppose w = akbak ? cak ? ? a similar discussion as for Gn in pregroups  , gives k ? = k ? ? = 0 , hence the result3 . 5 Non-learnability of a Hierarchy of Systems An interest point of this construction : It provides a limit point for the whole hierarchy of Lambek grammars  , and pregroup grammars . 
Limit point for pregroups
The translation [?] of Gn gives a limit point for the simple free pregroup since for i ? ?  ,  0 ,  1 ,  2 ,   .   .   . : ? i(w)`NLS iff w?LNL(Gi ) by definition ; ? i(w ) ` NLS implies [? i(w )] ? S by models ; [? i(w )] ? S implies w?LNL(Gi ) from above . 
Limit point for NL ?
The same grammars and languages work since for i ?  ?  ,  0 ,  1 ,  2 ,   .   .   . : ? i(w ) ` NLS iff [? i(w )] ? S from above ; ? i ( w ) `NLS implies ? i ( w ) ` NL ? S by hierarchy ; ? i(w ) ` NL ? Simplies [ ? i(w )] ? S by models . 
Limit point for L and L ?
The same grammars and languages work since for i ?  ?  ,  0 ,  1 ,  2 ,   .   .   . : ? i(w ) ` NLS iff [? i(w )] ? S from above ; ? i ( w ) `NLS implies ? i ( w ) `LS using hierarchy ; ? i ( w ) `LS implies ? i ( w ) `L ? S using hierarchy ; ? i(w)`L ? Simplies [ ? i(w )] ? S by models . 
To summarize : w?LNL ( Gi ) iff [? i ( w ) ] ? S iff w?LNL ? ( Gi ) iff w?LL ( Gi ) iff w?LL ? ( Gi ) 4 Conclusion and Remarks Lambek grammars . We have shown that without empty sequence , non-associative Lambek rigid grammars are not learnable from strings  . With this result , the whole landscape of Lambek-like rigid grammars  ( or k-valued for an arbitrary k ) is now described as for the learnability question  ( from strings , in Gold?s model ) . 
Non-learnability for subclasses . Our construct is of order 5 and does not use the product operator . 
Thus , we have the following corollaries : ? Restricted connectives : k-valued NL  , NL ? , L and L?grammars without product are not learnable from strings  . 
? Restricted type order :- k-valued NL , NL ? , L and L?grammars ( without product ) with types not greater than order 5 are not learnable from strings4   . 
-k-valued free pregroup grammars with types not greater than order  1 are not learnable from strings5   . 
The learnability question may still be raised for NL grammars of order lower than  5  . 
4 Evenless for some systems . For example in L ? , all En collapse to A 5The order of a type pi11 ? ? ? pikk is the maximum of the absolute value of the exponents : max  ( i1 ,   .   .   . , ik ) . 
Special learnable subclasses . Note that however , we get specific learnable subclasses of k-valued grammars when we consider NL  , NL ? , LorL ? without product and webind the order of types in grammars to be not greater than  1  . This holds for all variants of Lambek grammars as a corollary of the equivalence between generation in classical categorial grammars and in Lambek systems for grammars with such product-free types  ( Buszkowski ,  2001) . 
Restriction on types . An interesting perspective for learnability results might be to introduce reasonable restrictions on types  . From what we have seen , the order of type alone ( order 1 excepted ) does not seem to be an appropriate measure in that context  . 
Structured examples . These results also indicate the necessity of using structured examples as input of learning algorithms  . What intermediate structure should then be taken as a good alternative between insufficient structures  ( strings ) and linguistic unrealistic structures ( full proof tree structures ) remains an interesting challenge . 

E . Aarts and K . Trautwein .  1995 . Non-associative Lambek categorial grammar in polynomial time  . Mathematical Logic Quaterly , 41:476?484 . 
Dana Angluin .  1980 . Inductive inference of formal languages from positive data  . Information and Control , 45:117?135 . 
Y . Bar-Hillel .  1953 . A quasiarithmetical notation for syntactic description  . Language , 29:47?58 . 
Wojciech Buszkowski and Gerald Penn .  1990 . Categori-algrammars determined from linguistic data by unification  . Studia Logica , 49:431?454 . 
W . Buszkowski .  1997 . Mathematical linguistics and proof theory . In van Benthemandter Meulen ( van Benthemandter Meulen ,  1997) , chapter 12 , pages 683?736 . 
Wojciech Buszkowski .  2001 . Lambek grammars based on pregroups . In Philippede Groote , Glyn Morill , and Christian Retore ? , editors , Logical aspects of computational linguistics : 4th International Conference , LACL 2001 , Le Croisic , France , June 2001 , volume 2099 . 

Philippede Groote and Franc?ois Lamarche .  2002 . Classical non-associative lambek calculus . Studia Logica , 71 . 1 (2) . 
Philippe de Groote .  1999 . Non-associative Lambek calculus in polynomial time  . In 8th Workshop on theorem proving with analytic tableaux and related methods  , number 1617 in Lecture Notes in Artificial Intelligence . Springer-Verlag , March . 
Dudau-Sofronie , Tellier , and Tommasi .  2001 . Learning categorial grammars from semantic types . In 13th Amsterdam Colloquium . 
C . Costa Flore?ncio .  2002 . Consistent Identification in the Limit of the Class k-value dis NP-hard  . In LACL . 
Annie Foret and Yannick Le Nir . 2002a . Lambek rigid grammars are not learnable from strings  . In COL-ING?2002 ,   19th International Conference on Computational Linguistics  , Taipei , Taiwan . 
Annie Foret and Yannick Le Nir . 2002b . On limit points for some variants of rigid lambek grammars  . In IC-GI?2002 , the 6th International Colloquium on Grammatical Inference  , number 2484 in Lecture Notes in Artificial Intelligence . Springer-Verlag . 
E . M . Gold .  1967 . Language identification in the limit . 
Information and control , 10:447?474.
Makoto Kanazawa .  1998 . Learnable classes of categorial grammars . Studies in Logic , Language and Information . Fo LLI&CSLI . distributed by Cambridge
University Press.
Maciej Kandulski .  1988 . The non-associative lambek calculus . In W . Marciszewski W . Buszkowski and J . Van Bentem , editors , Categorial Grammar , pages 141?152 . Benjamins , Amsterdam . 
Joachim Lambek .  1958 . The mathematics of sentence structure . American mathematical monthly , 65:154?169 . 
Joachim Lambek .  1961 . On the calculus of syntactic types . In Roman Jakobson , editor , Structure of language and its mathematical aspects  , pages 166?178 . 
American Mathematical Society.
J . Lambek .  1999 . Type grammars revisited . In Alain Lecomte , Franc?ois Lamarche , and Guy Perrier , editors , Logical aspects of computational linguistics : Second International Conference  , LACL ?97 , Nancy , France , September 22?24 , 1997; selected papers , volume 1582 . Springer-Verlag . 
Michael Moortgat .  1997 . Categorial type logic . In van Benthemandter Meulen ( van Benthemandter Meulen ,  1997) , chapter 2 , pages 93?177 . 
Jacques Nicolas .  1999 . Grammatical inference asu-nification . Rapport de Recherche RR-3632, INRIA . 

Mati Pentus .  1993 . Lambek grammars are contextfree . 
In Logic in Computer Science . IEEE Computer Society Press . 
Christian Retore ? and Roberto Bonato . september 2001 . Learning rigid lambek grammars and minimalist grammars from structured sentences  . Third workshop on Learning Language in Logic , Strasbourg . 
T . Shinohara .  1990 . Inductive inference from positive data is powerful  . In The 1990 Workshop on Computational Learning Theory , pages 97?110 , San Mateo , 
California . Morgan Kaufmann.
J . van Benthem and A . ter Meulen , editors .  1997 . Handbook of Logic and Language . North-Holl and Elsevier,

Appendix A . Proof of Auxiliary Lemma ( Auxiliary ) Lemma : if ( 1 ) X Y q q l p p r q q r S ? S where X ? p p l , q q l ? and Y ? q q r , ppr ? then ( 2 ) nbalt ( X q q l ) ? nbalt ( qqrY )   ( 2bis ) nbalt ( X ppl ) ? nbalt ( pprY ) where nbalt counts the alternations of p?s and q ?s sequences  ( for getting/dropping their exponents )  . 
Proof : By induction on derivations in Gentzen style presentation of free pregroups  ( without Cut )  . 
Suppose X Y Z S ? S where ???
X ? ppl , q q l ?
Y ? qqr , ppr ?
Z ? ( q q lppr q q r ), ( q q l q q r ), ( q q r ), 1
We show that nbalt ( X q q l ) ? nbalt ( qqrY ) nbalt ( X ppl ) ? nbalt ( pprY ) The last inference rule can only be ( AL ) ? Case ( AL ) on X : The antecedent is similar with X ? instead of X  , where X is obtained from X ? by insertion ( in fact inserting qlq in the middle of q qlas the replacement of q ql with q ql q qlor similarly with p instead of q  )  . 
-By such an insertion : ( i ) nbalt ( X ? q q l ) = nbalt ( X q q l )   ( similar for p )  . 
-By induction hypothesis : ( ii ) nbalt ( X ? q q l ) ? nbalt ( qqrY )   ( similar for p )  . 
-Therefore from ( i )   ( ii ) : nbalt ( X q q l ) ? nbalt ( qqrY )   ( similar for p )  . 
? Case ( AL ) on Y : The antecedent is XY ? ZS ? S where Y is obtained from Y ? by insertion  ( in fact insertion of ppr or q q r )  , such that Y ? ? ppr , qqr ? . Therefore the induction applies nbalt ( X q q l ) ? nbalt ( qqrY ? ) and nbalt ( qqrY ) ? nbalt ( qqrY ? )   ( similar for p ) hence the result . 
? Case ( AL ) on Z ( Z nonempty ) :- if Z = ( q q l p p r q q r ) the antecedent is
X Y Z ? S ? S , where Z ? = q q l q q r .
- if Z = ( qqlqqr ) the antecedent is XYZ ? S ?
S , where Z ? = q q r ; - if Z = ( qqr ) the antecedent is X Y Z ? S ? S , where Z ? =  . 
In all three cases the hypothesis applies to XYZ ? and gives the relationship between X and Y  . 
? case ( AL ) between X and Y : Either X = X ? ? q ql and Y = qqrY ? ? or X = X ? ? p pl and Y = p prY ? ?  . 
In the q case , the last inference step is the introduction of qlq: 
X ? ? q q r Y ? ? Z S ? S
X ? ? q q l ? ? ? ?
X q q r Y ? ? ? ? ? ?


We now detail the q case . The antecedent can be rewritten as X??Y ZS?S and we have:  ( i ) nbalt ( X q q l ) = nbalt ( X ? ? q q l q q l ) = nbalt ( X ? ? q q l ) nbalt ( X ppl ) = nbalt ( X ? ? q qlppl ) = 1+nbalt ( X ? ? q q l ) nbalt ( qqrY ) = nbalt ( q q r q q r Y ? ? ) = nbalt ( qqrY ?? ) nbalt ( pprY ) = nbalt ( pprq qrY ?? ) = 1+nbalt ( qqrY ?? ) We can apply the induction hypothesis to
X ? ? Y Z S ? S and get ( ii ) : nbalt ( X ? ? q q l ) ? nbalt ( qqrY ) Finally from ( i )   ( ii ) and the induction hypothesis : nbalt ( X q q l ) = nbalt ( X ? ? q q l ) ? nbalt ( qqrY ) nbalt ( X ppl ) = 1+nbalt ( X ? ? q q l ) ? 1+nbalt ( qqrY ) = 1+nbalt ( q q r q q r Y ? ? ) = 1+nbalt ( qqrY ?? ) = nbalt ( pprY ) The second case with p instead of q is similar . 
