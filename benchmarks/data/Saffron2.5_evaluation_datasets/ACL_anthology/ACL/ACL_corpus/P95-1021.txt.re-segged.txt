DTree Grammars
Owen Rambow
CoGenTex , Inc.
840 Hanshaw Road
Ithaca , NY 14850
owen@cogentex.com
K . Vijay-Shanker
Department of Computer
Information Science
University of Delaware
Newark , DE 19716
viiay?udel , edu
David Weir
School of Cognitive &
Computing Sciences
University of Sussex
Brighton , BN19HQ , UK.
david , weir ~ cogs , susx.ac.uk
Abstract
DTG are designed to share some of the
advantages of TAG while overcoming some of its limitations  . DTG involve two composition operations called subsertion and sister-adjunction  . The most distinctive feature of DTG is that , unlike TAG , there is complete uniformity in the way that the two DTG operations relate lexical items : subsertion always corresponds to complementation and sister-adjunction to modification  . Furthermore , DTG , unlike TAG , can provide a uniform analysis for wh-movement in English and Kashmiri  , des-pite the fact that the whelement in Kashmiri appears in sentence-second position  , and not sentence-initial position as in English . 
1 Introduction
We define a new grammar formalism , called DTree Grammars ( DTG ) , which arises from work on Tree-Adjoining Grammars  ( TAG )   ( Joshi et al ,  1975) . A salient feature of TAG is the extende domain of locality it provides  . Each elementary structure can be associated with a lexical item  ( as in Lexicalized TAG ( LTAG )   ( Joshi ~ Schabes ,  1991)) . Properties related to the lexical item ( such as subcategorization , agreement , certain types of word order variation ) can be expressed within the elementary structure ( Kroch , 1987; Frank ,  1992) . In addition , TAG remain tractable , yet their generative capacity is sufficient to account for certain syntactic phenomena that  , it has been argued , liebey ond ContextFree Grammars ( CFG )   ( Shieber ,  1985) . TAG , however , has two limitations which provide the motivation for this work  . The first problem ( discussed in Section 1 . 1 ) is that the TAG operations of substitution and adjunction do not map cleanly onto the relations of complementation admodification  . A second problem ( discussed in Section 1 . 2 ) has to do with the inability of TAG to provide analyses for certain syntactic phenomena  . In developing DTG we have tried to overcome these problems while remaining faithful to what we see as the key advantages of TAG  ( in particular , its enlarged domain of locality ) . In Section 1 . 3 we introduce some of the key features of DTG and explain how they are intended to address the problems that we have identified with TAG  . 
1, 1 Derivations and Dependencies
In LTAG , the operations of substitution and adjunction relate two lexical items  . It is therefore natural to interpret these operations as establishing a direct linguistic relation between the two lexical items  , namely a relation of complementation ( predicate-argument relation ) or of modification . In purely CFG-based approaches , these relations are only implicit . However , they represent important linguistic intuition , they provide a uniform interface to semantics , and they are , as Schabes ~ Shieber (1994) argue , important in order to support statistical parameters in stochastic frameworks and appropriate adjunction constraints in TAG  . In many frameworks , complementation admodification are in fact made explicit : LFG  ( Bresnan & Kaplan ,  1982 ) provides a separate functional ( f - ) structure , and dependency grammars ( see e . g . Mel'~uk ( 1988 ) ) use these notions as the principal basis for syntactic representation  . We will follow the dependency literature in referring to complementation admodification as syntactic dependency  . As observed by Rambow and Joshi (1992) , for TAG , the importance of the dependency structure means that not only the derived phrase-structure tree is of interest  , but also the operations by which we obtain edit from elementary structures  . This information is encoded in the derivation tree  ( Vijay-Shanker ,  1987) . 
However , as Vijay-Shanker (1992) observes , the TAG composition operations are not used uniformly : while substitution is used only to add a  ( nominal ) complement , adjunction is used both for modification and ( clausal ) complementation . Clausal complementation could not be handled uniformly by substitution because of the existence of syntactic phenomena such as long -distance wh-movement in English  . Furthermore , there is an inconsistency in mentation iTAG@: nominal complements are substituted into their governing verb's tree  , while the governing verb's tree is adjoined into its own clausal complement  . The fact that adjunction and substitution are used in a linguistically heterogeneous manner means that  ( standard ) " lAG derivation trees do not provide a good representation f the dependencies between the words of the sentence  , i . e . , of the predicate-argument a d modification structure  . 

S~adore
Mary/OBJ\seemhot dog claim SU~\[MODI sUBJMary/OBJ\seem spicy he hot dog claim 
IMODMOD~MODISUBJ small spicy small he Figure 1: Derivation trees for ( 1 ) : original definition ( left )  ; Schabes & Shieber definition ( right ) For instance , English sentence ( 1 ) gets the derivation structure shown on the left in Figure  11   . 
(1 ) Small spicy hot dog she claims Mary seems to a dore When comparing this derivation structure to the dependency structure in Figure  2  , the following problems become apparent . First , both adjectives depend on hot dog , while in the derivation structure small is a daughter of spicy  . In addition , seem depends on claim ( as does its nominal argument , he ) , and a dore depends on seem . In the derivation structure , seem is a daughter of a dore ( the direction does not express the actual dependency  )  , and claim is also a daughter of a dore ( though neither is an argument of the other )  . 

SUBJ ~" ~ OMP he seem
ICOM Padore

Mary hot dog
MOD ~. ~ OD spicy small
Figure 2: Dependency tree for (1)
Schabes & Shieber ( 1994 ) solve the first problem 1For clarity , we depart from standard TAG notational practice and annotate nodes with lexemes and arcs with grammatical function : by distinguishing between the adjunction of modifiers and of clausal complements  . This gives us the derivation structure shown on the right in Figure  1  . 
While this might provide a satisfactory treatment of modification at the derivation level  , there are now three types of operations ( two adjunctions and substitution ) for two types of dependencies ( arguments and modifiers )  , and the directionality problem for embedded clauses remains unsolved  . 
In defining DTG we have attempted to resolve these problems with the use of a single operation  ( that we call subsertion ) for handling Ml complementation and a second operation  ( called sister-adjunction ) for modification . Before discussion these operations further we consider a second problem with TAG that has implications for the design of these new composition operations  ( in particular , subsertion ) . 
1 . 2 Prob lemat ic Construct ions for TAG TAG cannot be used to provide suitable analyses for certain syntactic phenomena  , including long-distances crambling in German ( Beckete thi . , 1991) , Romance Clitics ( Bleam ,  1994) , wh-extraction ut of complex picture-NPs ( Kroch ,  1987) , and Kashmiri wh-extraction ( presented here ) . The problem in describing these phenomena with TAG arises from the fact  ( observed by Vijay-Shanker ( 1992 ) ) that adjoi-ning is an overly restricted way of combining structures  . We illustrate the problem by considering Kashmiri wh-extraction  , drawing on Bhatt (1994) . Wh-extraction in Kashmiri proceeds as in English , except that the wh-word ends up in sentence -second position  , with a topic from the matrix clause in sentence -initial position  . This is illustrated in ( 2a ) for a simple clause and in ( 2b ) for a complex clause . 
(2) a . rames hank yaady utnay tse
RameshzRG what NOM gavey OUDAT
What did you give Rames h ? b . rames hank yaal chuba as a an \[ ki
RameshzRG what is believeN perf that mekorti\]
IZRG do
What does Rames h be heve that I did ?
Since the moved element does not appear in sentence-initial position  , the TAG analysis of English wh-extraction of Kroch  ( 1987 ;  1989 )   ( in which the matrix clause is adjoined into the embedded clause  ) cannot be transferred , and in fact no linguistically plausible TAG analysis appears to be available  . 
In the past , variants of TAG have been developed to extend the range of possible analyses  . In Multi-Component TAG ( MCTAG ) ( Joshi ,  1987) , trees are grouped into sets which must be adjoined together  ( multicomponent adjunction )  . However , MCTAG lack expressive power since , while syntactic relations are invariably subject to c-command or do-minance constraints  , there is no way to state that tion in the derived tree  . MCTAG with Domination Links ( MCTAG-DL )   ( Becker et al ,  1991 ) are multicomponent systems that allow for the expression of dominance constraints  . However , MCTAG-DL share a further problem with MCTAG : the derivation structures cannot be given a linguistically meaningful interpretation  . Thus , they fail to address the first problem we discussed  ( in Section 1 . 1) . 
1.3 The DTG Approach
Vijay-Shanker ( 1992 ) points out that use of adjunction for clausal complementation in TAG corresponds  , at the level of dependency structure , to substitution at the foot nodes of the adjoined tree  . However , adjunction ( rather than substitution ) is used since , in general , the structure that is substituted may only form part of the clausal complement : he remaining substructure of the clausal complement appears above the root of the adjoined tree  . Unfortunately , as seen in the examples given in Section 1 . 2 , there are cases where satisfactory analyses cannot be obtained with adjunction  . In particular , using adjunction in this way cannot handle cases in which parts of the clausal complement are required to be placed within the structure of the adjoined tree  . 
The DTG operation of subsertion is designed to overcome this limitation  . Subsertion can be viewed as a generalization of adjunction in which components of the clausal complement  ( the subserted structure ) which are not substituted can be inters-persed within the structure that is the site of the subsertion  . Following earlier work ( Becket et al , 1991; Vijay-Shanker ,  1992) , DTG provide a mechanism involving the use of domination links  ( d-edges ) that ensure that parts of the subserted structure that are not substitute dominate those parts that are  . Furthermore , there is a need to constrain the way in which the non-substituted components can be interspersed  3  . This is done by either using appropriate feature constraints at nodes or by means of subsertion -insertion constraints  ( see Section 2 )  . 
We end this section by briefly commenting on the other DTG operation of sister-adjunction  . In TAG , modification is performed with adjunction of modifier trees that have a highly constrained form  . In particular , the foot nodes of these trees are always daughters of the root and either the leftmost or rightmost frontier nodes  . The effect of adjoining a 2In these cases the foot node is an argument node of the lexical anchor  . 
S This was also observed by Rambow (1994a ) , where an integrity constraint ( first defined for ant D/LP version of TAG ( Becketeta J . , 1991 ) ) is defined for a MCTAG-DL version called V-TAG . However , this was found to be insufficient for treating both long-distances crambling and long-distance topicalization in German  . V-TAG retains adjoining ( to handle topicalization ) for this reason . 
tree of this form corresponds ( almost ) exactly to the addition of a new ( leftmost or rightmost ) subtree below the node that was the site of the adjunction  . 
For this reason , we have equipped DTG with an ope-ration ( sister-adjunction ) that does exactly this and nothing more . From the definition of DTG in Section 2 it can be seen that the essential aspects of Schabes & Shieber  ( 1994 ) treatment for modification , including multiple modifications of a phrase , can be captured by using this operation 4 . 
After defining DTG in Section 2 , we discuss , in Section 3 , DTG analyses for the English and Kashmiri data presented in this section  . Section 4 briefly discusses DTG recognition algorithms . 
2 Definition of DTree Grammars
Ad-tree is a tree with two types of edges : domi-nation edges  ( d-edges ) and immediate domination edges ( i-edges )  . D-edges and i-edges express domi-nation and immediate domination relations between nodes  . These relations are never rescinded when d-trees are composed  . Thus , nodes separated by an i-edge will remain in a mother-daughter relationship throughout the derivation  , whereas nodes separated by and-edge can be equated or have a path of any length inserted between them during a derivation  . 
D-edges and i-edges are not distributed arbitrarily ind-trees  . For each internal node , either all of its daughters are linked by i-edges or it has a single daughter that is linked to it by a d-edge  . Each node is labelled with a terminal symbol , a nonterminal symbol or the empty string . Ad-tree containing nd-edges can be decomposed into n +  1 components containing only i-edges . 
D-trees can be composed using two operations : subsertion and sister-adjunction  . When ad-tree a is subserted into another d-tree/3  , a component of a is substituted at a frontier nonterminal node  ( a substitution node )   of/3 and all components of a that are above the substituted component are inserted into d-edges above the substituted node or placed above the root node  . For example , consider the d-trees a and /3 shown in Figure 3 . Note that components are shown as triangles . In the compo-sedd-tree 7 the component a ( 5 ) is substituted at a substitution odein/3 . The components , a (1) , a(2) , and a ( 4 ) of a above a ( 5 ) drift up the path in/3 which runs from the substitution ode . These components are then inserted into d-edges in/3 or above the root of/3  . In general , when a component c ~ ( i ) of some d-tree a is inserted into a d-edge between nodes  ~/1 and r/2 two new d-edges are created , the first of which relates r/t and the root node of a  ( i )  , and the second of which relates the frontier 4Santorini and Mahootian ( 1995 ) provide additional evidence agains the standard TAG approach to modification from codeswitching data  , which can be accounted for by using sister -adjunction  . 
1 53 a = ~ insertion\[t ~ insertion\[ii!~ substitution pi ! t ! 
Figure 3: Subsertion node of a ( i ) that dominates the substituted component to T/2 . It is possible for components above the substituted node to drift arbitrarily far up the d-tree and distribute themselves within domination edges  , or above the root , in any way that is compatible with the domination relationships present in the substituted-tree  . DTG provide a mechanism called subsertion - insert lonconstraints to control what can appear within d-edges  ( see below )  . 
The second composition operation involving d-trees is called sister-adjunction  . When ad-tree a is sister-adjoine data node y in ad-treefl the composedd-tree  7 results from the addition to / ~ of a as a new leftmost or rightmost sub-d-tree below  7/  . Note that sister-adjunction ivolves the addition of exactly one new immediate domination edge and that sever M sister-adjunctions can occur at the same node  . Sister-adjoining constraint specify where d-trees can be sister-adjoined and whether they will be right-or left-sister-adjoined  ( see below )  . 
ADTG is a four tuple G = ( VN , VT , S , D ) where VN and VT are the usual nonterminal and terminal alphabets  , SEV ~ is a distinguished nonterminal and D is a finite set of elementary d-trees  . 
A DTG is said to be lexicalized if eachd-tree in the grammar has at least one terminal node  . The elementary d-trees of a grammar G have two addi-tion M annotations : subsertion-insertion constraints and sister-adjoining constraints ? These will be described below  , but first we define simultaneously DTG derivations and subsertion-adjoining trees  ( SA-trees )  , which are partial derivation structures that can be interpreted as representing dependency information  , the importance of which was stressed in the introduction  5  . 
Consider a DTG G = ( VN , VT , S , D) . In defining SA-trees , we assume some naming convention for the elementary d-trees in D and some consistent ordering on the components and nodes of elementary d-trees in D  . For each i , we define the set of d-trees TI ( G ) whose derivations are captured by SA-trees of heightiorless  . Let To ( G ) be the set D of elementary d-trees of G . Mark all of the components of each d-tree in To ( G ) as being substitutable 6 . Only components marked as substitutable can be substituted in a subsertion operation  . The SA-tree for ~ E To ( G ) consists of a single node labelled by the elementary d-tree name for a  . 
For i > 0 let ~ ( G ) be the union of the set ~- I ( G ) with the set of all d-trees 7 that can be produced as follows . LetaED and let 7 be the result of subser-ting or sister-adjoining the d-trees  71  , - ? . , 7k into a where 71, ?- . , 7k are all in Ti - I ( G ) , with the subser-tions taking place at different substitution odes in as the footnote  . Only substitutable components of 71, .   . -,3'k can be substituted in these subsertions . 
Only the new components of 7 that came from a are marked as substitutable in 7  . Let Vl, .   .   . , ~' k be the SA-trees for 71, .   . -, 7k , respectively . The SA-treer for 7 has root labelled by the name for a and k subtrees r t  ,   .  ? . , rk . The edge from the root of r to the root of the subtreer i is labelled by li  ( 1 < i < k ) defined as follows . Suppose that 71 was subserted into a and the root of r/is labelled by the name of some c ~ ED  . Only components of a ~ will have been mar-ked as substitutable in  7/- Thus , in this subsertion some component cJ ( j ) will have been substitute data node in a with address n  . In this case , the label l ~ is the pair ( j , n ) . Alternatively , 7 i will have SI ) ue to space limitations , in the following definiti-ons we are forced to be somewhat imprecise when we identify a node in a derived d-tree with the node in the elementary d -trees  ( elementary nodes ) from which it was derived . This is often done in TAG literature , and hopefully it will be clear what is intended . 
eWe will discuss the notion of substitutability further in the next section  . It is used to ensure the $ A-tree is a tree . That is , an elementary structure cannot be subserted into more than one structure since this would be counter to our motivations for using subsertion for complementation  . 
1 54 been d-sister-adjoined at some node with address nina  , in which caseli will be the pair ( d , n ) where deleft , right . 
The tree set T(G ) generated by G . is defined as the set of trees 7 such that : 7' ET/ ( G ) for some i0 ; 7 ~ is rooted with the nonterminal S ; the frontier of 7' is a string in V ~ ; and 7 results from the removal of all d-edges from 7'  . A d-edge is removed by merging the nodes at either end of the edge as long as they are labelled by the same symbol  . The string language L ( G ) associated with G is the set of terminal strings appearing on the frontier of trees in T  ( G )  . 
We have given a reasonably precise definition of SA-trees since they play such an important role in the motivation for this work  . We now describe informally a structure that can be used to encode a DTG derivation  . A derivation graph for 7ET ( G ) results from the addition of insertion edges to a SA-treer for  7  . The location in 7 of an inserted elementary component a ( i ) can be unambiguously determined by identifying the source of the node  ( say the node with address n in the elementary d -treea '  ) with which the root of this occurrence of a ( i ) is merged with when d-edges are removed . The insertion edge will relate the two ( not necessarily distinct ) nodes corresponding to appropriate occurrences of a and a ' and will be labelled by the pair  ( i , n ) . 
Each d-edge in elementary d-trees has an associa -ted subsertion-insertion constraint  ( SIC )  . ASIC is a finite set of elementary node addresses  ( ENAs )  . An I = NA ~ specifies some elementary d-tree aED , a component of a and the address of a node within that component of a  . If a ENAy/is in the SIC associated with a d-edge between  7z and r/2 in an elementary d-tree a then ~/ cannot appear properly within the path that appears from T/t to  T/2 in the derived tree 7 ET ( G )  . 
Each node of elementary d-trees has an associa-ted sister-adjunction constraint  ( SAC )  . ASAC is a finite set of pairs , each pair identifying a direction ( left or right ) and an elementary d-tree . ASACgi-ves a complete specification of what can be sister-adjoine data node  . If a node ~/ is associated with a SAC containing a pair  ( d , a ) then the d-tree a can bed-sister-adj oined at r/ . By definition of sister-adjunction , all substitution odes and all nodes at the top of d-edges can be assumed to have SACs that are the empty set  . This prevent sister-adjunction at these nodes . 
In this section we have defined " raw " DTG . In a more refined version of the formalism we would associate  ( a single ) finite-valued feature structure with each node 7 . It is a matter of further research to determine to what extent SICs and SACs can be stated globally for a grammar  , rather than being attached 7Trees used in Section 3 make use of such feature structures . 
to d-edges/nodes s . See the next section for a brief discussion of linguistic principles from which a gram-mar's SICs could be derived  . 
3 Linguistic Examples
In this section , we show how an account for the data introduced in Section  1 can be given with DTG . 
3.1 Getting Dependencies Right : English
SIao ! s
NP VP\[fro:+10!vP\[fin:+\]vsv
II claim -, seems

NPS o(hot dogs ) t

~ PvP\[~:+l(Mary ) lvP\[fin:-I
VNP
II to a doreesi !! vP\[rm:+1vP\[f~:-I
Figure 4: D-trees for (1)
In Figure 4 , we give a DTG that generate sent-ence (1) . Everyd-tree is a projection from a lexical anchor  . The label of the maximal projection is , we assume , determined by the morphology of the anchor . For example , if the anchor is a finite verb , it will project to S , indicating that an overt syntactic ( " surface " ) subject is required for agreement with it ( and perhaps case-assignment )  . Furthermore , a finite verb may optionally also project to S ' ( as in the d-tree shown for claims )  , indicating that a wh-moved or topicalized element is required  . The finite verb seems also projects to S , even though it does not itself provide a functional subject  . In the case of the to a doretree , the situation is the inverse : the functional subject requires a finite verb S in this context  , it might be beneficiM to consider the expression of a feature-based lexicalist theory such as HPSG in DTG  , similar to the compilation of HPSG to
TAG ( Kasper et al , 1995).
155 to agree with , which is signaled by the fact that its component 's root and frontier nodes are labelled S and VP  , respectively , but the verb itself is not finite and therefore only projects to VP\[-fin\]  . Therefore , the subject will have to raise out of its clause for agreement and case assignment  . The direct object of to a dore has wh-moved out of the projection of the verb  ( we include a trace for the sake of clarity )  . 

NPS
N ' NP VP
Adj PA dj PN he VS
Ii II
Adj Adj hot dogs claims NP VP small spicy Mary seems VP 
VNP
It to a doree
Figure 5: Derived tree for (1)
We add SlCs to ensure that the projections are respected by components of other d-trees that may be inserted during a derivation  . ASIC is associa-ted with the d-edge between VP and S node in the seems d-tree to ensure that no node labelled S~can be inserted within it-i  . e . , it cannot be filled by with a wh-moved element . In contrast , since both the subject and the object of to a dore have been moved out of the projection of the verb  , the path to these arguments do not carry any SIC at all  9  . 
We now discuss a possible derivation . We start out with the most deeply embedded clause  , the ad-ores clause . Before subserting its nominal arguments , we sister-adjo in the two adjectival trees to the tree for hot dogs  . This is handled by a SAC associated with the N ' node that allows all trees rooted in AdjP to be left sister-adjoined  . We then sub-sert this structure and the subject into the to a dored-tree  . We subser the resulting structure into the seems clause by substituting its maximal projection node  , labelled VP\[fin:-\] , at the VP\[fin:-\] frontier node of seems , and by inserting the subject into the d-edge of the seems tree  . Now , only the S node of the seems tree ( which is its maximal projection ) is substitutable . Finally , we subser this derived struc-9We enforce island effects for wh-movement by using a \[+ extract \] feature on substitution nodes  . This corresponds roughly to the analysis in TAG , where is landhood is ( to a large extent ) enforced by designating a particular node as the foot node  ( Kroch & Joshi ,  1986) . 
ture into the claims d-tree by substituting the S node of seems at the S complement ode of claims  , and by inserting the object of a dores ( which has not yet been used in the derivation ) in the d-edge of the claims d-tree above its S node  . The derived tree is shown in Figure 5 . The SA-tree for this derivation corresponds to the dependency tree given previously in Figure  2  . 
Note that this is the only possible derivation i vol-ving these threed-trees  , modul order of operations . 
To see this , consider the following putative alternate derivation  . We first subser the to a dored-tree into the seems tree as above  , by substituting the anchor component at the substitution ode of seems  . We insert the subject component of foad ore above the anchor component of seems  . We then subser this derived structure into the claims tree by substitu-ting the root of the subject component of to a doreat the S node of claims and by inserting the S node of the seems d -tree as well as the object component of the to a dored-tree in the S'/Sd-edge of the claims d -tree  . This last operation is shown in Figure 6 . The resulting phrase structure tree would be the same as in the previously discusse derivation  , but the derivation structure is linguistically meaningless  , ince to a doreworld have been subserted into both seems and claims  . However , this derivation is ruled out by the restriction that only substitutable components can be substituted : the subject component of the adore d-tree is not substitutable after subsertion i to the seems d-tree  , and therefore it cannot be substituted into the claims d-tree  . 
S  ~
NPSi ( hot dogs ) t
S !


NP~+l(Mary)
VVP\[fin:-\] seems VNP
II to a doree
Insertions S '

NP VP\[fm:+1
Ji
VP\[fin:+\]
VS't claims
Figure 6: An ill-for mederivation
In the above discussion , substitutability played a in passing that the SIC associated to the d-edge in the seems d-tree also rules out this derivation  . The derivation requires that the S node of seems be inserted into the SI/Sd-edge of claims  . However , we would have to stretch the edge over two components which are both ruled out by the SIC  , since they violate the projection from seems to its S node  . Thus , the derivation is excluded by the independently motivated Sits  , which enforce the notion of projection . 
This raises the possibility that , in grammars that express certain linguistic principles  , substitutability is not needed for ruling out derivations of this nature  . 
We intend to examine this issue in future work.
3 . 2 Get t ing Word Order R ight : Kashmir i \[ twO ~ :: -~ NP VP !  ( rames ha ~ ) ' Ftop:-'1'/wS:-I
AuxVP ( chu )
NP VP eVVP_
Ibaa saanfin : "\ [ tw ? ~: : q\]NP VP ( kyaa ) ' I " tol ) : "1
COMPVP(ki )
NP VP(m ~) ~
NP VP
IIe V
Ikor
Figure 7: D-trees for (2b )
Figure 7 shows the matrix and embedded clauses for sentence  ( 2b )  . We use the node label VP throug-hout and use feature such a stop  ( for topic ) to differentiate different levels of projection . Observe that in both trees an argument has been fronted  . Again , we will use the SlCs to enforce the projection from a lexical anchor to its maximal projection  . Since the direct object of k or has wh-moved out of its clause  , the d-edge connecting it to the maximal projection of its verb has no SIC  . The d-edge connecting the maximal projection of baasaan to the Aux component  , however , has a SIC that allows only VP\[w h:+ , top : -\] nodes to be inserted . 
vr+1 ~ Lfi , , :+ J . VP~n 5: rames has ~ fin : + J
Aux VP ? hu
Ivpe~f ~ Vp\[fin:'-t ,, Jtw ? ~: :\] baaaan
COMPVPki NP VP me NP VP
IIe V
Ikor
Figure 8: Derived d-tree for (2b )
The derivation proceeds as follows . We first sub-sert the embedded clause tree into the matrix clause tree  . After that , we subser the nominal arguments and function words  . The derived structure is shown in Figure 8 . The associated SA-tree is the desired , semantically motivated , dependency structure : the embedded clause depends on the matrix clause  . 
In this section , we have discussed examples where the elementary objects have been obtained by projecting from lexical items  . In these cases , we overcome both the problems with TAG considered in Section  1  . The SlCs considered here enforce the same notion of projection that was used in obtai-ning the elementary structures  . This method of arriving at SlCs not only generalizes for the English and Kashmiri examples but also appears to apply to the case of long -distances crambling and topicalization in German  . 
1574 Recognition
It is straightforward to " . ~lapt the polynomial-time El < Y-style recognition algorithm for a lexicalized UVG-DI  . of Rarnbow (1994b ) for DTG . The entries in this array recording derivations of substrings of input contain a set of elementary nodes along with a multiset of component shat must be in ~ rted above during bottom-up recognition  . These components are added or removed at substitution and insertion  . 
The algorithm simulates traversal of a derived tree  ; checking for SICS and SACs can be done easily . Bec-anse of lexicalization , the size of these multisets is polynomially bounded  , from which the polynomial time and space complexity of the algorithm follows  . 
For practical purposes , especially for lexicalized grammars , it is preferable to incorporate some element of prediction  . We are developing a polynomial-time Earley style parsing algorithm  . The parser returns a parse forest encoding all parses for an input string  . The performance of this parser is sensitive to the grammar and input  . Indeed it appears that for grammars that lexicalize CFG and for English grammar  ( where the structures are similar to the I_TAG developed at University of Pennsylvania  ( XTAG Research Group , 1995)) we obtain cubic-time complexity . 
5 Conclusion
DTG , like other formalisms in the TAG family , is lexicalizable , but in addition , its derivations are themselves linguistically meaningful  . In future work we intend to examine additional linguistic data  , refining aspects of our definition as needed . We will also study the formal properties of DTG , and complete the design of the Earley style parser  . 

We would like to thank Rakesh Bhatt for help with the Kashmiri data  . We are also grateful to Tilman Becker , Gerald Gazdar , Aravind Joshi , Bob Kasper , Bill Keller , Tony Kroch , KlansNetter and the ACL-95 referees . R , ambow was supported by the North Atlantic Treaty Organization under a Grantawar-ded in  1993  , while at TALANA , Universitd Paris 7 . 
References
T . Becket , A . Joshi , & O . Rainbow .  1991 . Long distances crambling and tree adjoining grammars  . In EACL-91, 2126 . 
R . Bhatt . 1994. Word order and case in Kashmiri.
Ph.D . thesis , Univ . Illinois.
T . Bleam .  1994 . Clitic climbing in spanish : a GB perspective . In TAG+Workshop , Tech . Rep . TALANA-
RT-94-01, Universit ~ Paris 7, 1619.
J . Bzesnan & R . Kapl~n .  1982 . Lexical-functional grammar : A form M system for grammatical represent a ~ tion  . It , J . Bresnan , ed . , The Mental Representation o \] Grammatical Relations  . MIT Press . 
R . Frank .  1992 . Syntactic Locality and Tree Adjoining Grammar : Grammatical  , Acquisition and Processing Perspectives . Ph . D . thesis , Dept . Comp . & Inf . Sc . ,
Univ . Pennsylvania.
A . Joshi .  1987 . An introduction to tree adjoining grammars . In A . Manaster-Ramer , ed . , Mathematicao \]
Language , 87-114.
A . Joshi , L . Levy , & M . Takahashi .  1975 . Tree adjunct grammars . J Comput . Syst . Sci . , 10(1):136-163 . 
A . Joshi & Y . Schabes .  1991 . Tree-adjoinin grammars and lexicalized grammars . In M . Nivat & A . Podelski , eds . , Definability and Recognizability o/Sets of Trees . 
R . Kasper , E . Kiefer , K . Netter , & K . Vijay-Shanker 1995 . Compilation of HPSG to TAG . In ACL-95 . 
A . Kroch .  1987 . Subjacency in a tree adjoining grammar . In A . Manaster-Ramer , ed . , Mathematicso/Lan-guage , 143-172 . 
A . Kroch .  1989 . A symmetries in long distance extraction in a Tree Adjoining Grammar  . In Mark Baltin & Anthony Kroch , editors , Alternative Conceptions of
Phrase Structure , 66-98.
A . Kroch & A . Joshi .  1986 . Analyzing extraposition i a tree adjoining grammar  . In G . Huck & A . Ojeda , eds . , Syntax ~ Semantics : Discontinuous Constituents ,  107-149 . 
I . Mel'~uk .  1988 . Dependency Syntax : Theory and Practice . 
O . Rambow .  1994 . Formal and Computational Aspects ol Naturol Language Syntax  . Ph . D . thesis , Dept . Corn-put . & Inf . Sc . , Univ . Pennsylvania . 
O . Rambow .  1994 . Multiset-Valued Linear Index Grammars . In ACL-94, 263-270 . 
O . Rainbow & A . Joshi .  1992 . A formal look at dependency grammars and phrase -structure grammars  , with special consideration of word-order phenomena  . 
In 1stern . Workshop on The Meaning-Text Theory , Darmstadt . Arbeitspapie reder GMD 671,47-66 . 
B . Santorini & S . Mahootian .  1995 . Codeswitching and the syntactic status of adnominal adjectives  . Lingua , 95 . 
Y . Schabes & S . Shieber .  1994 . An alternative conception of tree-adjoining derivation  . Comput . Ling . , 20(1):91-124 . 
S . Shieber .  1985 . Evidence agains the context-freeness of natural anguage  . Ling . ~ Phil . , 8:333-343 . 
K . Vijay-Shanker .  1987 . A Studyo\]Tree Adjoining Grammars . Ph . D . thesis , Dept . Comput . & Inf . Sc . ,
Univ . Pennsylvania.
K . Vijay-Shanker .  1992 . Using descriptions of trees in a tree adjoining grammar  . Comput . Ling . , 18(4):481-517 . 
The XTAG Research Group .  1995 . A lexicalized tree adjoining grammar for English . Tech . Rep . IRCS Report 95-03, Univ . Pennsylvania . 

