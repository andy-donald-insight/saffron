A Calculus for Semantic Composition and Scoping
Fernando C . N . Pereira
Artificial Intelligence Center , SRI International
333 R . avenswood Ave ., Menlo Park , CA 94025, USA

Certain restrictions on possible scopings of quantified noun phrases in natural language are usually expressed in terms of formal constraints on binding at a level of logical form  . Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality  . I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction  , and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings  . 
1 An Obvious Constraint ?
Treatments of quantifier scope in Montague grammar ( Montague , 1973; Dowty et al , 1981; Cooper ,  1983) , transformational grammar ( Reinhart , 1983; May , 1985; Helm , 1982; Roberts ,  1987 ) and computational linguistics ( Hobbs and Shieber , 1987; Moran ,  1988 ) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples  1 such as ( 1 ) * A woman who saw every m and is liked him are ungrammatical  , nd why in examples such as ( 2 ) Every mans awafri end of his ( 3 ) Every admirer of a picture of himself is vain the every  . ., noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound by its antecedent  . 
What exactly counts as bound anaphora varies between different accounts of the phenomena  , but the rough intuition is that semantically a bound pronoun plays the role of a variable bound by the logical form  ( a quantifier ) of its antecedent . Example ( 1 ) above is then " explained " by noting that lIn all the examples that follow  , the pronoun and its intended antecedent are italicized  . As usual , starred exam-pies are supposed to be ungrmtica L its logical form would be something like  3W  . WOMAN(W ) ~( Vm . MAN(rn ) : : ~ SAW(W , rn )) ~
DISLIKED(W , m ) but this is " ill-formed " because variable m occurs as an argument of DISLIKED outside the scope of its binder Vm  . 2As for Examples (2) and (3) , the argument is similar : wide scope for the logical form of the a  . . . noun phrase would leave an occurrence of the variable that the logical form of every  . ., binds outside the scope of this quantifier . 
For lack of an official name in the literature for this constraint  , I will call it here the free-variable constraint . 
In accounts of scoping possibilities based on quantifier raising or storage  ( Cooper , 1983; van Ei-jck , 1985; May , 1985; Hobbs and Shieber ,  1987) , the free-variable constraint is enforced either by keeping track of the set of free variables FREE  ( q ) in each ralsable ( storable ) term q and when zEFREE ( q ) blocking the raising of q from any context B z . t in which z is bound by some binder B , or by checking after all applications of raising ( unstor-ing ) that no variable occurs outside the scope of its binder  . 
The argument above is often taken to be soob -vions and uncontroversial that it warrants only a remark in passing  , if any ( Cooper , 1983; Reinhart , 1983; Partee and Bach , 1984; May , 1985; van Riernsdijk and Williams , 1986; Williams , 1986; Roberts ,  1987) , even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics  . 
First of all , and most immediately , there is the requirement for a logical-form level of representation  , either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar  ( Helm , 1982; Cooper , 1983; May , 1985; van Riemsdijk and Williams , 1986; Williams , 1986; Roberts ,  1987) . 
2In fact , this is & perfectly good ope ~ twellformed for ~ nmla and therefore the precise formulation of the constraint is more delicate than seems to be realized in the literature  . 

Second , and most relevant o Montague grammar and related approaches  , the constraint is formulated in terms of restrictions on formal objects  ( logical forms ) which in turn are related to meanings through a denotation relation  . However , composition aiity as it is commonly understood requires meanings of phrases to be functions of the meanings rather than the forms of their constituents  . This is a problem even in accounts based on quantifier storage  ( Cooper , 1983; van Eijck ,  1985) , which are precisely designed , as van Eijckputs it , to " avoid all unnecessary reference to properties of  . . . formulas " ( van Eijck , 1985, p .  214) . In fact , vangij ck proposes an inter-eating modification of Cooper storage that avoids Cooper's reliance on forbidding vacuous abstraction to block out cases in which a noun phrase is unstored while a noun phrase contained in it is still in store  . However , this restriction does not deal with the case I have been discussing  . 
It is also interesting to observe that a wider class of examples of forbidden scopings would have to be considered if raising out of relative clauses were allowed  , for example in ( 4 ) An author who John has read every book by arrived In this example  , if we did not assume the restriction against raising from relative clauses  , the every . . , noun phrase could in principle be assigned widest scope  , but this would be blocked by the free-variable constraint as shown by the occurrence of bfree as an argument of BOOK-BY in 
Vb . BOOK-BY(b , a ) : ~( ~ a.AUTHOR(a)&
HAS-READ(JOHN , b ) & ARRIVED(a))
That is , the alleged constraint against raising from relatives  , for which many counterexamples xist ( Vanlehn ,  1978) , blocks some derivations in which otherwise the free-variable constraint would be involved  , specifically those associated to syntactic configurations of the form \[ Np  , " ?  . N\[s--??\[Np ?-? . X , ?? . \] ? ?  . \]???\] where Xi is a pronoun or trace coindexed with NPI and NPj is a quantified noun phrase  . Since some of the most extensive Montague grammar fragments in the literature  ( Dowry et al , 1981; Cooper ,  1983 ) do not cover the other major source of the problem  , PP complements of noun phrases ( replace S by PP in the configuration above )  , the question is effectively avoided in those treatments  . 

The main goal of this paper is to argue that the free-variable constraint is actually a consequence of basic semantic properties that hold in a semantic domain allowing functional application and abstraction  , and are thus independent of a particular 10gical-form representation . As a corollary , I will also show that the constraint is better expressed as a restriction on the derivations of meanings of sentences from the meanings of their parts rather than a restriction on logical forms  . The resulting system is related to the earlier system of conditional interpretation rules developed by Pollack and Pereira  ( 1988 )  , but avoids that system's use of formal conditions on the order of assumption discharge  . 
2 Curry's Calculus of Func-tionality
Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality : how to construct functions  , and how to apply functions to their arguments . There is a very large body of results in this area  , of which
I will need only a very small part.
? One of the simplest and most elegant accounts of functionality  , originally introduced by Curry and Feys ( 1968 ) and further elaborated by other authors ( Stenlund , 1972; Lambek , 1980; Howard ,  1980 ) involves the use of a logical culus to describe the types of valid functional objects  . In a natural deduction format ( Prawitz ,  1965) , the cal-culns can be simply given by the two rules in Figure  1  . The first rule states that the result of applying a function from objects of type A to objects of type B  ( a function of type A--*B ) to an object of type A is an object of type B . The second rule states that if from an arbitrary object of type A it is possible to construct an object of type B  , then one has a function from objects of type A to objects of type B  . In this rule and all that follow , the parenthesized formulat the top indicates the discharge of an assumption introduced in the derivation of the formula below it  . Precise definitions of assumption and assumption discharge are given below  . 
The typing rules can be directly connected to the use of the A-calculus to represent functions by restating the rules as shown in Figure  2  . That is , if u has type A and v has type A ~ B then v ( u ) has type B , and if by assuming that z has type A we can show that u  ( possibly containing z ) has type B , then the function represented by Ax . u has type A~B . 
AA--*B(A )

BA ....* B
Figure 1: Curry Rules ( x : A ) \[ app\]:u:Av:A--*B\[abs\]:u : Bv ( u ) : BAz , u:A--B Figure 2: Curry Rules for Type Checking To understand what inferences are possible with rules such as the ones in Figure  2  , we need a precise notion of derivation , which is here adapted from the one given by Prawitz  ( 1965 )  . A derivation is a tree with each node n labeled by a formula ?  ( n )   ( the conclusion of the node ) and by a set r ( n ) of formulas giving the = ss . m piions of $( n ) . 
In addition , a derivation D satisfies the following conditions : i  . For each leaf node nED , either ~ b(n ) is an axiom , which in our case is a formula giving the type and interpretation of a lexical item  , and then r(n ) is empty , or @( n ) is an assumption , in which caser ( . ) = , (  . ) ii . Each nonleaf node n corresponds either to an application of lapp\]  , in which case it has two daughters m and m ' with  ?  ( m ) - u : A ,   , ( m ') -- . : A- . B . ?(,) = v(u ) : B and r ( . ) = r(m)ur(m') , or to an application of \[ abs\] , in which casen has a single daughter m , and , ( m ) = - u : B . ~( , ) = Ax . u : A- . B . and r ( .   ) = rcm ) -~: A If n is the root node of a derivation D , we say that D is a derivation of ? ( n ) from the assumptions r ( ~ )  . 
Notice that condition ( ii ) above allows empty abstraction , that is , the application of rule labs \] to some formula u : Beven if z : A is not one of the assumptions of u : B  . This is necessary for the Curry calculus , which describes all typed A-terms , including those with vacuous abstraction , such as the polymorphicK combinator Az . Ay . z : A~(B ~ A) . However , in the present work , every abstraction needs to correspond to an actual functional dependency of the interpretation of a phrase on the interpretation of one of fied to block vacuous abstraction by requiring that z : Aer  ( m ) for the application of the labs \] rule to a derivation node m  .   3 The definition of derivation above can be generalized to arbitrary rules with n premises and one conclusion by defining a rule of inference as a n+l-place relation on pairs of formulas and assumption sets  . For example , elements of the\[app\]relation would have the general form  ( ( u : A , r l ) , ( v:AB , r ~) , v(u ) : B , r , vr ~)) , while elements of the\[abs\]rule without vacuous abstraction would have the form  ( u : B , r ) , ( Ax . u:A--B,r-x:A )) whenever z : A Er . This definition should be kept in mind when reading the derived rules of inference presented informally in the rest of the paper  . 
3 Semantic Combinat ions and the Curry Calculus In one approach to the definition of allowable semantic combinations  , the possible meanings of a phrase are exactly those whose type can be derived by the rules of a semantic calculus from axioms giving the types of the lexical items in the phrase  . However , this is far too liberal in that 3Without this restriction to the abstraction rule , the types derivable using the rules in Figure 2 are exactly the consequences of the three axioms A -+ A  , A--*(B--~A ) and ( A-*(S- . C )) -*(( A-*S)-*(A-*C)) , w~ch are the polymorphic types of the three combinators I  , K and S that generate all the dosed typed A -calculus terms  . 
Furthermore , if we interpret -* as implication , these theorems are exactly those of the pure implicational fragment of intuitlonlstic propositional logic  ( Curry and Feys , 1968; Stenlund , 1972; Anderson and Be\]nap ,  1975) . In contrast , with the restriction we have the weaker system of pure relevant implication R-  ( Prawitz , 1965; Anderson and Bel-nap ,  1975) . 
the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases  . A possible way out is to encode the relevant syntactic on-straints in a more elaborate and restrictive system of types and rules of inference  . The prime example of a more constrained system is the Lambek calculus  ( Lambek ,  1958 ) and its more recent elaborations within categorial grammar and semantics  ( van Benthem , 1986a ; van Benthem , 1986b ; Hen-driks , 1987; Moortgat ,  1988) . In particular , Hen-driks ( 1987 ) proposes a system for quantifier ais-ing , which however is too restrictive in its coverage to account for the phenomena of interest here  . 
Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriatelxical axioms will generate all and only the possible meanings of a phrase  , I will instead take a more conservative route related to Montague grammar and early versions of GPSG  ( Gazdar ,  1982 ) and use syntactic analyses to control semantic derivations  . 
First , a set of derived rules will be used in addition to the basic rules of application and abstraction  . Semantically , the derived rules will add no new inferences , ince they will merely codify inferences already allowed by the basic rules of the calculus of functionality  . However , they provide the semantic ounter parts of certain syntactic rules  . 
Second , the use of some semantic rules must be licensed by a particular syntactic rule and the premises in the antecedent of the semantic rule must correspond in a rule-given way to the meanings of the constituents combined by the syntactic rule  . As a simple example using a contextfree syntax , the syntactic rule S- , NP VP might license the function application rule \[ app\]with A the type of the meaning of the NP and A--*B the type of the meaning of the VP  . 
Third , the domain of types will be enriched with a few new type constructors  , in addition to the function type constructor --* . From a purely semantic point of view , these type constructors add no new types , but allow a convenient encoding of rule applicability constraints motivated by syntactic considerations  . This enrichment of the formal universe of types for syntactic purposes is familiar from Montague grammar  ( Montague ,  1973) , where it is used to distinguish different syntactic realizations of the same semantic type  , and from categorial grammar ( Lambek , 1958; Steedman ,  1987) , where it is used to capture syntactic word-order constraints  . 
Together , the above refinements allow the syn-x:trace ) \[trace+\] . z-trace\[trace-\]"r:I;z:e,~z . r : e --* I ;
Figure 3: Rules for Relative Clauses \[ pron+\]: ( X : pron ) 
Z : pron\[pron-\]:s:Ay:Bz:e(Ax . s)(y ) : A
Figure 4: Bound Anaphora Rules tax of language to restrict what potential semantic combinations are actually realized  . Any derivations will be sound with respect to \[ app \] and \[ abs\]  , but many derivations allowed by these rules will be blocked  . 
4 Derived Rules
In the rules below , we will use the two basic types ? for individuals and t for propositions  , the function type constructor --* associating to the right  , the formal type constructor qua , at(q ) , where q is a quantifier , that is , a value of type ( e--~t)-*t , and the two formal types pron for pronoun assumptions and trace for traces in relative clauses  . For simplicity in examples , I will adopt a " reverse Curried " notation for the meanings of verbs  , prepositions and relational nouns . 
For example , the meaning of the verb ~ ol ove will be LO Ve . : ?~? ~ t , with z the lover and y the loved one in LOVE ( y ) ( z )  . The assumptions corresponding to lexical items in a derivation will be appropriately a beled  . 
4 . 1 T race In t roduct ion and Ab-s t rac t ion The two derived rules in Figure  3 deal with traces and the meaning of relative clauses  . Rule\[trace+\]is licensed by the the occurrence of a trace in the syntax  , and rule\[trace-\] by the construction of a relative clause from a sentence containing a trace  . 
Clearly , if n : ?--* t can be derived from some assumptions using these rules  , then it can be derived using rule labs \] instead . 
For an example of use of\[trace+\]and\[trace  -\]  , assume that the meaning of relative pronoun that is THAT ~ Ar  . A n . A z . n(x ) & r(z ) : ( e--*t)--*(e--*
I\[trace+\]Z/"e\[lexical\]OWN : ? --* e ~  1: lapp\]OWN ( y ) : e--*1 ; \[\[ exica\[\]JOHN:e\[app\]OWN ( y )   ( JOHN )  : ~ , /\[trace--\])ty . OWN(y ) ( JOHS ) Ie--+l ; \[\ [ exical \] THAT : ( e--+1 ; ) --+ ( e--+1 ; ) - - - + ( e - - - + t)\[app\]An . ,,\z . n(z)~OWN(z ) ( JOHN ) : ( e-'+1 ; ) -'* ( e---*I ; )\[ lexlcal \] CAR : e~1 ; \[ app\]~kz . CAR(Z)~OWN(z ) ( JOHN ) " e-'~1;
Figure 5: Using Derived Rules z ) ~( e--*t) . Given appropriate syntactic licensing , Figure 5 shows the derivation of a meaning for cartha ~ Johno ~ #ns  . Each nonleaf node in the derivation is labeled with the rule that was used to derive it  , and leaf nodes are labeled according to their origin  ( lexical entries for words in the phrase or syntactic traces  )  . The assumptions at each node are not given explicitly  , but can be easily computed by looking in the subtree rooted at the node for und is charged assumptions  . 
4  . 2 Bound Anaphora In t roduct ion and E l iminat ion Another pair of rules  , shown in Figure 4 , is responsible for introducing a pronoun and resolving it as bound anaphora  . The pronoun resolution rule\[pron-\]applies only when Bistrace or quant  ( q ) for some quantifier q . Furthermore , the premise y : B does not belong to an immediate constituent of the phrase licensing the rule  , but rather to some undischarged assumption of s : A  , which will remain und is charged . 
These rules deal only with the construction of the meaning of phrases containing bound anaphora  . In a more detailed granunar , the licensing of both rules would be further restricted by linguistic constraints on coreference -- for instance  , those usually associated with c-command ( Reinhart ,  1983) , which seem to need access to syntactic information  ( Williams ,  1986) . In particular , the rules as given do not by themselves enforce any constraints on the possible antecedents of reflexives  . 
The soundness of the rules can be seen by noting that the schematic derivation  ( z : pron ) z . ' es : Ay : B : A to a special case of the schematic corresponds derivation  2 : e ) s : Ay : eAz . s : e --- . A(Ax . s)Cy ): A The example derivation in Figure 7 , which will be explianed in more detail later , shows the application of the anaphora rules in deriving an interpretation for example sentence  ( 2 )  . 
156\[quant+\]:q: ( e--*10--*tz:quant ( q ) ~g:e\[quant--\]: ( = : quant ( ~ )   ) s : tq ( A= . s ): t
Figure 6: Quantifier Rules 4 . 3 Quant i f ie r Ra is ing The rules discussed earlier provide some of the auxiliary machinery required to illustrate the free-variable constraint  . However , the main burden of enforcing the constraint falls on the rules responsible for quantifier raising  , and therefore I will cover in somewhat greater detail the derivation of those rules from the basic rules of functionality  . 
I will follow here the standard view ( Montague , 1973; Barwise and Cooper ,  1981 ) that natural language determiners have meanings of type  ( e --* t )  --*  ( e--*10---+? . For example , the meaning of every might be Ar . As . Vz . r(z)~s(z ) , and the meaning of the noun phrase every man will be As  . Vz . MAN(z ) = ~ s(z) . To interpret the combination of a quantified noun phrase with the phrase containing it that forms its scope  , we apply the meaning of the noun phrase to a propertys derived from the meaning of the scope  . The purpose of device such as quantifying-in Montague grammar  , Cooper storage or quantifier aising in transformational grammar is to determine a scope for each noun phrase in a sentence  . From a semantic point of view , the combination of a noun phrase with its scope , most directly expressed by Montague's quantifying -in rules  ,   4 corresponds to the following schematic derivation in the basic calculus  ( rules lapp \] and labs\]only ) :  ( = : e ) #:'GAz . s : e ---, l ; q : ( e ---, l :) ---, tq(t = . s ) : ~? where the assumption z : ? is introduced in the derivation at a position corresponding to the occurrence of the noun phrase with meaning q in the sentence  . In Montague grammar , this correspondence is enforced by using a notion of syntactic combination that does not respect the  syn-4I!1 gmaered , quantify il Mg-in has to apply not only to proposition-types copes but ahto to property-type scopes  ( meAnings of common-noun phrases and verb-phrases )  . Extending the argument that fo Uows to those cases offers no difficulties  . 
1 57 tactic structure of sentences with quantified noun phrases  . Cooper storage was in part developed to cure this deficiency  , and the derived rules presented below address the same problem  . 
Now , the free-variable constraint is involved in situations in which the quantifier q itself depends on assumptions that must be discharged  . The relevant incomplete schematic derivation ( again in terms of \[ app\]and labs\]only ) is ( a )   ( z : e )   ( b ) Y : ? s:tq: ( e-- , t)--+t (5) ~ x . s : e- . - + t?q(Az . s ) : t ? Given that the assumption y : ? has not been discharged in the derivation of q :  ( e --- ,  ~) --- , t , that is , y : ? is an und is charged assumption of q: ( e --- , t ) -* t , the question is how to complete the whole derivation  . If the assumption were discharged before q had been combined with its scope  , the result would be the semantic object Ay . q : ?-- , ( e-- , t ) --- , t , which is of the wrong type to be combined by lapp \] with the scope Az  . s . 
Therefore , there is no choice but to discharge ( b ) after q is combined with its scope . Put in another way , q cannot be raised outside the scope of abstraction for the variable y occurring free in q  , " which is exactly what is going on in Example ( 4 )   ( ' An author who John has read every book by arrived '  )  . A correct schematic derivation is then ( a )   ( = : 0 )  :  ( b )   ( V : 0 ) 8: t
A z . , : ? -  . t~:(e~t)----+tq(~z . s ) : ? u : A
Ay.u:e--+A
In the schematic derivations above , nothing ensures the association between the syntactic posi- 
EVERYMAN
EVERY ( MAN )   ( a ) ~ n : quant ( EVERY ( MAN ) )  ( b ) h:pron\[quant-I-\]rrt:eFRIEND-OF\[pron -I-\]h : e 
SA w (1) ( )
I\[quant--\]A(FRIEND-OF(h )) ( Af . SAW(f )( m ))\ [ pron--\]A(FRIEND-OF(Ira )) (~ f . SAW(f)(rn )) I\[quant--\]EVERY(MAN)(Am . A(FRIEND-OF(m )) ( Af . SAW ( f ) ( m ) ) ) Most interpretation types and the inference rule label on uses of \[ app\]have been omitted for simplicity  . 
Figure 7: Derivation Involving Anaphor and Quantification tion of the quantified noun phrase and the introduction of assumption  ( a )  . To do this , we need the the derived rules in Figure 6 . Rule\[qusnt-t-\] is licensed by a quantified noun phrase  . Rule\[qusnt-\] is not keyed to any particular syntactic construction  , but instead may be applied whenever its premises are satisfied  . It is clear that any use of \[ quant+\]and\[ quant--\] in a derivation z : es:t q  ( Ax . s ) : can be justified by translating it into an instance of the schematic derivation  ( 5 )  . 
The situation relevant o the free-variable constraint arises when q in \[ quant+\] depends on assumptions  . It is straightforward to see that the basic rules discussed earlier in this section turns now into the constraint that an assumption of the form z : quant  ( q ) must be discharged before any of the assumptions on which q depends  . Thus , the free-variable constraint is reduced to a constraint on derivations imposed by the basic theory of functionality  , dispensing with a logical-form representation of the constraint  . Figure 7 shows a derivation for the only possible scoping of sentence  ( 2 ) when erery man is selected as the antecedent of his  . To allow for the selected coreference , the pronoun assumption must be discharged before the quantifier assumption  ( a ) for every man . Furthermore , the constraint on dependent assumptions requires that the quantifier assumption  ( c ) for a friend of his bed is charged before the pronoun assumption  ( b ) on which it depends . It then follows that assumption ( c ) will be discharged before assumption ( a )  , forcing wide scope for every man . 
5 Discussion
The approach to semantic interpretation outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences  . It also avoids the need for such devices as distinguished variables  ( Gazdar , 1982; Cooper , 1983) to deal with trace abstraction . Instead , specialized versions of the basic rule of functional abstraction are used  . To my knowledge , the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change  , usually restrictions of the Curry or Lambek systems  ( van Benthem , 1986a ; Hen-driks , 1987; Moortgat ,  1988) . In those accounts , a phrase P with meaning p of type T is considered to have also alternative meaning t ? of type T '  , with the corresponding combination possibilities , if p ': T ' follows from p : T in the chosen logic  . The central problem in this approach is to design a calculus that will cover all the actual semantic alternatives  ( for instance , all the possible quantifier scopings ) without introducing spurious interpretations . For quantifier aising , the system of Hendriks ( 1987 ) seems the most promising so far , but it is at present too restrictive to support raising from noun phrase complements  . 
An important question I have finessed here is that of the compositionality of the proposed semantic calculus  . It is clear that the application of semantic rules is governed only by the existence of appropriate syntactic licensing and by the availability of premises of the appropriate types  . In other words , no rule is sensitive to the form of any of the meanings appearing in its premises  . However , there may be some doubt as to the status of the basic abstraction rule and those derived from it  . After all , the use of A-abstraction in the consequent of those rules seems to imply the constraint that the abstracted object should formally be a variable  . However , this is only superficially the case . I have used the formal operation of A-abstraction to represent functional abstraction in this paper  , but functional abstraction itself is independent of its formal representation in the A-calculus  . This can be shown either by using other notations for functions and abstraction  , such as that of de Bruijn's ( Barendregt , 1984; Huet ,  1986) , or by expressing the semantic derivation rules in A-Prolog  ( Miller and Nadathur ,  1986 ) following existing presentations of natural deduction systems  ( Felty and Miller ,  1988) . 

This research was supported by a contract with the Nippon Telephone and Telegraph Corp  . and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information  , Stanford University . Ithank Mary Dalrym-pie and Stuart Shieber for their helpful discussions regarding this work  . 

Alan Ross Anderson and Nuel D . Belnap , Jr.
1975 . Entailment : the Logic of Relevance and Necessity  , Volume L Princeton University
Press , Princeton , New Jersey.
Hank P . Barendregt .  1984 . The Lambda Calculus : its Syntaz and Semantics . North-Holland,
Amsterdam , Holland.
.Ion Barwise and Robin Cooper .  1981 . Generalized quantifiers and natural anguage . Linguistics and Philosophy , 4:159-219 . 
Robin Cooper .  1983 . Quantification and Syntactic Theory . D . Reidel , Dordrecht , Netherlands . 
Haskell B . Curry and Robert Feys .  1968 . Combinatory Logic , Volume L Studies in Logic and the Foundations of Mathematics  . North-Holland , Amsterdam , Holland . Second printing . 
David R . Dowty , Robert E . Wall , and Stanley Peters .  1981 . Introduction to Montague Semantics , Volume 11 of Synthese Language Library . 
D . Reidel , Dordrecht , Holland.
Amy Felty and Dale Miller .  1988 . Specifying theorem provers in a higher-order logic programming language  . Technical Report MS-CIS-88-12 , Department of Computer and Information Science , University of Pennsylvania , Philadelphia , Pennsylvania . 
Gerald Gazdar . 1982. Phrase structure grammar.
In P . Jacobson and G . K . Pullum , editors , The Nature of Syntactic Representation , pages 131-186 . D . Reidel , Dordrecht , Holland . 
Irene R . Heim .  1982 . The Semantics of Definite and Indefinite Noun Phrases  . Ph . D . thesis , Department of Linguistics , University of Massachusetts , Amherst , Massachusetts ( September) . 
Herman Hendriks .  1987 . Type change in semantics : the scope of quantification and coordination  . In Ewan Klein and Johan van Benthem , tion , pages 95120 . Centre for Cognitive Science , University of Edinburgh , Edinburgh , Scotland . 
Jerry R . Hobbs and Stuart M . Shieber . 1987.
An algorithm for generating quantifier scopings.
Computational Linguistics , 13: 47-63.
W . A . Howard .  1980 . The formulae-as-types notion of construction . In J . P . Seldin and J . R . 
Hindley , editors , To H . B . Curry : Essays on Combinatory Logic , Lambda Calculus and Formalism , pages 479-490 . Academic Press , London , England . 
Gdrard Huet .  1986 . Formal structures for computation and deduction . First edition of the lecture notes of a course given in the Computer Science Department of Carnegie Mellon University during the Spring of  1986   ( May )  . 
Joachim Lambek .  1958 . The mathematics of sentence structure . American Mathematical
Monthly , 65:154-170.
Joachim Lambek .  1980 . From A-calculus to cartesian closed categories . In J . P . Seldin and J . R . 
Hindley , editors , To H . B . Curry : Essays on Combinatory Logic , Lambda Calculus and For-realism , pages 375-402 . Academic Press , London , England . 
Robert May . 1985. Logical Form : its Struc.
ture and Derivation , Volume 12 of Linguistic Inquiry Monographs . MIT Press , Cambridge,

Dale A . Miller and Gopalan Nadathur . 1986.
Higher-order logic programming . In Ehud
Shapiro , editor , Third International Conference on Logic Programming  , Berlin , Germany . 

Richard Montague .  1973 . The proper treatment of quantification in ordinary English  . In Rich-mond H . Thomason , editor , Formal Philosphy . 
Yale University Press.
Michael Moortgat .  1988 . Categorial Investigations : Logical and Linguistic Aspects of the Lambek Calculus  . Ph . D . thesis , University of Amsterdam , Amsterdam , Holl and ( October ) . 
Douglas B . Moran .  1988 . Quantifier scoping in the SRI Core Language Engine  . In $6th Annual ? Meeting of the Association for Computational Linguistics  , pages 33-47 , Morristown , New Jersey . Association for Computational Linguistics . 
Barbara Partee and Emmon Bach .  1984 . Quantification , pronouns and VP anaphora . In M . B . J . Stokhof , editors , Truth , Interpretation and Information , pages 99-130 . Forts , Dordrecht , Holland . 
Martha E . Pollack and Fernando C . N . Pereira.
1988 . An integrated framework for semantic and pragmatic interpretation  . In P6th Annual Meeting of the Association for Computational Linguistics  , pages 75-86 , Morristown , New Jersey . Association for Computational Linguistics . 
Dug Prawitz .  1965 . Natural Deduction : A Proof-Theoretical Study . Almqvist and Wiksell , Uppsala , Sweden . 
Tanya Reinhart .  1983 . Anaphora and Semantic Interpretation . Croom Helm , London , England , corrected and revised printing , 1987 edition . 
Craige Roberts .  1987 . Modal Subordination , Anaphora and Distributivity . Ph . D . thesis , Department of Linguistics , University of Massachusetts , Amherst , Massachusetts ( February ) . 
Mark Steedman .  1987 . Combinatory grammars and parasitic gaps . Natural Language and Linguistic Theory ,  5(3):403-439 . 
S Sren Stenlund .  1972 . Combinators , A-Terms and Proof Theory . D . Reidel , Dordrecht , Holland . 
Johan van Benthem . 1986 a . Categorial grammar and lambda calculus . In D . Sk or dev , editor , Mathematical Logic and its Application , pages 39-60: Plenum Press , New York , New York . 
Johan van Benthem . 1986b . Essays in Logical Semantics , Volume 29 of Studies in Linguistics and Philosophy . D . Reidel , Dordreeht , Holland . 
Janvan Eijek .  1985 . Aspects of Quantification in Natural Language . Ph . D . thesis , University of Groningen , Groningen , Holland ( February ) . 
Henkvan Riemedijk and Edwin Williams . 1986.
Introduction to the Theory of Grammar , Volume 12 of Current Studies in Linguistics . MIT
Press , Cambridge , Massachusetts.
Kurt A . Vanlehn .  1978 . Determining the scope of English quantifiers . Master's thesis , M . I . T . 

Edwin Williams .  1986 . A reassignment of the functions of LF . Linguistic Inquiry , 17(2):265-299 . 
