TYPE-RAISING ANDDIRECTION ALITYIN COMBINA TORY GRAMMAR * 
Mark Steedman
Computer and Information Science , University of Pennsylvania
200 South 33rd Street
Philadelphia PA 19104-6389, USA
( Interact : steedman@c is , upenn , edu)

The form of rules in ? ombinatory categorial grammars  ( CCG ) is constrained by three principles , called " adjacency " , " consistency " and " inheritance " . These principles have been claimed elsewhere to constrain the combinatory rules of composition and typeraising in such a way as to make certain linguistic universals concerning word order under coordination follow immediately  . The present paper shows that the three principles have a natural expression in a unification-based interpretation of CCG in which directional information is an attribute of the arguments of functions grounded in string position  . The universals can thereby be derived as consequences of elementary assumptions  . Some desirable results for grammars and parsers follow  , concerning typeraising rules . 

In Categorial Grammar ( CG) , elements like verbs are associated with a syntactic " category "  , which identifies their functional type . I shall use a notation in which the argument or domain category always appears to the right of the slash  , and the result or range category to the left . A forward slash/means that the argument in question must appear on the right  , while a backward slash \ means it must appear on the left  . 
(1) enjoys := ( S\NP)/NP
The category ( S\NP ) /NP can be regarded as both a syntactic and a semantic object  , in which symbols like S are abbreviations for graphs or terms including interpretations  , as in the unification-based categorial grammars of Zeevat et al  \[8\] and others ( and cf .  \[6\]) . 
Such functions can combine with arguments of the appropriate type and position by rules of functional application  , written as follows: ( 2 ) The Functional Application Rules : a . X/Y Y = ~ X (>) b . Y X\Y := ~ X ( < ) Such rules are also both syntactic and semantic rules * Thanks to Michael Niv and Sm Shieber  . Support from : NSF Grant CISE IIP CDA88-22719 , DARPA grant no . N0014-90J-1863, and ARO grant no . DAAL03-89-C0031 . 
of combination in which X and Y are abbreviations for more complex objects which combine via unification  . They allow contextfree derivations like the following  ( the application of rules is indicated by indices  >  , < on the underlines : ( 3 ) Mary enjoys ~ usical sm , ( s\m')/~\]w .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . > s\lP .   .   .   .   .   .   .   .   .   .   .   .   . <s The derivation can be assumed to build a compositional interpretation  , ( enjoy ' musicals ') mary ' , say . 
Coordination can be included in CG via the following rule  , allowing constituents of like type to conjoin to yield a single constituent of the same type :  ( 4 ) X conj X = ~ X ( 5 ) I love and admire musicals .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . 

( s\m')/m ,
The rest of the derivation is exactly as in (3).
In order to allow coordination of contiguous trings that do not constitute constituents  , CCG allows certain operations on functions related to Curry's combina-tots  \[1\]  . Functions may compose , as well as apply , under rules like the following : ( 6 ) Forward Composition:
X/Y Y/Z ~ BX/Z (> B)
The rule corresponds to Curry's eombinator B , as the subscripted arrow indicates . It allows sentences like Mary admires , and may enjoy , musicals to be accepted , via the functional composition of two verbs ( indexed as > B )  , to yield a composite of the same category as a transitive verb  . Crucially , composition also yields the appropriate interpretation for the composite verb may prefer in this sentence  ( the rest of the derivation is as in ( 3 ) ):  ( S\NP ) /NP conj ( S\NP ) /VP VP/NP .   .   .   .   .   .   .   .   .   .   .   .   .   .   . > B(SkWP)Im , (s\~)/~PCCG also allows typeraising rules , related to the combinator T , which turn arguments into functions over functions - over-such-arguments  . These rules allow arguments to compose , and thereby lake part in coordinations like I dislike  , and Mary enjoys , musi-cals . They too have an invariant compositional semantics which ensures that the result has an appropriate interpretation  . For example , the following rule allows such conjuncts to form as below  ( again , the remainder of the derivation is omitted ) :  ( 8 ) Subject ~ pe-raising:
NP : y ~ TS/ ( S\NP )   ( > T )   ( 9 ) Idislike and Rax'y *" joys IP ( S\IP ) /IP conjl P ( S\IP ) /P .   .   .   .   .   .   .   . > T .   .   .   .   .   .   .   . > T
Sl(S\lP)Sl(S\IP) .   .   .   .   .   .   .   .   .   .   .   .   .   . = ---> s .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . > S
SlIPS l IPs liP
This apparatus has been applied to a wide variety of phenomena of long-range dependency and coordinate structure  ( cf .  \[2\], \[5\], \[6\]) . 1 For example , Dowty proposed to account for the notorious " nonconstituent " coordination i  ( 10 ) by adding two rules that are simply the backward mitre-image versions of the composition and type raising rules already given  ( they are indicated in the derivation by < B and < T  )  .   2 This is a welcome result : not only do we capture a construction that has been resistant to other formalisms  . We also satisfy a prediction of the theory , for the two backward rules arc clearly expected once we have chosen to introduce their mirror image originals  . The earlier paper show that , provided typeraising is limited to the two " order preserving " varieties exemplified in these examples  , the above reduction is the only one permitted by the lexicon of English  . A number of related crosslinguistic regularities in the dependency of gapping upon basic word order follow  ( \[2\] ,  \[6\]) . 
The construction also strongly suggests that all NPs  ( etc . ) should be considered as typeraised , preferably IOne further class of rules , corresponding to the combinator S , has been proposed . This combinator is not discussed here , but all the present results transfer to tho6e rules as well . 
2This and other long examples have been " flmted " to later positions in the text  . 
in the lexicon , and that categories like NP should not reduce at all  . However , this last proposal seems t c implies a puzzling extra ambiguity in the lexicon  , and for the moment we will continue to view typeraising as a syntactic rule  . 
The universal claim depends upon typeraising being limited to the following schemata  , which do not of themselves induce new constituent orders :  ( 11 ) x = ~ TT/if\X ) 
X ::: TT\(T/X )
If the following patterns ( which allow constituent orders that are not otherwise permitted  ) were allowed , the regularity would be unexplained , and without further restrictions , grammars would collapse into free order : ( 12 ) X ::: TT/ ( T/X ) 
X :: ~ TT\(T\X)
But what are the principles that limit combinatory rules of grammar  , to include ( 11 ) and exclude ( 12 ) ? The earlier papers claim that all CCG rules must conform to three principles  . The first is called the Principle of Adjacency \[5  , pA05\] , and says that rules may only apply to string -adjacent on-empty categories  . It amounts to the assumption that combina-tops will do the job  . The second is called the Principle of Directional Consistency  . Informally stated , it says that rules may not override the directionality on the " cancelling " Y category in the combination  . For example , the following rule is excluded : ( 13 ) ? X\Y Y => X The third is the Principle of Directional Inheritance  , which says that the directionality of any argument in the result of a combinatory rule must be the same as the directionality on the corresponding argument  ( s ) in the original functions . For example , the following composition rule is excluded : ( 14 ) * X/Y Y/Z=>X\Z However , rules like the following are permitted : ( 15 ) Y/Z X\Y => X/Z ( < Bx ) This rule ( which is not a theorem in the Lambek calculus ) is used in \[5\] to account for examples like I shall buy today and read tomorrow  , the collected works of Proust , the crucial combination being the following : ( 16 )   .   .   . read to morxow .   .   . 
vP/m , vP\vP . . . . . . . . . < Bx

The principles of consistency and inheritance amount not contradic the directionality specified in the lexicon  . But how is this observation to be formalised , and how does it bear on the typeraising rules ? The next section answers these questions by proposing an interpretation  , grounded in string positions , for the symbols / and \ in CCG . The notation will temporarily become rather heavy going  , so it should be clearly understood that this is not a proposal for a new CCG notation  . It is a semantics for the metagrammar of the old CCG notation  . 
DIRECTION ALITYIN CCG
The fact that directionality of arguments i inherited under combinatory rules  , under the third of the principles , strongly suggests that it is a property of argument shemselves  , just like their eategorial type , NP or whatever , as in the work of Zeevat et al\[8\]\[9\] . However , the feature in question will here be grounded in a different representation  , with significantly different consequences , as follows . The basic form of a combinator yule under the principle of adjacency is afl ~ ~  ,  . However , this notation leaves the linear order of ot and flimplicit  . We therefore temporarily expand the notation , replacing categories like NP by 4-tuples , of the form e ~ , DP a , L  ~ , Ra , comprising : a ) a type such as NP ; b ) a Distinguished Position , which we will come to inaminute ; c ) a Left-end position ; and d ) a Right-end position . The Principle of Adjacency finds expression in the fact that all legal combinator yules must have the the form in  ( 17 )  , in which the right-end of ~ is the same as the left-end of r : We will call the position  P2  , to which the two categories are adjacent , he juncture . 
The Distinguished Position of a category is simply the one of its two ends that coincides with the junc-ture when it is the "' cancelling " term Y  . A rightward combining function , such as the transitive verb enjoy , specifies the distinguished position of its argument  ( here underlined for salience ) as being that argument's left-end . So this category is written in full as in (18) a , using a nondirectional sash / . The notation in ( a ) is rather overwhelming . When positional features are of no immediate relevance in such categories  , they will be suppressed . For example , when we are thinking of such a function as a function  , rather than as an argument , we will write it as in (18) b , where VP stands for VP , DF Vp , Lw , , Rvp , and the distinguished position of the verb is omitted  . It is important to note that while the binding of the NP argument's Distinguished Position to its lefthand end L  , pmeans that enjoy is a rightward function , the distinguished position is not bound to the right hand end of the verb  , t ~ verb . It follows that the verb can potentially combine with an argument elsewhere  , just so long as it is to the right . This property was crucial to the earlier analysis of heavy NP shift  . Coupled with the parallel independence in the position of the result from the position of the verb  , it is the point at which CCG parts company with the directional Lambek calculus  , as we shall see below . 
In the expanded notation the rule of forward application is written as in  ( 19 )  . The fact that the dis-tinguisbed position must be one of the two ends of an argument category  , coupled with the requirement of the principle of Adjacency  , means that only the two order-preserving instances of functional application shown in  ( 2 ) can exist , and only consistent categories can unify with those rules  . 
A combination under this rule proceeds as follows.
Consider example (20), the VP enjoy musicals . The derivation continues as follows . First the positional variables of the categories are bound by the positions in which the words occur in the siring  , as in (21) , which in the first place we will represent explicitly  , as numbered string positions , Next the combinatory rule (19) applies , to unify the argument term of the function with the real argument  , binding the remaining positional variables including the distinguished position  , as in (22) and (23) . At the point when the combinatoryule applies , the constraint implicit in the distinguished position must actually hold  . That is , the distinguished position must be adjacent to the functor  . 
Thus the Consistency property of combinatory ules follows from the principle of Adjacency  , embodied in the fact that all such rules identify the distinguished position of the argument terms with the juncture  P2  , the point to which the two combin and s are adjacent  , as in the application example (19) . 
The principle of Inheritance also follows directly from these assumptions  . The fact that rules correspond to combinators like composition forces directionality to be inherited  , like any other property of an argument such as being an NP  . It follows that only instances of the two very general rules of composition shown in  ( 24 ) are allowed , as a consequence of the three Principles . To conform to the principle of consistency , it is necessary that L ~ and / ~ , the ends of the cancelling category Y , be distinct positions - that is , that Y not be coerced to the empty string . This condition is implicit in the Principle of Adjacency  ( see above )  , although in the notation of 3 Declaritivising position like this may seem laborious  , but it is at actic familiar fom the DCG literature  , from which we shall later borrow the elegant device of encoding such positions implicitly in difference-lists  . 
73  ( 1o ) give a police manaflower and ( VP/liP ) /tiplip ~ conj < T < T ( ~/ m  ~ ) \ C ( vP/SP ) /mDv PXC ~/ SP )  - - - - - - "  .   .   .   .   .   .  " - - - -  .   .   .   .   .   .   .   .   .   .  "  .   .   .   .   . < e
Vl'\(~/lw ) adogabone ~\( ~ lW ), iPliPliP .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   . < T < T
CVP/s P )  \  ( CVP/s P ) /s P )  ~\  ( vv/sP ) < Bvp\ ( VV l Si . ) <&> (17) a , DP a , Px , P ~\] ~ , DP  ~ , P2 , s::~7 , DP . y , P1, Pa (18) a . enjoy : -- VP , DP vp , Lvp , Rvp/NP , L . p , Lnp , R . p , DP verb , Leerb , R ~ erbb . enjoy : -- VP/NP , Lnp , L . p,P ~ p , Leerb , R ~ erb(19) X , DP . , PI , P3/Y , P2 , P2 , P3 , PI , P2Y , P2 , P2 , P3: ~ X , DP z , PI , P31 (20)1 enjoy2 musicals 3 VP/NP , Larg , Larg , Rare , Llun , Rlu . NP , DP np , Lnp , R . p(21)1 enjoy2 musicals3 VP/NP , La , , , La , , , R . r , , 1 , 2 NP , DP np ,  2 , 3 (22) I enjoy 2 musicals 3 VP/NP , L . rg , Larg , Ro~g , l , 2NP , DP . p , 2 , 3X/Y , P2 , P2 , P3 , P1 , P2Y , P2 , P2 , P3 (23) 1 enjoy2 musicals 3 VP/NP ,  2 , 2 , 3~ , l , 2 ~ NP , 2 , 2 , 3v P ,  1 , 3(24) a . X , DP ~, L . ,R . /Y , P2, P2, P~,P1, P2Y , P2, P2, P~/Z , DPz , Lz , R . , P2, P3): ~ X , DPx , L , , , R ~, / Z , DP . ,L . ,R . , PI , P3b . Y , P2 , Ly , P2/Z , DP z , L z , R z , PI , P2X , DP x , L  ~ , R ~/ Y , P2 , Lu , P2 , P2 , P3: ~ X , DP x , Lx , R z/Z , DP z , L , ,Rz , PI , P3(25) The Possible Composition Rules : a . X/Y Y/Z = ~ B X/Z (> B ) b . X/Y Y\Z = ~ B X\Z (> B x ) e . Y\Z X\Y = ~ B X\Z (< B ) d . Y/Z X\Y : :*' BX/Z ( < Bx ) 7'4 the appendix it has to be explicitly imposed . These schematapermit only the four instances of the rules of composition proposed in  \[5\]   \[6\]  , given in (25) in the basic CCG notation . " Crossed " rules like ( 15 ) are still allowed Coecause of the non-identity noted in the discussion of  ( 18 ) between the distinguished position of arguments of functions and the position of the function itself  )  . They are distinguished from the corresponding noncrossing rules by further specifying DP ~  , the distinguished position on Z . However , no rule violating the Principle of Inheritance , like (14) , is allowed : such a rule would require a different distinguished position on the two Zs  , and would therefore not be functional composition at all  . This is a desirable result : the example ( 16 ) and the earlier papers show that the non-order -preserving stances  ( b , d ) are required for the grammar of English and Dutch . 
In configurational languages like English they must of course be carefully restricted as to the categories that may unify with Y  . 
The implications of the present formalism for the typeraising rules are less obvious  . Typeraising rules are unary , and probably lexical , so the principle of adjacency does not apply . However , we noted earlier that we only want the order -preserving instances  ( 11 )  , in which the directionality of the raised category is the reverse of that of its argument  . But how can this reversal be anything but an arbitrary property ? Because the directionality constraints are grounded out in string positions  , the distinguished position of the subject argument of a predicate walks - that is  , the right hand edge of that subject-is equivalent to the distinguished position of the predicate that constitutes the argument of an order-preserving raised subject Gilbert that is  , the left hand edge of that predicate . It follows that both of the order-preserving rules are instances of the single rule  ( 26 ) in the extended notation : The crucial property of this rule  , which forces its instances to be order -preserving  , is that the distinguished position variable D Parg on the argument of the predicate in the raised category is the same as that on the argument of the raised category itself  .   ( l ' he two distinguished positions are underlined in  ( 26 ) ) . Of course , the position is unspecified at the time of applying the rule  , and is simply represented as an unbound unification variable with an arbitrary mnemonic identifier  . However , when the category combines with a predicate , this variable will be bound by the directionality specified in the predicate itself  . 
Since this condition will be transmitted to the raised category  , it will have to coincide with the juncture of the combination  . Combination of the categories in the non -grammatical order will therefore fail  , just as if the original categories were combining without hemediation of typeraising  . 
Consider the following example . Under the above rule , the categories of the words in the sentence Gilbert walks are as shown in  ( 27 )  , before binding . 
Binding of string positional variables yields the categories in  ( 28 )  . The combinatory rule of forward application ( 19 ) applies as in example ( 29 )  , binding further variables by unification . In particular , DP 9 , Prop , DP w , and P2 , are all bound to the juncture position 2 , as in (30) . By contrast , he same categories in the opposite linear order failtounify with any combinatory rule  . In particular , the backward application rule fails , as in (31) .   ( Combination is blocked because 2 cannot unify with 3  )  . 
On the assumption implicit in (26) , the only permitted instances of typeraising are the two rules given earlier as  ( 11 )  . The earlie results concerning word-order universals under coordination are therefore captured  . Moreover , we can now think of these two rules as a single underspecified order-preserving rule directly corresponding to  ( 26 )  , which we might write less long-winded iy as follows  , augmenting the original simplest notation with a nondirectional slash :  ( 33 ) The Order-preserving Typeraising Rule :
X ~ TI(TIX)(T )
The category that results from this rule can combine in either direction  , but will always preserve order . Such a property is extremely desirable in a language like English  , whose verb require some arguments otheright , and some to the left , but whose NPs do not bear case . The general raised category can combine in both directions  , but will still preserve word order . It thus eliminates what was earlier noted as a worrying extra degree of categorial mbiguity  . The way is now clear to incorporate typeraising directly into the lexicon  , substituting categories of the form TI(TIX ) , where X is a category like NP or PP , directly into the lexicon in place of the basic categories  , or ( more readably , but less efficiently ) , to keep the basic categories and the rule (33) , and exclude the base categories from all combination  . 
The related proposal of Zeevat et al\[8\] , \ [9\] also has the property of allowing a single lexical raised category for the English NP  . However , because of the way in which the directional constraints are here grounded in relative string position  , rather than being primitive to the system , the present proposal avoids certain difficulties in the earlier treatment  . Zeevat's type-raised categories are actually order-changing  , and require the lexical category for the English predicate to be S/NP instead of S\NP  . ( Cf . \[9, pp . 
7S(25) X , DParg , L . .rg , R , ,rg  =>  T/T/X , DP , , , 'g , L , ,rg , R , , , -g , DParg , Lpred , Ra , red , L " rg , Rar9(27) 1Gilbert2 walks3 S/S/NP , DP g , Lg , Rg , DPg , Lpred , R pred , Lg , RgS/NP , R  ~ p , L . p , R~p , DP , ~ , Lw , R ~ (28) 1 Gilbert 2 walks 3 S/S/NP , DP g , I , 2 , DPg , Lpre , ~ , R~r . dI , 2S/NP , R . p,L . p , R , w , DP" , 2 , 3 (29) 1 Gilbert2 S/S/NP ,  01)9 ,  1 ,  2 , DP g , Lure & R~red ,  1 , 2X/Y , P2 , P2 , P3 , P1 , P2 walks S/NP , R  ~ p , L . p , R  ~ p , DP , ~ ,  2 , 3Y , P2 , P2 , P3(3O)1Gilbert2 walks S/S/NP ,  2 1 , 2 ,  2 ,  2 ,  3 ,  1 , 2 S/NP ,  2 ,  1 , 2 ,  2 ,  2 , 3S ,  1 , 3 (31) 1  , Walks 2 S/NP , R  ~ p , L . ~, R~p , 1, 2Y , P2, P1, P2
Gilbert S/S/NP , 01) 9, 2, 3, DP9, Lpr . d , Rpred , 2, 3X/Y , P2, Pl , P2, P2, P3(32) . X , DParg , Larg , Rarg := ~ T/T/X , DParg , Lar . , Rarg'DPpred'Lpred'Rpred'Larg'Rarg207-210\]) . They are thereby prevented from capturing a number of generalisations of CCGs  , and in fact exclude functional composition entirely  . 
It is important to be clear that , while the order preserving constraint is very simply imposed  , it is nevertheless an additional stipulation , imposed by the form of the typeraising rule (26) . We could have used a unique variable , DP pr , a say , in the crucial position in (26) , unrelated to the positional condition DP~r9 on the argument of the predicate itself , to define the distinguished position of the predicate argument of the raised category  , as in example (32) . 
However , this tactic would yield a completely unconstrained typeraising rule  , whose result category could not merely be substituted throughout the lexicon for ground categories like NP without grammatical collapse  .   ( Such categories immediately induce totally free word-order  , for example permitting ( 31 ) on the English lexicon )  . It seems likely that typeraising is universally confined to the order-preserving kind  , and that the sources of socalled free word order lie elsewhere  . Such a constraint can therefore be understood in terms of the present proposal simply as a requirement for the lexicon itself to be consistent  . It should also be observed that a uniformly order -changing category of the kind proposed by Zeev at et al is not possible under this theory  . 
The above argument translates directly into unification-based framework such as PATR or Prolog  . A small Prolog program , shown in an appendix , can be used to exemplify and check the argument .   4 The program makes no claim to practicality or efficiency as a CCG parser  , a question on which the reader is refered to \[7\]  . Purely for explanatory simplicity , it uses typeraising as a syntactic rule , rather than as an offline lexical rule . While a few English lexical categories and an English sentence are given by way of illustration  , the very general combinatory rules that are included will of course require further constraints if they are not to overgenerate with larger fragments  . ( For example , > B and > Bx must be dis-anguished as outlined above  , and file latter must be greatly constrained for English  . ) On every general constraint , excluding all combinations with or into NP , is included in the program , in order to force typeraising and exemplify the way in which further constrained rule-instances may be specified  . 

We can now safely rever to the original CCG nota-4The program is based on a simple shift-reduce parser / rccogniscr  , using " difference list "- encoding of string position  ( el .  \[41, \[31) . 
tion described in the preliminaries to the paper , modified only by the introduction of the general order-preserving typeraising rule  ( 26 )  , having established the following results . First , the earlier claims concerning word-order universals follow f Tom first principles in a unification-based CCG in which directionality is an attribute of arguments  , grounded out in string position . The Principles of Consistency and Inheritance follow as theorems  , rather than stipulations . 
A single general-purpose order-preserving type -raised category can be assigned to arguments  , implifying the grammar and the parser . 
REFERENCES\[1\]Curry , I-Iaskell and Robert Feys : 1958 , Combinatory Logic , North Holland , Amsterdam . 
\[2\] Dowry , David : 1988 , Typeraising , functional composition , and nonconstituent coordination , in Richard T . Oehrle , E . Bach and D . Wheeler , ( eds ) , Categorial Grammars and Natural Language Structures  , Reidel , Dordrecht ,  153-198 . 
\[3\] Gerdeman , Dale and Hinrichs , Erhard : 1990 . 
Functor-driven Natural Language Generation with Categorial Unification Grammars  . Proceedings of
COLING90, Helsinld , 145-150.
\[4\] Pereira , Fernando , and Smart Shieber : 1987 , Prolog and Natural Language Analysis , CSLIAJ niv . 
of Chicago Press.
\[5\] Steedman , Mark : 1987 . Combinatory grammars and parasitic gaps . Natural Language & Linguistic Theory , 5, 403-439 . 
\[6\] Steedman , Mark : 1990 , Gapping as Constitu-tent Coordination , Linguistics and Philosophy ,  13 ,  207-263 . 
\[7\] Vijay-Shartkar , K and David Weir : 1990 , ' Polynomial Time Parsing of Combinatory Categorial Grammars '  , Proceedings of the 28th Annual Conference of the ACL , Pittsburgh , June 1990 . 
\[8\] Zeev at , Hunk , Ewan Klein , and JoCalder : 1987 , ' An Introduction to Unification Categorial Grammar '  , in N . Haddock et al(eds . ) , Edinburgh Working Papers in Cognitive Science , 1: Categorial Grammar , Unification Grammar , and Parsing . 
\[9\] Zeev at , Henk : 1988 , ' Combining Categorial Grammar and Unification ' , in U . Reyle and C . 
Rohrer ( eds . ) , Natural Language Parsing and Linguistic Theories , Dordrecht , Reidel ,  202-229 . 

APPENDIX ~ A Lexical Frasment : parse will bind position  ( via list-encoding ) : category ( gilbert , cat(np ,  _ , P1 , P2)) . 
category ( brigitte , cat(np ,_, P1, P2)).
category ( ualks0 cat(cat(s .   .   .   .   .   . )/ cat(np , P2,_,P2),_,P3,P4)) . 
category ( love , cat(cat(vp .   .   .   .   .   . ) / cat(np , P3, P3,_),_, P1, P2)) . 
category(must,cat(cat(cat(s .   .   .   .   .   . )/ cat(np , P2,_, P2) .   .   .   .   .   . ) / cat(vp , P5, PS , _),_, P3, P4)) . 
category ( madly , cat(cat(vp , .   .   .   .   . ) / cat(vp,P2,_,P2),_,P3,P4)) . 
~ Application and ( over general ) Composition : Partial evaluation of DP y with the actual Juncture  P2 ~ imposes Adjacency . DP y ( = P2 ) must not be = - Y ' e other end ( see < B and > B )  . Antecedent\+Y = np~disallows ALL combination with unraised NP e  . 
reduce(cat(cat(X , DPx , Pl , P3)/cat(Y , P2 , P2 , P3) , _ , Pl , P2) , cat(Y , P2 , P2 , P3) , cat(X , VPx , Pl , P3)):-\+Y-rip . ~> reduce(cat(Y , P2 , Pl , P2) , cat(cat(X , DPx , P1 , P3)/cat(Y , P2 , P1 , P2) , _ , P2 , P3) , cat(X , DPx , Pl , P3)):-\+Y~np . 
reduce(cat(cat(X , DPx , Xl , X2)/ cat(Y , P2 , P2 , Y2) , _ , P1 , P2) , cat(cat(Y , P2 , P2 , Y2)/cat(z , DP z , ZI , Z2) ,  _  , P2 , P3) , cat(cat(X , DPx , Xl , X2)/cat(Z , VPz , Zl , Z2) , _ , P1 , P3)):-\+Y = np , \+ Y2=-P2 . ~> B , cf . ex . 24 a reduce(cat(cat(Y , P2 , YI , P2)/cat(Z , DPz , Zl , Z2) , _ , Pl , P2) , cat(cat(X , DPx , Xl , X2)/cat(Y , P2 , YI , P2) , _ , P2 , P3) , cat(cat(X , DPx , ll , X2)/ cat(Z , DPz , ZI , Z2) , _ , PI , P3)):-\+Y = np , \+ YI == P2 . ~< B , of . ex .   24b ~ Ordar Preserving Type Raisins : the rule np -> TI  ( TInp )  . 
raise(cat(np , DPnp , Pl , P2) , % Binds PI , P2 cat(cat(T , DPt , TI , T2)/cat(cat(T , VPt , TI , T2)/cat(np , DPnp , PI , P2) , VPnp , _ , _) , ~ cf . ex . 26_, Pl , P2)) . 
~Parses JJmlates reduce-first shift- reduce recosniser with backtracking  ( inefficiently ) parse ( \ [ Result \] , O , Result ) . ~ Halt parse (\[ Catl\[Stack\] , Buffer , Result ) :- X Raise ( syntactic ) raise ( Carl , Cat 2) , parse(\[Cat21Stack\] , Buffer , Result ) . 
parse(\[Cat2 , CatllStack\] , Buffer , Result ): - ~ Reduce reduce ( Carl , Cat 2 , Cat 3) , parse(\[Cat3\[Stack\] , Buffer , Result ) . 
parse ( Stack , \[3/oral\[Buffer\] , Result ): - ~ Shift category ( Word , cat(W , DPs , ~/ or dl Buffer \] , Buffer )) , ~ Position is list-encoded parse (\[ cat(W , DPs , \[ Word I Buffer \] , Buffer ) J Stack \] , Buffer , Result ) . 
~ Example crucially iuvolv in 8 bidirectional T ( tsice ) and < Bx:\[?-parse ( D , ~ ilbert , must , love , madly , brigitte\] , R ) . 
R " cat(s , _37 , ~ ilbert , must , love , madly , hrigitte\] , D ) ~; -- plus4 more equivalent derivations yes
