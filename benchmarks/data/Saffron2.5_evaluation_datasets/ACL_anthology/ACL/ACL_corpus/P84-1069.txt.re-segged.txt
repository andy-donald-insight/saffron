Grammar Writing System ( GRADE ) of Mu-Machtne Translation Project
and its Characteristics
Jun-tcht NAKA MURA . Jun-tcht TSUJII . Makoto NAG AO
Department of Electrical Engineering
Kyoto University
Sakyo . Kyoto . Japan

A powerful grammar writing system has been developed  . Thts grammar wrtttng systemts called GRADE ( GR Ammar DEs criber )  . GRADE allows a grammar writer to write grammars Including analysts  , transfer , and generation using the same expression . 
GRADE has powerful grammar writing facili t y  . GRADE allows a grammar writer to control the process of a machine translation  . GRADE also has a function to use grammatical rules written tnaword dictionary  . 
GRADE has been used for more than a year as the software of the machine translation project from Japanese Into Engltsh  . whichts supported by the Japanese Government and called Nu-proJect  . 
1. Objectives
Vhen we develop a machine translation system , the intention of a grammar writer should be accurately stated tn the form of grammatical ru les  . 
Otherwise , a good grammar system cannot be achieved . A programming language to write a grammar , whichts composed of a grammar writing language  , and a software system to execute t t . ts necessary for the development of a machine t ranslation system  ( Bottet 82 )  . 
If a grammar writing language for a machine t ranslation system is to have a powerful writ ing facility  , t t must fulfill the following needs . 
A grammar wrttlng language must be able to manipulate linguistic characteristics tnJapanese and other languages  . The 11ngulst lc structure of Jcpanes et S largely diffe rent from that of Englts h  , for instance . Japanese does not restrict the word orders trongly  , and allows the omission of some syntactic components  . Vhena machine translation system translates sentences between Japanese and English  , a grammar writer must be able to express such characteristics  . 
A grammar writing language should have a framework to write grammars tn analysis  , transfer , and generation phase using the same expression . It Is undeslrable for the grammar writer to learn several different expressions for dif ferent stages of a machine translation  . 
There are many word specific linguistic phenomenatn a natural language  . A grammar writer must be able to add wordspec ific rules to a machine translation system one after another to deal wtth word specifi clinguistic phenomena  , and improve hts machine translation system over a long period  . Therefore . a grammar writing language must be able to handle grammatical rules written tn word dic tionaries  . 
The rets a natural sequence tna translation process  . For example , a parstng of noun phrases which do not contain sentent talforms is executed before a parsing of more complex noun phrases  . An approximate parsing of compound sentences is executed before a parsing of complex sentences  . Also . when an application sequence of grammatical rules are written explicitly  , a grammar writing system can execute the rules efficiently  . 
because the system Just needs to test the appli cability of a restricted number of grammatical rules  . So . a grammar writing language must be able to express several phases of a translation process in the expression explicitly  . 
A grammar writing language must be able to t reat the syntactic and semantic ambiguities tn natural languages  . Butttmust have some mechanisms to avoid a combinatorial explosion  . 
Keeping these points in mind , we developed a new programming system , whichts composed of the grammar writing language and its executing system  . 
Vewtll call it GRADE ( Grammar Describer) . 
2 . Expression of the data for a processing The form of data to express the structure of a sentence during an analysis  , a transfer , and a generation process has a strong effect on the framework of a grammar wrtttng language  . GRADE uses an annotated tree structure for expressing a sentence  . Grammatical rules tnGRADE are described tn the form of tree-to-tree transformation wtth annotation to each node  . 

The annotated tree tnGRADE ts a tree struc ture whose nodes haveltsts of property names and their values  . Figure 1 shows an example of the annotated tree . 
~- CAT-S~-NUMBER-SINGUL AILE-NUMBER--SEM = HUMAN 
E-CAT : Engllsh Category Symbol
E-NUMBER : English Number ( SINGULAR or PLURAL)
E-SEM : Engltsh Semantic Marker
Ftgure 1 An example of the annotated tree tnGRADE The annotated tree can express a lot of Informat ion such as syntactic category  , number . 
semantic marker , and other thtngs . The annotated tree can also express a flagt n tts node  . whl chts stmt larto a flagtna convention a l programming language  , to control the process of a translation . 
For example , in a grammar of a generation , a grammatical rulets applled to all nodes tn the annotated tree  , whose processtngs are not finished . 
In such a case , a grammatical rule checks the DONE flag whether ttts processed or not  . end sets T to the newly processed ones . 
3. Rewriting RuletnGRADE
The bast c component of a grammar wrtttng language is a rewriting rule  . The rewriting rule In GRADE transforms one annotated tree tn to a not i ~ er annotated tree  . The rewriting rule can be used In the grammars of analysts  , transfer and generation phase in a machtnet ranslation system  , because the tree-to-tree transformation by thts rewriting rulets very powerful  . 
A rewriting rule tnGRADE conststs of a decla ration part and a mat npart  . The declaration part has the following four components  . (1) Directory Entry part , whtch contains a grammar writer's name , a verston number of the rewrtt in 9 rule , and the last date of the revision . Thts part ts not used at the execution ttme of the rewriting rule  . A grammar wrtterts able to see the informat i on by ust ng the help factltty of the GRADE system  . (2) Property Definition part , where a grammar writer declares the property names and the tr values  . (3) Vartable Intt . part , where a grammar wrtter declares the names of variables  . 
(4) Matchtng Instruction part , where a grammar wrtter specifies the mode to apply the rewriting rule to an annotated t ree  . 
The matnpant specifies the transformation tn the rewriting rule  . and has the following three parts . (1) Matchtng Condition part . where the condition of a structure and the property values of an annotated treets descr ibed  . (2) Substructure Operation part , whtch specifies operations for the annotated tree that has matched wtth the condition wrt tten tn the matching condition pant  . (3) Creatton part , whtchspecftes the structure and the proper ty values of the transformed annotated tree  . 
3.1. Matching Condition part
The matchtng condition part specifies the condition of the structure and the proper ty values of the annotated tree  . The matchtng condition part allows a grammar writer to spect fynot only art gtd structure of the annotated tree  , but also structures whtch may repeat several ttmes  , structures which may be omttted , and structures tn which the order of the tn sub -structures ts not restricted  . 
For example , the structure tn whtch adjectives ( ADJ ) repeat arbitrary ttmes and a noun ( N ) follows them tnEn gllsh ts expressed as fol lows  . 
ADJ .   .   . ADJN - - -> matching_condition : ? ( ADJSN ) :
AOJS : any C~(ADJ )):
The structure 11kea combination of a verb ( V ) and an adverbial part t cle ( ADVP ART ) tn th ts sequence wt th or without a pronoun ( PRON ) tn between tnEnglt shts wrttten as follows . 
V ( PRON ) ADVPART - - -> matching_condition : ? ( VPRON ADVP ART ) :
PRON : optional :
A typt cal Japanese sentent tal structure tn whtch three adverbial phrases  ( ADVP )  . each composed of a noun phrase ( NP ) and a case particle ( GA , WO . or NI ) proceed an verb ( V ) tn no particular order ts expressed as fol lows  . 
matching_condition ; ~( A1A2A3Y );
A 1. A3: disorder;
ADVP1ADVP2ADVP3V--->Al : ~ ( ( ADVP1NP1GA ) ) :
AAAA2:zCCADVP2NP2WO )):
NP l GANP 2 we NP a NZ A3:z CC AO VP aNe 3 . X )   ) : The matchtng condition part allows a grammar wrtter to spect fyconditions about property names and property values for the nodes of the annotated tree  . A grammar wrtter can compare not only ap roperty value of a node wt tha constant value  , but also values between two nodes tn atree . 

For example , the number agreement between a subject noun and a verb Is written as follows  . 
matching_condition : ~( NPUP):
NP . NUNBER"VP . NUNBE ~; 3 . 2 . Substructure Operation part The substructure operation parts pec't ftes operations for the annotated tree which has matched wtth the matchtng condition part  . The substructure operation part allows a grammar writer to set a property value to a node  . and to assign a tree or a property value to a variable  , whtch is declared tn the variable tntt . part . It also allow shtm to call a subgnammar , a subgnammar network , a dictlonary rule . a bull t-ln functlon , and a LISP function . The subgrammar , the subgramman network . 
the dictton any rule , and the but lt-tn function w111 be discussed tn sect to n 4   .   .  5  . , and 6 . In addition , a grammar wntter can write a conditional operation by using the IF-THEN-ELSE form  . An opera Liontoset'A ' to the lext calunt t of the determiner node  ( DET . LEX ) . tf the number of the NP node SSIN GULAR . Is wrtt ten as follows . 
substnuct une_operatton : tf NP . NUMBER-'SINGULAR':then DET . LEX < -" A ': else DET . LEX <-" NIL' ; end_tf : Transformation of matnpart tna newntttng rule: 
AA/b , , I
BCO--->E/t , , ,
BCD
Transformation of a whole annotated tree :
AA
ABCD--->AE/t ,, I/b , ,
BCDEBCD/t , , ,

Figure 2 An example of an application of the main part The matching tnst nuct to npant spec if ies the travense path of the annotated tree  . There are four types of the traverse pathes , whtch are the combinations of < left-to-r ight or night-to-left > and < bottom-to- top on top-to-bottom >  . When a grammar writer specifies left-to -right and bottom-to-top mode  , the annotated tree w111 be traversed as follows . 
53/3.3. Creation part
The structure and the property values of the transformed annotated tree ts written tn the creation part  . The transformed treets described by node names such as NP and VP  , whtch are used in the matchtng condition part on the substructure operation part  . A cneat to npart to create the tree whose top node ts S and whtch has a NP sub-tree and a VP sub-tree t swnt tten as follows  . 
creation :
Z((SNPVP )): 3 . 4  . Matching Instruction part The maln part of a rewrltlngrule In GRADE  ( the matching condition part , the substructure operation part . and the creatlon part ) can be applied not only to a whole tree , but also to subtrees . Figure 2 shows an example of the application of a maln part  . 
4 . Control of the grammatical rule applicat ionsA grammar writing language must be able to express detailed phases of a translat ion process tn the expression explt ctt\] y  . GRADE allows a grammar writer to divide a whole grammar into several parts  . Each part of the grammar ts called a subgnammar  . A subgrammar may correspond to a grammatical un it such as the parstng of a stmple noun phrase and the partng of a compound sentence  . 
A whole grammarts then described by a network o fsubgrammars  . Thts network ts called a subgnammar network . A subgrammar network allows a grammar writer to control the process of a translation tn detatl  . When ? subgrammar network tn the analysts phase consists of a subgrammar for a noun phrase  ( SG1 ) and a subgrammar for a verb-phrase ( SG2 ) tn this sequence , the executor of GRADE first appltes SG1 to an input sentence , then appltes SG2 to the result of an application of SG1  . 
4.1. Subgrammar
A subgrammar conststs of a set of rewriting rules  . Rewriting rules tna subgrammar have a pr tontty on dertngtn their application  . Then-th(n+l)-th rule . 
A grammar wrtter canspect fyfour types of app lication sequence of rewriting rules tna subgrammar  . Let us assume the situation that a set or rewr iting rules tn the subgrammarts composed of  RR1  . RR2 .   .   .   .   . and RRn . that RR1 .   .   .   .   . and RR-I cannot be applied to ant n put tree . and that RR t can be applted to t t . When a grammar wrtter specifies the ftrs ttype  . whtchts called ORDER(I ) . 
the effect of the subgrammar executionts the application of RR t to the tn put tree  . When a grammar wrtter specifies the second type  . whichs called ORDER (2) . the executor of GRADE trtes to apply RR t+I .   .   .   .   . RRn to the result of the application of RR t  . So . ORDER ( 2 ) means that rewriting rui~stn the subgramms r are sequentially applted to ant n put tree  . 
The thtrd and fourth type . whtch are called ORDER (3) and ORDER (4) . are the Iteration type of ORDER ( l ) end ORDER ( 2 ) respectively . So , the executor of GRADE trtes to apply rewrit ing rules  untt1 no rewriting rule Is applicable to the annotated tree  . 
SEARCH-CANDIDATE-OF-HOUNS . sg:sg_mode:order(Z ): rr_tn_sg:


CANDIDATE-OF-NOUNS-Z ; end_sg . SEARCH-CANDIDATE-OF-NOUNS:
Ftgure 3An example of a subgrammar
Ftgure 3 shows an example of a subgramms r.
When thts subgrammar is applted to an annotated tree  . the executor of GRADE ftrst trtes to apply the rewriting rule  CANDIDATE-OF-NOUNS-1 to the tnput tree . If the appl catton of thts rule succeeds , the tnput treets transformed to the result of the application of the rewriting rule  CANDIDATE-OF-NOUNS-1  . Otherwise . the tnput treets not modified . Inetther case . the executor of GRADE next tresto apply the rewrttng rule UP-NP-TO-PNP to the tn putt ree  . The executor continues such a process untt1 the application of the last rewriting rule  CANDIDATE-OF-NOUNS-2 ts finished . 
4.2. Subgramar Network
A subgrammar network descrbes the application sequence of subgrauars  . The specification of a subgrammar network conststs of the following ftvep arts  . (1) Directory Entry part . whtchts as the same as the one tn are writing rule  . (2) Property Definition part . 
whtch Is the same as the one tn are writing ru le  . 
This part ts used as the default declaration tn rewriting rules  . (3) Vsrtable\]ntt . part . which ts the same as the one tn are writing ru le  . The variables are used to control the transi tion of the subgrammar network  . The variables are referred to and asstgned tn the substructure operation part of the rewrit ing rule  . The variables are also referred tne 11nk specification part . whtch wtll be described later . (4) Entry part . whtch specifies a start node of the network  . (5) Network part . whtch specifies a network of subgrammars , The network parts pecf\]es the network structure of subgrammars  , and conststs of node specifications and 11nk spect ft cat on s . The node specification has a label and a subgrammer or ssubgnammar network name  . whl chts called when the node gets the control of the processing  . The 11nk specification specifies the transit on among nodes tn a subgramman network  . The 11nk specification checks the value of a verteb lew htchsset tn ? rewriting rule  . and dect des the label of a node whtch wtll be processed next  . 
PRE . sgn ; directory_entry:owner(J . NAKAHURA ) : verston ( VO2L05 ) : last_update ( 83/12/25 ) : var_tntt ; 
OPRE-FLAG tntt(T ): entry:
START : network:
START : PRE-STEP-osg;
LOOP:PRE-STEP-2.sg;
A:PRE-STEP-3.sg:
B:PRE-END-CHECK . sg : fOPRE-FLAG : thengo to LOOP : else go to LAST : 
LAST:PRE-STEP-4 . s 9: extt : end_sgn . PRE ; Ftgure 4 An example of a subgrammar network . 
Ftgure 4 shows an example of a subgrammar network . When the executor of GRADE appltest hts subgran unar network to ant n put tree  . the executor checks the var-tntt part . then puts a new vartable OPRE-FLAG on a stack , and sets T to OPRE-FLAG as an tntt tal value . After that . the executor checks the entry part and find the label of the start node START tn the network  . Then the executor searches the node START and applles the subgrammar  PRE-STEP-1 to the tnput tree . After the application , the executor appltes the subgrammer PRE-STEP-2 ( node name : LOOP ) and PRE-STEP-3 ( node name : A ) to the annotated tree tnth ts sequence . 
Next . the executor applles the subgrammar PRE-END -CHECK  ( node name : B ) to the tree . 

Rewriting rules in PRE-END-CHECK examine the t ree and set T or NIL to the variable ePRE -FLAG  . The executor checks the links pectf cat J on part  , which is started by IF . and examines the value of the variable @ PRE -FLAG  . The node in the network which will be act ivated next is the node LOOP if@PRE-FLAG is not NZL  , other wlse , the node LAST . 
Thus , while @ FRE-FLAG tsnot NIL , the executor repeats the applications of three subgrammars  , PRE-STEP-2 . PRE-STEP-3 . and PRE-END-CHECK . to the annotated tree . When@PRE-FLAG becomes NIL . the subgrammar PRE-STEP-4 tn the node LAST ts applted to the tree . and the application of thls subgrammar network PREIs terminated  . 
5 . Handling the granna atl cal rule tn the word dic tionaries GRADE allows a grammar wrtter to write word specific grammatical rules as a subgramman In an entry of word dictionaries of a machine translation system  . A subgramman written in a dictionary entry is called a dictionary rule  . The dictionary rule is specific to a par ticular word In the dictionary  . 
The dictionary rule is retrieved wt thaent ry word and a rule identifier as the key  . and is applied to the annotated tree which is specified by a grammar writer  , when CALL-DIC operation In the substructure operation part Is executed  . Figure 5 shows an example of a rewriting rule which ca lls a dictionary rule  . In thts case . a dictionary rule which ts written in an entry of a word as indicated by V  . LEX ( the value of the lext calunt t of verb ) . 
and whose namets ANALYSIS . tsepplted to the sequence of NP1 . V . NP 2 . and PP ( noun phrase 1 . 
verb phrase , noun phrase 2 . and prepositional phrase ) . Then the result of the application of the dictionary rule Is assigned to the vartable aS  . 
CASE-FRANE . rr : var_tntt:aS ; matching_condition :
Z ( NP Zv Me2 PP ) : substructure_operation :@ S <- ca 11-dtc ( V . LEX
ANALYSISZ ( NP1 VNP2 PP ) ): creat ion : ~ ( es ) : end_Pr . CASE-FRAME : Ftgure SAn example of a rewriting rule which calls a dictionary rule  6  . Treatment of Ambiguities A grammar wrtttng language must be able to treat the syntactic end semantic ambiguities in natural languages  . GRADE allows a grammar writer to collect all the result of possible tree-to-t reetransformations by a subgrammar  . However , It must avoid a combinatorial explosion , when tten counters the ambiguities . 
For instance , let us assume that a grammar writer writes a subgramman which contains two rewriting ru lesto analyze the case frame of ? verb  , that a rewriting rulests the rule to const ruct VP  ( verb phrase ) from V and UP ( a verb and a noun phrase )   , and that the otherts the rule to construct VP  ( verb phrase ) from V . NP and PP ( a verb . a noun phrase , and a prepositional phrase ) . 
When he specifies NON DETER MINISTIC_PARALLELED mode to the subgremmar  , the executor of GRADE 8pp ltes both rewriting rules to an Input tree , constructs two transformed trees , and merges them tn to 8 new tree whose top node has 8 spectal property PARA . 
The top node of this structure is called a pare special node  . whose sub-trees are the transformed trees by the rewriting rules  . Figure 6 shows an example of thts mode and a para node . 

VNP PPSG

VP PP VP
AA",,
VNP VNP PP
Figure 6 An example of a pars speclal node A grammar wr iter can select the most appropriate one from the sub-trees under a pare special node  . A grammar writerts able to use built-in funct lons  . MAP-SG . MAP-SGN . SORT . CUT . and INJECTION in the substructure operation part to choose the most appnoprlate one  . Figure 7 shows an example to use these bullt-Jn funct ions  . 
substructure_operation : eX <= ca 11-dtc(V . LEX CASE-FRAMEZ ( NNP PP ) ): eX <- ca11-but l t ( map-sg ~ ( gX ) tree
EVALUATE-CASE-FRAME ) :@ X <- call-built ( sort Z ( @ X ) tree SCORE ) :@ X <- cell-built ( cut\[ ( eX ) tree 1 ) : 9X <- call-built ( Injection ~ ( eX ) tree 1 ) : Figure 7 An example of bull t-ln functions In this substructure operation part  . the executor of GRADE appltes the dictionary rule wrt tten tn a word which ts the value of V  . LEX(lexl caluntt of verb ) to the tree . and sets the result to the vartable eX . When the nondetermt nisttc-paralleled mode ts used tn the dictionary rule  . the value of eXts the tree whose root node tsa p are spectel node  . After that , the executor calls but lt-tn functt on MAP -SG to apply of the value of OK  . and sets the result to eX again . The subgrammar EVALUATE-CASE-FRAME computes the evaluation score end sets the score to the value of the property SCORE tn the root node of the subtrees  . Next , the executor calls but lt-tn functt on SORT  . CUT . and INJECTION to get the subtree whose score Is the highest one among the subtrees under the parespectal node  . This treets then set to 9X as the most appropriate result of the dict ionary ru\]e  . 
The paraspectal nodets treated as the same as the other nodes tn the current Implementation of GRADE  . A grammar wrtter can use the paranode as he want  , and can select a subtree under a pare node at the later grammatical rule application  . 
7 . System configuration end the environment The system configuration of GRADE tsShown tn Figure  8  . Grammatical rules written tnGRADE are fir st translated tn to tnternal forms  , which are expressed by s-expressions tnLISP . This translation ts performed by GRADE trans lator  . The Internal forms of grammatical rules are applted to ant n put tree  . whichts an output of the morphological analysts program  . Thts rule application Is performed by GRADE executor  . The result of rule applications ssent to the morphological  generat4on program . 
Dictionary Grammar f
JGRADE translator1/\
Dictionary Grammar ( Internal form ) rule ~ ~ r ~ tnput_~GRADE ~ output sentent tal tree executor J sentent taltree Ftgure  8 The system configuration of GRADE
GRADE system tsmrtttent nUTILISP ( University of Tokyo Interactive LISP ) and Implemented on FACON M382 wtth the additional functton of handllng Chatnese characters  . The systemts also usable on Ltsp Machtne Symbollcs  3600  . The program stze of GRADE systemts about 10 . 000 ltnes . 
the form of tree-to-tree transformation r t th annotation to each node  .   ( 2 ) Rewriting rule has ? powerful wrtttngfac ility  .   ( 3 ) Grammar can be divided Into several parts and can be  11nked together as a subgrammar network .   ( 4 ) Subgrammar can be written tn the dictionary entrtes to express wordspect ftclinguiSt iC phenomena  .   ( 5 ) Spectel node ts provtded tna tree for embedding ambiguities  . 
GRADE has been used for more than a year as the software of the nattonal machtnetranslat ion project from Japanese Into English  . The effectiveness of GRADE has been demonstrated tnthts project  . The linguistic parts of the project such as the morphological analysts/generation programs  , the grammars for the analysts of Japanese . the transfer from Japanese Into Englts hand the generation of Engllsh  . are discussed tnother papers ( Sakamoto 84 )   ( TsuJt 184 )   ( Raged 84 )  . 
Thts study : " Research on the machtnetranslat ion system  ( Japanese-English ) of scientific and technological documents " Is betng performed through Spectal Coordinat ion Funds for Promoting Science & Technology of the Science and Technology 
Agency of the Japanese Government.

Ve would 11ke to acknowlege the contribution of N . Kogt . F . Ntshtno . Y . Sakane . M . 
Kobayasht . S . Sate . and Y . Senda . who programmed much of the system . We mould also 11ke to thank the other member of Me-project for the iruseful comments  . 

Bottet . Ch . , et el . Implementation and Conversational Environment of ARIANE  78  . 4 . Proc . 
COLING 82.1982.
Rage D , M . , et el , Dealtng wtth Incompleteness of Linguistic Kno~le dego on Language Translation  . 
Proc . COLING84 o ; 964.
Sakamoto , Y .   . et al , Lext con Features for Japanese Syntactic Analysts In Mu-ProJect-JE  , Proc . 
COLING 84, 1984.
TsuJtt , J . , etel , Analysts Grammar or Japanese tn
Hu-ProJect , Proc . COLING 84,;984.
8. Conclusion
The grammar wrtttng system GRADE ts discussed 4n thts paper . GRADE has the follow 4 ng feature S . ( I ) Rewriting rulets an expression tn
