Proceedings of the ACL-IJCNLP 2009 Conference Short Papers , pages 9?12,
Suntec , Singapore , 4 August 2009.
c
?2009 ACL and AFNLP
An Earley Parsing Algorithm for Range Concatenation Grammars
Laura Kallmeyer
SFB 441
Universit?at T?ubingen
72074 T?ubingen , Germany
lk@sfs.uni-tuebingen.de
Wolfgang Maier
SFB 441
Universit?at T?ubingen
72074 T?ubingen , Germany
wo.maier@uni-tuebingen.de
Yannick Parmentier
CNRS - LORIA
Nancy Universit?e
54506 Vand?uvre , France
parmenti@loria.fr
Abstract
We present a CYK and an Earley-style
algorithm for parsing Range Concatena-
tion Grammar ( RCG ), using the deduc-
tive parsing framework . The characteristic property of the Earley parser is that we use a technique of range boundary constraint propagation to compute the yields of nonterminals as late as possible . Experiments show that , compared to previous approaches , the constraint propagation helps to considerably decrease the number of items in the chart.
1 Introduction
RCGs ( Boullier , 2000) have recently received a growing interest in natural language processing ( S?gaard , 2008; Sagot , 2005; Kallmeyer et al , 2008; Maier and S?gaard , 2008). RCGs generate exactly the class of languages parsable in deterministic polynomial time ( Bertsch and Nederhof , 2001). They are in particular more powerful than linear contextfree rewriting systems ( LCFRS ) ( Vijay-Shanker et al , 1987). LCFRS is unable to describe certain natural language phenomena that RCGs actually can deal with . One example are long-distance scrambling phenomena ( Becker et al , 1991; Becker et al , 1992).
Other examples are non-semilinear constructions such as case stacking in Old Georgian ( Michaelis and Kracht , 1996) and Chinese number names ( Radzinski , 1991). Boullier (1999) shows that RCGs can describe the permutations occurring with scrambling and the construction of Chinese number names.
Parsing algorithms for RCG have been introduced by Boullier (2000), who presents a directional topdown parsing algorithm using pseudocode , and Barth?elemy et al (2001), who add an oracle to Boullier?s algorithm . The more restricted class of LCFRS has received more attention concerning parsing ( Villemonte de la Clergerie , 2002; Burden and Ljungl?of , 2005). This article proposes new CYK and Earley parsers for RCG , formulating them in the framework of parsing as deduction ( Shieber et al , 1995). The second section introduces necessary definitions . Section 3 presents a CYK-style algorithm and Section 4 extends this with an Earley-style prediction.
2 Preliminaries
The rules ( clauses ) of RCGs ranging over parts of the input by other predicates.
E.g ., a clause S(aXb )? S(X ) signifies that S is true for a part of the input if this part starts with an a , ends with a b , and if , furthermore , S is also true for the part between a and b.
Definition 1. A RCG G = ? N,T , V , P , S ? consists of a ) a finite set of predicates N with an arity function dim : N ? N \ {0} where S ? N is the start predicate with dim(S ) = 1, b ) disjoint finite sets of terminals T and variables V , c ) a finite set P of clauses ? m , where m ? 0 and each of the ? i , 0 ? i ? m , is a predicate of the form A i (? dim(A i ) ) with A i ? N and ? j ? ( T ? V ) ? for 1 ? j ? dim(A i ).
Central to RCGs is the notion of ranges on strings.
Definition 2. For every w = w n with w i ? T (1 ? i ? n ), we define a ) Pos(w ) = {0, . . . , n }. b ) ? l , r ? ? Pos(w ) ? Pos(w ) with l ? r is a range in w . Its yield ? l , r?(w ) is the substring w l+1 . . . w r . c ) For two ranges ? ? l ? l tor ? = (? x k , y k ?) is a range vector of dimension k in w if ? x i , y i ? is a range in w for 1 ? i ? k . ?( i).l ( resp . ?( i).r ) denotes then the see Boullier (2000) for details.
9 first ( resp . second ) component of the ith element of ?, that is x i ( resp . y i ).
In order to instantiate a clause of the grammar , we need to find ranges for all variables in the clause and for all occurrences of terminals . For convenience , we assume the variables in a clause and the occurrences of terminals to be equipped with distinct subscript indices , starting with 1 and ordered from left to right ( where for variables , only the first occurrence is relevant for this order).
We introduce a function ? : P ? N that gives the maximal index in a clause , and we define ?( c , x ) for a given clause c and x a variable or an occurrence of a terminal as the index of x in c.
Definition 3. An instantiation of a c ? P with ?( c ) = j w.r.t . to some string w is given by a range vector ? of dimension j . Applying ? to a predicate A (~?) in c maps all occurrences of x ? ( T ? V ) with ?( c , x ) = i in ~? to ?( i ). If the result is defined ( i.e ., the images of adjacent variables can be concatenated ), it is called an instantiated predicate and the result of applying ? to all predicates in c , if defined , is called an instantiated clause.
We also introduce range constraint vectors , vectors of pairs of range boundary variables together with a set of constraints on these variables.
Definition 4. Let V r = { r of range boundary variables . A range constraint vector of dimension k is a pair ?~?, C ? where a ) ~? ? ( V ) k ; we define V r (~?) as the set of range boundary variables occurring in ~?. b ) C is a set of constraints c r that have one of the following forms : r k ? r r (~?) and k ? N.
We say that a range vector ? satisfies a range constraint vector ??, C ? iff ? and ? are of the same dimension k and there is a function f : V r ? N that maps ?( i).l to ?( i).l and ?( i).r to ?( i).r for all 1 ? i ? k such that all constraints in C are satisfied . Furthermore , we say that a range constraint vector ??, C ? is satisfiable iff there exists a range vector ? that satisfies it.
Definition 5. For every clause c , we define its range constraint vector ??, C ? w.r.t . aw with | w | = n as follows : a ) ? has dimension ?( c ) and all range boundary variables in ? are pairwise different . b ) For all ? r r in cwith i = ?( c , x ): ?( i).l+1 = ?( i).r ? C . For all x , y that are variables or occurrences of terminals in c such that xy is a substring of one of the arguments in c : ?(?( c , x)).r = ?(?( c , y)).l ? C.
These are all constraints in C.
The range constraint vector of a clause c captures all information about boundaries forming a range , ranges containing only a single terminal , and adjacent variables/terminal occurrences in c.
An RCG derivation consists of rewriting instantiated predicates applying instantiated clauses , i.e . in every derivation step ? w ? place the lefthand side of an instantiated clause with its righthand side ( w.r.t . a word w ). The language of an RCG G is the set of strings that can be reduced to the empty word : L(G ) = { w |
S(?0, | w |?) + ?
G,w ?}.
The expressive power of RCG lies beyond mild contextsensitivity . As an example , consider the RCG from Fig . 3 that generates a language that is not semilinear.
For simplicity , we assume in the following without loss of generality that empty arguments (?) occur only in clauses whose righthand sides are empty.
2 3 Directional Bottom-Up Chart Parsing
In our directional CYK algorithm , we move a dot through the righthand side of a clause . We therefore have passive items [ A , ?] where A is a predicate and ? a range vector of dimension dim(A ) and active items . In the latter , while traversing the righthand side of the clause , we keep a record of the left and right boundaries already found for variables and terminal occurrences . This is achieved by subsequently enriching the range constraint vector of the clause . Active items have the form [ A(~x )? ? ??, ??, C ?] with A(~x )? ?? a clause , ?? 6= ?, ?( A(~x ? ??)) = j and ??, C ? a range constraint vector of dimension j . We require that ??, C ? be satisfiable.
3 fying this condition : Introduce a new unary predicate Eps with a clause Eps (?) ? ?. Then , for every clause c with righthand side not ?, replace every argument ? that occurs in c with a new variable X ( each time a distinct one ) and add the predicate Eps(X ) to the righthand side of c.
3
Items that are distinguished from each other only by a bijection of the range variables are considered equivalent . I.e ., if the application of a rule yields a new item such that an equivalent one has already been generated , this new one is not added to the set of partial results.
10
Scan : [ A , ?]
A(~x )? ? ? P with instantiation ? such that ?( A(~x )) = A(?)
Initialize : [ A(~x )? ??, ??, C?]
A(~x )? ? ? P with range constraint vector ??, C ?,? 6= ?
Complete : [ B,?
B ], [ A(~x )? ? ? B(x k ... y k )?, ??, C ?] [ A(~x )? ? B(x k ... y k ) ??, ??, C ? ?] where C ? = C ? {?
B ( j).l = ?(?( x j )). l , ?
B ( j).r = ?(?( y j )). r | 1 ? j ? k}.
Convert : [ A(~x )? ??, ??, C ?] [ A , ?]
A(~x )? ? ? P with an instantiation ? that satisfies ??, C ?, ?( A(~x )) = A(?)
Goal : [ S , (?0, n?)]
Figure 1: CYK deduction rules
The deduction rules are shown in Fig . 1. The first rule scans the yields of terminating clauses.
Initialize introduces clauses with the dot on the left of the righthand side . Complete moves the dot over a predicate provided a corresponding passive item has been found . Convert turns an active item with the dot at the end into a passive item.
4 The Earley Algorithm
We now add topdown prediction to our algorithm.
Active items are as above . Passive items have an additional flag p or c depending on whether the item is predicted or completed , i.e ., they either have the form [ A , ??, C ?, p ] where ??, C ? is a range constraint vector of dimension dim(A ), or the form [ A , ?, c ] where ? is a range vector of dimension dim(A).
Initialize : [ S , ?(? r
Predict-rule : [ A , ??, C ?, p ] [ A(x k . . . y k )? ??, ?? ? , C ? ?] where ?? ? , C ? ? is obtained from the range constraint vector of the clause A(x k . . . y k ) ? ? by taking all constraints from C , mapping all ?( i).l to ? ? (?( x i )). l and all ?( i).r to ? ? (?( y i )). r , and then adding the resulting constraints to the range constraint vector of the clause.
Predict-pred : [ A (...)? ? ? B(x k ... y k )?, ??, C ?] [ B , ?? ? , C ? ?, p ] where ? ? ( i).l = ?(?( x i )). l , ? ? ( i).r = ?(?( y i )). r for all 1 ? i ? k and C ? = { c | c ? C , c contains only range variables from ? ? }.
Scan : [ A , ??, C ?, p ] [ A , ?, c]
A(~x )? ? ? P with an instantiation ? satisfying ??, C ? such that ?( A(~x )) = A(?)
Figure 2: Earley deduction rules
The deduction rules are listed in Fig . 2. The axiom is the prediction of an S ranging over the entire input ( initialize ). We have two predict operations : Predict-rule predicts active items with the dot on the left of the righthand side , for a given predicted passive item . Predict-pred predicts a passive item for the predicate following the dot in an active item . Scan is applied whenever a predicted predicate can be derived by an ?- clause.
The rules complete and convert are the ones from the CYK algorithm except that we add flags c to the passive items occurring in these rules . The goal is again [ S , (?0, n ?), c].
To understand how this algorithm works , consider the example in Fig . 3. The crucial property of this algorithm , in contrast to previous approaches , is the dynamic updating of a set of constraints on range boundaries . We can leave range boundaries unspecified and compute their values in a more incremental fashion instead of guessing all ranges of a clause at once at prediction.
4
For evaluation , we have implemented a directional topdown algorithm where range boundaries are guessed at prediction ( this is essentially the algorithm described in Boullier (2000)), and the new Earley-style algorithm . The algorithms were tested on different words of the language
L = { a | n ? 0}. Table 1 shows the number of generated items.
Word Earley TD a a a a
Word Earley TD a a a a
Table 1: Items generated by both algorithms Clearly , range boundary constraint propagation increases the amount of information transported in single items and thereby decreases considerably the number of generated items.
5 Conclusion and future work
We have presented a new CYK and Earley parsing algorithms for the full class of RCG . The crucial difference between previously proposed topdown RCG parsers and the new Earley-style algorithm is that while the former compute all clause instantiations during predict operations , the latter tween items more complex and more expensive which means that for an efficient implementation , an integer-based representation of the constraints and adequate techniques for constraint solving are required.
11
Grammar for { a | n > 0}: S(XY )? S(X)eq(X,Y ), S(a
Parsing trace for w = aa:
Item Rule 1 [ S , ?(? r 2 [ S(XY )? ? S(X)eq(X,Y ), { X.l ? X.r,X.r = Y.l , Y.l ? Y.r , 0 = X.l , 2 = Y.r }] predict-rule from 1 3 [ S , ?(? r 4 [ S , (?0, 1?), c ] scan from 3 5 [ S(XY )? ? S(X)eq(X,Y ), { X.l ? X.r,X.r = Y.l , Y.l ? Y.r , 0 = X.l , }] predict-rule from 3 6 [ S(XY )? S(X ) ? eq(X,Y ), {. . . , 0 = X.l , 2 = Y.r , 1 = X.r }] complete 2 with 4 7 [ S(XY )? S(X ) ? eq(X,Y ), { X.l ? X.r,X.r = Y.l , Y.l ? Y.r , 0 = X.l , 1 = X.r }] complete 5 with 4 8 [ eq , ?(? r 9 [ eq(a a . . .
10 [ eq , (?0, 1?, ?1, 2?), c ] scan 8 11 [ S(XY )? S(X)eq(X,Y )?, {. . . , 0 = X.l , 2 = Y.r , 1 = X.r , 1 = Y.l }] complete 6 with 10 12 [ S , (?0, 2?), c ] convert 11 Figure 3: Trace of a sample Earley parse avoids this using a technique of dynamic updating of a set of constraints on range boundaries . Experiments show that this significantly decreases the number of generated items , which confirms that range boundary constraint propagation is a viable method for a lazy computation of ranges.
The Earley parser could be improved by allowing to process the predicates of the righthand sides of clauses in any order , not necessarily from left to right . This way , one could process predicates whose range boundaries are better known first . We plan to include this strategy in future work.
References
Franc?ois Barth?elemy , Pierre Boullier , Philippe Deschamp , and ?
Eric de la Clergerie . 2001. Guided parsing of Range Concatenation Languages . In Proceedings of ACL , pages 42?49.
Tilman Becker , Aravind K . Joshi , and Owen Rambow.
1991. Long-distance scrambling and tree adjoining grammars . In Proceedings of EACL.
Tilman Becker , Owen Rambow , and Michael Niv.
1992. The Derivationel Generative Power of Formal Systems or Scrambling is Beyond LCFRS . Technical Report IRCS-92-38, Institute for Research in Cognitive Science , University of Pennsylvania.
E . Bertsch and M.-J . Nederhof . 2001. On the complexity of some extensions of RCG parsing . In Proceedings of IWPT 2001, pages 66?77, Beijing , China.
Pierre Boullier . 1999. Chinese numbers , mix , scrambling , and range concatenation grammars . In Proceedings of EACL , pages 53?60, Bergen , Norway.
Pierre Boullier . 2000. Range concatenation grammars.
In Proceedings of IWPT 2000, pages 53?64, Trento.
H?akan Burden and Peter Ljungl?of . 2005. Parsing linear contextfree rewriting systems . In Proceedings of IWPT 2005, pages 11?17, Vancouver.
Laura Kallmeyer , Timm Lichte , Wolfgang Maier , Yannick Parmentier , and Johannes Dellert . 2008. Developing an MCTAG for German with an RCG-based parser . In Proceedings of LREC2008, Marrakech , Morocco.
Wolfgang Maier and Anders S?gaard . 2008. Treebanks and mild contextsensitivity . In Proceedings of the 13th Conference on Formal Grammar 2008,
Hamburg , Germany.
Jens Michaelis and Marcus Kracht . 1996. Semilinearity as a Syntactic Invariant . In Logical Aspects of
Computational Linguistics , Nancy.
Daniel Radzinski . 1991. Chinese number-names , tree adjoining languages , and mild contextsensitivity.
Computational Linguistics , 17:277?299.
Beno??t Sagot . 2005. Linguistic facts as predicates over ranges of the sentence . In Proceedings of LACL 05, number 3492 in Lecture Notes in Computer Science , pages 271?286, Bordeaux , France . Springer.
Stuart M . Shieber , Yves Schabes , and Fernando C . N.
Pereira . 1995. Principles and implementation of deductive parsing . Journal of Logic Programming , 24(1& 2):3?36.
Anders S?gaard . 2008. Range concatenation grammars for translation . In Proceedings of COLING,
Manchester , England.
K . Vijay-Shanker , David Weir , and Aravind Joshi.
1987. Characterising structural descriptions used by various formalisms . In Proceedings of ACL.
Eric Villemonte de la Clergerie . 2002. Parsing mildly context-sensitive languages with thread automata.
In Proceedings of COLING , Taipei , Taiwan.
12
