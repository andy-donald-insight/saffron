Decoding Algorithm in Statistical Machine Translation 
Ye-Yi Wang and Alex Waibel
Language Technology Institute
School of Computer Science
Carnegie Mellon University
5000 Forbes Avenue
Pittsburgh , PA 15213, USA
yyw , waibel@cs , cmu.edu
Abstract
Decoding algorithm is a crucial part in statistical machine translation  . We describe a stack decoding algorithm in this paper  . 
We present he hypothesis scoring method and the heuristics used in our algorithm  . 
We report several techniques deployed to improve the performance of the decoder  . 
We also introduce a simplified model to moderate the sparse data problem and to speed up the decoding process  . We evaluate and compare these techniques/models in our statistical machine translation system  . 
1 Introduction 1 . 1 Stat is t ica l Machine Trans lat ion Statistical machine translation is based on a channel model  . Given a sentence T in one language ( German ) to be translated into another language ( English )  , it considers T as the target of a communication channel  , and its translation S as the source of the channel  . Hence the machine translation task becomes to recover the source from the target  . Basically every English sentence is a possible source for a German target sentence  . If we assign a probability P ( SIT ) to each pair of sentences ( S , T ) , then the problem of translation is to find the source S for a given target T  , such that P ( S\[T ) is the maximum . 
According to Bayes rule,
P ( SIT ) = P ( S)P ( TIS)
P ( T ) (1)
Since the denominator is independent of S , we have -- argmaxP ( S)P ( TIS ) (2)

Therefore a statistical machine translation system must deal with the following three problems : ? Modeling Problem : How to depict the process of generating a sentence in a source language  , and the process used by a channel to generate a target sentence upon receiving a source sentence ? The former is the problem of language modeling  , and the later is the problem of translation modeling  . They provide a framework for calculating P ( S ) and P ( WIS ) in ( 2 )  . 
? Learning Problem : Given a statistical language model P  ( S ) and a statistical translation model P ( TIS )  , how to estimate the parameters in these models from a bilingual corpus of sentences ? ? Decoding Problem : With a fully specified  ( framework and parameters ) language and translation model , given a target sentence T , how to efficiently search for the source sentence that satisfies  ( 2 )  . 
The modeling and learning issues have been discussed in  ( Brown et ah ,  1993) , where ngram model was used for language modeling , and five different translation models were introduced for the translation process  . We briefly introduce the model 2 here , for which we built our decoder . 
In model 2 , upon receiving a source English sentence e = el ,  .  ? - , el , the channel generates a German sentence g = gl ,  ? ? " , g , nat the target end in the following way : 1 . With a distribution P ( mIe) , randomly choose the lengthm of the German translation g  . In model 2 , the distribution is independent of m and e :
P ( m\[e ) = e where e is a small , fixed number.
2 . For each position i (0 < i < m ) ing , find the corresponding position ai ine according to an alignment distribution P  ( ai Ii , a ~-1 , m , e ) . In model 2 , the distribution only depends on i , ai and the length of the English and German sentences : P  ( aili , a ~- l , m , e ) = a(aili , m , l ) 3 . Generate the word glat the position i of the German sentence from the English word e a ~ at translation distribution P  ( git~t ~' ~ , s t~i-t , e ) = t(glIea ~) . The distribution here only depends ongi and eai . 
Therefore , P ( gle ) is the sum of the probabilities of generating from e over all possible alignments A  , in which the position i in the target sentence g is aligned to the position ai in the source sentence : 
P ( gle ) =
Ilme ~, . . . ~" IT t(g#le=j la(a~Ij , l , m ) = al=0 amm0 j=l m!e1"I~t(g#le , ) a(il j , t , m ) (3) j = li = 0 ( Brown et al ,  1993 ) also described how to use the EM algorithm to estimate the parameters a  ( iIj , l , m ) and $( gIe ) in the aforementioned model . 
1.2 Decoding in Statistical Machine
Translation ( Brown et al , 1993) and ( Vogel , Ney , and Tillman ,  1996 ) have discussed the first two of the three problems in statistical machine translation  . Although the authors of ( Brown et al ,  1993 ) stated that they would discuss the search problem in a follow up arti-?cle  , so fart here have no publications devoted to the decoding issue for statistical machine translation  . 
On the other side , decoding algorithm is a crucial part in statistical machine translation  . Its performance directly affects the quality and efficiency of translation  . Without a good and efficient decoding algorithm , a statistical machine translation system may miss the best translation of an input sentence even if it is perfectly predicted by the model  . 
2 Stack Decoding Algorithm
Stack decoders are widely used in speech recognition systems  . The basic algorithm can be described as following  :   1  . Initialize the stack with a null hypothesis . 
2 . Pop the hypothesis with the highest score off the stack  , name it as current-hypothesis . 
3 . if current-hypothesis is a complete sentence , output it and terminate . 
4 . extend current-hypothesis by appending a word in the lexicon to its end  . Compute the score of the new hypothesis and insert it into the stack  . Do this for all the words in the lexicon . 
5. Goto 2.
2.1 Scoring the hypotheses
In stack search for statistical machine translation  , a hypothesis H includes ( a ) the length l of the source sentence , and ( b ) the prefix words in the sentence . Thus a hypothesis can be written as H = l : er e2 . . " ek , which postulates a source sentence of length l and its first k words  . The score of H , fit , consists of two parts : the prefix scoregH for ele2"" ek and the heuristic score hH for the part ek+lek+2"-et that is yet to be appended to H to complete the sentence  . 
2 . 1 . 1 Prefix score gH ( 3 ) can be used to assess a hypothesis . Although it was obtained from the alignment model  , it would be easier for us to describe the scoring method if we interpret the last expression in the equation in the following way : each word el in the hypothesis contributes the amount et  ( gj\[ei ) a ( i lJ , l , m ) to the probability of the target sentence word gj  . For each hypothesis H = l : el , e2 , -" , e k , we use SH ( j ) to denote the probability mass for the target word gl contributed by the words in the hypothesis : k 
SH(j ) = e~'~t(g~lei)a(ilj , t , m )   ( 4 ) i = 0 Extending H with a new word will increase
S n ( j ), l < j < m .
To make the score additive , the logarithm of the probability in (3) was used . So the prefix score contributed by the translation model is  :~'\]~=0 logSt / ( j )  . 
Because our objective is to maximize P ( e , g ) , we have to include as well the logarithm of the language model probability of the hypothesis in the score  , therefore we have mg . = ~ IogS . ( j ) + j=0k
E logP ( ellei-N+t'"el-l).
i =0 here N is the order of the ngram language model . 
The above g-scoregH of a hypothesis H = l : ele ? . . . ek can be calculated from the g-score of its parent hypothesis P = l :  ele2  . . " ek-t : gH = gp+logP ( eklek-N+t ''' ek-t ) m + ~-' ~ log\[1 + et ( gjlek ) a ( kIj , l , m ) ~= 0 se ( j ) \] SH ( j ) = Sp ( j ) + et ( gjlek ) a ( klj , l , m ) (5) A practical problem arises here . For a many early stage hypothesis P , Sp(j ) is close to 0 . This causes problems because it appears as a denominator in  ( 5 ) and the argument of the log function when calculating gp  . We dealt with this by either limiting the translation probability from the null word  ( Brownal . , 1993) over a threshold during the EM training , or setting SHo ( j ) to a small probability 7r instead of 0 for the initial null hypothesis H0  . Our experiments show that lr = 10   -4 gives the best result . 
2.1.2 Heuristics
To guarantee an optimal search result , the heuristic function must be an upper bound of the score for all possible extensions  ek+le/c+2  . . . et ( Nilsson , 1971) of a hypothesis . In other words , the benefit of extending a hypothesi should never be underestimated  . Otherwise the search algorithm will conclude prematurely with a non-optimal hypothesis  . 
On the other hand , if the heuristic function overestimates the merit of extending a hypothesis too much  , the search algorithm will waste a huge amount of time after it hits a correct result to safeguard the optimality  . 
To estimate the language model score hLM of the unrealized part of a hypothesis  , we used the negative of the language model perplexity PP train on the training data as the logarithm of the average probability of predicting a new word in the extension from a history  . So we have hLM =-(1-k)PP trai,+C . (6) Here is the motivation behind this . We assume that the perplexity on training data overestimates the likelihood of the forthcoming word string on average  . However , when there are only a few words to be extended ( k is close to 1 )  , the language model probability for the words to be extended may be much higher than the average  . This is why the constant term C was introduced in  ( 6 )  . When k < < l ,  -  ( l-k ) PP train is the dominating term in ( 6 )  , so the heuristic language model score is close to the average  . This can avoid overestimating the score too much . Ask is getting closer to l , the constanter mC plays a more important role in  ( 6 ) to avoid underestimating the language model score  . In our experiments , we used C = PP train + log(Pmax ) , where Pm == is the maximum ngram probability in the language model  . 
To estimate the translation model score , we introduce a variable va(j ) , the maximum contribution to the probability of the target sentence word gj from any possible source language words at any position between i and l : vit  ( j ) = max t ( g~\[e ) a ( klj , l , m ) . (7) i <_/ c <_ l , eEL ~" " here LE is the English lexicon . 
Since vit(j ) is independent of hypotheses , it only needs to be calculated once for a given target sentence  . 
When k < 1 , the heuristic function for the hypothesis H = 1  :  ele2  - . . e/c , is j = l - ( t - k)PP ,~= . , + c ( 8 ) where log ( v ( k+l ) t ( j ) )- logSg ( j ) ) is the maximum increasement that a new word can bring to the likelihood of the j-th target word  . 
When k = l , since no words can be appended to the hypothesis , it is obvious that h ~ = O . 
This heuristic function overestimates the score of the upcoming words  . Because of the constraints from language model and from the fact that a position in a source sentence cannot be occupied by two different words  , normally the placement of words in those unfilled positions cannot maximize the likelihood of all the target words simultaneously  . 
2.2 Pruning and aborting search
Due to physical space limitation , we cannot keep all hypotheses a live . We set a constant M , and whenever the number of hypotheses exceeds M , the algorithm will prune the hypotheses with the lowest scores  . In our experiments , M was set to 20,000 . 
There is time limitation too . It is of little practical interestoke ep a seemingly endlessearch alive too long  . So we set a constant T , whenever the decoder extends more than T hypotheses  , it will abort the search and register a failure . In our experiments , T was set to 6000 , which roughly corresponded to 2 and half hours of search effort . 
2.3 Multi-Stack Search
The above decoder has one problem : since the heuristic function overestimates the merit of extending a hypothesis  , the decoder always prefers hypotheses of along sentence  , which have a better chance to maximize the likelihood of the target words  . The decoder will extend the hypothesis with large If irst  , and their children will soon occupy the stack and push the hypotheses of a shorter source sentence out of the stack  . If the source sentence is a short one , the decoder will never be able to find it , for the hypotheses leading to it have been pruned permanently  . 
This " in comparable " problem was solved with multi-stack search  ( Magerman ,  1994) . A separate stack was used for each hypothesized source sentence length  1  . We do compare hypotheses in different stacks in the following cases  . First , we compare a complete sentence in a stack with the hypotheses in other stacks to safeguard the optimality of search result  ; Second , the top hypothesis in a stack is compared with that of another stack  . If the difference is greater than a constant ~ , then the less probable one will not be extended . This is called soft-pruning , since whenever the scores of the hypotheses in other stacks go down  , this hypothesis may revive . 

Z400O05l0152025
Sentence Length
Eng fish--3035405 OOO4OOO3OOO
Sentence Length
German - - 30 35 40
Figure 1: Sentence Length Distribution 3 Stack Search with a Simplified
Model
In the IBM translation model 2 , the alignment parameters depend on the source and target sentence length I and m  . While this is an accurate model , it causes the following difficulties : 1 . there are too many parameters and therefore too few training data per parameter  . This may not be a problem when massive training data are available  . However , in our application , this is a severe problem . Figure 1 plots the length distribution for the English and German sentences  . When sentences get longer , there are fewer training data available . 
2 . the search algorithm has to make multiple hypotheses of different source sentence lngth  . For each source sentence lngth , it searches through almost the same prefix words and finally settles on a sentence length  . This is a very time consuming process and makes the decoder very inefficient  . 
To solve the first problem , we adjusted the count for the parameter a(i\[j , l , m ) in the EM parameter estimation by adding to it the counts for the parameters a  ( i l j , l ' , m ') , assuming ( l , m ) and (1' , m ') are close enough . The closeness were measured in mm' .   .   .   .  ,  .   .   .   .   .   .   .   .   .   .   .   .   .   . 


. . .#  . . . . . . .  ~  .   .   . ~  .   . #  . . . . . . .  # . .~  .  :  .   .   .   .   .   .   .   .   .  ?  .   . ~  .   .   . ~  .   . ~  .   .   . ~  .   .   .   .   .   .   .   .   .   . ~  1'   1 Figure 2: Each x/y position represents a different source /target sentence length  . The dark dot at the intersection ( l , m ) corresponds to the set of counts for the alignment parameters a  (  . \[ o , l,m ) in the EM estimation . The adjusted counts are the sum of the counts in the neighboring sets residing inside the circle centered at  ( 1 , m ) with radius r . We took r = 3 in our experiment . 
Euclidean distance ( Figure 2) . So we have e(iIJ , t , m ) = e(il j , l ' , m '; e , g ) (9) ( I-l')~+(m-m')~<r ~; e , g where ~( iIJ , l , m ) is the adjusted count for the parameter a ( iIJ ,  1 , m ) , c(iIJ , l , m ; e , g ) is the expected count for a ( iIJ , l , m ) from a paired sentence ( eg ) , and c(ilj , l , m ; e , g ) = 0 when lell , or Igl?m , or i > l , or j > m . 
Although ( 9 ) can moderate the severity of the first data sparse problem  , it does not ease the second inefficiency problem at all  . We thus made a radical change to ( 9 ) by removing the precondition that ( l , m ) and ( l' , m ') must be close enough . This results in a simplified translation model , in which the alignment parameters are independent of the sentence length  1 and m:
P ( i l j , m , e ) = P ( i l j , l , m)--a(il J ) herei , j < Lm , and L , n is the maximum sentence length allowed in the translation system  . A slight change to the EM algorithm was made to estimate the parameters  . 
There is a problem with this model : given a sentence pair g and e  , when the length of e is smaller than Lm , then the alignment parameters do not sum to 1: lela ( i l j )  < 1 .   ( 10 )   i--0 We deal with this problem by padding e to length Lm with dummy words that never gives rise to any word in the target of the channel  . 
Since the parameters are independent of the source sentence length  , we do not have to make a never a hypothesis ends with the sentence nd symbol </ s > and its score is the highest  , the decoder reports it as the search result . In this case , a hypothesis can be expressed as H = el , e2 ,   .   .   .   , e k , and IHI is used to denote the length of the sentence prefix of the hypothesis H  , in this case , k . 
3.1 Heuristics
Since we do not make assumption of the source sentence length  , the heuristics described above can no longer be applied  . Instead , we used the following heuristic function : h ~ . /= ~ max0,1og(vIHI+I ) ( IHI+n )( j )) S . ( j)-n*PPt ~ ain + C(11)
L . -IHI h . = Pp ( IHl+nlm ) * h ( 12 ) n - - - - I here h ~ is the heuristics for the hypothesis that extend H with n more words to complete the source sentence  ( thus the final source sentence length is \[ H\[ + n  . ) Pp ( x\[y ) is the eoisson distribution of the source sentence length conditioned on the target sentence length  . It is used to calculate the mean of the heuristics over all possible source sentence length  , m is the target sentence length . The parameters of the Poisson distributions can be estimated from training data  . 
4 Implementation
Due to historical reasons , stack search got its current name . Unfortunately , the requirement for search states organization is far beyond what a stack and its push pop operations can handle  . What we really need is a dynamic set which supports the following operations :  1  . INSERT : to insert a new hypothesis into the set . 
2. DELETE : to delete a state in hard pruning.
3 . MAXIMUM : to find the state with the best score to extend  . 
4. MINIMUM : to find the state to be pruned.
We used the Red-Black tree data structure ( Cormen , Leisers on , and Rivest , 1990) to implement the dynamic set , which guarantees that the above operations take O ( log n ) time in the worst case , where n is the number of search states in the set . 
5 Performance
We tested the performance of the decoders with the scheduling corpus  ( Suhm et al ,  1995) . Around 30 , 000 parallel sentences (400 , 000 words altogether for both languages ) were used to train the IBM model 2 and the simplified model with the EM algorithm . A larger English monolingual corpus with around 0 . 5 million words was used to train a bigram for language modelling  . The lexicon contains 2 , 800 English and 4 , 8 00 German words in morphologically inflected form . We did not do any prepro-cessing/analysis of the data as reported in  ( Brown et al ,  1992) . 
5.1 Decoder Success Rate
Table 1 shows the success rate of three mod-els/decoders . As we mentioned before , the comparison between hypotheses of different sentence length made the single stack search for the IBM model  2 fail ( return without a result ) on a majority of the test sentences . While the multi-stack decoder improved this , the simplified model/decoder poduced an output for all the  120 test sentences . 
5.2 Translation Accuracy
Unlike the case in speech recognition , it is quite arguable what " accurate translations " means  . In speech recognition an output can be compared with the sample transcript of the test data  . In machine translation , a sentence may have several egitimate translations  . It is difficult to compare an output from a decoder with a designated translation  . Instead , we used human subjects to judge the machine-made translations  . The translations are classified into three categories  1  . 
1 . Correct translations : translations that are grammatical nd convey the same meaning as the inputs  . 
2 . Okay translations : translations that convey the same meaning but with small grammatical mistakes or translations that convey most but not the entire meaning of the input  . 
3 . Incorrect translations : Translations that are ungrammatical or convey little meaningful information or the information is different from the input  . 
Examples of correct , okay , and incorrect ransla-tions are shown in Table 2 . 
Table 3 shows the statistics of the translation results . The accuracy was calculate by crediting a correct translation  1 point and a nokay translation 1/2 point . 
There are two different kinds of errors in statistical machine translation  . A modeling erivroccurs when the model assigns a higher score to an incorrect translation than a correct one  . We cannot do anything about this with the decoder  . A decoding 1 This is roughly the same as the classification i IBM statistical translation  , except we do not have " legitimate translation that conveys different meaning from the input "- -we did not observed this case in our outputs  . 

Model 2, Single Stack
Model 2, Multi-Stack
Simplified Model
Total Test Sentences Decoded Sentenced Failed sentences  120   32   88   120   83   37   120   120   0 
Table 1: Decoder Success Rate




English ( target)
English ( output )


English ( output )

English ( target)



English ( output )

English ( target)
English ( output )

English ( target)
English ( output ) ich habee in Meeting yonhalbzehn bisumz wSlfI have a meeting from nine thirty to twelve I have a meeting from nine thirty to twelve versuchen wirsoll tenes vielleicht mit einem ander en Termin we might want to try for some other time we should try another time ich glaube nicht di is ichnochir gendetwasim Januar freihabe I do not think I have got anything open mJ an uary 
I think I will not free in Januaryich glaube wit solltenem weiteres Meeting verein barenI think we have to have another meeting 
I think we should fix a meeting schlagen Siedoch einen Termin vor why don't you suggest a time why you an appointment ich habe Zeitfiir den Rest desTages 
I am free the rest of it
I have time for the rest of July
Table 2: Examples of Correct , Okay , and Incorrect Translations : for each translation  , the first line is an input German sentence , the second line is the human made ( target ) translation for that input sentence , and the third line is the output from the decoder . 
error or search error happens when the search algorithm misses a correct translation with a higher score  . 
When evaluating a decoding algorithm , it would be attractive if we can tell how many errors are caused by the decoder  . Unfortunately , this is not attainable . Suppose that we are going to translate a German sentence g  , and we know from the sample that e is one of its possible English translations  . The decoder outputs an incorrect e ~ as the translation of g  . If the score of e ' is lower than that of e , we know that a search error has occurred . On the other hand , if the score of e ' is higher , we cannot decide if it is a modeling error or not  , since there may still be other legitimate translations with a score higher than e ~-- we just do not know what they are  . 
Although we cannot distinguish a modeling error from a search error  , the comparison between the decoder output'score and that of a sample translation can still reveal some information about the performance of the decoder  . If we know that the decoder can find a sentence with a better score than a " correct " translation  , we will be more confident that the decoder is less prone to cause errors  . Table 4 shows the comparison between the score of the outputs from the decoder and the score of the sample translations when the outputs are incorrect  . In most cases , the incorrect outputs have a higher score than the sample translations  . Again , we consider a " okay " translation a half error here  . 
This result hints that model deficiencies may be a major source of errors  . The models we used here are very simple . With a more sophisticated model , more training data , and possibly some preprocessing , the total error rate is expected to decrease . 
5.3 Decoding Speed
Another important issue is the efficiency of the decoder  . Figure 3 plots the average number of states being extended by the decoders  . It is grouped according to the input sentence length  , and evaluated on those sentences on which the decoder succeeded  . 
The average number of states being extended in the model  2 single stack search is not available for long sentences  , ince the decoder failed on most of the long sentences  . 
The figure shows that the simplified model/decoder works much more efficiently than the other mod- 
Model 2, Multi-Stack 83
Simplified Model 120
Correct Okay Incorrect Accuracy 3912 3254 . 2% 64 15 41 59 . 6%
Table 3: Translation Accuracy
Model 2, Multi-Stack
Simplified Model
Total Errors Score e > Score e , Score e < Seore e ,  38 3 . 5 (7 . 9%) 34 . 5 (92 . 1%) 48 . 5 4 . 5 (9 . 3%) 44 (90 . 7% ) Table 4: Sample Translations versus Machine-Made Translations ~ d = ~  2ooo Z 10oo  <  0 j . .Zh 14 " Model2-Single-S tack " ,   ,  "  Model2-Mult i-Stack "--~" Simplified-Moder ' ,   . . . . . . . . . 
ii 589 1213 161720
Target Sentence Length
Figure 3: Extended States versus Target Sentence
Lengthels/decoders.
6 Conclusions
We have reported a stack decoding algorithm for the IBM statistical translation model  2 and a simplified model . Because the simplified model has fewer uarameters and does not have to posit hypotheses with the same prefixes but different length  , it outperformed the IBM model 2 with regard to both accuracy and efficiency , especially in our application that lacks a massive amount of training data  . In most cases , the erroneous outputs from the decoder have a higher score than the human made translations  . Therefore it is less likely that the decoder is a major contributor of translation errors  . 
7 Acknowledgements
We would like to thank John Lafferty for enlightening discussions on this work  . We would also like to thank the anonymous ACL reviewers for valuable comments  . This research was partly supported by ATR and the Verbmobil Project  . The vmws and conclusions in this document are those of the authors  . 
References
Brown , P . F . , S . A . Dellaopietra , V . J Della Pietra , and R . L . Mercer .  1993 . The Mathematics of Sta-tistical Machine Translation : Parameter Estimation  . Computational Linguistics , 19(2):263-311 . 
Brown , P . F . , S . A . Della Pietra , V . J . Della Pietra , J . D . Lafferty , and R . L . Mercer .  1992 . Analysis , Statistical Transfer , and Synthesis in Machine Translation . In Proceedings of the fourth International Conference on Theoretical and Methodological Issues in Machine Translation  , pages 83-100 . 
Cormen , Thomas H . , Charles E . Leiserson , and Ronald L . Rivest .  1990 . Introduction to Algorithms . The MIT Press , Cambridge , Massachusetts . 
Magerman , D .  1994 . Natural Language Parsing as Statistical Pattern Recognition  . Ph . D . thesis,
Stanford University.
Nilsson , N .  1971 . Problem-Solving Methods in Artificial Intelligence  . McGraw Hill , New York , New

Suhm , B . , P . Geutner , T . Kemp , A . Lavie , L . Mayfield , A . McNair , I . Rogina , T . Schultz , T . Slo-boda , W . Ward , M . Woszczyna , and A . Waibel . 
1995 . JANUS : Towards multilingual spoken language translation  . In Proceedings of the ARPA Speech Spoken Language Technology Workshop  , 
Austin , TX , 1995.
Vogel , S . , H . Ney , and C . Tillman .  1996 . HMM-Based Word Alignment in Statistical Translation  . In Proceedings of the Seventeenth International Conference on Computational Linguistics :  COLING96  , pages 836-841 , Copenhagen , Denmark . 

