A COMPLETEANDRECURSIVE FEATURETHEORY *
Rolf Backofen and Gert Smolka
German Research Center for Artificial Intel ligence  ( DFKI ) 
W-6600 Saarbr/icken , Germany
backofen , smolka@dfki.uni-sb.de
Abstract
Various feature descriptions are being employed in constrained-based grammar formalisms  . The common notational primitive of these descriptions are functional attributes called features  . The descriptions considered in this paper are the possibly quantified first-order formulae obtained from a signature of features and sorts  . We establish a complete first-order theory FT by means of three axiom schemes and construct hree elementarily equivalent models  . 
One of the models consists of socalled feature graphs  , a data structure common in computational linguistics  . The other two models consist of socalled feature trees  , a record-like data structure generalizing the trees corresponding to first-order terms  . 
Our completeness proof exhibits a terminating simplification system deciding validity and satisfiability of possibly quantified feature descriptions  . 
1 Introduction
Feature descriptions provide for the typically partial description of abstract objects by means of functional attributes called features  . They originated in the lates eventies with socalled unification grammars  \[14\]  , a by now popular family of declarative grammar formalisms for the description and processing of natural language  . More recently , the use of feature descriptions in logic programming has been advocated and studied  \[2  ,  3 ,  4 ,  17 ,  16\] . Essentially , feature descriptions provide a logical version of records  , a data structure found in many programming languages  . 
Feature descriptions have been proposed in various forms with various formalizations  \[1  ,  13 ,  9 ,  15 ,  5 ,  10\] . We will follow the logical approach pioneered by \[15\]  , which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures  . In this approach , a semantics for * We appreciate discussions with Joachim Niehren and Ralf Treinen who read a draft version of this paper  . The research reported in this paper has been supported by the Bundesministerffi Forschung und Technologie under contracts ITW  90002   0   ( DISCO ) and ITW9105 ( Hydra )  . 
For space limitations proofs are omitted ; they can be found in the complete paper \[6\] . 
feature descriptions can be given by means of a feature theory  ( i . e . , a set of closed feature descriptions having at least one model  )  . There are two complementary ways of specifying a feature theory : either by explicitly constructing a standard model and taking all sentences valid in it  , or by stating axioms and proving their consistency  . Both possibilities are exemplified in \[15\]: the feature graph algebra ~" is given as a standard model  , and the class of feature algebras is obtained by means of an axiomatization  . 
Both approaches to fixing a feature theory have their advantages  . The construction of a standard model provides for a clear intuition and yields a complete feature theory  ( i . e . , if ? is a closed feature description , then either ? or -~? is valid ) . The presentation of a recursively enumerable axiomatization has the advantage that we inherit from predicate logic a sound and complete deduction system for valid feature descriptions  . 
The ideal case then is to specify a feature theory by both a standard model and a corresponding recursively enumerable axiomatization  . The existence of such a double characterization , however , is by no means obviou since it implies that the feature theory is decidable  . In fact , so far no decidable , consistent and complete feature theory has been known  . 
In this paper we will establish a complete and decidable feature theory FT by means of three axiom schemes  . We will also constructhree models of FT , two consisting of socalled feature trees , and one consisting of socalled feature graphs . Since FT is complete , all three models are elementarily equivalent ( i . e . , satisfy exactly the same first-order formulae ) . 
While the feature graph model captures intuitions common in linguistically motivated investigations  , the feature tree model provides the connection to the tree constraint systems  \[8  ,  11 , 12\] employed in logic programming . 
Our proof of FT's completeness will exhibit a simplification algorithm that computes for every feature description an equivalent solved form from which the solutions of the description can be read of easily  . For a closed feature description the solved form is either T  ( which means that the description is valid ) or_L ( which means that the description is invalid )  . For form is . L if and only if the description is unsatisfiable . 
1.1 Feature Descriptions
Feature descriptions are first-order formulae built over an alphabet of binary predicate symbols  , called features , and an alphabet of unary predicate symbols , called sorts . There are no function symbols . 
In admissible interpretations features must be functional relations  , and distinct sorts must be disjoint sets . This is stated by the first and second axiom scheme of FT '  . 
( Axl)VxVyVz(f(x , y ) AI(x , z ) - - ~ y-z )   ( for every feature jr )   ( A x2 ) W ( A ( = ) ^ B (  . )-~?) ( for every two distinct sorts A and B ) . 
A typical feature description written in matrix notation is 
X : woman father 3y husbandengineer\]:age:y:\[painterage:y \] It may be read as saying that x is a woman whose father is an engineer  , whose husband is a painter , and whose father and husband are both of the same age  . Written in plain first-order syntax we obtain the less suggestive formula  3y   , F , H(woman(X ) A father(x , F ) A engineer(V ) Aage(V , y ) A husband(x , H ) A painter(H ) Aage(H , y )) . 
The axiom schemes ( Axl ) and ( A x2 ) still admit trivial models where all features and sorts are empty  . The third and final axiom scheme of FT states that certain " consistent " descriptions have solutions  . Three Examples of instances of FT's third axiom scheme are  3x   , y , z(f(x , y ) AA(y)A g(x , z ) AB(z )) Vu , z3x , y(f(x , y ) Ag(y , u ) A h(y , z ) AY fT)V z3 x , y(f(x , y ) Ag(y , x ) A h(y , z ) Ayf T ) , where yfT abbreviates-~3z(f(y , z )) . Note that the third description f (= , y ) ^ g(y , =)^ h(y , z ) Af ~ T is " cyclic " with respec to the variables x and y  . 
1.2 Feature Trees
A feature tree ( examples are shown in Figure 1 ) is a tree whose edges are labeled with features , and whose nodes are labeled with sorts . As one would expect , the labeling with features must be deterministic , that is , the direct subtrees of a feature tree must be uniquely identified by the features of the xval ~ : valpoint xval ~ lor  2   3 red circle xval ~ yvaln " s ) 
Figure 1: Examples of Feature Trees.
edges leading to them . Feature trees can be seen as a mathematical model of records in programming languages  . Feature trees without subtrees model atomic values  ( e . g . , numbers ) . Feature trees may be finite or infinite , where in finite feature trees provide for the convenient representation of cyclic data structures  . 
The last example in Figure 1 gives a finite graph representation fan in finite feature tree  , which may arise as the representation f the recursive type equation nat =  0 + s ( nat )  . 
Feature descriptions are interpreted over feature trees as one would expect : ? Every sort symbol A is taken as a unary predicate  , where a sort constraint A ( x ) holds if and only if the root of the treex is labeled with A  . 
? Every feature symbol f is taken as a binary predicate  , where a feature constraint f(x , y ) holds if and only if the treex has the direct subtree y at feature f  . 
The theory of the corresponding first-order structure  ( i . e . , the set of all closed formulae valid in this structure  ) is called FT . We will show that FT is in fact exactly the theory specified by the three axiom schemes outlined above  , provided the alphabets of sorts and features are both taken to be infinite  . Hence F T is complete ( since it is the theory of the feature tree structure  ) and decidable ( since it is complete and specified by a recursive set of axioms  )  . 
Another , elementarily equivalent , model of FT is the substructure of the feature tree structure obtained by admitting only rational feature trees  ( i . e . , finitely branching trees having only finitely many subtrees  )  . Yet another model of FT can be obtained from socalled feature graphs  , which are finite , directed , possibly cyclic graphs labelled with sorts and feature similar to feature trees  . In contrast of eature trees , nodes of feature graphs may or may not be labelled with sorts  . Feature graphs correspond to the socalled feature structures commonly found in linguistically motivated investigations  \[14  ,  7\] . 
1.3 Organization of the Paper
Section 2 recalls the necessary notions and notations from Predicate Logic  . Section 3 defines the theory FT by means of three axiom schemes  . Section 4 establishes the overall structure of the completeness proof by means of a lemma  . Section 5 studies quantifier-free conjunctive formulae , gives a solved form , and introduces path constraints . Section 6 defines feature trees and graphs and establishes the respective models of FT  . Section 7 studies the properties of socalled prime formulae  , which are the basic building stones of the solved form for general feature constraints  . Section 8 presents the quantifier elimination lemmas and completes the completeness proof  . 
2 Preliminaries
Throughout this paper we assume a signature SOR ~ FEA consisting of an infinite set SOR of unary predicate symbols called sorts and an infinite set FEA of binary predicate symbols called features  . For the completeness of our axiomatization it is essential that there are both infinitely many sorts and infinitely many features  . The lttersA , B , Cwill always denote sorts , and the letters f , g , hwill always denote features . 
A path is a word ( i . e . , a finite , possibly empty sequence ) over the set of all features . The symbol c denotes the empty path , which satisfies cp = p = pc for every path p . A path p is called a prefix of a path q , if there exists a path p ' such that pp ' = q . 
We also assume an infinite alphabet of variables and adopt the convention that x  , y , z always denote variables , and X , Y always denote finite , possibly empty sets of variables . Under our signature SOR~FEA , every term is a variable , and an atomic formula is either a feature constra in txfy  ( f ( x , y ) in standard notation ) , a sort constraint Ax ( A ( x ) in standard notation )  , an equation x-y , _L (" false ") , or T (" true ") . Compound formulae are obtained as usual with the connectives A  , V ,  --+ ,  ~-+ , -~ and the quantifiers 3 and V . We use 3? \[ V?\] to denote the existential \[ universal \ ] closure of a formula ?  . Moreover ,  1 ) (? ) is taken to denote the set of all variables that occur free in a formula ?  . The letters ? and ? will always denote formulae . 
We assume that the conjunction of formulae is an associative and commutative operation that has T as neutral element  . This means that we identify eA ( ?A0 ) with OA ( ? A ? )   , and eAT with ?( but not , for example , x f y A x f y w i t h x f y ) . A conjunction of atomic formulae can thus be seen as the finite multiset of these formulae  , where conjunction is multise tunion , and T ( the " empty conjunction " ) is the empty multiset . We will write ? C ? ( or ? E ? , if ? is an atomic formula ) if there exists a formula ? ~ such that ? A ? 1= ? . 
Moreover , we identify 3x3 y ? with 3 y3x ? . If X = xl , .   .   . , xn , we write 3X ? for 3xl .   .   . 3 xn ? . If X = 0, then 3X ? stands for ? . 
Structures and satisfaction of formulae are defined as usual  . Avaluation into a structure `4 is a total function from the set of all variables into the universe  1`4\]   of`4  . Avaluation ~' into , 4 is called an x - update \[ X-update \] of a valuation a into  , 4 if ( ~' and a a ~ ree every where but possibly on x\[X \]  . We use ?~ to denote the set of all valuations c ~ such that  , 4 , c ~ ~? . 
We write ?~? ( " ? entails ? " ) if CAC ? A for all structures , 4 , and ?~?("? is equivalent to ?") if ? . 4= cA for all structures , 4 . 
A theory is a set of closed formulae . A model of a theory is a structure that satisfies every formulae of the theory  . A formula ? is a consequence of a theory T ( T ~? ) if V ? is valid in every model of T . A formula ? entails a formula ? in a theory T ( ? ~ T ? ) if ?'4 C_? . 4 for every model , 4 of T . 
Two formulae ? , ? are equivalent in a theory T ( ? ~ T ? ) if cA = ? . 4 for every model , 4 of T . 
A theory T is complete if for every closed formula either ? or -  , ? is a consequence of T . A theory is decidable if the set of its consequences is decidable  . 
Since the consequences of a recursively enumerable theory are recursively enumerable  ( completeness of first-order deduction )  , a complete theory is decidable if and only if it is recursively enumerable  . 
Two first-order structures , 4 , B are elementarily equivalent if , for every first-order formula ? , ? is valid in , 4 if and only if ? is valid in B . Note that all models of a complete theory are elementarily equivalent  . 
3 The Axioms
The first axiom scheme says that features are functional :  ( A x 1 ) V x VyVz ( xfyAz . fz ---* y--z ) ( for every feature f ) . 
The second scheme says that sorts are mutually disjoint :  ( A x2 ) Vx ( AxABx--*1 )   ( for every two distinct sorts A and B )  . 
The third and final axiom scheme will say that certain " consistent feature descriptions " are satisfiable  . 
For its formulation we need the important notion of a solved clause  . 
An exclusion constraint is an additional atomic formula of the form zfI  ( "fun defined on x " ) taken to be equivalent to-~3y ( xf  y )   ( for some variable y#z )  . 
A solved clause is a possibly empty conjunction ? of atomic formulae of the form xfy  , Ax and xf ~ such that the following conditions are satisfied :  1  . no atomic formula occurs twice in ?2 . if AxEe and BxE ?, then A = B3 . if xf yEe and xf zE ?, then y = z4 . if xf yE ?, then x fT q~? . 
Figure 2 gives a graph representation of the solved clause xfuAx gvAzh ~ A = ~ BgT Figure  2: A graph representation of a solved clause . 
Cu Auhx Augy Aufz A
Av^vgz ^ vhw^vfTA
BwAw IT AwgT.
As in the example , a solved clause can always be seen as the graph whose nodes are the variables appearing in the clause and whose arcs are given by the feature constraints xf y  . The constraints Ax , xfT appear as labels of the node x . 
A variable x is constrained in a solved clause ? if ? contains a constraint of the form Ax  , xf yor x f T . We use CV ( ? ) to denote the set of all variables that are constrained in ?  . The variables in V ( ? ) -CV ( ? ) are called the parameters of a solved clause ? . In the graph representation of a solved clause the parameters appear as leaves that are not not labeled with a sort or a feature exclusion  . The parameters of the solved clause in Figure 2 arey and z . 
We can now state the third axiom scheme . It says that the constrained variables of a solved clause have solutions for all values of the parameters :  ( A x 3 ) ~/ qx ? ( for every solved clause ? and X = cv ( ? ) ) . 
The theory FT is the set of all sentences that can be obtained as instances of the axiom schemes  ( Axl )  , ( Ax2) and ( Ax3) . The theory FTo is the set of all sentences that can be obtained as instances of the first two axiom schemes  . 
As the main result of this paper we will show that FT is a complete and decidable theory  . 
By using an adaption of the proof of Theorem 8 . 3 in\[15\] one can show that FTo is undecidable . 
4 Out l ine o f the Completeness P roo f The completeness of FT will be shown by exhibiting a simplification algorithm for FT  . The following lemma gives the overall structure of the algorithm  , which is the same as in Maher's \[12\] completeness proof for the theory of constructor trees  . 
Lemma 4 . 1 Suppose there exists a set of socalled prime formulae such that :  1  . every sort constraint Ax , every feature constraint x f y , and every equation x-y such that = ~ y is a prime formula  2  . T is a prime formula , and there is no other closed prime formula 3 . for every two prime formulae fl and fl'one can compute a formula  6 that is either prime or . 1_ and satisfies flAi ' MFT 6 and ) 2 ( 6 ) C_V ( flAff )  4 . for every prime formula fl and every variable x one can compute a prime formulai ' such that  3x iMFT fl ' and Y ( t ' ) C_Y ( 3 x f l )  5 . if i , ill , '''  , f in a reprime formulae , then ft^3 = ( t ^ i=1 i----16 . for every two prime formulae f l , fl I and every variable x one can compute a Boolean combination  6 of prime formulae such that 3~  ( f l ^- , ?) I~FT 6 and Vff ) CVO = ( fl^-~l')) . 
Then one can compute for every formula ? a Boolean combination ~ of prime formulae such that ? MET ~ and V  ( OC_V ( ? )  . 
Proof . Suppose a set of prime formulae as required exists  . Let ? be a formula . We show by induction on the structure of ? how to compute a Boolean combination df of prime formulae such that ? MET  6 and
V(OC_V(?).
If ? is an atomic formula Ax , xfy or x-y , then ? is either a prime formula , or ? is a trivial equation z-z , in which case it is equivalent o the prime formula T  . 
If ? is-~? , ?^?' or ? V ?' , then the claim follows immediately with the induction hypothesis  . 
It remains to show the claim for ? = 3= ? . By the induction hypothesis we know that we can compute a Boolean combination df of prime formulae such that  6 MFT ~ ) and V ( 6 ) C_V ( ? )  . Now ~ can be transformed to a disjunctive normal form where prime formulae play the role of atomic formulae  ; that is , 6 is equivalent o 6'1 V .   .   . V ? ,   , where every " clause " qi is a conjunction of prime and negated prime formulae  . Hence 3= ?143 = ( o-~v .   .   . v , . .) I=13=o -~ v .   .   . v3 = o- . , where all three formulae have exactly the same free variables  . It remains to show that one can compute for every clause ~ ra Boolean combination  6 of prime formulae such that =1=o -MET 6 and Y ( 6 ) C_V ( 3xa )  . 
We distinguish the following cases.
( i ) a = fl for some basic formula i . Then the claim follows by assumption (4) . Oi)o"i ^ " ~, = Ai = It in > 0 . Then the claim follows with assumptions ( 5 ) and ( 6 )  . 
nTnOil ) tr = Ai = I-~ii,n > 0 . Then a METAA/=I-~fli and the claim follows with case  ( it ) since T is a prime formula by assumption ( 2 )  . 
( iv ) ~= ill ^ .   .   . ^ tk^-, ill ^ .   .   . ht ', k > 1, n___0 . 
Then we know by assumption (3) that either fllA .   .   . Aflk MFT . Lorfll A .   .   . AflkMET fl for some prime formulaft . In the former case we choose 8=- , T , and in the latter case the claim follows with case  ( i ) or ( ii )  . \[\] the required properties exists , the preceding lemma yields the completeness of FT since every closed formula can be simplified to T or -~ T  ( since T is the only closed prime formula )  . 
In the following we will establish a set of prime formula as required  . 
5 Solved Formulae
In this section we introduce a solved form for conjunctions of atomic formulae  . 
A basic formula is either 3- or a possibly empty conjunction of atomic formulae of the form Ax  , xf  y , and x-y . Note that T is a basic formula since T is the empty conjunction  . 
Every basic formula ? ~ 3- has a unique decomposition ? = CNACG into a possibly empty conjunction CN of equations " x-- y " and a possibly empty conjunction CG of sort constraints " Ax " and feature constraints " xfy  "  . We call CN the normalizer and and ? G the graph of ?  . 
We say that a basic formula ? binds x to y if x- yE ? and x occurs only once in ?  . Here it is important onote that we consider equations as directed  , that is , assume that x-y is different from y ~ x if x ~ y  . We say that ? eliminates x if ? binds x to some variable y  . 
A solved formula is a basic formula 7  ~  3- such that the following conditions are satisfied :   1  . an equation x-y appears in 7 if and only if 7 eliminates x 2  . the graph of 7 is a solved clause . 
Note that a solved clause not containing exclusion constraints is a solved formula  , and that a solved formula not containing equations is a solved clause  . 
The letter 7 will always denote a solved formula.
We will see that every basic formula is equivalent in  FT0 to either 3- or a solved formula . 
Figure 3 shows the socalled basic simplification rules  . With ?\[ x ~-- y\]we denote the formula that is obtained from ? by replacing every occurrence of x with y  . We say that a formula ? simplifies to a formula ? by a simplification rule p if ~ is an instance of p  . We say that a basic formula ? simplifies to a basic formula ? if either ? = ? or ? simplifies to ? infinitely many steps each licensed by one of basic simplification rules in Figure  3  . 
Note that the basic simplification rules ( 1 ) and ( 2 ) correspond to the first and second axiom scheme , respectively . Thus they are equivalence transformation with respect oF To  . The remaining three simplification rules are equivalence transformations in general  . 
Proposition 5 . 1 The basic simplification rules are terminating and perform equivalence transformations with respect o  FT0  . Moreover , a basic formula ? ~ 3_ is solved if and only if no basic simplification rule applies to it  . 
Proposition 5 . 2 Let ? be a formula built from atomic formulae with conjunction  . Then one can 1 . xfyAxfzA ? xfzAy--zA ?
AxABxA ?2.3-A#B
AxAAxA ? 3 . AxA?x--yA ? 4 . zE13 (?) and x~y~-y ^ ?\[ ~ , -- y\]z--xA ? 5 . ? Figure 3: The basic simplification rules . 
compute a formula 6 that is either solved or 3_ such that ? ~ F To 6 and r ( 6 ) C_l ; (?) . 
In the quantifier elimination proofs to come it will be convenient to use so called path constraints  , which provide a flexible syntax for atomic formulae closed under conjunction and existential quantification  . We start by defining the denotation of a path . 
The interpretations fit , g ~ of two features f , g in a structure . 4 are binary relations on the universe 1"41 of . 4; hence their composition fAog . a is again a binary relation on 141 satisfying a ( fAogA ) b ? = : ? , 3 c~1"41: af AcA cf Ab for all a , bE1"41 . Consequently we define the deno-tation p~t of a path p = fl "'"  . In in a structure . 4 as the composition ( fl . . . fn)A:----f:o . . . of nA , where the empty path ~ is taken to denote the identity relation  . If . 4 is a model of the theory FTo , then every paths denotes a unary partial function on the universe of  . 4 . Given an element a E\[ . 41 , p~t is thus either undefined on a or leads from a to exactly one b ~  1  . 41 . 
Let p , q be paths , x , y be variables , and Abeasort . Then path constraints are defined as follows :   . 4, a ~ zpy : ?: ~ o ~( x ) pAa(y) . 4, a ~ xp . ~ yq:?:=~3aE1 . 41: ? t(x)paaAa(y)qAa . 4, a ~ Azp : ~= ~3 ael . 41 : a(z ) p ' 4a ^ ae A " ~ . 
Note that path constraints x py generalize feature constraints xf y  . 
A proper path constraint is a path constraint of the form " Axp " or " xp ~  . yq " . 
Every path constraint can be expressed with the already existing formulae  , as can be seen from the following equivalences : x~y ~ x-yxfpy ~  3z  ( xfzAzpy )   ( z~?x , y ) xplyqN3z(xpz^uqz)(z#~ , ~) mxp~3 y(xpyAmy)(yx) . 

The closure \[3`\] of a solved formula 3` is the closure of the atomic formulae occurring in  7 with respecto the following deduction rules : xy x p y y f z x p z y q z A y x p y x E x x e y z p f z x p I Y q AxpRecall that we assume that equations x-y are directed  , that is , are ordered pairs of variables . Hence , xey E\[71 and yex ~\[71 if x-yE7 . 
The closure of a solved clause 6 is defined analogously . 
Proposition 5 . 3 Let 7 be a solved formula . Then :
I . if ~ vE\[7\], then 7~ ~ r2 . xey E\[7\] iff x = y or x--yE 73 . xfyE \[7\] iff zfyE 3 ` or 3z : z "-- zE 7 and zfyE 7   4  . xpfye\[7\]iff3z:xpze\[7\] and zfye3`5 . if p7?e and xpy , xpzE\[3`\], then y = z5 . it is decidable whether a path constraint is in \[3'\]  . 
6 Feature Trees and Feature Graphs
In this section we establish three models of FT consisting of either feature trees or feature graphs  . Since we will show that FT is a complete theory , all three models are in fact elementarily equivalent  . 
A tree domain is a nonempty set D_CFEA * of paths that is prefix-closed  , that is , if pqED , then pED . Note that every tree domain contains the empty path  . 
A feature tree is a partial function a : FEA *-- +SOR whose domain is a tree domain  . The paths in the domain of a feature tree represent he nodes of the tree  ; the empty path represents its root . We use D~to denote the domain of a feature tree  ~  . A feature tree is called finite\[infinite I if its domain is finite\[infinite\]  . The letters a and 7 . will always denote feature trees . 
The subtree pa of a feature tree a at a path pE Da is the feature tree defined by  ( in relational notation ) pa := ( q , A ) l(p q , A ) Ea . 
A feature tree a is called a subtree of a feature tree  7- if ~ r is a subtree of 7- at some path pED r , and a direct subtree if p = f for some feature f  . 
A feature tree a is called rational if ( 1 ) cr has only finitely many subtrees and ( 2 ) a is finitely branching ( i . e . , for every p E D ~ , the set pfED ~\[ fEFEA is finite ) . Note that for every rational feature tree at here exist finitely many features fl  ,   .   .   . , In such that DoC_fl , .   . -, fn * . 
The feature tree structure ' T is the SOR~FEA -structure defined as follows : * the universe of  7- is the set of all feature trees ? ( rEA7-iff a ( c ) = A ( i . e . , a's root is labeled with A ) ? (~ , 7-) EfT " ifffEDa and 7-=fa(i . e . , r is the subtree of a at f ) . 
The rational feature tree structure 7~ is the substructure of T consisting only of the rational feature trees  . 
Theorem 6 . 1 The feature tree structures T and 7~ are models of the theory FT . 
A feature pregraph is a pair ( x ,  7 ) consisting of a variable x ( called the root ) and a solved clause 7 not containing exclusion constraint such that , for every variable y occurring in 7 , there exists a path p satisfying x pyE \[7\]- If one deletes the exclusion constraints in Figure  2  , one obtains the graphical representation of a feature pregraph whose root is x  . 
A feature pregraph(x ,  7 ) is called a subpregraph of a feature pregraph ( y , ~) if 7_C6 and x--yor xE\]2(~) . Note that a feature pregraph has only finitely many subpregraphs  . 
We say that two feature pregraphs are equivalent if they are equal up to consistent variable renaming  . 
For instance , ( x , xfyAygx ) and ( u , ufxAxgu ) are equivalent feature pregraphs . 
A feature graph is an element of the quotient of the set of all feature pregraphs with respect to equivalence as defined above  . We use ( x ,  7 ) to denote the feature graph obtained as the equivalence class of the feature pregraph  ( x ,  7) . 
In contrast to feature trees , not every node of a feature graph must carry a sort  . 
The feature graph structure ~ is the SOR
FEA-structure defined as follows : ? the universe of ~ is the set of all feature graphs ?  ( x , 7) EA~iffAxE7?((x ,  7) , a ) E f6 iff there exists a maximal feature subpregraph ( y , ~) of ( x , 7) such that xfyE7 and ~ r--(y ,  6) . 
Theorem 6 . 2 The feature graph structure ~ is a model of the theory FT  . 
Let ~" be the structure whose domain consists of all feature pregraphs and that is otherwise defined analogous to G  . Note that G is in fact the quotient of jc with respecto equivalence of feature pregraphs  . 
Proposition 6 . 3 The feature pregraph structure yr is a model of F To but not of FT  . 
7 Prime Formulae
We now define a class of prime formulae having the properties required by Lemma  4  . 1 . The prime formulae will turn out to be solved forms for formulae built from atomic formulae with conjunction and existential quantification  . 
A prime formula is a formula 3X7 such that 1 . 7 is a solved formula 2 . X has no variable in common with the normalizer of  3'   3  . every xEX can be reached from a free variable , that is , there exists a path constrainty pxE \[7\] such that y~tX . 

The letter/3 will always denote a prime formula.
Note that T is the only closed prime formula , and that 3X   7 is a prime formula if 3x3X   7 is a prime formula . Moreover , every solved formula is a prime formula , and every quantifier-free prime formula is a solved formula  . 
The definition of prime formulae certainly fulfills the requirements  ( 1 ) and ( 2 ) of Lemma 4 . 1 . The fulfillment of the requirements ( 3 ) and ( 4 ) will be shown in this section , and the fulfillment of the requirements ( 5 ) and ( 6 ) will be shown in the next section . 
Proposition 7 . 1 Let 3X7 be a prime formula, . A be a model of FT , and , 4, a ~3X7 . Then there exists one and only one X-update ( ~' of ~ such that
A , a ' ~7.
The next proposition establishes that prime formulae are closed under existential quantification  ( property ( 4 ) of Lemma 4 . 1) . 
Proposition 7 . 2 For every prime formula /3 and every variable x one can compute a prime formula  /3' such thai 3x/3 ~: ~ FT /3' and Y ( /3' ) CY ( 3x/3 )  . 
Proposition 7 . 3If/3 is a prime formula , then
FT pi/3.
The next proposition establishes that prime formulae are closed under consistent conjunction  ( property ( 3 ) of Lemma 4 . 1) . 
Proposition 7 . 4 For every two prime formulae /3   and/3' one can compute a formula 8 that is either prime or_L and satisfies /3   A/3' ~FT 8 and 1  ) (6 ) C1 ) (/3 A/3' )  . 
Proposition 7 . 5 Let ? be a formula that is built from atomic formulae with conjunction and existential quantification  . Then one can compute a formula 6 that is either prime or I such that ? ~ F T 8 and
Vff )_CV(?).
The closure of a prime formula 3X7 is defined as follows : \ [3xv \] := ~ e \[7\] Iv ( ~ ) n x = ~ or ~= x c ~ or ~= = ? 1=~ - The proper closure of a prime formula/3 is defined as follows: \[/3\]* := Tr ? \[/3\] Ir is a proper path constraint . 
Proposition 7 . 6If/3 is a prime formula and r ?\[/3\] , then /3 p ~( and hence -- , ,~ p -- , /3) . 
We now know that the closure \[ ill , taken as an infinite conjunction , is entailed by /3 . We are going to show that , conversely , / 3 is entailed by certain finite subsets of its closure  \[/3\]  . 
An access function for a prime formula/3  =  3X   7 is a function that maps every x ? 1  ) (7  ) -X to the rooted path x ? , and every xEX to a rooted path x ' p such that x ' px ?  \[7\] and x ' ~ X . Note that every prime formula has at least one access function  , and that the access function of a prime formula is injective on  1  ) (3' )   ( follows from Proposition 5 . 3 (5)) . 
The projection of a prime formula/3  =  3X7 with respecto an access function @ for/3 is the conjunction of the following proper path constraints : Ax'pIAxE  7  , x ' p=@xU='pf~y'q\[xfyE7 , x ' p =@ x , y ' q=@y . 
Obviously , one can compute for every prime formula an access function and hence a projection  . Furthermore , if ) ~ is a projection of a prime formula / 3 , then ) ~ taken as a set is a finite subset of the closure  \[/3\]  . 
Proposition 7 . 7 Let ) ~ be a projection of a prime formula/3 . Then ) tC\[/3\]* and ) t ~ = ~ F T /3" As a consequence of this proposition one can compute for every prime formula an equivalent quantifier-free conjunction of proper path constraints  . 
We close this section with a few propositions stating interesting properties of closures of prime formulae  . These propositions will not be used in the proofs to come  . 
Proposition 7 . 8Iffl is a prime formula , then/3~FT\[/3\]* . 
Proposition 7 . 9If/3 is a prime formula , and r is a proper path constraint , then ~ e\[Z\]*?=~/3Prr~-Proposition 7 . 10 Let /3,/3' be prime formulae . 
Then/3~FT fl'?=~~\]*_D\[/3'\]*.
Proposition 7 . 11 Let /3 , /3' be prime formulae , and let ) d be a projection of /3' . Then \] 3~FT/3t\[#\]*_~k' . 
Proposition 7 . 1 1 gives us a decision procedure for "/3 ~FT /3" since membership in \[/3\]* is decidable , k ' is finite , and , V can be computed from/3' . 
8 Quantifier Elimination
In this section we show that our prime formulae satisfy the requirements  ( 5 ) and ( 6 ) of Lemma 4 . 1 and thus obtain the completeness of FT . We start with the definition of the central notion of a joker  . 
A rooted path xp consists of a variable x and a path p  . A rooted path xp is called unfree in a prime formula  13 if 3 prefix p ' of p 3 yq : x 5? y and xp'IYqE \[/3\]  . 
A rooted path is called free in a prime formula/3 if it is not unfree in/3  . 
Proposition 8 . 1 Let /3 = 3X 7 be a prime formula . 
Then : 1 . if xp is free in /3 , then x does not occur in the normalizer of 72 . if x~1) (/3) , then xp is free in /3 for every path p . 

A proper path constraint 7r is called an z-joker for a prime formula/3 if r ~ \[/3\] and one of the following conditions is satisfied :   1  . 7 r = Axp and xp is free infl 2 . 7 r = xp ~ yq and xp is free in / 33 . 7r = yp ~ xq and xq is free in /3 . 
Proposition 8 . 2 It is decidable whether a rooted path is free in a prime formula  , and whether a path constraint is an x-joker for a prime formula  . 
Lemma 8 . 3 Let /3 be a prime formula , x be a variable ,   7r be a proper path constraint that is not an x -joker for  /3  , A be a model of FT ,   . A , c ~ ~ f l , . 4, ~'~/3, and t~'beanz-update of c ~ . Then
A , c ~ ~7 r if and only if . A , a ' ~7 r.
Lemma 8 . 4 Let /3 be a prime formula and 7q, .   .   . , rnbex-jokers for / 3 . Then 3x/3 ~ FT3Z ( /3AZ"nffi ) "  i=1 The proof of this lemma uses the third axiom scheme  , the existence of infinitely many features , and the existence of infinitely many sorts . 
Lemma 8 . 5 Let /3 ,   /3' be prime formulae and a be a valuation into a model A of FT such that  , 4 , ~ p3x (/3A/3') and . 4, ~ p3x (/3A-,/3') . 
Then every projection of/3' contains an z-joker for /3  . 
Lemma 8 . 6If/3,/31, . . . ,/3n are prime formulae , then :: lz(flAZ"~/3`)~::~FTZ3z(flA"- , fl , ) . 
i = 1i = l
Lemma 8 . 7 For every two prime formulae/3 ,   /3' and every variable x one can compute a Boolean combination  6 of prime formulae such that 3x  ( /jA- , /3') ~ FT6 and 12(6)C12(qx(flA~/3')) . 
Theorem 8 . 8 For every formula ~ b one can compute a Boolean combination  6 of prime formulae such that
MFT 6 and V (6) C_V (/3)
Corollary 8 . 9FT is a complete and decidable theory . 
References\[1\]H . A\[t-Kaci . An algebraic semantics approach to the effective resolution of type equations  . Theoretical
Computer Science , 45:293-351, 1986.
\[2\]H . Ait-Kaci and R . Nasr . LOGIN : A logic programming language with built in inheritance  . The Journal of Logic Programming ,  3:185-215 ,  1986 . 
\[3\]H . A~t-Kaci and A . Podelski . Towards a meaning of LIFE . In Proc . of the PLILP'91, Springer LNCS vol . 528, pages 255-274 . Springer-Verlag , 1991 . 
\[4\] H . Ait-Kaci , A . Podelski , and G . Smolka . A feature-based constraint system for logic programming with entailment  . In Fifth Generation Computer Systems 1992 , pages 1012-1021 , Tokyo , Japan , June 1992 . 
Institute for New Generation Computer Technology.
\[5\]F . Bander , H . -J . Bfirckert , B . Nebel , W . Nutt , and G . Smolka . On the expressivity of feature logics with negation  , functional uncertainty , and sort equations . 
Research Report RR-91-01 , German Research Center for Artificial Intelligence  ( DFKI )  , January 1991 . 
\[6\]R . Backofen and G . Smolka . A complete and recursive feature theory . Research Report RR-92-30 , German Research Center for Artificial Intelligence  ( DFKI )  , July 1992 . 
\[7\] B . Carpenter . The Logic of Typed Feature Structures , volume 32 of Cambridge Tracts in Theoretical Computer Science  . Cambridge University Press,
Cambridge , UK , 1992.
\[8\]A . Colmerauer . Equations and in equations on finite and infinite trees  . In Proceedings of the 2nd International Conference on Fifth Generation Computer 
Systems , pages 85-99, 1984.
\[9\] M . Johnson . Attribute Value Logic and the Theory of Grammar . CSLI Lecture Notes 16 . Center for the Study of Language and Information , Stanford
University , CA , 1988.
\[10\]M . Johnson . Logic and feature structures . In Proceedings of lJCAI-91 , Sydney , Australia ,  1991 . 
\[11\]J . -L . Lassez , M . Maher , and K . Marriot . Unification revisited . In J . Minker , editor , Foundations of De-ductive Databases and Logic Programming  . Morgan
Kaufmann , Los Altos , CA , 1988.
\[12\]M . J . Maher . Complete axiomatizations of the algebras of finite  , rational and in finite trees . In Proceedings o ? the 3rd Annual Symposium on Logic in Computer Science , pages 348-457 , Edinburgh , Scotland , July 1988 . 
\[13\]W . C . Rounds and R . T . Kasper . A complete logical culus for record structures representing linguistic information  . In Proceedings of the 1st IEEE Symposium on Logic in Computer Science , pages 38-43 , 
Boston , MA , 1986.
\[14\]S . M . Shieber . An Introduction to Unification-Based Approaches to Grammar  , volume 4 of CSLI Lecture Notes . Center for the Study of Language and Information , Stanford University , CA ,  1986 . 
\[15\]G . Smolka . Feature constraint logics for unification grammars  . Journal of Logic Programming , 12:51-87, 1992 . 
\[16\]G . Smolka , M . Henz , and J . W firtz . Object-oriented concurrent constraint programming inoz  . Research Report RR-93-16 , German Research Center for Artificial Intelligence  ( DFKI )  , Apr .  1993 . 
\[17\]G . Smolka and R . Treinen . Records for logic programming . In Proceedings of the 1992 Joint International Conference and Symposium on Logic Programming  , pages 240-254 , Washington , DC ,  1992 . 

