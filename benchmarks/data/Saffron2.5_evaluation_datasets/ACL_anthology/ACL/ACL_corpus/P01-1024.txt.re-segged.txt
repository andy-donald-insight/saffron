Topological Dependency Trees :
A Constraint-Based Account of Linear Precedence
Denys Duchier
Programming Systems Lab
Universita?t des Saarlandes , Geb . 45
Postfach 15 11 50
66041 Saarbru?cken , Germany

Ralph Debusmann
Computational Linguistics
Universita?t des Saarlandes , Geb . 17
Postfach 15 11 50
66041 Saarbru?cken , Germany


We describe a new framework for dependency grammar  , with a modular decomposition of immediate dependency and linear precedence  . Our approach distinguishes two orthogonal yet mutually constraining structures : a syntactic dependency tree and a topological dependency tree  . The syntax tree is nonprojective and even non -ordered  , while the topological tree is projective and partially ordered  . 
1 Introduction
Linear precedence in socalled free word order languages remains challenging for modern grammar formalisms  . To address this issue , we propose a new framework for dependency grammar which supports the modular decomposition of immediate dependency and linear precedence  . 
Duchier ( 1999 ) formulated a constraint-based axiomatization of dependency parsing which characterized wellformed syntax trees but ignored issues of word order  . In this article , we develop a complementary approach dedicated to the treatment of linear precedence  . 
Our framework distinguishes two orthogonal , yet mutually constraining structures : a syntactic dependency tree  ( ID tree ) and a topological dependency tree ( LP tree )  . While edges of the ID tree are labeled by syntactic roles  , those of the LP tree are labeled by topological fields  ( Bech ,  1955) . The shape of the LP tree is a flattening of the ID tree?s obtained by allowing nodes to ? climb up ? to land in an appropriate field at a host node where that field is available  . Our theory of ID/LP trees is formulated in terms of  ( a ) lexicalized constraints and ( b ) principles governing e . g . climbing conditions . 
In Section 2 we discuss the difficulties presented by discontinuous constructions in free word order languages  , and briefly touch on the limitations of Reape?s ( 1994 ) popular theory of ? word order domains ? . In Section 3 we introduce the concept of topological dependency tree  . In Section 4 we outline the formal framework for our theory of ID/LP trees  . Finally , in Section 5 we illustrate our approach with an account of the word-order phenomena in the verbal complex of 
German verb final sentences.
2 Discontinuous Constructions
In free word order languages , discontinuous constructions occur frequently . German , for example , is subject to scrambling and partial extraposition  . 
In typical phrase structure based analyses , such phenomena lead to e . g . discontinuous VPs : (1) ( dass ) ( that ) einen a
Mannman acc

Marianomzutolie benlove versucht tries whose natural syntax tree exhibits crossing edges : 

NP V

NP V
DET N ( dass ) einen Mann Maria zulie benver sucht Since this is classically disallowed  , discontinuous constituents must often be handled indirectly through grammar extensions such as traces  . 
Reape ( 1994 ) proposed the theory of word order domains which became quite popular in the HPSG community and inspired others such as Mu?ller  ( 1999 ) and Kathol ( 2000 )  . Reape distinguished two orthogonal tree structures :  ( a ) the unordered syntax tree ,   ( b ) the totally ordered tree of word order domains . The latter is obtained from the syntax tree by flattening using the operation of domain union to produce arbitrary interleav-ings  . The boolean feature [??] of each node controls whether it must be flattened out or not  . In-finitives in canonical position are assigned [ ?+]:   ( dass ) 





DE Teinen


Vzulieben
V versucht
Thus , the above licenses the following tree of word order domains :  ( dass ) 


DE Teinen




Vzulieben
V versucht
Extraposed infinitives are assigned [??]: ( dass)



V versucht


DE Teinen


Vzulieben
As a consequence , Reape?s theory correctly predicts scrambling (2 , 3) and full extraposition (4) , but cannot handle the partial extraposition in ( 5 ) :  ( 2 )   ( dass ) Maria einen Mannzulieben versucht ( 3 )   ( dass ) einen Mann Maria zulie benver such t ( 4 )   ( dass ) Maria versucht , einen Mannzulieben ( 5 )   ( dass ) Maria einen Mann versucht , zulieben 3 Topological Dependency Trees Our approach is based on dependency grammar  . 
We also propose to distinguish two structures : ( a ) a tree of syntactic dependencies , ( b ) a tree of topological dependencies . The syntax tree ( ID tree ) is unordered and nonprojective ( i . e . it admits crossing edges ) . For display purposes , we pick an arbitrary linear arrangement : ( dass ) Maria einen Mann zulie benver such t det object z uv inf subject The topological tree  ( LP tree ) is partially ordered and projective : ( dass ) Maria einen Mann zulie benver such tndnvvdf m fm fvc Its edge labels are called  ( external ) fields and are totally ordered : df?mf?vc . This induces a linear precedence among the daughters of a node in the LP tree  . This precedence is partial because daughters with the same label may be freely permuted  . 
In order to obtain a linearization of a LP tree , it is also necessary to position each node with respect to its daughters  . For this reason , each node is also assigned an internal field(d , n , or v ) shown above on the vertical pseudo-edges . The set of internal and external fields is totally ordered : d?df?n?m f?vc?vLike Reape  , our LP tree is a flattened version of the ID tree  ( Reape , 1994; Uszkoreit ,  1987) , but the flattening doesn?t happen by ? unioning up ?  ; rather , we allow each individual daughter to climb up to find an appropriate landing place  . This idea is reminiscent of GB , but , as we shall see , proceeds rather differently . 
4 Formal Framework
The framework underlying both ID and LP trees is the configuration of labeled trees under valency  ( and other ) constraints . Consider a finite set L of edge labels , a finite set V of nodes , and E?V?V ? La finite set of directed labeled edges  , such that ( V , E ) forms a tree . We write w ? ? ? ` w ? for an edge labeled ` from w to w ?  . We define the `- daughters ` ( w ) of w ? V as follows : ` ( w ) = w??V w???`w ? ? E We write L ? for the set of valency specifications ?` defined by the following abstract syntax:?`::=``?`?  ( `? L ) A valency is a subset of L ? . The tree ( V , E ) satisfies the valency assignment valency : V ? 2L ? if for all w ? V and all ` ? L : ` ? valency ( w )  ? ` ( w ) = 1`? ? valency ( w )  ? ` ( w ) ?1`? ? valency ( w )  ? ` ( w ) ? 0 otherwise ?` ( w )  = 0 4 . 1ID Trees An ID tree ( V , EID , lex , cat , valency ID ) consists of a tree ( V , EID ) with EID?V?V?R , where the set R of edge labels ( Figure 1 ) represents syntactic roles such as subject or v inf  ( bare infinitive argument )  . lex : V ? Lexicon assigns a lexical entry to each node  . An illustrative Lexicon is displayed in Figure 1 where the 2 features cats and valency ID of concern to ID trees are grouped undertable heading ? Syntax ?  . Finally , cat and valency ID assign a category and an R ? valency to each node w ? V and must satisfy : cat  ( w ) ? lex ( w )  . catsvalency ID(w ) = lex(w ) . valency ID(V , EID ) must satisfy the valency ID assignment as described earlier  . For example the lexical entry for versucht specifies  ( Figure 1 ) : valency ID ( versucht ) = subject , zuvin fFurthermore , ( V , EID ) must also satisfy the edge constraints stipulated by the grammar  ( see Figure 1 )  . For example , for an edge w ????? detw ? to be licensed , w ? must be assigned category det and both w and w ? must be assigned the same agreement  . 1 4 . 2 LP Trees An LP tree ( V , ELP , lex , valency LP , field ext , field in t ) consists of a tree ( V , ELP ) with ELP ? V ? V ? Fext , where the set Fext of edge labels represents topological fields  ( Bech , 1955): df the determiner field , mf the ? Mittelfeld ? , vc 1Issues of agreement will not be further considered in this paper  . 
the verbal complement field , xf the extraposition field . Features of lexical entries relevant to LP trees are grouped undertable heading ? Topology ? in Figure  1  . valency LP assigns a F ? extvalency to each node and is subject to the lexicalized constraint : valency LP  ( w ) = lex ( w )  . valency LP(V , ELP ) must satisfy the valency LP assignment as described earlier  . For example , the lexical entry for zu lieben2 specifies : valency LP ( zulieben2 ) = mf ? , xf ? which permits 0 or more mf edges and at most one xf edge ; we say that it offers fields mf and xf . 
Unlike the ID tree , the LP tree must be projective . 
The grammar stipulates a total order on Fext , thus inducing a partial linear precedence on each node?s daughters  . This order is partial because all daughters in the same field may be freely permuted : our account of scrambling rests on free permutations within them f field  . In order to obtain a linearization of the LP tree  , it is necessary to specify the position of a node with respect to its daughters  . For this reason each node is assigned an internal field in Fint  . The set Fext ? Fint is totally ordered : d?df ? n ? m f ? v c ? v ? x f In what  ( external ) field a node may land and what internal field it may be assigned is determined by assignments fieldext : V ? Fext and field in t:V ? Fint which are subject to the lexicalized constraints : field ext  ( w ) ? lex ( w )  . fieldext field in t(w)?lex(w ) . field int For example , zulieben1 may only l and in field vc ( canonical position )  , and zulie ben2 only in xf ( extraposed position ) . The LP tree must satisfy : w ? ? ? ` w ? ? ELP ? ` = field ext  ( w ? ) Thus , whether an edge w ? ? ? ` w ? is licensed depends both on valency LP  ( w ) and on field ext ( w? )  . 
In other words : w must offer field ` and w ? must accept it  . 
For an edge w ? ? ? ` w ? in the ID tree , we say that w is the head of w ? . For a similar edge in the LP
Grammar Symbols
C = det , n , vf in , v inf , v past , zuv inf ( Categories ) R = det , subject , object , v inf , v past , zuvinf ( Syntactic Roles ) Fext = df , mf , vc , xf ( External Topological Fields ) Fint = d , n , v ( Internal Topological Fields ) d?df?n?m f?vc?v?xf ( Topological Ordering ) 
Edge Constraints w ?????????? detw ? ? cat ( w ? ) = det?agr ( w ) = agr ( w ? ) w ? ? ? ? ? ? ? ? ? subject w ? ? cat ( w ? ) = n ? agr ( w ) = agr ( w ? ) ? NOMw ????????? object w ? ? cat ( w ? ) = n ? agr ( w ? ) ? ACCw ????????? vinfw ? ? cat ( w ? ) = v infw ? ? ? ? ? ? ? ? ? v past w ? ? cat ( w ? ) =vpast w ????????? zuvinfw ? ? cat ( w ? ) = zuvinf

Word Syntax Topology cats valency ID field in t fieldext valency LP ein end et ddf 
Mannndetnmfdf ?
Marian nmfliebenvinf object ? v vc geliebtv past object ? vvc  ko?nnen1 v in fv in f v v c v c ? ko?nnen2 v inf , v past v in fvxfmf ? , vc ? , xf ? wird vf in subject , vin fvvcmf ? , vc ? , xf ? haben vin fvp as tvxfmf ? , vc ? , xf ? hatvinf subject , v p as t v c m f ? , vc ? , xf ? zu lieben1 zuv inf object ? vvczu lieben2 zuvinf object ? vxfmf ? , xf ? versucht vf in subject , zuvin fvvcmf ? , vc ? , xf ?
Figure 1: Grammar Fragment tree , we say that w is the host of w ? or that w ? l and so nw  . The shape of the LP tree is a flattened version of the ID tree which is obtained by allowing nodes to climb up subject to the following principles : Principle  1 a node must land on a transitive head2 Principle 2 it may not climb through a barrier We will not elaborate the notion of barrier which is beyond the scope of this article  , but , for example , a noun will prevent a determiner from climbing through it  , and finite verbs are typically general barriers . 
2This is Bro?cker?s terminology and means a node in the transitive closure of the head relation  . 
Principle 3 a node must land on , or climb higher than , its head Subject to these principles , a node w ? may climb up to any host w which offers a field licensed by field ext  ( w? )  . 
Definition . An ID/LP analysis is a tuple ( V , EID , ELP , lex , cat , valency ID , valency LP , field ext , field in t ) such that ( V , EID , lex , cat , valency ID ) is an ID tree and ( V , ELP , lex , valency LP , field ext , field in t ) is an LP tree and all principles are satisfied . 
Our approach has points of similarity with ( Bro?ker ,  1999 ) buteschews modal logic in favor of a simpler and arguably more perspicuous constraint-based formulation  . It is also related to the lifting rules of ( Kahane et al ,  1998) , but where they choose to stipulate rules that licenseliftings  , we opt instead for placing constraints on otherwise unrestricted climbing  . 
5 German Verbal Phenomena
We now illustrate our theory by applying it to the treatment of word order phenomena in the verbal complex of German verb final sentences  . We assume the grammar and lexicon shown in Figure  1  . 
These are intended purely for didactic purposes and we extend for them no claim of linguistic adequacy  . 
5.1 VP Extraposition
Control verbs like versuchen or versprechen allow their zu-inf initival complement to be optionally extraposed  . This phenomenon is also known as optional coherence  . 
(6 )   ( dass ) Maria einen Mannzulieben versucht ( 7 )   ( dass ) Maria versucht , einen Mannzulieben Both examples share the following ID tree:  ( dass ) Maria einen Mann zulie benver such t det object z uvinf subject Optional extraposition is handled by having two lexical entries for zulie ben  . One requires it to land in canonical position : field ext  ( zulieben1 ) = v c the other requires it to be extraposed : field ext  ( zulieben2 ) = xf In the canonical case , zu lieben1 does not offer fieldmf and einen M an n must climb to the finite verb :  ( dass ) Maria einen Mann zulie benver such tndnvvdf mfmfvc In the extraposed case  , zulieben 2 itself offers field mf : ( dass ) Maria versucht einen Mann zulie benn vdnvmf dfmfxf  5  . 2 Partial VP Extraposition In example (8) , the zu-infinitive zulie ben is extraposed to the right of its governing verb versucht  , but its nominal complement einen Mann remains in the Mittelfeld :  ( 8 )   ( dass ) Maria einen Mann versucht , zuliebenInour account , Mann is restricted to l and in an mf field which both extraposed zu  lieben2 and finite verb versuch to ffer . In example ( 8 ) the nominal complement simply climbed up to the finite verb :  ( dass ) Maria einen Mann versuch tzuliebennd nvvmf dfmfxf  5  . 3 Obligatory Head-final Placement Verb clusters are typically head-final in German : nonfinite verbs precede their verbal heads  . 
(9) ( dass ) ( that )

Marianomeinena
Mannman acclieben love wird will ( 10 ) * ( dass ) Maria einen Mannwird lieben
The ID tree for ( 9 ) is: ( dass ) Maria einen Mannlieben wird subject det object v in f The lexical entry for the bare infinitive lieben requires it to l and in a vcfield : field ext  ( lieben ) = v c therefore only the following LP tree is licensed:3   ( dass ) Maria einen Mannlieben wirdnd nvvmfdfmf vc where mf ? v c ? v  , and subject and object , both in field mf , remain mutually unordered . 
Thus we correctly license (9) and reject (10).
5.4 Optional Auxiliary Flip
In an auxiliary flip construction ( Hinrichs and Nakazawa ,  1994) , the verbal complement of an auxiliary verb , such as haben or werden , follows rather than precedes its head . Only a certain class of bare infinitive verbs can l and in extraposed position  . As we illustrated above , main verbs do not belong to this class ; however , modals such as ko?nnendo , and mayland in either canonical ( 11 ) or in extraposed ( 12 ) position . This behavior is called ? optional auxiliary flip ?  . 
(11) ( dass ) ( that )

Maria einena
Mannman lieben love ko?nnen can wird will ( that ) Maria will be able to love a man ( 12 )   ( dass ) Maria einen Mannwird liebenko?nnen Both examples share the following ID tree :  ( dass ) Maria einen Mannwird liebenko?nnen subject det object v in fv in f Our grammar fragment describes optional auxiliary flip constructions in two steps : ? wird offers both vc and xf fields : valency ID  ( wird ) = mf ? , vc ? , xf ? ? ko?nnen has two lexical entries , one canonical and one extraposed : fieldext ( ko?nnen1 ) = vcfieldext ( ko?nnen2 ) = xf 3It is important to notice that there is no spurious ambiguity concerning the topological placement of Mann : lieben in canonical position does not offer field mf  ; therefore M an n must climb to the finite verb . 
Thus we correctly account for examples ( 11 ) and ( 12 ) with the following LP trees : ( dass ) Maria einen Mannliebenko?nnen wirdndn vvv m f d f m f v c v c  ( dass ) Maria einen Mannwird liebenko?nnenn dnvvv m f d f m f v c x f The astute reader will have noticed that other LP trees are licensed for the earlier ID tree : they are considered in the section below  . 
5.5 V-Projection Raising
This phenomenon related to auxiliary flip describes the case where nonverbal material is interspersed in the verb cluster :  ( 13 )   ( dass ) Mariawird einen Mannliebenko?nnen ( 14 ) * ( dass ) Marialiebeneinen Mannko?nnenwird ( 15 ) * ( dass ) Marialiebenko?nneneinen Mannwird The ID tree remains as before  . The NP einen Mann must land in amf field . liebenis in canonical position and thus does not offer mf  , but both extraposed ko?nnen2 and finite verb wird do . 
Whereas in (12) , the NP climbed up to wird , in (13) it climbs only up to ko?nnen . 
(dass ) Mariawird einen Mannliebenko?nnenn vdnvv m f d f m f v c x f  ( 14 ) is ruled out because ko?nnen must be in the vc of wird  , therefore lieben must be in the vc of ko?nnen , and einen Mann must be in them f of wird . Therefore , einen Mann must precede both lieben and ko?nnen . Similarly for (15) . 
5.6 Intermediate Placement
The Zwischenstellung construction describes cases where the auxiliary has been flipped but its verbal argument remains in the Mittelfeld  . These are the remaining linearizations predicted by our theory for the running example started above:  ( 16 )   ( dass ) Maria einen Mannliebenwirdko?nnen ( 17 )   ( dass ) einen Mann Marialieben wird ko?nnen where lieben has climbed up to the finite verb  . 
5.7 Obligatory Auxiliary Flip
Substitute infinitives ( Ersatzinfinitiv ) are further examples of extraposed verbal forms . A substitute infinitive exhibits bare infinitival inflection  , yet acts as a complement of the perfectizer haben  , which syntactically requires a past participle . Only modals , AcI-verbs such as sehen and lassen , and the verb helfen can appear in substitute infinitival inflection  . 
A substitute infinitive cannot l and in canonical position  ; it must be extraposed : an auxiliary flip involving a substitute infinitive is called an ? obligatory auxiliary flip ?  . 
(18) ( dass ) ( that )

Maria einena
Mannman hath as lieben love ko?nnen can ( that ) Maria was able to love a man ( 19 )   ( dass ) Mariahateinen Mannliebenko?nnen ( 20 ) * ( dass ) Maria einen Mannliebenko?nnenhat
These examples share the ID tree: ( dass ) Maria einen Mannhatliebenko?nnen subject det object xv in fv in fhat subcategorizes for a verb in past participle inflection because : valency ID  ( hat ) = subject , v past and the edge constraint for w ? ? ? ? ? ? v past w ? requires : cat  ( w ? ) = v past This is satisfied by ko?nnen2 which insists on being extraposed , thus ruling (20) out : fieldext(ko?nnen2) = xf
Example ( 18 ) has LP tree: ( dass ) Maria einen Mannhatliebenko?nnenn dnvvv mfdfmfxfvcIn  ( 18 ) einen Mann climbs up to hat , while in (19) it only climbs up to ko?nnen . 
5.8 Double Auxiliary Flip
Double auxiliary flip constructions occur when an auxiliary is an argument of another auxiliary  . 
Each extraposed verb form offers both vc and mf : thus there are more opportunities for verbal and nominal arguments to climb to  . 
(21 )   ( dass ) Maria wird haben einen Mannliebenko?nnen ( that ) Maria will have been able to love a man ( 22 )   ( dass ) Maria einen Mannwird haben liebenko?nnen ( 23 )   ( dass ) Mariawird einen Mannliebenhabenko?nnen ( 24 )   ( dass ) Maria einen Mannwird liebenhabenko?nnen ( 25 )   ( dass ) Maria einen Mannliebenwirdhabenko?nnen
These examples have ID tree:
Maria einen Mannwird haben liebenko?nnen subject det object v in fv in fv past and  ( 22 ) obtains LP tree : Maria einen Mannwird haben liebenko?nnennd nvvvvmfdfmfxfvcxf  5  . 9 Obligatory Coherence Certain verbs like scheint require their argument to appear in canonical  ( or coherent ) position . 
(26) ( dass ) ( that )

Maria einena
Mannman zutolieben lovescheint seems ( that ) Maria seems to love a man ( 27 ) * ( dass ) Mariaeinen Mannscheint , zulieben Obligatory coherence may be enforced with the following constraint principle : if w is an obligatory coherence verb and w ? is its verbal argument  , then w ? must l and in w?s v c field . Like barriers , the expression of this principle in our grammatical formalism falls outside the scope of the present article and remains the subject of active research  . 46 Conclusions In this article , we described a treatment of linear precedence that extends the constraint-based framework for dependency grammar proposed by Duchier  ( 1999 )  . We distinguished two orthogonal , yet mutually constraining tree structures : unordered  , nonprojective ID trees which capture purely syntactic dependencies  , and ordered , projective LP trees which capture topological dependencies  . Our theory is formulated in terms of ( a ) lexicalized constraints and ( b ) principles which govern ? climbing ? conditions . 
We illustrated this theory with an application to the treatment of word order phenomena in the verbal complex of German verb final sentences  , and demonstrated that these traditionally challenging phenomena emerge naturally from our simple and elegant account  . 
Although we provided here an account specific to German  , our framework intentionally permits the definition of arbitrary language-specific topologies  . Whether this proves linguistically adequate in practice needs to be substantiated in future research  . 
Characteristic of our approach is that the formal presentation defines valid analyses as the solutions of a constraint satisfaction problem which is amenable to efficient processing through constraint propagation  . A prototype was implemented in Mozart/Oz and supports a parsing  4we also thank an anonymous reviewer for pointing out that our grammar fragment does not permit intraposition mode as well as a mode generating all licensed linearizations for a given input  . It was used to prepare all examples in this article  . 
While the preliminary results presented here are encouraging and demonstrate the potential of our approach to linear precedence  , much work remains to be done to extend its coverage and to arrive at a cohesive and comprehensive grammar formalism  . 

Gunnar Bech .  1955 . Studien u?ber das deutsche Ver-bumin finitum .   2nd unrevised edition published 1983 by Max Niemeyer Verlag , Tu?bingen ( Linguistische Arbeiten139) . 
Norbert Bro?ker .  1999 . Eine Dependenz grammatik zur Kopplung heterogener Wissensquellen  . Linguistische Arbeiten 405 . Max Niemeyer Verlag,

Denys Duchier .  1999 . Axiomatizing dependency parsing using set constraints  . In Sixth Meeting on the Mathematics of Language , Orlando/FL , July . 
Erhard Hinrichs and Tsuneko Nakazawa .  1994 . Linearizing AUXs in German verbal complexes . In Nerbonne et al ( Nerbonne et al ,  1994) , pages 11?37 . 
Sylvain Kahane , Alexis Nasr , and Owen Rambow.
1998 . Pseudo-projectivity : a polynomially parsable nonprojective dependency grammar  . In Proc . 
ACL/COLING ?98, pages 646?52, Montre?al.
Andreas Kathol .  2000 . Linear Syntax . Oxford University Press . 
Igor Melc?uk .  1988 . Dependency Syntax : Theory and
Practice . The SUNY Press , Albany , N.Y.
Stefan Mu?ller .  1999 . Deutsche Syntax dek lara-tiv . Head-Driven Phrase Structure Grammar fu?r das Deutsche  . Linguistische Arbeiten 394 . Max
Niemeyer Verlag , Tu?bingen/FRG.
John Nerbonne , Klaus Netter , and Carl Pollard , editors .  1994 . German in Head-Driven Phrase Structure Grammar . CSLI , Stanford/CA . 
Mike Reape .  1994 . Domain union and word order variation in German . In Nerbonne et al ( Nerbonne et al ,  1994) , pages 151?197 . 
Hans Uszkoreit .  1987 . Word Order and Constituent Structure in German . CSLI , Stanford/CA . 
