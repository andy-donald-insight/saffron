Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics , pages 675?684,
Jeju , Republic of Korea , 814 July 2012. c?2012 Association for Computational Linguistics
Exploiting Multiple Treebanks for Parsing with Quasi-synchronous
Grammars
Zhenghua Li , Ting Liu ?, Wanxiang Che
Research Center for Social Computing and Information Retrieval
School of Computer Science and Technology
Harbin Institute of Technology , China
{lzh,tliu,car}@ir.hit.edu.cn
Abstract
We present a simple and effective framework for exploiting multiple monolingual treebanks with different annotation guidelines for parsing . Several types of transformation patterns ( TP ) are designed to capture the systematic annotation inconsistencies among different treebanks . Based on such TPs , we design quasi-synchronous grammar features to augment the baseline parsing models . Our approach can significantly advance the state-of-the-art parsing accuracy on two widely used target treebanks ( Penn Chinese Treebank 5.1 and 6.0) using the Chinese Dependency Treebank as the source treebank . The improvements are respectively 1.37% and 1.10% with automatic part-of-speech tags . Moreover , an indirect comparison indicates that our approach also outperforms previous work based on treebank conversion.
1 Introduction
The scale of available labeled data significantly affects the performance of statistical datadriven models . As a structural classification problem that is more challenging than binary classification and sequence labeling problems , syntactic parsing is more prone to suffer from the data sparseness problem.
However , the heavy cost of treebanking typically limits one single treebank in both scale and genre.
At present , learning from one single treebank seems inadequate for further boosting parsing accuracy.1 ? Correspondence author : tliu@ir.hit.edu.cn 1Incorporating an increased number of global features , such as third-order features in graphbased parsers , slightly affects parsing accuracy ( Koo and Collins , 2010; Li et al , 2011).
Treebanks # of Words Grammar
CTB5 0.51 million Phrase structure
CTB6 0.78 million Phrase structure
CDT 1.11 million Dependency structure
Sinica 0.36 million Phrase structure
TCT about 1 million Phrase structure
Table 1: Several publicly available Chinese treebanks.
Therefore , studies have recently resorted to other resources for the enhancement of parsing models , such as largescale unlabeled data ( Koo et al , 2008; Chen et al , 2009; Bansal and Klein , 2011; Zhou et al , 2011), and bilingual texts or crosslingual treebanks ( Burkett and Klein , 2008; Huang et al , 2009; Burkett et al , 2010; Chen et al , 2010).
The existence of multiple monolingual treebanks opens another door for this issue . For example , table 1 lists a few publicly available Chinese treebanks that are motivated by different linguistic theories or applications . In the current paper , we utilize the first three treebanks , i.e ., the Chinese Penn Treebank 5.1 ( CTB5) and 6.0 ( CTB6) ( Xue et al , 2005), and the Chinese Dependency Treebank ( CDT ) ( Liu et al , 2006). The Sinica treebank ( Chen et al , 2003) and the Tsinghua Chinese Treebank ( TCT ) ( Qiang , 2004) can be similarly exploited with our proposed approach , which we leave as future work.
Despite the divergence of annotation philosophy , these treebanks contain rich human knowledge on the Chinese syntax , thereby having a great deal of common ground . Therefore , exploiting multiple treebanks is very attractive for boosting parsing accuracy . Figure 1 gives an example with different an-
VV NN CC NN promote trade and industry v n c n
OBJ
NMOD
NMOD
VOB COO
LAD w0
ROOT
ROOT
Figure 1: Example with annotations from CTB5 ( upper ) and CDT ( under).
notations from CTB5 and CDT.2 This example illustrates that the two treebanks annotate coordination constructions differently . In CTB5, the last noun is the head , whereas the first noun is the head in CDT.
One natural idea for multiple treebank exploitation is treebank conversion . First , the annotations in the source treebank are converted into the style of the target treebank . Then , both the converted treebank and the target treebank are combined . Finally , the combined treebank are used to train a better parser . However , the inconsistencies among different treebanks are normally nontrivial , which makes rule-based conversion infeasible . For example , a number of inconsistencies between CTB5 and CDT are lexicon-sensitive , that is , they adopt different annotations for some particular lexicons ( or word senses ). Niu et al (2009) use sophisticated strategies to reduce the noises of the converted treebank after automatic treebank conversion.
The present paper proposes a simple and effective framework for this problem . The proposed framework avoids directly addressing the difficult annotation transformation problem , but focuses on modeling the annotation inconsistencies using transformation patterns ( TP ). The TPs are used to compose quasi-synchronous grammar ( QG ) features , such that the knowledge of the source treebank can inspire the target parser to build better trees . We conduct extensive experiments using CDT as the source treebank to enhance two target treebanks ( CTB5 and CTB6). Results show that our approach can significantly boost state-of-the-art parsing accuracy . Moreover , an indirect comparison indicates that our ap-2CTB5 is converted to dependency structures following the standard practice of dependency parsing ( Zhang and Clark , 2008b ). Notably , converting a phrase-structure tree into its dependency-structure counterpart is straightforward and can be performed by applying heuristic head-finding rules.
proach also outperforms the treebank conversion approach of Niu et al (2009).
2 Related Work
The present work is primarily inspired by Jiang et al . (2009) and Smith and Eisner (2009). Jiang et al (2009) improve the performance of word segmentation and part-of-speech ( POS ) tagging on CTB5 using another largescale corpus of different annotation standards ( People?s Daily ). Their framework is similar to ours . However , handling syntactic annotation inconsistencies is significantly more challenging in our case of parsing . Smith and Eisner (2009) propose effective QG features for parser adaptation and projection . The first part of their work is closely connected with our work , but with a few important differences . First , they conduct simulated experiments on one treebank by manually creating a few trivial annotation inconsistencies based on two heuristic rules . They then focus on better adapting a parser to a new annotation style with few sentences of the target style . In contrast , we experiment with two real largescale treebanks , and boost the state-of-the-art parsing accuracy using QG features . Second , we explore much richer QG features to fully exploit the knowledge of the source treebank . These features are tailored to the dependency parsing problem . In summary , the present work makes substantial progress in modeling structural annotation inconsistencies with QG features for parsing.
Previous work on treebank conversion primarily focuses on converting one grammar formalism of a treebank into another and then conducting a study on the converted treebank ( Collins et al , 1999; Xia et al , 2008). The work by Niu et al (2009) is , to our knowledge , the only study to date that combines the converted treebank with the existing target treebank . They automatically convert the dependency-structure CDT into the phrase-structure style of CTB5 using a statistical constituency parser trained on CTB5. Their experiments show that the combined treebank can significantly improve the performance of constituency parsers . However , their method requires several sophisticated strategies , such as corpus weighting and score interpolation , to reduce the influence of conversion errors.
Instead of using the noisy converted treebank as additional training data , our approach allows the QG-atic inconsistencies based on QG features , making our approach simpler and more robust.
Our approach is also intuitively related to stacked learning ( SL ), a machine learning framework that has recently been applied to dependency parsing to integrate two mainstream parsing models , i.e ., graphbased and transition-based models ( Nivre and McDonald , 2008; Martins et al , 2008). However , the SL framework trains two parsers on the same treebank and therefore does not need to consider the problem of annotation inconsistencies.
3 Dependency Parsing
Given an input sentence x = w0w1...wn and its POS tag sequence t = t0t1...tn , the goal of dependency parsing is to build a dependency tree as depicted in Figure 1, denoted by d = {( h,m , l ) : 0 ? h ? n , 0 < m ? n , l ? L }, where ( h,m , l ) indicates an directed arc from the head word ( also called father ) wh to the modifier ( also called child or dependent ) wm with a dependency label l , and L is the label set.
We omit the label l because we focus on unlabeled dependency parsing in the present paper . The artificial node w0, which always points to the root of the sentence , is used to simplify the formalizations.
In the current research , we adopt the graphbased parsing models for their state-of-the-art performance in a variety of languages.3 Graphbased models view the problem as finding the highest scoring tree from a directed graph . To guarantee the efficiency of the decoding algorithms , the score of a dependency tree is factored into the scores of some small parts ( subtrees).
Scorebs(x , t,d ) = wbs ? fbs(x , t,d ) = ? p?d wpart ? fpart(x , t , p ) where p is a scoring part which contains one or more dependencies of d , and fbs (.) denotes the basic parsing features , as opposed to the QG features . Figure 2 lists the scoring parts used in our work , where g , h , m , and s , are word indices.
We implement three parsing models of varying strengths in capturing features to better understand the effect of the proposed QG features.
3Our approach can equally be applied to transition-based parsing models ( Yamada and Matsumoto , 2003; Nivre , 2003) with minor modifications.
dependency sibling grandparent h m h ms h m g Figure 2: Scoring parts used in our graphbased parsing models.
? The first-order model ( O1) only incorporates dependency parts ( McDonald et al , 2005), and requires O(n3) parsing time.
? The second-order model using only sibling parts ( O2sib ) includes both dependency and sibling parts ( McDonald and Pereira , 2006), and needs O(n3) parsing time.
? The second-order model ( O2) uses all the scoring parts in Figure 2 ( Koo and Collins , 2010). The time complexity of the decoding algorithm is O(n4).4 For the O2 model , the score function is rewritten as:
Scorebs(x , t,d ) = ? {( h,m)}?d wdep ? fdep(x , t , h,m ) + ? {( h,s),(h,m)}?d wsib ? fsib(x , t , h , s,m ) + ? {( g,h),(h,m)}?d wgrd ? fgrd(x , t , g , h,m ) where fdep (.), fsib (.) and fgrd (.) correspond to the features for the three kinds of scoring parts . We adopt the standard features following Li et al (2011). For the O1 and O2sib models , the above formula is modified by deactivating the extra parts.
4 Dependency Parsing with QG Features
Smith and Eisner (2006) propose the QG for machine translation ( MT ) problems , allowing greater syntactic divergences between the two languages.
Given a source sentence x ? and its syntactic tree d ?, a QG defines a monolingual grammar that generates translations of x ?, which can be denoted by p(x,d,a|x?,d ?), where x and d refer to a translation and its parse , and a is a cross-language alignment.
Under a QG , any portion of d can be aligned to any 4We use the coarse-to-fine strategy to prune the search space , which largely accelerates the decoding procedure ( Koo and Collins , 2010).
677 hm h m m h
Consistent : 55.4% Reverse : 8.6%Sibling : 10.0%Grand : 11.7% Reverse-grand : 1.4%( ', , ) dep d h m ? ? ( ', , , ) grd d g h m ? ? ( ', , , ) sib d h s m ? ? i m h i h m 28.2% i mh h ms h ms 6.7% i m h s h s i m 6.4% i msh 4.9% s m h 4.4% m s h 4.2% h m g h m g 30.1% 6.5% h mg 6.2% h m i g 6.1% i m h g m h g 5.4% 5.3% i h g m Syntactic Structures of the Corresponding Source SideTarget Side Figure 4: Most frequent transformation patterns ( TPs ) when using CDT as the source treebank and CTB5 as the target . A TP comprises two syntactic structures , one in the source side and the other in the target side , and denotes the process by which the leftside subtree is transformed into the rightside structure . Functions ? dep (.), ? sib (.), and ? grd (.) return the specific TP type for a candidate scoring part according to the source tree d?.
Source Parser
ParserS
Target Parser
ParserT
Train
Train
Parse
Target
Treebank
T={(xj , dj)}j
Source Treebank
S={(xi , di)}i
Parsed
Treebank
TS={(xj , djS)}j
Target Treebank with
Source Annotations
T+S={(xj , djS , dj)}j
Out
Figure 3: Framework of our approach.
portion of d ?, and the construction of d can be inspired by arbitrary substructures of d ?. To date , QGs have been successfully applied to various tasks , such as word alignment ( Smith and Eisner , 2006), machine translation ( Gimpel and Smith , 2011), question answering ( Wang et al , 2007), and sentence simplification ( Woodsend and Lapata , 2011).
In the present work , we utilize the idea of the QG for the exploitation of multiple monolingual treebanks . The key idea is to let the parse tree of one style inspire the parsing process of another style.
Different from a MT process , our problem considers one single sentence ( x = x ?), and the alignment a is trivial . Figure 3 shows the framework of our approach . First , we train a statistical parser on the source treebank , which is called the source parser.
The source parser is then used to parse the whole target treebank . At this point , the target treebank contains two sets of annotations , one conforming to the source style , and the other conforming to the target style . During both the training and test phases , the target parser are inspired by the source annotations , and the score of a target dependency tree becomes
Score(x , t,d?,d ) = Scorebs(x , t,d ) + Scoreqg(x , t,d?,d ) The first part corresponds to the baseline model , whereas the second part is affected by the source tree d ? and can be rewritten as Scoreqg(x , t,d?,d ) = wqg ? fqg(x , t,d?,d ) where fqg (.) denotes the QG features . We expect the QG features to encourage or penalize certain scoring parts in the target side according to the source tree d ?. Taking Figure 1 as an example , suppose that the upper structure is the target . The target parser can raise the score of the candidate dependence ? and ? ? ? industry ?, because the depen-idence in the training data shows that both annotation styles handle conjunctions in the same manner.
Similarly , the parser may add weight to ? trade ? ? ? industry ?, considering that the reverse arc is in the source structure . Therefore , the QG-enhanced model must learn the systematic consistencies and inconsistencies from the training data.
To model such consistency or inconsistency sys-tematicness , we propose the use of TPs for encoding the structural correspondence between the source and target styles . Figure 4 presents the three kinds of TPs used in our model , which correspond to the three scoring parts of our parsing models.
Dependency TPs shown in the first row consider how one dependency in the target side is transformed in the source annotations . We only consider the five cases shown in the figure . The percentages in the lower boxes refer to the proportion of the corresponding pattern , which are counted from the training data of the target treebank with source annotations T+S . We can see that the noisy source structures and the goldstandard target structures have 55.4% common dependencies . If the source structure does not belong to any of the listed five cases , ? dep(d ?, h,m ) returns ? else ? (12.9%). We could consider more complex structures , such as h being the grand grand father of m , but statistics show that more complex transformations become very scarce in the training data.
For the reason that dependency TPs can only model how one dependency in the target structure is transformed , we consider more complex transformations for the other two kinds of scoring parts of the target parser , i.e ., the sibling and grand TPs shown in the bottom two rows . We only use high-frequency TPs of a proportion larger than 1.0%, aggregate others as ? else ?, which leaves us with 21 sibling TPs and 22 grand TPs.
Based on these TPs , we propose the QG features for enhancing the baseline parsing models , which are shown in Table 2. The type of the TP is conjoined with the related words and POS tags , such that the QG-enhanced parsing models can make more elaborate decisions based on the context.
Then , the score contributed by the QG features can be redefined as
Scoreqg(x , t,d?,d ) = ? {( h,m)}?d wqg-dep ? fqg-dep(x , t,d ?, h,m ) + ? {( h,s),(h,m)}?d wqg-sib ? fqg-sib(x , t,d ?, h , s,m ) + ? {( g,h),(h,m)}?d wqg-grd ? fqg-grd(x , t,d ?, g , h,m ) which resembles the baseline model and can be naturally handled by the decoding algorithms.
5 Experiments and Analysis
We use the CDT as the source treebank ( Liu et al ., 2006). CDT consists of 60,000 sentences from the People?s Daily in 1990s . For the target treebank , we use two widely used versions of Penn Chinese Treebank , i.e ., CTB5 and CTB6, which consist of Xinhua newswire , Hong Kong news and articles from Sinarama news magazine ( Xue et al , 2005). To facilitate comparison with previous results , we follow Zhang and Clark (2008b ) for data split and constituency-to-dependency conversion of CTB5. CTB6 is used as the Chinese data set in the CoNLL 2009 shared task ( Hajic ? et al , 2009). Therefore , we adopt the same setting.
CDT and CTB5/6 adopt different POS tag sets , and converting from one tag set to another is difficult ( Niu et al , 2009).5 To overcome this problem , we use the People?s Daily corpus ( PD),6 a largescale corpus annotated with word segmentation and POS tags , to train a statistical POS tagger . The tagger produces a universal layer of POS tags for both the source and target treebanks . Based on the common tags , the source parser projects the source annotations into the target treebanks . PD comprises approximately 300 thousand sentences of with approximately 7 million words from the first half of 1998 of People?s Daily.
Table 3 summarizes the data sets used in the present work . CTB5X is the same with CTB5 but follows the data split of Niu et al (2009). We use CTB5X to compare our approach with their treebank conversion method ( see Table 9).
5The word segmentation standards of the two treebanks also slightly differs , which are not considered in this work.
6http://icl.pku.edu.cn/icl_groups / corpustagging.asp ? dir(h,m ) ? dist(h,m ) ? dir(h,m ) ? dir(h,m ) ? dir(g , h ) ? dep(d ?, h,m ) ? th ? tm ? sib(d ?, h , s,m ) ? th ? ts ? tm ? grd(d ?, g , h,m ) ? tg ? th ? tm ? dep(d ?, h,m ) ? wh ? tm ? sib(d ?, h , s,m ) ? wh ? ts ? tm ? grd(d ?, g , h,m ) ? wg ? th ? tm ? dep(d ?, h,m ) ? th ? wm ? sib(d ?, h , s,m ) ? th ? ws ? tm ? grd(d ?, g , h,m ) ? tg ? wh ? tm ? dep(d ?, h,m ) ? wh ? wm ? sib(d ?, h , s,m ) ? th ? ts ? wm ? grd(d ?, g , h,m ) ? tg ? th ? wm ? sib(d ?, h , s,m ) ? ts ? tm ? grd(d ?, g , h,m ) ? tg ? tm Table 2: QG features used to enhance the baseline parsing models . dir(h,m ) denotes the direction of the dependency ( h,m ), whereas dist(h,m ) is the distance | h ? m |. ? dir(h,m ) ? dist(h,m ) indicates that the features listed in the corresponding column are also conjoined with dir(h,m ) ? dist(h,m ) to form new features.
Corpus Train Dev Test
PD 281,311 5,000 10,000
CDT 55,500 1,500 3,000
CTB5 16,091 803 1,910
CTB5X 18,104 352 348
CTB6 22,277 1,762 2,556
Table 3: Data used in this work ( in sentence number).
We adopt unlabeled attachment score ( UAS ) as the primary evaluation metric . We also use Root accuracy ( RA ) and complete match rate ( CM ) to give more insights . All metrics exclude punctuation . We adopt Dan Bikel?s randomized parsing evaluation comparator for significance test ( Noreen , 1989).7 For all models used in current work ( POS tagging and parsing ), we adopt averaged perceptron to train the feature weights ( Collins , 2002). We train each model for 10 iterations and select the parameters that perform best on the development set.
5.1 Preliminaries
This subsection describes how we project the source annotations into the target treebanks . First , we train a statistical POS tagger on the training set of PD , which we name TaggerPD .8 The tagging accuracy on the test set of PD is 98.30%.
We then use TaggerPD to produce POS tags for all the treebanks ( CDT , CTB5, and CTB6).
Based on the common POS tags , we train a second-order source parser ( O2) on CDT , denoted by ParserCDT . The UAS on CDT-test is 84.45%.
We then use ParserCDT to parse CTB5 and CTB6.
7http://www.cis.upenn.edu/[normal-wave ? ] dbikel/software.html 8We adopt the Chinese-oriented POS tagging features proposed in Zhang and Clark (2008a).
Models without QG with QG
O2 86.13 86.44 (+0.31, p = 0.06)
O2sib 85.63 86.17 (+0.54, p = 0.003)
O1 83.16 84.40 (+1.24, p < 10?5)
Li11 86.18 ?
Z&N11 86.00 ?
Table 4: Parsing accuracy ( UAS ) comparison on CTB5-test with goldstandard POS tags . Li11 refers to the second-order graphbased model of Li et al (2011), whereas Z&N11 is the feature-rich transition-based model of Zhang and Nivre (2011).
At this point , both CTB5 and CTB6 contain dependency structures conforming to the style of CDT.
5.2 CTB5 as the Target Treebank
Table 4 shows the results when the goldstandard POS tags of CTB5 are adopted by the parsing models . We aim to analyze the efficacy of QG features under the ideal scenario wherein the parsing models suffer from no error propagation of POS tagging . We determine that our baseline O2 model achieves comparable accuracy with the state-of-the-art parsers . We also find that QG features can boost the parsing accuracy by a large margin when the baseline parser is weak ( O1). The improvement shrinks for stronger baselines ( O2sib and O2).
This phenomenon is understandable . When goldstandard POS tags are available , the baseline features are very reliable and the QG features becomes less helpful for more complex models . The p-values in parentheses present the statistical significance of the improvements.
We then turn to the more realistic scenario wherein the goldstandard POS tags of the target treebank are unavailable . We train a POS tagger on the training set of CTB5 to produce the automatic
O2 79.67 81.04 (+1.37)
O2sib 79.25 80.45 (+1.20)
O1 76.73 79.04 (+2.31)
Li11 joint 80.79 ?
Li11 pipeline 79.29 ?
Table 5: Parsing accuracy ( UAS ) comparison on CTB5-test with automatic POS tags . The improvements shown in parentheses are all statistically significant ( p < 10?5).
Setting UAS CM RA fbs (.) 79.67 26.81 73.82 fqg (.) 79.15 26.34 74.71 fbs (.) + fqg (.) 81.04 29.63 77.17 fbs (.) + fqg-dep (.) 80.82 28.80 76.28 fbs (.) + fqg-sib (.) 80.86 28.48 76.18 fbs (.) + fqg-grd (.) 80.88 28.90 76.34 Table 6: Feature ablation for Parser-O2 on CTB5-test with automatic POS tags.
POS tags for the development and test sets of CTB5.
The tagging accuracy is 93.88% on the test set . The automatic POS tags of the training set are produced using 10-fold cross-validation.9 Table 5 shows the results . We find that QG features result in a surprisingly large improvement over the O1 baseline and can also boost the state-of-the-art parsing accuracy by a large margin . Li et al . (2011) show that a joint POS tagging and dependency parsing model can significantly improve parsing accuracy over a pipeline model . Our QG-enhanced parser outperforms their best joint model by 0.25%. Moreover , the QG features can be used to enhance a joint model and achieve higher accuracy , which we leave as future work.
5.3 Analysis Using Parser-O2 with AUTO-POS We then try to gain more insights into the effect of the QG features through detailed analysis . We select the state-of-the-art O2 parser and focus on the realistic scenario with automatic POS tags.
Table 6 compares the efficacy of different feature sets . The first major row analyzes the efficacy of 9We could use the POS tags produced by TaggerPD in Section 5.1, which however would make it difficult to compare our results with previous ones . Moreover , inferior results may be gained due to the differences between CTB5 and PD in word segmentation standards and text sources.
the basic features fbs (.) and the QG features fqg(.).
When using the few QG features in Table 2, the accuracy is very close to that when using the basic features . Moreover , using both features generates a large improvement . The second major row compares the efficacy of the three kinds of QG features corresponding to the three types of scoring parts . We can see that the three feature sets are similarly effective and yield comparable accuracies . Combining these features generate an additional improvement of approximately 0.2%. These results again demonstrate that all the proposed QG features are effective.
Figure 5 describes how the performance varies when the scale of CTB5 and CDT changes . In the left subfigure , the parsers are trained on part of the CTB5-train , and ?16? indicates the use of all the training instances . Meanwhile , the source parser ParserCDT is trained on the whole CDT-train . We can see that QG features render larger improvement when the target treebank is of smaller scale , which is quite reasonable . More importantly , the curves indicate that a QG-enhanced parser trained on a target treebank of 16,000 sentences may achieve comparable accuracy with a baseline parser trained on a treebank that is double the size (32,000), which is very encouraging.
In the right subfigure , the target treebank is trained on the whole CTB5-train , whereas the source parser is trained on part of the CDT-train , and ?55.5? indicates the use of all . The curve clearly demonstrates that the QG features are more helpful when the source treebank gets larger , which can be explained as follows . A larger source treebank can teach a source parser of higher accuracy ; then , the better source parser can parse the target treebank more reliably ; and finally , the target parser can better learn the annotation divergences based on QG features . These results demonstrate the effectiveness and stability of our approach.
Table 7 presents the detailed effect of the QG features on different dependency patterns . A pattern ? VV ? NN ? refers to a right-directed dependency with the head tagged as ? VV ? and the modifier tagged as ? NN ?. whereas ??? means left-directed.
The ? w/o QG ? column shows the number of the corresponding dependency pattern that appears in the goldstandard trees but misses in the results of the baseline parser , whereas the signed figures in the ?+ QG ? column are the changes made by the QG-
Training Set Size of CTB5 w/o QG with QG 79.4 79.6 79.8 80.4 80.6 80.8 0 3 6 12 24 55.5
Training Set Size of CDT with QG
Figure 5: Parsing accuracy ( UAS ) comparison on CTB5-test when the scale of CDT and CTB5 varies ( thousands in sentence number).
Dependency w/o QG + QG Descriptions
NN ? NN 858 -78 noun modifier or coordinating nouns VV ? VV 777 -41 object clause or coordinating verbs
VV ? VV 570 -38 subject clause
VV ? NN 509 -79 verb and its object w0 ? VV 357 -57 verb as sentence root
VV ? NN 328 -32 attributive clause
P ? VV 278 -37 preposition phrase attachment VV ? DEC 233 -33 attributive clause and auxiliary DE P ? NN 175 -35 preposition and its object Table 7: Detailed effect of QG features on different dependency patterns.
enhanced parser . We only list the patterns with an absolute change larger than 30. We find that the QG features can significantly help a variety of dependency patterns ( i.e ., reducing the missing number).
5.4 CTB6 as the Target Treebank
We use CTB6 as the target treebank to further verify the efficacy of our approach . Compared with CTB5, CTB6 is of larger scale and is converted into dependency structures according to finer-grained head-finding rules ( Hajic ? et al , 2009). We directly adopt the same transformation patterns and features tuned on CTB5. Table 8 shows results . The improvements are similar to those on CTB5, demonstrating that our approach is effective and robust . We list the top three systems of the CoNLL 2009 shared task in Table 8, showing that our approach also advances the state-of-the-art parsing accuracy on this data set.10 10We reproduce their UASs using the data released by the organizer : http://ufal.mff.cuni.cz/conll2009-st/results / results.php . The parsing accuracies of the top systems may be underestimated since the accuracy of the provided POS tags in CoNLL 2009 is only 92.38% on the test set , while the POS tagger used in our experiments reaches 94.08%.
Models without QG with QG
O2 83.23 84.33 (+1.10)
O2sib 82.87 84.11 (+1.37)
O1 80.29 82.76 (+2.47)
Bohnet (2009) 82.68 ?
Che et al (2009) 82.11 ?
Gesmundo et al (2009) 81.70 ?
Table 8: Parsing accuracy ( UAS ) comparison on CTB6-test with automatic POS tags . The improvements shown in parentheses are all statistically significant ( p < 10?5).
Models baseline with another treebank
Ours 84.16 86.67 (+2.51)
GP ( Niu et al , 2009) 82.42 84.06 (+1.64) Table 9: Parsing accuracy ( UAS ) comparison on the test set of CTB5X . Niu et al (2009) use the maximum entropy inspired generative parser ( GP ) of Charniak (2000) as their constituent parser.
5.5 Comparison with Treebank Conversion
As discussed in Section 2, Niu et al (2009) automatically convert the dependency-structure CDT to the phrase-structure annotation style of CTB5X and use the converted treebank as additional labeled data.
We convert their phrase-structure results on CTB5X-test into dependency structures using the same head-finding rules . To compare with their results , we run our baseline and QG-enhanced O2 parsers on CTB5X . Table 9 presents the results.11 The indirect comparison indicates that our approach can achieve larger improvement than their treebank conversion based method.
6 Conclusions
The current paper proposes a simple and effective framework for exploiting multiple largescale treebanks of different annotation styles . We design rich TPs to model the annotation inconsistencies and consequently propose QG features based on these TPs . Extensive experiments show that our approach can effectively utilize the syntactic knowledge from another treebank and significantly improve the state-of-the-art parsing accuracy.
11We thank the authors for sharing their results . Niu et al (2009) also use the reranker ( RP ) of Charniak and Johnson (2005) as a stronger baseline , but the results are missing . They find a less improvement on F score with RP than with GP (0.9% vs . 1.1%). We refer to their Table 5 and 6 for details.
682
Acknowledgments
This work was supported by National Natural Science Foundation of China ( NSFC ) via grant 61133012, the National ?863? Major Projects via grant 2011AA01A207, and the National ?863? Leading Technology Research Project via grant 2012AA011102.
References
Mohit Bansal and Dan Klein . 2011. Web-scale features for fullscale parsing . In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics : Human Language Technologies , pages 693?702, Portland , Oregon , USA , June . Association for Computational Linguistics.
Bernd Bohnet . 2009. Efficient parsing of syntactic and semantic dependency structures . In Proceedings of the Thirteenth Conference on Computational Natural Language Learning ( CoNLL 2009): Shared Task , pages 67?72, Boulder , Colorado , June . Association for
Computational Linguistics.
David Burkett and Dan Klein . 2008. Two languages are better than one ( for syntactic parsing ). In Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing , pages 877?886, Honolulu , Hawaii , October . Association for Computational Linguistics.
David Burkett , Slav Petrov , John Blitzer , and Dan Klein.
2010. Learning better monolingual models with unannotated bilingual text . In Proceedings of the Fourteenth Conference on Computational Natural Language Learning , CoNLL ?10, pages 46?54, Stroudsburg , PA , USA . Association for Computational Linguistics.
Eugene Charniak and Mark Johnson . 2005. Coarse-to-fine nbest parsing and maxent discriminative reranking . In Proceedings of ACL05, pages 173?180.
Eugene Charniak . 2000. A maximum-entropy-inspired parser . In ANLP?00, pages 132?139.
Wanxiang Che , Zhenghua Li , Yongqiang Li , Yuhang Guo , Bing Qin , and Ting Liu . 2009. Multilingual dependency-based syntactic and semantic parsing . In Proceedings of CoNLL 2009: Shared Task , pages 49? 54.
Keh-Jiann Chen , Chi-Ching Luo , Ming-Chung Chang , Feng-Yi Chen , Chao-Jan Chen , Chu-Ren Huang , and Zhao-Ming Gao , 2003. Sinica treebank : Design crite-ria,representational issues and implementation , chapter 13, pages 231?248. Kluwer Academic Publishers.
Wenliang Chen , Jun?ichi Kazama , Kiyotaka Uchimoto , and Kentaro Torisawa . 2009. Improving dependency parsing with subtrees from auto-parsed data.
In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing , pages 570?579, Singapore , August . Association for Computational Linguistics.
Wenliang Chen , Jun?ichi Kazama , and Kentaro Torisawa.
2010. Bitext dependency parsing with bilingual subtree constraints . In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics , pages 21?29, Uppsala , Sweden , July . Association for Computational Linguistics.
Micheal Collins , Lance Ramshaw , Jan Hajic , and Christoph Tillmann . 1999. A statistical parser for czech . In ACL 1999, pages 505?512.
Michael Collins . 2002. Discriminative training methods for hidden markov models : Theory and experiments with perceptron algorithms . In Proceedings of
EMNLP 2002.
Andrea Gesmundo , James Henderson , Paola Merlo , and Ivan Titov . 2009. A latent variable model of synchronous syntactic-semantic parsing for multiple languages . In Proceedings of CoNLL 2009: Shared Task , pages 37?42.
Kevin Gimpel and Noah A . Smith . 2011. Quasi-synchronous phrase dependency grammars for machine translation . In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing , pages 474?485, Edinburgh , Scotland , UK ., July . Association for Computational Linguistics.
Jan Hajic ?, Massimiliano Ciaramita , Richard Johansson , Daisuke Kawahara , Maria Anto`nia Mart ??, Llu??s Ma`rquez , Adam Meyers , Joakim Nivre , Sebastian Pado ?, Jan ? Ste?pa?nek , Pavel Stran?a?k , Mihai Surdeanu , Nianwen Xue , and Yi Zhang . 2009. The CoNLL2009 shared task : Syntactic and semantic dependencies in multiple languages . In Proceedings of CoNLL 2009.
Liang Huang , Wenbin Jiang , and Qun Liu . 2009.
Bilingually-constrained ( monolingual ) shift-reduce parsing . In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing , pages 1222?1231, Singapore , August . Association for
Computational Linguistics.
Wenbin Jiang , Liang Huang , and Qun Liu . 2009. Automatic adaptation of annotation standards : Chinese word segmentation and pos tagging ? a case study . In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP , pages 522?530, Suntec , Singapore , August . Association for Computational Linguistics.
Terry Koo and Michael Collins . 2010. Efficient third-order dependency parsers . In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics , pages 1?11, Uppsala , Sweden , July . Association for Computational Linguistics.
683
Terry Koo , Xavier Carreras , and Michael Collins . 2008.
Simple semisupervised dependency parsing . In Proceedings of ACL08: HLT , pages 595?603, Columbus , Ohio , June . Association for Computational Linguistics.
Zhenghua Li , Min Zhang , Wanxiang Che , Ting Liu , Wenliang Chen , and Haizhou Li . 2011. Joint models for chinese pos tagging and dependency parsing . In
EMNLP 2011, pages 1180?1191.
Ting Liu , Jinshan Ma , and Sheng Li . 2006. Building a dependency treebank for improving Chinese parser.
In Journal of Chinese Language and Computing , volume 16, pages 207?224.
Andr ? F . T . Martins , Dipanjan Das , Noah A . Smith , and Eric P . Xing . 2008. Stacking dependency parsers . In
EMNLP?08, pages 157?166.
Ryan McDonald and Fernando Pereira . 2006. Online learning of approximate dependency parsing algorithms . In Proceedings of EACL 2006.
Ryan McDonald , Koby Crammer , and Fernando Pereira.
2005. Online large-margin training of dependency parsers . In Proceedings of ACL 2005, pages 91?98.
Zheng-Yu Niu , Haifeng Wang , and Hua Wu . 2009. Exploiting heterogeneous treebanks for parsing . In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP , pages 46?54, Suntec , Singapore , August . Association for Computational Linguistics.
Joakim Nivre and Ryan McDonald . 2008. Integrating graphbased and transition-based dependency parsers.
In Proceedings of ACL 2008, pages 950?958.
Joakim Nivre . 2003. An efficient algorithm for projective dependency parsing . In Proceedings of the 8th International Workshop on Parsing Technologies ( IWPT ), pages 149?160.
Eric W . Noreen . 1989. Computer-intensive methods for testing hypotheses : An introduction . John Wiley & Sons , Inc ., New York . Book ( ISBN 0471611360 ).
Zhou Qiang . 2004. Annotation scheme for chinese treebank . Journal of Chinese Information Processing , 18(4):1?8.
David Smith and Jason Eisner . 2006. Quasi-synchronous grammars : Alignment by soft projection of syntactic dependencies . In Proceedings on the Workshop on Statistical Machine Translation , pages 23?30, New York City , June . Association for Computational Linguistics.
David A . Smith and Jason Eisner . 2009. Parser adaptation and projection with quasi-synchronous grammar features . In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing , pages 822?831, Singapore , August . Association for
Computational Linguistics.
Mengqiu Wang , Noah A . Smith , and Teruko Mitamura . 2007. What is the Jeopardy model ? a quasi-synchronous grammar for QA . In Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning ( EMNLPCoNLL ), pages 22?32, Prague , Czech Republic , June . Association for Computational Linguistics.
Kristian Woodsend and Mirella Lapata . 2011. Learning to simplify sentences with quasi-synchronous grammar and integer programming . In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing , pages 409?420, Edinburgh , Scotland , UK ., July . Association for Computational
Linguistics.
Fei Xia , Rajesh Bhatt , Owen Rambow , Martha Palmer , and Dipti Misra . Sharma . 2008. Towards a multi-representational treebank . In In Proceedings of the 7th International Workshop on Treebanks and Linguistic
Theories.
Nianwen Xue , Fei Xia , Fu-Dong Chiou , and Martha Palmer . 2005. The Penn Chinese Treebank : Phrase structure annotation of a large corpus . In Natural Language Engineering , volume 11, pages 207?238.
Hiroyasu Yamada and Yuji Matsumoto . 2003. Statistical dependency analysis with support vector machines . In Proceedings of IWPT 2003, pages 195?206.
Yue Zhang and Stephen Clark . 2008a . Joint word segmentation and POS tagging using a single perceptron.
In Proceedings of ACL08: HLT , pages 888?896.
Yue Zhang and Stephen Clark . 2008b . A tale of two parsers : Investigating and combining graphbased and transition-based dependency parsing . In Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing , pages 562?571, Honolulu , Hawaii , October . Association for Computational Linguistics.
Yue Zhang and Joakim Nivre . 2011. Transition-based dependency parsing with rich nonlocal features . In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics : Human Language Technologies , pages 188?193, Portland , Oregon , USA , June . Association for Computational Linguistics.
Guangyou Zhou , Jun Zhao , Kang Liu , and Li Cai . 2011.
Exploiting web-derived selectional preference to improve statistical dependency parsing . In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics : Human Language Technologies , pages 1556?1565, Portland , Oregon , USA , June . Association for Computational Linguistics.
684
