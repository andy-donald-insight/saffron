PARALLEL MULTIPLE CONTEXT-FREEG RAMM ARS , FINITE-STATE
TRANS LATION SYSTEMS , ANDPOLY NOMIAL-TIME RECOGNIZA BLE
SUBCLASSES OF LEXICAL-FUNCTION ALGRAMMARS
Hiroyuki Sekitt Ryuichi Nakanishit Yuichi Kajit
Sachiko Andot Tadao Kasami $ t
tDepartment of Information and Computer Sciences , Faculty of Engineering Science , Osaka University 11 Machikaneyama , Toyonaka , Osaka 560 , Japan : ~ Graduate School of Information Science , Advanced Institute of Science and Technology , Nara 8916-5 Takayama , Ikoma , Nara 630-01 , Japan
Internet : seki@ics.es.osaka-u.ac.jp
Abstract
A number of grammatical formalisms were introduced to define the syntax of natural languages  . 
Among them are parallel multiple contextfree grammars  ( pmcfg's ) and lexical-functional grammars ( lfg's )  . Pmcfg's and their subclass called multiple contextfree grammars  ( mcfg's ) are natural extensions of cfg's , and pmcfg's are known to be recognizable in polynomial time  . Some subclasses of lfg's have been proposed , but they were shown to generate an AlP-complete language  . Finite state translation systems ( fts ' ) were introduced as a computational model of transformational grammars  . In this paper , three subclasses of lfg's called nc-lfg's , dc-lfg's and fc-lfg's are introduced and the generative capacities of the abovementioned grammatical formalisms are investigated  . First , we show that the generative capacity offts ' is equal to that of nc-lfg's  . As relations among subclasses of those formalisms  , it is shown that the generative capacities of deterministic fts '  , dc-lfg's , and pmcfg's are equal to each other , and the generative capacity of fc-lfg's is equal to that of mcfg's  . It is also shown that at least one Af79-complete language is generated by fts ' . Consequently , deterministic fts ' , dc-lfg's and fc-lfg's can be recognized in polynomial time  . 
However , fts'(and nc-lfg's ) cannot , if P ? Af T 9 . 
1 Introduction
A number of grammatical formalisms such as lexical -functional grammars  ( Kaplan 1982 )  , head grammars ( Pollard 1984 ) and tree adjoining grammars ( Joshi 1975 ) (Vijay-Shanker 1987 ) were introduced to define the syntax of natural languages  . On the other hand , there has been much effort to propose well -defined computational models of transformational grammars  . One of these is the one to extend devices which operate on strings  , such as generalized sequential machines ( gsm's ) to devices which operate on trees . 
It is fundamentally significant oclarify the generative capacities of such grammars and devices  . 
Parallel multiple contextfree grammars ( pm-cfg's ) and multiple contextfree grammars ( mcfg's ) were introduced in ( Kasami 1988 a ) (Seki 1991 ) as natural extensions of cfg's . The subsystem of linear contextfree rewriting systems  ( Icfrs ' )   ( Vijay-Shanker 1987 ) which deals with only strings is the same formalism as mcfg's  . The class of cfl's is properly included in the class of languages generated by pmcfg's  , which in turn is properly included in the one generated by mcfg's  . The class of languages generated by pmcfg's is properly included in that of context-sensitive languages  ( Kasami 1988 a )  . Pmcfg's have been shown to be recognized in polynomial time  ( Kasami 1988b ) (Seki 1991 )  . 
A tree transducer ( Rounds 1969 ) takes a tree as an input , starts from the initial state with its head scanning the root node of an input  . According to the current state and the label of the scanned node  , it transforms an input tree into an output tree in a topdown way  . A finite state translation system ( fts ) is a tree transducer with its input domain being the set of derivation trees of acf g  ( Rounds 1969 ) (Thatcher 1967 )  . A number of equivalence relations between the classes of yield languages generated by fts ' and other computational models have been established  ( Engelfriet 1991 ) (Engelfriet 1980 ) (Weir 1992 )  . Especially , it has been shown that the class of yield languages generated by finite-copying fts ' equals to the class of languages generated by lcfrs '  ( Weir 1992 )  , hence by mcfg's . 
In lexical-functional grammars ( If g's )   ( Kaplan 1982 )  , associated with each node v of a derivation tree is a finite set F of pairs of attribute names and their values  . F is called the f-structure of v . An lfgG consists of acfgGo called the underlying cfg of G and a finite set Pfs of equations called functional schemata which specify constraints between the fstructures of nodes in a derivation tree  . Functional schemat are attached to symbols in productions of Go  . It has been shown in ( Nakanishi 1992 ) that the class of languages generated by lfg's is equal to that of re-underlying cfg's are restricted to regular grammars  . In ( Gazdar 1985) ( Kaplan 1982) ( Nishino 1991) , subclasses of lfg's were proposed in order to guarantee the recursiveness  ( and/or the efficient recognition ) of languages generated by lfg's . 
However , these classes were shown to generate an A/P -complete language  ( Nakanishi 1992 )  . 
In this paper , three subclasses of lfg's called nc-lfg's , dc-lfg's and fc-lfg's are proposed , two of which can be recognized in polynomial time . 
Moreover , this paper clarifies the relations among the generative capacities of pmcfg's  , fts ' and these subclasses of lfg's . 
In nc-lfg's , a functional schema either specifies the vMue of a specific attribute  , say at r , immediately ( Tart = val ) or specifies that the value of a specific attribute of a node v is equal to the whole f -structure of a child node of v  ( Tatr = l )  . 
An nc-lfg is called adc-lfg if each pair of rules P\]:A--~aa and  P2 : A--~ a2 whose lefthand sides are the same is inconsistent in the sense that there exists n of-structure that locally satisfies both of the functional schemata of Pl and those of  p2  . Intuitively , in adc-lfgG , for each pair ( tl , t2) of derivation trees in G , if the f-structure and nonterminal of the root of tl are the same as those of  t2  , then t\] and t2 derive the same terminal string . 
Let G be an nc-lfg . A multiset M of nonterminals of G is called an SPN multiset in G if the following condition holds : Let M =  A1  , A2 ,  '  .   .   , An be a multiset of nonterminals where different Ai's are not always distinct  . There exist a derivation treet and a subset of nodes V = v\]  , v2 ,  . . . , v , ~ of t such that the label of v i is A i ( 1 < i < n ) and the fstructures of vi's are the same with each other by functional schemata of G  . 
If the number of SPN multisets in G is finite , then
G is called an fc-lfg.
Our main result is that the generative capacity of nc-lfg's is equal to that offts '  . As relations among proper subclasses of the above mentioned formalisms  , it is shown that the generative capacities of dc -lfg's  , deterministic fts ' and pmcfg's are equal to each other  , and the generative capacity of fc-lfg's is equal to that of mcfg's  . It is also shown that a ( nondeterministic ) fts generates an
Af : P-complete language.
2 Parallel Multiple ContextFree

A parallel multiple contextfree grammar ( pmcfg ) is defined to be a 5-tuple G = ( N , T , F , P , S ) which satisfies the following conditions ( G1 ) through ( Gh )   ( Kasami 1988 a ) (Seki 1991 )  . 
(G1) N is a finite set of nonterminal symbols . A positive integer d ( A ) is given for each nonterminal symbol A ? N . 
(G2 ) T is a finite set of terminal symbols which is disjoint with N  . 
(G3 ) F is a finite set of functions satisfying the following conditions  . For a positive integer d , let ( T * ) a denote the set of all the d-tuples of strings over T  . For each f ? F with a rity a(f ) , positive integers r ( f ) and di ( f )   ( 1_< i < a ( f ) ) are given , and f is a total function from ( T * ) dl ( : ) x ( T * ) d2 ( f )  ? . . . x ( T * ) da ( f )   ( 1 ) to IT * ) ' (  : ) which satisfies the following condition fl )  . Let ? i = ( zil , zi2, .   .   .   , zid , ( S ) ) denote the ith argument of f for 1 < i < a ( f )  . 
(fl ) For 1 < h < r(f ) , the hth component of f , denoted by f\[h\] , is defined as ; f\[h\]\[Xl , f~2 , -" - , X a(f)\]=OCh , OX#(h , O)rl(h , o)Oth , 1 ?  . ' ah , nh_lXu(h , nh_l)n(h , nh_Dah,n~(2 . 1) where a h , k ? T * for 0 < k <_n h , 1 < #( h , j ) <_ a(f ) and 1 <_~( h , j ) <_dt~(h , j)(f ) for O~j~_nh--1 . 
(G4 ) P is a finite set of productions of the form A-- -*   f\[A1  , A2 ,  . .  . , Aa(y)\]whereA , Aa , A2, .   .   .   , A a (/) ? N , f?F , r ( f ) = d ( A ) and di ( f ) = d ( Ai )   ( 1<i < a ( f ) ) . If a(f ) = 0, i . e . , f ? ( T *) r(f ) , the production is called a terminating production  , otherwise it is called a nonterminating production  . 
(Gh ) S ? N is the initial symbol , and d(S ) = 1.
If all the functions of a pmcfgG satisfy the following Right Linearity condition  , then G is called a multiple contextfree grammar ( mcfg )  . 
\[ Right Linearity \] For each xlj , the total number of occurrences of xij in the right hand sides of  ( 2 . 1) from h = 1 through r(f ) is at most one . 
The language generated by a pmcfgG = ( N , T , F , P , S ) is defined as follows . For A ? N , let us define LG ( A ) as the smallest set satisfying the following two conditions :  ( L 1 ) If a terminating production A--*& is in P , then ~? LG(A ) . 
( L2) If A--~f\[A1, A2, . .  .   , Aa(y)\]?P and ( ~ i?LG(Ai ) ~1<i<a(f )) , then f\[~1 , ~2 , ''' , O  ~ a(f)\]?LG(A) . -allel multiple contextfree language ( pmcfl ) generated by G . If G is an mcfg , L ( G ) is called the multiple contextfree language ( mcfl ) generated by

Example 2 . 1 ( Kasami 1988a ): Let GEX1 ~---( N , T , F , P , S ) , N = S , T = a , F = f ~ , f , P = r\]:S--~f a , ro:S--*f\[S\] , where f~=a , f\[(x)\]=xx . GE xl is a pmcfg but is not an mcfg since the function f does not satisfy Right Linearity  . The language generated by GEx~isa2"In > 0 , which cannot be generated by anymcf g ( see Lemma 6 of ( Kasami 1988 a ) ) . 
The empty string is denoted by ?.
Example 2 . 2: Let GE x2 = ( N , T , F , P , S ) beap mcfg , where N =  S , A ) , T = a , b , F = g\[(Xl , X2)\]----XlX2 , fa\[(Xl , X2)\]-~(xla , x2a ) , = y , = and , P = ---* Po:Sg\[A\] , Pl:A---*f ~\[ A\] , Pz : A--*fb\[A\] , P3: A---*f ~ . Note that GE x2 is an mcfg . 
L(GEx2) = wwIwEa , b)*.
Lamina 2 . 1 ( Kasami 1988b ) ( Seki 1991): Let Cbeapmcfg . For a given string w , it is decidable whether wEL ( G ) or not in time polynomial of I~1 , where I~1 denotes the length of w . 
3 F in i te State Trans la t ion Systems A set ~ of symbols is a ranked alphabet if  , for each crE ~ , a unique nonnegative number p(c ~) is associated , p(cr ) is the rank of ~ . For a set X , we define free algebra T ~ . ( X ) as the smallest set such that ; * T~:(X ) includes X . 
? If p(~)=0 for crE ~, then ~ ET~(X).
? If p(o ') = n (> 1) for a E , ~ and t l , .   .   . , E7-~ . ( X ), then t -= or ( t1, . ., tn ) E T~(X ) . t ~ is called the root symbol , or shortly , the root of t . 
Hereafter , a term in 7"~( X ) is also called a tree , and we use terminology of trees such as subtree , node and so on . 
Let G-(N , T , P , S ) be a contextfree grammar ( cfg ) where N , T , P and S are a set of nonterminal symbols , a set of terminal symbols , a set of productions and the initial symbol , respectively . A derivation tree in cfgG is a term defined as follows  . 
( T1) Everya ET is a derivation tree in G.
(T2 ) Assume that there are a production p : A---*X1 .   .   . X , ~( AEN , XI, .   .   . , XnENUT ) in P and n derivation trees t l , .   .   . t , ~ whose roots are labeled with P l , .   .   .   , pn , respectively , and ? if XiEN , then pl is a production Xi--~"" , whose lefthand side is Xi , and ? if XiET , then pi = ti = Xi . 
Then p(tl , .   .   . , t , ~) is a derivation tree in G . 
( T3) There are no other derivation trees.
Let T ~( G ) be the set of derivation trees in G , and 7? s ( G ) C7? ( G ) be the set of derivation trees whose root is labeled with a production of which lefthand side is the initial symbol S  . Clearly , T~s(G)C_T ~(?) holds . Remark that 7? s(G ) is a multi-sorted algebra , where the nonterminals are sorts , and the terminals and the labels of productions are operators  . 
A tree transducer ( Rounds 1969 ) defines a mapping from trees to trees . Since we are mainly interested in the string language generated by a tree transducer  , a " tree-to-string " version of transducer defined in  ( Engelfriet 1980 ) is used in this paper . For sets Q and X , let
Q\[X\]~q\[x\]lqeQ , xeX).
A tree-to-string transducer ( yT-transducer or simply transducer ) is defined to be a 5-tuple M = ( Q ,  ~ . , A , q0 , R ) where (1) Q is a finite set of states , (2) ~ is an input ranked alphabet , (3) A is an output alphabet , (4) q0EQ is the initial state , and ( 5 ) R is a finite set of rules of the form q\[c ~ ( xl ,  . . . , xn )\] --* v where q e Q , e = and ve(ZuQ\[xl ,   .   .   . , xn\])* . If any different rules in R have different left hand sides  , then Miscalled deterministic ( Engelfriet 1980) . 
A configuration of ay T-transducer is an element in  ( AUQ\[T ~ . (?)\])* . Derivation of M is defined as follows . Let t-----alq\[a(tl , .   .   .   , tn)\]a2 be a configuration where al , a2E(AUQ\[T ~ . (?)\])*, qEQ , ~ E ~, p(a ) = n and Q , .   .   . , tnET ~ . (?) . 
Assume that there is a rule q\[cr(xl , .   .   . , Xn)\]--*V in R . Let t ~ be obtained from v by substituting t\] ,   .   .   . , tn for xl , .   .   .   , xn , respectively , then we define t ~ M ultra2 ? Let :: ~ be the reflexive and transitive closure of := ~  . If t = ? . ~ t  ~, then we say t ~ is derived from t . If there is now EA * such that t ~ w , then we say no output is derived from t . 
A tree-to-string finite state translation system ( yT-fts or fts ) is defined by a yT-transducer M and a cfgG , written as ( M , G ) ( Rounds 1969) ( Thatcher 1967) . 
We define yL(M , G ) , called the yield language generated by yT-fts ( M , G ) , asy L(M , a)~weA*13 te~s(a ) , qo\[t\]~*Mw where A is an output alphabet and  q0 is the initial state of M . Anfts is called deterministic ( Engelfriet 1980 ) if the transducer M is deterministic . 

Engelfriet introduced a subclass offts'called finite-copying fts ' as follows  ( Engelfriet 1980 ) : Let ( M , G ) be anfts with output alphabet A and initial state  q0  , t be a derivation tree in G and t ~ be a subtree of t  . Assume that there is a derivation a: q0\[t \] = ~ w . Now , delete from this derivation a all the derivation steps which operates on t t  . This leads to the following new derivation which keeps t ~ untouched  ; !*: q0\[t\]where wi?A*for l<i<n+l . 
The state sequence of t ! in derivation a is defined to be  ( qi  ~ ,   .   .   . , qi .  )  . Derivationa has copying-bound k if , for every subtree of t , the length of its state sequence is at most k . Anfts(M , G ) is a finite-copying , if there is a constant k and for each w ? yL(M , G ) , there is a derivation treet in G and a derivation  q0\[t \] ~ w with copying-bound k . It is known that the determinism does not weaken the generative capacity of finite-copying fts '  ( Engelfriet 1980 )  . 
We note that anfts(M , G ) can be considered to be a model of a transformational grammar : A deep-structure of a sentence is represented by a derivation tree of G  , and M can be considered to transform the deep -structure into a sentence  ( or its surface structure )  . 
4 Subc lasses o f Lex ica l - funct iona l g rammars A simple subclass of lfg's  , called r-lfg's , is introduced in ( Nishino 1992) , which is shown to generate all the recursively enumerable languages  ( Nakanishi 1992 )  . Here , we define a nondeterministic copying If g ( nc-lfg ) as a proper subclass of r-lfg's . An nc-lfg is defined to be a 6-tuple G = ( N , T , P , S , N ~ t  ~ , A ~ tr ~ ) where: ( 1 ) N is a finite set of nonterminal symbols , (2) T is a finite set of terminal symbols , and ( 3 ) P is a finite set of annotated productions . Sometimes , a nonterminal symbol , a terminal symbol and an annotated production are abbreviated as a nonterminal  , a terminal and a production , respectively , i4) S ? N is the initial symbol , (5) Nat ~ is a finite set of attributes , and (6) A~tm is a finite set of atoms . 
An equation of the form Tatr = ~( atr ?
Nat , ) is called an S ( structure synthesizing ) schema , and an equation of the form Tatr . -=val(atr?Natr , val ? A ~ tm ) is called a V ( immediate value ) schema . A functional schema is either an S schema or a V schema  . 
Each production p ? P has the following form : p : A - ~  B1   B2   . . . B q , (4 . 2)
EvESlEs2""Esq where A?N , B1, B2, . ", Bq?NUT . Ev is a finite set of V schemat and Esj ( 1_<j <_ q ) is a singleton of an S schema . A--~B1B2" . . Bq in (4 . 2) is called the underlying production of p . Let P0 be the set of all the underlying productions of P  . CfgGo = ( N , T , P0 , S ) is called the underlying c/go/C . 
An f-structure of G is recursively defined as a set F -=-  ( atrl , call ) , ( at r2 , val2 > ,  . . . , latrk , valk ) where at r\], at r2, . . . , and atrk are distinct attributes , and each of vail , val2 ,  . "", and valk is an atomoranf-structure . We say that vali ( 1 < i < k ) is the value of a triin F and write F . atri-=vali . 
For acf gG ' = ( N ~ , T ' , P  ~ , S ~) , derivation relations in G ~ , denoted by A :: ~ a'a and A = ~* G~(A ? N' , a ?( N ' uT ')*) are defined in the usual way . 
Suppose Go = iN , T , P0 , S ) is the underlying cfg of an nc-lfgG = ( N , T , P , S , Nat , , Aa , m ) . Let t be a derivation tree in Go . ( In 4 . ,7 . and 8 . , the label of a leaf of a derivation tree is allowed to be a nonterminal  . ) Every internal node v in t has an f-structure , which is called the f-structure of v and written as Fv  . If an underlying production P0:A~BI" . B q ? P0 is applied at v , then v is labeled with either P0 itself , or p ( ? P ) of which P0 is the underlying production , if necessary . Let vi be the ith child of v(1<i<q ) . We define the values of both sides of a functional schema attached to the symbol in p  ( on v ) as follows : * the value of Tatr ( atr ? Nat , ) is Fv . atr , ? the value of + in an S schema is Fv ~ if the S schema is attached to the i  ( 1_<i_<q ) th symbol in the right-hand side of p , and ? the value of atomatmina V schema is arm itself  . 
We say that v satisfies functional schemata if for each functional schemalls = rib of p  , the values of lls and r/sonv are defined and equals with each other  . In this case , it is also said that Fv locally satisfies the functional schemata of p  . 
NOTE : Because the meaning of a V schema is independent of the position where it is annotated  , V schemat are attached to the lefthand side in this paper  . 
For a nonterminal AEN and a sentential form a E iNt_JT  ) * , let t be a derivation tree of a derivation A = ** Goa  . If all internal nodes in tsatisfy functional schemata  , then a is said to be derived from A and written asA = ~*  . a a In this case , the tree t is called a derivation tree of A := ~* Ga  . We also call ta derivation tree ( of a ) in G simply . 
The language generated by an nc-lfgG , denoted by LIG ) , is defined as L(G ) = we
T*\[S ~* wI.G
NOTE : In the definition of nc-lfg , even if " Esj ( 1 < j < q ) is a ' singleton of an S schema " is replaced with abc~otmt:\[count:eli %? Figure  1: A derivation tree of a abbccdd " Esj ( 1 < j < q ) is either a singleton of an S schema or an empty set "  , the generative capacity of nc-lfg is not changed . 
Example 4 . 1:Let G~xs = ( N , T , P , S , Nat , , A~tm ) be an nc-lfg where N =  S , A , B , T = a , b , c , d , Nat ~= count , Aatrn = e , and productions in P are ; pll:sT coA , t = l_T couB t = l '
P 12:A ~ aT couAt = ~ b , p~:B-~~iT couB tMd , 
P 14:T coAte ~ ~
P":Teou~t = e-~~
The language generated by GE xs is L ( GE xs ) = a ' ~ bn cndIn > 0 . Figure 1 shows a derivation tree of S~*aabbccddinGEXS . GEX3 Example 4 . 2: Let Gsx4 = ( N , T , P , S , N , t , , A~tm ) be an nc-lfg where g =  S , T = Ca , N , t , = log , A , tm = e , and productions in P are ; : siT_TJ = l , p22: TloS=e ~ a . 
The language generated by GEX4 is L ( GEx4 ) = a2"\] n > 0 . 
Example 4 . 3: Let GEX5 = ( N , T , P , S , N a ~ , , Aatm ) be an nc-lfg where N =  S , S ' , A , B , T = the , woman , men , and , drinks , smoke , respectively , N . t , = hum , list , A . tm = sg , pl , nil , and productions in P are ;
P3 o:S--*St respectively Tlist = l
P 31:
P 32: p 33:p34:
P35:
S~---* the woman and Adrinks and BTnum=sg Tlist = lTlist = l ' 
S ~ --* the men and A smoke and 13 Tnum = plTlist = ~ Tlist = ~'
A ~ the woman and ATnum=sgr list=.\['
A ~ the men and ATnum = plTlist = ~'
A ~ the woman
Tnum=sg
Tlist = nil ) p3~:A---.themen
Tnum = pl
Tlist = nil ) pz 7: B --* drinks and BTn ~ , m = ~ gTlist = ~'
P 38 : B--~smoke and B Thum=pliTlist = l' p39 : B --- . drinksTnum=sg
Tlist = nil ) p3 10: B---+s moke
Thum = pl
Tlist = nil)
G ~ xs generates " respectively " sentences such as " the woman and themend rinks and smoke respectively "  . 
For a set X of functional schemata , X is consistent iff neither the following ( 1 ) nor ( 2 ) holds . 
(1) Tatr = Call , Tatr=val2 cX for some at rENa , , and some vall , val2E
A atm such that call  #val 2.
(2) i Tatr=val , Tatr=~_CX for some a trEN at ~ and some valE A a t m  . 
Productions pl ,  ' ' '  , Pn are consistent iff Ul < i <_nE ( 0 is consistent where E ( / ) is the set of functional schemata of Pl . If productions are not consistent then they are called inconsistent  . 
An nc-lfgG is called a deterministically copying If g  ( dc-lfg )  , if any two productions A--+al and A--+ a2 whoes left hand sides are the same are inconsistent  . 
Suppose G = ( N , T , P , S , Nat , , Aatm ) is an nc-lfg . Let el , e2,-' .   , en denote the multiset which consists of element sel  , e2 , " ? ? , en that are not necessarily distinct . An SPN ( SubPhrase Nonterminal ) multiset in G is recursively defined as the following  1 through 3:   1  . S is an SPN multiset . 
2 . Suppose that A1 , A2 ,  ' "  , Ah(A1 , A2 ,  '" " , AhEN ) is an SPN multiset . Let A1--~al , each a trEN at , , let MS ~ , ~ be the multiset consisting of all the nonterminals which appear in al  ,  ' ' '  , a hand have an S schema Tatr--l . If MS at ~ is not empty , then MS~t ~ is also an SPN multiset . 
3. There is no other SPN multiset.
An nc-lfg such that the number of SPN multisets in G is finite is called a finite-copying lfg  ( fc-lfg )  . 
Example 4.4: Consider GEXs in Example 4.1.
Productions /912 and P14 are inconsistent with each other and so are P13 and Ply . SPN multisets in GEX3 are S and A , B)) . Hence GEXS is a dc-lfg and is an fc-lfg .   GEX5 is also adc-lfg and is an fc-lfg by the similar reason  . Similarly , GEX4 in Example 4 . 2 is a dc-lfg . SPN multisets in C~x ~ are S , S , S ) , S , S , S , S ) ,   . . . .
Hence GE x4 is not an fc-lfg.
NOTE : L ( GE xs ) is generated by a tree adjoining grammar . Suppose that a sentence has three or more phrases which have cooccurrence rlation like the one between the subject phrase and the verb phrase in the " respectively " sentence  . Tree adjoining grammars cannot generate such syntax while fc-lfg's or dc-lfg's can  , although the authors do not know a natural language which has such syntax so far  . 
By Lemma 2 . 1 and Theorem 8 . 1, fc-lfg's are polynomial-timer cognizable . Hence , it is desirable that whether a given lfgG is an fc-lfg or not is decidable  . Fortunately , it is decidable by the following lemma . 
Lemma 4 . 1: For a given nc-lfgG , it is decidable whether the number of SPN multisets in G is finite or infinite  . 
Proof . The problem can be reduced to the boundedness problem of Petrinets  , which is known to be decidable ( Peterson 1981) . 
5 Overview of the Results
Let ~' nc-lfg , ~' dc-lfg and ~-' fc-lfg denote the classes of languages generated by nc-lfg's  , dc-lfg's and fc-lfg's , respectively , and let y ~ # , , Y  ~ . d-fts and Y Elc-#s denote the classes of yield languages generated by fts '  , deterministic fts ' and finite-copying fts ' , respectively . Let l:vm cla and ?: mcfg be the classes of languages generated by pmcfg's and mcfg's  , respectively . Also let ?: ta9 be the class of language generated by tree adjoining grammars  . 
Inclusion relations among these classes of languages are summarized in Figure  2  . An equivalence relation *1 is shown in ( Weir 1992 )  . Relations *2 are new results which we prove in this paper . We also note that all the inclusion relations are proper  ; indeed , 0 lala2a3a41 n >_ED-Ea a2 nn_ .   .   .   .   . a2m_la2m\[n > EC-D form > 3 , ( by ( Vijay-Shanker 1987) . ) a2" In > 0 eS-C , ( by ( Kasami 1988a ) ( Seki 1991) . ) A relation B~A is shown in ( Engelfriet 1980) . By Lemma 2 . 1 , all languages in the region enclosed with the bold line are recognizable in polynomial time  . On the other hand , it is shown in this paper that Unary-3SAT , which is known to be A/P-complete ( Nakanishi 1992 )  , is in A . Hence , if ~ ~ A / ~ , then Unary-3SAT EA-B and the languages generated by fts ' ( or equivalently , nc-lfg's ) are not recognizable in polynomial time in general  . 
6 Generative Capacity offts '6 . 1 Deterministic fts ' Here , the proof of an inclusion relation yEd-#sC_/: vmc/gissketched  . 
Let ( M , G ) be a deterministicy T-fts where M = ( Q , ~ , A , ql , R ) and G = ( N , T , P , S ) . , We assume that Q = ql,---,ql,T = al , .   .   . an and P = Pl, .   .   . , Pm . Since the input for M is the set of derivation trees of G  , we assume that = Pl ,   .  -  . , Pro , al, .   .   . , an without loss of generality . 
We will construct a pmcfgGI -=-( N ~ , T  ~ , F ' , P ' , S ') such that yL(M , G ) ---- L(G ') NA * . Since /: pmc/g is closed under the intersection with a regular set  ( Kasami 1988 a ) (Seki 1991 )  , it follows that yL(U , G ) E?'pmclg . Let T ' = Atd b where b is a newly introduced symbol and let N '= S'  , RI ,   .   .   . , Rm , AI, .   .   .   , An where d ( Ri ) = d ( Aj ) = tfor1 < i <_m and 1 < j <_ n . Productions and functions of G~will be constructed to have the following property  . 
- - Ay ~/ t , *=2~, ~ c-lfg--B ~??~: ~ . __2 y ? ~_ : , , . __2?~_,:~--coL-? . ~: ~* jy ?: ~-: .  *=2 :- . : o- , : , __D (2) - - E - - ? c r ~ l : , a ~-- Figure 2: Inclusion relations between classes of languages .   ( 1 ) : The class of language generated by lcfrs'is equal to C  .   ( 2 ) : The class of language generated by head grammars is equal to D  . 

Property 6 . 1: There is ( a ~, .   .   . , a ~) eLG , ( R h ) ( resp . LG , ( Ah )) such that each of a , , , .   .   .   , as ~ does not contain b , and every remaining at ,   ,   .   .   .   , a , ~ contains b if and only if there is a derivation tree t of G such that the root is Ph  ( resp . a h ) and q s , \[t\]==>~c~s ~ ( 1 < j < u ) no output is derived from q , ~\[ t\](1_<j<v) . 

The basic idea is to simulate the move of tree transducer M which is scanning a symbol P h  ( resp . a h ) with state ql by the ith component of the nonterminal Rh  ( resp . Ah ) of pmcfgGI . During the move of M , it may happen that no rule is defined for a current configuration and hence no output will be derived ? The symbol b is introduced to represent such an undefined move explicitly  . 
We define RS(X ) ( XEN tOT ) as follows.
Rh\[the lefthand side of Phis X
RS(X ) = if XENA hifX = ahET .
Productions and functions are defined as follows.
Step 1: For each production Ph : I io --'* Y ~"" Yk ( Yo ~ N , Y = EN to T for 1 < u < k ) of cfgG , construct nonterminating productions
Rh-+\[&, .   .   .   , zk\]for every Z ~ ERS(Y ~) (1< u < k) , where f ph is defined as follows : For 1 < i < g , ? if the transducer M has no rule whose lefthand side is qi ~ a h  ( Xl ,   .   .   . , xk)\], then (6 . a)h ?''? if M has a rule-+?"ai , n , -lq~(i , ,~ , _D\[x~4~ , , , _D\]a ~ , n , , then f p \ [ i \ ] \ [  x . . , 5:k \] __a ei,ox~,(i,o),7(i,o)ei ,\] (6 . 4) h~??""Ot- , ni--lglz" , ni--l'rl'i , ni--l'Ogi , ni  ~ ,  (1 , )\[) where = (1< , < k ) . 
( Since M is deterministic , there exists at most one rule whose lefthand side is qi~h  ( '" " ) \] and hence the above construction is well defined ?  ) Step 2: For each a hET , construct a terminating production Ah-"+fah where f ~ h is defined as follows : For  1 < i < i , ? if M has no rule whose lefthand side is qi\[a h \]  , then ~ a ~\[ i \] ~-- b . 
? if M has a rule qi\[a h\]--+hi , then f\[~&ai . 
Step 3: For each R hERS(S ) , construct S'--+/ fi~st\[Rh\]where/fi , st\[(x\] ,   .   .   . , xl)\]~x\] . Intuitively , the right hand side of this production corresponds to the initial configuration  , that is , M is in the initial state ql and scanning the root symbol Ph of a derivation tree  , where the left hand side of Ph is the initial symbol 

The pmcfgGI constructed above satisfies Property  6  . 1 . Its proof is found in ( Kaji 1992 ) and omitted in this paper . By Property 6 . 1, we obtain the following lemma . 
Lemma 6 . 1: yl : d_f , sC ff . pmcfg . 0 The reverse inclusion relation l : p,~c/gC_Y ~ . d-B , can be shown in a similar way , and the following theorem holds ?
Theorem 6 . 2: yf- . d . /, s:E-pmcfg?06 . 2 Nondeterministic fts ' In this section , the generative capacity of nondeterministicy T -fts ' is investigated  , from the viewpoint of computational complexity ? We have already shown that Y ~  . d-~s : ~ . pmcfg , and hence every language in this class can be recognized in time polynomial of the length of an input string ? Our result here is : there is a nondeterministic fts that generates an A/'~ -complete language ? In the following  , a language called Unary-3SAT , which is ArT'-complete ( Nakanishi 1992) , is considered , and then it is shown to belong to yL:/ , a . 
A Unary-3 CNF is a ( nonempty )   3CNF in which the subscripts of variables are represented in unary  . A positive literal xi in a 3CNF is represented by 1i $ in a Unary-3CNF   . Similarly , a negative literal--xl is represented by 12 # . For example , a3 CNF ( xiv x2 v ~ x a ) A ( x a V ~ x \] v ~ x ~ ) is represented by a Unary-3CNF   15115111# A I1151#I i # . 
U nary-3SAT is the set of all satisfiable Unary-3CNF's  . 
Next , we construct a nondeterministicy T-fts(M , G ) that generates Unary-3SAT . Define a cfgG = ( N , T , P , S ) where N =  S , T , F , T = e and the productions in P are as follows: rss:S--+SrsT:S--+TrsF:S-+F"rTT : T--+TrTF:T--+F  . 
?' Te:T--+erFT:F-+T?'FF:F--+FrFe : F-+eq=qo  , q~ , q t , qa , ~ rSS ,   .   .   . , rF e,z ~= L ^,$,# . 
Since there are many rules in R , we will use an abbreviated notation . For example , following four rules qa Ir Tel Xll-~15 , q~\[rT e(X)\]~1#qdrF~tX)\]+15 , qo\[rF  ~ ( X ) \]-~1  #are abbreviated as " q~\[rT ~ ( X ) \] = q~\[rF ~ ( X ) \]--*15 or 1#' . By using this notation , the rules in R are defined as follows . 
q0\[r ~ ( ~ ) \]-~ qo\[~\]Aq0\[x\]qo\[r~s ( ~ ) \]-~ q&\]q0\[~sr ( ~ ) \] = q0\[~ sv ( ~ ) \] = q~\[r  ~ r ( ~ ) \] = q~\[rSF ( X ) \]--~qdx\]q~\[x\]q~\[x\]or q~\[x\]qt\[x\]qa\[x \] or q a\[x\]q a\[x\]q t\[x\]q  , \[ r **( x)\]=q& . ~(~)\]-* lq , \[~\] or 1~q , \[ rr , (~)\] ~ 1 , q , \[ r ~ , ( ~)\] = q , \[ r ~( ~)\] -* lq , \[ x \] or 1  #q , \[rF~ ( x ) \]---+1 #qo\[rr ~ ( ~ ) \] = qo\[rr ~ ( ~ ) \] = qoirF ~ ( ~ ) \] = qa\[rFF ( X ) \]lq a\[X\]or 15 or 1 #qo\[r ~ c ( x ) \] = q . \[ r~(~)\]++1, or 1 # . 
The readers can easily verify that this yT-fts generates  Unary-3SAT  . 
7Equivalence off-'nc-lfg and Y?ftsFirst , we show ? , ~ c-lfgC_Y ? q t ~ . For a given nc-lfgG = ( N , T , P , S , Nat , , A~m ) , an equivalent fts(M , GI ) is constructed in the following way . 
Let t be a derivation tree in lfgG and the f -structure of the root node of t be F =  ( atrl , F1) ,   .   .   . , ( atr , ~, Fn) . F is represented by a derivation tree r = p , p(T l ,  ' -  .   , rn ) in G ' , where ri ( 1 < i < n ) is a derivation tree in G ' which represents Fi recursively  . And sp is a set of productions such that F locally satisfies the functional schemata of all productions in sp  . M transforms r into the yield of t , i . e . , the terminal string ob-talned by concatenating the labels of leaves  , in a topdown way . 
\[ TRANS7 . 11 Let N =  A1 ,  ' "  , Am , S = A1 and Nat , = atrl ,  -  .   . , at r,~ . Define SP as the set of all consistent subsets of P  . 
Step 1: G '= ( N' , d , P ' , S ') , where N ' =  S , pls peSPUS ' and P ' = p' , p : S , p - --* S'- .   . S'tup ;= ~ .   .   . : s'--+Ss,l,pesPup ~, m:~s'-+deC :_/ . 
For a derivation tree r in G ' and a node v ' is applied  , the snb tree rooted by the where p , pith child of v represents he value of attribute at ri  . 
Step 2: M = ( Q,E,T,ql,R ) is defined as follows . 
Define Q = ql , .   .   . , qm . A state qj ( 1 < j_<m ) corresponds to nonterminal At in N . Define E--d where p(p ' . , ) = p(p .   .   .   .   . ~) = '= and p(d ) = O . And define R by the following ( i ) through ( iii )  . 
( i ) qj  ~ . .  .   .   . , ( x ) \]-~ qj\[x\] ( 1_<j < m ) belongs to R for each s p ? SP . 
( ii ) Let r be a derivation tree in G ' . When plsp is the production applied at the root of r and a state of M is q  , o , M chooses a production p whose lefthand side is Auo  , if exists , in sp . 
NOTE : Since productions in sp are consistent , there is an f-structure , which locally satisfies the functional schemata of all productions in sp  . 
For each production pEs p in SP p:A~o--* a0 Amal .   .   . OtL-1At , LaL
E v ~ a t r v ~ = ~ . . . ~atrvL = ~ where A~zEN and alET*(0<l<L ) , the following rule belongs to R : q#o~tsp(Xl ,   ,  *' , xn)\]-~"0q , , \ [ X ~ , \]" I .   . -" L--lq,~\[X , ~\] ~ .  (7 . 5) ( iii ) Noother rule belongs to R . 
Next , Y ? ~ sC_?~c-zf9 is shown . For a given f ts(M , G ) , the following algorithm constructs an nc-lfgG ' such that L  ( G ' ) --- yL ( M , G ) . 
\[ TRANS7 . 2\] Suppose that a given fts(M , G ) is G--(N , T , P , S ) and M--(Q , E , A , ql , R ) where Q = ql , q2 ,  '"  , qm . Let n be the maximum length of the righthand side of a production in P  . 
Define an nc-lfgGI = ( N' , A , P ' , SI , N ~ r , A at m ) as follows . 
Step 1: N '= C\[J\]IC ? N , lgj < muaI ~ lla?T , 1 < j < _m , 
S '= S\[11,
Nat ~= atriI1 < i<nU rule , and
A at m = PIP is the label of a production in P .
A derivation tree t = p(tl ,  ' "  , th ) in G is represented by an f-structure ( rule , p ) , ( atrl , E l ) ,  ? " . ,( atrh , Fh ) of G ' where Fi ( 1 < i < h ) is an f-structure which represents the subtree ti recursively  . 
Each pair of a symbol ( either nonterminal or terminal ) X of G and a state qj of M is represented by a single nonterminal X\[J\] in G '  . 

Step 2: A move when M at state qj reads a symbol p which is the label of a production p:C--+  . . .   , can be simulated by a production in G ~ whose lefthand side is C\[J\]Tute=p " Formally  , the set P ~ of productions of GI is constructed as follows  . 
( i ) Let p:C--* X1 " " X h be a production in P where CEN , XiENUT (1<i < h) , and let : qj\[p(x\] ,  . .  . , Xh)\]--~ajoq , 7,,\[z ~, ,,\] aj, .   .   . q , 7 , zj\[X  ~ , ,L ' \] O~jL , be a rule in R where ~ kEA*(0<k<Lj ) , q ' Tj ~ EQ , and xvj ~ etXl ,  ' "  , X h(1 < l <
Lj).
Then , the following production belongs to P~:y\[r /jl\]V\[nJLj\]C\[J\]  7  . . . 40 tjo-~vjl Otjl "'" AI~jLjO tjLj " Trute=p ) Tatr , Tatrj ( ii ) Let qj\[a \] ---* flj be a rule in R where a 6 T and f l j 6 A * . Then the production a\[J\]--~flj belongs to P ' . 
( iii ) No other production belongs to P'.
By TRANS7 . 1 and TRANS7 . 2, the following theorem is obtained . A formal proof is found in ( Nakanishi 1993) . 
Theorem 7.1: f~nc-lfg=Y ~' fts.
Corollary 7.2: ~' dc-lfg----Y~.d-fts.
Proof . In TRANS7 . 1 , if G is a dc-lfg , then no spESP contains distinct productions whose lefthand sides are the same and hence the constructed transducer M becomes deterministic by the construction  . Conversely , in TRANS7 . 2 , if M is deterministic , then there exist no consistent productions p ~ and p ~ in P ~ whose lefthand sides are the same and hence the constructed nc-lfg is adc-lfg  . 
8 Equ iva lence o f ~ fc - l fg and ?~ mcfg To prove f~fc-lfg CLm cfg  , we give an algorithm which translates a given fc -lfgG =  ( N , T , P , S , Nat , , Aatm ) into an mcfg G I such that
L(G ') = L(G).
\[ TRANS 8\] We explain the algorithm by using the fc-lfg GEX3 in Example 4  . 1 . Anm cfgG '= ( N' , T , F , P ' , S ) is constructed as follows . 
Step 1: N ' = ( the set of nonterminals which has a one-to-one correspondence with the set of SPN multisets in G  )  =  ( S )  , ( A , B ) ( for GE x3 in Example 4 . 1)
P '=?, and
F = ?.
Step2: For each SPN multiset M0 =  A1, A2, ?" . , Ak  of G , consider every tuple ( pl , P2 ,  ""  , Pk ) of productions in P whose lefthand sides are A1 , A2 , '" , A k respectively and which are consistent . ( Suppose that , if we write an SPN multiset as A1 , A2 ,  .  "  , A k , then Aj's are arranged according to a predefined total order < on N  , that is , A1 < A2 <_"'" <_A khold . ) For an SPN multiset A , BinGEX3 , the following two pairs of productions have to be considered : b  p12 : A---*a T cou At , ~
PI3: B~cBd , T count -- ~ p14: TcounA = epls : Tc?uB = eFor ( Pl , P2 ,  '"  , Pk ) , a production p ' and a function f of G ' are constructed and added to P ' and F  , respectively as follows . 
The multiset M of the nonterminals appearing in the right hand side of some pj  ( 1 < j < k ) are partitioned into multisets M1 , M2 , " - . , Mh with respect to the S schemata attached to the nonterminals in pj's  . That is ,  (11//1 , M2 ,  - "  , Mh ) are the coarsest partition of M such that for each M  , , (1 < u < h ) , the following condition holds . 
Each nonterminal in M ~, has the same S schema.
By the definition , each M = (1< u < h ) is an SPN multiset in G . _Construct a production of m cf gp': hit0  --*  f\[M1  , ffI2 ,  '"  , Mh\]where M =  is the nonterminal of G ' which corresponds to M =  ( 1 < u < h )  . Add p ' to P ' and f to F where f is defined as follows  . Suppose pj : Aj ~ ajoB jl "'' Bj L~ajL ~ ( 1 < j < k ) where AjEN , BflEN(1<l<Lj ) and ajzET*(0<l<Lj ) , and let --= (1<< h ) where Cu , EN(1 < v < su) . Then , for 1 < j < k , the jth component f\[J\] off is :_A f\[J\] ( X - l , x2 ,  " " '  , X h ) = otjo Y jl Otjl Yj2 ""? Yj Lj Otj Lj where x-u = ( xul , xu2 ,  ' "  , xus . ) (1< u < h) . 
For j (1 <_j < k ) and l(1_<l_<nj ) , if z ~ B j l = C ~ , , then yfl-=x~ , v . Note that , since Mu's are a partition of M , f satisfies Right Linearity ( see 2 . ) and hence G ' is an mcfg . 
For example , consider the above ( P12 , P13 ) -The nonterminals appearing in the righthand the same  . Thus , we construct he following mcfg production : ( A , B ) --* fl\[(A , B )\] where fl\[(Xl , x2)\] = ( aXlb , cx2d ) . 
Consider the following pair of productions as another example : ~: ~  bDTatr2 p ~: A --* a Tat rB---*cD P'2 : BT at rA = ? T at rC = j , 1" air 2 -- , L The multiset of nonterminals in the right hand sides are partitioned into  M1 = IA , B ( for arT1) and M~=C , D , D for at r2) . For ( p  ~ , p ~) , the following mcfg production is constructed : ( A , B ) --+ g\[(A , B ) , ( C , D , D )\] where g\[(x11 , x12) ,  (=21 , X 22 , x23)\]~--(ax12 bx22 , xilx . lc3) . V\]Example 8 . 1: TRANS8 translates fc-lfgGE x3 in Example 4 . 1 into an equivalent mcfgG ~ x3 = ( N' , T , F , P ' , SI ) where N ' , S ' are those illustrated in TRANS8 , F = fo\[(xl , x2)\] = XlX2 , fl\[(Xl , X2)\] = ( aXlb , cx2d ) , f2-----(~' , ~') , and , P '= ( S)--+fo\[(A , B )\] , ( A , B ) --* fl\[(A , B )\] , ( A , B)--~f2 .  0
Theorem 8.1: ~ rncfg = Efc-lfg.
Proof : ? yc-tfgC ? mcf9 can be proved by
TRANS8 . Conversely , for a given mcfgG , anfc-lfgG ' such that L ( G ' ) = L ( G ) can be constructed in a similar way to TRANS8 . Details are found in ( Ando 1992) . \[19 Conclusion In this paper , we introduce three subclasses of lfg's , two of which can be recognized in polynomial time  . Also this paper clarifies the relations between the generative capacities of those subclasses  , pmcfg's and fts ' . 
References
Ando , S . et al 1992 . " Subclasses of Lexical-Functional Grammars Which Are Recognizable in Polynomial Time "  , IEICE Technical Report , 

Engelfriet , J . and Heyker , L .  1991 . " The String Generating Power of ContextFree Hypergraph Grammars "  , J . Comput . & Syst . Sci . , 43:328-360 . 
Engelfriet , J . , Rosenberg , G . and Slutzki , G .  1980 . 
" Tree Transducers , L Systems , and Two-Way Machines " , J . Comput . & Syst . Sei . , 20:150-202 . 
Joshi , A . K . , Levy , L . and Takahashi , M . 1975 " Tree Adjunct Grammars ", J . of Comput . & Syst . Sci . , 10:136-163 . 
Gazdar , G . and Pullum , G . K .  1985 . " Computationally Relevant Properties of Natural Languages and Their Grammars "  , New Generation Computing ,  3:273-306 . 
Kaji , Y . et al 1992 . " Parallel Multiple ContextFree Grammars and FiniteState Translation Systems "  , IEICE Technical Report , COMP92-34 . 
Kaplan , R . and Bresnan , J .  1982 . " Lexical-Functional Grammar " , The Mental Representation of Grammatical Relations  , J . Bresnan ( ed . ), MIT press : 173-281 . 
Kasami , T . et al 1988a . " Generalized ContextFree Grammars and Multiple ContextFree Grammars "  , 
Trans . IEICE , J71-D-I , 5:758-765.
Kasami , T . et al 1988b . " On the Membership Problem for Head Language and Multiple ContextFree Languages  , Trans . IEICE , J71-D-I , 6:935-941 . 
Nakanishi , R . et al 1993 . " On the Generative Capacity of Tree Translation Systems and Lexical Functional-Grammars "  , Technical Paper of FAI , Japanese Society for Artificial Intelligence , SIG-

Nakanishi , R . et al 1992 . " On the Generative Capac-ity of Lexical -Functional Grammars "  , IEICE Trans . 
Inf . and Syst ., 75-D , 7:509-516.
Nishino , T .  1991 . " Mathematical Analysis of Lexical-Functional Grammars - - Complexity  , Parsability , and Learnability --" , Language Research Institute , Seoul
National University.
Nishino , T .  1992 . " Relating Attribute Grammars and Lexical -Functional Grammars "  , Information Sciences ,  66:1-22 . 
Peterson , J . L .  1981 . " PetriNet Theory and the Modeling of Systems " , Prentice-Hall . 
Pollard , C . J .  1984 . " Generalized Phrase Structure Grammars , Head Grammars and Natural Language " , Ph . D . dissertation , Stanford University . 
Rounds , W.C . 1969. " ContextFree Grammars on
Trees ", Proc . of ACM STOC : 143-148.
Seki , H . et al 1991 . " On Multiple ContextFree Grammars " , Theoretical Computer Science ,  88 ,  2:191-229 . 
Thatcher , J . W .  1967 . " Characterizing Derivation Trees of ContextFree Grammars through a Gener-alarization of Finite Automata Theory "  . J . Comput . 
& Syst . Sci ., 1:317-322.
Vijay-Shanker , K .  1987 . " A Study of Tree Adjoining Grammars ", Ph . D . thesis , University of Pennsylvania . 
Vijay-Shanker , K . , Weir , D . J . and Joshi , A . K .  1987 . 
" Characterizing structural descriptions produced by various grammatical formalisms "  , Proc . of 25th meeting of Assoc . Comput . Ling .  :104-111 . 
Weir , D . J .  1988 . " Characterizing Mildly Context-Sensitive Grammar Formalisms "  , Ph . D . thesis , University of Pennsylvania . 
Weir , D . J .  1992 . " Linear ContextFree Rewriting Systems and Deterministic Tree-Walking Transducers "  , Proc . of 30th meeting of Assoc . Comput . Ling . 

